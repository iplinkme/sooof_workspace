cscope 15 /home/medev/16.04/uhd -q 0000012441 0002909929
	@firmware/e300/battery/adc.c

16 
	~<avr/io.h
>

18 
	~"adc.h
"

19 
	~"utûs.h
"

21 
	$adc_öô
()

24 
DIDR0
 |= 0x1;

27 
ADMUX
 = (1 << 
REFS0
)

28 | (0 << 
ADLAR
)

29 | (0 << 
MUX0
);

32 
ADCSRA
 = 
	`BIT
(
ADPS2
Ë| BIT(
ADPS1
Ë| BIT(
ADPS0
);

33 
	}
}

35 
uöt16_t
 
	$adc_sögÀ_shŸ
()

37 
uöt16_t
 
vÆue
;

40 
ADCSRA
 |(1 << 
ADEN
);

43 
ADCSRA
 |(1 << 
ADSC
);

46 
ADCSRA
 & (1 << 
ADSC
)) {

51 
vÆue
 = (
ADCL
 << 0);

52 
vÆue
 |(
ADCH
 << 8);

55 
ADCSRA
 &~(1 << 
ADEN
);

57  
vÆue
;

58 
	}
}

	@firmware/e300/battery/adc.h

21 #i‚de‡
ADC_H


22 
	#ADC_H


	)

24 
	~<°döt.h
>

30 
adc_öô
();

36 
uöt16_t
 
adc_sögÀ_shŸ
();

	@firmware/e300/battery/bq2419x.c

16 
	~"bq2419x.h
"

17 
	~"io.h
"

18 
	~"i2c_twi.h
"

19 
	~"öãºu±.h
"

20 
	~"pmu.h
"

21 
	~"mcu_£âögs.h
"

22 
	~"utûs.h
"

24 
	~<°dboﬁ.h
>

25 
	~<°rög.h
>

27 
	~<utû/©omic.h
>

28 
	~<utû/dñay.h
>

30 c⁄° 
uöt8_t
 
	gBQ2419X_I2C_ADDR
 = 0x6b;

32 
	#bq2419x_ªad
(
ªg
, 
vÆ
) \

33 (
	`i2c_twi_ªad
(
BQ2419X_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

35 
	#bq2419x_wrôe
(
ªg
, 
vÆ
) \

36 (
	`i2c_twi_wrôe
(
BQ2419X_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

39 c⁄° 
uöt8_t
 
	gBQ2419X_REG_INPUT_SRC_CTL
 = 0x00;

40 c⁄° 
uöt8_t
 
	gBQ2419X_REG_PWR_ON_CONFIG
 = 0x01;

41 c⁄° 
uöt8_t
 
	gBQ2419X_REG_CHARGE_CURRENT
 = 0x02;

42 c⁄° 
uöt8_t
 
	gBQ2419X_REG_PRE_TERM_CURRENT
 = 0x03;

43 c⁄° 
uöt8_t
 
	gBQ2419X_REG_CHARGE_VOLTAGE
 = 0x04;

44 c⁄° 
uöt8_t
 
	gBQ2419X_REG_TIMER_CONTROL
 = 0x05;

45 c⁄° 
uöt8_t
 
	gBQ2419X_REG_THERMAL_REG_CTRL
 = 0x06;

46 c⁄° 
uöt8_t
 
	gBQ2419X_REG_MISC_OPERATION
 = 0x07;

47 c⁄° 
uöt8_t
 
	gBQ2419X_REG_SYSTEM_STATUS
 = 0x08;

48 c⁄° 
uöt8_t
 
	gBQ2419X_REG_FAULT
 = 0x09;

49 c⁄° 
uöt8_t
 
	gBQ2419X_REG_VENDOR_PART_REV
 = 0x0a;

52 c⁄° 
uöt8_t
 
	gBQ2419X_EN_HIZ_MASK
 = 
BIT
(7);

53 c⁄° 
uöt8_t
 
	gBQ2419X_EN_HIZ_SHIFT
 = 7;

56 c⁄° 
uöt8_t
 
	gBQ2419X_REGISTER_RESET_MASK
 = 
BIT
(7);

57 c⁄° 
uöt8_t
 
	gBQ2419X_REGISTER_RESET_SHIFT
 = 7;

58 c⁄° 
uöt8_t
 
	gBQ2419X_I2C_TIMER_RESET
 = 
BIT
(6);

59 c⁄° 
uöt8_t
 
	gBQ2419X_I2C_TIMER_SHIFT
 = 
BIT
(6);

61 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_CFG_MASK
 = 
BIT
(5) | BIT(4);

62 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_CFG_SHIFT
 = 4;

63 c⁄° 
uöt8_t
 
	gBQ2419X_SYS_MIN_MASK
 = 
BIT
(3) | BIT(2) | BIT(1);

64 c⁄° 
uöt8_t
 
	gBQ2419X_SYS_MIN_SHIFT
 = 1;

67 c⁄° 
uöt8_t
 
	gBQ2419X_ICHG_MASK
 = 
BIT
(7) | BIT(6) \

68 | 
BIT
(5) | BIT(4) | BIT(3) | BIT(2);

69 c⁄° 
uöt8_t
 
	gBQ2419X_ICHG_SHIFT
 = 2;

71 c⁄° 
uöt8_t
 
	gBQ2419X_FORCE_20_PCT_MASK
 = 
BIT
(0);

72 c⁄° 
uöt8_t
 
	gBQ2419X_FORCE_20_PCT_SHIFT
 = 0;

74 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_CFG_DISABLED
 = 0x00;

75 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_CFG_CHARGE
 = 0x01;

76 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_CFG_OTG
 = 0x03;

83 c⁄° 
uöt8_t
 
	gBQ2419X_EN_TERM_MASK
 = 
BIT
(7);

84 c⁄° 
uöt8_t
 
	gBQ2419X_EN_TERM_SHIFT
 = 
BIT
(7);

85 c⁄° 
uöt8_t
 
	gBQ2419X_TERM_STAT_MASK
 = 
BIT
(6);

86 c⁄° 
uöt8_t
 
	gBQ2419X_TERM_STAT_SHIFT
 = 6;

87 c⁄° 
uöt8_t
 
	gBQ2419X_WDT_MASK
 = 
BIT
(5) | BIT(4);

88 c⁄° 
uöt8_t
 
	gBQ2419X_WDT_SHIFT
 = 4;

89 c⁄° 
uöt8_t
 
	gBQ2419X_EN_TIMER_MASK
 = 
BIT
(3);

90 c⁄° 
uöt8_t
 
	gBQ2419X_EN_TIMER_SHIFT
 = 3;

93 c⁄° 
uöt8_t
 
	gBQ2419X_BAT_COMP_MASK
 = 
BIT
(7) | BIT(6) | BIT(5);

94 c⁄° 
uöt8_t
 
	gBQ2419X_BAT_COMP_SHIFT
 = 5;

95 c⁄° 
uöt8_t
 
	gBQ2419X_TREG_MASK
 = 
BIT
(1) | BIT(0);

96 c⁄° 
uöt8_t
 
	gBQ2419X_TREG_SHIFT
 = 0;

99 c⁄° 
uöt8_t
 
	gBQ2419X_DPDM_EN_MASK
 = 
BIT
(7);

100 c⁄° 
uöt8_t
 
	gBQ2419X_DPDM_EN_SHIFT
 = 7;

101 c⁄° 
uöt8_t
 
	gBQ2419X_TMR2X_EN_MASK
 = 
BIT
(6);

102 c⁄° 
uöt8_t
 
	gBQ2419X_TMR2X_EN_SHIFT
 = 6;

103 c⁄° 
uöt8_t
 
	gBQ2419X_BATFET_DISABLE_MASK
 = 
BIT
(5);

104 c⁄° 
uöt8_t
 
	gBQ2419X_BATFET_DISABLE_SHIFT
 = 5;

106 c⁄° 
uöt8_t
 
	gBQ2419X_JEITA_VSET_MASK
 = 
BIT
(4);

107 c⁄° 
uöt8_t
 
	gBQ2419X_JEITA_VSET_SHIFT
 = 
BIT
(4);

110 c⁄° 
uöt8_t
 
	gBQ2419X_INT_MASK_MASK
 = 
BIT
(1) | BIT(0);

111 c⁄° 
uöt8_t
 
	gBQ2419X_INT_MASK_SHIFT
 = 0;

114 c⁄° 
uöt8_t
 
	gBQ2419X_VBUS_STAT_MASK
 = 
BIT
(7) | BIT(6);

115 c⁄° 
uöt8_t
 
	gBQ2419X_VBUS_STAT_SHIFT
 = 6;

116 c⁄° 
uöt8_t
 
	gBQ2419X_CHG_STAT_MASK
 = 
BIT
(5) | BIT(4);

117 c⁄° 
uöt8_t
 
	gBQ2419X_CHG_STAT_SHIFT
 = 4;

118 c⁄° 
uöt8_t
 
	gBQ2419X_DPM_STAT_MASK
 = 
BIT
(3);

119 c⁄° 
uöt8_t
 
	gBQ2419X_DPM_STAT_SHIFT
 = 3;

120 c⁄° 
uöt8_t
 
	gBQ2419X_PG_STAT_MASK
 = 
BIT
(2);

121 c⁄° 
uöt8_t
 
	gBQ2419X_PG_STAT_SHIFT
 = 2;

122 c⁄° 
uöt8_t
 
	gBQ2419X_THERM_STAT_MASK
 = 
BIT
(1);

123 c⁄° 
uöt8_t
 
	gBQ2419X_THERM_STAT_SHIFT
 = 1;

124 c⁄° 
uöt8_t
 
	gBQ2419X_VSYS_STAT_MASK
 = 
BIT
(0);

125 c⁄° 
uöt8_t
 
	gBQ2419X_VSYS_STAT_SHIFT
 = 0;

127 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_STATUS_NOT_CHARGING
 = 0x00;

128 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_STATUS_PRE_CHARGE
 = 0x01;

129 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_STATUS_FAST_CHARGE
 = 0x02;

130 c⁄° 
uöt8_t
 
	gBQ2419X_CHARGE_STATUS_DONE
 = 0x03;

133 c⁄° 
uöt8_t
 
	gBQ2419X_WATCHDOG_FAULT_MASK
 = 
BIT
(7);

134 c⁄° 
uöt8_t
 
	gBQ2419X_WATCHDOG_FAULT_SHIFT
 = 7;

135 c⁄° 
uöt8_t
 
	gBQ2419X_BOOST_FAULT_MASK
 = 
BIT
(6);

136 c⁄° 
uöt8_t
 
	gBQ2419X_BOOST_FAULT_SHIFT
 = 6;

137 c⁄° 
uöt8_t
 
	gBQ2419X_CHG_FAULT_MASK
 = 
BIT
(5) | BIT(4);

138 c⁄° 
uöt8_t
 
	gBQ2419X_CHG_FAULT_SHIFT
 = 4;

139 c⁄° 
uöt8_t
 
	gBQ2419X_BAT_FAULT_MASK
 = 
BIT
(3);

140 c⁄° 
uöt8_t
 
	gBQ2419X_BAT_FAULT_SHIFT
 = 3;

141 c⁄° 
uöt8_t
 
	gBQ2419X_NTC_FAULT_MASK
 = 
BIT
(2) | BIT(1) | BIT(0);

142 c⁄° 
uöt8_t
 
	gBQ2419X_NTC_FAULT_SHIFT
 = 0;

144 
io_pö_t
 
	gCHG_IRQ
 = 
IO_PB
(1);

146 
	sbq2419x_pmu_ch¨gî


148 
pmu_ch¨gî_t
 
	mpmu_ch¨gî
;

149 
uöt8_t
 
	mÁu…
;

150 
uöt8_t
 
	m°©us
;

151 
boﬁ
 
	mfú°_time
;

153 
boﬁ
 
	mb©ãry_°©us_vÆid
;

154 
boﬁ
 
	mb©ãry_hó…h_vÆid
;

155 
boﬁ
 
	mch¨gî_hó…h_vÆid
;

157 vﬁ©ûê
boﬁ
 
	mevít
;

158 } 
	tbq2419x_pmu_ch¨gî_t
;

160 
bq2419x_pmu_ch¨gî_t
 
	gch¨gî
;

162 vﬁ©ûê
boﬁ
 
	gbq2419x_evít
 = 
Ál£
;

164 
öt8_t
 
	$bq2419x_£t_ch¨gî
(
boﬁ
 
⁄
)

166 
uöt8_t
 
c⁄fig
;

167 
öt8_t
 
ªt
;

169 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_PWR_ON_CONFIG
, &
c⁄fig
);

170 i‡(
ªt
)

171  
ªt
;

173 
c⁄fig
 &~
BQ2419X_CHARGE_CFG_MASK
;

174 i‡(
⁄
)

175 
c⁄fig
 |1 << 
BQ2419X_CHARGE_CFG_SHIFT
;

177 
ªt
 = 
	`bq2419x_wrôe
(
BQ2419X_REG_PWR_ON_CONFIG
, 
c⁄fig
);

178 i‡(
ªt
)

179  
ªt
;

182 
	}
}

184 
öt8_t
 
	$bq2419x_ª£t
()

186 
uöt8_t
 
c⁄fig
;

187 
öt8_t
 
ªt
;

188 
uöt8_t
 
ªåy
 = 100;

190 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_PWR_ON_CONFIG
, &
c⁄fig
);

191 i‡(
ªt
)

192  
ªt
;

194 
c⁄fig
 |
BQ2419X_REGISTER_RESET_MASK
;

195 
ªt
 = 
	`bq2419x_wrôe
(
BQ2419X_REG_PWR_ON_CONFIG
, 
c⁄fig
);

198 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_PWR_ON_CONFIG
, &
c⁄fig
);

199 i‡(!(
c⁄fig
 & 
BQ2419X_REGISTER_RESET_MASK
))

201 
	`_dñay_ms
(10);

202 } 
ªåy
--);

204  
ªt
;

205 
	}
}

207 
	$bq2419x_£t_ho°_mode
()

209 
uöt8_t
 
timî_˘æ
;

212 
	`bq2419x_ªad
(
BQ2419X_REG_TIMER_CONTROL
, &
timî_˘æ
);

213 
timî_˘æ
 &~
BQ2419X_WDT_MASK
;

214 
	`bq2419x_wrôe
(
BQ2419X_REG_TIMER_CONTROL
, 
timî_˘æ
);

215 
	}
}

218 
pmu_ch¨ge_ty≥
 
	$bq2419x_ch¨gî_gë_ch¨ge_ty≥
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

220 
uöt8_t
 
vÆ
;

222 (Ë
pmu_ch¨gî
;

224 
	`bq2419x_ªad
(
BQ2419X_REG_PWR_ON_CONFIG
, &
vÆ
);

226 
vÆ
 &
BQ2419X_CHARGE_CFG_MASK
;

227 
vÆ
 >>
BQ2419X_CHARGE_CFG_SHIFT
;

230 i‡(!
vÆ
)

231  
PMU_CHARGE_TYPE_NONE
;

233 
	`bq2419x_ªad
(
BQ2419X_REG_CHARGE_CURRENT
, &
vÆ
);

235 
vÆ
 &
BQ2419X_FORCE_20_PCT_MASK
;

236 
vÆ
 >>
BQ2419X_FORCE_20_PCT_SHIFT
;

238 i‡(
vÆ
)

239  
PMU_CHARGE_TYPE_TRICKLE
;

241  
PMU_CHARGE_TYPE_FAST
;

242 
	}
}

244 
pmu_hó…h
 
	$bq2419x_ch¨gî_gë_hó…h
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

246 
uöt8_t
 
Áu…
;

247 
öt8_t
 
ªt
;

248 
bq2419x_pmu_ch¨gî
 *
bq2419x_ch¨gî
;

250 
bq2419x_ch¨gî
 = 
	`c⁄èöî_of
(

251 
pmu_ch¨gî
, 
bq2419x_pmu_ch¨gî
,Ömu_charger);

253 i‡(
bq2419x_ch¨gî
->
ch¨gî_hó…h_vÆid
) {

254 
Áu…
 = 
bq2419x_ch¨gî
->fault;

255 
bq2419x_ch¨gî
->
ch¨gî_hó…h_vÆid
 = 
Ál£
;

257 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_FAULT
, &
Áu…
);

258 i‡(
ªt
)

259  
PMU_HEALTH_UNKNOWN
;

263 i‡(
Áu…
 & 
BQ2419X_BOOST_FAULT_MASK
) {

264  
PMU_HEALTH_OVERVOLTAGE
;

266 
Áu…
 &
BQ2419X_CHG_FAULT_MASK
;

267 
Áu…
 >>
BQ2419X_CHG_FAULT_SHIFT
;

268 
Áu…
) {

271  
PMU_HEALTH_GOOD
;

275  
PMU_HEALTH_UNSPEC_FAIL
;

278  
PMU_HEALTH_OVERHEAT
;

281  
PMU_HEALTH_SAFETY_TIMER_EXPIRE
;

283  
PMU_HEALTH_UNKNOWN
;

286 
	}
}

288 
pmu_°©us
 
	$bq2419x_b©ãry_gë_°©us
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

290 
uöt8_t
 
Áu…
, 
ss_ªg
;

291 
öt8_t
 
ªt
;

292 
bq2419x_pmu_ch¨gî
 *
bq2419x_ch¨gî
;

294 
bq2419x_ch¨gî
 = 
	`c⁄èöî_of
(

295 
pmu_ch¨gî
, 
bq2419x_pmu_ch¨gî
,Ömu_charger);

297 i‡(
bq2419x_ch¨gî
->
b©ãry_°©us_vÆid
) {

298 
Áu…
 = 
bq2419x_ch¨gî
->fault;

299 
ss_ªg
 = 
bq2419x_ch¨gî
->
°©us
;

300 
bq2419x_ch¨gî
->
b©ãry_°©us_vÆid
 = 
Ál£
;

302 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_FAULT
, &
Áu…
);

303 i‡(
ªt
)

304  
ªt
;

306 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_SYSTEM_STATUS
, &
ss_ªg
);

307 i‡(
ªt
)

308  
ªt
;

311 
Áu…
 &
BQ2419X_CHG_FAULT_MASK
;

312 
Áu…
 >>
BQ2419X_CHG_FAULT_SHIFT
;

317 i‡(!(
ss_ªg
 & 
BQ2419X_PG_STAT_MASK
Ë|| 
Áu…
) {

318  
PMU_STATUS_DISCHARGING
;

320 
ss_ªg
 &
BQ2419X_CHG_STAT_MASK
;

321 
ss_ªg
 >>
BQ2419X_CHG_STAT_SHIFT
;

323 
ss_ªg
) {

325  
PMU_STATUS_NOT_CHARGING
;

328  
PMU_STATUS_CHARGING
;

330  
PMU_STATUS_FULL
;

333  
PMU_STATUS_NOT_CHARGING
;

334 
	}
}

336 
boﬁ
 
	$bq2419x_b©ãry_gë_⁄löe
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

338 
uöt8_t
 
b©„t_dißbÀ
;

339 
öt8_t
 
ªt
;

341 (Ë
pmu_ch¨gî
;

343 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_MISC_OPERATION
, &
b©„t_dißbÀ
);

344 i‡(
ªt
)

345  
Ál£
;

347 
b©„t_dißbÀ
 &
BQ2419X_BATFET_DISABLE_MASK
;

348 
b©„t_dißbÀ
 >>
BQ2419X_BATFET_DISABLE_SHIFT
;

350  !
b©„t_dißbÀ
;

351 
	}
}

353 
pmu_hó…h
 
	$bq2419x_b©ãry_gë_hó…h
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

355 
uöt8_t
 
Áu…
;

356 
öt8_t
 
ªt
;

357 
bq2419x_pmu_ch¨gî
 *
bq2419x_ch¨gî
;

359 
bq2419x_ch¨gî
 = 
	`c⁄èöî_of
(

360 
pmu_ch¨gî
, 
bq2419x_pmu_ch¨gî
,Ömu_charger);

362 i‡(
bq2419x_ch¨gî
->
b©ãry_hó…h_vÆid
) {

363 
Áu…
 = 
bq2419x_ch¨gî
->fault;

364 
bq2419x_ch¨gî
->
b©ãry_hó…h_vÆid
 = 
Ál£
;

366 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_FAULT
, &
Áu…
);

367 i‡(
ªt
)

368  
ªt
;

371 i‡(
Áu…
 & 
BQ2419X_BAT_FAULT_MASK
)

372  
PMU_HEALTH_OVERVOLTAGE
;

374 
Áu…
 &
BQ2419X_NTC_FAULT_MASK
;

375 
Áu…
 >>
BQ2419X_NTC_FAULT_SHIFT
;

376 
Áu…
) {

379  
PMU_HEALTH_GOOD
;

384  
PMU_HEALTH_COLD
;

389  
PMU_HEALTH_OVERHEAT
;

391  
PMU_HEALTH_UNKNOWN
;

394 
	}
}

396 
boﬁ
 
	$bq2419x_ch¨gî_gë_⁄löe
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

398 
uöt8_t
 
vÆ
;

399 
öt8_t
 
ªt
;

401 (Ë
pmu_ch¨gî
;

403 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_SYSTEM_STATUS
, &
vÆ
);

404 i‡(
ªt
)

405  
ªt
;

408  !!(
BQ2419X_PG_STAT_MASK
 & 
vÆ
);

409 
	}
}

411 
ölöe
 
boﬁ
 
	$bq2419x_gë_úq
()

414  !
	`io_ã°_pö
(
CHG_IRQ
);

415 
	}
}

417 
uöt8_t
 
	$bq2419x_pmu_ch¨gî_check_evíts
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

419 
uöt8_t
 
Êags
;

420 
öt8_t
 
ªt
;

421 
uöt8_t
 
°©us
;

422 
uöt8_t
 
Áu…
;

423 
uöt8_t
 
isc
;

424 vﬁ©ûê
boﬁ
 
evít
;

425 
bq2419x_pmu_ch¨gî_t
 *
bq2419x_ch¨gî
;

427 
bq2419x_ch¨gî
 = 
	`c⁄èöî_of
(

428 
pmu_ch¨gî
, 
bq2419x_pmu_ch¨gî
,Ömu_charger);

430 
evít
 = 
Ál£
;

431 
Êags
 = 
PMU_CHARGER_EVENT_NONE
;

433 
	`ATOMIC_BLOCK
(
ATOMIC_RESTORESTATE
) {

434 i‡(
bq2419x_ch¨gî
->
evít
) {

435 
bq2419x_ch¨gî
->
evít
 = 
Ál£
;

436 
evít
 = 
åue
;

440 i‡(
evít
) {

442 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_SYSTEM_STATUS
, &
°©us
);

443 i‡(
ªt
)

444  
ªt
;

446 i‡(
°©us
 !
bq2419x_ch¨gî
->status) {

447 i‡((
bq2419x_ch¨gî
->
°©us
 & 
BQ2419X_PG_STAT_MASK
) &&

448 !(
°©us
 & 
BQ2419X_PG_STAT_MASK
)) {

452 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_INPUT_SRC_CTL
,

453 &
isc
);

454 i‡(
ªt
)

457 
isc
 &~
BQ2419X_EN_HIZ_MASK
;

458 
ªt
 = 
	`bq2419x_wrôe
(
BQ2419X_REG_INPUT_SRC_CTL
,

459 
isc
);

460 i‡(
ªt
)

464 i‡((
bq2419x_ch¨gî
->
°©us
 & 
BQ2419X_CHG_STAT_MASK
)

465 !(
°©us
 & 
BQ2419X_CHG_STAT_MASK
)) {

466 i‡((
°©us
 & 
BQ2419X_CHG_STAT_MASK
Ë>> 
BQ2419X_CHG_STAT_SHIFT
 == 0x3)

467 
Êags
 |
PMU_CHARGER_EVENT_CHARGE_DONE
;

469 
bq2419x_ch¨gî
->
°©us
 = status;

470 
Êags
 |
PMU_CHARGER_EVENT_STATUS_CHANGE
;

473 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_FAULT
, &
Áu…
);

474 i‡(
ªt
)

475  
ªt
;

477 i‡(
Áu…
 !
bq2419x_ch¨gî
->fault) {

478 
bq2419x_ch¨gî
->
Áu…
 = fault;

479 
bq2419x_ch¨gî
->
b©ãry_°©us_vÆid
 = 
åue
;

480 
bq2419x_ch¨gî
->
b©ãry_hó…h_vÆid
 = 
åue
;

481 
bq2419x_ch¨gî
->
ch¨gî_hó…h_vÆid
 = 
åue
;

482 
Êags
 |
PMU_CHARGER_EVENT_FAULT_CHANGE
;

485 i‡(!
bq2419x_ch¨gî
->
fú°_time
)

486 
bq2419x_ch¨gî
->
fú°_time
 = 
åue
;

488  
Êags
;

489 
	}
}

491 
úqªtu∫_t
 
	$bq2419x_úq_h™dÀr
()

499 i‡(
	`bq2419x_gë_úq
()) {

500 
ch¨gî
.
evít
 = 
åue
;

501  
IRQ_HANDLED
;

503 (Ë
ch¨gî
.
evít
;

504  
IRQ_NONE
;

505 
	}
}

507 c⁄° 
pmu_ch¨gî_›s_t
 
	gbq2419x_pmu_ch¨gî_›s
 = {

508 .
£t_ch¨gî_vﬁège
 = 
NULL
,

509 .
	g£t_ch¨gî_cuºít
 = 
NULL
,

511 .
	ggë_ch¨ge_ty≥
 = 
bq2419x_ch¨gî_gë_ch¨ge_ty≥
,

512 .
	g£t_ch¨ge_ty≥
 = 
NULL
,

513 .
	ggë_ch¨gî_hó…h
 = 
bq2419x_ch¨gî_gë_hó…h
,

514 .
	ggë_ch¨gî_⁄löe
 = 
bq2419x_ch¨gî_gë_⁄löe
,

516 .
	ggë_b©ãry_hó…h
 = 
bq2419x_b©ãry_gë_hó…h
,

517 .
	ggë_b©ãry_°©us
 = 
bq2419x_b©ãry_gë_°©us
,

518 .
	ggë_b©ãry_⁄löe
 = 
bq2419x_b©ãry_gë_⁄löe
,

520 .
	gcheck_evíts
 = 
bq2419x_pmu_ch¨gî_check_evíts
,

523 
öt8_t
 
	$bq2419x_öô
()

525 
uöt8_t
 
id
, 
öput_§c_˘æ
, 
ú_comp
;

526 
öt8_t
 
ªt
;

529 
	`mem£t
(&
ch¨gî
, 0, (charger));

530 
ch¨gî
.
pmu_ch¨gî
.
›s
 = &
bq2419x_pmu_ch¨gî_›s
;

531 
ch¨gî
.
fú°_time
 = 
åue
;

535 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_VENDOR_PART_REV
, &
id
);

536 i‡(
ªt
)

537 
Áû_i2c_ªad
;

540 
	`io_öput_pö
(
CHG_IRQ
);

541 
	`io_£t_pö
(
CHG_IRQ
);

543 
	`bq2419x_ª£t
();

544 
	`bq2419x_£t_ho°_mode
();

558 
	`bq2419x_ªad
(
BQ2419X_REG_INPUT_SRC_CTL
, &
öput_§c_˘æ
);

561 
öput_§c_˘æ
 |= 0x7;

563 
ªt
 = 
	`bq2419x_wrôe
(
BQ2419X_REG_INPUT_SRC_CTL
, 
öput_§c_˘æ
);

564 i‡(
ªt
)

565  
ªt
;

568 
ªt
 = 
	`bq2419x_ªad
(
BQ2419X_REG_THERMAL_REG_CTRL
, &
ú_comp
);

569 i‡(
ªt
)

570  
ªt
;

571 
ú_comp
 &~
BQ2419X_BAT_COMP_MASK
;

572 
ú_comp
 |(0x02 << 
BQ2419X_BAT_COMP_SHIFT
);

575 
ú_comp
 &~
BQ2419X_TREG_MASK
;

576 
ú_comp
 |(0x03 << 
BQ2419X_TREG_SHIFT
);

578 
ªt
 = 
	`bq2419x_wrôe
(
BQ2419X_REG_THERMAL_REG_CTRL
, 
ú_comp
);

579 i‡(
ªt
)

580  
ªt
;

582 
	`pmu_ªgi°î_ch¨gî
(&
ch¨gî
.
pmu_ch¨gî
);

586 
Áû_i2c_ªad
:

588 
	}
}

	@firmware/e300/battery/bq2419x.h

21 #i‚de‡
BQ2419X_H


22 
	#BQ2419X_H


	)

24 
	~<°dboﬁ.h
>

25 
	~<°döt.h
>

27 
	~"pmu.h
"

28 
	~"öãºu±.h
"

31 
	mBQ2419X_MODEL_24192
 = 0x0,

32 
	mBQ2419X_MODEL_24191
 = 0x1,

33 } 
	tbq2491x_modñ_t
;

38 
öt8_t
 
bq2419x_öô
();

44 
úqªtu∫_t
 
bq2419x_úq_h™dÀr
();

	@firmware/e300/battery/eeprom.c

16 
	~"ì¥om.h
"

17 
	~<avr/ì¥om.h
>

20 
	gì¥om
[] 
	gEEMEM
 = {0x00, 0x00, 0x00};

23 
uöt8_t
* 
	gEEPROM_AUTOBOOT_OFFSET
 = (uint8_t *) 0x00;

24 
uöt16_t
 *
	gEEPROM_LAST_FULL_OFFSET
 = (uint16_t *) 0x04;

26 c⁄° 
uöt8_t
 
	gEEPROM_AUTOBOOT_MAGIC
 = 0xa5;

28 
boﬁ
 
	$ì¥om_gë_autoboŸ
()

30  
EEPROM_AUTOBOOT_MAGIC
 =
	`ì¥om_ªad_byã
(
EEPROM_AUTOBOOT_OFFSET
);

31 
	}
}

33 
	$ì¥om_£t_autoboŸ
(
boﬁ
 
⁄
)

35 
	`ì¥om_upd©e_byã
(
EEPROM_AUTOBOOT_OFFSET
, 
⁄
 ? 
EEPROM_AUTOBOOT_MAGIC
 : 0x00);

36 
	}
}

38 
uöt16_t
 
	$ì¥om_gë_œ°_fuŒ
()

40  
	`ì¥om_ªad_w‹d
(
EEPROM_LAST_FULL_OFFSET
);

41 
	}
}

43 
	$ì¥om_£t_œ°_fuŒ_ch¨ge
(
uöt16_t
 
ch¨ge
)

45 
	`ì¥om_upd©e_w‹d
(
EEPROM_LAST_FULL_OFFSET
, 
ch¨ge
);

46 
	}
}

	@firmware/e300/battery/eeprom.h

21 #i‚de‡
EEPROM_H


22 
	#EEPROM_H


	)

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

26 
	~<avr/io.h
>

32 
boﬁ
 
ì¥om_gë_autoboŸ
();

40 
ì¥om_£t_autoboŸ
(
boﬁ
 
⁄
);

46 
uöt16_t
 
ì¥om_gë_œ°_fuŒ
();

53 
ì¥om_£t_œ°_fuŒ_ch¨ge
(
uöt16_t
 
ch¨ge
);

	@firmware/e300/battery/fpga.c

16 
	~"ì¥om.h
"

17 
	~"Âga.h
"

18 
	~"•i.h
"

19 
	~"mcu_£âögs.h
"

20 
	~"utûs.h
"

21 
	~<utû/dñay.h
>

22 
	~<°rög.h
>

23 
	~<°dboﬁ.h
>

25 
	sÂga_tx_mem_m≠0
 {

26 
uöt16_t
 
	mb©ãry_vﬁège
;

27 
uöt8_t
 
	mb©ãry_°©us
;

28 
uöt8_t
 
	mch¨gî_°©us
;

29 
uöt8_t
 
	munu£d
[2];

30 
uöt8_t
 
	mvîsi⁄
;

31 
uöt8_t
 
	mty≥
;

32 } 
	tÂga_tx_mem_m≠0_t
;

34 
	sÂga_tx_mem_m≠1
 {

35 
uöt8_t
 
	m°©us
;

36 
uöt16_t
 
	mvﬁège
;

37 
uöt16_t
 
	mãmp
;

38 
uöt16_t
 
	mch¨ge
;

39 
uöt8_t
 
	mty≥
;

40 } 
	tÂga_tx_mem_m≠1_t
;

42 
	sÂga_tx_mem_m≠2
 {

43 
uöt8_t
 
	munu£d
[4];

44 
uöt8_t
 
	m£âögs
;

45 
uöt16_t
 
	mch¨ge_œ°_fuŒ
;

46 
uöt8_t
 
	mty≥
;

47 } 
	tÂga_tx_mem_m≠2_t
;

49 
	sÂga_rx_mem_m≠0
 {

50 
uöt8_t
 
	munu£d
[2];

51 
uöt16_t
 
	mvÆue
;

52 
uöt8_t
 
	mªg
;

53 
uöt8_t
 
	mos_°©us
;

54 } 
	tÂga_rx_mem_m≠0_t
;

56 
	sÂga_rx_mem_m≠1
 {

57 
uöt8_t
 
	munu£d
[3];

58 
uöt16_t
 
	mvÆue
;

59 
uöt8_t
 
	mªg
;

60 } 
	tÂga_rx_mem_m≠1_t
;

62 
	sÂga_rx_mem_m≠
 {

63 
uöt8_t
 
	mvÆid
;

65 
Âga_rx_mem_m≠0_t
 
	mm≠0
;

66 
Âga_rx_mem_m≠1_t
 
	mm≠1
;

68 
uöt8_t
 
	mty≥
;

69 } 
	tÂga_rx_mem_m≠_t
;

71 
boﬁ
 
	gshutdown
 = 
Ál£
;

72 
boﬁ
 
	gwrôe_ch¨ge
 = 
Ál£
;

73 
boﬁ
 
	gwrôe_£âögs
 = 
Ál£
;

75 vﬁ©ûê
Âga_tx_mem_m≠0_t
 
	gÂga_tx0
;

76 vﬁ©ûê
Âga_tx_mem_m≠1_t
 
	gÂga_tx1
;

77 vﬁ©ûê
Âga_tx_mem_m≠2_t
 
	gÂga_tx2
;

78 vﬁ©ûê
Âga_rx_mem_m≠_t
 
	gÂga_rx
;

81 c⁄° 
uöt8_t
 
	gBATTERY_TEMP_ALERT_MASK
 = 
BIT
(7) | BIT(6);

82 c⁄° 
uöt8_t
 
	gBATTERY_TEMP_ALERT_SHIFT
 = 6;

83 c⁄° 
uöt8_t
 
	gBATTERY_ONLINE_MASK
 = 
BIT
(5);

84 c⁄° 
uöt8_t
 
	gBATTERY_ONLINE_SHIFT
 = 5;

85 c⁄° 
uöt8_t
 
	gBATTERY_HEALTH_MASK
 = 
BIT
(4) | BIT(3) | BIT(2);

86 c⁄° 
uöt8_t
 
	gBATTERY_HEALTH_SHIFT
 = 2;

87 c⁄° 
uöt8_t
 
	gBATTERY_STATUS_MASK
 = 
BIT
(1) | BIT(0);

88 c⁄° 
uöt8_t
 
	gBATTERY_STATUS_SHIFT
 = 0;

91 c⁄° 
uöt8_t
 
	gCHARGER_HEALTH_MASK
 = 
BIT
(5) | BIT(4);

92 c⁄° 
uöt8_t
 
	gCHARGER_HEALTH_SHIFT
 = 4;

93 c⁄° 
uöt8_t
 
	gCHARGER_ONLINE_MASK
 = 
BIT
(3);

94 c⁄° 
uöt8_t
 
	gCHARGER_ONLINE_SHIFT
 = 3;

96 c⁄° 
uöt8_t
 
	gCHARGER_CHARGE_TYPE_MASK
 = 
BIT
(1) | BIT(0);

97 c⁄° 
uöt8_t
 
	gCHARGER_CHARGE_TYPE_SHIFT
 = 0;

100 
	$Âga_£t_b©ãry_vﬁège
(
uöt16_t
 
vﬁège
)

102 
Âga_tx0
.
b©ãry_vﬁège
 = 
vﬁège
;

103 
	}
}

105 
	$Âga_£t_b©ãry_ãmp_Æît
(
uöt8_t
 
Æît
)

107 
uöt8_t
 
°©us
 = 
Âga_tx0
.
b©ãry_°©us
;

109 
°©us
 &~
BATTERY_TEMP_ALERT_MASK
;

110 
°©us
 |
Æît
 << 
BATTERY_TEMP_ALERT_SHIFT
;

112 
Âga_tx0
.
b©ãry_°©us
 = 
°©us
;

113 
	}
}

115 
	$Âga_£t_b©ãry_⁄löe
(
boﬁ
 
⁄löe
)

117 
uöt8_t
 
°©us
 = 
Âga_tx0
.
b©ãry_°©us
;

119 
°©us
 &~
BATTERY_ONLINE_MASK
;

120 
°©us
 |(
⁄löe
 ? 1 : 0Ë<< 
BATTERY_ONLINE_SHIFT
;

122 
Âga_tx0
.
b©ãry_°©us
 = 
°©us
;

123 
	}
}

125 
	$Âga_£t_b©ãry_hó…h
(
uöt8_t
 
hó…h
)

127 
uöt8_t
 
°©us
 = 
Âga_tx0
.
b©ãry_°©us
;

129 
°©us
 &~
BATTERY_HEALTH_MASK
;

130 
°©us
 |
hó…h
 << 
BATTERY_HEALTH_SHIFT
;

132 
Âga_tx0
.
b©ãry_°©us
 = 
°©us
;

133 
	}
}

135 
	$Âga_£t_b©ãry_°©us
(
uöt8_t
 
°
)

137 
uöt8_t
 
°©us
 = 
Âga_tx0
.
b©ãry_°©us
;

139 
°©us
 &~
BATTERY_STATUS_MASK
;

140 
°©us
 |
°
 << 
BATTERY_STATUS_SHIFT
;

142 
Âga_tx0
.
b©ãry_°©us
 = 
°©us
;

143 
	}
}

145 
	$Âga_£t_ch¨gî_hó…h
(
uöt8_t
 
hó…h
)

147 
uöt8_t
 
°©us
 = 
Âga_tx0
.
ch¨gî_°©us
;

149 
°©us
 &~
CHARGER_HEALTH_MASK
;

150 
°©us
 |
hó…h
 << 
CHARGER_HEALTH_SHIFT
;

152 
Âga_tx0
.
ch¨gî_°©us
 = 
°©us
;

153 
	}
}

155 
	$Âga_£t_ch¨gî_⁄löe
(
boﬁ
 
⁄löe
)

157 
uöt8_t
 
°©us
 = 
Âga_tx0
.
ch¨gî_°©us
;

159 
°©us
 &~
CHARGER_ONLINE_MASK
;

160 
°©us
 |(
⁄löe
 ? 1 : 0Ë<< 
CHARGER_ONLINE_SHIFT
;

162 
Âga_tx0
.
ch¨gî_°©us
 = 
°©us
;

163 
	}
}

165 
	$Âga_£t_ch¨gî_ch¨ge_ty≥
(
uöt8_t
 
ty≥
)

167 
uöt8_t
 
°©us
 = 
Âga_tx0
.
ch¨gî_°©us
;

169 
°©us
 &~
CHARGER_CHARGE_TYPE_MASK
;

170 
°©us
 |
ty≥
 << 
CHARGER_CHARGE_TYPE_SHIFT
;

172 
Âga_tx0
.
ch¨gî_°©us
 = 
°©us
;

173 
	}
}

175 
	$Âga_£t_gauge_ch¨ge
(
uöt16_t
 
ch¨ge
)

177 
Âga_tx1
.
ch¨ge
 = charge;

178 
	}
}

180 
uöt16_t
 
	$Âga_gë_gauge_ch¨ge
()

182  
Âga_tx1
.
ch¨ge
;

183 
	}
}

185 
boﬁ
 
	$Âga_gë_wrôe_ch¨ge
()

187 
boﬁ
 
ªt
 = 
Ál£
;

189 i‡(
wrôe_ch¨ge
) {

190 
ªt
 = 
wrôe_ch¨ge
;

191 
wrôe_ch¨ge
 = 
Ál£
;

194  
ªt
;

195 
	}
}

197 
uöt8_t
 
	$Âga_gë_£âögs
()

199  
Âga_tx2
.
£âögs
;

200 
	}
}

202 
boﬁ
 
	$Âga_gë_wrôe_£âögs
()

204 
boﬁ
 
ªt
 = 
Ál£
;

206 i‡(
wrôe_£âögs
) {

207 
ªt
 = 
wrôe_£âögs
;

208 
wrôe_£âögs
 = 
Ál£
;

211  
ªt
;

212 
	}
}

214 
	$Âga_£t_gauge_ch¨ge_œ°_fuŒ
(
uöt16_t
 
ch¨ge
)

216 
Âga_tx2
.
ch¨ge_œ°_fuŒ
 = 
ch¨ge
;

217 
	}
}

219 
	$Âga_£t_gauge_ãmp
(
uöt16_t
 
ãmp
)

221 
Âga_tx1
.
ãmp
 =Åemp;

222 
	}
}

224 
	$Âga_£t_gauge_vﬁège
(
uöt16_t
 
vﬁt
)

226 
Âga_tx1
.
vﬁège
 = 
vﬁt
;

227 
	}
}

229 
	$Âga_£t_gauge_°©us
(
uöt8_t
 
°©us
)

231 
Âga_tx1
.
°©us
 = status;

232 
	}
}

234 
boﬁ
 
	$Âga_gë_shutdown
()

236  
shutdown
;

237 
	}
}

239 
	$Âga_öô
()

241 
	`mem£t
((*Ë&
Âga_tx0
, 0, (fpga_tx0));

242 
	`mem£t
((*Ë&
Âga_tx1
, 0, (fpga_tx1));

243 
	`mem£t
((*Ë&
Âga_tx2
, 0, (fpga_tx2));

244 
Âga_tx0
.
ty≥
 = 0;

245 
Âga_tx0
.
vîsi⁄
 = 
VERSION_MAJ
 << 4 | 
VERSION_MIN
;

247 
Âga_tx1
.
ty≥
 = 1;

248 
Âga_tx2
.
ty≥
 = 2;

251 
Âga_tx2
.
£âögs
 = 
	`BIT
(1);

252 
Âga_tx2
.
£âögs
 |
	`ì¥om_gë_autoboŸ
(Ë? 
	`BIT
(0) : 0x0;

254 
	`mem£t
((*Ë&
Âga_rx
, 0, (fpga_rx));

256 
shutdown
 = 
Ál£
;

257 
	}
}

259 
	$Âga_h™dÀ_wrôe
(
uöt8_t
 
ªg
, 
uöt16_t
 
vÆue
)

261 i‡(
ªg
 == 0x10) {

262 
Âga_tx1
.
ch¨ge
 = 
vÆue
;

263 
wrôe_ch¨ge
 = 
åue
;

264 } i‡(
ªg
 == 0x14) {

265 
Âga_tx1
.
°©us
 = 
vÆue
;

266 } i‡(
ªg
 == 0x1c) {

267 
Âga_tx2
.
£âögs
 = (
uöt8_t
Ë
vÆue
;

268 
wrôe_£âögs
 = 
åue
;

270 
	}
}

272 
	$Âga_sync
()

274 
Âga_rx_mem_m≠_t
 
rx
;

276 
	`•i_å™ß˘_buf
((
uöt8_t
 *Ë&
Âga_tx0
, (uöt8_à*Ë&
rx
, 8);

277 i‡(
rx
.
vÆid
) {

278 i‡(
rx
.
ty≥
 =0 &&Ñx.
m≠0
.
os_°©us
 == 0x7a)

279 
shutdown
 = 
åue
;

280 i‡(
rx
.
ty≥
 == 1)

281 
	`Âga_h™dÀ_wrôe
(
rx
.
m≠1
.
ªg
,Ñx.m≠1.
vÆue
);

283 
	`•i_å™ß˘_buf
((
uöt8_t
 *Ë&
Âga_tx1
, (uöt8_à*Ë&
rx
, 8);

284 i‡(
rx
.
vÆid
) {

285 i‡(
rx
.
ty≥
 =0 &&Ñx.
m≠0
.
os_°©us
 == 0x7a)

286 
shutdown
 = 
åue
;

287 i‡(
rx
.
ty≥
 == 1)

288 
	`Âga_h™dÀ_wrôe
(
rx
.
m≠1
.
ªg
,Ñx.m≠1.
vÆue
);

290 
	`•i_å™ß˘_buf
((
uöt8_t
 *Ë&
Âga_tx2
, (uöt8_à*Ë&
rx
, 8);

291 i‡(
rx
.
vÆid
) {

292 i‡(
rx
.
ty≥
 =0 &&Ñx.
m≠0
.
os_°©us
 == 0x7a)

293 
shutdown
 = 
åue
;

294 i‡(
rx
.
ty≥
 == 1)

295 
	`Âga_h™dÀ_wrôe
(
rx
.
m≠1
.
ªg
,Ñx.m≠1.
vÆue
);

297 
	}
}

	@firmware/e300/battery/fpga.h

21 #i‚de‡
FPGA_H


22 
	#FPGA_H


	)

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

31 
Âga_öô
();

41 
Âga_£t_b©ãry_vﬁège
(
uöt16_t
 
vﬁège
);

49 
Âga_£t_b©ãry_ãmp_Æît
(
uöt8_t
 
Æît
);

51 
Âga_£t_b©ãry_⁄löe
(
boﬁ
 
⁄löe
);

53 
boﬁ
 
Âga_gë_b©ãry_⁄löe
();

61 
Âga_£t_b©ãry_hó…h
(
uöt8_t
 
hó…h
);

69 
Âga_£t_b©ãry_°©us
(
uöt8_t
 
°©us
);

78 
Âga_£t_ch¨gî_°©us
(
uöt8_t
 
°©us
);

80 
Âga_£t_ch¨gî_⁄löe
(
boﬁ
 
⁄löe
);

82 
Âga_£t_ch¨gî_ch¨ge_ty≥
(
uöt8_t
 
ty≥
);

90 
Âga_£t_ch¨gî_hó…h
(
uöt8_t
 
hó…h
);

98 
Âga_£t_gauge_ch¨ge
(
uöt16_t
 
ch¨ge
);

106 
uöt16_t
 
Âga_gë_gauge_ch¨ge
();

114 
Âga_£t_gauge_ch¨ge_œ°_fuŒ
(
uöt16_t
 
ch¨ge
);

122 
Âga_£t_gauge_ãmp
(
uöt16_t
 
ãmp
);

130 
Âga_£t_gauge_vﬁège
(
uöt16_t
 
vﬁt
);

138 
Âga_£t_gauge_°©us
(
uöt8_t
 
°©us
);

148 
boﬁ
 
Âga_gë_shutdown
();

156 
boﬁ
 
Âga_gë_wrôe_ch¨ge
();

164 
uöt8_t
 
Âga_gë_£âögs
();

172 
boﬁ
 
Âga_gë_wrôe_£âögs
();

178 
Âga_sync
();

	@firmware/e300/battery/i2c_twi.c

16 
	~"i2c_twi.h
"

17 
	~"mcu_£âögs.h
"

18 
	~"utûs.h
"

20 
	~<°dboﬁ.h
>

21 
	~<avr/io.h
>

22 
	~<utû/twi.h
>

23 
	~<utû/dñay.h
>

25 c⁄° 
uöt8_t
 
	gI2C_TIMEOUT
 = 10;

27 
ölöe
 
uöt8_t
 
	$I2C_READ_ADDR
(c⁄° 
uöt8_t
 
x
)

29  (
x
 << 1) | 0x1;

30 
	}
}

32 
ölöe
 
uöt8_t
 
	$I2C_WRITE_ADDR
(c⁄° 
uöt8_t
 
x
)

34  (
x
 << 1) & 0xfe;

35 
	}
}

37 
	$i2c_twi_öô_ˇlc
(
uöt32_t
 
øã
)

39 
uöt8_t
 
twbr
;

40 
twbr
 = ((
F_CPU
/
øã
)-16)/2;

42 
TWBR
 = 
twbr
;

44 
PRR
 &~
	`BIT
(
PRTWI
);

47 
TWCR
 &~(
	`BIT
(
TWSTO
Ë| BIT(
TWEN
));

48 
TWCR
 |
	`BIT
(
TWEN
);

49 
	}
}

51 
	$i2c_twi_öô
(
i2c_•ìd_t
 
•ìd
)

53 
•ìd
) {

54 
I2C_SPEED_400K
:

55 
TWBR
 = 16;

57 
I2C_SPEED_100K
:

58 
TWBR
 = 32;

61 
TWBR
 = 32;

66 
TWSR
 = 0;

69 
TWCR
 &~(
	`BIT
(
TWSTO
Ë| BIT(
TWEN
));

70 
TWCR
 |
	`BIT
(
TWEN
);

71 
	}
}

73 
	$i2c_twi_waô_f‹_com∂ëe
()

75 
uöt8_t
 
timeout
 = 100;

78 
	`_dñay_us
(10);

79 
timeout
--;

80 } 
timeout
 && !(
TWCR
 & (1<<
TWINT
)));

81 
	}
}

83 
	$i2c_twi_°¨t
()

85 
TWCR
 = 
	`BIT
(
TWINT
Ë| BIT(
TWEN
Ë| BIT(
TWSTA
);

86 
	`i2c_twi_waô_f‹_com∂ëe
();

87 
	}
}

89 
	$i2c_twi_°›
()

91 
TWCR
 = 
	`BIT
(
TWINT
Ë| BIT(
TWEN
Ë| BIT(
TWSTO
);

92 
	}
}

95 
uöt8_t
 
	$i2c_twi_ªcv_byã
(
boﬁ
 
ack
)

97 
TWCR
 = 
	`BIT
(
TWINT
Ë| BIT(
TWEN
Ë| (
ack
 ? BIT(
TWEA
) : 0);

98 
	`i2c_twi_waô_f‹_com∂ëe
();

99  
TWDR
;

100 
	}
}

102 
	$i2c_twi_£nd_byã
(
uöt8_t
 
d©a
)

104 
TWDR
 = 
d©a
;

105 
TWCR
 = 
	`BIT
(
TWINT
Ë| BIT(
TWEN
);

106 
	`i2c_twi_waô_f‹_com∂ëe
();

107 
	}
}

109 
öt8_t
 
	$i2c_twi_ªad
(
uöt8_t
 
addr
, uöt8_à
ªg
, uöt8_à*
vÆue
)

112 
	`i2c_twi_°¨t
();

113 
	`i2c_twi_£nd_byã
(
	`I2C_WRITE_ADDR
(
addr
));

114 
	`i2c_twi_£nd_byã
(
ªg
);

117 
	`i2c_twi_°¨t
();

118 
	`i2c_twi_£nd_byã
(
	`I2C_READ_ADDR
(
addr
));

119 *
vÆue
 = 
	`i2c_twi_ªcv_byã
(
Ál£
);

120 
	`i2c_twi_°›
();

123 
	}
}

125 
öt8_t
 
	$i2c_twi_wrôe
(
uöt8_t
 
addr
, uöt8_à
ªg
, uöt8_à
vÆue
)

127 
	`i2c_twi_°¨t
();

128 
	`i2c_twi_£nd_byã
(
	`I2C_WRITE_ADDR
(
addr
));

129 
	`i2c_twi_£nd_byã
(
ªg
);

130 
	`i2c_twi_£nd_byã
(
vÆue
);

131 
	`i2c_twi_°›
();

134 
	}
}

136 
öt8_t
 
	$i2c_twi_ªad16
(
uöt8_t
 
addr
, uöt8_à
ªg
, 
uöt16_t
 *
vÆue
)

138 
uöt8_t
 
msb
, 
lsb
;

141 
	`i2c_twi_°¨t
();

142 
	`i2c_twi_£nd_byã
(
	`I2C_WRITE_ADDR
(
addr
));

143 
	`i2c_twi_£nd_byã
(
ªg
);

147 
	`i2c_twi_°¨t
();

148 
	`i2c_twi_£nd_byã
(
	`I2C_READ_ADDR
(
addr
));

149 
msb
 = 
	`i2c_twi_ªcv_byã
(
åue
);

150 
lsb
 = 
	`i2c_twi_ªcv_byã
(
Ál£
);

151 
	`i2c_twi_°›
();

153 *
vÆue
 = (
msb
 << 8Ë| 
lsb
;

156 
	}
}

158 
öt8_t
 
	$i2c_twi_wrôe16
(
uöt8_t
 
addr
, uöt8_à
ªg
, 
uöt16_t
 
vÆue
)

160 
uöt8_t
 
msb
, 
lsb
;

162 
msb
 = 
vÆue
 >> 8;

163 
lsb
 = 
vÆue
 & 0xff;

165 
	`i2c_twi_°¨t
();

166 
	`i2c_twi_£nd_byã
(
	`I2C_WRITE_ADDR
(
addr
));

167 
	`i2c_twi_£nd_byã
(
ªg
);

168 
	`i2c_twi_£nd_byã
(
msb
);

169 
	`i2c_twi_£nd_byã
(
lsb
);

170 
	`i2c_twi_°›
();

173 
	}
}

	@firmware/e300/battery/i2c_twi.h

21 #i‚de‡
I2C_TWI_H


22 
	#I2C_TWI_H


	)

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

30 
	ei2c_•ìd_t
 {

31 
	mI2C_SPEED_100K
,

32 
	mI2C_SPEED_400K
,

33 } 
	ti2c_•ìd_t
;

40 
i2c_twi_öô_ˇlc
(
uöt32_t
 
øã
);

47 
i2c_twi_öô
(
i2c_•ìd_t
 
•ìd
);

56 
öt8_t
 
i2c_twi_ªad
(
uöt8_t
 
addr
, uöt8_à
ªg
, uöt8_à*
vÆue
);

69 
öt8_t
 
i2c_twi_ªad16
(
uöt8_t
 
addr
, uöt8_à
ªg
, 
uöt16_t
 *
vÆue
);

78 
öt8_t
 
i2c_twi_wrôe
(
uöt8_t
 
addr
, uöt8_à
ªg
, uöt8_à
vÆue
);

87 
öt8_t
 
i2c_twi_wrôe16
(
uöt8_t
 
addr
, uöt8_à
ªg
, 
uöt16_t
 
vÆue
);

93 
uöt8_t
 
i2c_twi_smbus_¨a
();

	@firmware/e300/battery/interrupt.c

16 
	~<°döt.h
>

17 
	~<avr/öãºu±.h
>

19 
	~"utûs.h
"

20 
	~"öãºu±.h
"

22 
	~"bq2419x.h
"

23 
	~"çs54478.h
"

24 
	~"…c3675.h
"

25 
	~"…c294x.h
"

26 
	~"pmu.h
"

27 
	~"Àd.h
"

29 c⁄° 
úq_h™dÀr_t
 
	gpcöt0_úqs
[] = {
bq2419x_úq_h™dÀr
};

30 c⁄° 
úq_h™dÀr_t
 
	gpcöt1_úqs
[] = {
NULL
};

31 c⁄° 
úq_h™dÀr_t
 
	gpcöt2_úqs
[] = {
NULL
};

32 c⁄° 
úq_h™dÀr_t
 
	gpcöt3_úqs
[] = {
NULL
};

33 c⁄° 
úq_h™dÀr_t
 
	göt0_h™dÀr
 = 
…c3675_buâ⁄_wakeup_úq_h™dÀr
;

34 c⁄° 
úq_h™dÀr_t
 
	göt1_h™dÀr
 = 
…c3675_buâ⁄_ch™ge_úq_h™dÀr
;

37 c⁄° 
úq_h™dÀr_t
 
	gtimî1_h™dÀr
 = 
…c3675_buâ⁄_timî_úq_h™dÀr
;

38 c⁄° 
úq_h™dÀr_t
 
	gwdt_h™dÀr
 = {
Àd_wdt_h™dÀr
};

40 
	$öãºu±_öô
()

43 
EICRA
 = 
	`BIT
(
ISC01
Ë| BIT(
ISC00
Ë| BIT(
ISC10
);

46 
EIMSK
 = 
	`BIT
(
INT1
Ë| BIT(
INT0
);

49 
PCMSK0
 = 
	`BIT
(
PCINT1
);

52 
PCMSK2
 = 
	`BIT
(
PCINT16
Ë| BIT(
PCINT21
);

58 
PCICR
 = 
	`BIT
(
PCIE3
Ë| BIT(
PCIE2
Ë| BIT(
PCIE0
);

59 
	}
}

61 
	$ISR
(
PCINT0_ve˘
)

63 
uöt8_t
 
i
;

64 
úqªtu∫_t
 
ªt
;

66 
i
 = 0; i < 
	`ARRAY_SIZE
(
pcöt0_úqs
); i++) {

67 
úq_h™dÀr_t
 
h™dÀr
 = 
pcöt0_úqs
[
i
];

68 i‡(
h™dÀr
 !
NULL
) {

69 
ªt
 = 
	`h™dÀr
();

70 i‡(
ªt
 =
IRQ_HANDLED
)

74 
	}
}

76 
	$ISR
(
PCINT1_ve˘
)

78 
uöt8_t
 
i
;

79 
úqªtu∫_t
 
ªt
;

81 
i
 = 0; i < 
	`ARRAY_SIZE
(
pcöt1_úqs
); i++) {

82 
úq_h™dÀr_t
 
h™dÀr
 = 
pcöt1_úqs
[
i
];

83 i‡(
h™dÀr
 !
NULL
) {

84 
ªt
 = 
	`h™dÀr
();

85 i‡(
ªt
 =
IRQ_HANDLED
)

89 
	}
}

91 
	$ISR
(
PCINT2_ve˘
)

93 
uöt8_t
 
i
;

94 
úqªtu∫_t
 
ªt
;

96 
i
 = 0; i < 
	`ARRAY_SIZE
(
pcöt2_úqs
); i++) {

97 
úq_h™dÀr_t
 
h™dÀr
 = 
pcöt2_úqs
[
i
];

98 i‡(
h™dÀr
 !
NULL
) {

99 
ªt
 = 
	`h™dÀr
();

100 i‡(
ªt
 =
IRQ_HANDLED
)

104 
	}
}

106 
	$ISR
(
PCINT3_ve˘
)

108 
uöt8_t
 
i
;

109 
úqªtu∫_t
 
ªt
;

111 
i
 = 0; i < 
	`ARRAY_SIZE
(
pcöt3_úqs
); i++) {

112 
úq_h™dÀr_t
 
h™dÀr
 = 
pcöt3_úqs
[
i
];

113 i‡(
h™dÀr
 !
NULL
) {

114 
ªt
 = 
	`h™dÀr
();

115 i‡(
ªt
 =
IRQ_HANDLED
)

119 
	}
}

121 
	$ISR
(
INT0_ve˘
)

123 i‡(
öt0_h™dÀr
)

124 
	`öt0_h™dÀr
();

125 
	}
}

127 
	$ISR
(
INT1_ve˘
)

129 i‡(
öt1_h™dÀr
) {

130 
	`öt1_h™dÀr
();

132 
	}
}

146 
	$ISR
(
TIMER1_COMPA_ve˘
)

148 
	`timî1_h™dÀr
();

149 
	}
}

151 
	$ISR
(
WDT_ve˘
)

153 
	`wdt_h™dÀr
();

154 
	}
}

	@firmware/e300/battery/interrupt.h

16 #i‚de‡
INTERRUPT_H


17 
	#INTERRUPT_H


	)

26 
	mIRQ_NONE
,

27 
	mIRQ_HANDLED


28 } 
	túqªtu∫_t
;

33 
	$úqªtu∫_t
 (*
	túq_h™dÀr_t
)();

38 
	`öãºu±_öô
();

	@firmware/e300/battery/io.c

16 
	~<avr/io.h
>

18 
	~"io.h
"

19 
	~"utûs.h
"

21 
	#_GET_PIN
(
pö
Ë(’öË& 0xf)

	)

22 
	#_GET_MASK
(
pö
Ë(
	`BIT
(
	`_GET_PIN
’ö)))

	)

23 
	#_GET_REG
(
pö
, 
ªg_x
Ë(*ªg_x[pö >> 4])

	)

25 vﬁ©ûê
uöt8_t
 *
	gddr_x
[] = {&
DDRA
, &
DDRB
, &
DDRC
, &
DDRD
};

26 vﬁ©ûê
uöt8_t
 *
	gp‹t_x
[] = {&
PORTA
, &
PORTB
, &
PORTC
, &
PORTD
};

27 vﬁ©ûê
uöt8_t
 *
	gpö_x
[] = {&
PINA
, &
PINB
, &
PINC
, &
PIND
};

29 
	$io_ouçut_pö
(
io_pö_t
 
pö
)

31 
	`_GET_REG
(
pö
, 
ddr_x
Ë|
	`_GET_MASK
(pin);

32 
	}
}

34 
	$io_öput_pö
(
io_pö_t
 
pö
)

36 
	`_GET_REG
(
pö
, 
ddr_x
Ë&~
	`_GET_MASK
(pin);

37 
	}
}

39 
boﬁ
 
	$io_is_ouçut
(
io_pö_t
 
pö
)

41  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
ddr_x
), 
	`_GET_PIN
(pin));

42 
	}
}

44 
boﬁ
 
	$io_is_öput
(
io_pö_t
 
pö
)

46  !
	`io_is_ouçut
(
pö
);

47 
	}
}

49 
	$io_£t_pö
(
io_pö_t
 
pö
)

51 
	`_GET_REG
(
pö
, 
p‹t_x
Ë|
	`_GET_MASK
(pin);

52 
	}
}

54 
	$io_˛ór_pö
(
io_pö_t
 
pö
)

56 
	`_GET_REG
(
pö
, 
p‹t_x
Ë&~
	`_GET_MASK
(pin);

57 
	}
}

59 
boﬁ
 
	$io_is_pö_£t
(
io_pö_t
 
pö
)

61  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
p‹t_x
), 
	`_GET_PIN
(pin));

62 
	}
}

64 
boﬁ
 
	$io_ã°_pö
(
io_pö_t
 
pö
)

66  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
pö_x
), 
	`_GET_PIN
(pin));

67 
	}
}

	@firmware/e300/battery/io.h

21 #i‚de‡
IO_H


22 
	#IO_H


	)

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

27 
	#IO_PX
(
p‹t
, 
pö
Ë((
uöt8_t
)((’‹à- 'A'Ë<< 4Ë+Öö))

	)

28 
	#IO_PA
(
pö
Ë
	`IO_PX
('A',Öö)

	)

29 
	#IO_PB
(
pö
Ë
	`IO_PX
('B',Öö)

	)

30 
	#IO_PC
(
pö
Ë
	`IO_PX
('C',Öö)

	)

31 
	#IO_PD
(
pö
Ë
	`IO_PX
('D',Öö)

	)

33 c⁄° 
	tuöt8_t
 
	tio_pö_t
;

40 
io_ouçut_pö
(
io_pö_t
 
pö
);

47 
io_öput_pö
(
io_pö_t
 
pö
);

55 
boﬁ
 
io_is_ouçut
(
io_pö_t
 
pö
);

63 
boﬁ
 
io_is_öput
(
io_pö_t
 
pö
);

71 
io_£t_pö
(
io_pö_t
 
pö
);

79 
io_˛ór_pö
(
io_pö_t
 
pö
);

87 
boﬁ
 
io_is_pö_£t
(
io_pö_t
 
pö
);

95 
boﬁ
 
io_ã°_pö
(
io_pö_t
 
pö
);

	@firmware/e300/battery/led.c

1 
	~"Àd.h
"

2 
	~"io.h
"

5 
io_pö_t
 
	gPOWER_LED
 = 
IO_PC
(7);

6 
io_pö_t
 
	gCHARGE
 = 
IO_PD
(1);

8 
	eÀd_cﬁ‹
 {

9 
	mLED_C_RED
,

10 
	mLED_C_GREEN
,

11 
	mLED_C_OFF


14 
Àd_cﬁ‹
 
	gÀd_cﬁ‹
;

16 
ölöe
 
	$Àd_£t
(
Àd_cﬁ‹
 
cﬁ‹
)

18 
cﬁ‹
) {

19 
LED_C_RED
:

20 
	`io_˛ór_pö
(
POWER_LED
);

21 
	`io_£t_pö
(
CHARGE
);

23 
LED_C_GREEN
:

24 
	`io_˛ór_pö
(
CHARGE
);

25 
	`io_£t_pö
(
POWER_LED
);

27 
LED_C_OFF
:

29 
	`io_˛ór_pö
(
CHARGE
);

30 
	`io_˛ór_pö
(
POWER_LED
);

33 
Àd_cﬁ‹
 = 
cﬁ‹
;

34 
	}
}

37 
uöt8_t
 
	gblök_˙t
;

38 
uöt8_t
 
	g‹™ge_˙t
;

41 
Àd_°©e
 
	g°©e
;

42 
Àd_°©e
 
	g°©e_√xt
;

43 
uöt8_t
 
	g£q_max
;

44 
uöt8_t
 
	g£q_˙t
;

45 c⁄° 
uöt8_t
 
	gT_SEQ
 = 196;

46 c⁄° 
uöt8_t
 
	gT_ON
 = 98;

48 
boﬁ
 
	gcou¡ög
;

50 
	$Àd_£t_blök_£q
(
uöt8_t
 
n_blöks
, 
Àd_°©e
 
cﬁ‹
)

52 i‡(
cﬁ‹
 =
°©e
)

55 
blök_˙t
 = 0;

56 
£q_˙t
 = 0;

57 
£q_max
 = 2 * 
n_blöks
 + 1;

59 
°©e
 = 
cﬁ‹
;

60 
	}
}

62 
	$Àd_£t_sﬁid
(
Àd_°©e
 
cﬁ‹
)

64 i‡(
°©e
 !
LED_BLINK_RED_FAST
)

65 
°©e
 = 
cﬁ‹
;

66 
°©e_√xt
 = 
cﬁ‹
;

67 
	}
}

69 
	$Àd_£t_blök
(
Àd_°©e
 
cﬁ‹
)

71 i‡(
°©e
 !
LED_BLINK_RED_FAST
)

72 
°©e
 = 
cﬁ‹
;

73 
°©e_√xt
 = 
cﬁ‹
;

74 
	}
}

76 
úqªtu∫_t
 
	$Àd_wdt_h™dÀr
()

78 
cou¡ög
 = 
Ál£
;

79 
°©e
) {

80 
LED_BLINK_GREEN_SLOW
:

81 i‡(
blök_˙t
 < 
T_ON
)

82 
	`Àd_£t
(
LED_C_GREEN
);

84 
	`Àd_£t
(
LED_C_OFF
);

85 
blök_˙t
 += 1;

88 
LED_BLINK_GREEN_FAST
:

89 i‡(
blök_˙t
 < 
T_ON
)

90 
	`Àd_£t
(
LED_C_GREEN
);

92 
	`Àd_£t
(
LED_C_OFF
);

93 
blök_˙t
 += 4;

96 
LED_BLINK_RED_FAST
:

97 
cou¡ög
 = 
åue
;

98 i‡(!
£q_˙t
) {

99 
	`Àd_£t
(
LED_C_OFF
);

100 } i‡(
blök_˙t
 < 
T_ON
)

101 
	`Àd_£t
(
£q_˙t
 % 2 ? 
LED_C_OFF
 : 
LED_C_RED
);

103 
	`Àd_£t
(
LED_C_OFF
);

104 
blök_˙t
 += 16;

107 
LED_BLINK_ORANGE
:

108 i‡(
blök_˙t
 < 
T_ON
)

109 
	`Àd_£t
(
‹™ge_˙t
 % 2 ? 
LED_C_GREEN
 : 
LED_C_RED
);

111 
	`Àd_£t
(
LED_C_OFF
);

113 
‹™ge_˙t
++;

114 
blök_˙t
 += 4;

117 
LED_ORANGE
:

118 
	`Àd_£t
(
‹™ge_˙t
 % 2 ? 
LED_C_GREEN
 : 
LED_C_RED
);

119 
‹™ge_˙t
++;

120 
blök_˙t
+=4;

123 
LED_GREEN
:

124 
	`Àd_£t
(
LED_C_GREEN
);

127 
LED_RED
:

128 
	`Àd_£t
(
LED_C_RED
);

131 
LED_OFF
:

133 
	`Àd_£t
(
LED_C_OFF
);

137 i‡(
blök_˙t
 >
T_SEQ
 - 1) {

138 
blök_˙t
 = 0;

139 i‡(
cou¡ög
) {

140 i‡(
£q_˙t
 < 
£q_max
) {

141 
£q_˙t
++;

143 
°©e
 = 
°©e_√xt
;

144 
£q_˙t
 = 0;

145 
cou¡ög
 = 
Ál£
;

148 
°©e
 = 
°©e_√xt
;

152  
IRQ_HANDLED
;

153 
	}
}

	@firmware/e300/battery/led.h

1 #i‚de‡
LED_H


2 
	#LED_H


	)

4 
	~<°döt.h
>

6 
	~"öãºu±.h
"

8 
	eÀd_°©e
 {

9 
	mLED_BLINK_GREEN_SLOW
,

10 
	mLED_BLINK_GREEN_FAST
,

11 
	mLED_BLINK_RED_FAST
,

12 
	mLED_BLINK_ORANGE
,

13 
	mLED_ORANGE
,

14 
	mLED_GREEN
,

15 
	mLED_RED
,

16 
	mLED_OFF


19 
Àd_£t_blök_£q
(
uöt8_t
 
n_blöks
, 
Àd_°©e
 
°©e
);

21 
Àd_£t_blök
(
Àd_°©e
 
°©e
);

23 
Àd_£t_sﬁid
(
Àd_°©e
 
°©e
);

25 
úqªtu∫_t
 
Àd_wdt_h™dÀr
();

	@firmware/e300/battery/ltc294x.c

16 
	~<°dboﬁ.h
>

17 
	~<°rög.h
>

18 
	~<utû/©omic.h
>

19 
	~<avr/öãºu±.h
>

21 
	~"i2c_twi.h
"

22 
	~"io.h
"

23 
	~"…c294x.h
"

24 
	~"utûs.h
"

25 
	~"pmu.h
"

27 c⁄° 
uöt8_t
 
	gLTC294X_I2C_ADDR
 = 0x64;

29 
	#…c294x_ªad
(
ªg
, 
vÆ
) \

30 (
	`i2c_twi_ªad
(
LTC294X_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

32 
	#…c294x_ªad16
(
ªg
, 
vÆ
) \

33 (
	`i2c_twi_ªad16
(
LTC294X_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

35 
	#…c294x_wrôe
(
ªg
, 
vÆ
) \

36 (
	`i2c_twi_wrôe
(
LTC294X_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

38 
	#…c294x_wrôe16
(
ªg
, 
vÆ
) \

39 (
	`i2c_twi_wrôe16
(
LTC294X_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

41 c⁄° 
uöt8_t
 
	gLTC294X_REG_STATUS
 = 0x00;

42 c⁄° 
uöt8_t
 
	gLTC294X_REG_CONTROL
 = 0x01;

43 c⁄° 
uöt8_t
 
	gLTC294X_REG_CHARGE_MSB
 = 0x2;

44 c⁄° 
uöt8_t
 
	gLTC294X_REG_CHARGE_LSB
 = 0x3;

45 c⁄° 
uöt8_t
 
	gLTC294X_REG_HIGH_TRESH_MSB
 = 0x4;

46 c⁄° 
uöt8_t
 
	gLTC294X_REG_HIGH_THRESH_LSB
 = 0x5;

47 c⁄° 
uöt8_t
 
	gLTC294X_REG_LOW_THRESH_MSB
 = 0x6;

48 c⁄° 
uöt8_t
 
	gLTC294X_REG_LOW_THRESH_LSB
 = 0x7;

49 c⁄° 
uöt8_t
 
	gLTC294X_REG_VOLTAGE_MSB
 = 0x8;

50 c⁄° 
uöt8_t
 
	gLTC294X_REG_VOLTAGE_LSB
 = 0x9;

51 c⁄° 
uöt8_t
 
	gLTC294X_REG_VOLTAGE_THRESH_HI
 = 0xa;

52 c⁄° 
uöt8_t
 
	gLTC294X_REG_VOLTAGE_THRESH_LO
 = 0xb;

53 c⁄° 
uöt8_t
 
	gLTC294X_REG_TEMP_MSB
 = 0xc;

54 c⁄° 
uöt8_t
 
	gLTC294X_REG_TEMP_LSB
 = 0xd;

55 c⁄° 
uöt8_t
 
	gLTC294X_REG_TEMP_THRESH_HI
 = 0xe;

56 c⁄° 
uöt8_t
 
	gLTC294X_REG_TEMP_THRESH_LO
 = 0xf;

59 c⁄° 
uöt8_t
 
	gLTC294X_CHIP_ID_MASK
 = 
BIT
(7);

60 c⁄° 
uöt8_t
 
	gLTC294X_CHIP_ID_SHIFT
 = 7;

61 c⁄° 
uöt8_t
 
	gLTC294X_ACR_OVF_MASK
 = 
BIT
(5);

62 c⁄° 
uöt8_t
 
	gLTC294X_ACR_OVF_SHIFT
 = 5;

63 c⁄° 
uöt8_t
 
	gLTC294X_TEMP_ALERT_MASK
 = 
BIT
(4);

64 c⁄° 
uöt8_t
 
	gLTC294X_TEMP_ALERT_SHIFT
 = 4;

65 c⁄° 
uöt8_t
 
	gLTC294X_CH_ALERT_HIGH_MASK
 = 
BIT
(3);

66 c⁄° 
uöt8_t
 
	gLTC294X_CH_ALERT_HIGH_SHIFT
 = 3;

67 c⁄° 
uöt8_t
 
	gLTC294X_CH_ALERT_LOW_MASK
 = 
BIT
(2);

68 c⁄° 
uöt8_t
 
	gLTC294X_CH_ALERT_LOW_SHIFT
 = 2;

69 c⁄° 
uöt8_t
 
	gLTC294X_VOLT_ALERT_MASK
 = 
BIT
(1);

70 c⁄° 
uöt8_t
 
	gLTC294X_CH_VOLT_ALERT_SHIFT
 = 1;

71 c⁄° 
uöt8_t
 
	gLTC294X_CH_UVOLT_MASK
 = 
BIT
(0);

72 c⁄° 
uöt8_t
 
	gLTC294X_CH_UVOLT_SHIFT
 = 0;

75 c⁄° 
uöt8_t
 
	gLTC294X_ADC_MODE_MASK
 = 
BIT
(7) | BIT(6);

76 c⁄° 
uöt8_t
 
	gLTC294X_ADC_MODE_SHIFT
 = 6;

77 c⁄° 
uöt8_t
 
	gLTC294X_PRESCALER_MASK
 = 
BIT
(5) | BIT(4) | BIT(3);

78 c⁄° 
uöt8_t
 
	gLTC294X_PRESCALER_SHIFT
 = 3;

79 c⁄° 
uöt8_t
 
	gLTC294X_ALCC_CFG_MASK
 = 
BIT
(2) | BIT(1);

80 c⁄° 
uöt8_t
 
	gLTC294X_ALCC_CFG_SHIFT
 = 1;

81 c⁄° 
uöt8_t
 
	gLTC294X_SHUTDOWN_MASK
 = 
BIT
(0);

82 c⁄° 
uöt8_t
 
	gLTC294X_SHUTDOWN_SHIFT
 = 0;

88 
	s…c294x_gauge
 {

89 
pmu_gauge_t
 
	mpmu_gauge
;

90 vﬁ©ûê
uöt8_t
 
	m°©us
;

91 
uöt16_t
 
	mãmp_thªsh_high
;

92 
uöt16_t
 
	mãmp_thªsh_low
;

93 
uöt16_t
 
	mch¨ge_lo_thesh
;

94 
boﬁ
 
	mfú°_time
;

97 
…c294x_gauge
 
	ggauge
;

99 
io_pö_t
 
	gFG_ALn_CC
 = 
IO_PA
(0);

101 
uöt16_t
 
	$…c294x_gë_ch¨ge
()

103 
uöt16_t
 
vÆ
;

105 (Ë
	`…c294x_ªad16
(
LTC294X_REG_CHARGE_MSB
, &
vÆ
);

107  
vÆ
;

108 
	}
}

110 
	$…c294x_£t_ch¨ge
(
uöt16_t
 
vÆ
)

112 
uöt8_t
 
˘æ_vÆ
;

116 (Ë
	`…c294x_ªad
(
LTC294X_REG_CONTROL
, &
˘æ_vÆ
);

118 
˘æ_vÆ
 |
LTC294X_SHUTDOWN_MASK
;

120 (Ë
	`…c294x_wrôe
(
LTC294X_REG_CONTROL
, 
˘æ_vÆ
);

123 (Ë
	`…c294x_wrôe16
(
LTC294X_REG_CHARGE_MSB
, 
vÆ
);

125 
˘æ_vÆ
 &~
LTC294X_SHUTDOWN_MASK
;

128 (Ë
	`…c294x_wrôe
(
LTC294X_REG_CONTROL
, 
˘æ_vÆ
);

129 
	}
}

131 
uöt16_t
 
	$…c294x_gë_ãmp
()

133 
uöt16_t
 
vÆ
;

135 (Ë
	`…c294x_ªad16
(
LTC294X_REG_TEMP_MSB
, &
vÆ
);

137  
vÆ
;

138 
	}
}

140 
uöt16_t
 
	$…c294x_gë_vﬁège
()

142 
uöt16_t
 
vÆ
;

144 (Ë
	`…c294x_ªad16
(
LTC294X_REG_VOLTAGE_MSB
, &
vÆ
);

146  
vÆ
;

147 
	}
}

149 
öt8_t
 
	$…c294x_£t_ch¨ge_thªsh
(
boﬁ
 
high
, 
uöt16_t
 
vÆ
)

151 
öt8_t
 
ªt
;

153 
ªt
 = 
	`…c294x_wrôe16
(

154 
high
 ? 
LTC294X_REG_HIGH_TRESH_MSB
 : 
LTC294X_REG_LOW_THRESH_MSB
, 
vÆ
);

155 i‡(
ªt
)

156  
ªt
;

158 
	}
}

160 
ölöe
 
	$…c294x_pmu_£t_ch¨ge_hi_thesh
(
uöt16_t
 
vÆ
)

162 
	`…c294x_£t_ch¨ge_thªsh
(
åue
, 
vÆ
);

163 
	}
}

165 
ölöe
 
	$…c294x_pmu_£t_ch¨ge_lo_thesh
(
uöt16_t
 
vÆ
)

167 
	`…c294x_£t_ch¨ge_thªsh
(
Ál£
, 
vÆ
);

168 
	}
}

170 
uöt8_t
 
	$…c294x_check_evíts
()

172 
uöt8_t
 
°©us
;

173 
uöt8_t
 
Êags
 = 0;

174 
uöt16_t
 
vÆue
;

176 
	`…c294x_ªad
(
LTC294X_REG_STATUS
, &
°©us
);

179 i‡(
°©us
 && (°©u†!
gauge
.status)) {

181 i‡(
°©us
 & 
LTC294X_CH_ALERT_HIGH_MASK
)

182 
Êags
 |
PMU_GAUGE_CHARGE_HI
;

183 i‡(
°©us
 & 
LTC294X_CH_ALERT_LOW_MASK
)

184 
Êags
 |
PMU_GAUGE_CHARGE_LO
;

186 i‡(
°©us
 & 
LTC294X_VOLT_ALERT_MASK
) {

192 i‡(
°©us
 & 
LTC294X_ACR_OVF_MASK
) {

193 
vÆue
 = 
	`…c294x_gë_ch¨ge
();

194 i‡(
vÆue
 <
gauge
.
ch¨ge_lo_thesh
)

195 
Êags
 |
PMU_GAUGE_CHARGE_LO
;

198 i‡(
°©us
 & 
LTC294X_TEMP_ALERT_MASK
) {

199 
vÆue
 = 
	`…c294x_gë_ãmp
();

200 i‡(
vÆue
 > 
gauge
.
ãmp_thªsh_high
)

201 
Êags
 |
PMU_GAUGE_TEMP_HI
;

202 i‡(
vÆue
 <
gauge
.
ãmp_thªsh_low
)

203 
Êags
 |
PMU_GAUGE_TEMP_LO
;

205 
gauge
.
°©us
 = status;

208  
Êags
;

209 
	}
}

211 c⁄° 
pmu_gauge_›s_t
 
	g…c294x_pmu_gauge_›s
 = {

212 .
check_evíts
 = 
…c294x_check_evíts
,

213 .
	ggë_ãm≥øtuª
 = 
…c294x_gë_ãmp
,

214 .
	ggë_ch¨ge
 = 
…c294x_gë_ch¨ge
,

215 .
	g£t_ch¨ge
 = 
…c294x_£t_ch¨ge
,

216 .
	g£t_low_thªshﬁd
 = 
…c294x_pmu_£t_ch¨ge_lo_thesh
,

217 .
	ggë_vﬁège
 = 
…c294x_gë_vﬁège
,

220 
öt8_t
 
	$…c294x_öô
(
…c294x_modñ_t
 
modñ
)

222 
uöt8_t
 
vÆ
;

223 
öt8_t
 
ªt
;

226 
	`io_öput_pö
(
FG_ALn_CC
);

227 
	`io_£t_pö
(
FG_ALn_CC
);

229 
gauge
.
pmu_gauge
.
›s
 = &
…c294x_pmu_gauge_›s
;

231 
ªt
 = 
	`…c294x_ªad
(
LTC294X_REG_STATUS
, &
vÆ
);

232 i‡(
ªt
)

233 
Áû_i2c_ªad
;

234 
vÆ
 &
LTC294X_CHIP_ID_MASK
;

235 
vÆ
 >>
LTC294X_CHIP_ID_SHIFT
;

237 i‡(
vÆ
 !
modñ
)

238 
Áû_id
;

242 
	`…c294x_£t_ch¨ge
(0x0010);

245 
	`…c294x_wrôe16
(
LTC294X_REG_LOW_THRESH_MSB
, 0x1794);

246 
gauge
.
ch¨ge_lo_thesh
 = 0x1794;

249 
	`…c294x_wrôe16
(
LTC294X_REG_TEMP_THRESH_HI
, 0x98);

250 
gauge
.
ãmp_thªsh_high
 = 0x9800;

253 
	`…c294x_wrôe16
(
LTC294X_REG_TEMP_THRESH_LO
, 0x74);

254 
gauge
.
ãmp_thªsh_low
 = 0x7400;

256 
ªt
 = 
	`…c294x_ªad
(
LTC294X_REG_CONTROL
, &
vÆ
);

257 i‡(
ªt
)

258 
Áû_i2c_ªad
;

261 
vÆ
 &~
LTC294X_ADC_MODE_MASK
;

262 
vÆ
 |0x3 << 
LTC294X_ADC_MODE_SHIFT
;

265 
vÆ
 &~
LTC294X_PRESCALER_MASK
;

266 
vÆ
 |0x4 << 
LTC294X_PRESCALER_SHIFT
;

269 
vÆ
 &~
LTC294X_ALCC_CFG_MASK
;

270 
vÆ
 |0x0 << 
LTC294X_ALCC_CFG_SHIFT
;

272 
ªt
 = 
	`…c294x_wrôe
(
LTC294X_REG_CONTROL
, 
vÆ
);

274 
	`pmu_ªgi°î_gauge
(&
gauge
.
pmu_gauge
);

278 
Áû_id
:

279 
Áû_i2c_ªad
:

280  
ªt
;

281 
	}
}

	@firmware/e300/battery/ltc294x.h

21 #i‚de‡
LTC294X_H


22 
	#LTC294X_H


	)

24 
	~"pmu.h
"

27 
	mLTC294X_MODEL_2941
 = 0x1,

28 
	mLTC294X_MODEL_2942
 = 0x0

29 } 
	t…c294x_modñ_t
;

36 
öt8_t
 
…c294x_öô
(
…c294x_modñ_t
 
modñ
);

38 
úqªtu∫_t
 
…c294x_úq_h™dÀr
();

	@firmware/e300/battery/ltc3675.c

16 
	~"Âga.h
"

17 
	~"i2c_twi.h
"

18 
	~"io.h
"

19 
	~"öãºu±.h
"

20 
	~"…c3675.h
"

21 
	~"mcu_£âögs.h
"

22 
	~"utûs.h
"

23 
	~"timî.h
"

25 
	~<avr/öãºu±.h
>

26 
	~<utû/dñay.h
>

27 
	~<utû/©omic.h
>

29 c⁄° 
uöt8_t
 
	gLTC3675_I2C_ADDR
 = 0x09;

31 
	#…c3675_ªad
(
ªg
, 
vÆ
) \

32 (
	`i2c_twi_ªad
(
LTC3675_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

34 
	#…c3675_wrôe
(
ªg
, 
vÆ
) \

35 (
	`i2c_twi_wrôe
(
LTC3675_I2C_ADDR
, 
ªg
, 
vÆ
))

	)

38 c⁄° 
uöt8_t
 
	gLTC3675_REG_NONE
 = 0x00;

39 c⁄° 
uöt8_t
 
	gLTC3675_REG_BUCK1
 = 0x01;

40 c⁄° 
uöt8_t
 
	gLTC3675_REG_BUCK2
 = 0x02;

41 c⁄° 
uöt8_t
 
	gLTC3675_REG_BUCK3
 = 0x03;

42 c⁄° 
uöt8_t
 
	gLTC3675_REG_BUCK4
 = 0x04;

43 c⁄° 
uöt8_t
 
	gLTC3675_REG_BOOST
 = 0x05;

44 c⁄° 
uöt8_t
 
	gLTC3675_REG_BUCK_BOOST
 = 0x06;

45 c⁄° 
uöt8_t
 
	gLTC3675_REG_LED_CONFIG
 = 0x07;

46 c⁄° 
uöt8_t
 
	gLTC3675_REG_LED_DAC
 = 0x08;

47 c⁄° 
uöt8_t
 
	gLTC3675_REG_UVOT
 = 0x09;

48 c⁄° 
uöt8_t
 
	gLTC3675_REG_RSTB
 = 0x0a;

49 c⁄° 
uöt8_t
 
	gLTC3675_REG_IRQB_MASK
 = 0x0b;

50 c⁄° 
uöt8_t
 
	gLTC3675_REG_RT_STATUS
 = 0x0c;

51 c⁄° 
uöt8_t
 
	gLTC3675_REG_LAT_STATUS
 = 0x0d;

52 c⁄° 
uöt8_t
 
	gLTC3675_REG_CLEAR_IRQ
 = 0x0f;

54 c⁄° 
uöt8_t
 
	gLTC3675_UNDER_VOLTAGE_MASK
 = 
BIT
(7);

55 c⁄° 
uöt8_t
 
	gLTC3675_UNDER_VOLTAGE_SHIFT
 = 7;

56 c⁄° 
uöt8_t
 
	gLTC3675_OVER_TEMPERATURE_MASK
 = 
BIT
(6);

57 c⁄° 
uöt8_t
 
	gLTC3675_OVER_TEMPERATURE_SHIFT
 = 6;

58 c⁄° 
uöt8_t
 
	gLTC3675_BUCK_BOOST_PGOOD_MASK
 = 
BIT
(5);

59 c⁄° 
uöt8_t
 
	gLTC3675_BUCK_BOOST_PGOOD_SHIFT
 = 5;

60 c⁄° 
uöt8_t
 
	gLTC3675_BOOST_PGOOD_MASK
 = 
BIT
(4);

61 c⁄° 
uöt8_t
 
	gLTC3675_BOOST_PGOOD_SHIFT
 = 4;

62 c⁄° 
uöt8_t
 
	gLTC3675_BUCK4_PGOOD_MASK
 = 
BIT
(3);

63 c⁄° 
uöt8_t
 
	gLTC3675_BUCK4_PGOOD_SHIFT
 = 3;

64 c⁄° 
uöt8_t
 
	gLTC3675_BUCK3_PGOOD_MASK
 = 
BIT
(2);

65 c⁄° 
uöt8_t
 
	gLTC3675_BUCK3_PGOOD_SHIFT
 = 2;

66 c⁄° 
uöt8_t
 
	gLTC3675_BUCK2_PGOOD_MASK
 = 
BIT
(1);

67 c⁄° 
uöt8_t
 
	gLTC3675_BUCK2_PGOOD_SHIFT
 = 1;

68 c⁄° 
uöt8_t
 
	gLTC3675_BUCK1_PGOOD_MASK
 = 
BIT
(0);

69 c⁄° 
uöt8_t
 
	gLTC3675_BUCK1_PGOOD_SHIFT
 = 0;

71 c⁄° 
uöt8_t
 
	gLTC3675_ENABLE_REGISTER_BIT
 = 0x80;

73 
	s…c3675_buâ⁄
 {

74 
pmu_buâ⁄_t
 
	mpmu_buâ⁄
;

76 vﬁ©ûê
boﬁ
 
	m⁄swôch_¥ess_evít
;

77 vﬁ©ûê
boﬁ
 
	m⁄swôch_ªÀa£_evít
;

78 vﬁ©ûê
boﬁ
 
	m⁄swôch_œ°_°©e
;

80 vﬁ©ûê
boﬁ
 
	mpowîoff_evít
;

82 vﬁ©ûê
boﬁ
 
	mwakeup_evít
;

85 
…c3675_buâ⁄
 
	gbuâ⁄
;

88 c⁄° 
uöt8_t
 
	gLTC3675_REG_ENABLE_DELAY
 = 10;

90 
io_pö_t
 
	gPWR_IRQ
 = 
IO_PD
(0);

91 
io_pö_t
 
	gWAKEUP
 = 
IO_PD
(2);

92 
io_pö_t
 
	gONSWITCH_DB
 = 
IO_PD
(3);

93 
io_pö_t
 
	gPWR_RESET
 = 
IO_PD
(4);

95 
	$…c3675_˛ór_öãºu±s
()

97 
	`…c3675_wrôe
(
LTC3675_REG_CLEAR_IRQ
, 0x00);

98 
	`…c3675_wrôe
(
LTC3675_REG_NONE
, 0x00);

99 
	}
}

101 
öt8_t
 
	$…c3675_£t_ªguœt‹_hñ≥r
(
uöt8_t
 
ªg
, 
boﬁ
 
⁄
)

103 
öt8_t
 
ªt
;

104 
uöt8_t
 
vÆ
;

105 
ªt
 = 
	`…c3675_ªad
(
ªg
, &
vÆ
);

106 i‡(
ªt
)

107 
Áû_i2c_ªad
;

108 i‡(
⁄
)

109 
vÆ
 |
LTC3675_ENABLE_REGISTER_BIT
;

111 
vÆ
 &~
LTC3675_ENABLE_REGISTER_BIT
;

112 
ªt
 = 
	`…c3675_wrôe
(
ªg
, 
vÆ
);

113 i‡(
ªt
)

114 
Áû_i2c_wrôe
;

116 i‡(
⁄
)

117 
	`_dñay_ms
(
LTC3675_REG_ENABLE_DELAY
);

121 
Áû_i2c_wrôe
:

122 
Áû_i2c_ªad
:

123  
ªt
;

124 
	}
}

126 
ölöe
 
öt8_t
 
	$…c3675_gë_ªÆtime_°©us
(
uöt8_t
 *
vÆ
)

128 
öt8_t
 
ªt
;

130 
ªt
 = 
	`…c3675_ªad
(
LTC3675_REG_RT_STATUS
, 
vÆ
);

131 i‡(
ªt
)

132  
ªt
;

134 
	}
}

136 
boﬁ
 
	$…c3675_gë_powî_good
(
uöt8_t
 
mask
)

138 
uöt8_t
 
vÆ
;

139 
öt8_t
 
ªt
;

141 
ªt
 = 
	`…c3675_gë_ªÆtime_°©us
(&
vÆ
);

142 i‡(
ªt
)

143  
Ál£
;

145  !!(
mask
 & 
vÆ
);

146 
	}
}

148 
öt8_t
 
	$…c3675_£t_ªguœt‹
(
pmu_ªguœt‹_t
 *
ªg
, 
boﬁ
 
⁄
)

150 
öt8_t
 
ªt
;

151 
boﬁ
 
°©us
;

152 
…c3675_pmu_ªguœt‹_t
 *
pmu
;

154 
pmu
 = 
	`c⁄èöî_of
(
ªg
, 
…c3675_pmu_ªguœt‹_t
, 
pmu_ªg
);

156 
pmu
->
…c3675_ªg
) {

157 
LTC3675_REG_1
:

158 
LTC3675_REG_2
:

159 
ªt
 = 
	`…c3675_£t_ªguœt‹_hñ≥r
(
LTC3675_REG_BUCK1
, 
⁄
);

160 i‡(
ªt
)

161  
ªt
;

162 
°©us
 = 
	`…c3675_gë_powî_good
(
LTC3675_BUCK1_PGOOD_MASK
);

163  (
°©us
 =
⁄
) ? 0 : -1;

164 
LTC3675_REG_3
:

165 
LTC3675_REG_4
:

166 
ªt
 = 
	`…c3675_£t_ªguœt‹_hñ≥r
(
LTC3675_REG_BUCK3
, 
⁄
);

167 i‡(
ªt
)

168  
ªt
;

169 
°©us
 = 
	`…c3675_gë_powî_good
(
LTC3675_BUCK3_PGOOD_MASK
);

170  (
°©us
 =
⁄
) ? 0 : -1;

171 
LTC3675_REG_5
:

172 
ªt
 = 
	`…c3675_£t_ªguœt‹_hñ≥r
(
LTC3675_REG_BOOST
, 
⁄
);

173 i‡(
ªt
)

174  
ªt
;

175 
°©us
 = 
	`…c3675_gë_powî_good
(
LTC3675_BOOST_PGOOD_MASK
);

176  (
°©us
 =
⁄
) ? 0 : -1;

177 
LTC3675_REG_6
:

178 
ªt
 = 
	`…c3675_£t_ªguœt‹_hñ≥r
(
LTC3675_REG_BUCK_BOOST
, 
⁄
);

179 i‡(
ªt
)

180  
ªt
;

181 
°©us
 = 
	`…c3675_gë_powî_good
(
LTC3675_BUCK_BOOST_PGOOD_MASK
);

182  (
°©us
 =
⁄
) ? 0 : -1;

188 
	}
}

190 
öt8_t
 
	$…c3675_£t_vﬁège
(
pmu_ªguœt‹_t
 *
ªg
, 
uöt16_t
 
v
)

192 
uöt32_t
 
r_fb
, 
r
;

193 
uöt16_t
 
vmax
, 
r_dac
;

194 
uöt8_t
 
addr
, 
vÆ
;

195 
öt8_t
 
ªt
;

196 
…c3675_pmu_ªguœt‹_t
 *
pmu
;

198 
pmu
 = 
	`c⁄èöî_of
(
ªg
, 
…c3675_pmu_ªguœt‹_t
, 
pmu_ªg
);

200 
pmu
->
…c3675_ªg
) {

201 
LTC3675_REG_1
:

202 
LTC3675_REG_2
:

203 
vmax
 = 1500;

204 
addr
 = 
LTC3675_REG_BUCK1
;

206 
LTC3675_REG_3
:

207 
LTC3675_REG_4
:

208 
vmax
 = 1800;

209 
addr
 = 
LTC3675_REG_BUCK3
;

211 
LTC3675_REG_5
:

212 
vmax
 = 5000;

213 
addr
 = 
LTC3675_REG_BOOST
;

215 
LTC3675_REG_6
:

216 
vmax
 = 3300;

217 
addr
 = 
LTC3675_REG_BUCK_BOOST
;

223 i‡(
v
 > 
vmax
)

226 
r_fb
 = ((
uöt32_t
Ë
vmax
 * 1000) / (uint32_t) 800;

227 
r
 = ((
uöt32_t
Ë
v
 * 1000Ë/ 
r_fb
 ;

229 i‡(
r
 < 450)

232 
r_dac
 = (16 * ((
uöt16_t
Ë
r
 - 450)) / (800 - 450);

234 
ªt
 = 
	`…c3675_ªad
(
addr
, &
vÆ
);

235 i‡(
ªt
)

236  
ªt
;

238 
vÆ
 = (vÆ & 0xf0Ë| ((
uöt8_t
Ë
r_dac
);

239 
ªt
 = 
	`…c3675_wrôe
(
addr
, 
vÆ
);

240 i‡(
ªt
)

241  
ªt
;

244 
	}
}

246 
uöt8_t
 
	$…c3675_buâ⁄_check_evíts
(
pmu_buâ⁄_t
 *
pmu_buâ⁄
)

248 
uöt8_t
 
Êags
;

249 
…c3675_buâ⁄
 *ltc3675_button;

250 
Êags
 = 0x00;

251 
…c3675_buâ⁄
 = 
	`c⁄èöî_of
(

252 
pmu_buâ⁄
, 
…c3675_buâ⁄
,Ömu_button);

254 
	`ATOMIC_BLOCK
(
ATOMIC_RESTORESTATE
)

256 i‡(
…c3675_buâ⁄
->
⁄swôch_¥ess_evít
) {

257 
…c3675_buâ⁄
->
⁄swôch_¥ess_evít
 = 
Ál£
;

258 
Êags
 |
PMU_BUTTON_EVENT_MASK_PRESS
;

262 
	`ATOMIC_BLOCK
(
ATOMIC_RESTORESTATE
)

264 i‡(
…c3675_buâ⁄
->
⁄swôch_ªÀa£_evít
) {

265 
…c3675_buâ⁄
->
⁄swôch_ªÀa£_evít
 = 
Ál£
;

266 
Êags
 |
PMU_BUTTON_EVENT_MASK_RELEASE
;

270 
	`ATOMIC_BLOCK
(
ATOMIC_RESTORESTATE
)

272 i‡(
…c3675_buâ⁄
->
wakeup_evít
) {

273 
…c3675_buâ⁄
->
wakeup_evít
 = 
Ál£
;

274 
Êags
 |
PMU_BUTTON_EVENT_MASK_WAKEUP
;

278 
	`ATOMIC_BLOCK
(
ATOMIC_RESTORESTATE
)

280 i‡(
…c3675_buâ⁄
->
powîoff_evít
) {

281 
…c3675_buâ⁄
->
powîoff_evít
 = 
Ál£
;

282 
Êags
 |
PMU_BUTTON_EVENT_MASK_POWERDOWN
;

285  
Êags
;

286 
	}
}

288 c⁄° 
pmu_buâ⁄_›s_t
 
	g…c3675_pmu_buâ⁄_›s
 = {

289 .
check_evíts
 = 
…c3675_buâ⁄_check_evíts
,

293 
öt8_t
 
	$…c3675_öô
()

295 
uöt8_t
 
id
;

296 
öt8_t
 
ªt
;

298 
ªt
 = 
	`…c3675_ªad
(
LTC3675_REG_LED_CONFIG
, &
id
);

299 i‡(
ªt
)

300  
ªt
;

302 
buâ⁄
.
pmu_buâ⁄
.
›s
 = &
…c3675_pmu_buâ⁄_›s
;

303 
buâ⁄
.
⁄swôch_œ°_°©e
 = 
	`io_ã°_pö
(
ONSWITCH_DB
);

306 
	`io_öput_pö
(
PWR_IRQ
);

307 
	`io_£t_pö
(
PWR_IRQ
);

308 
	`io_öput_pö
(
WAKEUP
);

309 
	`io_£t_pö
(
WAKEUP
);

310 
	`io_öput_pö
(
ONSWITCH_DB
);

311 
	`io_£t_pö
(
ONSWITCH_DB
);

312 
	`io_öput_pö
(
PWR_RESET
);

313 
	`io_£t_pö
(
PWR_RESET
);

316 
	`…c3675_˛ór_öãºu±s
();

319 
ªt
 = 
	`…c3675_wrôe
(
LTC3675_REG_IRQB_MASK
, 0xff);

320 i‡(
ªt
)

321 
Áû_i2c_wrôe_mask
;

324 
ªt
 = 
	`…c3675_wrôe
(
LTC3675_REG_UVOT
, 0x70);

325 i‡(
ªt
)

326 
Áû_i2c_wrôe_uvŸ
;

328 
	`pmu_ªgi°î_buâ⁄
(&
buâ⁄
.
pmu_buâ⁄
);

332 
Áû_i2c_wrôe_uvŸ
:

333 
Áû_i2c_wrôe_mask
:

334  
ªt
;

335 
	}
}

337 
öt8_t
 
	$…c3675_check_ªg_evíts
(
pmu_ªguœt‹_t
 *
ªg
)

340 
	}
}

342 c⁄° 
pmu_ªguœt‹_›s_t
 
	g…c3675_›s
 = {

343 .
£t_vﬁège
 = 
…c3675_£t_vﬁège
,

344 .
	g£t_ªguœt‹
 = 
…c3675_£t_ªguœt‹
,

345 .
	gcheck_evíts
 = 
…c3675_check_ªg_evíts


349 
úqªtu∫_t
 
	$…c3675_buâ⁄_ch™ge_úq_h™dÀr
()

351 
boﬁ
 
pö_°©e
;

353 
pö_°©e
 = 
	`io_ã°_pö
(
ONSWITCH_DB
);

356 i‡(
pö_°©e
 && !
buâ⁄
.
⁄swôch_œ°_°©e
) {

357 
buâ⁄
.
⁄swôch_ªÀa£_evít
 = 
åue
;

358 
	`timî1_°›
();

359 } i‡(!
pö_°©e
 && 
buâ⁄
.
⁄swôch_œ°_°©e
) {

360 
buâ⁄
.
⁄swôch_¥ess_evít
 = 
åue
;

361 
	`timî1_°¨t
();

363 
buâ⁄
.
⁄swôch_œ°_°©e
 = 
pö_°©e
;

365  
IRQ_HANDLED
;

366 
	}
}

368 
úqªtu∫_t
 
	$…c3675_buâ⁄_wakeup_úq_h™dÀr
()

370 
buâ⁄
.
wakeup_evít
 = 
åue
;

372  
IRQ_HANDLED
;

373 
	}
}

375 
úqªtu∫_t
 
	$…c3675_buâ⁄_timî_úq_h™dÀr
()

379 
buâ⁄
.
powîoff_evít
 = 
åue
;

381  
IRQ_HANDLED
;

382 
	}
}

	@firmware/e300/battery/ltc3675.h

21 #i‚de‡
LTC3675_H


22 
	#LTC3675_H


	)

24 
	~"pmu.h
"

26 
	e…c3675_ªguœt‹
 {

28 
	mLTC3675_REG_1
,

30 
	mLTC3675_REG_2
,

32 
	mLTC3675_REG_3
,

34 
	mLTC3675_REG_4
,

36 
	mLTC3675_REG_5
,

38 
	mLTC3675_REG_6
,

39 } 
	t…c3675_ªguœt‹_t
;

41 
	s…c3675_pmu_ªguœt‹
 {

42 
pmu_ªguœt‹_t
 
	mpmu_ªg
;

43 
…c3675_ªguœt‹_t
 
	m…c3675_ªg
;

44 } 
	t…c3675_pmu_ªguœt‹_t
;

46 c⁄° 
pmu_ªguœt‹_›s_t
 
…c3675_›s
;

55 
öt8_t
 
…c3675_öô
();

61 
öt8_t
 
…c3675_h™dÀ_evíts
();

63 
úqªtu∫_t
 
…c3675_buâ⁄_wakeup_úq_h™dÀr
();

64 
úqªtu∫_t
 
…c3675_buâ⁄_ch™ge_úq_h™dÀr
();

65 
úqªtu∫_t
 
…c3675_buâ⁄_timî_úq_h™dÀr
();

	@firmware/e300/battery/main.c

16 
	~<avr/io.h
>

17 
	~<î∫o.h
>

18 
	~<avr/öãºu±.h
>

19 
	~<avr/¶ìp.h
>

21 
	~"i2c_twi.h
"

22 
	~"•i.h
"

23 
	~"pmu.h
"

24 
	~"öãºu±.h
"

25 
	~"io.h
"

26 
	~"Âga.h
"

27 
	~"ì¥om.h
"

28 
	~"utûs.h
"

35 
	gFUSES
 = {

36 .
low
 = (
FUSE_CKSEL0
 & 
FUSE_SUT0
),

37 .
	ghigh
 = (
FUSE_EESAVE
 & 
FUSE_SPIEN
),

38 .
	gexãnded
 = 
EFUSE_DEFAULT
,

42 
	$maö
()

45 i‡(
MCUSR
 & 
	`BIT
(
WDRF
)) {

46 
MCUSR
 &~
	`BIT
(
WDRF
);

47 
WDTCSR
 |
	`BIT
(
WDCE
Ë| BIT(
WDE
);

48 
WDTCSR
 = 0x00;

51 
	`i2c_twi_öô
(
I2C_SPEED_100K
);

52 
	`•i_öô
(
SPI_TYPE_MASTER
, 
SPI_MSB_FIRST
, 
SPI_MODE_0
, 
SPI_SPEED_2M
);

54 
	`pmu_öô
();

56 i‡(
	`ì¥om_gë_autoboŸ
())

57 
	`pmu_powî_⁄
();

59 
	`£i
();

62 
	`pmu_h™dÀ_evíts
();

66 
	}
}

	@firmware/e300/battery/mcu_settings.h

20 #i‚de‡
MCU_SETTINGS_H


21 
	#MCU_SETTINGS_H


	)

23 
	#F_CPU
 8000000UL

	)

25 
	#VERSION_MAJ
 2

	)

26 
	#VERSION_MIN
 2

	)

	@firmware/e300/battery/pmu.c

16 
	~"adc.h
"

17 
	~"bq2419x.h
"

18 
	~"ì¥om.h
"

19 
	~"Âga.h
"

20 
	~"mcu_£âögs.h
"

21 
	~"io.h
"

22 
	~"Àd.h
"

23 
	~"…c3675.h
"

24 
	~"…c294x.h
"

25 
	~"çs54478.h
"

26 
	~"timî.h
"

27 
	~"utûs.h
"

29 
	~<°dlib.h
>

31 
	~<avr/öãºu±.h
>

32 
	~<avr/wdt.h
>

33 
	~<utû/dñay.h
>

34 
	~<utû/©omic.h
>

36 
pmu_powî_⁄
();

37 
pmu_powî_down
();

40 c⁄° 
uöt16_t
 
	gPMU_BAT_MIN_VOLTAGE
 = 2000;

43 c⁄° 
uöt8_t
 
	gPMU_FPGA_RESET_DELAY
 = 10;

46 c⁄° 
uöt8_t
 
	gPMU_USB_CLK_WAIT
 = 200;

47 c⁄° 
uöt8_t
 
	gPMU_FTDI_WAIT
 = 100;

49 
io_pö_t
 
	gVBAT
 = 
IO_PC
(0);

50 
io_pö_t
 
	gPOWER_LED
 = 
IO_PC
(7);

51 
io_pö_t
 
	gCHARGE
 = 
IO_PD
(1);

52 
io_pö_t
 
	gUSB_RESETn
 = 
IO_PA
(2);

53 
io_pö_t
 
	gFTDI_RESETn
 = 
IO_PB
(6);

54 
io_pö_t
 
	gFTDI_CBUS3
 = 
IO_PB
(7);

55 
io_pö_t
 
	gUSB_CLK_EN
 = 
IO_PA
(1);

56 
io_pö_t
 
	gAVR_RESET
 = 
IO_PC
(6);

57 
io_pö_t
 
	gAVR_IRQ
 = 
IO_PD
(5);

58 
io_pö_t
 
	gPS_POR
 = 
IO_PD
(6);

59 
io_pö_t
 
	gPS_SRST
 = 
IO_PD
(7);

60 
io_pö_t
 
	gOVERTEMP
 = 
IO_PC
(2);

61 
io_pö_t
 
	gPANICn
 = 
IO_PC
(1);

63 
uöt16_t
 
	gœ°_fuŒ_ch¨ge
;

64 
uöt16_t
 
	gch¨ge_⁄_œ°_u≈lug
;

65 
boﬁ
 
	gb©ãry_¥e£¡_œ°
;

67 
boﬁ
 
	g∑nic_œ°
;

69 c⁄° 
uöt8_t
 
	gPMU_BLINK_ERROR_DELAY_MS
 = 250;

70 c⁄° 
uöt8_t
 
	gPMU_BLINK_ERROR_TICKS_PER_BLINK
 = 10;

72 
	epmu_°©e
 {

73 
	mOFF
,

74 
	mBOOT
,

75 
	mSHUTDOWN
,

76 
	mON


77 } 
	tpmu_°©e_t
;

79 
pmu_°©e_t
 
	g°©e
;

80 vﬁ©ûê
boﬁ
 
	gpmu_Âga_evít
;

82 
	epmu_îr‹
 {

83 
	mPMU_ERROR_NONE
 = 0x00,

84 
	mPMU_ERROR_LOW_VOLTAGE
 = 0x01,

85 
	mPMU_ERROR_REG_LOW_VOLTAGE
 = 0x02,

86 
	mPMU_ERROR_FPGA_POWER
 = 0x03,

87 
	mPMU_ERROR_DRAM_POWER
 = 0x04,

88 
	mPMU_ERROR_1_8V
 = 0x05,

89 
	mPMU_ERROR_3_3V
 = 0x06,

90 
	mPMU_ERROR_TX_POWER
 = 0x07,

91 
	mPMU_ERROR_CHARGER_TEMP
 = 0x08,

92 
	mPMU_ERROR_CHARGER_ERROR
 = 0x09,

93 
	mPMU_ERROR_BATTERY_LOW
 = 0x0a,

94 
	mPMU_ERROR_GAUGE_TEMP
 = 0x0b,

95 
	mPMU_ERROR_GLOBAL_TEMP
 = 0x0c,

96 } 
	tpmu_îr‹_t
;

98 vﬁ©ûê
pmu_îr‹_t
 
	gpmu_îr‹
;

104 #ifde‡
DDR3L


105 
	#DRAM_VOLTAGE
 1350

	)

107 
	#DRAM_VOLTAGE
 0

	)

110 
…c3675_pmu_ªguœt‹_t
 
	gPS_VDRAM
 = {

111 .
pmu_ªg
 = {

112 .
›s
 = &
…c3675_›s
,

113 .
	gpowîed
 = 
Ál£
,

114 .
	gvﬁège
 = 
DRAM_VOLTAGE
 ,

115 .
	gîr‹_code
 = 
PMU_ERROR_DRAM_POWER
,

117 .
	g…c3675_ªg
 = 
LTC3675_REG_1
,

120 
…c3675_pmu_ªguœt‹_t
 
	gPS_PERIPHERALS_1_8
 = {

121 .
pmu_ªg
 = {

122 .
›s
 = &
…c3675_›s
,

123 .
	gpowîed
 = 
Ál£
,

124 .
	gvﬁège
 = 0 ,

125 .
	gîr‹_code
 = 
PMU_ERROR_1_8V
,

127 .
	g…c3675_ªg
 = 
LTC3675_REG_3
,

130 
…c3675_pmu_ªguœt‹_t
 
	gPS_PERIPHERALS_3_3
 = {

131 .
pmu_ªg
 = {

132 .
›s
 = &
…c3675_›s
,

133 .
	gpowîed
 = 
Ál£
,

134 .
	gvﬁège
 = 0 ,

135 .
	gîr‹_code
 = 
PMU_ERROR_3_3V
,

137 .
	g…c3675_ªg
 = 
LTC3675_REG_6
,

140 
…c3675_pmu_ªguœt‹_t
 
	gPS_TX
 = {

141 .
pmu_ªg
 = {

142 .
›s
 = &
…c3675_›s
,

143 .
	gpowîed
 = 
Ál£
,

144 .
	gvﬁège
 = 0 ,

145 .
	gîr‹_code
 = 
PMU_ERROR_TX_POWER
,

147 .
	g…c3675_ªg
 = 
LTC3675_REG_5
,

150 
çs54478_pmu_ªguœt‹_t
 
	gPS_FPGA
 = {

151 .
pmu_ªg
 = {

152 .
›s
 = &
çs54478_›s
,

153 .
	gpowîed
 = 
Ál£
,

154 .
	gvﬁège
 = 1000,

155 .
	gîr‹_code
 = 
PMU_ERROR_FPGA_POWER
,

159 
pmu_ªguœt‹_t
 *
	gboŸ_‹dî
[] = {

160 &
PS_FPGA
.
pmu_ªg
,

161 &
PS_VDRAM
.
pmu_ªg
,

162 &
PS_PERIPHERALS_1_8
.
pmu_ªg
,

163 &
PS_TX
.
pmu_ªg
,

164 &
PS_PERIPHERALS_3_3
.
pmu_ªg
,

167 
pmu_buâ⁄_t
 *
	gbuâ⁄
;

168 
	$pmu_ªgi°î_buâ⁄
(
pmu_buâ⁄_t
 *
pmu_buâ⁄
)

170 
buâ⁄
 = 
pmu_buâ⁄
;

171 
	}
}

173 
pmu_ch¨gî_t
 *
	gch¨gî
;

174 
	$pmu_ªgi°î_ch¨gî
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

176 
ch¨gî
 = 
pmu_ch¨gî
;

177 
	}
}

179 
pmu_gauge_t
 *
	ggauge
;

180 
	$pmu_ªgi°î_gauge
(
pmu_gauge_t
 *
pmu_gauge
)

182 
gauge
 = 
pmu_gauge
;

183 
	}
}

197 
uöt16_t
 
	$pmu_b©ãry_vﬁège
()

199 
uöt16_t
 
tmp
;

201 
tmp
 = 
	`adc_sögÀ_shŸ
();

202 
tmp
 *= 5.6961f;

203  (
uöt16_t
Ë
tmp
;

204 
	}
}

206 
ölöe
 
boﬁ
 
	$pmu_b©ãry_¥e£¡
()

208  (
	`pmu_b©ãry_vﬁège
(Ë> 
PMU_BAT_MIN_VOLTAGE
);

209 
	}
}

211 
	$pmu_ª£t_Âga
(
boﬁ
 
dñay
)

213 
	`io_˛ór_pö
(
PS_POR
);

214 
	`io_˛ór_pö
(
PS_SRST
);

216 i‡(
dñay
)

217 
	`_dñay_ms
(
PMU_FPGA_RESET_DELAY
);

219 
	`io_£t_pö
(
PS_POR
);

220 
	`io_£t_pö
(
PS_SRST
);

221 
	}
}

223 
öt8_t
 
	$pmu_öô
()

225 
öt8_t
 
ªt
;

226 
boﬁ
 
b©ãry_¥e£¡
;

228 
°©e
 = 
OFF
;

231 
	`io_öput_pö
(
PANICn
);

232 
∑nic_œ°
 = 
	`io_ã°_pö
(
PANICn
);

235 
	`io_ouçut_pö
(
CHARGE
);

236 
	`io_ouçut_pö
(
POWER_LED
);

239 
	`adc_öô
();

242 
	`çs54478_öô
(
åue
);

245 
	`io_öput_pö
(
USB_RESETn
);

246 
	`io_ouçut_pö
(
FTDI_RESETn
);

247 
	`io_ouçut_pö
(
USB_CLK_EN
);

248 
	`io_öput_pö
(
FTDI_CBUS3
);

251 
	`io_öput_pö
(
OVERTEMP
);

254 
ªt
 = 
	`bq2419x_öô
();

255 i‡(
ªt
)

256 
Áû_bq2419x
;

259 
	`_dñay_ms
(1000);

262 
	`˛i
();

263 
WDTCSR
 |
	`BIT
(
WDCE
Ë| BIT(
WDE
);

264 
WDTCSR
 = 
	`BIT
(
WDIE
);

265 
	`£i
();

268 
b©ãry_¥e£¡
 = 
	`pmu_b©ãry_¥e£¡
();

269 
b©ãry_¥e£¡_œ°
 = 
b©ãry_¥e£¡
;

271 i‡(
b©ãry_¥e£¡
) {

272 
œ°_fuŒ_ch¨ge
 = 
	`ì¥om_gë_œ°_fuŒ
();

273 
ªt
 = 
	`…c294x_öô
(
LTC294X_MODEL_2942
);

275 i‡(
ªt
)

276  
ªt
;

278 
ªt
 = 
	`…c3675_öô
();

279 i‡(
ªt
)

280 
Áû_…c3675
;

284 
	`io_ouçut_pö
(
PS_POR
);

285 
	`io_ouçut_pö
(
PS_SRST
);

286 
	`io_˛ór_pö
(
PS_POR
);

287 
	`io_˛ór_pö
(
PS_SRST
);

290 
	`io_öput_pö
(
AVR_RESET
);

293 
	`io_öput_pö
(
AVR_IRQ
);

294 
	`io_£t_pö
(
AVR_IRQ
);

297 
	`öãºu±_öô
();

300 
	`timî0_öô
();

301 
	`timî1_öô
();

303 
°©e
 = 
OFF
;

307 
Áû_…c3675
:

308 
Áû_bq2419x
:

310 
	}
}

312 
	#is_off
 (
OFF
 =
°©e
)

	)

313 
	#is_⁄
 (
ON
 =
°©e
)

	)

314 
	#is_boŸög
 (
BOOT
 =
°©e
)

	)

316 
ölöe
 
öt8_t
 
	$pmu_£t_ªguœt‹
(
pmu_ªguœt‹_t
 *
ªg
, 
boﬁ
 
⁄
)

318  
ªg
->
›s
->
	`£t_ªguœt‹
‘eg, 
⁄
);

319 
	}
}

321 
	$pmu_powî_⁄
()

323 
uöt8_t
 
i
;

324 
öt8_t
 
ªt
;

325 
pmu_ªguœt‹_t
 *
ªg
;

328 i‡(
is_boŸög
)

330 i‡(
is_⁄
)

333 
°©e
 = 
BOOT
;

336 
	`pmu_ª£t_Âga
(
åue
);

337 
	`Âga_öô
();

339 
i
 = 0; i < 
	`ARRAY_SIZE
(
boŸ_‹dî
); i++) {

340 
ªg
 = 
boŸ_‹dî
[
i
];

342 i‡(
ªg
->
›s
->
£t_ªguœt‹
) {

343 
ªt
 = 
	`pmu_£t_ªguœt‹
(
ªg
, 
åue
);

344 i‡(
ªt
) {

345 
pmu_îr‹
 = 
ªg
->
îr‹_code
;

346 
Áû_ªguœt‹s
;

351 i‡(
ªg
->
›s
->
£t_vﬁège
 &&Ñeg->
vﬁège
) {

352 
ªt
 = 
ªg
->
›s
->
	`£t_vﬁège
‘eg,Ñeg->
vﬁège
);

353 i‡(
ªt
) {

354 
pmu_îr‹
 = 
ªg
->
îr‹_code
;

355 
Áû_ªguœt‹s
;

360 
ªg
->
powîed
 = 
åue
;

364 
	`io_£t_pö
(
USB_CLK_EN
);

365 
	`_dñay_ms
(
PMU_USB_CLK_WAIT
);

366 
	`io_£t_pö
(
FTDI_RESETn
);

367 
	`_dñay_ms
(
PMU_FTDI_WAIT
);

370 
	`pmu_ª£t_Âga
(
Ál£
);

372 
°©e
 = 
ON
;

376 
Áû_ªguœt‹s
:

379 
	}
}

381 
ölöe
 
pmu_°©us
 
	$pmu_b©ãry_gë_°©us
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

383  
pmu_ch¨gî
->
›s
->
gë_b©ãry_°©us


384 ? 
pmu_ch¨gî
->
›s
->
	`gë_b©ãry_°©us
(pmu_charger) : 0;

385 
	}
}

387 
	$pmu_powî_down
()

389 
öt8_t
 
i
;

390 
öt8_t
 
ªt
;

391 
pmu_ªguœt‹_t
 *
ªg
;

393 
°©e
 = 
SHUTDOWN
;

397 
	`io_˛ór_pö
(
PS_SRST
);

400 
	`io_˛ór_pö
(
USB_CLK_EN
);

402 
i
 = 
	`ARRAY_SIZE
(
boŸ_‹dî
) - 1; i >= 0; i--) {

403 
ªg
 = 
boŸ_‹dî
[
i
];

404 i‡(
ªg
->
›s
->
£t_ªguœt‹
) {

405 
ªt
 = 
	`pmu_£t_ªguœt‹
(
ªg
, 
Ál£
);

406 i‡(
ªt
)

407 
Áû_ªguœt‹s
;

411 
ªg
->
powîed
 = 
Ál£
;

414 
°©e
 = 
OFF
;

416 
	`_dñay_ms
(1000);

420 
Áû_ªguœt‹s
:

422 
pmu_îr‹
 = 
ªg
->
îr‹_code
;

423 
	}
}

425 
ölöe
 
öt8_t
 
	$pmu_ch¨gî_check_evíts
(
pmu_ch¨gî_t
 *
ch
)

427  
ch
->
›s
->
check_evíts


428 ? 
ch
->
›s
->
	`check_evíts
(ch) : 0;

429 
	}
}

431 
ölöe
 
öt8_t
 
	$pmu_ªguœt‹_check_evíts
(
pmu_ªguœt‹_t
 *
ªg
)

433  
ªg
->
›s
->
check_evíts


434 ? 
ªg
->
›s
->
	`check_evíts
(reg) : 0;

435 
	}
}

437 
ölöe
 
uöt8_t
 
	$pmu_buâ⁄_check_evíts
(
pmu_buâ⁄_t
 *
pmu_buâ⁄
)

439  
pmu_buâ⁄
->
›s
->
check_evíts


440 ? 
pmu_buâ⁄
->
›s
->
	`check_evíts
(pmu_button) : 0;

441 
	}
}

443 
ölöe
 
uöt8_t
 
	$pmu_ch¨gî_gë_ch¨ge_ty≥
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

445  
pmu_ch¨gî
->
›s
->
gë_ch¨ge_ty≥


446 ? 
pmu_ch¨gî
->
›s
->
	`gë_ch¨ge_ty≥
(pmu_charger) : 0;

447 
	}
}

449 
ölöe
 
uöt8_t
 
	$pmu_ch¨gî_gë_hó…h
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

451  
pmu_ch¨gî
->
›s
->
gë_ch¨gî_hó…h


452 ? 
pmu_ch¨gî
->
›s
->
	`gë_ch¨gî_hó…h
(pmu_charger) : 0;

453 
	}
}

455 
ölöe
 
uöt8_t
 
	$pmu_b©ãry_gë_hó…h
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

457  
ch¨gî
->
›s
->
	`gë_b©ãry_hó…h
(
pmu_ch¨gî
);

458 
	}
}

460 
ölöe
 
uöt8_t
 
	$pmu_b©ãry_gë_ãmp_Æît
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

462  
pmu_ch¨gî
->
›s
->
gë_ãmp_Æît


463 ? 
pmu_ch¨gî
->
›s
->
	`gë_ãmp_Æît
(pmu_charger) : 0;

464 
	}
}

466 
ölöe
 
boﬁ
 
	$pmu_ch¨gî_gë_⁄löe
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

468  
pmu_ch¨gî
->
›s
->
gë_ch¨gî_⁄löe


469 ? 
pmu_ch¨gî
->
›s
->
	`gë_ch¨gî_⁄löe
(pmu_charger) : 0;

470 
	}
}

472 
ölöe
 
boﬁ
 
	$pmu_b©ãry_gë_⁄löe
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
)

474  
pmu_ch¨gî
->
›s
->
gë_b©ãry_⁄löe


475 ? 
pmu_ch¨gî
->
›s
->
	`gë_b©ãry_⁄löe
(pmu_charger) : 0;

476 
	}
}

478 
ölöe
 
uöt8_t
 
	$pmu_gauge_check_evíts
()

480  
gauge
->
›s
->
check_evíts


481 ? 
gauge
->
›s
->
	`check_evíts
() : 0;

482 
	}
}

484 
ölöe
 
uöt16_t
 
	$pmu_gauge_gë_ãm≥øtuª
()

486  
gauge
->
›s
->
gë_ãm≥øtuª


487 ? 
gauge
->
›s
->
	`gë_ãm≥øtuª
() : 0;

488 
	}
}

490 
ölöe
 
uöt16_t
 
	$pmu_gauge_gë_ch¨ge
()

492  
gauge
->
›s
->
	`gë_ch¨ge
();

493 
	}
}

495 
ölöe
 
	$pmu_gauge_£t_ch¨ge
(
uöt16_t
 
vÆ
)

497 
gauge
->
›s
->
	`£t_ch¨ge
(
vÆ
);

498 
	}
}

500 
ölöe
 
uöt16_t
 
	$pmu_gauge_gë_vﬁège
()

502  
gauge
->
›s
->
	`gë_vﬁège
();

503 
	}
}

505 
ölöe
 
	$pmu_gauge_£t_low_thªshﬁd
(
uöt16_t
 
vÆ
)

507 i‡(
gauge
->
›s
->
£t_low_thªshﬁd
)

508 
gauge
->
›s
->
	`£t_low_thªshﬁd
(
vÆ
);

509 
	}
}

511 
ölöe
 
boﬁ
 
	$pmu_is_ch¨gög
()

513 i‡(
ch¨gî
)

514  
PMU_STATUS_CHARGING
 =
	`pmu_b©ãry_gë_°©us
(
ch¨gî
);

516  
Ál£
;

517 
	}
}

519 
ölöe
 
boﬁ
 
	$pmu_is_fuŒ
()

521 i‡(
ch¨gî
)

522  
PMU_STATUS_FULL
 =
	`pmu_b©ãry_gë_°©us
(
ch¨gî
);

524  
Ál£
;

525 
	}
}

527 
	$pmu_h™dÀ_evíts
()

529 
uöt8_t
 
Êags
;

530 
uöt16_t
 
vÆ
;

531 
boﬁ
 
b©ãry_¥e£¡
 = 
	`pmu_b©ãry_¥e£¡
();

532 
boﬁ
 
is_ch¨gög
 = 
Ál£
;

533 
boﬁ
 
is_fuŒ
 = 
Ál£
;

534 
boﬁ
 
ovîãmp
 = 
	`io_ã°_pö
(
OVERTEMP
);

535 
boﬁ
 
∑nic
 = 
	`io_ã°_pö
(
PANICn
);

539 i‡(
b©ãry_¥e£¡
 && !
b©ãry_¥e£¡_œ°
) {

540 
	`…c294x_öô
(
LTC294X_MODEL_2942
);

541 
	`pmu_gauge_£t_ch¨ge
(
ch¨ge_⁄_œ°_u≈lug
);

542 } i‡(!
b©ãry_¥e£¡
 && 
b©ãry_¥e£¡_œ°
) {

543 
gauge
 = 
NULL
;

544 
ch¨ge_⁄_œ°_u≈lug
 = 
	`pmu_gauge_gë_ch¨ge
();

546 
b©ãry_¥e£¡_œ°
 = 
b©ãry_¥e£¡
;

548 i‡(
∑nic
 !
∑nic_œ°
)

549 
	`pmu_powî_down
();

550 
∑nic_œ°
 = 
∑nic
;

552 i‡(
ovîãmp
) {

553 
	`Âga_£t_gauge_°©us
(
	`BIT
(6));

554 
pmu_îr‹
 = 
PMU_ERROR_GLOBAL_TEMP
;

557 i‡(
b©ãry_¥e£¡
) {

558 
is_ch¨gög
 = 
	`pmu_is_ch¨gög
();

559 
is_fuŒ
 = 
	`pmu_is_fuŒ
();

563 i‡(
pmu_îr‹
 !
PMU_ERROR_NONE
) {

564 
pmu_îr‹
) {

565 
PMU_ERROR_BATTERY_LOW
:

566 i‡(
is_off
 || 
is_ch¨gög
)

567 
pmu_îr‹
 = 
PMU_ERROR_NONE
;

569 
PMU_ERROR_CHARGER_TEMP
:

570 i‡(!
is_ch¨gög
)

571 
pmu_îr‹
 = 
PMU_ERROR_NONE
;

573 
PMU_ERROR_GLOBAL_TEMP
:

574 i‡(!
ovîãmp
)

575 
pmu_îr‹
 = 
PMU_ERROR_NONE
;

582 (Ë
	`pmu_ªguœt‹_check_evíts
(&
PS_FPGA
.
pmu_ªg
);

584 (Ë
	`pmu_ªguœt‹_check_evíts
(&
PS_VDRAM
.
pmu_ªg
);

586 
Êags
 = 
	`pmu_buâ⁄_check_evíts
(
buâ⁄
);

587 i‡(
is_off
 && (
Êags
 & 
PMU_BUTTON_EVENT_MASK_WAKEUP
))

588 
	`pmu_powî_⁄
();

590 i‡(
is_⁄
 && (
Êags
 & 
PMU_BUTTON_EVENT_MASK_POWERDOWN
))

591 
	`pmu_powî_down
();

594 i‡(
b©ãry_¥e£¡
) {

595 
Êags
 = 
	`pmu_ch¨gî_check_evíts
(
ch¨gî
);

597 i‡(
Êags
 !
PMU_CHARGER_EVENT_NONE
) {

598 i‡((
Êags
 & 
PMU_CHARGER_EVENT_FAULT_CHANGE
)

599 || (
Êags
 & 
PMU_CHARGER_EVENT_STATUS_CHANGE
)) {

600 
uöt8_t
 
hó…h
 = 
	`pmu_b©ãry_gë_hó…h
(
ch¨gî
);

601 
hó…h
) {

602 
PMU_HEALTH_OVERHEAT
:

603 
pmu_îr‹
 = 
PMU_ERROR_CHARGER_TEMP
;

610 i‡((
Êags
 & 
PMU_CHARGER_EVENT_CHARGE_DONE
)) {

611 
œ°_fuŒ_ch¨ge
 = 
	`pmu_gauge_gë_ch¨ge
();

612 
	`pmu_gauge_£t_low_thªshﬁd
(
œ°_fuŒ_ch¨ge
 / 10);

613 
	`ì¥om_£t_œ°_fuŒ_ch¨ge
(
œ°_fuŒ_ch¨ge
);

617 
Êags
 = 
	`pmu_gauge_check_evíts
();

618 i‡(
Êags
 !
PMU_GAUGE_EVENT_NONE
) {

619 i‡(
Êags
 & 
PMU_GAUGE_CHARGE_LO
) {

620 i‡(!
is_ch¨gög
) {

621 
	`Âga_£t_gauge_°©us
(
	`BIT
(7));

622 
pmu_îr‹
 = 
PMU_ERROR_BATTERY_LOW
;

626 i‡(
Êags
 & 
PMU_GAUGE_TEMP_HI
) {

627 
	`Âga_£t_gauge_°©us
(
	`BIT
(6));

628 
pmu_îr‹
 = 
PMU_ERROR_GAUGE_TEMP
;

631 i‡(
Êags
 & 
PMU_GAUGE_TEMP_LO
) {

632 
	`Âga_£t_gauge_°©us
(
	`BIT
(6));

633 
pmu_îr‹
 = 
PMU_ERROR_GAUGE_TEMP
;

639 
pmu_îr‹
) {

640 
PMU_ERROR_NONE
:

641 i‡(
is_off
) {

642 i‡(
is_ch¨gög
)

643 
	`Àd_£t_blök
(
LED_BLINK_GREEN_SLOW
);

645 
	`Àd_£t_sﬁid
(
LED_OFF
);

646 } i‡(
is_⁄
) {

647 i‡(
is_ch¨gög
)

648 
	`Àd_£t_blök
(
LED_BLINK_GREEN_FAST
);

649 i‡(
is_fuŒ
 || !
b©ãry_¥e£¡
)

650 
	`Àd_£t_sﬁid
(
LED_GREEN
);

651 i‡(
b©ãry_¥e£¡
)

652 
	`Àd_£t_sﬁid
(
LED_ORANGE
);

654 
	`Àd_£t_sﬁid
(
LED_GREEN
);

657 
PMU_ERROR_BATTERY_LOW
:

658 i‡(!
is_ch¨gög
 && 
is_⁄
)

659 
	`Àd_£t_blök
(
LED_BLINK_ORANGE
);

662 
	`Àd_£t_blök_£q
(
pmu_îr‹
, 
LED_BLINK_RED_FAST
);

666 
	`Âga_£t_ch¨gî_hó…h
(
	`pmu_ch¨gî_gë_hó…h
(
ch¨gî
));

667 
	`Âga_£t_ch¨gî_⁄löe
(
	`pmu_ch¨gî_gë_⁄löe
(
ch¨gî
));

668 i‡(
b©ãry_¥e£¡
) {

669 
	`Âga_£t_ch¨gî_ch¨ge_ty≥
(
	`pmu_ch¨gî_gë_ch¨ge_ty≥
(
ch¨gî
));

670 
	`Âga_£t_b©ãry_vﬁège
(
	`pmu_b©ãry_vﬁège
());

671 
	`Âga_£t_b©ãry_ãmp_Æît
(
	`pmu_b©ãry_gë_ãmp_Æît
(
ch¨gî
));

672 
	`Âga_£t_b©ãry_°©us
(
	`pmu_b©ãry_gë_°©us
(
ch¨gî
));

673 
	`Âga_£t_b©ãry_hó…h
(
	`pmu_b©ãry_gë_hó…h
(
ch¨gî
));

674 
	`Âga_£t_b©ãry_⁄löe
(
	`pmu_b©ãry_gë_⁄löe
(
ch¨gî
));

675 
	`Âga_£t_gauge_ch¨ge
(
	`pmu_gauge_gë_ch¨ge
());

676 
	`Âga_£t_gauge_ch¨ge_œ°_fuŒ
(
œ°_fuŒ_ch¨ge
);

677 
	`Âga_£t_gauge_ãmp
(
	`pmu_gauge_gë_ãm≥øtuª
());

678 
	`Âga_£t_gauge_vﬁège
(
	`pmu_gauge_gë_vﬁège
());

680 i‡(
°©e
 !
OFF
) {

681 
	`Âga_sync
();

682 i‡(
	`Âga_gë_wrôe_ch¨ge
()) {

683 
vÆ
 = 
	`Âga_gë_gauge_ch¨ge
();

684 
	`pmu_gauge_£t_ch¨ge
(
vÆ
);

685 i‡(
pmu_îr‹
 =
PMU_ERROR_BATTERY_LOW
)

686 
pmu_îr‹
 = 
PMU_ERROR_NONE
;

689 i‡(
	`Âga_gë_shutdown
())

690 
	`pmu_powî_down
();

692 i‡(
	`Âga_gë_wrôe_£âögs
()) {

693 
	`ì¥om_£t_autoboŸ
(
	`Âga_gë_£âögs
(Ë& 
	`BIT
(0));

694 
	`pmu_£t_ªguœt‹
(&
PS_TX
.
pmu_ªg
, !!(
	`Âga_gë_£âögs
(Ë& 
	`BIT
(1)));

697 
	}
}

	@firmware/e300/battery/pmu.h

20 #i‚de‡
PMU_H


21 
	#PMU_H


	)

23 
	~<°dboﬁ.h
>

24 
	~"öãºu±.h
"

25 
	~"utûs.h
"

31 
öt8_t
 
pmu_öô
();

33 
pmu_ªguœt‹
 
	tpmu_ªguœt‹_t
;

35 
	spmu_ªguœt‹_›s
 {

36 
öt8_t
 (*
£t_vﬁège
)(
	mpmu_ªguœt‹_t
 *, 
	muöt16_t
);

37 
öt8_t
 (*
£t_ªguœt‹
)(
	mpmu_ªguœt‹_t
 *, 
	mboﬁ
);

38 
öt8_t
 (*
check_evíts
)(
	mpmu_ªguœt‹_t
 *);

39 } 
	tpmu_ªguœt‹_›s_t
;

41 
	spmu_ªguœt‹
 {

42 c⁄° 
pmu_ªguœt‹_›s_t
 *
	m›s
;

43 c⁄° 
uöt16_t
 
	mvﬁège
;

44 
boﬁ
 
	mpowîed
;

45 
uöt8_t
 
	mîr‹_code
;

51 
pmu_h™dÀ_evíts
();

53 
úqªtu∫_t
 
pmu_Âga_úq_h™dÀr
();

54 
úqªtu∫_t
 
pmu_Àd_timî_comp_a_úq_h™dÀr
();

55 
úqªtu∫_t
 
pmu_Àd_timî_comp_b_úq_h™dÀr
();

56 
úqªtu∫_t
 
pmu_wdt_h™dÀr
();

61 
pmu_powî_⁄
();

63 
	epmu_hó…h
 {

64 
	mPMU_HEALTH_GOOD
,

65 
	mPMU_HEALTH_UNSPEC_FAIL
,

66 
	mPMU_HEALTH_OVERVOLTAGE
,

67 
	mPMU_HEALTH_OVERHEAT
,

68 
	mPMU_HEALTH_COLD
,

69 
	mPMU_HEALTH_SAFETY_TIMER_EXPIRE
,

70 
	mPMU_HEALTH_UNKNOWN


73 
	epmu_ch¨ge_ty≥
 {

74 
	mPMU_CHARGE_TYPE_NONE
,

75 
	mPMU_CHARGE_TYPE_TRICKLE
,

76 
	mPMU_CHARGE_TYPE_FAST
,

79 
	epmu_°©us
 {

80 
	mPMU_STATUS_NOT_CHARGING
,

81 
	mPMU_STATUS_CHARGING
,

82 
	mPMU_STATUS_FULL
,

83 
	mPMU_STATUS_DISCHARGING


86 
pmu_ch¨gî
 
	tpmu_ch¨gî_t
;

88 
	epmu_ch¨gî_evít_mask
 {

89 
	mPMU_CHARGER_EVENT_NONE
 = 0x00,

90 
	mPMU_CHARGER_EVENT_STATUS_CHANGE
 = 
BIT
(0),

91 
	mPMU_CHARGER_EVENT_FAULT_CHANGE
 = 
BIT
(1),

92 
	mPMU_CHARGER_EVENT_CHARGE_DONE
 = 
BIT
(2)

95 
	spmu_ch¨gî_›s
 {

96 
öt8_t
 (*
£t_ch¨gî_vﬁège
)(
	mpmu_ch¨gî_t
 *, 
	muöt16_t
);

97 
öt8_t
 (*
£t_ch¨gî_cuºít
)(
	mpmu_ch¨gî_t
 *, 
	muöt16_t
);

99 
uöt8_t
 (*
gë_ãmp_Æît
)(
	mpmu_ch¨gî_t
 *);

100 
öt8_t
 (*
£t_ãmp_Æît
)(
	mpmu_ch¨gî_t
 *, 
	muöt8_t
);

102 
pmu_ch¨ge_ty≥
 (*
gë_ch¨ge_ty≥
)(
	mpmu_ch¨gî_t
 *);

103 
öt8_t
 (*
£t_ch¨ge_ty≥
)(
	mpmu_ch¨gî_t
 *, 
	mpmu_ch¨ge_ty≥
);

104 
pmu_hó…h
 (*
gë_ch¨gî_hó…h
)(
	mpmu_ch¨gî_t
 *);

105 
boﬁ
 (*
gë_ch¨gî_⁄löe
)(
	mpmu_ch¨gî_t
 *);

107 
pmu_hó…h
 (*
gë_b©ãry_hó…h
)(
	mpmu_ch¨gî_t
 *);

108 
pmu_°©us
 (*
gë_b©ãry_°©us
)(
	mpmu_ch¨gî_t
 *);

109 
boﬁ
 (*
gë_b©ãry_⁄löe
)(
	mpmu_ch¨gî_t
 *);

111 
uöt8_t
 (*
check_evíts
)(
	mpmu_ch¨gî_t
 *);

112 } 
	tpmu_ch¨gî_›s_t
;

114 
	spmu_ch¨gî
 {

115 c⁄° 
pmu_ch¨gî_›s_t
 *
	m›s
;

122 
pmu_ªgi°î_ch¨gî
(
pmu_ch¨gî_t
 *
pmu_ch¨gî
);

124 
pmu_buâ⁄
 
	tpmu_buâ⁄_t
;

126 
	epmu_buâ⁄_evít_mask
 {

127 
	mPMU_BUTTON_EVENT_MASK_PRESS
 = 0x01,

128 
	mPMU_BUTTON_EVENT_MASK_RELEASE
 = 0x02,

129 
	mPMU_BUTTON_EVENT_MASK_POWERDOWN
 = 0x04,

130 
	mPMU_BUTTON_EVENT_MASK_WAKEUP
 = 0x08,

133 
	spmu_buâ⁄_›s
 {

134 
uöt8_t
 (*
check_evíts
)(
	mpmu_buâ⁄_t
 *);

135 } 
	tpmu_buâ⁄_›s_t
;

137 
	spmu_buâ⁄
 {

138 c⁄° 
pmu_buâ⁄_›s_t
 *
	m›s
;

145 
pmu_ªgi°î_buâ⁄
(
pmu_buâ⁄_t
 *
pmu_buâ⁄
);

147 
pmu_gauge
 
	tpmu_gauge_t
;

149 
	epmu_gauge_evít_mask
 {

150 
	mPMU_GAUGE_EVENT_NONE
 = 0x00,

151 
	mPMU_GAUGE_CHARGE_HI
 = 0x01,

152 
	mPMU_GAUGE_CHARGE_LO
 = 0x02,

153 
	mPMU_GAUGE_TEMP_HI
 = 0x04,

154 
	mPMU_GAUGE_TEMP_LO
 = 0x08,

155 
	mPMU_GAUGE_VOLT_LO
 = 0x10,

156 
	mPMU_GAUGE_VOLT_HI
 = 0x20,

159 
	spmu_gauge_›s
 {

160 
uöt8_t
 (*
check_evíts
)();

161 
uöt16_t
 (*
gë_ch¨ge
)();

162 (*
	m£t_ch¨ge
)(
uöt16_t
 
	mvÆ
);

163 (*
	m£t_low_thªshﬁd
)(
uöt16_t
 
	mvÆ
);

164 
uöt16_t
 (*
gë_ãm≥øtuª
)();

165 
uöt16_t
 (*
gë_vﬁège
)();

166 } 
	tpmu_gauge_›s_t
;

168 
	spmu_gauge
 {

169 c⁄° 
pmu_gauge_›s_t
 *
	m›s
;

175 
pmu_ªgi°î_gauge
(
pmu_gauge_t
 *
pmu_gauge
);

	@firmware/e300/battery/spi.c

16 
	~"mcu_£âögs.h
"

17 
	~"io.h
"

18 
	~"•i.h
"

19 
	~"utûs.h
"

21 
	~<avr/io.h
>

22 
	~<°dlib.h
>

23 
	~<utû/dñay.h
>

25 
io_pö_t
 
	gAVR_CS
 = 
IO_PB
(2);

26 
io_pö_t
 
	gAVR_MOSI
 = 
IO_PB
(3);

27 
io_pö_t
 
	gAVR_MISO
 = 
IO_PB
(4);

28 
io_pö_t
 
	gAVR_SCK
 = 
IO_PB
(5);

30 
	$•i_öô
(
•i_ty≥_t
 
ty≥
, 
•i_‹dî_t
 
‹dî
, 
•i_mode_t
 
mode
, 
•i_•ìd_t
 
•ìd
)

32 
uöt8_t
 
vÆ
;

34 
	`io_ouçut_pö
(
AVR_CS
);

35 
	`io_ouçut_pö
(
AVR_MOSI
);

36 
	`io_öput_pö
(
AVR_MISO
);

37 
	`io_ouçut_pö
(
AVR_SCK
);

40 
	`io_£t_pö
(
AVR_CS
);

43 
vÆ
 = 
	`BIT
(
SPE
);

44 
vÆ
 |(
‹dî
 =
SPI_LSB_FIRST
Ë? 
	`BIT
(
DORD
) : 0;

45 
vÆ
 |(
ty≥
 =
SPI_TYPE_MASTER
Ë? 
	`BIT
(
MSTR
) : 0;

46 
vÆ
 |
mode
 << 
CPHA
;

47 
vÆ
 |
•ìd
 << 
SPR0
;

49 
SPCR
 = 
vÆ
;

50 
	}
}

52 
uöt8_t
 
	$•i_å™ß˘
(
uöt8_t
 
d©a
)

54 
uöt8_t
 
ªt
;

56 
	`io_˛ór_pö
(
AVR_CS
);

57 
SPDR
 = 
d©a
;

58 
ªt
 = 
SPDR
;

59 
	`io_£t_pö
(
AVR_CS
);

60  
ªt
;

61 
	}
}

63 
	$•i_å™ß˘_buf
(
uöt8_t
 *
ö
, uöt8_à*
out
, uöt8_à
size
)

65 
uöt8_t
 
i
;

67 
	`io_˛ór_pö
(
AVR_CS
);

69 
i
 = 0; i < 
size
; i++) {

70 
SPDR
 = 
ö
[
i
];

71 
	`•i_waô_tûl_d⁄e
();

72 
out
[
i
] = 
SPDR
;

75 
	`io_£t_pö
(
AVR_CS
);

76 
	}
}

78 
	$•i_waô_tûl_d⁄e
()

80 
uöt8_t
 
timeout
 = 100;

83 
	`_dñay_us
(10);

84 
timeout
--;

85 } 
timeout
 && !(
SPSR
 & 
	`BIT
(
SPIF
)));

86 
	}
}

	@firmware/e300/battery/spi.h

21 #i‚de‡
SPI_H


22 
	#SPI_H


	)

24 
	~<°dlib.h
>

26 
	e•i_ty≥
 {

27 
	mSPI_TYPE_MASTER
 = 0x00,

28 
	mSPI_TYPE_SLAVE
 = 0x01

29 } 
	t•i_ty≥_t
;

31 
	e•i_mode
 {

32 
	mSPI_MODE_0
 = 0x00,

33 
	mSPI_MODE_1
 = 0x01,

34 
	mSPI_MODE_2
 = 0x02,

35 
	mSPI_MODE_3
 = 0x03,

36 } 
	t•i_mode_t
;

39 
	e•i_•ìd
 {

40 
	mSPI_SPEED_2M
 = 0x00,

41 
	mSPI_SPEED_500K
 = 0x01,

42 
	mSPI_SPEED_125K
 = 0x02,

43 
	mSPI_SPEED_62_5K
 = 0x03,

44 } 
	t•i_•ìd_t
;

46 
	e•i_‹dî
 {

47 
	mSPI_MSB_FIRST
 = 0x00,

48 
	mSPI_LSB_FIRST
 = 0x01,

49 } 
	t•i_‹dî_t
;

58 
•i_öô
(
•i_ty≥_t
 
ty≥
, 
•i_‹dî_t
 
‹dî
, 
•i_mode_t
 
mode
, 
•i_•ìd_t
 
•ìd
);

66 
uöt8_t
 
•i_å™ß˘
(uöt8_à
d©a
);

68 
•i_å™ß˘_buf
(
uöt8_t
 *
ö
, uöt8_à*
out
, uöt8_à
size
);

72 
•i_waô_tûl_d⁄e
();

	@firmware/e300/battery/timer.c

16 
	~<avr/io.h
>

18 
	~"timî.h
"

19 
	~"utûs.h
"

22 c⁄° 
uöt8_t
 
	gTIMER0_OFF_MASK
 = 0xf8;

23 c⁄° 
uöt8_t
 
	gTIMER1_OFF_MASK
 = 0xf8;

25 
	$timî0_öô
()

28 
TCCR0A
 = 
	`BIT
(
CTC0
);

31 
OCR0A
 = 244;

34 
TIMSK0
 = 
	`BIT
(
OCIE0A
);

35 
	}
}

37 
	$timî0_°¨t
()

39 
TCNT0
 = 0x00;

41 
TCCR0A
 |
	`BIT
(
CS02
Ë| BIT(
CS00
);

42 
	}
}

44 
	$timî0_°›
()

47 
TCCR0A
 &
TIMER0_OFF_MASK
;

48 
	}
}

50 
	$timî1_öô
()

53 
TCNT1
 = 0x0;

56 
TCCR1B
 = 
	`BIT
(
WGM12
);

62 
OCR1A
 = 7811 * 2;

65 
TIMSK1
 = 
	`BIT
(
OCIE1A
);

66 
	}
}

68 
	$timî1_°¨t
()

71 
TCNT1
 = 0x0000;

74 
TCCR1B
 |
	`BIT
(
CS12
Ë| BIT(
CS10
);

75 
	}
}

77 
	$timî1_°›
()

80 
TCCR1B
 &
TIMER1_OFF_MASK
;

81 
	}
}

	@firmware/e300/battery/timer.h

20 #i‚de‡
TIMER_H


21 
	#TIMER_H


	)

26 
timî0_öô
();

31 
timî0_°¨t
();

36 
timî0_°›
();

41 
timî1_öô
();

46 
timî1_°¨t
();

51 
timî1_°›
();

	@firmware/e300/battery/tps54478.c

16 
	~"mcu_£âögs.h
"

17 
	~"io.h
"

18 
	~"çs54478.h
"

20 
	~<°dlib.h
>

22 
	~<utû/dñay.h
>

23 
	~<utû/©omic.h
>

25 
io_pö_t
 
	gCORE_PWR_EN
 = 
IO_PA
(3);

26 
io_pö_t
 
	gCORE_PGOOD
 = 
IO_PB
(0);

31 c⁄° 
uöt8_t
 
	gTPS54478_START_DELAY
 = 10;

34 vﬁ©ûê
boﬁ
 
	gçs54478_evít
 = 
Ál£
;

36 
boﬁ
 
	$çs54478_gë_powî_good
()

38  
	`io_ã°_pö
(
CORE_PGOOD
);

39 
	}
}

41 
öt8_t
 
	$çs54478_£t_ªguœt‹
(
pmu_ªguœt‹_t
 *
pmu_ªg
, 
boﬁ
 
⁄
)

43 (Ë
pmu_ªg
;

45 i‡(
⁄
) {

46 
	`io_öput_pö
(
CORE_PWR_EN
);

47 
	`_dñay_ms
(
TPS54478_START_DELAY
);

49 
	`io_ouçut_pö
(
CORE_PWR_EN
);

54  !(
⁄
 =
	`çs54478_gë_powî_good
());

55 
	}
}

57 
	$çs54478_öô
(
boﬁ
 
íabÀ
)

60 
	`io_öput_pö
(
CORE_PGOOD
);

61 
	`io_£t_pö
(
CORE_PGOOD
);

63 
	`çs54478_£t_ªguœt‹
(
NULL
, 
íabÀ
);

65 
	`io_˛ór_pö
(
CORE_PWR_EN
);

66 
	}
}

68 
öt8_t
 
	$çs54478_check_evíts
(
pmu_ªguœt‹_t
 *
ªg
)

70 
boﬁ
 
powî_good
;

71 
boﬁ
 
evít
;

73 
evít
 = 
Ál£
;

74 
	`ATOMIC_BLOCK
(
ATOMIC_RESTORESTATE
) {

75 i‡(
çs54478_evít
) {

76 
çs54478_evít
 = 
Ál£
;

77 
evít
 = 
åue
;

81 i‡(
evít
) {

82 
powî_good
 = 
	`çs54478_gë_powî_good
();

83 i‡(!
powî_good
)

87 
	}
}

89 c⁄° 
pmu_ªguœt‹_›s_t
 
	gçs54478_›s
 = {

90 .
£t_vﬁège
 = 
NULL
,

91 .
	g£t_ªguœt‹
 = 
çs54478_£t_ªguœt‹
,

92 .
	gcheck_evíts
 = 
çs54478_check_evíts
,

95 
úqªtu∫_t
 
	$çs54478_úq_h™dÀr
()

97 
boﬁ
 
powî_good
;

98 
powî_good
 = 
	`çs54478_gë_powî_good
();

103 i‡(
powî_good
) {

104  
IRQ_NONE
;

106 
çs54478_evít
 = 
åue
;

107  
IRQ_HANDLED
;

109  
IRQ_HANDLED
;

110 
	}
}

	@firmware/e300/battery/tps54478.h

21 #i‚de‡
TPS54478_H


22 
	#TPS54478_H


	)

24 
	~<°dboﬁ.h
>

25 
	~"pmu.h
"

26 
	~"öãºu±.h
"

32 
çs54478_öô
(
boﬁ
 
íabÀd
);

38 
úqªtu∫_t
 
çs54478_úq_h™dÀr
();

40 
	sçs54478_pmu_ªguœt‹
 {

41 
pmu_ªguœt‹_t
 
	mpmu_ªg
;

42 } 
	tçs54478_pmu_ªguœt‹_t
;

44 c⁄° 
pmu_ªguœt‹_›s_t
 
çs54478_›s
;

	@firmware/e300/battery/utils.h

21 #i‚de‡
UTILS_H


22 
	#UTILS_H


	)

24 
	~<°ddef.h
>

32 
	#ARRAY_SIZE
(
x
Ë((x)/(x[0]))

	)

39 #ifde‡
__GNUC__


40 
	#membî_ty≥
(
ty≥
, 
membî
Ë
	`__ty≥of__
 ((—y≥ *)0)->membî)

	)

42 
	#membî_ty≥
(
ty≥
, 
membî
Ëc⁄° 

	)

45 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ((type *)( \

46 (*)(
	`membî_ty≥
(
ty≥
, 
membî
Ë*){ 
±r
 } - 
	`off£tof
—y≥, membî)))

	)

51 
	#BIT
(
bô
Ë(1 << (bô))

	)

	@firmware/e300/rev_b/bq24190.c

7 #ifde‡
CHARGER_TI


9 
	~"c⁄fig.h
"

10 
	~"bq24190.h
"

12 
	~<utû/dñay.h
>

14 
	~"io.h
"

15 
	~"i2c.h
"

16 
	~"debug.h
"

17 
	~"globÆ.h
"

18 
	~"îr‹.h
"

20 #i‚de‡
I2C_REWORK


21 
	~"powî.h
"

24 
io_pö_t
 
	gUSBPM_IRQ
 = 
IO_PB
(1);

26 #ifde‡
ATTINY88_DIP


28 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(2);

29 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(3);

33 #ifde‡
I2C_REWORK


35 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(4);

36 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(5);

40 
	#CHRG_SDA
 
PWR_SDA


	)

41 
	#CHRG_SCL
 
PWR_SCL


	)

47 c⁄° 
boﬁ
 
	g_bq24190_puŒ_up
 = 
Ál£
;

49 
	#BQ24190_BASE_ADDRESS
 (0x6B << 1)

	)

50 
	#BQ24190_WRITE_ADDRESS
 (
BQ24190_BASE_ADDRESS
 + 0)

	)

51 
	#BQ24190_READ_ADDRESS
 (
BQ24190_BASE_ADDRESS
 + 1)

	)

53 
	eBQ24190Regi°îs


55 
	mBQ24190_REG_INPUT_SOURCE_CTL
= 0,

56 
	mBQ24190_REG_PWR_ON_CONFIG
 = 1,

57 
	mBQ24190_REG_CHARGE_CURRENT
 = 2,

58 
	mBQ24190_REG_PRE_TERM_CURRENT
= 3,

59 
	mBQ24190_REG_CHARGE_VOLTAGE
 = 4,

60 
	mBQ24190_REG_TIMER_CONTROL
 = 5,

61 
	mBQ24190_REG_SYSTEM_STATUS
 = 8,

62 
	mBQ24190_REG_FAULT
 = 9

70 
	eBQ24190Shi·s


72 
	mBQ24190_SHIFTS_CHARGER_CONFIG
 = 4,

73 
	mBQ24190_SHIFTS_I2C_WATCHDOG
 = 4,

74 
	mBQ24190_SHIFTS_CHARGER_STATUS
 = 4,

75 
	mBQ24190_SHIFTS_CHARGER_FAULT
 = 4,

78 
	eBQ24190VBusSètus


80 
	mBQ24190_VBUS_UNKNOWN
,

81 
	mBQ24190_VBUS_USB
,

82 
	mBQ24190_VBUS_ADAPTER
,

83 
	mBQ24190_VBUS_OTG


86 
	eBQ24190Ch¨gîSètus


88 
	mBQ24190_CHRG_STAT_NOT_CHARGING
,

89 
	mBQ24190_CHRG_STAT_PRE_CHARGE
,

90 
	mBQ24190_CHRG_STAT_FAST_CHARGING
,

91 
	mBQ24190_CHRG_STAT_CHARGE_TERMINATION_DONE
,

92 
	mBQ24190_CHRG_STAT_MASK
 = 
BQ24190_CHRG_STAT_CHARGE_TERMINATION_DONE


95 
	eBQ24190Sy°emSètus


97 
	mBQ24190_STATUS_DPM
 = 0x08,

98 
	mBQ24190_STATUS_POWER_GOOD
 = 0x04,

99 
	mBQ24190_STATUS_THERMAL_REGULATION
 = 0x02,

100 
	mBQ24190_STATUS_VSYSMIN_REGULATION
 = 0x01

103 
	eBQ24190Fau…s


105 
	mBQ24190_FAULT_WATCHDOG_EXPIRED
 = 0x80,

106 
	mBQ24190_FAULT_VBUS_OVERLOADED
 = 0x40,

107 
	mBQ24190_FAULT_BATOVP
 = 0x08

110 
	eBQ24190Ch¨gîFau…s


112 
	mBQ24190_CHRGFAULT_NORMAL
,

113 
	mBQ24190_CHRGFAULT_INPUT
,

114 
	mBQ24190_CHRGFAULT_THERMAL
,

115 
	mBQ24190_CHRGFAULT_SAFETY_TIMER


118 
	eBQ24190NTCFau…s


120 
	mBQ24190_NTCFAULT_NORMAL
,

121 
	mBQ24190_NTCFAULT_TS1_COLD
,

122 
	mBQ24190_NTCFAULT_TS1_HOT
,

123 
	mBQ24190_NTCFAULT_TS2_COLD
,

124 
	mBQ24190_NTCFAULT_TS2_HOT
,

125 
	mBQ24190_NTCFAULT_BOTH_COLD
,

126 
	mBQ24190_NTCFAULT_BOTH_HOT


129 
boﬁ
 
	$bq24190_toggÀ_ch¨gî
(
boﬁ
 
⁄
)

131 
uöt8_t
 
c⁄fig
 = 0;

132 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_PWR_ON_CONFIG
, &
c⁄fig
, 
_bq24190_puŒ_up
Ë=
Ál£
)

133  
Ál£
;

135 
	`debug_log_ex
("BQPC ", 
Ál£
);

136 
	`debug_log_hex
(
c⁄fig
);

138 
c⁄fig
 &~(0x3 << 
BQ24190_SHIFTS_CHARGER_CONFIG
);

139 i‡(
⁄
)

140 
c⁄fig
 |(0x01 << 
BQ24190_SHIFTS_CHARGER_CONFIG
);

142 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_WRITE_ADDRESS
, 
BQ24190_REG_PWR_ON_CONFIG
, 
c⁄fig
, 
_bq24190_puŒ_up
Ë=
Ál£
)

143  
Ál£
;

155  
åue
;

156 
	}
}

158 
boﬁ
 
	$bq24190_öô
(
boﬁ
 
dißbÀ_ch¨gî
)

160 #ifde‡
I2C_REWORK


161 
	`i2c_öô_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
_bq24190_puŒ_up
);

163 
	`io_öput_pö
(
USBPM_IRQ
);

164 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

167 i‡(
dißbÀ_ch¨gî
)

169 i‡(
	`bq24190_toggÀ_ch¨gî
(
Ál£
) == false)

170  
Ál£
;

175 
uöt8_t
 
timî_c⁄åﬁ
 = 0;

176 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_TIMER_CONTROL
, &
timî_c⁄åﬁ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

177  
Ál£
;

179 
	`debug_log_ex
("BQTC ", 
Ál£
);

180 
	`debug_log_hex
(
timî_c⁄åﬁ
);

182 
timî_c⁄åﬁ
 &~(0x3 << 
BQ24190_SHIFTS_I2C_WATCHDOG
);

183 
timî_c⁄åﬁ
 |(0x00 << 
BQ24190_SHIFTS_I2C_WATCHDOG
);

185 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_WRITE_ADDRESS
, 
BQ24190_REG_TIMER_CONTROL
, 
timî_c⁄åﬁ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

186  
Ál£
;

205 
uöt8_t
 
öput_§c_˘l
 = 0;

206 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_INPUT_SOURCE_CTL
, &
öput_§c_˘l
, 
_bq24190_puŒ_up
Ë=
Ál£
)

207  
Ál£
;

209 
	`debug_log_ex
("BQIS ", 
Ál£
);

210 
	`debug_log_hex
(
öput_§c_˘l
);

215 
öput_§c_˘l
 |= (0x07);

217 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_WRITE_ADDRESS
, 
BQ24190_REG_INPUT_SOURCE_CTL
, 
öput_§c_˘l
, 
_bq24190_puŒ_up
Ë=
Ál£
)

218  
Ál£
;

220  
åue
;

221 
	}
}

223 
boﬁ
 
	$bq24190_has_öãºu±
()

229  (
	`io_ã°_pö
(
USBPM_IRQ
Ë=
Ál£
);

230 
	}
}

232 
uöt8_t
 
	g_bq24190_œ°_°©us
, 
	g_bq24190_œ°_Áu…
;

234 
boﬁ
 
	$_bq24190_h™dÀ_úq
()

236 
uöt8_t
 
vÆ
 = 0x00;

237 
boﬁ
 
ªsu…
 = 
Ál£
;

239 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_SYSTEM_STATUS
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

240 
_bq24190_h™dÀ_Áû
;

242 
	`debug_log_ex
("BQST ", 
Ál£
);

243 
	`debug_log_hex
(
vÆ
);

245 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_SYSTEM_STATUS
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

246 
_bq24190_h™dÀ_Áû
;

248 
_bq24190_œ°_°©us
 = 
vÆ
;

250 
	`debug_log_ex
("BQST ", 
Ál£
);

251 
	`debug_log_hex
(
vÆ
);

268 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_FAULT
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

269 
_bq24190_h™dÀ_Áû
;

271 
	`debug_log_ex
("BQF ", 
Ál£
);

272 
	`debug_log_hex
(
vÆ
);

274 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_FAULT
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

275 
_bq24190_h™dÀ_Áû
;

277 
_bq24190_œ°_Áu…
 = 
vÆ
;

279 
	`debug_log_ex
("BQF ", 
Ál£
);

280 
	`debug_log_hex
(
vÆ
);

282 
vÆ
 = (
_bq24190_œ°_°©us
 >> 
BQ24190_SHIFTS_CHARGER_STATUS
Ë& 
BQ24190_CHRG_STAT_MASK
;

284 i‡(
_°©e
.
blök_îr‹
 =
BlökEº‹_N⁄e
)

286 
vÆ
)

288 
BQ24190_CHRG_STAT_PRE_CHARGE
:

289 
BQ24190_CHRG_STAT_FAST_CHARGING
:

292 i‡((
_°©e
.
b©ãry_nŸ_¥e£¡
 =
Ál£
)

296 
	`ch¨ge_nŸify
(
åue
);

303 
	`ch¨ge_nŸify
(
Ál£
);

309 
ªsu…
 = 
åue
;

310 
_bq24190_h™dÀ_Áû
:

311  
ªsu…
;

312 
	}
}

314 
boﬁ
 
	$bq24190_h™dÀ_úq
()

316 
	`pmc_mask_úqs
(
åue
);

320 
boﬁ
 
ªsu…
 = 
	`_bq24190_h™dÀ_úq
();

322 
	`pmc_mask_úqs
(
Ál£
);

324  
ªsu…
;

325 
	}
}

	@firmware/e300/rev_b/bq24190.h

8 #i‚de‡
BQ24190_H_


9 
	#BQ24190_H_


	)

11 
	~<°dboﬁ.h
>

12 
	~<°döt.h
>

14 #ifde‡
CHARGER_TI


16 
boﬁ
 
bq24190_öô
(boﬁ 
dißbÀ_ch¨gî
);

17 
boﬁ
 
bq24190_has_öãºu±
();

18 
boﬁ
 
bq24190_h™dÀ_úq
();

21 
boﬁ
 
bq24190_toggÀ_ch¨gî
(boﬁ 
⁄
);

	@firmware/e300/rev_b/config.h

1 
	#__DELAY_BACKWARD_COMPATIBLE__


2 
	#F_CPU
 1000000UL

	@firmware/e300/rev_b/debug.c

5 
	~"c⁄fig.h
"

6 
	~"debug.h
"

8 
	~<utû/dñay.h
>

9 
	~<avr/io.h
>

10 
	~<avr/öãºu±.h
>

12 
	~"io.h
"

13 
	~"powî.h
"

14 
	~"globÆ.h
"

16 
	#DEBUG_BLINK_DELAY
 250

17 

	)

18 #ifde‡
ATTINY88_DIP


20 
	#SERIAL_DEBUG_INDEX
 6

	)

21 
	#SERIAL_DEBUG_PORT
 
PORTD


	)

22 
io_pö_t
 
	gSERIAL_DEBUG
 = 
IO_PD
(
SERIAL_DEBUG_INDEX
);

38 
	#SERIAL_DEBUG_INDEX
 4

	)

39 
	#SERIAL_DEBUG_PORT
 
PORTB


	)

40 
io_pö_t
 
	gSERIAL_DEBUG
 = 
IO_PB
(
SERIAL_DEBUG_INDEX
);

50 #ifde‡
DEBUG


52 #ifde‡
ATTINY88_DIP


53 
io_pö_t
 
	gDEBUG_1
 = 
IO_PB
(6);

54 
io_pö_t
 
	gDEBUG_2
 = 
IO_PB
(7);

57 
	$debug_öô
()

59 
	`io_ouçut_pö
(
DEBUG_1
);

60 
	`io_ouçut_pö
(
DEBUG_2
);

62 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

63 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

64 #ifde‡
ENABLE_SERIAL


65 
	`io_£t_pö
(
SERIAL_DEBUG
);

66 
	`io_ouçut_pö
(
SERIAL_DEBUG
);

68 
	}
}

72 
	$debug_öô
()

74 #ifde‡
ENABLE_SERIAL


75 
	`io_£t_pö
(
SERIAL_DEBUG
);

76 
	`io_ouçut_pö
(
SERIAL_DEBUG
);

78 
	}
}

82 #i‡
deföed
(
DEBUG
Ë&& !deföed(
DEBUG_VOID
)

84 
	$debug_£t
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
)

86 
	`io_íabÀ_pö
(
pö
, !
íabÀ
);

87 
	}
}

89 
	$debug_blök
(
uöt8_t
 
cou¡
)

91 
	`io_íabÀ_pö
(
DEBUG_1
, 
Ál£
);

92 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

93 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

95 ; 
cou¡
 > 0; count--) {

96 
	`io_íabÀ_pö
(
DEBUG_2
, 
Ál£
);

97 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

98 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

99 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

102 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

103 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

104 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

105 
	}
}

107 
	$debug_blök_ªv
(
uöt8_t
 
cou¡
)

109 
	`io_íabÀ_pö
(
DEBUG_2
, 
Ál£
);

110 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

111 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

113 ; 
cou¡
 > 0; count--) {

114 
	`io_íabÀ_pö
(
DEBUG_1
, 
Ál£
);

115 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

116 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

117 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

120 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

121 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

122 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

123 
	}
}

125 
	$debug_blök2
(
uöt8_t
 
cou¡
)

127 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

128 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

129 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

131 
boﬁ
 
b
 = 
Ál£
;

132 ; 
cou¡
 > 0; count--) {

133 
	`io_íabÀ_pö
(
DEBUG_1
, 
b
);

134 
	`io_íabÀ_pö
(
DEBUG_2
, 
b
);

135 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

136 
b
 = !b;

139 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

140 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

141 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

142 
	}
}

144 
	$debug_waô
()

146 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

147 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

149 
boﬁ
 
b
 = 
Ál£
;

150 
åue
)

152 
	`io_íabÀ_pö
(
DEBUG_1
, 
b
);

153 
	`io_íabÀ_pö
(
DEBUG_2
, !
b
);

155 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

157 
b
 = !b;

160 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

161 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

162 
	}
}

166 #i‚de‡
DEBUG_VOID


168 
	$debug_blök_ªv
(
uöt8_t
 
cou¡
)

170 
	`ch¨ge_£t_Àd
(
åue
);

171 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 4);

173 ; 
cou¡
 > 0; count--) {

174 
	`ch¨ge_£t_Àd
(
Ál£
);

175 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

176 
	`ch¨ge_£t_Àd
(
åue
);

177 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

180 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

181 
	`ch¨ge_£t_Àd
(
Ál£
);

182 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 4);

183 
	}
}

188 #ifde‡
ENABLE_SERIAL


190 
	$_£rül_tx
(
uöt8_t
* 
buf„r
)

198 c⁄° 
uöt16_t
 
dñay
 = 650+20;

199 
uöt16_t
 
cou¡down
;

201 
uöt8_t
 
j
 = 0; j < 10; ++j)

203 i‡(
buf„r
[
j
])

204 
SERIAL_DEBUG_PORT
 |
	`_BV
(
SERIAL_DEBUG_INDEX
);

206 
SERIAL_DEBUG_PORT
 &~
	`_BV
(
SERIAL_DEBUG_INDEX
);

208 
cou¡down
 = 
dñay
;

209 --
cou¡down
)

210 
	`__asm
("nop");

212 
	}
}

214 
	$_£rül_tx_ch¨
(
c
)

216 
uöt8_t
 
buf„r
[10];

217 
uöt8_t
 
i
 = 0;

219 
buf„r
[
i
++] = 0;

220 
idx
 = 0; idx < 8; ++idx)

221 
buf„r
[
i
++] = (((
uöt8_t
)(
c
Ë& ((uöt8_t)1<<((
idx
)))) ? 0x01 : 0x00);

222 
buf„r
[
i
++] = 1;

224 
	`_£rül_tx
(
buf„r
);

225 
	}
}

227 
	$debug_log_ex_P
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
)

229 
c
 = 
	`pgm_ªad_byã
(
mesßge
);

230 i‡(
c
 == '\0')

233 
	`pmc_mask_úqs
(
åue
);

237 
	`_£rül_tx_ch¨
(
c
);

238 
c
 = 
	`pgm_ªad_byã
(++
mesßge
);

239 } 
c
 != '\0');

241 i‡(
√w_löe
)

242 
	`_£rül_tx_ch¨
('\n');

244 
	`io_£t_pö
(
SERIAL_DEBUG
);

246 
	`pmc_mask_úqs
(
Ál£
);

247 
	}
}

249 
	$_debug_log_ex
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
)

251 i‡(
mesßge
[0] == '\0')

254 
	`pmc_mask_úqs
(
åue
);

258 
	`_£rül_tx_ch¨
(*
mesßge
);

259 } *(++
mesßge
) != '\0');

261 i‡(
√w_löe
)

262 
	`_£rül_tx_ch¨
('\n');

264 
	`io_£t_pö
(
SERIAL_DEBUG
);

266 
	`pmc_mask_úqs
(
Ál£
);

267 
	}
}

269 
	$debug_log_byã_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
)

271 
ch
[4];

272 
ch
[0] = '0' + (
n
 / 100);

273 
ch
[1] = '0' + ((
n
 % 100) / 10);

274 
ch
[2] = '0' + (
n
 % 10);

275 
ch
[3] = '\0';

276 
	`_debug_log_ex
(
ch
, 
√w_löe
);

277 
	}
}

279 
	$debug_log_hex_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
)

281 
ch
[4];

282 
ch
[0] = 'x';

283 
uöt8_t
 
_n
 = 
n
 >> 4;

284 i‡(
_n
 < 10)

285 
ch
[1] = '0' + 
_n
;

287 
ch
[1] = 'A' + (
_n
 - 10);

288 
n
 &= 0x0F;

289 i‡(
n
 < 10)

290 
ch
[2] = '0' + 
n
;

292 
ch
[2] = 'A' + (
n
 - 10);

293 
ch
[3] = '\0';

294 
	`_debug_log_ex
(
ch
, 
√w_löe
);

295 
	}
}

	@firmware/e300/rev_b/debug.h

5 #i‚de‡
DEBUG_H_


6 
	#DEBUG_H_


	)

8 
	~<°döt.h
>

9 
	~<°dboﬁ.h
>

10 
	~<avr/pgm•a˚.h
>

12 
	~"io.h
"

14 #ifde‡
DEBUG


15 
	#DEBUG_INLINE


	)

16 
	#DEBUG_NOOP
 ;

	)

17 
	#LED_ON
 
Ál£


	)

18 
	#LED_OFF
 
åue


	)

20 
	#DEBUG_INLINE
 
ölöe


	)

21 
	#DEBUG_NOOP
 {}

	)

22 
	#LED_ON
 
åue


	)

23 
	#LED_OFF
 
Ál£


	)

27 
	#DEBUG_SAFETY


	)

29 #ifde‡
DEBUG_VOID


32 
	#debug_£t
 ()

	)

33 
	#debug_blök
 ()

	)

34 
	#debug_blök_ªv
 ()

	)

35 
	#debug_blök2
 ()

	)

36 
	#debug_waô
 ()

	)

41 
DEBUG_INLINE
 
	$debug_£t
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
Ë
DEBUG_NOOP


42 
DEBUG_INLINE
 
	$debug_blök
(
uöt8_t
 
cou¡
Ë
DEBUG_NOOP


44 
	`debug_blök_ªv
(
uöt8_t
 
cou¡
);

45 
DEBUG_INLINE
 
	$debug_blök2
(
uöt8_t
 
cou¡
Ë
DEBUG_NOOP


46 
DEBUG_INLINE
 
	$debug_waô
(Ë
DEBUG_NOOP


50 #i‡
	`deföed
(
DEBUG
Ë&& !deföed(
ENABLE_SERIAL
)

51 
	#ENABLE_SERIAL


	)

54  
	`debug_öô
() ;

56 #ifde‡
ENABLE_SERIAL


58 
	`debug_log_ex_P
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
);

59 
	`debug_log_hex_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
);

60 
	`debug_log_byã_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
);

61 
	`_debug_log_ex
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
);

64 
ölöe
 
	`debug_log_P
(c⁄° * 
mesßge
);

65 
ölöe
 
	`debug_log_hex
(
uöt8_t
 
n
);

66 
ölöe
 
	`debug_log_byã
(
uöt8_t
 
n
);

67 
ölöe
 
	`_debug_log
(c⁄° * 
mesßge
);

69 
ölöe
 
	$debug_log_P
(c⁄° * 
mesßge
Ë{ 
	`debug_log_ex_P
(mesßge, 
åue
); 
	}
}

70 
ölöe
 
	$debug_log_hex
(
uöt8_t
 
n
Ë{ 
	`debug_log_hex_ex
“, 
åue
); 
	}
}

71 
ölöe
 
	$debug_log_byã
(
uöt8_t
 
n
Ë{ 
	`debug_log_byã_ex
“, 
åue
); 
	}
}

72 
ölöe
 
	$_debug_log
(c⁄° * 
mesßge
Ë{ 
	`_debug_log_ex
(mesßge, 
åue
); 
	}
}

76 
ölöe
 
	$debug_log_ex_P
 (c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
Ë{
	}
};

77 
ölöe
 
	$debug_log_hex_ex
 (
uöt8_t
 
n
, 
boﬁ
 
√w_löe
Ë{
	}
};

78 
ölöe
 
	$debug_log_byã_ex
 (
uöt8_t
 
n
, 
boﬁ
 
√w_löe
Ë{
	}
};

79 
ölöe
 
	$_debug_log_ex
 (c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
Ë{
	}
};

81 
	#debug_log_P
 ()

	)

82 
	#debug_log_hex
 ()

	)

83 
	#debug_log_byã
 ()

	)

84 
	#_debug_log
 ()

	)

87 
	#debug_log
(
x
Ë
	`debug_log_P
(
	`PSTR
(x))

	)

88 
	#debug_log_ex
(
x
,
∆
Ë
	`debug_log_ex_P
(
	`PSTR
(x),Çl)

	)

	@firmware/e300/rev_b/error.h

8 #i‚de‡
ERROR_H_


9 
	#ERROR_H_


	)

11 
	eEº‹BlökCou¡


13 
	mBlökEº‹_N⁄e
,

15 
	mBlökEº‹_LowVﬁège
,

16 
	mBlökEº‹_LTC3675_UndîVﬁège
 = 
BlökEº‹_LowVﬁège
,

17 
	mBlökEº‹_LTC4155_UndîVﬁège
 = 
BlökEº‹_LowVﬁège
,

19 
	mBlökEº‹_FPGA_Powî
,

20 
	mBlökEº‹_DRAM_Powî
,

21 
	mBlökEº‹_1_8V_PîùhîÆs_Powî
,

22 
	mBlökEº‹_3_3V_PîùhîÆs_Powî
,

23 
	mBlökEº‹_TX_Powî
,

25 
	mBlökEº‹_LTC3675_OvîTem≥øtuª
,

27 
	mBlökEº‹_LTC4155_BadCñl


	@firmware/e300/rev_b/global.h

7 #i‚de‡
GLOBAL_H_


8 
	#GLOBAL_H_


	)

10 
	~<°dboﬁ.h
>

11 
	~<°döt.h
>

12 
	~<avr/pgm•a˚.h
>

14 
	sSèã


16 
boﬁ
 
	möãºu±s_íabÀd
;

17 
uöt8_t
 
	möãºu±_dïth
;

19 
uöt8_t
 
	ma˘ive_timîs
;

20 
boﬁ
 
	mpowîed
;

21 
boﬁ
 
	mb©ãry_nŸ_¥e£¡
;

22 
boﬁ
 
	mb©ãry_ch¨gög
;

23 
boﬁ
 
	mwake_up
;

24 
boﬁ
 
	mpowî_off
;

25 
boﬁ
 
	mc‹e_powî_bad
;

26 
boﬁ
 
	m…c3675_úq
;

27 #ifde‡
CHARGER_TI


28 
boﬁ
 
	mbq24190_úq
;

30 
boﬁ
 
	m…c4155_úq
;

33 
uöt8_t
 
	mblök_îr‹
;

34 
uöt8_t
 
	mblökî_°©e
;

35 
uöt8_t
 
	mblök_lo›s
;

36 
uöt8_t
 
	mblök_œ°_lo›
;

37 
boﬁ
 
	mblök_°›
;

38 } 
	tSTATE
;

41 vﬁ©ûê
STATE
 
_°©e
;

43 
pmc_£t_blök_îr‹
(
uöt8_t
 
cou¡
);

44 
uöt8_t
 
pmc_gë_blök_îr‹
();

46 
boﬁ
 
pmc_mask_úqs
(boﬁ 
mask
);

	@firmware/e300/rev_b/i2c.c

1 
	~"c⁄fig.h
"

2 
	~"i2c.h
"

4 
	~<utû/dñay.h
>

6 
	~"io.h
"

7 
	~"debug.h
"

15 vﬁ©ûê
boﬁ
 
	g_i2c_dißbÀ_ack_check
 = 
Ál£
;

19 
	#I2C_DEFAULT_RETRY_DELAY
 1

20 
	#I2C_DEFAULT_MAX_ACK_RETRIES
 10

21 

	)

22 
	#I2C_DEFAULT_BUS_WAIT
 10

23 
	#I2C_DEFAULT_MAX_BUS_RETRIES
 10

	)

25 
	#I2C_DEFAULT_SCL_LOW_PERIOD
 2

26 
	#I2C_DEFAULT_SCL_HIGH_PERIOD
 1

27 
	#I2C_DEFAULT_BUS_FREE_TIME
 2

28 
	#I2C_DEFAULT_STOP_TIME
 1

29 

	)

30 
	#I2C_DELAY
 
_dñay_us


31 

	)

32 
boﬁ
 
	$_i2c_°¨t_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

36 
uöt8_t
 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

37 (
	`io_ã°_pö
(
sda
Ë=
Ál£
Ë|| (io_ã°_pö(
s˛
) == false))

39 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

40 i‡(
ªåõs
-- == 0)

42 
	`debug_log
("I2C:S1");

43  
Ál£
;

49 
	`io_˛ór_pö
(
sda
);

50 
	`io_ouçut_pö
(
sda
);

53 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

55 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

56 
	`io_ã°_pö
(
s˛
Ë=
Ál£
)

58 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

59 i‡(
ªåõs
-- == 0)

61 
	`io_öput_pö
(
sda
);

62 
	`debug_log_ex
("I2C:S2", 
Ál£
);

63 
	`debug_log_hex
(
s˛
);

64  
Ál£
;

69 
	`io_˛ór_pö
(
s˛
);

70 
	`io_ouçut_pö
(
s˛
);

73 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
 / 2);

75  
åue
;

76 
	}
}

78 
boﬁ
 
	$_i2c_°›_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

88 
boﬁ
 
ªsu…
 = 
åue
;

92 
uöt8_t
 
ªåõs
 = 0;

93 
	`io_ã°_pö
(
sda
Ë=
Ál£
)

95 i‡(
ªåõs
 =
I2C_DEFAULT_MAX_ACK_RETRIES
)

97 
	`debug_log_ex
("I2C:STP ", 
Ál£
);

98 
	`debug_log_hex
(
sda
);

99 
	`debug_blök_ªv
(4);

102 
ªsu…
 = 
Ál£
;

106 ++
ªåõs
;

107 
	`I2C_DELAY
(
I2C_DEFAULT_RETRY_DELAY
);

112 
	`io_˛ór_pö
(
sda
);

115 
	`io_ouçut_pö
(
sda
);

123 
	`io_öput_pö
(
s˛
);

124 i‡(
puŒ_up
)

125 
	`io_£t_pö
(
s˛
);

126 
	`I2C_DELAY
(
I2C_DEFAULT_STOP_TIME
);

132 
	`io_öput_pö
(
sda
);

134 
	`io_£t_pö
(
sda
);

135 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_FREE_TIME
);

137  
ªsu…
;

138 
	}
}

182 
	$_i2c_ab‹t_ß„
(
io_pö_t
 
pö
, 
boﬁ
 
puŒ_up
)

184 i‡(
puŒ_up
 =
Ál£
)

185 
	`io_˛ór_pö
(
pö
);

187 
	`io_öput_pö
(
pö
);

189 i‡(
puŒ_up
)

190 
	`io_£t_pö
(
pö
);

191 
	}
}

193 
	$_i2c_ab‹t_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

210 
	`_i2c_ab‹t_ß„
(
s˛
, 
puŒ_up
);

211 
	`_i2c_ab‹t_ß„
(
sda
, 
puŒ_up
);

215 
	}
}

222 
boﬁ
 
	$_i2c_wrôe_byã_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
vÆue
, 
boﬁ
 
puŒ_up
)

228 
uöt8_t
 
i
 = 0; i < 8; ++i)

230 
boﬁ
 
b
 = ((
vÆue
 & (0x01 << (7 - 
i
))) != 0x00);

232 i‡(
b
)

234 i‡(
puŒ_up
)

237 
	`io_öput_pö
(
sda
);

238 
	`io_£t_pö
(
sda
);

241 
	`io_öput_pö
(
sda
);

243 i‡(
	`io_ã°_pö
(
sda
Ë=
Ál£
)

245 
	`debug_log
("I2C:WR ");

246 
	`debug_log_hex
(
sda
);

247 
	`debug_blök_ªv
(1);

248  
Ál£
;

253 i‡(
puŒ_up
)

256 
	`io_˛ór_pö
(
sda
);

259 
	`io_ouçut_pö
(
sda
);

265 
	`io_íabÀ_pö
(
sda
, 
Ál£
);

266 
	`io_ouçut_pö
(
sda
);

272 
	`io_öput_pö
(
s˛
);

273 i‡(
puŒ_up
)

274 
	`io_£t_pö
(
s˛
);

275 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

276 #ifde‡
I2C_ALLOW_CLOCK_STRETCH


277 
uöt8_t
 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

278 
	`io_ã°_pö
(
s˛
Ë=
Ál£
)

280 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

281 i‡(--
ªåõs
 == 0)

283 
	`io_öput_pö
(
sda
);

284 i‡(
puŒ_up
)

285 
	`io_£t_pö
(
sda
);

287 
	`debug_log_ex
("I2C:STRTCH ", 
Ál£
);

288 
	`debug_log_hex
(
s˛
);

289 
	`debug_blök_ªv
(2);

290  
Ál£
;

294 i‡(
puŒ_up
)

295 
	`io_˛ór_pö
(
s˛
);

296 
	`io_ouçut_pö
(
s˛
);

297 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

300 
	`io_öput_pö
(
sda
);

301 i‡(
puŒ_up
)

302 
	`io_£t_pö
(
sda
);

303 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

305 
uöt8_t
 
ªåõs
 = 0;

306 (
_i2c_dißbÀ_ack_check
 =
Ál£
Ë&& (
	`io_ã°_pö
(
sda
)))

308 i‡(
ªåõs
 =
I2C_DEFAULT_MAX_ACK_RETRIES
)

310 
	`debug_log_ex
("I2C:ACK ", 
Ál£
);

311 
	`debug_log_hex_ex
(
sda
, 
Ál£
);

312 
	`debug_log_hex
(
vÆue
);

313 
	`debug_blök_ªv
(3);

314  
Ál£
;

317 ++
ªåõs
;

318 
	`I2C_DELAY
(
I2C_DEFAULT_RETRY_DELAY
);

324 
	`io_öput_pö
(
s˛
);

325 i‡(
puŒ_up
)

326 
	`io_£t_pö
(
s˛
);

327 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

329 i‡(
puŒ_up
)

330 
	`io_˛ór_pö
(
s˛
);

331 
	`io_ouçut_pö
(
s˛
);

334 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

336  
åue
;

337 
	}
}

339 
boﬁ
 
	$_i2c_ªad_byã_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
* 
vÆue
, 
boﬁ
 
puŒ_up
)

345 
	`io_öput_pö
(
sda
);

346 i‡(
puŒ_up
)

347 
	`io_£t_pö
(
sda
);

349 (*
vÆue
) = 0x00;

351 
uöt8_t
 
i
 = 0; i < 8; ++i)

355 
	`io_öput_pö
(
s˛
);

356 i‡(
puŒ_up
)

357 
	`io_£t_pö
(
s˛
);

358 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

359 #ifde‡
I2C_ALLOW_CLOCK_STRETCH


360 
uöt8_t
 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

361 
	`io_ã°_pö
(
s˛
Ë=
Ál£
)

363 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

364 i‡(--
ªåõs
 == 0)

366 
	`debug_log_ex
("I2C:R ");

367 
	`debug_log_hex
(
s˛
);

368 
	`debug_blök_ªv
(5);

369  
Ál£
;

373 (*
vÆue
Ë|((
	`io_ã°_pö
(
sda
Ë? 0x1 : 0x0Ë<< (7 - 
i
));

375 i‡(
puŒ_up
)

376 
	`io_˛ór_pö
(
s˛
);

377 
	`io_ouçut_pö
(
s˛
);

380 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

385  
åue
;

386 
	}
}

388 
boﬁ
 
	$i2c_ªad2_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, 
boﬁ
 
puŒ_up
)

390 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

391  
Ál£
;

393 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
 & ~0x01, 
puŒ_up
Ë=
Ál£
)

395 #ifde‡
I2C_EXTRA_DEBUGGING


397 
	`debug_log
("R21");

400 
i2c_ªad2_Áû
;

403 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
subaddr
, 
puŒ_up
Ë=
Ál£
)

405 #ifde‡
I2C_EXTRA_DEBUGGING


407 
	`debug_log
("R22");

410 
i2c_ªad2_Áû
;

413 
	`io_öput_pö
(
s˛
);

414 i‡(
puŒ_up
)

415 
	`io_£t_pö
(
s˛
);

416 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

418 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

420  
Ál£
;

423 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
 | 0x01, 
puŒ_up
Ë=
Ál£
)

425 #ifde‡
I2C_EXTRA_DEBUGGING


427 
	`debug_log
("R23");

430 
i2c_ªad2_Áû
;

433 i‡(
	`_i2c_ªad_byã_ex
(
sda
, 
s˛
, 
vÆue
, 
puŒ_up
Ë=
Ál£
)

435 #ifde‡
I2C_EXTRA_DEBUGGING


437 
	`debug_log
("R24");

440 
i2c_ªad2_Áû
;

443 i‡(
	`_i2c_°›_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

445 #ifde‡
I2C_EXTRA_DEBUGGING


446 
	`debug_log
("R25");

450  
åue
;

451 
i2c_ªad2_Áû
:

452 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

453  
Ál£
;

454 
	}
}

456 
boﬁ
 
	$i2c_wrôe_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
, 
boﬁ
 
puŒ_up
)

458 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

459  
Ál£
;

461 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
, 
puŒ_up
Ë=
Ál£
)

462 
i2c_wrôe_Áû
;

464 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
subaddr
, 
puŒ_up
Ë=
Ál£
)

465 
i2c_wrôe_Áû
;

467 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
vÆue
, 
puŒ_up
Ë=
Ál£
)

468 
i2c_wrôe_Áû
;

470 
	`_i2c_°›_ex
(
sda
, 
s˛
, 
puŒ_up
);

472  
åue
;

473 
i2c_wrôe_Áû
:

474 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

475  
Ál£
;

476 
	}
}

478 
boﬁ
 
	$i2c_wrôe
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
)

480  
	`i2c_wrôe_ex
(
sda
, 
s˛
, 
addr
, 
subaddr
, 
vÆue
, 
Ál£
);

481 
	}
}

483 
boﬁ
 
	$i2c_ªad_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, 
boﬁ
 
puŒ_up
)

485 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

486  
Ál£
;

488 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
, 
puŒ_up
Ë=
Ál£
)

489 
i2c_ªad_Áû
;

491 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
subaddr
, 
puŒ_up
Ë=
Ál£
)

492 
i2c_ªad_Áû
;

494 i‡(
	`_i2c_ªad_byã_ex
(
sda
, 
s˛
, 
vÆue
, 
puŒ_up
Ë=
Ál£
)

495 
i2c_ªad_Áû
;

497 
	`_i2c_°›_ex
(
sda
, 
s˛
, 
puŒ_up
);

499  
åue
;

500 
i2c_ªad_Áû
:

501 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

502  
Ál£
;

503 
	}
}

505 
boﬁ
 
	$i2c_ªad
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
)

507  
	`i2c_ªad_ex
(
sda
, 
s˛
, 
addr
, 
subaddr
, 
vÆue
, 
Ál£
);

508 
	}
}

510 
	$i2c_öô_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

512 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

513 
	}
}

515 
	$i2c_öô
(
io_pö_t
 
sda
, io_pö_à
s˛
)

517 
	`i2c_öô_ex
(
sda
, 
s˛
, 
Ál£
);

518 
	}
}

	@firmware/e300/rev_b/i2c.h

1 #i‚de‡
I2C_H


2 
	#I2C_H


	)

4 
	~"io.h
"

6 
i2c_öô
(
io_pö_t
 
sda
, io_pö_à
s˛
);

7 
boﬁ
 
i2c_ªad
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
);

8 
boﬁ
 
i2c_wrôe
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
);

10 
i2c_öô_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
);

11 
boﬁ
 
i2c_ªad_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, boﬁ 
puŒ_up
);

12 
boﬁ
 
i2c_ªad2_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, boﬁ 
puŒ_up
);

13 
boﬁ
 
i2c_wrôe_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
, boﬁ 
puŒ_up
);

15 vﬁ©ûê
boﬁ
 
_i2c_dißbÀ_ack_check
;

	@firmware/e300/rev_b/io.c

5 
	~"io.h
"

6 
	~<avr/io.h
>

8 
	#_GET_PIN
(
pö
Ë(’öË& 0xf)

	)

9 
	#_GET_MASK
(
pö
Ë(
	`_BV
(
	`_GET_PIN
’ö)))

	)

10 
	#_GET_REG
(
pö
, 
ªg_x
Ë(*ªg_x[pö >> 4])

	)

12 #i‚de‡
IO_DEBUG


13 vﬁ©ûê
uöt8_t
 *
	gddr_x
[] = {&
DDRA
, &
DDRB
, &
DDRC
, &
DDRD
};

14 vﬁ©ûê
uöt8_t
 *
	gp‹t_x
[] = {&
PORTA
, &
PORTB
, &
PORTC
, &
PORTD
};

15 vﬁ©ûê
uöt8_t
 *
	gpö_x
[] = {&
PINA
, &
PINB
, &
PINC
, &
PIND
};

18 
	$io_ouçut_pö
(
io_pö_t
 
pö
){

19 #i‚de‡
IO_DEBUG


20 
	`_GET_REG
(
pö
, 
ddr_x
Ë|
	`_GET_MASK
(pin);

22 
	}
}

24 
	$io_öput_pö
(
io_pö_t
 
pö
){

25 #i‚de‡
IO_DEBUG


26 
	`_GET_REG
(
pö
, 
ddr_x
Ë&~
	`_GET_MASK
(pin);

28 
	}
}

30 
boﬁ
 
	$io_is_ouçut
(
io_pö_t
 
pö
){

31 #i‚de‡
IO_DEBUG


32  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
ddr_x
), 
	`_GET_PIN
(pin));

36 
	}
}

38 
boﬁ
 
	$io_is_öput
(
io_pö_t
 
pö
){

39  !
	`io_is_ouçut
(
pö
);

40 
	}
}

42 
	$io_£t_pö
(
io_pö_t
 
pö
){

43 #i‚de‡
IO_DEBUG


44 
	`_GET_REG
(
pö
, 
p‹t_x
Ë|
	`_GET_MASK
(pin);

46 
	}
}

48 
	$io_˛ór_pö
(
io_pö_t
 
pö
){

49 #i‚de‡
IO_DEBUG


50 
	`_GET_REG
(
pö
, 
p‹t_x
Ë&~
	`_GET_MASK
(pin);

52 
	}
}

54 
boﬁ
 
	$io_is_pö_£t
(
io_pö_t
 
pö
){

55 #i‚de‡
IO_DEBUG


56  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
p‹t_x
), 
	`_GET_PIN
(pin));

60 
	}
}

62 
	$io_íabÀ_pö
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
){

63 i‡(
íabÀ
)

64 
	`io_£t_pö
(
pö
);

66 
	`io_˛ór_pö
(
pö
);

67 
	}
}

69 
boﬁ
 
	$io_ã°_pö
(
io_pö_t
 
pö
){

70 #i‚de‡
IO_DEBUG


71  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
pö_x
), 
	`_GET_PIN
(pin));

75 
	}
}

	@firmware/e300/rev_b/io.h

5 #i‚de‡
IO_H


6 
	#IO_H


	)

8 
	~<°döt.h
>

9 
	~<°dboﬁ.h
>

11 
	#IO_PX
(
p‹t
, 
pö
Ë((
uöt8_t
)((’‹à- 'A'Ë<< 4Ë+Öö))

	)

12 
	#IO_PA
(
pö
Ë
	`IO_PX
('A',Öö)

	)

13 
	#IO_PB
(
pö
Ë
	`IO_PX
('B',Öö)

	)

14 
	#IO_PC
(
pö
Ë
	`IO_PX
('C',Öö)

	)

15 
	#IO_PD
(
pö
Ë
	`IO_PX
('D',Öö)

	)

17 c⁄° 
	tuöt8_t
 
	tio_pö_t
;

19 
io_ouçut_pö
(
io_pö_t
 
pö
);

20 
io_öput_pö
(
io_pö_t
 
pö
);

21 
boﬁ
 
io_is_ouçut
(
io_pö_t
 
pö
);

22 
boﬁ
 
io_is_öput
(
io_pö_t
 
pö
);

24 
io_£t_pö
(
io_pö_t
 
pö
);

25 
io_˛ór_pö
(
io_pö_t
 
pö
);

26 
io_íabÀ_pö
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
);

27 
boﬁ
 
io_is_pö_£t
(
io_pö_t
 
pö
);

29 
boﬁ
 
io_ã°_pö
(
io_pö_t
 
pö
);

	@firmware/e300/rev_b/ltc3675.c

10 
	~"c⁄fig.h
"

11 
	~"…c3675.h
"

14 
	~<utû/dñay.h
>

15 
	~<avr/öãºu±.h
>

17 
	~"io.h
"

18 
	~"i2c.h
"

19 
	~"debug.h
"

20 
	~"globÆ.h
"

21 
	~"îr‹.h
"

23 #i‚de‡
I2C_REWORK


24 
	~"powî.h
"

27 c⁄° 
boﬁ
 
	g_…c3675_puŒ_up
 =

28 #ifde‡
I2C_REWORK


29 
åue


31 
Ál£


35 vﬁ©ûê
…c3675_ªg_hñ≥r_‚
 
	g_…c3675_ªg_hñ≥r
;

39 #ifde‡
ATTINY88_DIP


41 #ifde‡
HARDWIRE_ENABLE


42 
io_pö_t
 
	gPWR_EN1
 = 
IO_PC
(7);

43 
io_pö_t
 
	gPWR_EN2
 = 
IO_PA
(0);

44 
io_pö_t
 
	gPWR_EN3
 = 
IO_PA
(1);

45 
io_pö_t
 
	gPWR_EN4
 = 
IO_PB
(6);

46 
io_pö_t
 
	gPWR_EN5
 = 
IO_PB
(7);

54 #ifde‡
HARDWIRE_ENABLE


55 
io_pö_t
 
	gPWR_EN1
 = 
IO_PC
(1);

58 
io_pö_t
 
	gPWR_EN4
 = 
IO_PA
(1);

59 
io_pö_t
 
	gPWR_EN5
 = 
IO_PA
(2);

62 #ifde‡
I2C_REWORK


63 
io_pö_t
 
	gPWR_SDA
 = 
IO_PC
(2);

64 
io_pö_t
 
	gPWR_SCL
 = 
IO_PA
(2);

69 
io_pö_t
 
	gPWR_IRQ
 = 
IO_PD
(0);

70 
io_pö_t
 
	gWAKEUP
 = 
IO_PD
(2);

71 
io_pö_t
 
	gONSWITCH_DB
 = 
IO_PD
(3);

72 
io_pö_t
 
	gPWR_RESET
 = 
IO_PD
(4);

74 
	#LTC3675_BASE_ADDRESS
 0x12

	)

75 
	#LTC3675_WRITE_ADDRESS
 (
LTC3675_BASE_ADDRESS
 + 0)

	)

76 
	#LTC3675_READ_ADDRESS
 (
LTC3675_BASE_ADDRESS
 + 1)

	)

78 
	#LTC3675_RETRY_DELAY
 1

79 
	#LTC3675_MAX_ACK_RETRIES
 10

80 

	)

81 
	#LTC3675_SCL_LOW_PERIOD
 2

82 
	#LTC3675_SCL_HIGH_PERIOD
 1

83 
	#LTC3675_BUS_FREE_TIME
 2

84 
	#LTC3675_STOP_TIME
 1

85 

	)

86 
	#LTC3675_REGULATOR_ENABLE_DELAY
 10

87 

	)

88 
	eLTC3675Regi°îs


90 
	mLTC3675_REG_NONE
 = 0x00,

91 
	mLTC3675_REG_BUCK1
 = 0x01,

92 
	mLTC3675_REG_BUCK2
 = 0x02,

93 
	mLTC3675_REG_BUCK3
 = 0x03,

94 
	mLTC3675_REG_BUCK4
 = 0x04,

95 
	mLTC3675_REG_BOOST
 = 0x05,

96 
	mLTC3675_REG_BUCK_BOOST
 = 0x06,

97 
	mLTC3675_REG_LED_CONFIG
 = 0x07,

98 
	mLTC3675_REG_LED_DAC
 = 0x08,

99 
	mLTC3675_REG_UVOT
 = 0x09,

100 
	mLTC3675_REG_RSTB
 = 0xA0,

101 
	mLTC3675_REG_IRQB_MASK
 = 0x0B,

102 
	mLTC3675_REG_REALTIME_STATUS
 = 0x0C,

103 
	mLTC3675_REG_LATCHED_STATUS
 = 0x0D,

104 
	mLTC3675_REG_CLEAR_IRQ
 = 0x0F

107 
	eLTC3675SètusBôs


109 
	mLTC3675_UndîVﬁège
 = 1 << 7,

110 
	mLTC3675_OvîTem≥øtuª
 = 1 << 6,

111 
	mLTC3675_BuckBoo°_PGood
 = 1 << 5,

112 
	mLTC3675_Boo°_PGood
 = 1 << 4,

113 
	mLTC3675_Buck4_PGood
 = 1 << 3,

114 
	mLTC3675_Buck3_PGood
 = 1 << 2,

115 
	mLTC3675_Buck2_PGood
 = 1 << 1,

116 
	mLTC3675_Buck1_PGood
 = 1 << 0

119 
	#LTC3675_DEFAULT_BUCK_REG_VAL
 0x6F

	)

120 
	#LTC3675_DEFAULT_BOOST_REG_VAL
 0x0F

	)

121 
	#LTC3675_DEFAULT_BUCK_BOOST_REG_VAL
 0x0F

	)

123 
	#LTC3675_ENABLE_REGISTER_BIT
 0x80

	)

127 
	$_…c3675_˛ór_úq
()

130 
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_CLEAR_IRQ
, 0x00, 
_…c3675_puŒ_up
);

131 
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_NONE
, 0x00, 
_…c3675_puŒ_up
);

132 
	}
}

134 vﬁ©ûê
uöt8_t
 
	g_…c3675_œ°_°©us
 = 0x00;

136 
uöt8_t
 
	$…c3675_gë_œ°_°©us
()

138  
_…c3675_œ°_°©us
;

139 
	}
}

141 
uöt8_t
 
	$…c3675_ªg_°©us_to_îr‹
(
uöt8_t
 
vÆ
)

143 i‡(((
vÆ
 & 
LTC3675_BuckBoo°_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_6
)))

144  
BlökEº‹_3_3V_PîùhîÆs_Powî
;

146 i‡(((
vÆ
 & 
LTC3675_Boo°_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_5
)))

147  
BlökEº‹_TX_Powî
;

151 i‡(((
vÆ
 & 
LTC3675_Buck3_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_3
)))

152  
BlökEº‹_1_8V_PîùhîÆs_Powî
;

156 i‡(((
vÆ
 & 
LTC3675_Buck1_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_1
)))

157  
BlökEº‹_DRAM_Powî
;

159  
BlökEº‹_N⁄e
;

160 
	}
}

162 
boﬁ
 
	$…c3675_is_powî_good
(
uöt8_t
 
vÆ
)

164  (
	`…c3675_ªg_°©us_to_îr‹
(
vÆ
Ë=
BlökEº‹_N⁄e
);

165 
	}
}

167 
uöt8_t
 
	$…c3675_°©us_to_îr‹
(
uöt8_t
 
vÆ
)

169 i‡(
vÆ
 & 
LTC3675_UndîVﬁège
)

170  
BlökEº‹_LTC3675_UndîVﬁège
;

172 i‡(
vÆ
 & 
LTC3675_OvîTem≥øtuª
)

173  
BlökEº‹_LTC3675_OvîTem≥øtuª
;

175 
uöt8_t
 
ªg_îr‹
 = 
	`…c3675_ªg_°©us_to_îr‹
(
vÆ
);

176 i‡(
ªg_îr‹
 !
BlökEº‹_N⁄e
)

177  
ªg_îr‹
;

179  
BlökEº‹_N⁄e
;

180 
	}
}

182 
boﬁ
 
	$_…c3675_h™dÀ_úq
()

184 
uöt8_t
 
vÆ
 = 0x00;

185 
boﬁ
 
ªsu…
 = 
Ál£
;

187 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
LTC3675_REG_LATCHED_STATUS
, &
vÆ
, 
_…c3675_puŒ_up
))

189 
	`debug_log_ex
("3675LTCH ", 
Ál£
);

190 
	`debug_log_hex
(
vÆ
);

193 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
LTC3675_REG_REALTIME_STATUS
, &
vÆ
, 
_…c3675_puŒ_up
))

196 
	`debug_log_ex
("3675RT ", 
Ál£
);

197 
	`debug_log_hex
(
vÆ
);

199 
_…c3675_œ°_°©us
 = 
vÆ
;

201 
uöt8_t
 
îr‹
 = 
	`…c3675_°©us_to_îr‹
(
vÆ
);

209 i‡(
îr‹
)

211 
	`pmc_£t_blök_îr‹
(
îr‹
);

223 
ªsu…
 = 
åue
;

226 
	`_…c3675_˛ór_úq
();

228  
ªsu…
;

229 
	}
}

231 
boﬁ
 
	$_…c3675_gë_ªÆtime_°©us
(
uöt8_t
* 
vÆ
)

235 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
LTC3675_REG_REALTIME_STATUS
, 
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

236  
Ál£
;

238 
	`debug_log_ex
("3675RT ", 
Ál£
);

239 
	`debug_log_hex
(*
vÆ
);

243  
åue
;

244 
	}
}

246 
öt8_t
 
	$…c3675_check_°©us
()

248 
uöt8_t
 
vÆ
 = 0x00;

250 
	`pmc_mask_úqs
(
åue
);

252 
boﬁ
 
ªsu…
 = 
	`_…c3675_gë_ªÆtime_°©us
(&
vÆ
);

254 
	`pmc_mask_úqs
(
Ál£
);

256 i‡(
ªsu…
 =
Ál£
)

269  
	`…c3675_°©us_to_îr‹
(
vÆ
);

270 
	}
}

272 
boﬁ
 
	$…c3675_h™dÀ_úq
()

274 
	`pmc_mask_úqs
(
åue
);

276  
boﬁ
 
ªsu…
 = 
	`_…c3675_h™dÀ_úq
();

278 
	`pmc_mask_úqs
(
Ál£
);

280  
ªsu…
;

281 
	}
}

283 
boﬁ
 
	$_…c3675_deÁu…_ªg_hñ≥r
(
uöt8_t
 
addªss
)

285 
uöt8_t
 
vÆ
 = 0x00;

286 
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
addªss
, &
vÆ
, 
_…c3675_puŒ_up
);

287  ((
vÆ
 & 
LTC3675_ENABLE_REGISTER_BIT
) == LTC3675_ENABLE_REGISTER_BIT);

288 
	}
}

290 
boﬁ
 
	$…c3675_öô
(
…c3675_ªg_hñ≥r_‚
 
hñ≥r
)

292 i‡(
hñ≥r
)

293 
_…c3675_ªg_hñ≥r
 = 
hñ≥r
;

295 
_…c3675_ªg_hñ≥r
 = 
_…c3675_deÁu…_ªg_hñ≥r
;

296 #ifde‡
HARDWIRE_ENABLE


297 
	`io_ouçut_pö
(
PWR_EN1
);

298 
	`io_ouçut_pö
(
PWR_EN2
);

299 
	`io_ouçut_pö
(
PWR_EN3
);

300 
	`io_ouçut_pö
(
PWR_EN4
);

301 
	`io_ouçut_pö
(
PWR_EN5
);

311 #ifde‡
I2C_REWORK


312 
	`i2c_öô_ex
(
PWR_SDA
, 
PWR_SCL
, 
_…c3675_puŒ_up
);

314 
	`io_öput_pö
(
PWR_IRQ
);

315 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

316 
	`io_£t_pö
(
PWR_IRQ
);

319 
	`io_öput_pö
(
WAKEUP
);

320 
	`io_£t_pö
(
WAKEUP
);

322 
	`io_öput_pö
(
ONSWITCH_DB
);

323 
	`io_£t_pö
(
ONSWITCH_DB
);

325 
	`io_öput_pö
(
PWR_RESET
);

326 
	`io_£t_pö
(
PWR_RESET
);

328 
	`_…c3675_˛ór_úq
();

330 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_IRQB_MASK
, 0xFF, 
_…c3675_puŒ_up
Ë=
Ál£
)

331  
Ál£
;

333 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_UVOT
, 0x70, 
_…c3675_puŒ_up
Ë=
Ál£
)

334  
Ál£
;

336 i‡(
	`…c3675_has_öãºu±
())

337 
	`_…c3675_h™dÀ_úq
();

343  
åue
;

344 
	}
}

346 
boﬁ
 
	$…c3675_is_wakög_up
()

348  
	`io_ã°_pö
(
WAKEUP
);

349 
	}
}

351 
boﬁ
 
	$_…c3675_is_pgood
(
uöt8_t
 
ªg
)

353 
uöt8_t
 
vÆ
 = 0x00;

354 i‡(
	`_…c3675_gë_ªÆtime_°©us
(&
vÆ
Ë=
Ál£
)

355  
Ál£
;

356  ((
ªg
 & 
vÆ
) ==Ñeg);

357 
	}
}

359 
boﬁ
 
	$_…c3675_toggÀ_ªg
(
uöt8_t
 
addr
, uöt8_à
def_ªg
, 
boﬁ
 
⁄
)

361 
boﬁ
 
ªsu…
 = 
åue
;

365 
uöt8_t
 
vÆ
 = 0x00 | 
def_ªg
;

366 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
addr
, &
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

367  
Ál£
;

369 
vÆ
 &~
LTC3675_ENABLE_REGISTER_BIT
;

371 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
addr
, 
vÆ
 | (
⁄
 ? 
LTC3675_ENABLE_REGISTER_BIT
 : 0x00), 
_…c3675_puŒ_up
Ë=
Ál£
)

373 
ªsu…
 = 
Ál£
;

375 i‡(
⁄
)

377 
	`_dñay_ms
(
LTC3675_REGULATOR_ENABLE_DELAY
);

382  
ªsu…
;

384 
	}
}

386 
boﬁ
 
	$…c3675_íabÀ_ªg
(
…c3675_ªguœt‹_t
 
ªg
, 
boﬁ
 
⁄
)

389 
	`debug_log_ex
("3675 ", 
Ál£
);

390 
	`debug_log_byã_ex
(
ªg
, 
åue
);

395 
boﬁ
 
ªsu…
 = 
Ál£
;

397 
ªg
)

399 
LTC3675_REG_1
:

400 
LTC3675_REG_2
:

401 #ifde‡
HARDWIRE_ENABLE


402 
	`io_íabÀ_pö
(
PWR_EN1
, 
⁄
);

406 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BUCK1
, 
LTC3675_DEFAULT_BUCK_REG_VAL
, 
⁄
Ë=
Ál£
) {

408  
Ál£
;

412 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_Buck1_PGood
Ë=
⁄
);

414 
LTC3675_REG_3
:

415 
LTC3675_REG_4
:

416 #ifde‡
HARDWIRE_ENABLE


417 
	`io_íabÀ_pö
(
PWR_EN3
, 
⁄
);

420 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BUCK3
, 
LTC3675_DEFAULT_BUCK_REG_VAL
, 
⁄
Ë=
Ál£
)

421  
Ál£
;

423 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_Buck3_PGood
Ë=
⁄
);

425 
LTC3675_REG_5
:

426 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BOOST
, 
LTC3675_DEFAULT_BOOST_REG_VAL
, 
⁄
Ë=
Ál£
)

427  
Ál£
;

428 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_Boo°_PGood
Ë=
⁄
);

430 
LTC3675_REG_6
:

431 #ifde‡
HARDWIRE_ENABLE


432 
	`io_íabÀ_pö
(
PWR_EN5
, 
⁄
);

435 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BUCK_BOOST
, 
LTC3675_DEFAULT_BUCK_BOOST_REG_VAL
, 
⁄
Ë=
Ál£
)

436  
Ál£
;

438 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_BuckBoo°_PGood
Ë=
⁄
);

444 
	`_debug_log
((
ªsu…
 ? "+" : "-"));

446  
ªsu…
;

447 
	}
}

449 
boﬁ
 
	$…c3675_£t_vﬁège
(
…c3675_ªguœt‹_t
 
ªg
, 
uöt16_t
 
vﬁège
)

456 
uöt16_t
 
max_vﬁège
 = 0;

457 
uöt8_t
 
ªg_subaddr
 = 0;

459 
ªg
)

461 
LTC3675_REG_1
:

462 
LTC3675_REG_2
:

463 
max_vﬁège
 = 1500;

464 
ªg_subaddr
 = 
LTC3675_REG_BUCK1
;

466 
LTC3675_REG_3
:

467 
LTC3675_REG_4
:

468 
max_vﬁège
 = 1800;

469 
ªg_subaddr
 = 
LTC3675_REG_BUCK3
;

471 
LTC3675_REG_5
:

472 
max_vﬁège
 = 5000;

473 
ªg_subaddr
 = 
LTC3675_REG_BOOST
;

475 
LTC3675_REG_6
:

476 
max_vﬁège
 = 3300;

477 
ªg_subaddr
 = 
LTC3675_REG_BUCK_BOOST
;

481 i‡(
vﬁège
 > 
max_vﬁège
)

482  
Ál£
;

486 
uöt32_t
 
rFB
 = ((uöt32_t)
max_vﬁège
 * 1000) / (uint32_t)800;

487 
uöt32_t
 
r
 = ((uöt32_t)
vﬁège
 * 1000Ë/ (uöt32_t)
rFB
;

488 i‡(
r
 < 450)

489  
Ál£
;

491 
uöt16_t
 
rDAC
 = (16 * ((uöt16_t)
r
 - 450)) / (800 - 450);

493 
	`debug_log_ex
("V∏", 
Ál£
);

494 
	`debug_log_byã_ex
(
ªg
, 
Ál£
);

495 
	`debug_log_ex
("=", 
Ál£
);

496 
	`debug_log_byã_ex
((
uöt8_t
)
rDAC
, 
Ál£
);

498 
uöt8_t
 
vÆ
 = 0x00;

499 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
ªg_subaddr
, &
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

501 
	`debug_log
("-");

502  
Ál£
;

505 
vÆ
 = (vÆ & 0xF0Ë| (
uöt8_t
)
rDAC
;

506 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
ªg_subaddr
, 
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

508 
	`debug_log
("-");

509  
Ál£
;

512 
	`debug_log
("+");

514  
åue
;

515 
	}
}

517 
boﬁ
 
	$…c3675_is_powî_buâ⁄_dïªs£d
()

519  (
	`io_ã°_pö
(
ONSWITCH_DB
Ë=
Ál£
);

520 
	}
}

522 
boﬁ
 
	$…c3675_has_öãºu±
()

524  (
	`io_ã°_pö
(
PWR_IRQ
Ë=
Ál£
);

525 
	}
}

	@firmware/e300/rev_b/ltc3675.h

5 #i‚de‡
LTC3675_H


6 
	#LTC3675_H


	)

9 
	~<°dboﬁ.h
>

10 
	~<°döt.h
>

12 
	$boﬁ
 (*
	t…c3675_ªg_hñ≥r_‚
)(
	tuöt8_t
 
	taddªss
);

14 
boﬁ
 
	`…c3675_öô
(
…c3675_ªg_hñ≥r_‚
 
hñ≥r
);

16 
	e…c3675_ªguœt‹s
 {

17 
LTC3675_REG_1
,

18 
LTC3675_REG_2
,

19 
LTC3675_REG_3
,

20 
LTC3675_REG_4
,

21 
LTC3675_REG_5
,

22 
LTC3675_REG_6


24 } 
	t…c3675_ªguœt‹_t
;

26 
boﬁ
 
	`…c3675_íabÀ_ªg
(
…c3675_ªguœt‹_t
 
ªg
, boﬁ 
⁄
);

27 
boﬁ
 
	`…c3675_£t_vﬁège
(
…c3675_ªguœt‹_t
 
ªg
, 
uöt16_t
 
vﬁège
);

28 
boﬁ
 
	`…c3675_is_powî_buâ⁄_dïªs£d
();

29 
boﬁ
 
	`…c3675_has_öãºu±
();

30 
boﬁ
 
	`…c3675_h™dÀ_úq
();

31 
öt8_t
 
	`…c3675_check_°©us
();

32 
uöt8_t
 
	`…c3675_gë_œ°_°©us
();

33 
uöt8_t
 
	`…c3675_°©us_to_îr‹
(uöt8_à
vÆ
);

34 
boﬁ
 
	`…c3675_is_powî_good
(
uöt8_t
 
vÆ
);

35 
boﬁ
 
	`…c3675_is_wakög_up
();

	@firmware/e300/rev_b/ltc4155.c

5 #i‚de‡
CHARGER_TI


7 
	~"c⁄fig.h
"

8 
	~"…c4155.h
"

10 
	~<utû/dñay.h
>

12 
	~"io.h
"

13 
	~"i2c.h
"

14 
	~"powî.h
"

15 
	~"debug.h
"

16 
	~"globÆ.h
"

17 
	~"îr‹.h
"

19 
io_pö_t
 
	gUSBPM_IRQ
 = 
IO_PB
(1);

21 #ifde‡
ATTINY88_DIP


23 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(2);

24 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(3);

28 #ifde‡
I2C_REWORK


30 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(4);

31 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(5);

35 
	#CHRG_SDA
 
PWR_SDA


	)

36 
	#CHRG_SCL
 
PWR_SCL


	)

42 c⁄° 
boﬁ
 
	g_…c4155_puŒ_up
 = 
Ál£
;

44 
	#LTC4155_BASE_ADDRESS
 0x12

	)

45 
	#LTC4155_WRITE_ADDRESS
 (
LTC4155_BASE_ADDRESS
 + 0)

	)

46 
	#LTC4155_READ_ADDRESS
 (
LTC4155_BASE_ADDRESS
 + 1)

	)

56 
	eLTC4155Regi°îs


58 
	mLTC4155_REG_USB
 = 0x00,

59 
	mLTC4155_REG_WALL
 = 0x01,

60 
	mLTC4155_REG_CHARGE
 = 0x02,

61 
	mLTC4155_REG_STATUS
 = 0x03,

62 
	mLTC4155_REG_GOOD
 = 0x04,

63 
	mLTC4155_REG_THERMISTOR
 = 0x05,

64 
	mLTC4155_REG_ENABLE
 = 0x06,

65 
	mLTC4155_REG_ARM_AND_SHIP
= 0x07

68 
	eLTC4155I¡îru±Masks


70 
	mLTC4155_ENABLE_USB_OTG
 = 1 << 1,

72 
	mLTC4155_INT_UVCL
 = 1 << 2,

73 
	mLTC4155_INT_ILIMIT
 = 1 << 3,

74 
	mLTC4155_INT_USB_OTG
 = 1 << 4,

75 
	mLTC4155_INT_EXT_PWR
 = 1 << 5,

76 
	mLTC4155_INT_FAULT
 = 1 << 6,

77 
	mLTC4155_INT_CHARGER
 = 1 << 7

80 
	eLTC4155O±i⁄s


82 
	mLTC4155_USB_OTG_LOCKOUT
 = 1 << 5,

83 
	mLTC4155_ENABLE_BATTERY_CONDITIONER
 = 1 << 6,

84 
	mLTC4155_DISABLE_INPUT_UVCL
 = 1 << 7

87 
	eLTC4155Shi·s


89 
	mLTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
 = 4,

90 
	mLTC4155_SHIFTS_CHARGE_FLOAT_VOLTAGE
 = 2,

91 
	mLTC4155_SHIFTS_WALL_PRIORITY
 = 7,

92 
	mLTC4155_SHIFTS_WALL_SAFETY_TIMER
 = 5

95 
	eLTC4155Sètu£s


97 
	mLTC4155_LOW_BATTERY
 = 1 << 0,

98 
	mLTC4155_BOOST_ENABLE
 = 1 << 3,

99 
	mLTC4155_ID_PIN_DETECT
 = 1 << 4,

102 
	eLTC4155Goods


104 
	mLTC4155_BAD_CELL_FAULT
 = 1 << 0,

105 
	mLTC4155_OTG_FAULT
 = 1 << 1,

106 
	mLTC4155_OVP_ACTIVE
 = 1 << 2,

107 
	mLTC4155_INPUT_UVCL_ACTIVE
 = 1 << 3,

108 
	mLTC4155_INPUT_CURRENT_LIMIT_ACTIVE
 = 1 << 4,

109 
	mLTC4155_WALLSNS_GOOD
 = 1 << 5,

110 
	mLTC4155_USBSNS_GOOD
 = 1 << 6,

111 
	mLTC4155_EXTERNAL_POWER_GOOD
 = 1 << 7

114 
	eLTC4155B©ãryCh¨gîSètues


116 
	mLTC4155_CHARGER_OFF
,

117 
	mLTC4155_CHARGER_LOW_BATTERY_VOLTAGE
,

118 
	mLTC4155_CHARGER_CONSTANT_CURRENT
,

119 
	mLTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_GT_VCX
,

120 
	mLTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_LT_VCX
,

121 
	mLTC4155_CHARGER_NTC_TOO_WARM
,

122 
	mLTC4155_CHARGER_NTC_TOO_COLD
,

123 
	mLTC4155_CHARGER_NTC_HOT


126 
	eLTC4155Thîmi°‹Sètu£s


128 
	mLTC4155_NTC_NORMAL
,

129 
	mLTC4155_NTC_TOO_COLD
,

130 
	mLTC4155_NTC_TOO_WARM
,

131 
	mLTC4155_NTC_FAULT


134 c⁄° 
uöt8_t
 
	g_…c4155_öãºu±_mask
 =

136 
LTC4155_INT_UVCL
 |

137 
LTC4155_INT_ILIMIT
 |

138 
LTC4155_INT_USB_OTG
 |

139 
LTC4155_INT_EXT_PWR
 |

140 
LTC4155_INT_FAULT
 |

141 
LTC4155_INT_CHARGER
;

143 
boﬁ
 
	$_…c4155_˛ór_úq
()

145  
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_ENABLE
, 
_…c4155_öãºu±_mask
, 
_…c4155_puŒ_up
);

146 
	}
}

148 
boﬁ
 
	$…c4155_˛ór_úq
()

150 
	`pmc_mask_úqs
(
åue
);

152 
boﬁ
 
ªsu…
 = 
	`_…c4155_˛ór_úq
();

154 
	`pmc_mask_úqs
(
Ál£
);

156  
ªsu…
;

157 
	}
}

159 
uöt8_t
 
	g_…c4155_œ°_good
, 
	g_…c4155_œ°_°©us
;

161 
boﬁ
 
	$_…c4155_h™dÀ_úq
()

163 
	`_…c4155_˛ór_úq
();

165 
	`_dñay_ms
(50);

169 
uöt8_t
 
vÆ
 = 0x00;

170 
boﬁ
 
ªsu…
 = 
Ál£
;

172 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_GOOD
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

173 
_…c4155_h™dÀ_Áû
;

178 
	`debug_log_ex
("4155GO ", 
Ál£
);

179 
	`debug_log_hex
(
vÆ
);

181 i‡(
vÆ
 & 
LTC4155_WALLSNS_GOOD
)

183 
uöt8_t
 
wÆl_°©e
 = 0;

184 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_WALL
, &
wÆl_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

185 
_…c4155_h™dÀ_Áû
;

187 
wÆl_°©e
 &= ~0x1E;

188 
wÆl_°©e
 |= 0x0E;

190 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_WALL
, 
wÆl_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

191 
_…c4155_h™dÀ_Áû
;

193 
	`debug_log
("I+");

196 
_…c4155_œ°_good
 = 
vÆ
;

198 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_STATUS
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

199 
_…c4155_h™dÀ_Áû
;

204 
	`debug_log_ex
("4155ST ", 
Ál£
);

205 
	`debug_log_hex
(
vÆ
);

207 
_…c4155_œ°_°©us
 = 
vÆ
;

209 
vÆ
 >>= 5;

211 i‡(
_°©e
.
blök_îr‹
 =
BlökEº‹_N⁄e
)

213 
vÆ
)

215 
LTC4155_CHARGER_CONSTANT_CURRENT
:

216 
LTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_GT_VCX
:

217 
LTC4155_CHARGER_LOW_BATTERY_VOLTAGE
:

219 i‡((
_°©e
.
b©ãry_nŸ_¥e£¡
 =
Ál£
) &&

220 (
_…c4155_œ°_good
 & (
LTC4155_WALLSNS_GOOD
 | 
LTC4155_USBSNS_GOOD
)))

223 
	`ch¨ge_nŸify
(
åue
);

227 
LTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_LT_VCX
:

235 
	`ch¨ge_nŸify
(
Ál£
);

241 
ªsu…
 = 
åue
;

242 
_…c4155_h™dÀ_Áû
:

243 
	`_…c4155_˛ór_úq
();

245  
ªsu…
;

246 
	}
}

248 
	#LTC4155_CHARGE_CURRENT_LIMIT
 0x7

249 

	)

250 
boﬁ
 
	$…c4155_£t_ch¨ge_cuºít_limô
(
uöt8_t
 
≥r˚¡age
)

252 
uöt8_t
 
vÆ
 = 0;

253 
uöt8_t
 
limô
 = 0;

255 i‡(
≥r˚¡age
 > 100)

256  
Ál£
;

257 i‡(
≥r˚¡age
 == 100)

258 
≥r˚¡age
 = 0xF;

259 i‡(
≥r˚¡age
 > 12)

261 
uöt16_t
 
l
 = (((uöt16_t)
≥r˚¡age
 - 12) * 100) / 586;

262 
limô
 = (
uöt8_t
)
l
;

265 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_CHARGE
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

266  
Ál£
;

268 
vÆ
 &((0x1 << 
LTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
) - 1);

270 
vÆ
 |(
limô
 << 
LTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
);

272 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_CHARGE
, 
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

273  
Ál£
;

277  
åue
;

278 
	}
}

280 
boﬁ
 
	$…c4155_öô
(
boﬁ
 
dißbÀ_ch¨gî
)

282 
	`io_öput_pö
(
USBPM_IRQ
);

283 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

284 
	`io_£t_pö
(
USBPM_IRQ
);

286 #ifde‡
I2C_REWORK


287 
	`i2c_öô_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
_…c4155_puŒ_up
);

289 i‡–
	`_…c4155_h™dÀ_úq
(Ë=
Ál£
)

290  
Ál£
;

292 c⁄° 
uöt8_t
 
ch¨ge_°©e
 =

293 (
dißbÀ_ch¨gî
 ? 0x0 : 
LTC4155_CHARGE_CURRENT_LIMIT
Ë<< 
LTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
 |

294 0x3 << 
LTC4155_SHIFTS_CHARGE_FLOAT_VOLTAGE
 |

296 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_CHARGE
, 
ch¨ge_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

297  
Ál£
;

299 c⁄° 
uöt8_t
 
wÆl_°©e
 =

300 0x0 << 
LTC4155_SHIFTS_WALL_PRIORITY
 |

301 0x0 << 
LTC4155_SHIFTS_WALL_SAFETY_TIMER
 |

303 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_WALL
, 
wÆl_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

304  
Ál£
;

312 i‡(
	`_…c4155_h™dÀ_úq
(Ë=
Ál£
)

313  
Ál£
;

315  
åue
;

316 
	}
}

318 
boﬁ
 
	$…c4155_has_öãºu±
()

324  (
	`io_ã°_pö
(
USBPM_IRQ
Ë=
Ál£
);

325 
	}
}

327 
boﬁ
 
	$…c4155_h™dÀ_úq
()

329 
	`pmc_mask_úqs
(
åue
);

331 
boﬁ
 
ªsu…
 = 
	`_…c4155_h™dÀ_úq
();

333 
	`pmc_mask_úqs
(
Ál£
);

335  
ªsu…
;

336 
	}
}

338 
boﬁ
 
	$…c4155_¨m_shù_™d_°‹e
()

340  
åue
;

341 
	}
}

343 
boﬁ
 
	$…c4155_gë_thîmi°‹
(
uöt8_t
* 
vÆ
, 
boﬁ
* 
w¨nög
)

345 
boﬁ
 
ªsu…
 = 
Ál£
;

346 
uöt8_t
 
_vÆ
 = 0;

348 
	`pmc_mask_úqs
(
åue
);

350 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_THERMISTOR
, &
_vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

351 
…c4155_gë_thîmi°‹_Áû
;

353 i‡(
vÆ
)

354 (*
vÆ
Ë
_vÆ
 >> 1;

356 i‡(
w¨nög
)

357 (*
w¨nög
Ë((
_vÆ
 & 0x01) != 0x00);

359 
ªsu…
 = 
åue
;

360 
…c4155_gë_thîmi°‹_Áû
:

361 
	`pmc_mask_úqs
(
Ál£
);

362  
ªsu…
;

363 
	}
}

365 
	$…c4155_dump
()

367 
	`pmc_mask_úqs
(
åue
);

369 
uöt8_t
 
vÆ
 = 0x00;

370 
boﬁ
 
w¨nög
 = 
Ál£
;

372 i‡(
	`…c4155_gë_thîmi°‹
(&
vÆ
, &
w¨nög
Ë=
Ál£
)

373 
…c4155_dump_Áû
;

375 
	`debug_log_ex
("\tTHRM", 
Ál£
);

376 i‡(
w¨nög
)

377 
	`debug_log_ex
("!", 
Ál£
);

378 
	`debug_log_byã
(
vÆ
);

380 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_WALL
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

381 
…c4155_dump_Áû
;

383 
	`debug_log_ex
("\tWALL", 
Ál£
);

384 
	`debug_log_hex
(
vÆ
);

386 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_GOOD
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

387 
…c4155_dump_Áû
;

389 
	`debug_log_ex
("\t4155GO ", 
Ál£
);

390 
	`debug_log_hex
(
vÆ
);

392 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_STATUS
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

393 
…c4155_dump_Áû
;

395 
	`debug_log_ex
("\t4155ST ", 
Ál£
);

396 
	`debug_log_hex
(
vÆ
);

398 
…c4155_dump_Áû
:

399 
	`pmc_mask_úqs
(
Ál£
);

400 
	}
}

	@firmware/e300/rev_b/ltc4155.h

8 #i‚de‡
LTC4155_H_


9 
	#LTC4155_H_


	)

11 
	~<°dboﬁ.h
>

12 
	~<°döt.h
>

14 #i‚de‡
CHARGER_TI


16 
boﬁ
 
…c4155_öô
(boﬁ 
dißbÀ_ch¨gî
);

17 
boﬁ
 
…c4155_has_öãºu±
();

18 
boﬁ
 
…c4155_h™dÀ_úq
();

19 
…c4155_dump
();

20 
boﬁ
 
…c4155_£t_ch¨ge_cuºít_limô
(
uöt8_t
 
≥r˚¡age
);

	@firmware/e300/rev_b/main.c

5 
	~"c⁄fig.h
"

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<°dio.h
>

10 
	~<avr/io.h
>

11 
	~<utû/dñay.h
>

12 
	~<avr/¶ìp.h
>

13 
	~<avr/öãºu±.h
>

15 
	~"globÆ.h
"

16 
	~"powî.h
"

17 
	~"debug.h
"

18 
	~"îr‹.h
"

19 
	~"…c3675.h
"

20 #ifde‡
CHARGER_TI


21 
	~"bq24190.h
"

23 
	~"…c4155.h
"

26 
	#AUTO_POWER_ON


	)

28 
	#INITIAL_DELAY
 250

29 

	)

30 
	gFUSES
 = {

31 .
low
 = (
FUSE_CKSEL0
 & 
FUSE_SUT0
 & 
FUSE_CKDIV8
),

32 .
	ghigh
 = (
FUSE_EESAVE
 & 
FUSE_SPIEN
),

35 vﬁ©ûê
STATE
 
	g_°©e
;

68 
boﬁ
 
	$pmc_mask_úqs
(
boﬁ
 
mask
)

70 i‡(
_°©e
.
öãºu±s_íabÀd
 =
Ál£
)

71  
Ál£
;

73 i‡(
mask
)

75 i‡(
_°©e
.
öãºu±_dïth
 == 0)

76 
	`˛i
();

77 ++
_°©e
.
öãºu±_dïth
;

81 i‡(
_°©e
.
öãºu±_dïth
 == 0)

82  
Ál£
;

84 --
_°©e
.
öãºu±_dïth
;

85 i‡(
_°©e
.
öãºu±_dïth
 == 0)

86 
	`£i
();

89  
åue
;

90 
	}
}

92 
	$maö
()

94 
	`_dñay_ms
(
INITIAL_DELAY
);

98 
	`mem£t
((*)&
_°©e
, 0x00, (
STATE
));

100 
	`debug_öô
();

101 
	`debug_blök
(1);

104 
	`debug_log
("Hello world");

106 
	`£t_¶ìp_mode
(
SLEEP_MODE_PWR_DOWN
);

113 
TCCR0A
 = 
	`_BV
(
CTC0
);

114 
OCR0A
 = 244;

115 
TIMSK0
 = 
	`_BV
(
OCIE0A
);

117 
boﬁ
 
öô_ªsu…
 = 
	`powî_öô
();

118 
	`debug_log_ex
("Inô", 
Ál£
);

119 
	`_debug_log
(
öô_ªsu…
 ? "+" : "-");

120 
	`debug_blök
(2);

124 #ifde‡
AUTO_POWER_ON


125 
	`powî_⁄
();

126 
	`debug_log
("Power");

127 
	`debug_blök
(3);

134 
_°©e
.
öãºu±s_íabÀd
 = 
åue
;

135 
	`£i
();

137 
	`asm
("nop");

139 
_°©e
.
wake_up
 = 
Ál£
;

141 
boﬁ
 
⁄e_m‹e
 = 
Ál£
;

143 
åue
)

145 
⁄e_m‹e
 = 
Ál£
;

146 #ifde‡
CHARGER_TI


147 i‡(
_°©e
.
bq24190_úq
)

149 
	`bq24190_h™dÀ_úq
();

151 
_°©e
.
bq24190_úq
 = 
Ál£
;

154 i‡((
_°©e
.
…c4155_úq
) )

156 
	`…c4155_h™dÀ_úq
();

158 
_°©e
.
…c4155_úq
 = 
Ál£
;

161 i‡(
_°©e
.
c‹e_powî_bad
)

163 i‡(
	`powî_is_subsys_⁄
(
PS_FPGA
))

165 
	`_dñay_ms
(1);

167 i‡(
	`çs54478_is_powî_good
(Ë=
Ál£
)

169 
	`debug_log
("ML:FPGA!");

172 
_°©e
.
powî_off
 = 
åue
;

178 
	`pmc_£t_blök_îr‹
(
BlökEº‹_FPGA_Powî
);

182 
_°©e
.
c‹e_powî_bad
 = 
Ál£
;

185 i‡((
_°©e
.
…c3675_úq
) )

187 
	`debug_log
("ML:3675+");

189 
	`…c3675_h™dÀ_úq
();

191 i‡(
	`…c3675_is_powî_good
(
	`…c3675_gë_œ°_°©us
()Ë=
Ál£
)

193 
	`debug_log
("ML:3675!");

196 
_°©e
.
powî_off
 = 
åue
;

199 
_°©e
.
…c3675_úq
 = 
Ál£
;

202 i‡(
_°©e
.
powî_off
)

204 
	`debug_log
("ML:Off..");

206 
	`powî_off
();

208 
_°©e
.
powî_off
 = 
Ál£
;

209 
_°©e
.
wake_up
 = 
Ál£
;

211 i‡(
_°©e
.
wake_up
)

213 
	`_dñay_ms
(1);

216 i‡(
	`…c3675_is_wakög_up
())

218 
	`debug_log
("ML:On..");

220 
	`powî_⁄
();

223 
_°©e
.
wake_up
 = 
Ál£
;

228 i‡((
_°©e
.
blök_îr‹
 !
BlökEº‹_N⁄e
Ë&& (_°©e.
blök_œ°_lo›
 !_°©e.
blök_lo›s
))

232 
boﬁ
 
…c3675_u£_œ°_°©us
 = 
Ál£
;

242 
_°©e
.
blök_îr‹
)

244 
BlökEº‹_LTC3675_UndîVﬁège
:

245 
BlökEº‹_LTC3675_OvîTem≥øtuª
:

246 
BlökEº‹_DRAM_Powî
:

247 
BlökEº‹_3_3V_PîùhîÆs_Powî
:

248 
BlökEº‹_1_8V_PîùhîÆs_Powî
:

249 
BlökEº‹_TX_Powî
:

250 i‡(((
…c3675_u£_œ°_°©us
Ë&& (
	`…c3675_°©us_to_îr‹
(
	`…c3675_gë_œ°_°©us
()Ë!
BlökEº‹_N⁄e
)) ||

251 ((
…c3675_u£_œ°_°©us
 =
Ál£
Ë&& (
	`…c3675_check_°©us
(Ë!
BlökEº‹_N⁄e
)))

253 
	`debug_log
("BE:3675-");

254 
ˇn˚l_blök_îr‹
;

255 
BlökEº‹_FPGA_Powî
:

256 i‡(
	`çs54478_is_powî_good
(Ë=
Ál£
)

258 
	`debug_log
("BE:FPGA-");

259 
ˇn˚l_blök_îr‹
;

261 
ˇn˚l_blök_îr‹
:

263 
	`pmc_£t_blök_îr‹
(
BlökEº‹_N⁄e
);

271 #i‚de‡
CHARGER_TI


272 i‡(
	`…c4155_has_öãºu±
())

274 
	`debug_log
("BE:4155");

276 
_°©e
.
…c4155_úq
 = 
åue
;

277 
⁄e_m‹e
 = 
åue
;

280 i‡(
	`…c3675_has_öãºu±
())

282 
	`debug_log
("BE:3675");

284 
_°©e
.
…c3675_úq
 = 
åue
;

285 
⁄e_m‹e
 = 
åue
;

288 i‡(
	`powî_is_subsys_⁄
(
PS_FPGA
))

290 i‡(
	`çs54478_is_powî_good
(Ë=
Ál£
)

292 
	`debug_log
("BE:FPGA!");

294 
_°©e
.
c‹e_powî_bad
 = 
åue
;

295 
⁄e_m‹e
 = 
åue
;

301 
_°©e
.
blök_œ°_lo›
 = _°©e.
blök_lo›s
;

305 i‡((
_°©e
.
a˘ive_timîs
 =0Ë&& (
⁄e_m‹e
 =
Ál£
))

307 
	`debug_log
("^");

308 
	`¶ìp_mode
();

309 
	`debug_log
("$");

314 
	}
}

316 
uöt8_t
 
	$pmc_gë_blök_îr‹
()

318  
_°©e
.
blök_îr‹
;

319 
	}
}

321 
	$pmc_£t_blök_îr‹
(
uöt8_t
 
cou¡
)

323 i‡((
_°©e
.
blök_îr‹
 !
BlökEº‹_N⁄e
Ë&& (
cou¡
 != BlinkError_None))

325 i‡(
_°©e
.
blök_îr‹
 =
cou¡
)

328 i‡(
cou¡
 =
BlökEº‹_N⁄e
)

330 
	`debug_log
("BLNK-");

331 
_°©e
.
blök_°›
 = 
åue
;

338 
	`debug_log_ex
("BLNK ", 
Ál£
);

339 
	`debug_log_byã
(
cou¡
);

341 
_°©e
.
blök_îr‹
 = 
cou¡
;

342 
_°©e
.
blök_lo›s
 = 0;

343 
_°©e
.
blök_œ°_lo›
 = 0;

344 
_°©e
.
blökî_°©e
 = 0;

345 
_°©e
.
blök_°›
 = 
Ál£
;

347 
	`ch¨ge_£t_Àd
(
Ál£
);

349 
TCNT0
 = 0;

350 i‡((
TCCR0A
 & 0x07) == 0x00)

351 
_°©e
.
a˘ive_timîs
++;

352 
TCCR0A
 |= 0x05;

353 
	}
}

355 
	$ISR
(
TIMER0_COMPA_ve˘
)

357 
	`pmc_mask_úqs
(
åue
);

359 i‡(
_°©e
.
blökî_°©e
 < (2 * _°©e.
blök_îr‹
 + 1))

360 
	`ch¨ge_£t_Àd
((
_°©e
.
blökî_°©e
 % 2) == 1);

362 
_°©e
.
blökî_°©e
++;

364 i‡(
_°©e
.
blökî_°©e
 =(2 * _°©e.
blök_îr‹
 + 1 + 1))

366 
_°©e
.
blökî_°©e
 = 0;

368 i‡(
_°©e
.
blök_°›
)

370 i‡((
TCCR0A
 & 0x07) != 0x00)

371 
_°©e
.
a˘ive_timîs
--;

372 
TCCR0A
 &= ~0x07;

374 
_°©e
.
blök_îr‹
 = 
BlökEº‹_N⁄e
;

376 
	`debug_log
("BLNK.");

380 
_°©e
.
blök_lo›s
++;

384 
	`pmc_mask_úqs
(
Ál£
);

385 
	}
}

	@firmware/e300/rev_b/power.c

5 
	~"c⁄fig.h
"

6 
	~"powî.h
"

8 
	~<°rög.h
>

9 
	~<utû/dñay.h
>

10 
	~<avr/io.h
>

11 
	~<avr/öãºu±.h
>

12 
	~<avr/¶ìp.h
>

14 
	~"io.h
"

15 
	~"i2c.h
"

16 
	~"…c3675.h
"

17 
	~"…c4155.h
"

18 
	~"bq24190.h
"

19 
	~"debug.h
"

20 
	~"globÆ.h
"

21 
	~"îr‹.h
"

23 
	#BLINK_ERROR_DELAY
 250

24 

	)

25 
	#POWER_DEFAULT_DELAY
 50

26 
	#POWER_DEFAULT_RETRIES
 10

	)

28 
	#BATT_MIN_VOLTAGE
 2000

29 

	)

30 
	#ARRAY_SIZE
(
a
Ë(◊)/◊[0]))

	)

31 
	#ZERO_MEMORY
(
s
Ë
	`mem£t
(&s, 0x00, (s))

	)

33 #i‚de‡
I2C_REWORK


34 
io_pö_t
 
	gPWR_SDA
 = 
IO_PC
(4);

35 
io_pö_t
 
	gPWR_SCL
 = 
IO_PC
(5);

37 
io_pö_t
 
	gUSBHUB_RESET

IO_PA
(2);

42 #ifde‡
DDR3L


43 
	#DRAM_VOLTAGE
 1350

	)

45 
	#DRAM_VOLTAGE
 0

47 

	)

48 
	sªg_c⁄fig
 {

49 
öt16_t
 
	mvﬁège
;

50 
uöt8_t
 
	mdevi˚
;

51 
uöt8_t
 
	maddªss
;

52 
boﬁ
 
	mpowîed
;

53 } 
	gdeÁu…_ªg_c⁄fig
[] = {

54 { 0000, 
REG_UNKNOWN
, 0 },

55 { 1000, 
REG_TPS54478
, 0 },

56 { 
DRAM_VOLTAGE
, 
REG_LTC3675
, 
LTC3675_REG_1
 },

57 { 0, 
REG_LTC3675
, 
LTC3675_REG_3
 },

58 { 0, 
REG_LTC3675
, 
LTC3675_REG_6
 },

59 { 0, 
REG_LTC3675
, 
LTC3675_REG_5
 }

74 
boﬁ
 
	$powî_is_subsys_⁄
(
powî_subsy°em_t
 
ödex
)

76 i‡((
ödex
 <
PS_UNKNOWN
Ë|| (ödex >
PS_MAX
))

77  
Ál£
;

79  
deÁu…_ªg_c⁄fig
[
ödex
].
powîed
;

80 
	}
}

82 
boﬁ
 
	$…c3675_ªg_hñ≥r
(
uöt8_t
 
addªss
)

84 
öt8_t
 
i
 = 0; i < 
	`ARRAY_SIZE
(
deÁu…_ªg_c⁄fig
); ++i)

86 
ªg_c⁄fig
* 
ªg
 = 
deÁu…_ªg_c⁄fig
 + 
i
;

87 i‡((
ªg
->
devi˚
 =
REG_LTC3675
Ë&& (ªg->
addªss
 ==áddress))

88  
ªg
->
powîed
;

90 #ifde‡
DEBUG_SAFETY


91 
	`debug_log_ex
("!3675HLP ", 
Ál£
);

92 
	`debug_log_hex
(
addªss
);

94  
Ál£
;

96 
	}
}

98 
io_pö_t
 
	gAVR_CS
 = 
IO_PB
(2);

99 
io_pö_t
 
	gAVR_MOSI
 = 
IO_PB
(3);

100 
io_pö_t
 
	gAVR_MISO
 = 
IO_PB
(4);

101 
io_pö_t
 
	gAVR_SCK
 = 
IO_PB
(5);

103 #i‚de‡
ATTINY88_DIP


104 
io_pö_t
 
	gFTDI_BCD
 = 
IO_PB
(6);

105 
io_pö_t
 
	gFTDI_PWREN2
 = 
IO_PB
(7);

108 
io_pö_t
 
	gAVR_RESET
 = 
IO_PC
(6);

109 
io_pö_t
 
	gAVR_IRQ
 = 
IO_PD
(5);

113 
	#TPS54478_START_DELAY
 10

114 

	)

115 #ifde‡
ATTINY88_DIP


116 
io_pö_t
 
	gCORE_PWR_EN
 = 
IO_PC
(1);

118 
io_pö_t
 
	gCORE_PWR_EN
 = 
IO_PA
(3);

120 
io_pö_t
 
	gCORE_PGOOD
 = 
IO_PB
(0);

122 
	$çs54478_öô
(
boﬁ
 
íabÀ
)

124 
	`çs54478_£t_powî
(
íabÀ
);

125 
	`io_˛ór_pö
(
CORE_PWR_EN
);

127 
	`io_öput_pö
(
CORE_PGOOD
);

128 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

129 
	`io_£t_pö
(
CORE_PGOOD
);

135 
	}
}

137 
	$çs54478_£t_powî
(
boﬁ
 
⁄
)

139 
	`debug_log_ex
("54478", 
Ál£
);

143 i‡(
⁄
)

145 
	`io_öput_pö
(
CORE_PWR_EN
);

146 
	`_dñay_ms
(
TPS54478_START_DELAY
);

148 
	`debug_log
("+");

152 
	`io_ouçut_pö
(
CORE_PWR_EN
);

155 
	`debug_log
("-");

159 
	}
}

161 
boﬁ
 
	$çs54478_is_powî_good
()

163  
	`io_ã°_pö
(
CORE_PGOOD
);

164 
	}
}

168 
io_pö_t
 
	gCHARGE
 = 
IO_PD
(1);

170 #i‡!
deföed
(
ATTINY88_DIP
Ë&& deföed(
LED_POLARITY
)

171 
io_pö_t
 
	gPOWER_LED
 = 
IO_PC
(7);

173 
	$powî_£t_Àd_ex
(
boﬁ
 
⁄
, boﬁ 
sw≠
)

175 i‡(
sw≠
)

177 i‡((
⁄
 =
Ál£
Ë&& ( 
_°©e
.
b©ãry_ch¨gög
))

179 
	`ch¨ge_£t_Àd
(
åue
);

184 
	`io_˛ór_pö
(
CHARGE
);

185 
	`io_íabÀ_pö
(
POWER_LED
, 
⁄
);

186 
	}
}

188 
	$powî_£t_Àd
(
boﬁ
 
⁄
)

190 
	`powî_£t_Àd_ex
(
⁄
, 
åue
);

191 
	}
}

194 
	$ch¨ge_£t_Àd_ex
(
boﬁ
 
⁄
, boﬁ 
sw≠
)

196 #ifde‡
ATTINY88_DIP


200 #ifde‡
LED_POLARITY


201 
	`io_˛ór_pö
(
POWER_LED
);

206 #ifde‡
ATTINY88_DIP


207 
	`io_íabÀ_pö
(
CHARGE
, !
⁄
);

209 
	`io_íabÀ_pö
(
CHARGE
, 
⁄
);

211 #ifde‡
LED_POLARITY


212 i‡(
sw≠
)

214 i‡((
⁄
 =
Ál£
Ë&& (
_°©e
.
powîed
))

215 
	`powî_£t_Àd
(
åue
);

220 
	}
}

222 
	$ch¨ge_£t_Àd
(
boﬁ
 
⁄
)

224 
	`ch¨ge_£t_Àd_ex
(
⁄
, 
åue
);

225 
	}
}

227 
	$ch¨ge_nŸify
(
boﬁ
 
ch¨gög
)

229 
_°©e
.
b©ãry_ch¨gög
 = 
ch¨gög
;

231 
	`ch¨ge_£t_Àd
(
ch¨gög
);

232 
	}
}

236 
	$usbhub_ª£t
()

238 #i‚de‡
I2C_REWORK


239 
	`io_˛ór_pö
(
USBHUB_RESET
);

241 
	`_dñay_us
(1 * 10);

243 
	`io_£t_pö
(
USBHUB_RESET
);

245 
	}
}

249 
	$powî_sig«l_öãºu±
()

251 
	`io_£t_pö
(
AVR_IRQ
);

252 
	}
}

256 #i‡!
deföed
(
DEBUG
Ë&& !(deföed(
ENABLE_SERIAL
Ë&& deföed(
ATTINY88_DIP
))

257 
io_pö_t
 
	gPS_POR
 = 
IO_PD
(6);

258 
	#PS_POR_AVAILABLE


	)

260 
io_pö_t
 
	gPS_SRST
 = 
IO_PD
(7);

262 
	#FPGA_RESET_DELAY
 10

263 

	)

264 
	$Âga_ª£t
(
boﬁ
 
dñay
)

266 #ifde‡
PS_POR_AVAILABLE


267 
	`io_˛ór_pö
(
PS_POR
);

269 
	`io_˛ór_pö
(
PS_SRST
);

271 i‡(
dñay
)

272 
	`_dñay_ms
(
FPGA_RESET_DELAY
);

273 #ifde‡
PS_POR_AVAILABLE


274 
	`io_íabÀ_pö
(
PS_POR
, 
åue
);

276 
	`io_íabÀ_pö
(
PS_SRST
, 
åue
);

277 
	}
}

281 
io_pö_t
 
	gVBAT
 = 
IO_PC
(0);

283 
	$b©ãry_öô
()

286 
DIDR0
 |= 0x1;

288 
ADMUX
 = (1 << 
REFS0
)

289 | (0 << 
ADLAR
)

290 | (0 << 
MUX0
);

292 
ADCSRA
 = (0x7 << 
ADPS0
);

293 
	}
}

295 
uöt16_t
 
	$b©ãry_gë_vﬁège
()

307 
ADCSRA
 |(1 << 
ADEN
);

309 
ADCSRA
 |(1 << 
ADSC
);

311 
ADCSRA
 & (1 << 
ADSC
));

313  
uöt32_t
 
vﬁège
 = (
ADCH
 << 8Ë| (
ADCL
 << 0);

314 #ifde‡
ATTINY88_DIP


315 
vﬁège
 = (voltage * 32227) / 10000;

317 
vﬁège
 = (voltage * 56961) / 10000;

319 
ADCSRA
 &~(1 << 
ADEN
);

321  (
uöt16_t
)
vﬁège
;

322 
	}
}

326 
	$blök_îr‹_£quí˚
(
uöt8_t
 
Àn
)

328 
	`ch¨ge_£t_Àd
(
Ál£
);

329 
	`_dñay_ms
(
BLINK_ERROR_DELAY
 * 2);

331 ; 
Àn
 > 0;Üen--) {

332 
	`ch¨ge_£t_Àd
(
åue
);

333 
	`_dñay_ms
(
BLINK_ERROR_DELAY
);

334 
	`ch¨ge_£t_Àd
(
Ál£
);

335 
	`_dñay_ms
(
BLINK_ERROR_DELAY
);

340 
	}
}

342 
	spowî_∑øms
 {

343 
powî_subsy°em_t
 
	msubsys
;

344 
boﬁ
 
	míabÀ
;

345 
uöt8_t
 
	mªåy
;

347 } 
	tpowî_∑øms_t
;

349 
boﬁ
 
	$_powî_up_Âga
(
powî_∑øms_t
* 
∑øms
)

351 i‡(
∑øms
->
subsys
 !
PS_FPGA
)

352  
Ál£
;

354 i‡(
∑øms
->
íabÀ
 =
Ál£
)

359 i‡(
∑øms
->
ªåy
 == 0)

361 
	`io_˛ór_pö
(
PS_SRST
);

362 #ifde‡
PS_POR_AVAILABLE


363 
	`io_˛ór_pö
(
PS_POR
);

365 
	`çs54478_£t_powî
(
Ál£
);

369  
åue
;

374 i‡(
∑øms
->
ªåy
 == 0)

375 
	`çs54478_£t_powî
(
åue
);

377  
	`çs54478_is_powî_good
();

378 
	}
}

380 
boﬁ
 
	$_powî_up_ªg
(
powî_∑øms_t
* 
∑øms
)

382 i‡((
∑øms
->
subsys
 > 
PS_TX
Ë|| (∑øms->subsy†< 
PS_VDRAM
))

383  
Ál£
;

385 
ªg_c⁄fig
* 
cfg
 = 
deÁu…_ªg_c⁄fig
 + 
∑øms
->
subsys
;

387 i‡(
∑øms
->
íabÀ
 =
Ál£
)

388  
	`…c3675_íabÀ_ªg
(
cfg
->
addªss
, 
Ál£
);

390 i‡(
cfg
->
vﬁège
 > 0)

392 i‡(
	`…c3675_£t_vﬁège
(
cfg
->
addªss
, cfg->
vﬁège
Ë=
Ál£
)

393  
Ál£
;

396  
	`…c3675_íabÀ_ªg
(
cfg
->
addªss
, 
åue
);

397 
	}
}

399 
boﬁ
 
	$_powî_íabÀ_subsys
(
powî_∑øms_t
* 
∑øms
)

401 
∑øms
->
subsys
)

403 
PS_FPGA
:

404  
	`_powî_up_Âga
(
∑øms
);

408  
	`_powî_up_ªg
(
∑øms
);

411  
Ál£
;

412 
	}
}

414 
boﬁ
 
	$powî_íabÀ
(
powî_subsy°em_t
 
subsys
, 
boﬁ
 
⁄
)

416 
powî_∑øms_t
 
∑øms
;

417 
	`ZERO_MEMORY
(
∑øms
);

418 
∑øms
.
subsys
 = subsys;

419 
∑øms
.
íabÀ
 = 
⁄
;

421  
	`_powî_íabÀ_subsys
(&
∑øms
);

422 
	}
}

424 
	$boﬁ
 (*
	tboŸ_fun˘i⁄_t
)(
	tpowî_∑øms_t
*);

426 
	sboŸ_°ï
 {

427 
powî_subsy°em_t
 
subsys
;

433 } 
boŸ_°ïs
[] = {

434 { 
PS_FPGA
, },

435 { 
PS_VDRAM
, },

436 { 
PS_PERIPHERALS_1_8
, },

437 { 
PS_PERIPHERALS_3_3
, },

438 { 
PS_TX
, }

439 
	}
};

451 
boﬁ
 
	$powî_öô
()

453 
	`io_ouçut_pö
(
CHARGE
);

454 #ifde‡
LED_POLARITY


455 
	`io_ouçut_pö
(
POWER_LED
);

458 
	`ch¨ge_£t_Àd
(
åue
);

460 
	`b©ãry_öô
();

462 
	`çs54478_öô
(
åue
);

463 #i‚de‡
I2C_REWORK


464 
	`i2c_öô
(
PWR_SDA
, 
PWR_SCL
);

466 
	`io_ouçut_pö
(
USBHUB_RESET
);

468 #ifde‡
CHARGER_TI


469 i‡(
	`bq24190_öô
(
åue
Ë=
Ál£
)

470  
Ál£
;

472 i‡(
	`…c4155_öô
–
åue
 ) =
Ál£
)

473  
Ál£
;

475 #ifde‡
CHARGER_TI


476 
	`_dñay_ms
(1000);

478 
	`_dñay_ms
(25);

480 
uöt16_t
 
b©t_vﬁège
 = 
	`b©ãry_gë_vﬁège
();

481 
	`debug_log_ex
("Vb ", 
Ál£
);

482 
	`debug_log_byã
((
uöt8_t
)(
b©t_vﬁège
 / 100));

485 i‡(
b©t_vﬁège
 < 
BATT_MIN_VOLTAGE
)

487 
_°©e
.
b©ãry_nŸ_¥e£¡
 = 
åue
;

493 #ifde‡
CHARGER_TI


494 
	`bq24190_toggÀ_ch¨gî
(
åue
);

496 
	`…c4155_£t_ch¨ge_cuºít_limô
(50);

500 i‡(
	`…c3675_öô
(
…c3675_ªg_hñ≥r
Ë=
Ál£
)

501  
Ál£
;

502 #ifde‡
PS_POR_AVAILABLE


503 
	`io_ouçut_pö
(
PS_POR
);

505 
	`io_ouçut_pö
(
PS_SRST
);

507 #ifde‡
PS_POR_AVAILABLE


508 
	`io_˛ór_pö
(
PS_POR
);

510 
	`io_˛ór_pö
(
PS_SRST
);

520 
	`io_öput_pö
(
AVR_RESET
);

523 
	`io_öput_pö
(
AVR_IRQ
);

528 
EICRA
 = 
	`_BV
(
ISC01
Ë| _BV(
ISC00
Ë| _BV(
ISC10
) ;

530 
EIMSK
 = 
	`_BV
(
INT1
Ë| _BV(
INT0
);

532 
PCMSK0
 = 
	`_BV
(
PCINT1
Ë| _BV(
PCINT0
);

533 
PCMSK2
 = 
	`_BV
(
PCINT16
) ;

534 
PCICR
 = 
	`_BV
(
PCIE2
Ë| _BV(
PCIE0
);

545 
TCCR1B
 = 
	`_BV
(
WGM12
);

546 
OCR1A
 = 15624 * 2;

547 
TIMSK1
 = 
	`_BV
(
OCIE1A
);

549 
	`ch¨ge_£t_Àd
(
Ál£
);

551  
åue
;

552 
	}
}

554 
boﬁ
 
	$powî_⁄
()

556 
	`pmc_mask_úqs
(
åue
);

560 
boﬁ
 
œ°_powî_Àd_°©e
 = 
Ál£
;

565 
	`powî_£t_Àd
(
œ°_powî_Àd_°©e
);

567 
uöt8_t
 
°ï_cou¡
, 
ªåy
;

568 
°ï_cou¡
 = 0; sãp_cou¡ < 
	`ARRAY_SIZE
(
boŸ_°ïs
); step_count++)

570 
œ°_powî_Àd_°©e
 = !last_power_led_state;

571 
	`powî_£t_Àd
(
œ°_powî_Àd_°©e
);

577 
boŸ_°ï
* 
°ï
 = 
boŸ_°ïs
 + 
°ï_cou¡
;

578 i‡–(
°ï
->
subsys
 =
PS_UNKNOWN
))

581 
	`debug_log_ex
("PWR ", 
Ál£
);

582 
	`debug_log_byã_ex
(
°ï
->
subsys
, 
åue
);

584 
powî_∑øms_t
 
∑øms
;

586 
ªåy
 = 0;Ñëry < 
POWER_DEFAULT_RETRIES
;Ñetry++)

588 
	`ZERO_MEMORY
(
∑øms
);

589 
∑øms
.
subsys
 = 
°ï
->subsys;

590 
∑øms
.
íabÀ
 = 
åue
;

591 
∑øms
.
ªåy
 =Ñetry;

594  (
	`_powî_íabÀ_subsys
(&
∑øms
))))

597 
deÁu…_ªg_c⁄fig
[
°ï
->
subsys
].
powîed
 = 
åue
;

599 
	`debug_log
("+");

608 
	`debug_log
("?");

610 i‡((
ªåy
 < 
POWER_DEFAULT_RETRIES
) )

611 
	`_dñay_ms
–
POWER_DEFAULT_DELAY
);

616 i‡(
ªåy
 = 
POWER_DEFAULT_RETRIES
)

620 i‡(
°ï_cou¡
 !
	`ARRAY_SIZE
(
boŸ_°ïs
))

622 
	`debug_log
("x");

629 
	`pmc_£t_blök_îr‹
(
°ï_cou¡
 + 
BlökEº‹_FPGA_Powî
);

631 
	`pmc_mask_úqs
(
Ál£
);

633  
Ál£
;

640 
	`usbhub_ª£t
();

648 
	`Âga_ª£t
(
Ál£
);

657 
_°©e
.
powîed
 = 
åue
;

660 
	`pmc_mask_úqs
(
Ál£
);

662 
	`powî_£t_Àd
(
åue
);

664 i‡(
_°©e
.
b©ãry_ch¨gög
)

666 
	`_dñay_ms
(500*2);

667 
	`ch¨ge_£t_Àd
(
åue
);

670  
åue
;

671 
	}
}

673 
uöt8_t
 
	$powî_off
()

675 
	`pmc_mask_úqs
(
åue
);

677 
	`io_˛ór_pö
(
PS_SRST
);

679 
boﬁ
 
œ°_powî_Àd_°©e
 = 
åue
;

688 
öt8_t
 
°ï_cou¡
, 
ªåy
;

689 
°ï_cou¡
 = 
	`ARRAY_SIZE
(
boŸ_°ïs
) - 1; step_count >= 0; step_count--)

691 
œ°_powî_Àd_°©e
 = !last_power_led_state;

692 
	`powî_£t_Àd
(
œ°_powî_Àd_°©e
);

696 
boŸ_°ï
* 
°ï
 = 
boŸ_°ïs
 + 
°ï_cou¡
;

697 i‡–(
°ï
->
subsys
 =
PS_UNKNOWN
))

700 
powî_∑øms_t
 
∑øms
;

702 
ªåy
 = 0;Ñëry < 
POWER_DEFAULT_RETRIES
;Ñetry++)

704 
	`ZERO_MEMORY
(
∑øms
);

705 
∑øms
.
subsys
 = 
°ï
->subsys;

706 
∑øms
.
íabÀ
 = 
Ál£
;

707 
∑øms
.
ªåy
 =Ñetry;

710  (
	`_powî_íabÀ_subsys
(&
∑øms
))))

713 
deÁu…_ªg_c⁄fig
[
°ï
->
subsys
].
powîed
 = 
Ál£
;

717 i‡((
ªåy
 < 
POWER_DEFAULT_RETRIES
) )

718 
	`_dñay_ms
–
POWER_DEFAULT_DELAY
);

723 i‡(
ªåy
 = 
POWER_DEFAULT_RETRIES
)

727 i‡(
°ï_cou¡
 != -1)

734 i‡(
	`pmc_gë_blök_îr‹
(Ë=
BlökEº‹_N⁄e
)

735 
	`pmc_£t_blök_îr‹
(
°ï_cou¡
 + 
BlökEº‹_FPGA_Powî
);

737 
	`pmc_mask_úqs
(
Ál£
);

739  (
°ï_cou¡
 + 1);

747 
_°©e
.
powîed
 = 
Ál£
;

749 
	`pmc_mask_úqs
(
Ál£
);

751 
	`powî_£t_Àd_ex
(
Ál£
, false);

752 
	`_dñay_ms
(500*2);

754 
	`powî_£t_Àd
(
Ál£
);

757 
	}
}

761 #ifde‡
DEBUG


763 #ifde‡
ATTINY88_DIP


764 
io_pö_t
 
	gDEBUG_1
 = 
IO_PB
(6);

765 
io_pö_t
 
	gDEBUG_2
 = 
IO_PB
(7);

770 
	$ISR
(
INT0_ve˘
)

773 
	`pmc_mask_úqs
(
åue
);

776 
	`debug_log
("\nINT0\n");

777 
_°©e
.
wake_up
 = 
åue
;

780 
	`pmc_mask_úqs
(
Ál£
);

781 
	}
}

783 
	$ISR
(
INT1_ve˘
)

786 
	`pmc_mask_úqs
(
åue
);

788 i‡(
	`…c3675_is_powî_buâ⁄_dïªs£d
())

790 
	`debug_log
("PWRBTN+");

792 
TCNT1
 = 0;

793 i‡((
TCCR1B
 & 0x07) == 0x00)

795 
_°©e
.
a˘ive_timîs
++;

796 
	`debug_log
("TIMER1+");

798 
TCCR1B
 |= 0x3;

806 
	`debug_log
("PWRBTN-");

811 i‡((
TCCR1B
 & 0x07) != 0x00)

813 
_°©e
.
a˘ive_timîs
--;

814 
	`debug_log
("TIMER1-");

816 
TCCR1B
 &= ~0x7;

824 
	`pmc_mask_úqs
(
Ál£
);

825 
	}
}

827 
	$ISR
(
TIMER1_COMPA_ve˘
)

830 
	`pmc_mask_úqs
(
åue
);

832 
	`debug_log
("TIMER1");

835 
TCCR1B
 &= ~0x7;

837 
_°©e
.
a˘ive_timîs
--;

839 i‡(
_°©e
.
powîed
)

841 
	`debug_log
("PWROFF");

843 
_°©e
.
powî_off
 = 
åue
;

851 
	`pmc_mask_úqs
(
Ál£
);

854 
	}
}

856 
	$ISR
(
PCINT0_ve˘
)

859 
	`pmc_mask_úqs
(
åue
);

870 i‡––
	`çs54478_is_powî_good
(Ë=
Ál£
))

872 
_°©e
.
c‹e_powî_bad
 = 
åue
;

874 #ifde‡
CHARGER_TI


875 i‡(
	`bq24190_has_öãºu±
())

877 
_°©e
.
bq24190_úq
 = 
åue
;

880 i‡(
	`…c4155_has_öãºu±
())

882 
_°©e
.
…c4155_úq
 = 
åue
;

886 
	`pmc_mask_úqs
(
Ál£
);

887 
	}
}

889 
	$ISR
(
PCINT2_ve˘
)

892 
	`pmc_mask_úqs
(
åue
);

901 i‡(
	`…c3675_has_öãºu±
())

904 
_°©e
.
…c3675_úq
 = 
åue
;

908 
	`pmc_mask_úqs
(
Ál£
);

909 
	}
}

	@firmware/e300/rev_b/power.h

1 #i‚de‡
POWER_H


2 
	#POWER_H


	)

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

7 
çs54478_öô
(
boﬁ
 
íabÀ
);

8 
çs54478_£t_powî
(
boﬁ
 
⁄
);

9 
boﬁ
 
çs54478_is_powî_good
();

11 
ch¨ge_£t_Àd
(
boﬁ
 
⁄
);

12 
ch¨ge_nŸify
(
boﬁ
 
ch¨gög
);

14 
powî_sig«l_öãºu±
();

16 
Âga_ª£t
(
boﬁ
 
dñay
);

18 
	epowî_subsy°ems
 {

19 
	mPS_UNKNOWN
,

20 
	mPS_FPGA
,

21 
	mPS_VDRAM
,

22 
	mPS_PERIPHERALS_1_8
,

23 
	mPS_PERIPHERALS_3_3
,

24 
	mPS_TX
,

25 
	mPS_MAX


26 } 
	tpowî_subsy°em_t
;

28 
	eReguœt‹s


30 
	mREG_UNKNOWN
,

31 
	mREG_TPS54478
,

32 
	mREG_LTC3675


35 
boﬁ
 
powî_íabÀ
(
powî_subsy°em_t
 
subsys
, boﬁ 
⁄
);

37 
b©ãry_öô
();

38 
uöt16_t
 
b©ãry_gë_vﬁège
();

40 
boﬁ
 
powî_öô
();

41 
boﬁ
 
powî_⁄
();

42 
uöt8_t
 
powî_off
();

45 
boﬁ
 
powî_is_subsys_⁄
(
powî_subsy°em_t
 
ödex
);

49 
usbhub_ª£t
();

51 #i‚de‡
I2C_REWORK


52 
	~"io.h
"

54 
io_pö_t
 
PWR_SDA
;

55 
io_pö_t
 
PWR_SCL
;

	@firmware/e300/rev_c/bq24190.c

7 #ifde‡
CHARGER_TI


9 
	~"c⁄fig.h
"

10 
	~"bq24190.h
"

12 
	~<utû/dñay.h
>

14 
	~"io.h
"

15 
	~"i2c.h
"

16 
	~"debug.h
"

17 
	~"globÆ.h
"

18 
	~"îr‹.h
"

20 #i‚de‡
I2C_REWORK


21 
	~"powî.h
"

24 
io_pö_t
 
	gUSBPM_IRQ
 = 
IO_PB
(1);

26 #ifde‡
ATTINY88_DIP


28 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(2);

29 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(3);

33 #ifde‡
I2C_REWORK


35 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(4);

36 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(5);

40 
	#CHRG_SDA
 
PWR_SDA


	)

41 
	#CHRG_SCL
 
PWR_SCL


	)

47 c⁄° 
boﬁ
 
	g_bq24190_puŒ_up
 = 
Ál£
;

49 
	#BQ24190_BASE_ADDRESS
 (0x6B << 1)

	)

50 
	#BQ24190_WRITE_ADDRESS
 (
BQ24190_BASE_ADDRESS
 + 0)

	)

51 
	#BQ24190_READ_ADDRESS
 (
BQ24190_BASE_ADDRESS
 + 1)

	)

53 
	eBQ24190Regi°îs


55 
	mBQ24190_REG_INPUT_SOURCE_CTL
= 0,

56 
	mBQ24190_REG_PWR_ON_CONFIG
 = 1,

57 
	mBQ24190_REG_CHARGE_CURRENT
 = 2,

58 
	mBQ24190_REG_PRE_TERM_CURRENT
= 3,

59 
	mBQ24190_REG_CHARGE_VOLTAGE
 = 4,

60 
	mBQ24190_REG_TIMER_CONTROL
 = 5,

61 
	mBQ24190_REG_SYSTEM_STATUS
 = 8,

62 
	mBQ24190_REG_FAULT
 = 9

70 
	eBQ24190Shi·s


72 
	mBQ24190_SHIFTS_CHARGER_CONFIG
 = 4,

73 
	mBQ24190_SHIFTS_I2C_WATCHDOG
 = 4,

74 
	mBQ24190_SHIFTS_CHARGER_STATUS
 = 4,

75 
	mBQ24190_SHIFTS_CHARGER_FAULT
 = 4,

78 
	eBQ24190VBusSètus


80 
	mBQ24190_VBUS_UNKNOWN
,

81 
	mBQ24190_VBUS_USB
,

82 
	mBQ24190_VBUS_ADAPTER
,

83 
	mBQ24190_VBUS_OTG


86 
	eBQ24190Ch¨gîSètus


88 
	mBQ24190_CHRG_STAT_NOT_CHARGING
,

89 
	mBQ24190_CHRG_STAT_PRE_CHARGE
,

90 
	mBQ24190_CHRG_STAT_FAST_CHARGING
,

91 
	mBQ24190_CHRG_STAT_CHARGE_TERMINATION_DONE
,

92 
	mBQ24190_CHRG_STAT_MASK
 = 
BQ24190_CHRG_STAT_CHARGE_TERMINATION_DONE


95 
	eBQ24190Sy°emSètus


97 
	mBQ24190_STATUS_DPM
 = 0x08,

98 
	mBQ24190_STATUS_POWER_GOOD
 = 0x04,

99 
	mBQ24190_STATUS_THERMAL_REGULATION
 = 0x02,

100 
	mBQ24190_STATUS_VSYSMIN_REGULATION
 = 0x01

103 
	eBQ24190Fau…s


105 
	mBQ24190_FAULT_WATCHDOG_EXPIRED
 = 0x80,

106 
	mBQ24190_FAULT_VBUS_OVERLOADED
 = 0x40,

107 
	mBQ24190_FAULT_BATOVP
 = 0x08

110 
	eBQ24190Ch¨gîFau…s


112 
	mBQ24190_CHRGFAULT_NORMAL
,

113 
	mBQ24190_CHRGFAULT_INPUT
,

114 
	mBQ24190_CHRGFAULT_THERMAL
,

115 
	mBQ24190_CHRGFAULT_SAFETY_TIMER


118 
	eBQ24190NTCFau…s


120 
	mBQ24190_NTCFAULT_NORMAL
,

121 
	mBQ24190_NTCFAULT_TS1_COLD
,

122 
	mBQ24190_NTCFAULT_TS1_HOT
,

123 
	mBQ24190_NTCFAULT_TS2_COLD
,

124 
	mBQ24190_NTCFAULT_TS2_HOT
,

125 
	mBQ24190_NTCFAULT_BOTH_COLD
,

126 
	mBQ24190_NTCFAULT_BOTH_HOT


129 
boﬁ
 
	$bq24190_toggÀ_ch¨gî
(
boﬁ
 
⁄
)

131 
uöt8_t
 
c⁄fig
 = 0;

132 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_PWR_ON_CONFIG
, &
c⁄fig
, 
_bq24190_puŒ_up
Ë=
Ál£
)

133  
Ál£
;

135 
	`debug_log_ex
("BQPC ", 
Ál£
);

136 
	`debug_log_hex
(
c⁄fig
);

138 
c⁄fig
 &~(0x3 << 
BQ24190_SHIFTS_CHARGER_CONFIG
);

139 i‡(
⁄
)

140 
c⁄fig
 |(0x01 << 
BQ24190_SHIFTS_CHARGER_CONFIG
);

142 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_WRITE_ADDRESS
, 
BQ24190_REG_PWR_ON_CONFIG
, 
c⁄fig
, 
_bq24190_puŒ_up
Ë=
Ál£
)

143  
Ál£
;

155  
åue
;

156 
	}
}

158 
boﬁ
 
	$bq24190_öô
(
boﬁ
 
dißbÀ_ch¨gî
)

160 #ifde‡
I2C_REWORK


161 
	`i2c_öô_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
_bq24190_puŒ_up
);

163 
	`io_öput_pö
(
USBPM_IRQ
);

164 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

167 i‡(
dißbÀ_ch¨gî
)

169 i‡(
	`bq24190_toggÀ_ch¨gî
(
Ál£
) == false)

170  
Ál£
;

175 
uöt8_t
 
timî_c⁄åﬁ
 = 0;

176 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_TIMER_CONTROL
, &
timî_c⁄åﬁ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

177  
Ál£
;

179 
	`debug_log_ex
("BQTC ", 
Ál£
);

180 
	`debug_log_hex
(
timî_c⁄åﬁ
);

182 
timî_c⁄åﬁ
 &~(0x3 << 
BQ24190_SHIFTS_I2C_WATCHDOG
);

183 
timî_c⁄åﬁ
 |(0x00 << 
BQ24190_SHIFTS_I2C_WATCHDOG
);

185 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_WRITE_ADDRESS
, 
BQ24190_REG_TIMER_CONTROL
, 
timî_c⁄åﬁ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

186  
Ál£
;

205 
uöt8_t
 
öput_§c_˘l
 = 0;

206 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_INPUT_SOURCE_CTL
, &
öput_§c_˘l
, 
_bq24190_puŒ_up
Ë=
Ál£
)

207  
Ál£
;

209 
	`debug_log_ex
("BQIS ", 
Ál£
);

210 
	`debug_log_hex
(
öput_§c_˘l
);

215 
öput_§c_˘l
 |= (0x07);

217 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_WRITE_ADDRESS
, 
BQ24190_REG_INPUT_SOURCE_CTL
, 
öput_§c_˘l
, 
_bq24190_puŒ_up
Ë=
Ál£
)

218  
Ál£
;

220  
åue
;

221 
	}
}

223 
boﬁ
 
	$bq24190_has_öãºu±
()

229  (
	`io_ã°_pö
(
USBPM_IRQ
Ë=
Ál£
);

230 
	}
}

232 
uöt8_t
 
	g_bq24190_œ°_°©us
, 
	g_bq24190_œ°_Áu…
;

234 
boﬁ
 
	$_bq24190_h™dÀ_úq
()

236 
uöt8_t
 
vÆ
 = 0x00;

237 
boﬁ
 
ªsu…
 = 
Ál£
;

239 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_SYSTEM_STATUS
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

240 
_bq24190_h™dÀ_Áû
;

242 
	`debug_log_ex
("BQST ", 
Ál£
);

243 
	`debug_log_hex
(
vÆ
);

245 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_SYSTEM_STATUS
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

246 
_bq24190_h™dÀ_Áû
;

248 
_bq24190_œ°_°©us
 = 
vÆ
;

250 
	`debug_log_ex
("BQST ", 
Ál£
);

251 
	`debug_log_hex
(
vÆ
);

268 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_FAULT
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

269 
_bq24190_h™dÀ_Áû
;

271 
	`debug_log_ex
("BQF ", 
Ál£
);

272 
	`debug_log_hex
(
vÆ
);

274 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
BQ24190_READ_ADDRESS
, 
BQ24190_REG_FAULT
, &
vÆ
, 
_bq24190_puŒ_up
Ë=
Ál£
)

275 
_bq24190_h™dÀ_Áû
;

277 
_bq24190_œ°_Áu…
 = 
vÆ
;

279 
	`debug_log_ex
("BQF ", 
Ál£
);

280 
	`debug_log_hex
(
vÆ
);

282 
vÆ
 = (
_bq24190_œ°_°©us
 >> 
BQ24190_SHIFTS_CHARGER_STATUS
Ë& 
BQ24190_CHRG_STAT_MASK
;

284 i‡(
_°©e
.
blök_îr‹
 =
BlökEº‹_N⁄e
)

286 
vÆ
)

288 
BQ24190_CHRG_STAT_PRE_CHARGE
:

289 
BQ24190_CHRG_STAT_FAST_CHARGING
:

292 i‡((
_°©e
.
b©ãry_nŸ_¥e£¡
 =
Ál£
)

296 
	`ch¨ge_nŸify
(
åue
);

303 
	`ch¨ge_nŸify
(
Ál£
);

309 
ªsu…
 = 
åue
;

310 
_bq24190_h™dÀ_Áû
:

311  
ªsu…
;

312 
	}
}

314 
boﬁ
 
	$bq24190_h™dÀ_úq
()

316 
	`pmc_mask_úqs
(
åue
);

320 
boﬁ
 
ªsu…
 = 
	`_bq24190_h™dÀ_úq
();

322 
	`pmc_mask_úqs
(
Ál£
);

324  
ªsu…
;

325 
	}
}

	@firmware/e300/rev_c/bq24190.h

8 #i‚de‡
BQ24190_H_


9 
	#BQ24190_H_


	)

11 
	~<°dboﬁ.h
>

12 
	~<°döt.h
>

14 #ifde‡
CHARGER_TI


16 
boﬁ
 
bq24190_öô
(boﬁ 
dißbÀ_ch¨gî
);

17 
boﬁ
 
bq24190_has_öãºu±
();

18 
boﬁ
 
bq24190_h™dÀ_úq
();

21 
boﬁ
 
bq24190_toggÀ_ch¨gî
(boﬁ 
⁄
);

	@firmware/e300/rev_c/config.h

1 
	#__DELAY_BACKWARD_COMPATIBLE__


2 
	#F_CPU
 1000000UL

	@firmware/e300/rev_c/debug.c

5 
	~"c⁄fig.h
"

6 
	~"debug.h
"

8 
	~<utû/dñay.h
>

9 
	~<avr/io.h
>

10 
	~<avr/öãºu±.h
>

12 
	~"io.h
"

13 
	~"powî.h
"

14 
	~"globÆ.h
"

16 
	#DEBUG_BLINK_DELAY
 250

17 

	)

18 #ifde‡
ATTINY88_DIP


20 
	#SERIAL_DEBUG_INDEX
 6

	)

21 
	#SERIAL_DEBUG_PORT
 
PORTD


	)

22 
io_pö_t
 
	gSERIAL_DEBUG
 = 
IO_PD
(
SERIAL_DEBUG_INDEX
);

38 
	#SERIAL_DEBUG_INDEX
 4

	)

39 
	#SERIAL_DEBUG_PORT
 
PORTB


	)

40 
io_pö_t
 
	gSERIAL_DEBUG
 = 
IO_PB
(
SERIAL_DEBUG_INDEX
);

50 #ifde‡
DEBUG


52 #ifde‡
ATTINY88_DIP


53 
io_pö_t
 
	gDEBUG_1
 = 
IO_PB
(6);

54 
io_pö_t
 
	gDEBUG_2
 = 
IO_PB
(7);

57 
	$debug_öô
()

59 
	`io_ouçut_pö
(
DEBUG_1
);

60 
	`io_ouçut_pö
(
DEBUG_2
);

62 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

63 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

64 #ifde‡
ENABLE_SERIAL


65 
	`io_£t_pö
(
SERIAL_DEBUG
);

66 
	`io_ouçut_pö
(
SERIAL_DEBUG
);

68 
	}
}

72 
	$debug_öô
()

74 #ifde‡
ENABLE_SERIAL


75 
	`io_£t_pö
(
SERIAL_DEBUG
);

76 
	`io_ouçut_pö
(
SERIAL_DEBUG
);

78 
	}
}

82 #i‡
deföed
(
DEBUG
Ë&& !deföed(
DEBUG_VOID
)

84 
	$debug_£t
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
)

86 
	`io_íabÀ_pö
(
pö
, !
íabÀ
);

87 
	}
}

89 
	$debug_blök
(
uöt8_t
 
cou¡
)

91 
	`io_íabÀ_pö
(
DEBUG_1
, 
Ál£
);

92 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

93 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

95 ; 
cou¡
 > 0; count--) {

96 
	`io_íabÀ_pö
(
DEBUG_2
, 
Ál£
);

97 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

98 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

99 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

102 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

103 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

104 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

105 
	}
}

107 
	$debug_blök_ªv
(
uöt8_t
 
cou¡
)

109 
	`io_íabÀ_pö
(
DEBUG_2
, 
Ál£
);

110 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

111 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

113 ; 
cou¡
 > 0; count--) {

114 
	`io_íabÀ_pö
(
DEBUG_1
, 
Ál£
);

115 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

116 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

117 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

120 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

121 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

122 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

123 
	}
}

125 
	$debug_blök2
(
uöt8_t
 
cou¡
)

127 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

128 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

129 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

131 
boﬁ
 
b
 = 
Ál£
;

132 ; 
cou¡
 > 0; count--) {

133 
	`io_íabÀ_pö
(
DEBUG_1
, 
b
);

134 
	`io_íabÀ_pö
(
DEBUG_2
, 
b
);

135 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

136 
b
 = !b;

139 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

140 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

141 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

142 
	}
}

144 
	$debug_waô
()

146 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

147 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

149 
boﬁ
 
b
 = 
Ál£
;

150 
åue
)

152 
	`io_íabÀ_pö
(
DEBUG_1
, 
b
);

153 
	`io_íabÀ_pö
(
DEBUG_2
, !
b
);

155 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

157 
b
 = !b;

160 
	`io_íabÀ_pö
(
DEBUG_1
, 
åue
);

161 
	`io_íabÀ_pö
(
DEBUG_2
, 
åue
);

162 
	}
}

166 #i‚de‡
DEBUG_VOID


168 
	$debug_blök_ªv
(
uöt8_t
 
cou¡
)

170 
	`ch¨ge_£t_Àd
(
åue
);

171 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 4);

173 ; 
cou¡
 > 0; count--) {

174 
	`ch¨ge_£t_Àd
(
Ál£
);

175 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
);

176 
	`ch¨ge_£t_Àd
(
åue
);

177 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

180 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 2);

181 
	`ch¨ge_£t_Àd
(
Ál£
);

182 
	`_dñay_ms
(
DEBUG_BLINK_DELAY
 * 4);

183 
	}
}

188 #ifde‡
ENABLE_SERIAL


190 
	$_£rül_tx
(
uöt8_t
* 
buf„r
)

198 c⁄° 
uöt16_t
 
dñay
 = 650+20;

199 
uöt16_t
 
cou¡down
;

201 
uöt8_t
 
j
 = 0; j < 10; ++j)

203 i‡(
buf„r
[
j
])

204 
SERIAL_DEBUG_PORT
 |
	`_BV
(
SERIAL_DEBUG_INDEX
);

206 
SERIAL_DEBUG_PORT
 &~
	`_BV
(
SERIAL_DEBUG_INDEX
);

208 
cou¡down
 = 
dñay
;

209 --
cou¡down
)

210 
	`__asm
("nop");

212 
	}
}

214 
	$_£rül_tx_ch¨
(
c
)

216 
uöt8_t
 
buf„r
[10];

217 
uöt8_t
 
i
 = 0;

219 
buf„r
[
i
++] = 0;

220 
idx
 = 0; idx < 8; ++idx)

221 
buf„r
[
i
++] = (((
uöt8_t
)(
c
Ë& ((uöt8_t)1<<((
idx
)))) ? 0x01 : 0x00);

222 
buf„r
[
i
++] = 1;

224 
	`_£rül_tx
(
buf„r
);

225 
	}
}

227 
	$debug_log_ex_P
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
)

229 
c
 = 
	`pgm_ªad_byã
(
mesßge
);

230 i‡(
c
 == '\0')

233 
	`pmc_mask_úqs
(
åue
);

237 
	`_£rül_tx_ch¨
(
c
);

238 
c
 = 
	`pgm_ªad_byã
(++
mesßge
);

239 } 
c
 != '\0');

241 i‡(
√w_löe
)

242 
	`_£rül_tx_ch¨
('\n');

244 
	`io_£t_pö
(
SERIAL_DEBUG
);

246 
	`pmc_mask_úqs
(
Ál£
);

247 
	}
}

249 
	$_debug_log_ex
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
)

251 i‡(
mesßge
[0] == '\0')

254 
	`pmc_mask_úqs
(
åue
);

258 
	`_£rül_tx_ch¨
(*
mesßge
);

259 } *(++
mesßge
) != '\0');

261 i‡(
√w_löe
)

262 
	`_£rül_tx_ch¨
('\n');

264 
	`io_£t_pö
(
SERIAL_DEBUG
);

266 
	`pmc_mask_úqs
(
Ál£
);

267 
	}
}

269 
	$debug_log_byã_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
)

271 
ch
[4];

272 
ch
[0] = '0' + (
n
 / 100);

273 
ch
[1] = '0' + ((
n
 % 100) / 10);

274 
ch
[2] = '0' + (
n
 % 10);

275 
ch
[3] = '\0';

276 
	`_debug_log_ex
(
ch
, 
√w_löe
);

277 
	}
}

279 
	$debug_log_hex_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
)

281 
ch
[4];

282 
ch
[0] = 'x';

283 
uöt8_t
 
_n
 = 
n
 >> 4;

284 i‡(
_n
 < 10)

285 
ch
[1] = '0' + 
_n
;

287 
ch
[1] = 'A' + (
_n
 - 10);

288 
n
 &= 0x0F;

289 i‡(
n
 < 10)

290 
ch
[2] = '0' + 
n
;

292 
ch
[2] = 'A' + (
n
 - 10);

293 
ch
[3] = '\0';

294 
	`_debug_log_ex
(
ch
, 
√w_löe
);

295 
	}
}

	@firmware/e300/rev_c/debug.h

5 #i‚de‡
DEBUG_H_


6 
	#DEBUG_H_


	)

8 
	~<°döt.h
>

9 
	~<°dboﬁ.h
>

10 
	~<avr/pgm•a˚.h
>

12 
	~"io.h
"

14 #ifde‡
DEBUG


15 
	#DEBUG_INLINE


	)

16 
	#DEBUG_NOOP
 ;

	)

17 
	#LED_ON
 
Ál£


	)

18 
	#LED_OFF
 
åue


	)

20 
	#DEBUG_INLINE
 
ölöe


	)

21 
	#DEBUG_NOOP
 {}

	)

22 
	#LED_ON
 
åue


	)

23 
	#LED_OFF
 
Ál£


	)

27 
	#DEBUG_SAFETY


	)

29 #ifde‡
DEBUG_VOID


32 
	#debug_£t
 ()

	)

33 
	#debug_blök
 ()

	)

34 
	#debug_blök_ªv
 ()

	)

35 
	#debug_blök2
 ()

	)

36 
	#debug_waô
 ()

	)

41 
DEBUG_INLINE
 
	$debug_£t
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
Ë
DEBUG_NOOP


42 
DEBUG_INLINE
 
	$debug_blök
(
uöt8_t
 
cou¡
Ë
DEBUG_NOOP


44 
	`debug_blök_ªv
(
uöt8_t
 
cou¡
);

45 
DEBUG_INLINE
 
	$debug_blök2
(
uöt8_t
 
cou¡
Ë
DEBUG_NOOP


46 
DEBUG_INLINE
 
	$debug_waô
(Ë
DEBUG_NOOP


50 #i‡
	`deföed
(
DEBUG
Ë&& !deföed(
ENABLE_SERIAL
)

51 
	#ENABLE_SERIAL


	)

54  
	`debug_öô
() ;

56 #ifde‡
ENABLE_SERIAL


58 
	`debug_log_ex_P
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
);

59 
	`debug_log_hex_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
);

60 
	`debug_log_byã_ex
(
uöt8_t
 
n
, 
boﬁ
 
√w_löe
);

61 
	`_debug_log_ex
(c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
);

64 
ölöe
 
	`debug_log_P
(c⁄° * 
mesßge
);

65 
ölöe
 
	`debug_log_hex
(
uöt8_t
 
n
);

66 
ölöe
 
	`debug_log_byã
(
uöt8_t
 
n
);

67 
ölöe
 
	`_debug_log
(c⁄° * 
mesßge
);

69 
ölöe
 
	$debug_log_P
(c⁄° * 
mesßge
Ë{ 
	`debug_log_ex_P
(mesßge, 
åue
); 
	}
}

70 
ölöe
 
	$debug_log_hex
(
uöt8_t
 
n
Ë{ 
	`debug_log_hex_ex
“, 
åue
); 
	}
}

71 
ölöe
 
	$debug_log_byã
(
uöt8_t
 
n
Ë{ 
	`debug_log_byã_ex
“, 
åue
); 
	}
}

72 
ölöe
 
	$_debug_log
(c⁄° * 
mesßge
Ë{ 
	`_debug_log_ex
(mesßge, 
åue
); 
	}
}

76 
ölöe
 
	$debug_log_ex_P
 (c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
Ë{
	}
};

77 
ölöe
 
	$debug_log_hex_ex
 (
uöt8_t
 
n
, 
boﬁ
 
√w_löe
Ë{
	}
};

78 
ölöe
 
	$debug_log_byã_ex
 (
uöt8_t
 
n
, 
boﬁ
 
√w_löe
Ë{
	}
};

79 
ölöe
 
	$_debug_log_ex
 (c⁄° * 
mesßge
, 
boﬁ
 
√w_löe
Ë{
	}
};

81 
	#debug_log_P
 ()

	)

82 
	#debug_log_hex
 ()

	)

83 
	#debug_log_byã
 ()

	)

84 
	#_debug_log
 ()

	)

87 
	#debug_log
(
x
Ë
	`debug_log_P
(
	`PSTR
(x))

	)

88 
	#debug_log_ex
(
x
,
∆
Ë
	`debug_log_ex_P
(
	`PSTR
(x),Çl)

	)

	@firmware/e300/rev_c/error.h

8 #i‚de‡
ERROR_H_


9 
	#ERROR_H_


	)

11 
	eEº‹BlökCou¡


13 
	mBlökEº‹_N⁄e
,

15 
	mBlökEº‹_LowVﬁège
,

16 
	mBlökEº‹_LTC3675_UndîVﬁège
 = 
BlökEº‹_LowVﬁège
,

17 
	mBlökEº‹_LTC4155_UndîVﬁège
 = 
BlökEº‹_LowVﬁège
,

19 
	mBlökEº‹_FPGA_Powî
,

20 
	mBlökEº‹_DRAM_Powî
,

21 
	mBlökEº‹_1_8V_PîùhîÆs_Powî
,

22 
	mBlökEº‹_3_3V_PîùhîÆs_Powî
,

23 
	mBlökEº‹_TX_Powî
,

25 
	mBlökEº‹_LTC3675_OvîTem≥øtuª
,

27 
	mBlökEº‹_LTC4155_BadCñl


	@firmware/e300/rev_c/global.h

7 #i‚de‡
GLOBAL_H_


8 
	#GLOBAL_H_


	)

10 
	~<°dboﬁ.h
>

11 
	~<°döt.h
>

12 
	~<avr/pgm•a˚.h
>

14 
	sSèã


16 
boﬁ
 
	möãºu±s_íabÀd
;

17 
uöt8_t
 
	möãºu±_dïth
;

19 
uöt8_t
 
	ma˘ive_timîs
;

20 
boﬁ
 
	mpowîed
;

21 
boﬁ
 
	mb©ãry_nŸ_¥e£¡
;

22 
boﬁ
 
	mb©ãry_ch¨gög
;

23 
boﬁ
 
	mwake_up
;

24 
boﬁ
 
	mpowî_off
;

25 
boﬁ
 
	mc‹e_powî_bad
;

26 
boﬁ
 
	m…c3675_úq
;

27 #ifde‡
CHARGER_TI


28 
boﬁ
 
	mbq24190_úq
;

30 
boﬁ
 
	m…c4155_úq
;

33 
uöt8_t
 
	mblök_îr‹
;

34 
uöt8_t
 
	mblökî_°©e
;

35 
uöt8_t
 
	mblök_lo›s
;

36 
uöt8_t
 
	mblök_œ°_lo›
;

37 
boﬁ
 
	mblök_°›
;

38 } 
	tSTATE
;

41 vﬁ©ûê
STATE
 
_°©e
;

43 
pmc_£t_blök_îr‹
(
uöt8_t
 
cou¡
);

44 
uöt8_t
 
pmc_gë_blök_îr‹
();

46 
boﬁ
 
pmc_mask_úqs
(boﬁ 
mask
);

	@firmware/e300/rev_c/i2c.c

1 
	~"c⁄fig.h
"

2 
	~"i2c.h
"

4 
	~<utû/dñay.h
>

6 
	~"io.h
"

7 
	~"debug.h
"

15 vﬁ©ûê
boﬁ
 
	g_i2c_dißbÀ_ack_check
 = 
Ál£
;

19 
	#I2C_DEFAULT_RETRY_DELAY
 1

20 
	#I2C_DEFAULT_MAX_ACK_RETRIES
 10

21 

	)

22 
	#I2C_DEFAULT_BUS_WAIT
 10

23 
	#I2C_DEFAULT_MAX_BUS_RETRIES
 10

	)

25 
	#I2C_DEFAULT_SCL_LOW_PERIOD
 2

26 
	#I2C_DEFAULT_SCL_HIGH_PERIOD
 1

27 
	#I2C_DEFAULT_BUS_FREE_TIME
 2

28 
	#I2C_DEFAULT_STOP_TIME
 1

29 

	)

30 
	#I2C_DELAY
 
_dñay_us


31 

	)

32 
boﬁ
 
	$_i2c_°¨t_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

36 
uöt8_t
 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

37 (
	`io_ã°_pö
(
sda
Ë=
Ál£
Ë|| (io_ã°_pö(
s˛
) == false))

39 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

40 i‡(
ªåõs
-- == 0)

42 
	`debug_log
("I2C:S1");

43  
Ál£
;

49 
	`io_˛ór_pö
(
sda
);

50 
	`io_ouçut_pö
(
sda
);

53 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

55 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

56 
	`io_ã°_pö
(
s˛
Ë=
Ál£
)

58 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

59 i‡(
ªåõs
-- == 0)

61 
	`io_öput_pö
(
sda
);

62 
	`debug_log_ex
("I2C:S2", 
Ál£
);

63 
	`debug_log_hex
(
s˛
);

64  
Ál£
;

69 
	`io_˛ór_pö
(
s˛
);

70 
	`io_ouçut_pö
(
s˛
);

73 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
 / 2);

75  
åue
;

76 
	}
}

78 
boﬁ
 
	$_i2c_°›_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

88 
boﬁ
 
ªsu…
 = 
åue
;

92 
uöt8_t
 
ªåõs
 = 0;

93 
	`io_ã°_pö
(
sda
Ë=
Ál£
)

95 i‡(
ªåõs
 =
I2C_DEFAULT_MAX_ACK_RETRIES
)

97 
	`debug_log_ex
("I2C:STP ", 
Ál£
);

98 
	`debug_log_hex
(
sda
);

99 
	`debug_blök_ªv
(4);

102 
ªsu…
 = 
Ál£
;

106 ++
ªåõs
;

107 
	`I2C_DELAY
(
I2C_DEFAULT_RETRY_DELAY
);

112 
	`io_˛ór_pö
(
sda
);

115 
	`io_ouçut_pö
(
sda
);

123 
	`io_öput_pö
(
s˛
);

124 i‡(
puŒ_up
)

125 
	`io_£t_pö
(
s˛
);

126 
	`I2C_DELAY
(
I2C_DEFAULT_STOP_TIME
);

132 
	`io_öput_pö
(
sda
);

134 
	`io_£t_pö
(
sda
);

135 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_FREE_TIME
);

137  
ªsu…
;

138 
	}
}

182 
	$_i2c_ab‹t_ß„
(
io_pö_t
 
pö
, 
boﬁ
 
puŒ_up
)

184 i‡(
puŒ_up
 =
Ál£
)

185 
	`io_˛ór_pö
(
pö
);

187 
	`io_öput_pö
(
pö
);

189 i‡(
puŒ_up
)

190 
	`io_£t_pö
(
pö
);

191 
	}
}

193 
	$_i2c_ab‹t_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

210 
	`_i2c_ab‹t_ß„
(
s˛
, 
puŒ_up
);

211 
	`_i2c_ab‹t_ß„
(
sda
, 
puŒ_up
);

215 
	}
}

222 
boﬁ
 
	$_i2c_wrôe_byã_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
vÆue
, 
boﬁ
 
puŒ_up
)

228 
uöt8_t
 
i
 = 0; i < 8; ++i)

230 
boﬁ
 
b
 = ((
vÆue
 & (0x01 << (7 - 
i
))) != 0x00);

232 i‡(
b
)

234 i‡(
puŒ_up
)

237 
	`io_öput_pö
(
sda
);

238 
	`io_£t_pö
(
sda
);

241 
	`io_öput_pö
(
sda
);

243 i‡(
	`io_ã°_pö
(
sda
Ë=
Ál£
)

245 
	`debug_log
("I2C:WR ");

246 
	`debug_log_hex
(
sda
);

247 
	`debug_blök_ªv
(1);

248  
Ál£
;

253 i‡(
puŒ_up
)

256 
	`io_˛ór_pö
(
sda
);

259 
	`io_ouçut_pö
(
sda
);

265 
	`io_íabÀ_pö
(
sda
, 
Ál£
);

266 
	`io_ouçut_pö
(
sda
);

272 
	`io_öput_pö
(
s˛
);

273 i‡(
puŒ_up
)

274 
	`io_£t_pö
(
s˛
);

275 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

276 #ifde‡
I2C_ALLOW_CLOCK_STRETCH


277 
uöt8_t
 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

278 
	`io_ã°_pö
(
s˛
Ë=
Ál£
)

280 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

281 i‡(--
ªåõs
 == 0)

283 
	`io_öput_pö
(
sda
);

284 i‡(
puŒ_up
)

285 
	`io_£t_pö
(
sda
);

287 
	`debug_log_ex
("I2C:STRTCH ", 
Ál£
);

288 
	`debug_log_hex
(
s˛
);

289 
	`debug_blök_ªv
(2);

290  
Ál£
;

294 i‡(
puŒ_up
)

295 
	`io_˛ór_pö
(
s˛
);

296 
	`io_ouçut_pö
(
s˛
);

297 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

300 
	`io_öput_pö
(
sda
);

301 i‡(
puŒ_up
)

302 
	`io_£t_pö
(
sda
);

303 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

305 
uöt8_t
 
ªåõs
 = 0;

306 (
_i2c_dißbÀ_ack_check
 =
Ál£
Ë&& (
	`io_ã°_pö
(
sda
)))

308 i‡(
ªåõs
 =
I2C_DEFAULT_MAX_ACK_RETRIES
)

310 
	`debug_log_ex
("I2C:ACK ", 
Ál£
);

311 
	`debug_log_hex_ex
(
sda
, 
Ál£
);

312 
	`debug_log_hex
(
vÆue
);

313 
	`debug_blök_ªv
(3);

314  
Ál£
;

317 ++
ªåõs
;

318 
	`I2C_DELAY
(
I2C_DEFAULT_RETRY_DELAY
);

324 
	`io_öput_pö
(
s˛
);

325 i‡(
puŒ_up
)

326 
	`io_£t_pö
(
s˛
);

327 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

329 i‡(
puŒ_up
)

330 
	`io_˛ór_pö
(
s˛
);

331 
	`io_ouçut_pö
(
s˛
);

334 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

336  
åue
;

337 
	}
}

339 
boﬁ
 
	$_i2c_ªad_byã_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
* 
vÆue
, 
boﬁ
 
puŒ_up
)

345 
	`io_öput_pö
(
sda
);

346 i‡(
puŒ_up
)

347 
	`io_£t_pö
(
sda
);

349 (*
vÆue
) = 0x00;

351 
uöt8_t
 
i
 = 0; i < 8; ++i)

355 
	`io_öput_pö
(
s˛
);

356 i‡(
puŒ_up
)

357 
	`io_£t_pö
(
s˛
);

358 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_HIGH_PERIOD
);

359 #ifde‡
I2C_ALLOW_CLOCK_STRETCH


360 
uöt8_t
 
ªåõs
 = 
I2C_DEFAULT_MAX_BUS_RETRIES
;

361 
	`io_ã°_pö
(
s˛
Ë=
Ál£
)

363 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

364 i‡(--
ªåõs
 == 0)

366 
	`debug_log_ex
("I2C:R ");

367 
	`debug_log_hex
(
s˛
);

368 
	`debug_blök_ªv
(5);

369  
Ál£
;

373 (*
vÆue
Ë|((
	`io_ã°_pö
(
sda
Ë? 0x1 : 0x0Ë<< (7 - 
i
));

375 i‡(
puŒ_up
)

376 
	`io_˛ór_pö
(
s˛
);

377 
	`io_ouçut_pö
(
s˛
);

380 
	`I2C_DELAY
(
I2C_DEFAULT_SCL_LOW_PERIOD
);

385  
åue
;

386 
	}
}

388 
boﬁ
 
	$i2c_ªad2_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, 
boﬁ
 
puŒ_up
)

390 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

391  
Ál£
;

393 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
 & ~0x01, 
puŒ_up
Ë=
Ál£
)

395 #ifde‡
I2C_EXTRA_DEBUGGING


397 
	`debug_log
("R21");

400 
i2c_ªad2_Áû
;

403 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
subaddr
, 
puŒ_up
Ë=
Ál£
)

405 #ifde‡
I2C_EXTRA_DEBUGGING


407 
	`debug_log
("R22");

410 
i2c_ªad2_Áû
;

413 
	`io_öput_pö
(
s˛
);

414 i‡(
puŒ_up
)

415 
	`io_£t_pö
(
s˛
);

416 
	`I2C_DELAY
(
I2C_DEFAULT_BUS_WAIT
);

418 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

420  
Ál£
;

423 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
 | 0x01, 
puŒ_up
Ë=
Ál£
)

425 #ifde‡
I2C_EXTRA_DEBUGGING


427 
	`debug_log
("R23");

430 
i2c_ªad2_Áû
;

433 i‡(
	`_i2c_ªad_byã_ex
(
sda
, 
s˛
, 
vÆue
, 
puŒ_up
Ë=
Ál£
)

435 #ifde‡
I2C_EXTRA_DEBUGGING


437 
	`debug_log
("R24");

440 
i2c_ªad2_Áû
;

443 i‡(
	`_i2c_°›_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

445 #ifde‡
I2C_EXTRA_DEBUGGING


446 
	`debug_log
("R25");

450  
åue
;

451 
i2c_ªad2_Áû
:

452 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

453  
Ál£
;

454 
	}
}

456 
boﬁ
 
	$i2c_wrôe_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
, 
boﬁ
 
puŒ_up
)

458 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

459  
Ál£
;

461 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
, 
puŒ_up
Ë=
Ál£
)

462 
i2c_wrôe_Áû
;

464 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
subaddr
, 
puŒ_up
Ë=
Ál£
)

465 
i2c_wrôe_Áû
;

467 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
vÆue
, 
puŒ_up
Ë=
Ál£
)

468 
i2c_wrôe_Áû
;

470 
	`_i2c_°›_ex
(
sda
, 
s˛
, 
puŒ_up
);

472  
åue
;

473 
i2c_wrôe_Áû
:

474 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

475  
Ál£
;

476 
	}
}

478 
boﬁ
 
	$i2c_wrôe
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
)

480  
	`i2c_wrôe_ex
(
sda
, 
s˛
, 
addr
, 
subaddr
, 
vÆue
, 
Ál£
);

481 
	}
}

483 
boﬁ
 
	$i2c_ªad_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, 
boﬁ
 
puŒ_up
)

485 i‡(
	`_i2c_°¨t_ex
(
sda
, 
s˛
, 
puŒ_up
Ë=
Ál£
)

486  
Ál£
;

488 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
addr
, 
puŒ_up
Ë=
Ál£
)

489 
i2c_ªad_Áû
;

491 i‡(
	`_i2c_wrôe_byã_ex
(
sda
, 
s˛
, 
subaddr
, 
puŒ_up
Ë=
Ál£
)

492 
i2c_ªad_Áû
;

494 i‡(
	`_i2c_ªad_byã_ex
(
sda
, 
s˛
, 
vÆue
, 
puŒ_up
Ë=
Ál£
)

495 
i2c_ªad_Áû
;

497 
	`_i2c_°›_ex
(
sda
, 
s˛
, 
puŒ_up
);

499  
åue
;

500 
i2c_ªad_Áû
:

501 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

502  
Ál£
;

503 
	}
}

505 
boﬁ
 
	$i2c_ªad
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
)

507  
	`i2c_ªad_ex
(
sda
, 
s˛
, 
addr
, 
subaddr
, 
vÆue
, 
Ál£
);

508 
	}
}

510 
	$i2c_öô_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
)

512 
	`_i2c_ab‹t_ex
(
sda
, 
s˛
, 
puŒ_up
);

513 
	}
}

515 
	$i2c_öô
(
io_pö_t
 
sda
, io_pö_à
s˛
)

517 
	`i2c_öô_ex
(
sda
, 
s˛
, 
Ál£
);

518 
	}
}

	@firmware/e300/rev_c/i2c.h

1 #i‚de‡
I2C_H


2 
	#I2C_H


	)

4 
	~"io.h
"

6 
i2c_öô
(
io_pö_t
 
sda
, io_pö_à
s˛
);

7 
boﬁ
 
i2c_ªad
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
);

8 
boﬁ
 
i2c_wrôe
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
);

10 
i2c_öô_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
boﬁ
 
puŒ_up
);

11 
boﬁ
 
i2c_ªad_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, boﬁ 
puŒ_up
);

12 
boﬁ
 
i2c_ªad2_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_t* 
vÆue
, boﬁ 
puŒ_up
);

13 
boﬁ
 
i2c_wrôe_ex
(
io_pö_t
 
sda
, io_pö_à
s˛
, 
uöt8_t
 
addr
, uöt8_à
subaddr
, uöt8_à
vÆue
, boﬁ 
puŒ_up
);

15 vﬁ©ûê
boﬁ
 
_i2c_dißbÀ_ack_check
;

	@firmware/e300/rev_c/io.c

5 
	~"io.h
"

6 
	~<avr/io.h
>

8 
	#_GET_PIN
(
pö
Ë(’öË& 0xf)

	)

9 
	#_GET_MASK
(
pö
Ë(
	`_BV
(
	`_GET_PIN
’ö)))

	)

10 
	#_GET_REG
(
pö
, 
ªg_x
Ë(*ªg_x[pö >> 4])

	)

12 #i‚de‡
IO_DEBUG


13 vﬁ©ûê
uöt8_t
 *
	gddr_x
[] = {&
DDRA
, &
DDRB
, &
DDRC
, &
DDRD
};

14 vﬁ©ûê
uöt8_t
 *
	gp‹t_x
[] = {&
PORTA
, &
PORTB
, &
PORTC
, &
PORTD
};

15 vﬁ©ûê
uöt8_t
 *
	gpö_x
[] = {&
PINA
, &
PINB
, &
PINC
, &
PIND
};

18 
	$io_ouçut_pö
(
io_pö_t
 
pö
){

19 #i‚de‡
IO_DEBUG


20 
	`_GET_REG
(
pö
, 
ddr_x
Ë|
	`_GET_MASK
(pin);

22 
	}
}

24 
	$io_öput_pö
(
io_pö_t
 
pö
){

25 #i‚de‡
IO_DEBUG


26 
	`_GET_REG
(
pö
, 
ddr_x
Ë&~
	`_GET_MASK
(pin);

28 
	}
}

30 
boﬁ
 
	$io_is_ouçut
(
io_pö_t
 
pö
){

31 #i‚de‡
IO_DEBUG


32  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
ddr_x
), 
	`_GET_PIN
(pin));

36 
	}
}

38 
boﬁ
 
	$io_is_öput
(
io_pö_t
 
pö
){

39  !
	`io_is_ouçut
(
pö
);

40 
	}
}

42 
	$io_£t_pö
(
io_pö_t
 
pö
){

43 #i‚de‡
IO_DEBUG


44 
	`_GET_REG
(
pö
, 
p‹t_x
Ë|
	`_GET_MASK
(pin);

46 
	}
}

48 
	$io_˛ór_pö
(
io_pö_t
 
pö
){

49 #i‚de‡
IO_DEBUG


50 
	`_GET_REG
(
pö
, 
p‹t_x
Ë&~
	`_GET_MASK
(pin);

52 
	}
}

54 
boﬁ
 
	$io_is_pö_£t
(
io_pö_t
 
pö
){

55 #i‚de‡
IO_DEBUG


56  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
p‹t_x
), 
	`_GET_PIN
(pin));

60 
	}
}

62 
	$io_íabÀ_pö
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
){

63 i‡(
íabÀ
)

64 
	`io_£t_pö
(
pö
);

66 
	`io_˛ór_pö
(
pö
);

67 
	}
}

69 
boﬁ
 
	$io_ã°_pö
(
io_pö_t
 
pö
){

70 #i‚de‡
IO_DEBUG


71  
	`bô_is_£t
(
	`_GET_REG
(
pö
, 
pö_x
), 
	`_GET_PIN
(pin));

75 
	}
}

	@firmware/e300/rev_c/io.h

5 #i‚de‡
IO_H


6 
	#IO_H


	)

8 
	~<°döt.h
>

9 
	~<°dboﬁ.h
>

11 
	#IO_PX
(
p‹t
, 
pö
Ë((
uöt8_t
)((’‹à- 'A'Ë<< 4Ë+Öö))

	)

12 
	#IO_PA
(
pö
Ë
	`IO_PX
('A',Öö)

	)

13 
	#IO_PB
(
pö
Ë
	`IO_PX
('B',Öö)

	)

14 
	#IO_PC
(
pö
Ë
	`IO_PX
('C',Öö)

	)

15 
	#IO_PD
(
pö
Ë
	`IO_PX
('D',Öö)

	)

17 c⁄° 
	tuöt8_t
 
	tio_pö_t
;

19 
io_ouçut_pö
(
io_pö_t
 
pö
);

20 
io_öput_pö
(
io_pö_t
 
pö
);

21 
boﬁ
 
io_is_ouçut
(
io_pö_t
 
pö
);

22 
boﬁ
 
io_is_öput
(
io_pö_t
 
pö
);

24 
io_£t_pö
(
io_pö_t
 
pö
);

25 
io_˛ór_pö
(
io_pö_t
 
pö
);

26 
io_íabÀ_pö
(
io_pö_t
 
pö
, 
boﬁ
 
íabÀ
);

27 
boﬁ
 
io_is_pö_£t
(
io_pö_t
 
pö
);

29 
boﬁ
 
io_ã°_pö
(
io_pö_t
 
pö
);

	@firmware/e300/rev_c/ltc3675.c

10 
	~"c⁄fig.h
"

11 
	~"…c3675.h
"

14 
	~<utû/dñay.h
>

15 
	~<avr/öãºu±.h
>

17 
	~"io.h
"

18 
	~"i2c.h
"

19 
	~"debug.h
"

20 
	~"globÆ.h
"

21 
	~"îr‹.h
"

23 #i‚de‡
I2C_REWORK


24 
	~"powî.h
"

27 c⁄° 
boﬁ
 
	g_…c3675_puŒ_up
 =

28 #ifde‡
I2C_REWORK


29 
åue


31 
Ál£


35 vﬁ©ûê
…c3675_ªg_hñ≥r_‚
 
	g_…c3675_ªg_hñ≥r
;

39 #ifde‡
ATTINY88_DIP


41 #ifde‡
HARDWIRE_ENABLE


42 
io_pö_t
 
	gPWR_EN1
 = 
IO_PC
(7);

43 
io_pö_t
 
	gPWR_EN2
 = 
IO_PA
(0);

44 
io_pö_t
 
	gPWR_EN3
 = 
IO_PA
(1);

45 
io_pö_t
 
	gPWR_EN4
 = 
IO_PB
(6);

46 
io_pö_t
 
	gPWR_EN5
 = 
IO_PB
(7);

54 #ifde‡
HARDWIRE_ENABLE


55 
io_pö_t
 
	gPWR_EN1
 = 
IO_PC
(1);

58 
io_pö_t
 
	gPWR_EN4
 = 
IO_PA
(1);

59 
io_pö_t
 
	gPWR_EN5
 = 
IO_PA
(2);

62 #ifde‡
I2C_REWORK


63 
io_pö_t
 
	gPWR_SDA
 = 
IO_PC
(2);

64 
io_pö_t
 
	gPWR_SCL
 = 
IO_PA
(2);

69 
io_pö_t
 
	gPWR_IRQ
 = 
IO_PD
(0);

70 
io_pö_t
 
	gWAKEUP
 = 
IO_PD
(2);

71 
io_pö_t
 
	gONSWITCH_DB
 = 
IO_PD
(3);

72 
io_pö_t
 
	gPWR_RESET
 = 
IO_PD
(4);

74 
	#LTC3675_BASE_ADDRESS
 0x12

	)

75 
	#LTC3675_WRITE_ADDRESS
 (
LTC3675_BASE_ADDRESS
 + 0)

	)

76 
	#LTC3675_READ_ADDRESS
 (
LTC3675_BASE_ADDRESS
 + 1)

	)

78 
	#LTC3675_RETRY_DELAY
 1

79 
	#LTC3675_MAX_ACK_RETRIES
 10

80 

	)

81 
	#LTC3675_SCL_LOW_PERIOD
 2

82 
	#LTC3675_SCL_HIGH_PERIOD
 1

83 
	#LTC3675_BUS_FREE_TIME
 2

84 
	#LTC3675_STOP_TIME
 1

85 

	)

86 
	#LTC3675_REGULATOR_ENABLE_DELAY
 10

87 

	)

88 
	eLTC3675Regi°îs


90 
	mLTC3675_REG_NONE
 = 0x00,

91 
	mLTC3675_REG_BUCK1
 = 0x01,

92 
	mLTC3675_REG_BUCK2
 = 0x02,

93 
	mLTC3675_REG_BUCK3
 = 0x03,

94 
	mLTC3675_REG_BUCK4
 = 0x04,

95 
	mLTC3675_REG_BOOST
 = 0x05,

96 
	mLTC3675_REG_BUCK_BOOST
 = 0x06,

97 
	mLTC3675_REG_LED_CONFIG
 = 0x07,

98 
	mLTC3675_REG_LED_DAC
 = 0x08,

99 
	mLTC3675_REG_UVOT
 = 0x09,

100 
	mLTC3675_REG_RSTB
 = 0xA0,

101 
	mLTC3675_REG_IRQB_MASK
 = 0x0B,

102 
	mLTC3675_REG_REALTIME_STATUS
 = 0x0C,

103 
	mLTC3675_REG_LATCHED_STATUS
 = 0x0D,

104 
	mLTC3675_REG_CLEAR_IRQ
 = 0x0F

107 
	eLTC3675SètusBôs


109 
	mLTC3675_UndîVﬁège
 = 1 << 7,

110 
	mLTC3675_OvîTem≥øtuª
 = 1 << 6,

111 
	mLTC3675_BuckBoo°_PGood
 = 1 << 5,

112 
	mLTC3675_Boo°_PGood
 = 1 << 4,

113 
	mLTC3675_Buck4_PGood
 = 1 << 3,

114 
	mLTC3675_Buck3_PGood
 = 1 << 2,

115 
	mLTC3675_Buck2_PGood
 = 1 << 1,

116 
	mLTC3675_Buck1_PGood
 = 1 << 0

119 
	#LTC3675_DEFAULT_BUCK_REG_VAL
 0x6F

	)

120 
	#LTC3675_DEFAULT_BOOST_REG_VAL
 0x0F

	)

121 
	#LTC3675_DEFAULT_BUCK_BOOST_REG_VAL
 0x0F

	)

123 
	#LTC3675_ENABLE_REGISTER_BIT
 0x80

	)

127 
	$_…c3675_˛ór_úq
()

130 
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_CLEAR_IRQ
, 0x00, 
_…c3675_puŒ_up
);

131 
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_NONE
, 0x00, 
_…c3675_puŒ_up
);

132 
	}
}

134 vﬁ©ûê
uöt8_t
 
	g_…c3675_œ°_°©us
 = 0x00;

136 
uöt8_t
 
	$…c3675_gë_œ°_°©us
()

138  
_…c3675_œ°_°©us
;

139 
	}
}

141 
uöt8_t
 
	$…c3675_ªg_°©us_to_îr‹
(
uöt8_t
 
vÆ
)

143 i‡(((
vÆ
 & 
LTC3675_BuckBoo°_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_6
)))

144  
BlökEº‹_3_3V_PîùhîÆs_Powî
;

146 i‡(((
vÆ
 & 
LTC3675_Boo°_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_5
)))

147  
BlökEº‹_TX_Powî
;

151 i‡(((
vÆ
 & 
LTC3675_Buck3_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_3
)))

152  
BlökEº‹_1_8V_PîùhîÆs_Powî
;

156 i‡(((
vÆ
 & 
LTC3675_Buck1_PGood
Ë=0Ë&& ((
_…c3675_ªg_hñ≥r
)(
LTC3675_REG_1
)))

157  
BlökEº‹_DRAM_Powî
;

159  
BlökEº‹_N⁄e
;

160 
	}
}

162 
boﬁ
 
	$…c3675_is_powî_good
(
uöt8_t
 
vÆ
)

164  (
	`…c3675_ªg_°©us_to_îr‹
(
vÆ
Ë=
BlökEº‹_N⁄e
);

165 
	}
}

167 
uöt8_t
 
	$…c3675_°©us_to_îr‹
(
uöt8_t
 
vÆ
)

169 i‡(
vÆ
 & 
LTC3675_UndîVﬁège
)

170  
BlökEº‹_LTC3675_UndîVﬁège
;

172 i‡(
vÆ
 & 
LTC3675_OvîTem≥øtuª
)

173  
BlökEº‹_LTC3675_OvîTem≥øtuª
;

175 
uöt8_t
 
ªg_îr‹
 = 
	`…c3675_ªg_°©us_to_îr‹
(
vÆ
);

176 i‡(
ªg_îr‹
 !
BlökEº‹_N⁄e
)

177  
ªg_îr‹
;

179  
BlökEº‹_N⁄e
;

180 
	}
}

182 
boﬁ
 
	$_…c3675_h™dÀ_úq
()

184 
uöt8_t
 
vÆ
 = 0x00;

185 
boﬁ
 
ªsu…
 = 
Ál£
;

187 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
LTC3675_REG_LATCHED_STATUS
, &
vÆ
, 
_…c3675_puŒ_up
))

189 
	`debug_log_ex
("3675LTCH ", 
Ál£
);

190 
	`debug_log_hex
(
vÆ
);

193 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
LTC3675_REG_REALTIME_STATUS
, &
vÆ
, 
_…c3675_puŒ_up
))

196 
	`debug_log_ex
("3675RT ", 
Ál£
);

197 
	`debug_log_hex
(
vÆ
);

199 
_…c3675_œ°_°©us
 = 
vÆ
;

201 
uöt8_t
 
îr‹
 = 
	`…c3675_°©us_to_îr‹
(
vÆ
);

209 i‡(
îr‹
)

211 
	`pmc_£t_blök_îr‹
(
îr‹
);

223 
ªsu…
 = 
åue
;

226 
	`_…c3675_˛ór_úq
();

228  
ªsu…
;

229 
	}
}

231 
boﬁ
 
	$_…c3675_gë_ªÆtime_°©us
(
uöt8_t
* 
vÆ
)

235 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
LTC3675_REG_REALTIME_STATUS
, 
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

236  
Ál£
;

238 
	`debug_log_ex
("3675RT ", 
Ál£
);

239 
	`debug_log_hex
(*
vÆ
);

243  
åue
;

244 
	}
}

246 
öt8_t
 
	$…c3675_check_°©us
()

248 
uöt8_t
 
vÆ
 = 0x00;

250 
	`pmc_mask_úqs
(
åue
);

252 
boﬁ
 
ªsu…
 = 
	`_…c3675_gë_ªÆtime_°©us
(&
vÆ
);

254 
	`pmc_mask_úqs
(
Ál£
);

256 i‡(
ªsu…
 =
Ál£
)

269  
	`…c3675_°©us_to_îr‹
(
vÆ
);

270 
	}
}

272 
boﬁ
 
	$…c3675_h™dÀ_úq
()

274 
	`pmc_mask_úqs
(
åue
);

276  
boﬁ
 
ªsu…
 = 
	`_…c3675_h™dÀ_úq
();

278 
	`pmc_mask_úqs
(
Ál£
);

280  
ªsu…
;

281 
	}
}

283 
boﬁ
 
	$_…c3675_deÁu…_ªg_hñ≥r
(
uöt8_t
 
addªss
)

285 
uöt8_t
 
vÆ
 = 0x00;

286 
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
addªss
, &
vÆ
, 
_…c3675_puŒ_up
);

287  ((
vÆ
 & 
LTC3675_ENABLE_REGISTER_BIT
) == LTC3675_ENABLE_REGISTER_BIT);

288 
	}
}

290 
boﬁ
 
	$…c3675_öô
(
…c3675_ªg_hñ≥r_‚
 
hñ≥r
)

292 i‡(
hñ≥r
)

293 
_…c3675_ªg_hñ≥r
 = 
hñ≥r
;

295 
_…c3675_ªg_hñ≥r
 = 
_…c3675_deÁu…_ªg_hñ≥r
;

296 #ifde‡
HARDWIRE_ENABLE


297 
	`io_ouçut_pö
(
PWR_EN1
);

298 
	`io_ouçut_pö
(
PWR_EN2
);

299 
	`io_ouçut_pö
(
PWR_EN3
);

300 
	`io_ouçut_pö
(
PWR_EN4
);

301 
	`io_ouçut_pö
(
PWR_EN5
);

311 #ifde‡
I2C_REWORK


312 
	`i2c_öô_ex
(
PWR_SDA
, 
PWR_SCL
, 
_…c3675_puŒ_up
);

314 
	`io_öput_pö
(
PWR_IRQ
);

315 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

316 
	`io_£t_pö
(
PWR_IRQ
);

319 
	`io_öput_pö
(
WAKEUP
);

320 
	`io_£t_pö
(
WAKEUP
);

322 
	`io_öput_pö
(
ONSWITCH_DB
);

323 
	`io_£t_pö
(
ONSWITCH_DB
);

325 
	`io_öput_pö
(
PWR_RESET
);

326 
	`io_£t_pö
(
PWR_RESET
);

328 
	`_…c3675_˛ór_úq
();

330 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_IRQB_MASK
, 0xFF, 
_…c3675_puŒ_up
Ë=
Ál£
)

331  
Ál£
;

333 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
LTC3675_REG_UVOT
, 0x70, 
_…c3675_puŒ_up
Ë=
Ál£
)

334  
Ál£
;

336 i‡(
	`…c3675_has_öãºu±
())

337 
	`_…c3675_h™dÀ_úq
();

343  
åue
;

344 
	}
}

346 
boﬁ
 
	$…c3675_is_wakög_up
()

348  
	`io_ã°_pö
(
WAKEUP
);

349 
	}
}

351 
boﬁ
 
	$_…c3675_is_pgood
(
uöt8_t
 
ªg
)

353 
uöt8_t
 
vÆ
 = 0x00;

354 i‡(
	`_…c3675_gë_ªÆtime_°©us
(&
vÆ
Ë=
Ál£
)

355  
Ál£
;

356  ((
ªg
 & 
vÆ
) ==Ñeg);

357 
	}
}

359 
boﬁ
 
	$_…c3675_toggÀ_ªg
(
uöt8_t
 
addr
, uöt8_à
def_ªg
, 
boﬁ
 
⁄
)

361 
boﬁ
 
ªsu…
 = 
åue
;

365 
uöt8_t
 
vÆ
 = 0x00 | 
def_ªg
;

366 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
addr
, &
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

367  
Ál£
;

369 
vÆ
 &~
LTC3675_ENABLE_REGISTER_BIT
;

371 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
addr
, 
vÆ
 | (
⁄
 ? 
LTC3675_ENABLE_REGISTER_BIT
 : 0x00), 
_…c3675_puŒ_up
Ë=
Ál£
)

373 
ªsu…
 = 
Ál£
;

375 i‡(
⁄
)

377 
	`_dñay_ms
(
LTC3675_REGULATOR_ENABLE_DELAY
);

382  
ªsu…
;

384 
	}
}

386 
boﬁ
 
	$…c3675_íabÀ_ªg
(
…c3675_ªguœt‹_t
 
ªg
, 
boﬁ
 
⁄
)

389 
	`debug_log_ex
("3675 ", 
Ál£
);

390 
	`debug_log_byã_ex
(
ªg
, 
åue
);

395 
boﬁ
 
ªsu…
 = 
Ál£
;

397 
ªg
)

399 
LTC3675_REG_1
:

400 
LTC3675_REG_2
:

401 #ifde‡
HARDWIRE_ENABLE


402 
	`io_íabÀ_pö
(
PWR_EN1
, 
⁄
);

406 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BUCK1
, 
LTC3675_DEFAULT_BUCK_REG_VAL
, 
⁄
Ë=
Ál£
) {

408  
Ál£
;

412 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_Buck1_PGood
Ë=
⁄
);

414 
LTC3675_REG_3
:

415 
LTC3675_REG_4
:

416 #ifde‡
HARDWIRE_ENABLE


417 
	`io_íabÀ_pö
(
PWR_EN3
, 
⁄
);

420 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BUCK3
, 
LTC3675_DEFAULT_BUCK_REG_VAL
, 
⁄
Ë=
Ál£
)

421  
Ál£
;

423 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_Buck3_PGood
Ë=
⁄
);

425 
LTC3675_REG_5
:

426 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BOOST
, 
LTC3675_DEFAULT_BOOST_REG_VAL
, 
⁄
Ë=
Ál£
)

427  
Ál£
;

428 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_Boo°_PGood
Ë=
⁄
);

430 
LTC3675_REG_6
:

431 #ifde‡
HARDWIRE_ENABLE


432 
	`io_íabÀ_pö
(
PWR_EN5
, 
⁄
);

435 i‡(
	`_…c3675_toggÀ_ªg
(
LTC3675_REG_BUCK_BOOST
, 
LTC3675_DEFAULT_BUCK_BOOST_REG_VAL
, 
⁄
Ë=
Ál£
)

436  
Ál£
;

438 
ªsu…
 = (
	`_…c3675_is_pgood
(
LTC3675_BuckBoo°_PGood
Ë=
⁄
);

444 
	`_debug_log
((
ªsu…
 ? "+" : "-"));

446  
ªsu…
;

447 
	}
}

449 
boﬁ
 
	$…c3675_£t_vﬁège
(
…c3675_ªguœt‹_t
 
ªg
, 
uöt16_t
 
vﬁège
)

456 
uöt16_t
 
max_vﬁège
 = 0;

457 
uöt8_t
 
ªg_subaddr
 = 0;

459 
ªg
)

461 
LTC3675_REG_1
:

462 
LTC3675_REG_2
:

463 
max_vﬁège
 = 1500;

464 
ªg_subaddr
 = 
LTC3675_REG_BUCK1
;

466 
LTC3675_REG_3
:

467 
LTC3675_REG_4
:

468 
max_vﬁège
 = 1800;

469 
ªg_subaddr
 = 
LTC3675_REG_BUCK3
;

471 
LTC3675_REG_5
:

472 
max_vﬁège
 = 5000;

473 
ªg_subaddr
 = 
LTC3675_REG_BOOST
;

475 
LTC3675_REG_6
:

476 
max_vﬁège
 = 3300;

477 
ªg_subaddr
 = 
LTC3675_REG_BUCK_BOOST
;

481 i‡(
vﬁège
 > 
max_vﬁège
)

482  
Ál£
;

486 
uöt32_t
 
rFB
 = ((uöt32_t)
max_vﬁège
 * 1000) / (uint32_t)800;

487 
uöt32_t
 
r
 = ((uöt32_t)
vﬁège
 * 1000Ë/ (uöt32_t)
rFB
;

488 i‡(
r
 < 450)

489  
Ál£
;

491 
uöt16_t
 
rDAC
 = (16 * ((uöt16_t)
r
 - 450)) / (800 - 450);

493 
	`debug_log_ex
("V∏", 
Ál£
);

494 
	`debug_log_byã_ex
(
ªg
, 
Ál£
);

495 
	`debug_log_ex
("=", 
Ál£
);

496 
	`debug_log_byã_ex
((
uöt8_t
)
rDAC
, 
Ál£
);

498 
uöt8_t
 
vÆ
 = 0x00;

499 i‡(
	`i2c_ªad2_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_READ_ADDRESS
, 
ªg_subaddr
, &
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

501 
	`debug_log
("-");

502  
Ál£
;

505 
vÆ
 = (vÆ & 0xF0Ë| (
uöt8_t
)
rDAC
;

506 i‡(
	`i2c_wrôe_ex
(
PWR_SDA
, 
PWR_SCL
, 
LTC3675_WRITE_ADDRESS
, 
ªg_subaddr
, 
vÆ
, 
_…c3675_puŒ_up
Ë=
Ál£
)

508 
	`debug_log
("-");

509  
Ál£
;

512 
	`debug_log
("+");

514  
åue
;

515 
	}
}

517 
boﬁ
 
	$…c3675_is_powî_buâ⁄_dïªs£d
()

519  (
	`io_ã°_pö
(
ONSWITCH_DB
Ë=
Ál£
);

520 
	}
}

522 
boﬁ
 
	$…c3675_has_öãºu±
()

524  (
	`io_ã°_pö
(
PWR_IRQ
Ë=
Ál£
);

525 
	}
}

	@firmware/e300/rev_c/ltc3675.h

5 #i‚de‡
LTC3675_H


6 
	#LTC3675_H


	)

9 
	~<°dboﬁ.h
>

10 
	~<°döt.h
>

12 
	$boﬁ
 (*
	t…c3675_ªg_hñ≥r_‚
)(
	tuöt8_t
 
	taddªss
);

14 
boﬁ
 
	`…c3675_öô
(
…c3675_ªg_hñ≥r_‚
 
hñ≥r
);

16 
	e…c3675_ªguœt‹s
 {

17 
LTC3675_REG_1
,

18 
LTC3675_REG_2
,

19 
LTC3675_REG_3
,

20 
LTC3675_REG_4
,

21 
LTC3675_REG_5
,

22 
LTC3675_REG_6


24 } 
	t…c3675_ªguœt‹_t
;

26 
boﬁ
 
	`…c3675_íabÀ_ªg
(
…c3675_ªguœt‹_t
 
ªg
, boﬁ 
⁄
);

27 
boﬁ
 
	`…c3675_£t_vﬁège
(
…c3675_ªguœt‹_t
 
ªg
, 
uöt16_t
 
vﬁège
);

28 
boﬁ
 
	`…c3675_is_powî_buâ⁄_dïªs£d
();

29 
boﬁ
 
	`…c3675_has_öãºu±
();

30 
boﬁ
 
	`…c3675_h™dÀ_úq
();

31 
öt8_t
 
	`…c3675_check_°©us
();

32 
uöt8_t
 
	`…c3675_gë_œ°_°©us
();

33 
uöt8_t
 
	`…c3675_°©us_to_îr‹
(uöt8_à
vÆ
);

34 
boﬁ
 
	`…c3675_is_powî_good
(
uöt8_t
 
vÆ
);

35 
boﬁ
 
	`…c3675_is_wakög_up
();

	@firmware/e300/rev_c/ltc4155.c

5 #i‚de‡
CHARGER_TI


7 
	~"c⁄fig.h
"

8 
	~"…c4155.h
"

10 
	~<utû/dñay.h
>

12 
	~"io.h
"

13 
	~"i2c.h
"

14 
	~"powî.h
"

15 
	~"debug.h
"

16 
	~"globÆ.h
"

17 
	~"îr‹.h
"

19 
io_pö_t
 
	gUSBPM_IRQ
 = 
IO_PB
(1);

21 #ifde‡
ATTINY88_DIP


23 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(2);

24 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(3);

28 #ifde‡
I2C_REWORK


30 
io_pö_t
 
	gCHRG_SDA
 = 
IO_PC
(4);

31 
io_pö_t
 
	gCHRG_SCL
 = 
IO_PC
(5);

35 
	#CHRG_SDA
 
PWR_SDA


	)

36 
	#CHRG_SCL
 
PWR_SCL


	)

42 c⁄° 
boﬁ
 
	g_…c4155_puŒ_up
 = 
Ál£
;

44 
	#LTC4155_BASE_ADDRESS
 0x12

	)

45 
	#LTC4155_WRITE_ADDRESS
 (
LTC4155_BASE_ADDRESS
 + 0)

	)

46 
	#LTC4155_READ_ADDRESS
 (
LTC4155_BASE_ADDRESS
 + 1)

	)

56 
	eLTC4155Regi°îs


58 
	mLTC4155_REG_USB
 = 0x00,

59 
	mLTC4155_REG_WALL
 = 0x01,

60 
	mLTC4155_REG_CHARGE
 = 0x02,

61 
	mLTC4155_REG_STATUS
 = 0x03,

62 
	mLTC4155_REG_GOOD
 = 0x04,

63 
	mLTC4155_REG_THERMISTOR
 = 0x05,

64 
	mLTC4155_REG_ENABLE
 = 0x06,

65 
	mLTC4155_REG_ARM_AND_SHIP
= 0x07

68 
	eLTC4155I¡îru±Masks


70 
	mLTC4155_ENABLE_USB_OTG
 = 1 << 1,

72 
	mLTC4155_INT_UVCL
 = 1 << 2,

73 
	mLTC4155_INT_ILIMIT
 = 1 << 3,

74 
	mLTC4155_INT_USB_OTG
 = 1 << 4,

75 
	mLTC4155_INT_EXT_PWR
 = 1 << 5,

76 
	mLTC4155_INT_FAULT
 = 1 << 6,

77 
	mLTC4155_INT_CHARGER
 = 1 << 7

80 
	eLTC4155O±i⁄s


82 
	mLTC4155_USB_OTG_LOCKOUT
 = 1 << 5,

83 
	mLTC4155_ENABLE_BATTERY_CONDITIONER
 = 1 << 6,

84 
	mLTC4155_DISABLE_INPUT_UVCL
 = 1 << 7

87 
	eLTC4155Shi·s


89 
	mLTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
 = 4,

90 
	mLTC4155_SHIFTS_CHARGE_FLOAT_VOLTAGE
 = 2,

91 
	mLTC4155_SHIFTS_WALL_PRIORITY
 = 7,

92 
	mLTC4155_SHIFTS_WALL_SAFETY_TIMER
 = 5

95 
	eLTC4155Sètu£s


97 
	mLTC4155_LOW_BATTERY
 = 1 << 0,

98 
	mLTC4155_BOOST_ENABLE
 = 1 << 3,

99 
	mLTC4155_ID_PIN_DETECT
 = 1 << 4,

102 
	eLTC4155Goods


104 
	mLTC4155_BAD_CELL_FAULT
 = 1 << 0,

105 
	mLTC4155_OTG_FAULT
 = 1 << 1,

106 
	mLTC4155_OVP_ACTIVE
 = 1 << 2,

107 
	mLTC4155_INPUT_UVCL_ACTIVE
 = 1 << 3,

108 
	mLTC4155_INPUT_CURRENT_LIMIT_ACTIVE
 = 1 << 4,

109 
	mLTC4155_WALLSNS_GOOD
 = 1 << 5,

110 
	mLTC4155_USBSNS_GOOD
 = 1 << 6,

111 
	mLTC4155_EXTERNAL_POWER_GOOD
 = 1 << 7

114 
	eLTC4155B©ãryCh¨gîSètues


116 
	mLTC4155_CHARGER_OFF
,

117 
	mLTC4155_CHARGER_LOW_BATTERY_VOLTAGE
,

118 
	mLTC4155_CHARGER_CONSTANT_CURRENT
,

119 
	mLTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_GT_VCX
,

120 
	mLTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_LT_VCX
,

121 
	mLTC4155_CHARGER_NTC_TOO_WARM
,

122 
	mLTC4155_CHARGER_NTC_TOO_COLD
,

123 
	mLTC4155_CHARGER_NTC_HOT


126 
	eLTC4155Thîmi°‹Sètu£s


128 
	mLTC4155_NTC_NORMAL
,

129 
	mLTC4155_NTC_TOO_COLD
,

130 
	mLTC4155_NTC_TOO_WARM
,

131 
	mLTC4155_NTC_FAULT


134 c⁄° 
uöt8_t
 
	g_…c4155_öãºu±_mask
 =

136 
LTC4155_INT_UVCL
 |

137 
LTC4155_INT_ILIMIT
 |

138 
LTC4155_INT_USB_OTG
 |

139 
LTC4155_INT_EXT_PWR
 |

140 
LTC4155_INT_FAULT
 |

141 
LTC4155_INT_CHARGER
;

143 
boﬁ
 
	$_…c4155_˛ór_úq
()

145  
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_ENABLE
, 
_…c4155_öãºu±_mask
, 
_…c4155_puŒ_up
);

146 
	}
}

148 
boﬁ
 
	$…c4155_˛ór_úq
()

150 
	`pmc_mask_úqs
(
åue
);

152 
boﬁ
 
ªsu…
 = 
	`_…c4155_˛ór_úq
();

154 
	`pmc_mask_úqs
(
Ál£
);

156  
ªsu…
;

157 
	}
}

159 
uöt8_t
 
	g_…c4155_œ°_good
, 
	g_…c4155_œ°_°©us
;

161 
boﬁ
 
	$_…c4155_h™dÀ_úq
()

163 
	`_…c4155_˛ór_úq
();

165 
	`_dñay_ms
(50);

169 
uöt8_t
 
vÆ
 = 0x00;

170 
boﬁ
 
ªsu…
 = 
Ál£
;

172 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_GOOD
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

173 
_…c4155_h™dÀ_Áû
;

178 
	`debug_log_ex
("4155GO ", 
Ál£
);

179 
	`debug_log_hex
(
vÆ
);

181 i‡(
vÆ
 & 
LTC4155_WALLSNS_GOOD
)

183 
uöt8_t
 
wÆl_°©e
 = 0;

184 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_WALL
, &
wÆl_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

185 
_…c4155_h™dÀ_Áû
;

187 
wÆl_°©e
 &= ~0x1E;

188 
wÆl_°©e
 |= 0x0E;

190 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_WALL
, 
wÆl_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

191 
_…c4155_h™dÀ_Áû
;

193 
	`debug_log
("I+");

196 
_…c4155_œ°_good
 = 
vÆ
;

198 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_STATUS
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

199 
_…c4155_h™dÀ_Áû
;

204 
	`debug_log_ex
("4155ST ", 
Ál£
);

205 
	`debug_log_hex
(
vÆ
);

207 
_…c4155_œ°_°©us
 = 
vÆ
;

209 
vÆ
 >>= 5;

211 i‡(
_°©e
.
blök_îr‹
 =
BlökEº‹_N⁄e
)

213 
vÆ
)

215 
LTC4155_CHARGER_CONSTANT_CURRENT
:

216 
LTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_GT_VCX
:

217 
LTC4155_CHARGER_LOW_BATTERY_VOLTAGE
:

219 i‡((
_°©e
.
b©ãry_nŸ_¥e£¡
 =
Ál£
) &&

220 (
_…c4155_œ°_good
 & (
LTC4155_WALLSNS_GOOD
 | 
LTC4155_USBSNS_GOOD
)))

223 
	`ch¨ge_nŸify
(
åue
);

227 
LTC4155_CHARGER_CONSTANT_VOLTAGE_VPROG_LT_VCX
:

235 
	`ch¨ge_nŸify
(
Ál£
);

241 
ªsu…
 = 
åue
;

242 
_…c4155_h™dÀ_Áû
:

243 
	`_…c4155_˛ór_úq
();

245  
ªsu…
;

246 
	}
}

248 
	#LTC4155_CHARGE_CURRENT_LIMIT
 0x7

249 

	)

250 
boﬁ
 
	$…c4155_£t_ch¨ge_cuºít_limô
(
uöt8_t
 
≥r˚¡age
)

252 
uöt8_t
 
vÆ
 = 0;

253 
uöt8_t
 
limô
 = 0;

255 i‡(
≥r˚¡age
 > 100)

256  
Ál£
;

257 i‡(
≥r˚¡age
 == 100)

258 
≥r˚¡age
 = 0xF;

259 i‡(
≥r˚¡age
 > 12)

261 
uöt16_t
 
l
 = (((uöt16_t)
≥r˚¡age
 - 12) * 100) / 586;

262 
limô
 = (
uöt8_t
)
l
;

265 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_CHARGE
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

266  
Ál£
;

268 
vÆ
 &((0x1 << 
LTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
) - 1);

270 
vÆ
 |(
limô
 << 
LTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
);

272 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_CHARGE
, 
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

273  
Ál£
;

277  
åue
;

278 
	}
}

280 
boﬁ
 
	$…c4155_öô
(
boﬁ
 
dißbÀ_ch¨gî
)

282 
	`io_öput_pö
(
USBPM_IRQ
);

283 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

284 
	`io_£t_pö
(
USBPM_IRQ
);

286 #ifde‡
I2C_REWORK


287 
	`i2c_öô_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
_…c4155_puŒ_up
);

289 i‡–
	`_…c4155_h™dÀ_úq
(Ë=
Ál£
)

290  
Ál£
;

292 c⁄° 
uöt8_t
 
ch¨ge_°©e
 =

293 (
dißbÀ_ch¨gî
 ? 0x0 : 
LTC4155_CHARGE_CURRENT_LIMIT
Ë<< 
LTC4155_SHIFTS_CHARGE_CURRENT_LIMIT
 |

294 0x3 << 
LTC4155_SHIFTS_CHARGE_FLOAT_VOLTAGE
 |

296 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_CHARGE
, 
ch¨ge_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

297  
Ál£
;

299 c⁄° 
uöt8_t
 
wÆl_°©e
 =

300 0x0 << 
LTC4155_SHIFTS_WALL_PRIORITY
 |

301 0x0 << 
LTC4155_SHIFTS_WALL_SAFETY_TIMER
 |

303 i‡(
	`i2c_wrôe_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_WRITE_ADDRESS
, 
LTC4155_REG_WALL
, 
wÆl_°©e
, 
_…c4155_puŒ_up
Ë=
Ál£
)

304  
Ál£
;

312 i‡(
	`_…c4155_h™dÀ_úq
(Ë=
Ál£
)

313  
Ál£
;

315  
åue
;

316 
	}
}

318 
boﬁ
 
	$…c4155_has_öãºu±
()

324  (
	`io_ã°_pö
(
USBPM_IRQ
Ë=
Ál£
);

325 
	}
}

327 
boﬁ
 
	$…c4155_h™dÀ_úq
()

329 
	`pmc_mask_úqs
(
åue
);

331 
boﬁ
 
ªsu…
 = 
	`_…c4155_h™dÀ_úq
();

333 
	`pmc_mask_úqs
(
Ál£
);

335  
ªsu…
;

336 
	}
}

338 
boﬁ
 
	$…c4155_¨m_shù_™d_°‹e
()

340  
åue
;

341 
	}
}

343 
boﬁ
 
	$…c4155_gë_thîmi°‹
(
uöt8_t
* 
vÆ
, 
boﬁ
* 
w¨nög
)

345 
boﬁ
 
ªsu…
 = 
Ál£
;

346 
uöt8_t
 
_vÆ
 = 0;

348 
	`pmc_mask_úqs
(
åue
);

350 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_THERMISTOR
, &
_vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

351 
…c4155_gë_thîmi°‹_Áû
;

353 i‡(
vÆ
)

354 (*
vÆ
Ë
_vÆ
 >> 1;

356 i‡(
w¨nög
)

357 (*
w¨nög
Ë((
_vÆ
 & 0x01) != 0x00);

359 
ªsu…
 = 
åue
;

360 
…c4155_gë_thîmi°‹_Áû
:

361 
	`pmc_mask_úqs
(
Ál£
);

362  
ªsu…
;

363 
	}
}

365 
	$…c4155_dump
()

367 
	`pmc_mask_úqs
(
åue
);

369 
uöt8_t
 
vÆ
 = 0x00;

370 
boﬁ
 
w¨nög
 = 
Ál£
;

372 i‡(
	`…c4155_gë_thîmi°‹
(&
vÆ
, &
w¨nög
Ë=
Ál£
)

373 
…c4155_dump_Áû
;

375 
	`debug_log_ex
("\tTHRM", 
Ál£
);

376 i‡(
w¨nög
)

377 
	`debug_log_ex
("!", 
Ál£
);

378 
	`debug_log_byã
(
vÆ
);

380 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_WALL
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

381 
…c4155_dump_Áû
;

383 
	`debug_log_ex
("\tWALL", 
Ál£
);

384 
	`debug_log_hex
(
vÆ
);

386 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_GOOD
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

387 
…c4155_dump_Áû
;

389 
	`debug_log_ex
("\t4155GO ", 
Ál£
);

390 
	`debug_log_hex
(
vÆ
);

392 i‡(
	`i2c_ªad2_ex
(
CHRG_SDA
, 
CHRG_SCL
, 
LTC4155_READ_ADDRESS
, 
LTC4155_REG_STATUS
, &
vÆ
, 
_…c4155_puŒ_up
Ë=
Ál£
)

393 
…c4155_dump_Áû
;

395 
	`debug_log_ex
("\t4155ST ", 
Ál£
);

396 
	`debug_log_hex
(
vÆ
);

398 
…c4155_dump_Áû
:

399 
	`pmc_mask_úqs
(
Ál£
);

400 
	}
}

	@firmware/e300/rev_c/ltc4155.h

8 #i‚de‡
LTC4155_H_


9 
	#LTC4155_H_


	)

11 
	~<°dboﬁ.h
>

12 
	~<°döt.h
>

14 #i‚de‡
CHARGER_TI


16 
boﬁ
 
…c4155_öô
(boﬁ 
dißbÀ_ch¨gî
);

17 
boﬁ
 
…c4155_has_öãºu±
();

18 
boﬁ
 
…c4155_h™dÀ_úq
();

19 
…c4155_dump
();

20 
boﬁ
 
…c4155_£t_ch¨ge_cuºít_limô
(
uöt8_t
 
≥r˚¡age
);

	@firmware/e300/rev_c/main.c

5 
	~"c⁄fig.h
"

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<°dio.h
>

10 
	~<avr/io.h
>

11 
	~<utû/dñay.h
>

12 
	~<avr/¶ìp.h
>

13 
	~<avr/öãºu±.h
>

15 
	~"globÆ.h
"

16 
	~"powî.h
"

17 
	~"debug.h
"

18 
	~"îr‹.h
"

19 
	~"…c3675.h
"

20 #ifde‡
CHARGER_TI


21 
	~"bq24190.h
"

23 
	~"…c4155.h
"

26 
	#AUTO_POWER_ON


	)

28 
	#INITIAL_DELAY
 250

29 

	)

30 
	gFUSES
 = {

31 .
low
 = (
FUSE_CKSEL0
 & 
FUSE_SUT0
 & 
FUSE_CKDIV8
),

32 .
	ghigh
 = (
FUSE_EESAVE
 & 
FUSE_SPIEN
),

35 vﬁ©ûê
STATE
 
	g_°©e
;

68 
boﬁ
 
	$pmc_mask_úqs
(
boﬁ
 
mask
)

70 i‡(
_°©e
.
öãºu±s_íabÀd
 =
Ál£
)

71  
Ál£
;

73 i‡(
mask
)

75 i‡(
_°©e
.
öãºu±_dïth
 == 0)

76 
	`˛i
();

77 ++
_°©e
.
öãºu±_dïth
;

81 i‡(
_°©e
.
öãºu±_dïth
 == 0)

82  
Ál£
;

84 --
_°©e
.
öãºu±_dïth
;

85 i‡(
_°©e
.
öãºu±_dïth
 == 0)

86 
	`£i
();

89  
åue
;

90 
	}
}

92 
	$maö
()

94 
	`_dñay_ms
(
INITIAL_DELAY
);

98 
	`mem£t
((*)&
_°©e
, 0x00, (
STATE
));

100 
	`debug_öô
();

101 
	`debug_blök
(1);

104 
	`debug_log
("Hello world");

106 
	`£t_¶ìp_mode
(
SLEEP_MODE_PWR_DOWN
);

113 
TCCR0A
 = 
	`_BV
(
CTC0
);

114 
OCR0A
 = 244;

115 
TIMSK0
 = 
	`_BV
(
OCIE0A
);

117 
boﬁ
 
öô_ªsu…
 = 
	`powî_öô
();

118 
	`debug_log_ex
("Inô", 
Ál£
);

119 
	`_debug_log
(
öô_ªsu…
 ? "+" : "-");

120 
	`debug_blök
(2);

124 #ifde‡
AUTO_POWER_ON


125 
	`powî_⁄
();

126 
	`debug_log
("Power");

127 
	`debug_blök
(3);

134 
_°©e
.
öãºu±s_íabÀd
 = 
åue
;

135 
	`£i
();

137 
	`asm
("nop");

139 
_°©e
.
wake_up
 = 
Ál£
;

141 
boﬁ
 
⁄e_m‹e
 = 
Ál£
;

143 
åue
)

145 
⁄e_m‹e
 = 
Ál£
;

146 #ifde‡
CHARGER_TI


147 i‡(
_°©e
.
bq24190_úq
)

149 
	`bq24190_h™dÀ_úq
();

151 
_°©e
.
bq24190_úq
 = 
Ál£
;

154 i‡((
_°©e
.
…c4155_úq
) )

156 
	`…c4155_h™dÀ_úq
();

158 
_°©e
.
…c4155_úq
 = 
Ál£
;

161 i‡(
_°©e
.
c‹e_powî_bad
)

163 i‡(
	`powî_is_subsys_⁄
(
PS_FPGA
))

165 
	`_dñay_ms
(1);

167 i‡(
	`çs54478_is_powî_good
(Ë=
Ál£
)

169 
	`debug_log
("ML:FPGA!");

172 
_°©e
.
powî_off
 = 
åue
;

178 
	`pmc_£t_blök_îr‹
(
BlökEº‹_FPGA_Powî
);

182 
_°©e
.
c‹e_powî_bad
 = 
Ál£
;

185 i‡((
_°©e
.
…c3675_úq
) )

187 
	`debug_log
("ML:3675+");

189 
	`…c3675_h™dÀ_úq
();

191 i‡(
	`…c3675_is_powî_good
(
	`…c3675_gë_œ°_°©us
()Ë=
Ál£
)

193 
	`debug_log
("ML:3675!");

196 
_°©e
.
powî_off
 = 
åue
;

199 
_°©e
.
…c3675_úq
 = 
Ál£
;

202 i‡(
_°©e
.
powî_off
)

204 
	`debug_log
("ML:Off..");

206 
	`powî_off
();

208 
_°©e
.
powî_off
 = 
Ál£
;

209 
_°©e
.
wake_up
 = 
Ál£
;

211 i‡(
_°©e
.
wake_up
)

213 
	`_dñay_ms
(1);

216 i‡(
	`…c3675_is_wakög_up
())

218 
	`debug_log
("ML:On..");

220 
	`powî_⁄
();

223 
_°©e
.
wake_up
 = 
Ál£
;

228 i‡((
_°©e
.
blök_îr‹
 !
BlökEº‹_N⁄e
Ë&& (_°©e.
blök_œ°_lo›
 !_°©e.
blök_lo›s
))

232 
boﬁ
 
…c3675_u£_œ°_°©us
 = 
Ál£
;

242 
_°©e
.
blök_îr‹
)

244 
BlökEº‹_LTC3675_UndîVﬁège
:

245 
BlökEº‹_LTC3675_OvîTem≥øtuª
:

246 
BlökEº‹_DRAM_Powî
:

247 
BlökEº‹_3_3V_PîùhîÆs_Powî
:

248 
BlökEº‹_1_8V_PîùhîÆs_Powî
:

249 
BlökEº‹_TX_Powî
:

250 i‡(((
…c3675_u£_œ°_°©us
Ë&& (
	`…c3675_°©us_to_îr‹
(
	`…c3675_gë_œ°_°©us
()Ë!
BlökEº‹_N⁄e
)) ||

251 ((
…c3675_u£_œ°_°©us
 =
Ál£
Ë&& (
	`…c3675_check_°©us
(Ë!
BlökEº‹_N⁄e
)))

253 
	`debug_log
("BE:3675-");

254 
ˇn˚l_blök_îr‹
;

255 
BlökEº‹_FPGA_Powî
:

256 i‡(
	`çs54478_is_powî_good
(Ë=
Ál£
)

258 
	`debug_log
("BE:FPGA-");

259 
ˇn˚l_blök_îr‹
;

261 
ˇn˚l_blök_îr‹
:

263 
	`pmc_£t_blök_îr‹
(
BlökEº‹_N⁄e
);

271 #i‚de‡
CHARGER_TI


272 i‡(
	`…c4155_has_öãºu±
())

274 
	`debug_log
("BE:4155");

276 
_°©e
.
…c4155_úq
 = 
åue
;

277 
⁄e_m‹e
 = 
åue
;

280 i‡(
	`…c3675_has_öãºu±
())

282 
	`debug_log
("BE:3675");

284 
_°©e
.
…c3675_úq
 = 
åue
;

285 
⁄e_m‹e
 = 
åue
;

288 i‡(
	`powî_is_subsys_⁄
(
PS_FPGA
))

290 i‡(
	`çs54478_is_powî_good
(Ë=
Ál£
)

292 
	`debug_log
("BE:FPGA!");

294 
_°©e
.
c‹e_powî_bad
 = 
åue
;

295 
⁄e_m‹e
 = 
åue
;

301 
_°©e
.
blök_œ°_lo›
 = _°©e.
blök_lo›s
;

305 i‡((
_°©e
.
a˘ive_timîs
 =0Ë&& (
⁄e_m‹e
 =
Ál£
))

307 
	`debug_log
("^");

308 
	`¶ìp_mode
();

309 
	`debug_log
("$");

314 
	}
}

316 
uöt8_t
 
	$pmc_gë_blök_îr‹
()

318  
_°©e
.
blök_îr‹
;

319 
	}
}

321 
	$pmc_£t_blök_îr‹
(
uöt8_t
 
cou¡
)

323 i‡((
_°©e
.
blök_îr‹
 !
BlökEº‹_N⁄e
Ë&& (
cou¡
 != BlinkError_None))

325 i‡(
_°©e
.
blök_îr‹
 =
cou¡
)

328 i‡(
cou¡
 =
BlökEº‹_N⁄e
)

330 
	`debug_log
("BLNK-");

331 
_°©e
.
blök_°›
 = 
åue
;

338 
	`debug_log_ex
("BLNK ", 
Ál£
);

339 
	`debug_log_byã
(
cou¡
);

341 
_°©e
.
blök_îr‹
 = 
cou¡
;

342 
_°©e
.
blök_lo›s
 = 0;

343 
_°©e
.
blök_œ°_lo›
 = 0;

344 
_°©e
.
blökî_°©e
 = 0;

345 
_°©e
.
blök_°›
 = 
Ál£
;

347 
	`ch¨ge_£t_Àd
(
Ál£
);

349 
TCNT0
 = 0;

350 i‡((
TCCR0A
 & 0x07) == 0x00)

351 
_°©e
.
a˘ive_timîs
++;

352 
TCCR0A
 |= 0x05;

353 
	}
}

355 
	$ISR
(
TIMER0_COMPA_ve˘
)

357 
	`pmc_mask_úqs
(
åue
);

359 i‡(
_°©e
.
blökî_°©e
 < (2 * _°©e.
blök_îr‹
 + 1))

360 
	`ch¨ge_£t_Àd
((
_°©e
.
blökî_°©e
 % 2) == 1);

362 
_°©e
.
blökî_°©e
++;

364 i‡(
_°©e
.
blökî_°©e
 =(2 * _°©e.
blök_îr‹
 + 1 + 1))

366 
_°©e
.
blökî_°©e
 = 0;

368 i‡(
_°©e
.
blök_°›
)

370 i‡((
TCCR0A
 & 0x07) != 0x00)

371 
_°©e
.
a˘ive_timîs
--;

372 
TCCR0A
 &= ~0x07;

374 
_°©e
.
blök_îr‹
 = 
BlökEº‹_N⁄e
;

376 
	`debug_log
("BLNK.");

380 
_°©e
.
blök_lo›s
++;

384 
	`pmc_mask_úqs
(
Ál£
);

385 
	}
}

	@firmware/e300/rev_c/power.c

5 
	~"c⁄fig.h
"

6 
	~"powî.h
"

8 
	~<°rög.h
>

9 
	~<utû/dñay.h
>

10 
	~<avr/io.h
>

11 
	~<avr/öãºu±.h
>

12 
	~<avr/¶ìp.h
>

14 
	~"io.h
"

15 
	~"i2c.h
"

16 
	~"…c3675.h
"

17 
	~"…c4155.h
"

18 
	~"bq24190.h
"

19 
	~"debug.h
"

20 
	~"globÆ.h
"

21 
	~"îr‹.h
"

23 
	#BLINK_ERROR_DELAY
 250

24 

	)

25 
	#POWER_DEFAULT_DELAY
 50

26 
	#POWER_DEFAULT_RETRIES
 10

	)

28 
	#BATT_MIN_VOLTAGE
 2000

29 

	)

30 
	#ARRAY_SIZE
(
a
Ë(◊)/◊[0]))

	)

31 
	#ZERO_MEMORY
(
s
Ë
	`mem£t
(&s, 0x00, (s))

	)

33 #i‚de‡
I2C_REWORK


34 
io_pö_t
 
	gPWR_SDA
 = 
IO_PC
(4);

35 
io_pö_t
 
	gPWR_SCL
 = 
IO_PC
(5);

37 
io_pö_t
 
	gUSB_RESETn

IO_PA
(2);

42 #ifde‡
DDR3L


43 
	#DRAM_VOLTAGE
 1350

44 #ñ£

	)

45 
	#DRAM_VOLTAGE
 0

47 

	)

48 
	sªg_c⁄fig
 {

49 
öt16_t
 
	mvﬁège
;

50 
uöt8_t
 
	mdevi˚
;

51 
uöt8_t
 
	maddªss
;

52 
boﬁ
 
	mpowîed
;

53 } 
	gdeÁu…_ªg_c⁄fig
[] = {

54 { 0000, 
REG_UNKNOWN
, 0 },

55 { 1000, 
REG_TPS54478
, 0 },

56 { 
DRAM_VOLTAGE
, 
REG_LTC3675
, 
LTC3675_REG_1
 },

57 { 0, 
REG_LTC3675
, 
LTC3675_REG_3
 },

58 { 0, 
REG_LTC3675
, 
LTC3675_REG_6
 },

59 { 0, 
REG_LTC3675
, 
LTC3675_REG_5
 }

74 
boﬁ
 
	$powî_is_subsys_⁄
(
powî_subsy°em_t
 
ödex
)

76 i‡((
ödex
 <
PS_UNKNOWN
Ë|| (ödex >
PS_MAX
))

77  
Ál£
;

79  
deÁu…_ªg_c⁄fig
[
ödex
].
powîed
;

80 
	}
}

82 
boﬁ
 
	$…c3675_ªg_hñ≥r
(
uöt8_t
 
addªss
)

84 
öt8_t
 
i
 = 0; i < 
	`ARRAY_SIZE
(
deÁu…_ªg_c⁄fig
); ++i)

86 
ªg_c⁄fig
* 
ªg
 = 
deÁu…_ªg_c⁄fig
 + 
i
;

87 i‡((
ªg
->
devi˚
 =
REG_LTC3675
Ë&& (ªg->
addªss
 ==áddress))

88  
ªg
->
powîed
;

90 #ifde‡
DEBUG_SAFETY


91 
	`debug_log_ex
("!3675HLP ", 
Ál£
);

92 
	`debug_log_hex
(
addªss
);

94  
Ál£
;

96 
	}
}

98 
io_pö_t
 
	gAVR_CS
 = 
IO_PB
(2);

99 
io_pö_t
 
	gAVR_MOSI
 = 
IO_PB
(3);

100 
io_pö_t
 
	gAVR_MISO
 = 
IO_PB
(4);

101 
io_pö_t
 
	gAVR_SCK
 = 
IO_PB
(5);

103 
io_pö_t
 
	gFTDI_RESETn
 = 
IO_PB
(6);

104 
io_pö_t
 
	gFTDI_CBUS3
 = 
IO_PB
(7);

105 
io_pö_t
 
	gUSB_CLK_EN
 = 
IO_PA
(1);

107 
io_pö_t
 
	gAVR_RESET
 = 
IO_PC
(6);

108 
io_pö_t
 
	gAVR_IRQ
 = 
IO_PD
(5);

112 
	#TPS54478_START_DELAY
 10

113 

	)

114 #ifde‡
ATTINY88_DIP


115 
io_pö_t
 
	gCORE_PWR_EN
 = 
IO_PC
(1);

117 
io_pö_t
 
	gCORE_PWR_EN
 = 
IO_PA
(3);

119 
io_pö_t
 
	gCORE_PGOOD
 = 
IO_PB
(0);

121 
	$çs54478_öô
(
boﬁ
 
íabÀ
)

123 
	`çs54478_£t_powî
(
íabÀ
);

124 
	`io_˛ór_pö
(
CORE_PWR_EN
);

126 
	`io_öput_pö
(
CORE_PGOOD
);

127 #i‡!
	`deföed
(
DEBUG
Ë&& !deföed(
ATTINY88_DIP
)

128 
	`io_£t_pö
(
CORE_PGOOD
);

134 
	}
}

136 
	$çs54478_£t_powî
(
boﬁ
 
⁄
)

138 
	`debug_log_ex
("54478", 
Ál£
);

142 i‡(
⁄
)

144 
	`io_öput_pö
(
CORE_PWR_EN
);

145 
	`_dñay_ms
(
TPS54478_START_DELAY
);

147 
	`debug_log
("+");

151 
	`io_ouçut_pö
(
CORE_PWR_EN
);

154 
	`debug_log
("-");

158 
	}
}

160 
boﬁ
 
	$çs54478_is_powî_good
()

162  
	`io_ã°_pö
(
CORE_PGOOD
);

163 
	}
}

167 
io_pö_t
 
	gCHARGE
 = 
IO_PD
(1);

169 #i‡!
deföed
(
ATTINY88_DIP
Ë&& deföed(
LED_POLARITY
)

170 
io_pö_t
 
	gPOWER_LED
 = 
IO_PC
(7);

172 
	$powî_£t_Àd_ex
(
boﬁ
 
⁄
, boﬁ 
sw≠
)

174 i‡(
sw≠
)

176 i‡((
⁄
 =
Ál£
Ë&& ( 
_°©e
.
b©ãry_ch¨gög
))

178 
	`ch¨ge_£t_Àd
(
åue
);

183 
	`io_˛ór_pö
(
CHARGE
);

184 
	`io_íabÀ_pö
(
POWER_LED
, 
⁄
);

185 
	}
}

187 
	$powî_£t_Àd
(
boﬁ
 
⁄
)

189 
	`powî_£t_Àd_ex
(
⁄
, 
åue
);

190 
	}
}

193 
	$ch¨ge_£t_Àd_ex
(
boﬁ
 
⁄
, boﬁ 
sw≠
)

195 #ifde‡
ATTINY88_DIP


199 #ifde‡
LED_POLARITY


200 
	`io_˛ór_pö
(
POWER_LED
);

205 #ifde‡
ATTINY88_DIP


206 
	`io_íabÀ_pö
(
CHARGE
, !
⁄
);

208 
	`io_íabÀ_pö
(
CHARGE
, 
⁄
);

210 #ifde‡
LED_POLARITY


211 i‡(
sw≠
)

213 i‡((
⁄
 =
Ál£
Ë&& (
_°©e
.
powîed
))

214 
	`powî_£t_Àd
(
åue
);

219 
	}
}

221 
	$ch¨ge_£t_Àd
(
boﬁ
 
⁄
)

223 
	`ch¨ge_£t_Àd_ex
(
⁄
, 
åue
);

224 
	}
}

226 
	$ch¨ge_nŸify
(
boﬁ
 
ch¨gög
)

228 
_°©e
.
b©ãry_ch¨gög
 = 
ch¨gög
;

230 
	`ch¨ge_£t_Àd
(
ch¨gög
);

231 
	}
}

235 
	$powî_sig«l_öãºu±
()

237 
	`io_£t_pö
(
AVR_IRQ
);

238 
	}
}

242 #i‡!
deföed
(
DEBUG
Ë&& !(deföed(
ENABLE_SERIAL
Ë&& deföed(
ATTINY88_DIP
))

243 
io_pö_t
 
	gPS_POR
 = 
IO_PD
(6);

244 
	#PS_POR_AVAILABLE


	)

246 
io_pö_t
 
	gPS_SRST
 = 
IO_PD
(7);

248 
	#FPGA_RESET_DELAY
 10

249 

	)

250 
	$Âga_ª£t
(
boﬁ
 
dñay
)

252 #ifde‡
PS_POR_AVAILABLE


253 
	`io_˛ór_pö
(
PS_POR
);

255 
	`io_˛ór_pö
(
PS_SRST
);

257 i‡(
dñay
)

258 
	`_dñay_ms
(
FPGA_RESET_DELAY
);

259 #ifde‡
PS_POR_AVAILABLE


260 
	`io_íabÀ_pö
(
PS_POR
, 
åue
);

262 
	`io_íabÀ_pö
(
PS_SRST
, 
åue
);

263 
	}
}

267 
io_pö_t
 
	gVBAT
 = 
IO_PC
(0);

269 
	$b©ãry_öô
()

272 
DIDR0
 |= 0x1;

274 
ADMUX
 = (1 << 
REFS0
)

275 | (0 << 
ADLAR
)

276 | (0 << 
MUX0
);

278 
ADCSRA
 = (0x7 << 
ADPS0
);

279 
	}
}

281 
uöt16_t
 
	$b©ãry_gë_vﬁège
()

293 
ADCSRA
 |(1 << 
ADEN
);

295 
ADCSRA
 |(1 << 
ADSC
);

297 
ADCSRA
 & (1 << 
ADSC
));

299  
uöt32_t
 
vﬁège
 = (
ADCH
 << 8Ë| (
ADCL
 << 0);

300 #ifde‡
ATTINY88_DIP


301 
vﬁège
 = (voltage * 32227) / 10000;

303 
vﬁège
 = (voltage * 56961) / 10000;

305 
ADCSRA
 &~(1 << 
ADEN
);

307  (
uöt16_t
)
vﬁège
;

308 
	}
}

312 
	$blök_îr‹_£quí˚
(
uöt8_t
 
Àn
)

314 
	`ch¨ge_£t_Àd
(
Ál£
);

315 
	`_dñay_ms
(
BLINK_ERROR_DELAY
 * 2);

317 ; 
Àn
 > 0;Üen--) {

318 
	`ch¨ge_£t_Àd
(
åue
);

319 
	`_dñay_ms
(
BLINK_ERROR_DELAY
);

320 
	`ch¨ge_£t_Àd
(
Ál£
);

321 
	`_dñay_ms
(
BLINK_ERROR_DELAY
);

326 
	}
}

328 
	spowî_∑øms
 {

329 
powî_subsy°em_t
 
	msubsys
;

330 
boﬁ
 
	míabÀ
;

331 
uöt8_t
 
	mªåy
;

333 } 
	tpowî_∑øms_t
;

335 
boﬁ
 
	$_powî_up_Âga
(
powî_∑øms_t
* 
∑øms
)

337 i‡(
∑øms
->
subsys
 !
PS_FPGA
)

338  
Ál£
;

340 i‡(
∑øms
->
íabÀ
 =
Ál£
)

345 i‡(
∑øms
->
ªåy
 == 0)

347 
	`io_˛ór_pö
(
PS_SRST
);

348 #ifde‡
PS_POR_AVAILABLE


349 
	`io_˛ór_pö
(
PS_POR
);

351 
	`çs54478_£t_powî
(
Ál£
);

355  
åue
;

360 i‡(
∑øms
->
ªåy
 == 0)

361 
	`çs54478_£t_powî
(
åue
);

363  
	`çs54478_is_powî_good
();

364 
	}
}

366 
boﬁ
 
	$_powî_up_ªg
(
powî_∑øms_t
* 
∑øms
)

368 i‡((
∑øms
->
subsys
 > 
PS_TX
Ë|| (∑øms->subsy†< 
PS_VDRAM
))

369  
Ál£
;

371 
ªg_c⁄fig
* 
cfg
 = 
deÁu…_ªg_c⁄fig
 + 
∑øms
->
subsys
;

373 i‡(
∑øms
->
íabÀ
 =
Ál£
)

374  
	`…c3675_íabÀ_ªg
(
cfg
->
addªss
, 
Ál£
);

376 i‡(
cfg
->
vﬁège
 > 0)

378 i‡(
	`…c3675_£t_vﬁège
(
cfg
->
addªss
, cfg->
vﬁège
Ë=
Ál£
)

379  
Ál£
;

382  
	`…c3675_íabÀ_ªg
(
cfg
->
addªss
, 
åue
);

383 
	}
}

385 
boﬁ
 
	$_powî_íabÀ_subsys
(
powî_∑øms_t
* 
∑øms
)

387 
∑øms
->
subsys
)

389 
PS_FPGA
:

390  
	`_powî_up_Âga
(
∑øms
);

394  
	`_powî_up_ªg
(
∑øms
);

397  
Ál£
;

398 
	}
}

400 
boﬁ
 
	$powî_íabÀ
(
powî_subsy°em_t
 
subsys
, 
boﬁ
 
⁄
)

402 
powî_∑øms_t
 
∑øms
;

403 
	`ZERO_MEMORY
(
∑øms
);

404 
∑øms
.
subsys
 = subsys;

405 
∑øms
.
íabÀ
 = 
⁄
;

407  
	`_powî_íabÀ_subsys
(&
∑øms
);

408 
	}
}

410 
	$boﬁ
 (*
	tboŸ_fun˘i⁄_t
)(
	tpowî_∑øms_t
*);

412 
	sboŸ_°ï
 {

413 
powî_subsy°em_t
 
subsys
;

419 } 
boŸ_°ïs
[] = {

420 { 
PS_FPGA
, },

421 { 
PS_VDRAM
, },

422 { 
PS_PERIPHERALS_1_8
, },

423 { 
PS_PERIPHERALS_3_3
, },

424 { 
PS_TX
, }

425 
	}
};

437 
boﬁ
 
	$powî_öô
()

439 
	`io_ouçut_pö
(
CHARGE
);

440 #ifde‡
LED_POLARITY


441 
	`io_ouçut_pö
(
POWER_LED
);

444 
	`ch¨ge_£t_Àd
(
åue
);

446 
	`b©ãry_öô
();

448 
	`çs54478_öô
(
åue
);

449 #i‚de‡
I2C_REWORK


450 
	`i2c_öô
(
PWR_SDA
, 
PWR_SCL
);

455 
	`io_öput_pö
(
USB_RESETn
);

456 
	`io_ouçut_pö
(
FTDI_RESETn
);

457 
	`io_ouçut_pö
(
USB_CLK_EN
);

458 
	`io_öput_pö
(
FTDI_CBUS3
);

460 #ifde‡
CHARGER_TI


461 i‡(
	`bq24190_öô
(
åue
Ë=
Ál£
)

462  
Ál£
;

464 i‡(
	`…c4155_öô
–
åue
 ) =
Ál£
)

465  
Ál£
;

467 #ifde‡
CHARGER_TI


468 
	`_dñay_ms
(1000);

470 
	`_dñay_ms
(25);

472 
uöt16_t
 
b©t_vﬁège
 = 
	`b©ãry_gë_vﬁège
();

473 
	`debug_log_ex
("Vb ", 
Ál£
);

474 
	`debug_log_byã
((
uöt8_t
)(
b©t_vﬁège
 / 100));

477 i‡(
b©t_vﬁège
 < 
BATT_MIN_VOLTAGE
)

479 
_°©e
.
b©ãry_nŸ_¥e£¡
 = 
åue
;

485 #ifde‡
CHARGER_TI


486 
	`bq24190_toggÀ_ch¨gî
(
åue
);

488 
	`…c4155_£t_ch¨ge_cuºít_limô
(50);

492 i‡(
	`…c3675_öô
(
…c3675_ªg_hñ≥r
Ë=
Ál£
)

493  
Ál£
;

494 #ifde‡
PS_POR_AVAILABLE


495 
	`io_ouçut_pö
(
PS_POR
);

497 
	`io_ouçut_pö
(
PS_SRST
);

499 #ifde‡
PS_POR_AVAILABLE


500 
	`io_˛ór_pö
(
PS_POR
);

502 
	`io_˛ór_pö
(
PS_SRST
);

512 
	`io_öput_pö
(
AVR_RESET
);

515 
	`io_öput_pö
(
AVR_IRQ
);

520 
EICRA
 = 
	`_BV
(
ISC01
Ë| _BV(
ISC00
Ë| _BV(
ISC10
) ;

522 
EIMSK
 = 
	`_BV
(
INT1
Ë| _BV(
INT0
);

524 
PCMSK0
 = 
	`_BV
(
PCINT1
Ë| _BV(
PCINT0
);

525 
PCMSK2
 = 
	`_BV
(
PCINT16
) ;

526 
PCICR
 = 
	`_BV
(
PCIE2
Ë| _BV(
PCIE0
);

537 
TCCR1B
 = 
	`_BV
(
WGM12
);

538 
OCR1A
 = 15624 * 2;

539 
TIMSK1
 = 
	`_BV
(
OCIE1A
);

541 
	`ch¨ge_£t_Àd
(
Ál£
);

543  
åue
;

544 
	}
}

546 
boﬁ
 
	$powî_⁄
()

548 
	`pmc_mask_úqs
(
åue
);

552 
boﬁ
 
œ°_powî_Àd_°©e
 = 
Ál£
;

557 
	`powî_£t_Àd
(
œ°_powî_Àd_°©e
);

559 
	`Âga_ª£t
(
åue
);

561 
uöt8_t
 
°ï_cou¡
, 
ªåy
;

562 
°ï_cou¡
 = 0; sãp_cou¡ < 
	`ARRAY_SIZE
(
boŸ_°ïs
); step_count++)

564 
œ°_powî_Àd_°©e
 = !last_power_led_state;

565 
	`powî_£t_Àd
(
œ°_powî_Àd_°©e
);

571 
boŸ_°ï
* 
°ï
 = 
boŸ_°ïs
 + 
°ï_cou¡
;

572 i‡–(
°ï
->
subsys
 =
PS_UNKNOWN
))

575 
	`debug_log_ex
("PWR ", 
Ál£
);

576 
	`debug_log_byã_ex
(
°ï
->
subsys
, 
åue
);

578 
powî_∑øms_t
 
∑øms
;

580 
ªåy
 = 0;Ñëry < 
POWER_DEFAULT_RETRIES
;Ñetry++)

582 
	`ZERO_MEMORY
(
∑øms
);

583 
∑øms
.
subsys
 = 
°ï
->subsys;

584 
∑øms
.
íabÀ
 = 
åue
;

585 
∑øms
.
ªåy
 =Ñetry;

588  (
	`_powî_íabÀ_subsys
(&
∑øms
))))

591 
deÁu…_ªg_c⁄fig
[
°ï
->
subsys
].
powîed
 = 
åue
;

593 
	`debug_log
("+");

602 
	`debug_log
("?");

604 i‡((
ªåy
 < 
POWER_DEFAULT_RETRIES
) )

605 
	`_dñay_ms
–
POWER_DEFAULT_DELAY
);

610 i‡(
ªåy
 = 
POWER_DEFAULT_RETRIES
)

614 i‡(
°ï_cou¡
 !
	`ARRAY_SIZE
(
boŸ_°ïs
))

616 
	`debug_log
("x");

623 
	`pmc_£t_blök_îr‹
(
°ï_cou¡
 + 
BlökEº‹_FPGA_Powî
);

625 
	`pmc_mask_úqs
(
Ál£
);

627  
Ál£
;

632 
	`io_£t_pö
(
USB_CLK_EN
);

633 
	`_dñay_ms
(200);

634 
	`io_£t_pö
(
FTDI_RESETn
);

635 
	`Âga_ª£t
(
Ál£
);

636 
	`_dñay_ms
(100);

645 
_°©e
.
powîed
 = 
åue
;

648 
	`pmc_mask_úqs
(
Ál£
);

650 
	`powî_£t_Àd
(
åue
);

652 i‡(
_°©e
.
b©ãry_ch¨gög
)

654 
	`_dñay_ms
(500*2);

655 
	`ch¨ge_£t_Àd
(
åue
);

658  
åue
;

659 
	}
}

661 
uöt8_t
 
	$powî_off
()

663 
	`pmc_mask_úqs
(
åue
);

665 
	`io_˛ór_pö
(
PS_SRST
);

667 
	`Âga_ª£t
(
åue
);

668 
	`io_˛ór_pö
(
USB_CLK_EN
);

670 
boﬁ
 
œ°_powî_Àd_°©e
 = 
åue
;

679 
öt8_t
 
°ï_cou¡
, 
ªåy
;

680 
°ï_cou¡
 = 
	`ARRAY_SIZE
(
boŸ_°ïs
) - 1; step_count >= 0; step_count--)

682 
œ°_powî_Àd_°©e
 = !last_power_led_state;

683 
	`powî_£t_Àd
(
œ°_powî_Àd_°©e
);

687 
boŸ_°ï
* 
°ï
 = 
boŸ_°ïs
 + 
°ï_cou¡
;

688 i‡–(
°ï
->
subsys
 =
PS_UNKNOWN
))

691 
powî_∑øms_t
 
∑øms
;

693 
ªåy
 = 0;Ñëry < 
POWER_DEFAULT_RETRIES
;Ñetry++)

695 
	`ZERO_MEMORY
(
∑øms
);

696 
∑øms
.
subsys
 = 
°ï
->subsys;

697 
∑øms
.
íabÀ
 = 
Ál£
;

698 
∑øms
.
ªåy
 =Ñetry;

701  (
	`_powî_íabÀ_subsys
(&
∑øms
))))

704 
deÁu…_ªg_c⁄fig
[
°ï
->
subsys
].
powîed
 = 
Ál£
;

708 i‡((
ªåy
 < 
POWER_DEFAULT_RETRIES
) )

709 
	`_dñay_ms
–
POWER_DEFAULT_DELAY
);

714 i‡(
ªåy
 = 
POWER_DEFAULT_RETRIES
)

718 i‡(
°ï_cou¡
 != -1)

725 i‡(
	`pmc_gë_blök_îr‹
(Ë=
BlökEº‹_N⁄e
)

726 
	`pmc_£t_blök_îr‹
(
°ï_cou¡
 + 
BlökEº‹_FPGA_Powî
);

728 
	`pmc_mask_úqs
(
Ál£
);

730  (
°ï_cou¡
 + 1);

738 
_°©e
.
powîed
 = 
Ál£
;

740 
	`pmc_mask_úqs
(
Ál£
);

742 
	`powî_£t_Àd_ex
(
Ál£
, false);

743 
	`_dñay_ms
(500*2);

745 
	`powî_£t_Àd
(
Ál£
);

748 
	}
}

752 #ifde‡
DEBUG


754 #ifde‡
ATTINY88_DIP


755 
io_pö_t
 
	gDEBUG_1
 = 
IO_PB
(6);

756 
io_pö_t
 
	gDEBUG_2
 = 
IO_PB
(7);

761 
	$ISR
(
INT0_ve˘
)

764 
	`pmc_mask_úqs
(
åue
);

767 
	`debug_log
("\nINT0\n");

768 
_°©e
.
wake_up
 = 
åue
;

771 
	`pmc_mask_úqs
(
Ál£
);

772 
	}
}

774 
	$ISR
(
INT1_ve˘
)

777 
	`pmc_mask_úqs
(
åue
);

779 i‡(
	`…c3675_is_powî_buâ⁄_dïªs£d
())

781 
	`debug_log
("PWRBTN+");

783 
TCNT1
 = 0;

784 i‡((
TCCR1B
 & 0x07) == 0x00)

786 
_°©e
.
a˘ive_timîs
++;

787 
	`debug_log
("TIMER1+");

789 
TCCR1B
 |= 0x3;

797 
	`debug_log
("PWRBTN-");

802 i‡((
TCCR1B
 & 0x07) != 0x00)

804 
_°©e
.
a˘ive_timîs
--;

805 
	`debug_log
("TIMER1-");

807 
TCCR1B
 &= ~0x7;

815 
	`pmc_mask_úqs
(
Ál£
);

816 
	}
}

818 
	$ISR
(
TIMER1_COMPA_ve˘
)

821 
	`pmc_mask_úqs
(
åue
);

823 
	`debug_log
("TIMER1");

826 
TCCR1B
 &= ~0x7;

828 
_°©e
.
a˘ive_timîs
--;

830 i‡(
_°©e
.
powîed
)

832 
	`debug_log
("PWROFF");

834 
_°©e
.
powî_off
 = 
åue
;

842 
	`pmc_mask_úqs
(
Ál£
);

845 
	}
}

847 
	$ISR
(
PCINT0_ve˘
)

850 
	`pmc_mask_úqs
(
åue
);

861 i‡––
	`çs54478_is_powî_good
(Ë=
Ál£
))

863 
_°©e
.
c‹e_powî_bad
 = 
åue
;

865 #ifde‡
CHARGER_TI


866 i‡(
	`bq24190_has_öãºu±
())

868 
_°©e
.
bq24190_úq
 = 
åue
;

871 i‡(
	`…c4155_has_öãºu±
())

873 
_°©e
.
…c4155_úq
 = 
åue
;

877 
	`pmc_mask_úqs
(
Ál£
);

878 
	}
}

880 
	$ISR
(
PCINT2_ve˘
)

883 
	`pmc_mask_úqs
(
åue
);

892 i‡(
	`…c3675_has_öãºu±
())

895 
_°©e
.
…c3675_úq
 = 
åue
;

899 
	`pmc_mask_úqs
(
Ál£
);

900 
	}
}

	@firmware/e300/rev_c/power.h

1 #i‚de‡
POWER_H


2 
	#POWER_H


	)

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

7 
çs54478_öô
(
boﬁ
 
íabÀ
);

8 
çs54478_£t_powî
(
boﬁ
 
⁄
);

9 
boﬁ
 
çs54478_is_powî_good
();

11 
ch¨ge_£t_Àd
(
boﬁ
 
⁄
);

12 
ch¨ge_nŸify
(
boﬁ
 
ch¨gög
);

14 
powî_sig«l_öãºu±
();

16 
Âga_ª£t
(
boﬁ
 
dñay
);

18 
	epowî_subsy°ems
 {

19 
	mPS_UNKNOWN
,

20 
	mPS_FPGA
,

21 
	mPS_VDRAM
,

22 
	mPS_PERIPHERALS_1_8
,

23 
	mPS_PERIPHERALS_3_3
,

24 
	mPS_TX
,

25 
	mPS_MAX


26 } 
	tpowî_subsy°em_t
;

28 
	eReguœt‹s


30 
	mREG_UNKNOWN
,

31 
	mREG_TPS54478
,

32 
	mREG_LTC3675


35 
boﬁ
 
powî_íabÀ
(
powî_subsy°em_t
 
subsys
, boﬁ 
⁄
);

37 
b©ãry_öô
();

38 
uöt16_t
 
b©ãry_gë_vﬁège
();

40 
boﬁ
 
powî_öô
();

41 
boﬁ
 
powî_⁄
();

42 
uöt8_t
 
powî_off
();

45 
boﬁ
 
powî_is_subsys_⁄
(
powî_subsy°em_t
 
ödex
);

49 
usbhub_ª£t
();

51 #i‚de‡
I2C_REWORK


52 
	~"io.h
"

54 
io_pö_t
 
PWR_SDA
;

55 
io_pö_t
 
PWR_SCL
;

	@firmware/fx2/b100/board_specific.c

23 
	~"u§p_comm⁄.h
"

26 
	$£t_Àd_0
 (
⁄
)

28 i‡(!
⁄
)

29 
USRP_PC
 |
bmPC_LED0
;

31 
USRP_PC
 &~
bmPC_LED0
;

32 
	}
}

35 
	$£t_Àd_1
 (
⁄
)

37 i‡(!
⁄
)

38 
USRP_PC
 |
bmPC_LED1
;

40 
USRP_PC
 &~
bmPC_LED1
;

41 
	}
}

44 
	$toggÀ_Àd_0
 ()

46 
USRP_PC
 ^
bmPC_LED0
;

47 
	}
}

50 
	$toggÀ_Àd_1
 ()

52 
USRP_PC
 ^
bmPC_LED1
;

53 
	}
}

56 
	$£t_¶ìp_bôs
 (
bôs
, 
mask
)

59 
	}
}

61 
xd©a
 
	gxbuf
[1];

64 
	$öô_bﬂrd
 ()

70 
	}
}

	@firmware/fx2/b100/eeprom_io.c

23 
	~"ì¥om_io.h
"

24 
	~"i2c.h
"

25 
	~"dñay.h
"

29 
	$ì¥om_ªad
 (
i2c_addr
, 
ì¥om_off£t
,

30 
xd©a
 *
buf
, 
Àn
)

35 
xd©a
 
cmd
[1];

36 
cmd
[0] = 
ì¥om_off£t
;

37 i‡(!
	`i2c_wrôe
(
i2c_addr
, 
cmd
, 1))

40  
	`i2c_ªad
(
i2c_addr
, 
buf
, 
Àn
);

41 
	}
}

48 
	$ì¥om_wrôe
 (
i2c_addr
, 
ì¥om_off£t
,

49 c⁄° 
xd©a
 *
buf
, 
Àn
)

51 
xd©a
 
cmd
[2];

52 
ok
;

54 
Àn
-- > 0){

55 
cmd
[0] = 
ì¥om_off£t
++;

56 
cmd
[1] = *
buf
++;

57 
ok
 = 
	`i2c_wrôe
(
i2c_addr
, 
cmd
, 2);

58 
	`mdñay
(10);

59 i‡(!
ok
)

63 
	}
}

	@firmware/fx2/b100/eeprom_io.h

23 #i‚de‡
INCLUDED_EEPROM_IO_H


24 
	#INCLUDED_EEPROM_IO_H


	)

29 
ì¥om_ªad
 (
i2c_addr
, 
ì¥om_off£t
,

30 
xd©a
 *
buf
, 
Àn
);

34 
ì¥om_wrôe
 (
i2c_addr
, 
ì¥om_off£t
,

35 c⁄° 
xd©a
 *
buf
, 
Àn
);

	@firmware/fx2/b100/fpga_load.c

21 
	~"u§p_comm⁄.h
"

22 
	~"Âga_lﬂd.h
"

23 
	~"dñay.h
"

37 
	$Âga_lﬂd_begö
 ()

39 
USRP_ALTERA_CONFIG
 &~
bmALTERA_BITS
;

40 
	`udñay
 (40);

41 
USRP_ALTERA_CONFIG
 |
bmALTERA_NCONFIG
;

46 
	}
}

66 
	$˛ock_out_c⁄fig_byã
 (
bôs
)

68 
i
;

72 
i
 = 0; i < 8; i++){

74 
bôALTERA_DATA0
 = 
bôs
 & 1;

75 
bôALTERA_DCLK
 = 1;

76 
bôALTERA_DCLK
 = 0;

78 
bôs
 = bits >> 1;

80 
	}
}

85 
	$˛ock_out_c⁄fig_byã
 (
bôs
Ë
_«ked


87 
_asm


88 
mov
 
a
, 
d∂


90 
æc
 
a


91 
mov
 
_bôALTERA_DATA0
,
c


92 
£tb
 
_bôALTERA_DCLK


93 
˛r
 
_bôALTERA_DCLK


95 
æc
 
a


96 
mov
 
_bôALTERA_DATA0
,
c


97 
£tb
 
_bôALTERA_DCLK


98 
˛r
 
_bôALTERA_DCLK


100 
æc
 
a


101 
mov
 
_bôALTERA_DATA0
,
c


102 
£tb
 
_bôALTERA_DCLK


103 
˛r
 
_bôALTERA_DCLK


105 
æc
 
a


106 
mov
 
_bôALTERA_DATA0
,
c


107 
£tb
 
_bôALTERA_DCLK


108 
˛r
 
_bôALTERA_DCLK


110 
æc
 
a


111 
mov
 
_bôALTERA_DATA0
,
c


112 
£tb
 
_bôALTERA_DCLK


113 
˛r
 
_bôALTERA_DCLK


115 
æc
 
a


116 
mov
 
_bôALTERA_DATA0
,
c


117 
£tb
 
_bôALTERA_DCLK


118 
˛r
 
_bôALTERA_DCLK


120 
æc
 
a


121 
mov
 
_bôALTERA_DATA0
,
c


122 
£tb
 
_bôALTERA_DCLK


123 
˛r
 
_bôALTERA_DCLK


125 
æc
 
a


126 
mov
 
_bôALTERA_DATA0
,
c


127 
£tb
 
_bôALTERA_DCLK


128 
˛r
 
_bôALTERA_DCLK


130 
ªt


132 
_ídasm
;

133 
	}
}

138 
	$˛ock_out_byãs
 (
byãcou¡
,

139 
xd©a
 *
p
)

141 
byãcou¡
-- > 0)

142 
	`˛ock_out_c⁄fig_byã
 (*
p
++);

143 
	}
}

159 
	$Âga_lﬂd_x„r
 (
xd©a
 *
p
, 
byãcou¡
)

161 
	`˛ock_out_byãs
 (
byãcou¡
, 
p
);

163 
	}
}

169 
	$Âga_lﬂd_íd
 ()

171 
°©us
 = 
USRP_ALTERA_CONFIG
;

173 i‡(!
UC_BOARD_HAS_FPGA
)

176 i‡(
bôALTERA_CONF_DONE
)

183 
	}
}

	@firmware/fx2/b100/fpga_rev2.c

23 
	~"Âga.h
"

24 
	~"Âga_ªgs_comm⁄.h
"

25 
	~"u§p_comm⁄.h
"

26 
	~"u§p_globÆs.h
"

28 
	gg_tx_ª£t
 = 0;

29 
	gg_rx_ª£t
 = 0;

32 
	$Âga_wrôe_ªg
 (
ªgno
, c⁄° 
xd©a
 *
ªgvÆ
)

35 
	}
}

38 
xd©a
 
	gªgvÆ
[4] = {0, 0, 0, 0};

43 
	$Âga_£t_ª£t
 (
⁄
)

45 
⁄
 &= 0x1;

47 i‡(
⁄
){

51 
	}
}

	@firmware/fx2/b100/fpga_rev2.h

21 #i‚de‡
INCLUDED_FPGA_REV1_H


22 
	#INCLUDED_FPGA_REV1_H


	)

27 
	#Âga_has_room_f‹_d©a_∑ckë
(Ë(!(
GPIFREADYSTAT
 & 
bmDATA_FIFO_FULL
))

	)

28 
	#Âga_has_room_f‹_˘æ_∑ckë
(Ë(!(
GPIFREADYSTAT
 & 
bmCTRL_FIFO_FULL
))

	)

33 
	#Âga_has_d©a_∑ckë_avaû
(Ë(!(
GPIFREADYSTAT
 & 
bmDATA_EMPTY
))

	)

34 
	#Âga_has_˘æ_∑ckë_avaû
(Ë(!(
GPIFREADYSTAT
 & 
bmCTRL_EMPTY
))

	)

36 
	#fx2_has_˘æ_∑ckë_avaû
(Ë(!(
EP24FIFOFLGS
 & 
EP4FIFOEMPTY
))

	)

37 
	#fx2_has_d©a_∑ckë_avaû
(Ë(!(
EP24FIFOFLGS
 & 
EP2FIFOEMPTY
))

	)

39 
	#fx2_has_room_f‹_˘æ_∑ckë
(Ë(!(
EP8CS
 & 
bmEPFULL
))

	)

40 
	#fx2_has_room_f‹_d©a_∑ckë
(Ë(!(
EP6CS
 & 
bmEPFULL
))

	)

42 
	#fx2_gpif_is_idÀ
(Ë(
GPIFTRIG
 & 
bmGPIF_IDLE
)

	)

	@firmware/fx2/b100/gpif.c

153 
	~"fx2.h
"

154 
	~"fx2ªgs.h
"

155 
	~"fx2sdly.h
"

159 c⁄° 
xd©a
 
	gWaveD©a
[128] =

185 c⁄° 
xd©a
 
	gFlowSèãs
[36] =

195 c⁄° 
xd©a
 
	gInôD©a
[7] =

203 
	$GpifInô
( )

205 
BYTE
 
i
;

227 
IFCONFIG
 = 0xEE;

236 
GPIFABORT
 = 0xFF;

238 
GPIFREADYCFG
 = 
InôD©a
[ 0 ];

239 
GPIFCTLCFG
 = 
InôD©a
[ 1 ];

240 
GPIFIDLECS
 = 
InôD©a
[ 2 ];

241 
GPIFIDLECTL
 = 
InôD©a
[ 3 ];

242 
GPIFWFSELECT
 = 
InôD©a
[ 5 ];

243 
GPIFREADYSTAT
 = 
InôD©a
[ 6 ];

246 
AUTOPTRSETUP
 = 0x07;

251 
AUTOPTRH1
 = 
	`MSB
–&
WaveD©a
 );

252 
AUTOPTRL1
 = 
	`LSB
–&
WaveD©a
 );

255 
AUTOPTRH2
 = 0xE4;

256 
AUTOPTRL2
 = 0x00;

259  
i
 = 0x00; i < 128; i++ )

261 
EXTAUTODAT2
 = 
EXTAUTODAT1
;

265 
PORTCCFG
 = 0xFF;

266 
OEC
 = 0xFF;

267 
PORTECFG
 |= 0x80;

268 
OEE
 |= 0x80;

277 
SYNCDELAY
;

278 
GPIFADRH
 = 0x00;

279 
SYNCDELAY
;

280 
GPIFADRL
 = 0x00;

283 
FLOWSTATE
 = 
FlowSèãs
[ 0 ];

284 
FLOWLOGIC
 = 
FlowSèãs
[ 1 ];

285 
FLOWEQ0CTL
 = 
FlowSèãs
[ 2 ];

286 
FLOWEQ1CTL
 = 
FlowSèãs
[ 3 ];

287 
FLOWHOLDOFF
 = 
FlowSèãs
[ 4 ];

288 
FLOWSTB
 = 
FlowSèãs
[ 5 ];

289 
FLOWSTBEDGE
 = 
FlowSèãs
[ 6 ];

290 
FLOWSTBHPERIOD
 = 
FlowSèãs
[ 7 ];

291 
	}
}

	@firmware/fx2/b100/usrp_common.c

25 
	~"u§p_comm⁄.h
"

27 
öô_bﬂrd
 ();

30 
	$öô_u§p
 ()

32 
CPUCS
 = 
bmCLKSPD1
;

33 
CKCON
 = 0;

36 
IFCONFIG
 = 
bmIFCLKSRC
 | 
bm3048MHZ
 | 
bmIFCLKOE
;

37 
SYNCDELAY
;

40 
IOA
 = 
bmPORT_A_INITIAL
;

41 
OEA
 = 
bmPORT_A_OUTPUTS
;

43 
IOC
 = 
bmPORT_C_INITIAL
;

44 
OEC
 = 
bmPORT_C_OUTPUTS
;

46 
IOE
 = 
bmPORT_E_INITIAL
;

47 
OEE
 = 
bmPORT_E_OUTPUTS
;

54 
EP1OUTCFG
 = 
bmVALID
 | 
bmBULK
; 
SYNCDELAY
;

55 
EP1INCFG
 = 
bmVALID
 | 
bmBULK
 | 
bmIN
; 
SYNCDELAY
;

57 
EP2CFG
 = 
bmVALID
 | 
bmBULK
 | 
bmDOUBLEBUF
; 
SYNCDELAY
;

58 
EP4CFG
 = 
bmVALID
 | 
bmBULK
 | 
bmDOUBLEBUF
; 
SYNCDELAY
;

59 
EP6CFG
 = 
bmVALID
 | 
bmBULK
 | 
bmDOUBLEBUF
 | 
bmIN
; 
SYNCDELAY
;

60 
EP8CFG
 = 
bmVALID
 | 
bmBULK
 | 
bmDOUBLEBUF
 | 
bmIN
; 
SYNCDELAY
;

63 
FIFORESET
 = 
bmNAKALL
; 
SYNCDELAY
;

64 
FIFORESET
 = 2; 
SYNCDELAY
;

65 
FIFORESET
 = 4; 
SYNCDELAY
;

66 
FIFORESET
 = 6; 
SYNCDELAY
;

67 
FIFORESET
 = 8; 
SYNCDELAY
;

68 
FIFORESET
 = 0; 
SYNCDELAY
;

72 
EP2FIFOCFG
 = 
bmWORDWIDE
; 
SYNCDELAY
;

73 
EP2FIFOCFG
 = 
bmAUTOOUT
 | 
bmWORDWIDE
; 
SYNCDELAY
;

74 
EP6FIFOCFG
 = 
bmZEROLENIN
 | 
bmWORDWIDE
; 
SYNCDELAY
;

75 
EP6FIFOCFG
 = 
bmZEROLENIN
 | 
bmAUTOIN
 | 
bmWORDWIDE
; 
SYNCDELAY
;

76 
EP4FIFOCFG
 = 
bmWORDWIDE
; 
SYNCDELAY
;

77 
EP4FIFOCFG
 = 
bmAUTOOUT
 | 
bmWORDWIDE
; 
SYNCDELAY
;

78 
EP8FIFOCFG
 = 
bmZEROLENIN
 | 
bmWORDWIDE
; 
SYNCDELAY
;

79 
EP8FIFOCFG
 = 
bmZEROLENIN
 | 
bmAUTOIN
 | 
bmWORDWIDE
; 
SYNCDELAY
;

81 
EP0BCH
 = 0; 
SYNCDELAY
;

83 
EP1OUTBC
 = 0; 
SYNCDELAY
;

86 
EP6AUTOINLENH
 = (512Ë>> 8; 
SYNCDELAY
;

87 
EP6AUTOINLENL
 = (512Ë& 0xff; 
SYNCDELAY
;

88 
EP8AUTOINLENH
 = (512Ë>> 8; 
SYNCDELAY
;

89 
EP8AUTOINLENL
 = (512Ë& 0xff; 
SYNCDELAY
;

92 
PINFLAGSAB
 = (
bmEP2EF
Ë| (
bmEP4EF
 << 4);

93 
PINFLAGSCD
 = (
bmEP6PF
Ë| (
bmEP8PF
 << 4);

97 
EP6FIFOPFH
 = 0x09;

98 
SYNCDELAY
;

99 
EP6FIFOPFL
 = 0xFD;

100 
SYNCDELAY
;

102 
EP8FIFOPFH
 = 0x09;

103 
SYNCDELAY
;

104 
EP8FIFOPFL
 = 0xFD;

105 
SYNCDELAY
;

113 
EP2FIFOCFG
 |
bmBIT5
;

114 
EP4FIFOCFG
 |
bmBIT5
;

117 
FIFOPINPOLAR
 = 0x00;

118 
SYNCDELAY
;

119 
PORTACFG
 = 0x80;

121 
	`öô_bﬂrd
 ();

122 
	}
}

	@firmware/fx2/b100/usrp_main.c

21 
	~"u§p_comm⁄.h
"

22 
	~"u§p_comm™ds.h
"

23 
	~"Âga.h
"

24 
	~"timî.h
"

25 
	~"i2c.h
"

26 
	~"i§.h
"

27 
	~"usb_comm⁄.h
"

28 
	~"fx2utûs.h
"

29 
	~"u§p_globÆs.h
"

30 
	~"u§p_i2c_addr.h
"

31 
	~<°rög.h
>

32 
	~"ì¥om_io.h
"

33 
	~"usb_des¸ùt‹s.h
"

38 
	#HW_REV_OFFSET
 5

	)

39 
	#SERIAL_NO_OFFSET
 247

	)

40 
	#SERIAL_NO_LEN
 9

	)

43 
	#bReque°Ty≥
 
SETUPDAT
[0]

	)

44 
	#bReque°
 
SETUPDAT
[1]

	)

45 
	#wVÆueL
 
SETUPDAT
[2]

	)

46 
	#wVÆueH
 
SETUPDAT
[3]

	)

47 
	#wIndexL
 
SETUPDAT
[4]

	)

48 
	#wIndexH
 
SETUPDAT
[5]

	)

49 
	#wLígthL
 
SETUPDAT
[6]

	)

50 
	#wLígthH
 
SETUPDAT
[7]

	)

53 
	gg_tx_íabÀ
 = 0;

54 
	gg_rx_íabÀ
 = 0;

55 
	gg_rx_ovîrun
 = 0;

56 
	gg_tx_undîrun
 = 0;

57 
bô
 
	gíabÀ_gpif
 = 0;

63 
	#USRP_HASH_SIZE
 16

	)

64 
xd©a
 
©
 
USRP_HASH_SLOT_1_ADDR
 
	ghash1
[
USRP_HASH_SIZE
];

69 
	$Âga_ª£t
(
Àvñ
) {

70 
bôALTERA_DCLK
 = 
Àvñ
;

71 
	}
}

74 
	$gë_ï0_d©a
 ()

76 
EP0BCL
 = 0;

78 
EP0CS
 & 
bmEPBUSY
)

80 
	}
}

82 
	$˛ór_fifo
(
ï
) {

83 
FIFORESET
 = 0x80; 
SYNCDELAY
;

84 
FIFORESET
 = 
ï
; 
SYNCDELAY
;

85 
FIFORESET
 = 0x00; 
SYNCDELAY
;

86 
	}
}

88 
	$íabÀ_x„rs
(
íabÀ
) {

89 if(
íabÀ
) {

90 
IFCONFIG
 = 
bmIFCLKSRC
 | 
bm3048MHZ
 | 
bmIFCLKOE
 | 
bmIFSLAVE
;

92 
IFCONFIG
 = 
bmIFCLKSRC
 | 
bm3048MHZ
 | 
bmIFSLAVE
;

94 
	`£t_Àd_0
(
íabÀ
);

95 
	}
}

102 
	$≠p_víd‹_cmd
 ()

104 i‡(
bReque°Ty≥
 =
VRT_VENDOR_IN
){

110 
bReque°
){

112 
VRQ_GET_STATUS
:

116 
VRQ_I2C_READ
:

117 i‡(!
	`i2c_ªad
 (
wVÆueL
, 
EP0BUF
, 
wLígthL
))  0;

118 
EP0BCH
 = 0;

119 
EP0BCL
 = 
wLígthL
;

122 
VRQ_SPI_READ
:

125 
VRQ_FW_COMPAT
:

126 
EP0BCH
 = 0;

127 
EP0BCL
 = 4;

135 i‡(
bReque°Ty≥
 =
VRT_VENDOR_OUT
){

141 
bReque°
){

143 
VRQ_SET_LED
:

144 
wIndexL
){

146 
	`£t_Àd_0
 (
wVÆueL
);

150 
	`£t_Àd_1
 (
wVÆueL
);

158 
VRQ_FPGA_LOAD
:

159 
wIndexL
){

160 
FL_BEGIN
:

161  
	`Âga_lﬂd_begö
 ();

163 
FL_XFER
:

164 
	`gë_ï0_d©a
 ();

165  
	`Âga_lﬂd_x„r
 (
EP0BUF
, 
EP0BCL
);

167 
FL_END
:

168  
	`Âga_lﬂd_íd
 ();

175 
VRQ_FPGA_SET_RESET
:

176 
	`Âga_ª£t
(
wVÆueL
);

179 
VRQ_I2C_WRITE
:

180 
	`gë_ï0_d©a
 ();

181 i‡(!
	`i2c_wrôe
 (
wVÆueL
, 
EP0BUF
, 
EP0BCL
))  0;

185 
VRQ_RESET_GPIF
:

186 
	`˛ór_fifo
(
wVÆueL
);

189 
VRQ_ENABLE_GPIF
:

190 
	`íabÀ_x„rs
(
wVÆueL
);

193 
VRQ_CLEAR_FPGA_FIFO
:

206 
	}
}

209 
	$maö_lo›
 ()

212 i‡(
	`usb_£tup_∑ckë_avaû
 ())

213 
	`usb_h™dÀ_£tup_∑ckë
 ();

215 
	}
}

223 
	$i§_tick
 (Ë
öãºu±


225 
cou¡
 = 1;

227 i‡(--
cou¡
 == 0){

228 
cou¡
 = 50;

229 
USRP_LED_REG
 ^
bmLED0
;

232 
	`˛ór_timî_úq
 ();

233 
	}
}

240 
	$∑tch_usb_des¸ùt‹s
()

242 
xd©a
 
hw_ªv
;

243 
xd©a
 
£rül_no
[
SERIAL_NO_LEN
];

244 
i
;

246 
	`ì¥om_ªad
(
I2C_ADDR_BOOT
, 
HW_REV_OFFSET
, &
hw_ªv
, 1);

247 
usb_desc_hw_ªv_bö¨y_∑tch_loˇti⁄_0
[0] = 
hw_ªv
;

248 
usb_desc_hw_ªv_bö¨y_∑tch_loˇti⁄_1
[0] = 
hw_ªv
;

249 
usb_desc_hw_ªv_ascii_∑tch_loˇti⁄_0
[0] = 
hw_ªv
 + '0';

251 
	`ì¥om_ªad
(
I2C_ADDR_BOOT
, 
SERIAL_NO_OFFSET
, 
£rül_no
, 
SERIAL_NO_LEN
);

253 
i
 = 0; i < 
SERIAL_NO_LEN
; i++){

254 
ch
 = 
£rül_no
[
i
];

255 i‡(
ch
 == 0xff)

256 
ch
 = '0';

257 
usb_desc_£rül_numbî_ascii
[
i
 << 1] = 
ch
;

259 
	}
}

262 
	$maö
 ()

264 
	`mem£t
 (
hash1
, 0, 
USRP_HASH_SIZE
);

266 
	`öô_u§p
 ();

268 
	`£t_Àd_0
 (0);

269 
	`£t_Àd_1
 (0);

271 
EA
 = 0;

273 
	`∑tch_usb_des¸ùt‹s
();

275 
	`£tup_autove˘‹s
 ();

276 
	`usb_ö°Æl_h™dÀrs
 ();

279 
EIEX4
 = 1;

280 
EA
 = 1;

282 
	`fx2_ªnumî©e
 ();

284 
	`maö_lo›
 ();

285 
	}
}

	@firmware/fx2/b100/usrp_regs.h

26 #i‚de‡
_B100_REGS_H_


27 
	#_B100_REGS_H_


	)

29 
	~"fx2ªgs.h
"

35 
	#USRP_PA
 
IOA


36 
	#USRP_PA_OE
 
OEA


37 

	)

38 
	#USRP_ALTERA_CONFIG
 
USRP_PA


39 

	)

40 
	#bmALTERA_DCLK
 
bmBIT0


	)

41 
	#bmALTERA_NCONFIG
 
bmBIT1


	)

42 
	#bmALTERA_DATA0
 
bmBIT3


	)

43 
	#bmALTERA_NSTATUS
 
bmBIT4


	)

45 
	#bmALTERA_BITS
 (
bmALTERA_DCLK
 \

46 | 
bmALTERA_NCONFIG
 \

47 | 
bmALTERA_DATA0
 \

48 | 
bmALTERA_NSTATUS
 \

49 )

	)

52 
	#bmPORT_A_OUTPUTS
 (
bmALTERA_DCLK
 \

53 | 
bmALTERA_NCONFIG
 \

54 | 
bmALTERA_DATA0
 \

55 )

	)

57 
	#bmPORT_A_INITIAL
 0

	)

59 
	#PORT_A_ADDR
 0x80

	)

60 
	#PORT_C_ADDR
 0xA0

	)

62 
sbô
 
©
 
	gPORT_A_ADDR
+0 
	gbôALTERA_DCLK
;

63 
sbô
 
©
 
	gPORT_A_ADDR
+1 
	gbôALTERA_NCONFIG
;

64 
sbô
 
©
 
	gPORT_A_ADDR
+3 
	gbôALTERA_DATA0
;

66 
sbô
 
©
 
	gPORT_C_ADDR
+7 
	gbôALTERA_CONF_DONE
;

76 
	#USRP_PC
 
IOC


77 
	#USRP_PC_OE
 
OEC


78 

	)

79 
	#bmPC_nRESET
 0

80 
	#bmPC_LED0
 
bmBIT0


81 
	#bmPC_LED1
 
bmBIT1


82 

	)

83 
	#bmPORT_C_OUTPUTS
 (
bmPC_LED0
 | 
bmPC_LED1
)

	)

84 
	#bmPORT_C_INITIAL
 (
bmPC_LED0
 | 
bmPC_LED1
)

	)

87 
	#USRP_LED_REG
 
USRP_PC


	)

88 
	#bmLED0
 
bmPC_LED0


	)

89 
	#bmLED1
 
bmPC_LED1


	)

96 
	#USRP_PE
 
IOE


97 
	#USRP_PE_OE
 
OEE


98 

	)

99 
	#bmPORT_E_OUTPUTS
 (0)

	)

100 
	#bmPORT_E_INITIAL
 (0)

	)

	@firmware/fx2/common/delay.c

27 
	$udñay1
 (Ë
_«ked


29 
_asm
 ; 
lˇŒ
 
th©
 
gŸ
 
us
 
hîe
 
took
 4 
bus
 
cy˛es


30 
ªt
 ; 4 
bus
 
cy˛es


31 
_ídasm
;

32 
	}
}

38 
	$udñay
 (
u£cs
)

41 
	`udñay1
 ();

42 } --
u£cs
 != 0);

43 
	}
}

54 
	$mdñay1
 (Ë
_«ked


56 
_asm


57 
mov
 
d±r
,#(-1200 & 0xffff)

58 002
$
:

59 
öc
 
d±r
 ; 3 
bus
 
cy˛es


60 
mov
 
a
, 
d∂
 ; 2 
bus
 
cy˛es


61 
‹l
 
a
, 
dph
 ; 2 
bus
 
cy˛es


62 
jnz
 002
$
 ; 3 
bus
 
cy˛es


64 
ªt


65 
_ídasm
;

66 
	}
}

69 
	$mdñay
 (
m£cs
)

72 
	`mdñay1
 ();

73 } --
m£cs
 != 0);

74 
	}
}

	@firmware/fx2/common/delay.h

23 #i‚de‡
_DELAY_H_


24 
	#_DELAY_H_


	)

30 
udñay
 (
u£cs
);

35 
mdñay
 (
m£cs
);

	@firmware/fx2/common/eeprom_init.c

23 
	~"u§p_comm⁄.h
"

24 
	~"u§p_comm™ds.h
"

30 
	#USRP_HASH_SIZE
 16

	)

31 
xd©a
 
©
 
USRP_HASH_SLOT_0_ADDR
 
	ghash0
[
USRP_HASH_SIZE
];

34 
	#REG_RX_PWR_DN
 1

	)

35 
	#REG_TX_PWR_DN
 8

	)

36 
	#REG_TX_MODULATOR
 20

	)

38 
	$ì¥om_öô
 ()

40 
cou¡î
;

41 
i
;

45 
IOA
 = 
bmPORT_A_INITIAL
;

46 
OEA
 = 
bmPORT_A_OUTPUTS
;

48 
IOC
 = 
bmPORT_C_INITIAL
;

49 
OEC
 = 
bmPORT_C_OUTPUTS
;

51 
IOE
 = 
bmPORT_E_INITIAL
;

52 
OEE
 = 
bmPORT_E_OUTPUTS
;

54 
EP0BCH
 = 0; 
SYNCDELAY
;

57 
USBCS
 = 0;

63 
i
 = 0;

65 
hash0
[
i
] = 0;

66 
i
++;

67 } 
i
 !
USRP_HASH_SIZE
);

69 
cou¡î
 = 0;

71 
cou¡î
++;

72 i‡(
cou¡î
 & 0x8000)

73 
IOC
 ^
bmPC_LED0
;

75 
	}
}

	@firmware/fx2/common/fpga.h

22 #i‚de‡
INCLUDED_FPGA_H


23 
	#INCLUDED_FPGA_H


	)

25 
	~"Âga_lﬂd.h
"

27 #i‡
deföed
(
HAVE_USRP2
)

28 
	~"Âga_ªv2.h
"

	@firmware/fx2/common/fpga_load.h

21 #i‚de‡
INCLUDED_FPGA_LOAD_H


22 
	#INCLUDED_FPGA_LOAD_H


	)

24 
Âga_lﬂd_begö
 ();

25 
Âga_lﬂd_x„r
 (
xd©a
 *
p
, 
Àn
);

26 
Âga_lﬂd_íd
 ();

	@firmware/fx2/common/fpga_regs0.h

23 #i‚de‡
_FPGA_REGS0_H_


24 
	#_FPGA_REGS0_H_


	)

26 
	#FR_RX_FREQ_0
 0

	)

27 
	#FR_RX_FREQ_1
 1

	)

28 
	#FR_RX_FREQ_2
 2

	)

29 
	#FR_RX_FREQ_3
 3

	)

30 
	#FR_TX_FREQ_0
 4

	)

31 
	#FR_TX_FREQ_1
 5

	)

32 
	#FR_TX_FREQ_2
 6

	)

33 
	#FR_TX_FREQ_3
 7

	)

34 
	#FR_COMBO
 8

	)

37 
	#FR_ADC_CLK_DIV
 128

38 
	#FR_EXT_CLK_DIV
 129

	)

39 
	#FR_INTERP
 130

	)

40 
	#FR_DECIM
 131

	)

	@firmware/fx2/common/fpga_regs_common.h

22 #i‚de‡
INCLUDED_FPGA_REGS_COMMON_H


23 
	#INCLUDED_FPGA_REGS_COMMON_H


	)

32 
	#FR_TX_SAMPLE_RATE_DIV
 0

	)

33 
	#FR_RX_SAMPLE_RATE_DIV
 1

	)

37 
	#FR_MASTER_CTRL
 4

38 
	#bmFR_MC_ENABLE_TX
 (1 << 0)

	)

39 
	#bmFR_MC_ENABLE_RX
 (1 << 1)

	)

40 
	#bmFR_MC_RESET_TX
 (1 << 2)

	)

41 
	#bmFR_MC_RESET_RX
 (1 << 3)

	)

47 
	#FR_OE_0
 5

48 
	#FR_OE_1
 6

	)

49 
	#FR_OE_2
 7

	)

50 
	#FR_OE_3
 8

	)

55 
	#FR_IO_0
 9

56 
	#FR_IO_1
 10

	)

57 
	#FR_IO_2
 11

	)

58 
	#FR_IO_3
 12

	)

60 
	#FR_MODE
 13

	)

61 
	#bmFR_MODE_NORMAL
 0

	)

62 
	#bmFR_MODE_LOOPBACK
 (1 << 0)

63 
	#bmFR_MODE_RX_COUNTING
 (1 << 1)

64 
	#bmFR_MODE_RX_COUNTING_32BIT
 (1 << 2)

66 

	)

72 
	#FR_DEBUG_EN
 14

	)

73 
	#bmFR_DEBUG_EN_TX_A
 (1 << 0)

74 
	#bmFR_DEBUG_EN_RX_A
 (1 << 1)

75 
	#bmFR_DEBUG_EN_TX_B
 (1 << 2)

76 
	#bmFR_DEBUG_EN_RX_B
 (1 << 3)

77 

	)

93 
	#FR_DC_OFFSET_CL_EN
 15

94 

	)

98 
	#FR_ADC_OFFSET_0
 16

	)

99 
	#FR_ADC_OFFSET_1
 17

	)

100 
	#FR_ADC_OFFSET_2
 18

	)

101 
	#FR_ADC_OFFSET_3
 19

	)

130 
	#FR_ATR_MASK_0
 20

131 
	#FR_ATR_TXVAL_0
 21

	)

132 
	#FR_ATR_RXVAL_0
 22

	)

134 
	#FR_ATR_MASK_1
 23

135 
	#FR_ATR_TXVAL_1
 24

	)

136 
	#FR_ATR_RXVAL_1
 25

	)

138 
	#FR_ATR_MASK_2
 26

139 
	#FR_ATR_TXVAL_2
 27

	)

140 
	#FR_ATR_RXVAL_2
 28

	)

142 
	#FR_ATR_MASK_3
 29

143 
	#FR_ATR_TXVAL_3
 30

	)

144 
	#FR_ATR_RXVAL_3
 31

	)

147 
	#FR_ATR_TX_DELAY
 2

	)

148 
	#FR_ATR_RX_DELAY
 3

	)

	@firmware/fx2/common/fpga_regs_standard.h

22 #i‚de‡
INCLUDED_FPGA_REGS_STANDARD_H


23 
	#INCLUDED_FPGA_REGS_STANDARD_H


	)

31 
	#FR_INTERP_RATE
 32

32 
	#FR_DECIM_RATE
 33

33 

	)

36 
	#FR_RX_FREQ_0
 34

	)

37 
	#FR_RX_FREQ_1
 35

	)

38 
	#FR_RX_FREQ_2
 36

	)

39 
	#FR_RX_FREQ_3
 37

	)

69 
	#FR_RX_MUX
 38

	)

106 
	#FR_TX_MUX
 39

	)

124 
	#FR_TX_A_REFCLK
 40

	)

125 
	#FR_RX_A_REFCLK
 41

	)

126 
	#FR_TX_B_REFCLK
 42

	)

127 
	#FR_RX_B_REFCLK
 43

	)

129 
	#bmFR_REFCLK_EN
 0x80

	)

130 
	#bmFR_REFCLK_DIVISOR_MASK
 0x7f

	)

135 
	#FR_RX_PHASE_0
 44

	)

136 
	#FR_RX_PHASE_1
 45

	)

137 
	#FR_RX_PHASE_2
 46

	)

138 
	#FR_RX_PHASE_3
 47

	)

151 
	#FR_TX_FORMAT
 48

	)

152 
	#bmFR_TX_FORMAT_16_IQ
 0

153 

	)

165 
	#FR_RX_FORMAT
 49

	)

167 
	#bmFR_RX_FORMAT_SHIFT_MASK
 (0x0f << 0)

168 
	#bmFR_RX_FORMAT_SHIFT_SHIFT
 0

	)

169 
	#bmFR_RX_FORMAT_WIDTH_MASK
 (0x1f << 4)

170 
	#bmFR_RX_FORMAT_WIDTH_SHIFT
 4

	)

171 
	#bmFR_RX_FORMAT_WANT_Q
 (0x1 << 9)

172 
	#bmFR_RX_FORMAT_BYPASS_HB
 (0x1 << 10)

173 

	)

191 
	#FR_USER_0
 64

	)

192 
	#FR_USER_1
 65

	)

193 
	#FR_USER_2
 66

	)

194 
	#FR_USER_3
 67

	)

195 
	#FR_USER_4
 68

	)

196 
	#FR_USER_5
 69

	)

197 
	#FR_USER_6
 70

	)

198 
	#FR_USER_7
 71

	)

199 
	#FR_USER_8
 72

	)

200 
	#FR_USER_9
 73

	)

201 
	#FR_USER_10
 74

	)

202 
	#FR_USER_11
 75

	)

203 
	#FR_USER_12
 76

	)

204 
	#FR_USER_13
 77

	)

205 
	#FR_USER_14
 78

	)

206 
	#FR_USER_15
 79

	)

207 
	#FR_USER_16
 80

	)

208 
	#FR_USER_17
 81

	)

209 
	#FR_USER_18
 82

	)

210 
	#FR_USER_19
 83

	)

211 
	#FR_USER_20
 84

	)

212 
	#FR_USER_21
 85

	)

213 
	#FR_USER_22
 86

	)

214 
	#FR_USER_23
 87

	)

215 
	#FR_USER_24
 88

	)

216 
	#FR_USER_25
 89

	)

217 
	#FR_USER_26
 90

	)

218 
	#FR_USER_27
 91

	)

219 
	#FR_USER_28
 92

	)

220 
	#FR_USER_29
 93

	)

221 
	#FR_USER_30
 94

	)

222 
	#FR_USER_31
 95

	)

228 
	#FR_RX_MASTER_SLAVE
 64

	)

229 
	#bônoFR_RX_SYNC
 0

	)

230 
	#bônoFR_RX_SYNC_MASTER
 1

	)

231 
	#bônoFR_RX_SYNC_SLAVE
 2

	)

232 
	#bmFR_RX_SYNC
 (1 <<
bônoFR_RX_SYNC
)

237 

	)

238 
	#bmFR_RX_SYNC_MASTER
 (1 <<
bônoFR_RX_SYNC_MASTER
)

240 
	#bmFR_RX_SYNC_SLAVE
 (1 <<
bônoFR_RX_SYNC_SLAVE
)

242 

	)

267 
	#bônoFR_RX_SYNC_INPUT_IOPIN
 15

	)

268 
	#bmFR_RX_SYNC_INPUT_IOPIN
 (1<<
bônoFR_RX_SYNC_INPUT_IOPIN
)

	)

270 
	#bônoFR_RX_SYNC_OUTPUT_IOPIN
 15

	)

271 
	#bmFR_RX_SYNC_OUTPUT_IOPIN
 (1<<
bônoFR_RX_SYNC_OUTPUT_IOPIN
)

	)

276 
	#FR_RB_IO_RX_A_IO_TX_A
 1

277 
	#FR_RB_IO_RX_B_IO_TX_B
 2

278 

	)

291 
	#FR_RB_CAPS
 3

	)

292 
	#bmFR_RB_CAPS_NDDC_MASK
 (0x7 << 0)

293 
	#bmFR_RB_CAPS_NDDC_SHIFT
 0

	)

294 
	#bmFR_RB_CAPS_RX_HAS_HALFBAND
 (0x1 << 3)

	)

295 
	#bmFR_RB_CAPS_NDUC_MASK
 (0x7 << 4)

296 
	#bmFR_RB_CAPS_NDUC_SHIFT
 4

	)

297 
	#bmFR_RB_CAPS_TX_HAS_HALFBAND
 (0x1 << 7)

	)

	@firmware/fx2/common/fx2regs.h

38 #i‚de‡
FX2REGS_H


39 
	#FX2REGS_H


	)

41 
	#ALLOCATE_EXTERN


42 

	)

64 #ifde‡
ALLOCATE_EXTERN


65 
	#EXTERN


	)

66 
	#_AT_
(
a
Ë
©
 
	)
a

68 
	#EXTERN
 

	)

69 
	#_AT_
 ;/ ## /

	)

72 
	tBYTE
;

73 
	tWORD
;

75 
EXTERN
 
xd©a
 
	$_AT_
(0xE400Ëvﬁ©ûê
BYTE
 
GPIF_WAVE_DATA
[128];

76 
EXTERN
 
xd©a
 
	$_AT_
(0xE480Ëvﬁ©ûê
BYTE
 
RES_WAVEDATA_END
 ;

80 
EXTERN
 
xd©a
 
	$_AT_
(0xE600Ëvﬁ©ûê
BYTE
 
CPUCS
 ;

81 
EXTERN
 
xd©a
 
	$_AT_
(0xE601Ëvﬁ©ûê
BYTE
 
IFCONFIG
 ;

82 
EXTERN
 
xd©a
 
	$_AT_
(0xE602Ëvﬁ©ûê
BYTE
 
PINFLAGSAB
 ;

83 
EXTERN
 
xd©a
 
	$_AT_
(0xE603Ëvﬁ©ûê
BYTE
 
PINFLAGSCD
 ;

84 
EXTERN
 
xd©a
 
	$_AT_
(0xE604Ëvﬁ©ûê
BYTE
 
FIFORESET
 ;

85 
EXTERN
 
xd©a
 
	$_AT_
(0xE605Ëvﬁ©ûê
BYTE
 
BREAKPT
 ;

86 
EXTERN
 
xd©a
 
	$_AT_
(0xE606Ëvﬁ©ûê
BYTE
 
BPADDRH
 ;

87 
EXTERN
 
xd©a
 
	$_AT_
(0xE607Ëvﬁ©ûê
BYTE
 
BPADDRL
 ;

88 
EXTERN
 
xd©a
 
	$_AT_
(0xE608Ëvﬁ©ûê
BYTE
 
UART230
 ;

89 
EXTERN
 
xd©a
 
	$_AT_
(0xE609Ëvﬁ©ûê
BYTE
 
FIFOPINPOLAR
 ;

90 
EXTERN
 
xd©a
 
	$_AT_
(0xE60AËvﬁ©ûê
BYTE
 
REVID
 ;

91 
EXTERN
 
xd©a
 
	$_AT_
(0xE60BËvﬁ©ûê
BYTE
 
REVCTL
 ;

94 
EXTERN
 
xd©a
 
	$_AT_
(0xE610Ëvﬁ©ûê
BYTE
 
EP1OUTCFG
 ;

95 
EXTERN
 
xd©a
 
	$_AT_
(0xE611Ëvﬁ©ûê
BYTE
 
EP1INCFG
 ;

96 
EXTERN
 
xd©a
 
	$_AT_
(0xE612Ëvﬁ©ûê
BYTE
 
EP2CFG
 ;

97 
EXTERN
 
xd©a
 
	$_AT_
(0xE613Ëvﬁ©ûê
BYTE
 
EP4CFG
 ;

98 
EXTERN
 
xd©a
 
	$_AT_
(0xE614Ëvﬁ©ûê
BYTE
 
EP6CFG
 ;

99 
EXTERN
 
xd©a
 
	$_AT_
(0xE615Ëvﬁ©ûê
BYTE
 
EP8CFG
 ;

100 
EXTERN
 
xd©a
 
	$_AT_
(0xE618Ëvﬁ©ûê
BYTE
 
EP2FIFOCFG
 ;

101 
EXTERN
 
xd©a
 
	$_AT_
(0xE619Ëvﬁ©ûê
BYTE
 
EP4FIFOCFG
 ;

102 
EXTERN
 
xd©a
 
	$_AT_
(0xE61AËvﬁ©ûê
BYTE
 
EP6FIFOCFG
 ;

103 
EXTERN
 
xd©a
 
	$_AT_
(0xE61BËvﬁ©ûê
BYTE
 
EP8FIFOCFG
 ;

104 
EXTERN
 
xd©a
 
	$_AT_
(0xE620Ëvﬁ©ûê
BYTE
 
EP2AUTOINLENH
 ;

105 
EXTERN
 
xd©a
 
	$_AT_
(0xE621Ëvﬁ©ûê
BYTE
 
EP2AUTOINLENL
 ;

106 
EXTERN
 
xd©a
 
	$_AT_
(0xE622Ëvﬁ©ûê
BYTE
 
EP4AUTOINLENH
 ;

107 
EXTERN
 
xd©a
 
	$_AT_
(0xE623Ëvﬁ©ûê
BYTE
 
EP4AUTOINLENL
 ;

108 
EXTERN
 
xd©a
 
	$_AT_
(0xE624Ëvﬁ©ûê
BYTE
 
EP6AUTOINLENH
 ;

109 
EXTERN
 
xd©a
 
	$_AT_
(0xE625Ëvﬁ©ûê
BYTE
 
EP6AUTOINLENL
 ;

110 
EXTERN
 
xd©a
 
	$_AT_
(0xE626Ëvﬁ©ûê
BYTE
 
EP8AUTOINLENH
 ;

111 
EXTERN
 
xd©a
 
	$_AT_
(0xE627Ëvﬁ©ûê
BYTE
 
EP8AUTOINLENL
 ;

112 
EXTERN
 
xd©a
 
	$_AT_
(0xE630Ëvﬁ©ûê
BYTE
 
EP2FIFOPFH
 ;

113 
EXTERN
 
xd©a
 
	$_AT_
(0xE631Ëvﬁ©ûê
BYTE
 
EP2FIFOPFL
 ;

114 
EXTERN
 
xd©a
 
	$_AT_
(0xE632Ëvﬁ©ûê
BYTE
 
EP4FIFOPFH
 ;

115 
EXTERN
 
xd©a
 
	$_AT_
(0xE633Ëvﬁ©ûê
BYTE
 
EP4FIFOPFL
 ;

116 
EXTERN
 
xd©a
 
	$_AT_
(0xE634Ëvﬁ©ûê
BYTE
 
EP6FIFOPFH
 ;

117 
EXTERN
 
xd©a
 
	$_AT_
(0xE635Ëvﬁ©ûê
BYTE
 
EP6FIFOPFL
 ;

118 
EXTERN
 
xd©a
 
	$_AT_
(0xE636Ëvﬁ©ûê
BYTE
 
EP8FIFOPFH
 ;

119 
EXTERN
 
xd©a
 
	$_AT_
(0xE637Ëvﬁ©ûê
BYTE
 
EP8FIFOPFL
 ;

120 
EXTERN
 
xd©a
 
	$_AT_
(0xE640Ëvﬁ©ûê
BYTE
 
EP2ISOINPKTS
 ;

121 
EXTERN
 
xd©a
 
	$_AT_
(0xE641Ëvﬁ©ûê
BYTE
 
EP4ISOINPKTS
 ;

122 
EXTERN
 
xd©a
 
	$_AT_
(0xE642Ëvﬁ©ûê
BYTE
 
EP6ISOINPKTS
 ;

123 
EXTERN
 
xd©a
 
	$_AT_
(0xE643Ëvﬁ©ûê
BYTE
 
EP8ISOINPKTS
 ;

124 
EXTERN
 
xd©a
 
	$_AT_
(0xE648Ëvﬁ©ûê
BYTE
 
INPKTEND
 ;

125 
EXTERN
 
xd©a
 
	$_AT_
(0xE649Ëvﬁ©ûê
BYTE
 
OUTPKTEND
 ;

129 
EXTERN
 
xd©a
 
	$_AT_
(0xE650Ëvﬁ©ûê
BYTE
 
EP2FIFOIE
 ;

130 
EXTERN
 
xd©a
 
	$_AT_
(0xE651Ëvﬁ©ûê
BYTE
 
EP2FIFOIRQ
 ;

131 
EXTERN
 
xd©a
 
	$_AT_
(0xE652Ëvﬁ©ûê
BYTE
 
EP4FIFOIE
 ;

132 
EXTERN
 
xd©a
 
	$_AT_
(0xE653Ëvﬁ©ûê
BYTE
 
EP4FIFOIRQ
 ;

133 
EXTERN
 
xd©a
 
	$_AT_
(0xE654Ëvﬁ©ûê
BYTE
 
EP6FIFOIE
 ;

134 
EXTERN
 
xd©a
 
	$_AT_
(0xE655Ëvﬁ©ûê
BYTE
 
EP6FIFOIRQ
 ;

135 
EXTERN
 
xd©a
 
	$_AT_
(0xE656Ëvﬁ©ûê
BYTE
 
EP8FIFOIE
 ;

136 
EXTERN
 
xd©a
 
	$_AT_
(0xE657Ëvﬁ©ûê
BYTE
 
EP8FIFOIRQ
 ;

137 
EXTERN
 
xd©a
 
	$_AT_
(0xE658Ëvﬁ©ûê
BYTE
 
IBNIE
 ;

138 
EXTERN
 
xd©a
 
	$_AT_
(0xE659Ëvﬁ©ûê
BYTE
 
IBNIRQ
 ;

139 
EXTERN
 
xd©a
 
	$_AT_
(0xE65AËvﬁ©ûê
BYTE
 
NAKIE
 ;

140 
EXTERN
 
xd©a
 
	$_AT_
(0xE65BËvﬁ©ûê
BYTE
 
NAKIRQ
 ;

141 
EXTERN
 
xd©a
 
	$_AT_
(0xE65CËvﬁ©ûê
BYTE
 
USBIE
 ;

142 
EXTERN
 
xd©a
 
	$_AT_
(0xE65DËvﬁ©ûê
BYTE
 
USBIRQ
 ;

143 
EXTERN
 
xd©a
 
	$_AT_
(0xE65EËvﬁ©ûê
BYTE
 
EPIE
 ;

144 
EXTERN
 
xd©a
 
	$_AT_
(0xE65FËvﬁ©ûê
BYTE
 
EPIRQ
 ;

145 
EXTERN
 
xd©a
 
	$_AT_
(0xE660Ëvﬁ©ûê
BYTE
 
GPIFIE
 ;

146 
EXTERN
 
xd©a
 
	$_AT_
(0xE661Ëvﬁ©ûê
BYTE
 
GPIFIRQ
 ;

147 
EXTERN
 
xd©a
 
	$_AT_
(0xE662Ëvﬁ©ûê
BYTE
 
USBERRIE
 ;

148 
EXTERN
 
xd©a
 
	$_AT_
(0xE663Ëvﬁ©ûê
BYTE
 
USBERRIRQ
 ;

149 
EXTERN
 
xd©a
 
	$_AT_
(0xE664Ëvﬁ©ûê
BYTE
 
ERRCNTLIM
 ;

150 
EXTERN
 
xd©a
 
	$_AT_
(0xE665Ëvﬁ©ûê
BYTE
 
CLRERRCNT
 ;

151 
EXTERN
 
xd©a
 
	$_AT_
(0xE666Ëvﬁ©ûê
BYTE
 
INT2IVEC
 ;

152 
EXTERN
 
xd©a
 
	$_AT_
(0xE667Ëvﬁ©ûê
BYTE
 
INT4IVEC
 ;

153 
EXTERN
 
xd©a
 
	$_AT_
(0xE668Ëvﬁ©ûê
BYTE
 
INTSETUP
 ;

157 
EXTERN
 
xd©a
 
	$_AT_
(0xE670Ëvﬁ©ûê
BYTE
 
PORTACFG
 ;

158 
EXTERN
 
xd©a
 
	$_AT_
(0xE671Ëvﬁ©ûê
BYTE
 
PORTCCFG
 ;

159 
EXTERN
 
xd©a
 
	$_AT_
(0xE672Ëvﬁ©ûê
BYTE
 
PORTECFG
 ;

160 
EXTERN
 
xd©a
 
	$_AT_
(0xE678Ëvﬁ©ûê
BYTE
 
I2CS
 ;

161 
EXTERN
 
xd©a
 
	$_AT_
(0xE679Ëvﬁ©ûê
BYTE
 
I2DAT
 ;

162 
EXTERN
 
xd©a
 
	$_AT_
(0xE67AËvﬁ©ûê
BYTE
 
I2CTL
 ;

163 
EXTERN
 
xd©a
 
	$_AT_
(0xE67BËvﬁ©ûê
BYTE
 
XAUTODAT1
 ;

164 
EXTERN
 
xd©a
 
	$_AT_
(0xE67CËvﬁ©ûê
BYTE
 
XAUTODAT2
 ;

166 
	#EXTAUTODAT1
 
XAUTODAT1


	)

167 
	#EXTAUTODAT2
 
XAUTODAT2


	)

171 
EXTERN
 
xd©a
 
	$_AT_
(0xE680Ëvﬁ©ûê
BYTE
 
USBCS
 ;

172 
EXTERN
 
xd©a
 
	$_AT_
(0xE681Ëvﬁ©ûê
BYTE
 
SUSPEND
 ;

173 
EXTERN
 
xd©a
 
	$_AT_
(0xE682Ëvﬁ©ûê
BYTE
 
WAKEUPCS
 ;

174 
EXTERN
 
xd©a
 
	$_AT_
(0xE683Ëvﬁ©ûê
BYTE
 
TOGCTL
 ;

175 
EXTERN
 
xd©a
 
	$_AT_
(0xE684Ëvﬁ©ûê
BYTE
 
USBFRAMEH
 ;

176 
EXTERN
 
xd©a
 
	$_AT_
(0xE685Ëvﬁ©ûê
BYTE
 
USBFRAMEL
 ;

177 
EXTERN
 
xd©a
 
	$_AT_
(0xE686Ëvﬁ©ûê
BYTE
 
MICROFRAME
 ;

178 
EXTERN
 
xd©a
 
	$_AT_
(0xE687Ëvﬁ©ûê
BYTE
 
FNADDR
 ;

182 
EXTERN
 
xd©a
 
	$_AT_
(0xE68AËvﬁ©ûê
BYTE
 
EP0BCH
 ;

183 
EXTERN
 
xd©a
 
	$_AT_
(0xE68BËvﬁ©ûê
BYTE
 
EP0BCL
 ;

184 
EXTERN
 
xd©a
 
	$_AT_
(0xE68DËvﬁ©ûê
BYTE
 
EP1OUTBC
 ;

185 
EXTERN
 
xd©a
 
	$_AT_
(0xE68FËvﬁ©ûê
BYTE
 
EP1INBC
 ;

186 
EXTERN
 
xd©a
 
	$_AT_
(0xE690Ëvﬁ©ûê
BYTE
 
EP2BCH
 ;

187 
EXTERN
 
xd©a
 
	$_AT_
(0xE691Ëvﬁ©ûê
BYTE
 
EP2BCL
 ;

188 
EXTERN
 
xd©a
 
	$_AT_
(0xE694Ëvﬁ©ûê
BYTE
 
EP4BCH
 ;

189 
EXTERN
 
xd©a
 
	$_AT_
(0xE695Ëvﬁ©ûê
BYTE
 
EP4BCL
 ;

190 
EXTERN
 
xd©a
 
	$_AT_
(0xE698Ëvﬁ©ûê
BYTE
 
EP6BCH
 ;

191 
EXTERN
 
xd©a
 
	$_AT_
(0xE699Ëvﬁ©ûê
BYTE
 
EP6BCL
 ;

192 
EXTERN
 
xd©a
 
	$_AT_
(0xE69CËvﬁ©ûê
BYTE
 
EP8BCH
 ;

193 
EXTERN
 
xd©a
 
	$_AT_
(0xE69DËvﬁ©ûê
BYTE
 
EP8BCL
 ;

194 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A0Ëvﬁ©ûê
BYTE
 
EP0CS
 ;

195 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A1Ëvﬁ©ûê
BYTE
 
EP1OUTCS
 ;

196 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A2Ëvﬁ©ûê
BYTE
 
EP1INCS
 ;

197 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A3Ëvﬁ©ûê
BYTE
 
EP2CS
 ;

198 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A4Ëvﬁ©ûê
BYTE
 
EP4CS
 ;

199 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A5Ëvﬁ©ûê
BYTE
 
EP6CS
 ;

200 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A6Ëvﬁ©ûê
BYTE
 
EP8CS
 ;

201 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A7Ëvﬁ©ûê
BYTE
 
EP2FIFOFLGS
 ;

202 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A8Ëvﬁ©ûê
BYTE
 
EP4FIFOFLGS
 ;

203 
EXTERN
 
xd©a
 
	$_AT_
(0xE6A9Ëvﬁ©ûê
BYTE
 
EP6FIFOFLGS
 ;

204 
EXTERN
 
xd©a
 
	$_AT_
(0xE6AAËvﬁ©ûê
BYTE
 
EP8FIFOFLGS
 ;

205 
EXTERN
 
xd©a
 
	$_AT_
(0xE6ABËvﬁ©ûê
BYTE
 
EP2FIFOBCH
 ;

206 
EXTERN
 
xd©a
 
	$_AT_
(0xE6ACËvﬁ©ûê
BYTE
 
EP2FIFOBCL
 ;

207 
EXTERN
 
xd©a
 
	$_AT_
(0xE6ADËvﬁ©ûê
BYTE
 
EP4FIFOBCH
 ;

208 
EXTERN
 
xd©a
 
	$_AT_
(0xE6AEËvﬁ©ûê
BYTE
 
EP4FIFOBCL
 ;

209 
EXTERN
 
xd©a
 
	$_AT_
(0xE6AFËvﬁ©ûê
BYTE
 
EP6FIFOBCH
 ;

210 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B0Ëvﬁ©ûê
BYTE
 
EP6FIFOBCL
 ;

211 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B1Ëvﬁ©ûê
BYTE
 
EP8FIFOBCH
 ;

212 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B2Ëvﬁ©ûê
BYTE
 
EP8FIFOBCL
 ;

213 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B3Ëvﬁ©ûê
BYTE
 
SUDPTRH
 ;

214 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B4Ëvﬁ©ûê
BYTE
 
SUDPTRL
 ;

215 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B5Ëvﬁ©ûê
BYTE
 
SUDPTRCTL
 ;

216 
EXTERN
 
xd©a
 
	$_AT_
(0xE6B8Ëvﬁ©ûê
BYTE
 
SETUPDAT
[8] ;

220 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C0Ëvﬁ©ûê
BYTE
 
GPIFWFSELECT
 ;

221 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C1Ëvﬁ©ûê
BYTE
 
GPIFIDLECS
 ;

222 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C2Ëvﬁ©ûê
BYTE
 
GPIFIDLECTL
 ;

223 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C3Ëvﬁ©ûê
BYTE
 
GPIFCTLCFG
 ;

224 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C4Ëvﬁ©ûê
BYTE
 
GPIFADRH
 ;

225 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C5Ëvﬁ©ûê
BYTE
 
GPIFADRL
 ;

227 
EXTERN
 
xd©a
 
	$_AT_
(0xE6CEËvﬁ©ûê
BYTE
 
GPIFTCB3
 ;

228 
EXTERN
 
xd©a
 
	$_AT_
(0xE6CFËvﬁ©ûê
BYTE
 
GPIFTCB2
 ;

229 
EXTERN
 
xd©a
 
	$_AT_
(0xE6D0Ëvﬁ©ûê
BYTE
 
GPIFTCB1
 ;

230 
EXTERN
 
xd©a
 
	$_AT_
(0xE6D1Ëvﬁ©ûê
BYTE
 
GPIFTCB0
 ;

232 
	#EP2GPIFTCH
 
GPIFTCB1


233 
	#EP2GPIFTCL
 
GPIFTCB0


234 
	#EP4GPIFTCH
 
GPIFTCB1


235 
	#EP4GPIFTCL
 
GPIFTCB0


236 
	#EP6GPIFTCH
 
GPIFTCB1


237 
	#EP6GPIFTCL
 
GPIFTCB0


238 
	#EP8GPIFTCH
 
GPIFTCB1


239 
	#EP8GPIFTCL
 
GPIFTCB0


240 

	)

243 
EXTERN
 
xd©a
 
	$_AT_
(0xE6D2Ëvﬁ©ûê
BYTE
 
EP2GPIFFLGSEL
 ;

244 
EXTERN
 
xd©a
 
	$_AT_
(0xE6D3Ëvﬁ©ûê
BYTE
 
EP2GPIFPFSTOP
 ;

245 
EXTERN
 
xd©a
 
	$_AT_
(0xE6D4Ëvﬁ©ûê
BYTE
 
EP2GPIFTRIG
 ;

248 
EXTERN
 
xd©a
 
	$_AT_
(0xE6DAËvﬁ©ûê
BYTE
 
EP4GPIFFLGSEL
 ;

249 
EXTERN
 
xd©a
 
	$_AT_
(0xE6DBËvﬁ©ûê
BYTE
 
EP4GPIFPFSTOP
 ;

250 
EXTERN
 
xd©a
 
	$_AT_
(0xE6DCËvﬁ©ûê
BYTE
 
EP4GPIFTRIG
 ;

253 
EXTERN
 
xd©a
 
	$_AT_
(0xE6E2Ëvﬁ©ûê
BYTE
 
EP6GPIFFLGSEL
 ;

254 
EXTERN
 
xd©a
 
	$_AT_
(0xE6E3Ëvﬁ©ûê
BYTE
 
EP6GPIFPFSTOP
 ;

255 
EXTERN
 
xd©a
 
	$_AT_
(0xE6E4Ëvﬁ©ûê
BYTE
 
EP6GPIFTRIG
 ;

258 
EXTERN
 
xd©a
 
	$_AT_
(0xE6EAËvﬁ©ûê
BYTE
 
EP8GPIFFLGSEL
 ;

259 
EXTERN
 
xd©a
 
	$_AT_
(0xE6EBËvﬁ©ûê
BYTE
 
EP8GPIFPFSTOP
 ;

260 
EXTERN
 
xd©a
 
	$_AT_
(0xE6ECËvﬁ©ûê
BYTE
 
EP8GPIFTRIG
 ;

261 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F0Ëvﬁ©ûê
BYTE
 
XGPIFSGLDATH
 ;

262 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F1Ëvﬁ©ûê
BYTE
 
XGPIFSGLDATLX
 ;

263 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F2Ëvﬁ©ûê
BYTE
 
XGPIFSGLDATLNOX
 ;

264 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F3Ëvﬁ©ûê
BYTE
 
GPIFREADYCFG
 ;

265 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F4Ëvﬁ©ûê
BYTE
 
GPIFREADYSTAT
 ;

266 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F5Ëvﬁ©ûê
BYTE
 
GPIFABORT
 ;

270 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C6Ëvﬁ©ûê
BYTE
 
FLOWSTATE
 ;

271 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C7Ëvﬁ©ûê
BYTE
 
FLOWLOGIC
 ;

272 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C8Ëvﬁ©ûê
BYTE
 
FLOWEQ0CTL
 ;

273 
EXTERN
 
xd©a
 
	$_AT_
(0xE6C9Ëvﬁ©ûê
BYTE
 
FLOWEQ1CTL
 ;

274 
EXTERN
 
xd©a
 
	$_AT_
(0xE6CAËvﬁ©ûê
BYTE
 
FLOWHOLDOFF
 ;

275 
EXTERN
 
xd©a
 
	$_AT_
(0xE6CBËvﬁ©ûê
BYTE
 
FLOWSTB
 ;

276 
EXTERN
 
xd©a
 
	$_AT_
(0xE6CCËvﬁ©ûê
BYTE
 
FLOWSTBEDGE
 ;

277 
EXTERN
 
xd©a
 
	$_AT_
(0xE6CDËvﬁ©ûê
BYTE
 
FLOWSTBHPERIOD
 ;

278 
EXTERN
 
xd©a
 
	$_AT_
(0xE60CËvﬁ©ûê
BYTE
 
GPIFHOLDAMOUNT
 ;

279 
EXTERN
 
xd©a
 
	$_AT_
(0xE67DËvﬁ©ûê
BYTE
 
UDMACRCH
 ;

280 
EXTERN
 
xd©a
 
	$_AT_
(0xE67EËvﬁ©ûê
BYTE
 
UDMACRCL
 ;

281 
EXTERN
 
xd©a
 
	$_AT_
(0xE67FËvﬁ©ûê
BYTE
 
UDMACRCQUAL
 ;

286 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F8Ëvﬁ©ûê
BYTE
 
DBUG
 ;

287 
EXTERN
 
xd©a
 
	$_AT_
(0xE6F9Ëvﬁ©ûê
BYTE
 
TESTCFG
 ;

288 
EXTERN
 
xd©a
 
	$_AT_
(0xE6FAËvﬁ©ûê
BYTE
 
USBTEST
 ;

289 
EXTERN
 
xd©a
 
	$_AT_
(0xE6FBËvﬁ©ûê
BYTE
 
CT1
 ;

290 
EXTERN
 
xd©a
 
	$_AT_
(0xE6FCËvﬁ©ûê
BYTE
 
CT2
 ;

291 
EXTERN
 
xd©a
 
	$_AT_
(0xE6FDËvﬁ©ûê
BYTE
 
CT3
 ;

292 
EXTERN
 
xd©a
 
	$_AT_
(0xE6FEËvﬁ©ûê
BYTE
 
CT4
 ;

296 
EXTERN
 
xd©a
 
	$_AT_
(0xE740Ëvﬁ©ûê
BYTE
 
EP0BUF
[64] ;

297 
EXTERN
 
xd©a
 
	$_AT_
(0xE780Ëvﬁ©ûê
BYTE
 
EP1OUTBUF
[64] ;

298 
EXTERN
 
xd©a
 
	$_AT_
(0xE7C0Ëvﬁ©ûê
BYTE
 
EP1INBUF
[64] ;

299 
EXTERN
 
xd©a
 
	$_AT_
(0xF000Ëvﬁ©ûê
BYTE
 
EP2FIFOBUF
[1024] ;

300 
EXTERN
 
xd©a
 
	$_AT_
(0xF400Ëvﬁ©ûê
BYTE
 
EP4FIFOBUF
[1024] ;

301 
EXTERN
 
xd©a
 
	$_AT_
(0xF800Ëvﬁ©ûê
BYTE
 
EP6FIFOBUF
[1024] ;

302 
EXTERN
 
xd©a
 
	$_AT_
(0xFC00Ëvﬁ©ûê
BYTE
 
EP8FIFOBUF
[1024] ;

304 #unde‡
EXTERN


305 #unde‡
_AT_


315 
s‰
 
©
 0x80 
IOA
;

316 
s‰
 
©
 0x81 
SP
;

317 
s‰
 
©
 0x82 
DPL
;

318 
s‰
 
©
 0x83 
DPH
;

319 
s‰
 
©
 0x84 
DPL1
;

320 
s‰
 
©
 0x85 
DPH1
;

321 
s‰
 
©
 0x86 
DPS
;

323 
sbô
 
©
 0x86+0 
SEL
;

324 
s‰
 
©
 0x87 
PCON
;

330 
s‰
 
©
 0x88 
TCON
;

332 
sbô
 
©
 0x88+0 
IT0
;

333 
sbô
 
©
 0x88+1 
IE0
;

334 
sbô
 
©
 0x88+2 
IT1
;

335 
sbô
 
©
 0x88+3 
IE1
;

336 
sbô
 
©
 0x88+4 
TR0
;

337 
sbô
 
©
 0x88+5 
TF0
;

338 
sbô
 
©
 0x88+6 
TR1
;

339 
sbô
 
©
 0x88+7 
TF1
;

340 
s‰
 
©
 0x89 
TMOD
;

350 
s‰
 
©
 0x8A 
TL0
;

351 
s‰
 
©
 0x8B 
TL1
;

352 
s‰
 
©
 0x8C 
TH0
;

353 
s‰
 
©
 0x8D 
TH1
;

354 
s‰
 
©
 0x8E 
CKCON
;

365 
s‰
 
©
 0x90 
IOB
;

366 
s‰
 
©
 0x91 
EXIF
;

372 
s‰
 
©
 0x92 
MPAGE
;

373 
s‰
 
©
 0x98 
SCON0
;

375 
sbô
 
©
 0x98+0 
RI
;

376 
sbô
 
©
 0x98+1 
TI
;

377 
sbô
 
©
 0x98+2 
RB8
;

378 
sbô
 
©
 0x98+3 
TB8
;

379 
sbô
 
©
 0x98+4 
REN
;

380 
sbô
 
©
 0x98+5 
SM2
;

381 
sbô
 
©
 0x98+6 
SM1
;

382 
sbô
 
©
 0x98+7 
SM0
;

383 
s‰
 
©
 0x99 
SBUF0
;

385 
s‰
 
©
 0x9A 
APTR1H
;

386 
s‰
 
©
 0x9B 
APTR1L
;

387 
s‰
 
©
 0x9C 
AUTODAT1
;

388 
s‰
 
©
 0x9D 
AUTOPTRH2
;

389 
s‰
 
©
 0x9E 
AUTOPTRL2
;

390 
s‰
 
©
 0x9F 
AUTODAT2
;

391 
s‰
 
©
 0xA0 
IOC
;

392 
s‰
 
©
 0xA1 
INT2CLR
;

393 
s‰
 
©
 0xA2 
INT4CLR
;

395 
	#AUTOPTRH1
 
APTR1H


	)

396 
	#AUTOPTRL1
 
APTR1L


	)

398 
s‰
 
©
 0xA8 
IE
;

400 
sbô
 
©
 0xA8+0 
EX0
;

401 
sbô
 
©
 0xA8+1 
ET0
;

402 
sbô
 
©
 0xA8+2 
EX1
;

403 
sbô
 
©
 0xA8+3 
ET1
;

404 
sbô
 
©
 0xA8+4 
ES0
;

405 
sbô
 
©
 0xA8+5 
ET2
;

406 
sbô
 
©
 0xA8+6 
ES1
;

407 
sbô
 
©
 0xA8+7 
EA
;

409 
s‰
 
©
 0xAA 
EP2468STAT
;

420 
s‰
 
©
 0xAB 
EP24FIFOFLGS
;

421 
s‰
 
©
 0xAC 
EP68FIFOFLGS
;

422 
s‰
 
©
 0xAF 
AUTOPTRSETUP
;

428 
s‰
 
©
 0xB0 
IOD
;

429 
s‰
 
©
 0xB1 
IOE
;

430 
s‰
 
©
 0xB2 
OEA
;

431 
s‰
 
©
 0xB3 
OEB
;

432 
s‰
 
©
 0xB4 
OEC
;

433 
s‰
 
©
 0xB5 
OED
;

434 
s‰
 
©
 0xB6 
OEE
;

436 
s‰
 
©
 0xB8 
IP
;

438 
sbô
 
©
 0xB8+0 
PX0
;

439 
sbô
 
©
 0xB8+1 
PT0
;

440 
sbô
 
©
 0xB8+2 
PX1
;

441 
sbô
 
©
 0xB8+3 
PT1
;

442 
sbô
 
©
 0xB8+4 
PS0
;

443 
sbô
 
©
 0xB8+5 
PT2
;

444 
sbô
 
©
 0xB8+6 
PS1
;

446 
s‰
 
©
 0xBA 
EP01STAT
;

447 
s‰
 
©
 0xBB 
GPIFTRIG
;

449 
s‰
 
©
 0xBD 
GPIFSGLDATH
;

450 
s‰
 
©
 0xBE 
GPIFSGLDATLX
;

451 
s‰
 
©
 0xBF 
GPIFSGLDATLNOX
;

453 
s‰
 
©
 0xC0 
SCON1
;

455 
sbô
 
©
 0xC0+0 
RI1
;

456 
sbô
 
©
 0xC0+1 
TI1
;

457 
sbô
 
©
 0xC0+2 
RB81
;

458 
sbô
 
©
 0xC0+3 
TB81
;

459 
sbô
 
©
 0xC0+4 
REN1
;

460 
sbô
 
©
 0xC0+5 
SM21
;

461 
sbô
 
©
 0xC0+6 
SM11
;

462 
sbô
 
©
 0xC0+7 
SM01
;

463 
s‰
 
©
 0xC1 
SBUF1
;

464 
s‰
 
©
 0xC8 
T2CON
;

466 
sbô
 
©
 0xC8+0 
CP_RL2
;

467 
sbô
 
©
 0xC8+1 
C_T2
;

468 
sbô
 
©
 0xC8+2 
TR2
;

469 
sbô
 
©
 0xC8+3 
EXEN2
;

470 
sbô
 
©
 0xC8+4 
TCLK
;

471 
sbô
 
©
 0xC8+5 
RCLK
;

472 
sbô
 
©
 0xC8+6 
EXF2
;

473 
sbô
 
©
 0xC8+7 
TF2
;

474 
s‰
 
©
 0xCA 
RCAP2L
;

475 
s‰
 
©
 0xCB 
RCAP2H
;

476 
s‰
 
©
 0xCC 
TL2
;

477 
s‰
 
©
 0xCD 
TH2
;

478 
s‰
 
©
 0xD0 
PSW
;

480 
sbô
 
©
 0xD0+0 
P
;

481 
sbô
 
©
 0xD0+1 
FL
;

482 
sbô
 
©
 0xD0+2 
OV
;

483 
sbô
 
©
 0xD0+3 
RS0
;

484 
sbô
 
©
 0xD0+4 
RS1
;

485 
sbô
 
©
 0xD0+5 
F0
;

486 
sbô
 
©
 0xD0+6 
AC
;

487 
sbô
 
©
 0xD0+7 
CY
;

488 
s‰
 
©
 0xD8 
EICON
;

490 
sbô
 
©
 0xD8+3 
INT6
;

491 
sbô
 
©
 0xD8+4 
RESI
;

492 
sbô
 
©
 0xD8+5 
ERESI
;

493 
sbô
 
©
 0xD8+7 
SMOD1
;

494 
s‰
 
©
 0xE0 
ACC
;

495 
s‰
 
©
 0xE8 
EIE
;

497 
sbô
 
©
 0xE8+0 
EIUSB
;

498 
sbô
 
©
 0xE8+1 
EI2C
;

499 
sbô
 
©
 0xE8+2 
EIEX4
;

500 
sbô
 
©
 0xE8+3 
EIEX5
;

501 
sbô
 
©
 0xE8+4 
EIEX6
;

502 
s‰
 
©
 0xF0 
B
;

503 
s‰
 
©
 0xF8 
EIP
;

505 
sbô
 
©
 0xF8+0 
PUSB
;

506 
sbô
 
©
 0xF8+1 
PI2C
;

507 
sbô
 
©
 0xF8+2 
EIPX4
;

508 
sbô
 
©
 0xF8+3 
EIPX5
;

509 
sbô
 
©
 0xF8+4 
EIPX6
;

515 
	#bmBIT0
 1

	)

516 
	#bmBIT1
 2

	)

517 
	#bmBIT2
 4

	)

518 
	#bmBIT3
 8

	)

519 
	#bmBIT4
 16

	)

520 
	#bmBIT5
 32

	)

521 
	#bmBIT6
 64

	)

522 
	#bmBIT7
 128

	)

525 
	#bmPRTCSTB
 
bmBIT5


	)

526 
	#bmCLKSPD
 (
bmBIT4
 | 
bmBIT3
)

	)

527 
	#bmCLKSPD1
 
bmBIT4


	)

528 
	#bmCLKSPD0
 
bmBIT3


	)

529 
	#bmCLKINV
 
bmBIT2


	)

530 
	#bmCLKOE
 
bmBIT1


	)

531 
	#bm8051RES
 
bmBIT0


	)

534 
	#bmFLAGD
 
bmBIT7


	)

535 
	#bmINT1
 
bmBIT1


	)

536 
	#bmINT0
 
bmBIT0


	)

538 
	#bmGPIFA7
 
bmBIT7


	)

539 
	#bmGPIFA6
 
bmBIT6


	)

540 
	#bmGPIFA5
 
bmBIT5


	)

541 
	#bmGPIFA4
 
bmBIT4


	)

542 
	#bmGPIFA3
 
bmBIT3


	)

543 
	#bmGPIFA2
 
bmBIT2


	)

544 
	#bmGPIFA1
 
bmBIT1


	)

545 
	#bmGPIFA0
 
bmBIT0


	)

547 
	#bmGPIFA8
 
bmBIT7


	)

548 
	#bmT2EX
 
bmBIT6


	)

549 
	#bmINT6
 
bmBIT5


	)

550 
	#bmRXD1OUT
 
bmBIT4


	)

551 
	#bmRXD0OUT
 
bmBIT3


	)

552 
	#bmT2OUT
 
bmBIT2


	)

553 
	#bmT1OUT
 
bmBIT1


	)

554 
	#bmT0OUT
 
bmBIT0


	)

557 
	#bmSTART
 
bmBIT7


	)

558 
	#bmSTOP
 
bmBIT6


	)

559 
	#bmLASTRD
 
bmBIT5


	)

560 
	#bmID
 (
bmBIT4
 | 
bmBIT3
)

	)

561 
	#bmBERR
 
bmBIT2


	)

562 
	#bmACK
 
bmBIT1


	)

563 
	#bmDONE
 
bmBIT0


	)

565 
	#bmSTOPIE
 
bmBIT1


	)

566 
	#bm400KHZ
 
bmBIT0


	)

568 
	#bmIV4
 
bmBIT6


	)

569 
	#bmIV3
 
bmBIT5


	)

570 
	#bmIV2
 
bmBIT4


	)

571 
	#bmIV1
 
bmBIT3


	)

572 
	#bmIV0
 
bmBIT2


	)

574 
	#bmEP0ACK
 
bmBIT6


	)

575 
	#bmHSGRANT
 
bmBIT5


	)

576 
	#bmURES
 
bmBIT4


	)

577 
	#bmSUSP
 
bmBIT3


	)

578 
	#bmSUTOK
 
bmBIT2


	)

579 
	#bmSOF
 
bmBIT1


	)

580 
	#bmSUDAV
 
bmBIT0


	)

582 
	#bmBREAK
 
bmBIT3


	)

583 
	#bmBPPULSE
 
bmBIT2


	)

584 
	#bmBPEN
 
bmBIT1


	)

586 
	#bmAV2EN
 
bmBIT3


	)

587 
	#bmINT4IN
 
bmBIT1


	)

588 
	#bmAV4EN
 
bmBIT0


	)

590 
	#bmHSM
 
bmBIT7


	)

591 
	#bmDISCON
 
bmBIT3


	)

592 
	#bmNOSYNSOF
 
bmBIT2


	)

593 
	#bmRENUM
 
bmBIT1


	)

594 
	#bmSIGRESUME
 
bmBIT0


	)

596 
	#bmWU2
 
bmBIT7


	)

597 
	#bmWU
 
bmBIT6


	)

598 
	#bmWU2POL
 
bmBIT5


	)

599 
	#bmWUPOL
 
bmBIT4


	)

600 
	#bmDPEN
 
bmBIT2


	)

601 
	#bmWU2EN
 
bmBIT1


	)

602 
	#bmWUEN
 
bmBIT0


	)

604 
	#bmHSNAK
 
bmBIT7


	)

606 
	#bmEPBUSY
 
bmBIT1


	)

607 
	#bmEPSTALL
 
bmBIT0


	)

609 
	#bmNPAK
 (
bmBIT6
 | 
bmBIT5
 | 
bmBIT4
)

	)

610 
	#bmEPFULL
 
bmBIT3


	)

611 
	#bmEPEMPTY
 
bmBIT2


	)

613 
	#bmEP8FULL
 
bmBIT7


	)

614 
	#bmEP8EMPTY
 
bmBIT6


	)

615 
	#bmEP6FULL
 
bmBIT5


	)

616 
	#bmEP6EMPTY
 
bmBIT4


	)

617 
	#bmEP4FULL
 
bmBIT3


	)

618 
	#bmEP4EMPTY
 
bmBIT2


	)

619 
	#bmEP2FULL
 
bmBIT1


	)

620 
	#bmEP2EMPTY
 
bmBIT0


	)

622 
	#bmSDPAUTO
 
bmBIT0


	)

624 
	#bmQUERYTOGGLE
 
bmBIT7


	)

625 
	#bmSETTOGGLE
 
bmBIT6


	)

626 
	#bmRESETTOGGLE
 
bmBIT5


	)

627 
	#bmTOGCTLEPMASK
 
bmBIT3
 | 
bmBIT2
 | 
bmBIT1
 | 
bmBIT0


	)

629 
	#bmEP8IBN
 
bmBIT5


	)

630 
	#bmEP6IBN
 
bmBIT4


	)

631 
	#bmEP4IBN
 
bmBIT3


	)

632 
	#bmEP2IBN
 
bmBIT2


	)

633 
	#bmEP1IBN
 
bmBIT1


	)

634 
	#bmEP0IBN
 
bmBIT0


	)

637 
	#bmEP8PING
 
bmBIT7


	)

638 
	#bmEP6PING
 
bmBIT6


	)

639 
	#bmEP4PING
 
bmBIT5


	)

640 
	#bmEP2PING
 
bmBIT4


	)

641 
	#bmEP1PING
 
bmBIT3


	)

642 
	#bmEP0PING
 
bmBIT2


	)

643 
	#bmIBN
 
bmBIT0


	)

646 
	#bmIFCLKSRC
 
bmBIT7


647 
	#bm3048MHZ
 
bmBIT6


648 
	#bmIFCLKOE
 
bmBIT5


	)

649 
	#bmIFCLKPOL
 
bmBIT4


	)

650 
	#bmASYNC
 
bmBIT3


	)

651 
	#bmGSTATE
 
bmBIT2


	)

652 
	#bmIFCFG1
 
bmBIT1


	)

653 
	#bmIFCFG0
 
bmBIT0


	)

654 
	#bmIFCFGMASK
 (
bmIFCFG0
 | 
bmIFCFG1
)

	)

655 
	#bmIFGPIF
 
bmIFCFG1


	)

656 
	#bmIFSLAVE
 (
bmIFCFG0
 | 
bmIFCFG1
)

	)

659 
	#bmINDEXED
 0x0

660 
	#bmEP2PF
 0x4

	)

661 
	#bmEP4PF
 0x5

	)

662 
	#bmEP6PF
 0x6

	)

663 
	#bmEP8PF
 0x7

	)

664 
	#bmEP2EF
 0x8

	)

665 
	#bmEP4EF
 0x9

	)

666 
	#bmEP6EF
 0xA

	)

667 
	#bmEP8EF
 0xB

	)

668 
	#bmEP2FF
 0xC

	)

669 
	#bmEP4FF
 0xD

	)

670 
	#bmEP6FF
 0xE

	)

671 
	#bmEP8FF
 0xF

	)

674 
	#bmINFM
 
bmBIT6


	)

675 
	#bmOEP
 
bmBIT5


	)

676 
	#bmAUTOOUT
 
bmBIT4


	)

677 
	#bmAUTOIN
 
bmBIT3


	)

678 
	#bmZEROLENIN
 
bmBIT2


	)

680 
	#bmWORDWIDE
 
bmBIT0


	)

683 
	#EP2FIFOEMPTY
 
bmBIT1


	)

684 
	#EP4FIFOEMPTY
 
bmBIT5


	)

689 
	#bmNOAUTOARM
 
bmBIT1


690 
	#bmSKIPCOMMIT
 
bmBIT0


691 

	)

692 
	#bmDYN_OUT
 
bmBIT1


693 
	#bmENH_PKT
 
bmBIT0


	)

697 
	#bmNAKALL
 
bmBIT7


	)

700 
	#bmVALID
 
bmBIT7


	)

701 
	#bmIN
 
bmBIT6


	)

702 
	#bmTYPE1
 
bmBIT5


	)

703 
	#bmTYPE0
 
bmBIT4


	)

704 
	#bmISOCHRONOUS
 
bmTYPE0


	)

705 
	#bmBULK
 
bmTYPE1


	)

706 
	#bmINTERRUPT
 (
bmTYPE1
 | 
bmTYPE0
)

	)

707 
	#bm1KBUF
 
bmBIT3


	)

708 
	#bmBUF1
 
bmBIT1


	)

709 
	#bmBUF0
 
bmBIT0


	)

710 
	#bmQUADBUF
 0

	)

711 
	#bmINVALIDBUF
 
bmBUF0


	)

712 
	#bmDOUBLEBUF
 
bmBUF1


	)

713 
	#bmTRIPLEBUF
 (
bmBUF1
 | 
bmBUF0
)

	)

716 
	#bmSKIP
 
bmBIT7


717 

	)

719 
	#bmGPIF_IDLE
 
bmBIT7


720 

	)

721 
	#bmGPIF_EP2_START
 0

	)

722 
	#bmGPIF_EP4_START
 1

	)

723 
	#bmGPIF_EP6_START
 2

	)

724 
	#bmGPIF_EP8_START
 3

	)

725 
	#bmGPIF_READ
 
bmBIT2


	)

726 
	#bmGPIF_WRITE
 0

	)

729 
	#bmEXIF_USBINT
 
bmBIT4


	)

730 
	#bmEXIF_I2CINT
 
bmBIT5


	)

731 
	#bmEXIF_IE4
 
bmBIT6


	)

732 
	#bmEXIF_IE5
 
bmBIT7


	)

	@firmware/fx2/common/fx2utils.c

23 
	~"fx2utûs.h
"

24 
	~"fx2ªgs.h
"

25 
	~"dñay.h
"

28 
	$fx2_°Æl_ï0
 ()

30 
EP0CS
 |
bmEPSTALL
;

31 
	}
}

34 
	$fx2_ª£t_d©a_toggÀ
 (
ï
)

36 
TOGCTL
 = ((
ï
 & 0x80) >> 3 | (ep & 0x0f));

37 
TOGCTL
 |
bmRESETTOGGLE
;

38 
	}
}

41 
	$fx2_ªnumî©e
 ()

43 
USBCS
 |
bmDISCON
 | 
bmRENUM
;

46 
	`mdñay
 (250);

48 
USBIRQ
 = 0xff;

49 
EPIRQ
 = 0xff;

51 
EXIF
 &~
bmEXIF_USBINT
;

53 
USBCS
 &~
bmDISCON
;

54 
	}
}

	@firmware/fx2/common/fx2utils.h

22 #i‚de‡
_FX2UTILS_H_


23 
	#_FX2UTILS_H_


	)

25 
fx2_°Æl_ï0
 ();

26 
fx2_ª£t_d©a_toggÀ
 (
ï
);

27 
fx2_ªnumî©e
 ();

	@firmware/fx2/common/i2c.c

23 
	~"i2c.h
"

24 
	~"fx2ªgs.h
"

25 
	~<°rög.h
>

33 
	$i2c_ªad
 (
addr
, 
xd©a
 *
buf
, 
Àn
)

35 vﬁ©ûê
junk
;

37 i‡(
Àn
 == 0)

40 
I2CS
 & 
bmSTOP
)

43 
I2CS
 = 
bmSTART
;

44 
I2DAT
 = (
addr
 << 1) | 1;

46 (
I2CS
 & 
bmDONE
) == 0)

49 i‡((
I2CS
 & 
bmBERR
Ë|| (I2CS & 
bmACK
) == 0)

50 
Áû
;

52 i‡(
Àn
 == 1)

53 
I2CS
 |
bmLASTRD
;

55 
junk
 = 
I2DAT
;

57 --
Àn
 != 0){

58 (
I2CS
 & 
bmDONE
) == 0)

61 i‡(
I2CS
 & 
bmBERR
)

62 
Áû
;

64 i‡(
Àn
 == 1)

65 
I2CS
 |
bmLASTRD
;

67 *
buf
++ = 
I2DAT
;

72 (
I2CS
 & 
bmDONE
) == 0)

75 i‡(
I2CS
 & 
bmBERR
)

76 
Áû
;

78 
I2CS
 |
bmSTOP
;

79 *
buf
 = 
I2DAT
;

83 
Áû
:

84 
I2CS
 |
bmSTOP
;

86 
	}
}

92 
	$i2c_wrôe
 (
addr
, 
xd©a
 c⁄° *
buf
, 
Àn
)

94 
I2CS
 & 
bmSTOP
)

97 
I2CS
 = 
bmSTART
;

98 
I2DAT
 = (
addr
 << 1) | 0;

100 (
I2CS
 & 
bmDONE
) == 0)

103 i‡((
I2CS
 & 
bmBERR
Ë|| (I2CS & 
bmACK
) == 0)

104 
Áû
;

106 
Àn
 > 0){

107 
I2DAT
 = *
buf
++;

108 
Àn
--;

110 (
I2CS
 & 
bmDONE
) == 0)

113 i‡((
I2CS
 & 
bmBERR
Ë|| (I2CS & 
bmACK
) == 0)

114 
Áû
;

117 
I2CS
 |
bmSTOP
;

120 
Áû
:

121 
I2CS
 |
bmSTOP
;

123 
	}
}

	@firmware/fx2/common/i2c.h

23 #i‚de‡
_I2C_H_


24 
	#_I2C_H_


	)

27 
i2c_ªad
 (
addr
, 
xd©a
 *
buf
, 
Àn
);

30 
i2c_wrôe
 (
addr
, 
xd©a
 c⁄° *
buf
, 
Àn
);

	@firmware/fx2/common/init_gpif.c

21 
	~"u§p_comm⁄.h
"

25 c⁄° 
WaveD©a
[128];

26 c⁄° 
FlowSèãs
[36];

27 c⁄° 
InôD©a
[7];

35 
	$öô_gpif
 ()

39 
GPIFABORT
 = 0xFF;

40 
SYNCDELAY
;

42 
GPIFREADYCFG
 = 
InôD©a
[ 0 ];

43 
GPIFCTLCFG
 = 
InôD©a
[ 1 ];

44 
GPIFIDLECS
 = 
InôD©a
[ 2 ];

45 
GPIFIDLECTL
 = 
InôD©a
[ 3 ];

47 
GPIFWFSELECT
 = 
InôD©a
[ 5 ];

51 
BYTE
 
i
;

53 
i
 = 0; i < 128; i++){

54 
GPIF_WAVE_DATA
[
i
] = 
WaveD©a
[i];

58 
FLOWSTATE
 = 0;

59 
	}
}

	@firmware/fx2/common/isr.c

23 
	~"i§.h
"

24 
	~"fx2ªgs.h
"

25 
	~"syncdñay.h
"

27 
xd©a
 
_°™d¨d_öãºu±_ve˘‹
[];

28 
xd©a
 
_usb_autove˘‹
[];

29 
xd©a
 
_fifo_gpif_autove˘‹
[];

31 
	#LJMP_OPCODE
 0x02

	)

40 
	$hook_sv
 (
ve˘‹_numbî
, 
addr
)

42 
bô
 
t
;

46 i‡(
ve˘‹_numbî
 < 
SV_MIN
 || ve˘‹_numbî > 
SV_MAX
)

49 i‡((
ve˘‹_numbî
 & 0x0f) != 0x03 && (vector_number & 0x0f) != 0x0b)

52 
t
 = 
EA
;

53 
EA
 = 0;

54 
_°™d¨d_öãºu±_ve˘‹
[
ve˘‹_numbî
] = 
LJMP_OPCODE
;

55 
_°™d¨d_öãºu±_ve˘‹
[
ve˘‹_numbî
 + 1] = 
addr
 >> 8;

56 
_°™d¨d_öãºu±_ve˘‹
[
ve˘‹_numbî
 + 2] = 
addr
 & 0xff;

57 
EA
 = 
t
;

58 
	}
}

67 
	$hook_uv
 (
ve˘‹_numbî
, 
addr
)

69 
bô
 
t
;

73 i‡(
ve˘‹_numbî
 < 
UV_MIN
 || ve˘‹_numbî > 
UV_MAX
)

76 i‡((
ve˘‹_numbî
 & 0x3) != 0)

79 
t
 = 
EA
;

80 
EA
 = 0;

81 
_usb_autove˘‹
[
ve˘‹_numbî
] = 
LJMP_OPCODE
;

82 
_usb_autove˘‹
[
ve˘‹_numbî
 + 1] = 
addr
 >> 8;

83 
_usb_autove˘‹
[
ve˘‹_numbî
 + 2] = 
addr
 & 0xff;

84 
EA
 = 
t
;

85 
	}
}

94 
	$hook_fgv
 (
ve˘‹_numbî
, 
addr
)

96 
bô
 
t
;

100 i‡(
ve˘‹_numbî
 < 
FGV_MIN
 || ve˘‹_numbî > 
FGV_MAX
)

103 i‡((
ve˘‹_numbî
 & 0x3) != 0)

106 
t
 = 
EA
;

107 
EA
 = 0;

108 
_fifo_gpif_autove˘‹
[
ve˘‹_numbî
] = 
LJMP_OPCODE
;

109 
_fifo_gpif_autove˘‹
[
ve˘‹_numbî
 + 1] = 
addr
 >> 8;

110 
_fifo_gpif_autove˘‹
[
ve˘‹_numbî
 + 2] = 
addr
 & 0xff;

111 
EA
 = 
t
;

112 
	}
}

122 
	$£tup_autove˘‹s
 ()

125 
EIUSB
 = 0;

126 
EIEX4
 = 0;

128 
	`hook_sv
 (
SV_INT_2
, (Ë
_usb_autove˘‹
);

129 
	`hook_sv
 (
SV_INT_4
, (Ë
_fifo_gpif_autove˘‹
);

132 
SYNCDELAY
;

133 
EP2FIFOIE
 = 0; 
SYNCDELAY
;

134 
EP4FIFOIE
 = 0; 
SYNCDELAY
;

135 
EP6FIFOIE
 = 0; 
SYNCDELAY
;

136 
EP8FIFOIE
 = 0; 
SYNCDELAY
;

139 
EP2FIFOIRQ
 = 0xff; 
SYNCDELAY
;

140 
EP4FIFOIRQ
 = 0xff; 
SYNCDELAY
;

141 
EP6FIFOIRQ
 = 0xff; 
SYNCDELAY
;

142 
EP8FIFOIRQ
 = 0xff; 
SYNCDELAY
;

144 
IBNIE
 = 0;

145 
IBNIRQ
 = 0xff;

146 
NAKIE
 = 0;

147 
NAKIRQ
 = 0xff;

148 
USBIE
 = 0;

149 
USBIRQ
 = 0xff;

150 
EPIE
 = 0;

151 
EPIRQ
 = 0xff;

152 
SYNCDELAY
; 
GPIFIE
 = 0;

153 
SYNCDELAY
; 
GPIFIRQ
 = 0xff;

154 
USBERRIE
 = 0;

155 
USBERRIRQ
 = 0xff;

156 
CLRERRCNT
 = 0;

158 
INTSETUP
 = 
bmAV2EN
 | 
bmAV4EN
 | 
bmINT4IN
;

161 
EXIF
 &~
bmEXIF_USBINT
;

162 
EXIF
 &~
bmEXIF_IE4
;

165 
EIUSB
 = 1;

166 
EIEX4
 = 1;

167 
	}
}

	@firmware/fx2/common/isr.h

23 #i‚de‡
_ISR_H_


24 
	#_ISR_H_


	)

48 
	#SV_INT_0
 0x03

	)

49 
	#SV_TIMER_0
 0x0b

	)

50 
	#SV_INT_1
 0x13

	)

51 
	#SV_TIMER_1
 0x1b

	)

52 
	#SV_SERIAL_0
 0x23

	)

53 
	#SV_TIMER_2
 0x2b

	)

54 
	#SV_RESUME
 0x33

	)

55 
	#SV_SERIAL_1
 0x3b

	)

56 
	#SV_INT_2
 0x43

57 
	#SV_I2C
 0x4b

	)

58 
	#SV_INT_4
 0x53

59 
	#SV_INT_5
 0x5b

	)

60 
	#SV_INT_6
 0x63

	)

62 
	#SV_MIN
 
SV_INT_0


	)

63 
	#SV_MAX
 
SV_INT_6


	)

69 
	#UV_SUDAV
 0x00

	)

70 
	#UV_SOF
 0x04

	)

71 
	#UV_SUTOK
 0x08

	)

72 
	#UV_SUSPEND
 0x0c

	)

73 
	#UV_USBRESET
 0x10

	)

74 
	#UV_HIGHSPEED
 0x14

	)

75 
	#UV_EP0ACK
 0x18

	)

76 
	#UV_SPARE_1C
 0x1c

	)

77 
	#UV_EP0IN
 0x20

	)

78 
	#UV_EP0OUT
 0x24

	)

79 
	#UV_EP1IN
 0x28

	)

80 
	#UV_EP1OUT
 0x2c

	)

81 
	#UV_EP2
 0x30

	)

82 
	#UV_EP4
 0x34

	)

83 
	#UV_EP6
 0x38

	)

84 
	#UV_EP8
 0x3c

	)

85 
	#UV_IBN
 0x40

	)

86 
	#UV_SPARE_44
 0x44

	)

87 
	#UV_EP0PINGNAK
 0x48

	)

88 
	#UV_EP1PINGNAK
 0x4c

	)

89 
	#UV_EP2PINGNAK
 0x50

	)

90 
	#UV_EP4PINGNAK
 0x54

	)

91 
	#UV_EP6PINGNAK
 0x58

	)

92 
	#UV_EP8PINGNAK
 0x5c

	)

93 
	#UV_ERRLIMIT
 0x60

	)

94 
	#UV_SPARE_64
 0x64

	)

95 
	#UV_SPARE_68
 0x68

	)

96 
	#UV_SPARE_6C
 0x6c

	)

97 
	#UV_EP2ISOERR
 0x70

	)

98 
	#UV_EP4ISOERR
 0x74

	)

99 
	#UV_EP6ISOERR
 0x78

	)

100 
	#UV_EP8ISOERR
 0x7c

	)

102 
	#UV_MIN
 
UV_SUDAV


	)

103 
	#UV_MAX
 
UV_EP8ISOERR


	)

109 
	#FGV_EP2PF
 0x00

	)

110 
	#FGV_EP4PF
 0x04

	)

111 
	#FGV_EP6PF
 0x08

	)

112 
	#FGV_EP8PF
 0x0c

	)

113 
	#FGV_EP2EF
 0x10

	)

114 
	#FGV_EP4EF
 0x14

	)

115 
	#FGV_EP6EF
 0x18

	)

116 
	#FGV_EP8EF
 0x1c

	)

117 
	#FGV_EP2FF
 0x20

	)

118 
	#FGV_EP4FF
 0x24

	)

119 
	#FGV_EP6FF
 0x28

	)

120 
	#FGV_EP8FF
 0x2c

	)

121 
	#FGV_GPIFDONE
 0x30

	)

122 
	#FGV_GPIFWF
 0x34

	)

124 
	#FGV_MIN
 
FGV_EP2PF


	)

125 
	#FGV_MAX
 
FGV_GPIFWF


	)

134 
hook_sv
 (
ve˘‹_numbî
, 
addr
);

142 
hook_uv
 (
ve˘‹_numbî
, 
addr
);

150 
hook_fgv
 (
ve˘‹_numbî
, 
addr
);

155 
£tup_autove˘‹s
 ();

161 
	#˛ór_usb_úq
() \

162 
EXIF
 &~
bmEXIF_USBINT
; \

163 
INT2CLR
 = 0

	)

168 
	#˛ór_fifo_gpif_úq
() \

169 
EXIF
 &~
bmEXIF_IE4
; \

170 
INT4CLR
 = 0

	)

	@firmware/fx2/common/spi.c

23 
	~"•i.h
"

24 
	~"u§p_ªgs.h
"

27 
	$£tup_íabÀs
 (
íabÀs
)

33 
íabÀs
 ^
SPI_ENABLE_FPGA
;

37 
USRP_PA
 = USRP_PA | (0x7 << 3);

38 
USRP_PA
 ^(
íabÀs
 & 0x7) << 3;

41 
USRP_PE
 = USRP_PE | (0xf << 4);

42 
USRP_PE
 ^(
íabÀs
 & 0xf0);

43 
	}
}

45 
	#dißbÀ_Æl
(Ë
	`£tup_íabÀs
 (0)

	)

48 
	$öô_•i
 ()

50 
	`dißbÀ_Æl
 ();

51 
bôS_OUT
 = 0;

52 
	}
}

56 
	$cou¡_bôs8
 (
v
)

58 
cou¡4
[16] = {

76  
cou¡4
[
v
 & 0xf] + count4[(v >> 4) & 0xf];

77 
	}
}

82 
	$cou¡_bôs8
 (
v
)

84 
cou¡
 = 0;

85 i‡(
v
 & (1 << 0)Ë
cou¡
++;

86 i‡(
v
 & (1 << 1)Ë
cou¡
++;

87 i‡(
v
 & (1 << 2)Ë
cou¡
++;

88 i‡(
v
 & (1 << 3)Ë
cou¡
++;

89 i‡(
v
 & (1 << 4)Ë
cou¡
++;

90 i‡(
v
 & (1 << 5)Ë
cou¡
++;

91 i‡(
v
 & (1 << 6)Ë
cou¡
++;

92 i‡(
v
 & (1 << 7)Ë
cou¡
++;

93  
cou¡
;

94 
	}
}

98 
wrôe_byã_msb
 (
v
);

101 
wrôe_byãs_msb
 (c⁄° 
xd©a
 *
buf
, 
Àn
);

104 
ªad_byãs_msb
 (
xd©a
 *
buf
, 
Àn
);

109 
	$•i_ªad
 (
hódî_hi
, 
hódî_lo
,

110 
íabÀs
, 
f‹m©
,

111 
xd©a
 *
buf
, 
Àn
)

113 i‡(
	`cou¡_bôs8
 (
íabÀs
) > 1)

116 
	`£tup_íabÀs
 (
íabÀs
);

118 i‡(
f‹m©
 & 
SPI_FMT_LSB
){

122 
f‹m©
 & 
SPI_FMR_HDR_MASK
){

123 
SPI_FMT_HDR_0
:

125 
SPI_FMT_HDR_1
:

126 
	`wrôe_byã_lsb
 (
hódî_lo
);

128 
SPI_FMT_HDR_2
:

129 
	`wrôe_byã_lsb
 (
hódî_lo
);

130 
	`wrôe_byã_lsb
 (
hódî_hi
);

135 i‡(
Àn
 != 0)

136 
	`ªad_byãs_lsb
 (
buf
, 
Àn
);

142 
f‹m©
 & 
SPI_FMT_HDR_MASK
){

143 
SPI_FMT_HDR_0
:

145 
SPI_FMT_HDR_1
:

146 
	`wrôe_byã_msb
 (
hódî_lo
);

148 
SPI_FMT_HDR_2
:

149 
	`wrôe_byã_msb
 (
hódî_hi
);

150 
	`wrôe_byã_msb
 (
hódî_lo
);

155 i‡(
Àn
 != 0)

156 
	`ªad_byãs_msb
 (
buf
, 
Àn
);

159 
	`dißbÀ_Æl
 ();

161 
	}
}

166 
	$•i_wrôe
 (
hódî_hi
, 
hódî_lo
,

167 
íabÀs
, 
f‹m©
,

168 c⁄° 
xd©a
 *
buf
, 
Àn
)

170 
	`£tup_íabÀs
 (
íabÀs
);

172 i‡(
f‹m©
 & 
SPI_FMT_LSB
){

176 
f‹m©
 & 
SPI_FMR_HDR_MASK
){

177 
SPI_FMT_HDR_0
:

179 
SPI_FMT_HDR_1
:

180 
	`wrôe_byã_lsb
 (
hódî_lo
);

182 
SPI_FMT_HDR_2
:

183 
	`wrôe_byã_lsb
 (
hódî_lo
);

184 
	`wrôe_byã_lsb
 (
hódî_hi
);

189 i‡(
Àn
 != 0)

190 
	`wrôe_byãs_lsb
 (
buf
, 
Àn
);

196 
f‹m©
 & 
SPI_FMT_HDR_MASK
){

197 
SPI_FMT_HDR_0
:

199 
SPI_FMT_HDR_1
:

200 
	`wrôe_byã_msb
 (
hódî_lo
);

202 
SPI_FMT_HDR_2
:

203 
	`wrôe_byã_msb
 (
hódî_hi
);

204 
	`wrôe_byã_msb
 (
hódî_lo
);

209 i‡(
Àn
 != 0)

210 
	`wrôe_byãs_msb
 (
buf
, 
Àn
);

213 
	`dißbÀ_Æl
 ();

215 
	}
}

220 
	$wrôe_byã_msb
 (
v
)

222 
v
 = (v << 1) | (v >> 7);

223 
bôS_OUT
 = 
v
 & 0x1;

224 
bôS_CLK
 = 1;

225 
bôS_CLK
 = 0;

227 
v
 = (v << 1) | (v >> 7);

228 
bôS_OUT
 = 
v
 & 0x1;

229 
bôS_CLK
 = 1;

230 
bôS_CLK
 = 0;

232 
v
 = (v << 1) | (v >> 7);

233 
bôS_OUT
 = 
v
 & 0x1;

234 
bôS_CLK
 = 1;

235 
bôS_CLK
 = 0;

237 
v
 = (v << 1) | (v >> 7);

238 
bôS_OUT
 = 
v
 & 0x1;

239 
bôS_CLK
 = 1;

240 
bôS_CLK
 = 0;

242 
v
 = (v << 1) | (v >> 7);

243 
bôS_OUT
 = 
v
 & 0x1;

244 
bôS_CLK
 = 1;

245 
bôS_CLK
 = 0;

247 
v
 = (v << 1) | (v >> 7);

248 
bôS_OUT
 = 
v
 & 0x1;

249 
bôS_CLK
 = 1;

250 
bôS_CLK
 = 0;

252 
v
 = (v << 1) | (v >> 7);

253 
bôS_OUT
 = 
v
 & 0x1;

254 
bôS_CLK
 = 1;

255 
bôS_CLK
 = 0;

257 
v
 = (v << 1) | (v >> 7);

258 
bôS_OUT
 = 
v
 & 0x1;

259 
bôS_CLK
 = 1;

260 
bôS_CLK
 = 0;

261 
	}
}

264 
	$wrôe_byãs_msb
 (c⁄° 
xd©a
 *
buf
, 
Àn
)

266 
Àn
-- != 0){

267 
	`wrôe_byã_msb
 (*
buf
++);

269 
	}
}

276 
	$ªad_byã_msb
 ()

278 
v
 = 0;

280 
bôS_CLK
 = 1;

281 
v
 |
bôS_IN
;

282 
bôS_CLK
 = 0;

284 
v
 = v << 1;

285 
bôS_CLK
 = 1;

286 
v
 |
bôS_IN
;

287 
bôS_CLK
 = 0;

289 
v
 = v << 1;

290 
bôS_CLK
 = 1;

291 
v
 |
bôS_IN
;

292 
bôS_CLK
 = 0;

294 
v
 = v << 1;

295 
bôS_CLK
 = 1;

296 
v
 |
bôS_IN
;

297 
bôS_CLK
 = 0;

299 
v
 = v << 1;

300 
bôS_CLK
 = 1;

301 
v
 |
bôS_IN
;

302 
bôS_CLK
 = 0;

304 
v
 = v << 1;

305 
bôS_CLK
 = 1;

306 
v
 |
bôS_IN
;

307 
bôS_CLK
 = 0;

309 
v
 = v << 1;

310 
bôS_CLK
 = 1;

311 
v
 |
bôS_IN
;

312 
bôS_CLK
 = 0;

314 
v
 = v << 1;

315 
bôS_CLK
 = 1;

316 
v
 |
bôS_IN
;

317 
bôS_CLK
 = 0;

319  
v
;

320 
	}
}

323 
	$ªad_byã_msb
 (Ë
_«ked


325 
_asm


326 
˛r
 
a


328 
£tb
 
_bôS_CLK


329 
mov
 
c
, 
_bôS_IN


330 
æc
 
a


331 
˛r
 
_bôS_CLK


333 
£tb
 
_bôS_CLK


334 
mov
 
c
, 
_bôS_IN


335 
æc
 
a


336 
˛r
 
_bôS_CLK


338 
£tb
 
_bôS_CLK


339 
mov
 
c
, 
_bôS_IN


340 
æc
 
a


341 
˛r
 
_bôS_CLK


343 
£tb
 
_bôS_CLK


344 
mov
 
c
, 
_bôS_IN


345 
æc
 
a


346 
˛r
 
_bôS_CLK


348 
£tb
 
_bôS_CLK


349 
mov
 
c
, 
_bôS_IN


350 
æc
 
a


351 
˛r
 
_bôS_CLK


353 
£tb
 
_bôS_CLK


354 
mov
 
c
, 
_bôS_IN


355 
æc
 
a


356 
˛r
 
_bôS_CLK


358 
£tb
 
_bôS_CLK


359 
mov
 
c
, 
_bôS_IN


360 
æc
 
a


361 
˛r
 
_bôS_CLK


363 
£tb
 
_bôS_CLK


364 
mov
 
c
, 
_bôS_IN


365 
æc
 
a


366 
˛r
 
_bôS_CLK


368 
mov
 
d∂
,
a


369 
ªt


370 
_ídasm
;

371 
	}
}

375 
	$ªad_byãs_msb
 (
xd©a
 *
buf
, 
Àn
)

377 
Àn
-- != 0){

378 *
buf
++ = 
	`ªad_byã_msb
 ();

380 
	}
}

	@firmware/fx2/common/spi.h

23 #i‚de‡
INCLUDED_SPI_H


24 
	#INCLUDED_SPI_H


	)

26 
	~"u§p_•i_defs.h
"

28 
öô_•i
 ();

32 
•i_ªad
 (
hódî_hi
, 
hódî_lo
,

33 
íabÀs
, 
f‹m©
,

34 
xd©a
 *
buf
, 
Àn
);

38 
•i_wrôe
 (
hódî_hi
, 
hódî_lo
,

39 
íabÀs
, 
f‹m©
,

40 c⁄° 
xd©a
 *
buf
, 
Àn
);

	@firmware/fx2/common/syncdelay.h

22 #i‚de‡
_SYNCDELAY_H_


23 
	#_SYNCDELAY_H_


	)

61 
	#SYNCDELAY
 
_asm
 
n›
;Ç›;Ç›; 
_ídasm


	)

62 
	#NOP
 
_asm
 
n›
; 
_ídasm


	)

	@firmware/fx2/common/timer.c

23 
	~"timî.h
"

24 
	~"fx2ªgs.h
"

25 
	~"i§.h
"

36 
	#RELOAD_VALUE
 ((Ë-40000)

	)

39 
	$hook_timî_tick
 (
i§_tick_h™dÀr
)

41 
ET2
 = 0;

42 
	`hook_sv
 (
SV_TIMER_2
, 
i§_tick_h™dÀr
);

44 
RCAP2H
 = 
RELOAD_VALUE
 >> 8;

45 
RCAP2L
 = 
RELOAD_VALUE
;

47 
T2CON
 = 0x04;

48 
ET2
 = 1;

49 
	}
}

	@firmware/fx2/common/timer.h

23 #i‚de‡
_TIMER_H_


24 
	#_TIMER_H_


	)

29 
hook_timî_tick
 (
i§_tick_h™dÀr
);

31 
	#˛ór_timî_úq
() \

32 
TF2
 = 0

	)

	@firmware/fx2/common/usb_common.c

23 
	~"usb_comm⁄.h
"

24 
	~"fx2ªgs.h
"

25 
	~"syncdñay.h
"

26 
	~"fx2utûs.h
"

27 
	~"i§.h
"

28 
	~"usb_des¸ùt‹s.h
"

29 
	~"usb_ªque°s.h
"

31 
xd©a
 
°r0
[];

32 
xd©a
 
°r1
[];

33 
xd©a
 
°r2
[];

34 
xd©a
 
°r3
[];

35 
xd©a
 
°r4
[];

36 
xd©a
 
°r5
[];

39 
	#bReque°Ty≥
 
SETUPDAT
[0]

	)

40 
	#bReque°
 
SETUPDAT
[1]

	)

41 
	#wVÆueL
 
SETUPDAT
[2]

	)

42 
	#wVÆueH
 
SETUPDAT
[3]

	)

43 
	#wIndexL
 
SETUPDAT
[4]

	)

44 
	#wIndexH
 
SETUPDAT
[5]

	)

45 
	#wLígthL
 
SETUPDAT
[6]

	)

46 
	#wLígthH
 
SETUPDAT
[7]

	)

48 
	#MSB
(
x
Ë(((ËxË>> 8)

	)

49 
	#LSB
(
x
Ë(((ËxË& 0xff)

	)

51 vﬁ©ûê
bô
 
	g_usb_gŸ_SUDAV
;

53 
	g_usb_c⁄fig
 = 0;

54 
	g_usb_Æt_£âög
 = 0;

56 
xd©a
 *
	gcuºít_devi˚_des¸
;

57 
xd©a
 *
	gcuºít_devquÆ_des¸
;

58 
xd©a
 *
	gcuºít_c⁄fig_des¸
;

59 
xd©a
 *
	gŸhî_c⁄fig_des¸
;

62 
	$£tup_des¸ùt‹s
 ()

64 i‡(
USBCS
 & 
bmHSM
){

65 
cuºít_devi˚_des¸
 = 
high_•ìd_devi˚_des¸
;

66 
cuºít_devquÆ_des¸
 = 
high_•ìd_devquÆ_des¸
;

67 
cuºít_c⁄fig_des¸
 = 
high_•ìd_c⁄fig_des¸
;

68 
Ÿhî_c⁄fig_des¸
 = 
fuŒ_•ìd_c⁄fig_des¸
;

71 
cuºít_devi˚_des¸
 = 
fuŒ_•ìd_devi˚_des¸
;

72 
cuºít_devquÆ_des¸
 = 
fuŒ_•ìd_devquÆ_des¸
;

73 
cuºít_c⁄fig_des¸
 = 
fuŒ_•ìd_c⁄fig_des¸
;

74 
Ÿhî_c⁄fig_des¸
 = 
high_•ìd_c⁄fig_des¸
;

81 
	}
}

84 
	$i§_SUDAV
 (Ë
öãºu±


86 
	`˛ór_usb_úq
 ();

87 
_usb_gŸ_SUDAV
 = 1;

88 
	}
}

91 
	$i§_USBRESET
 (Ë
öãºu±


93 
	`˛ór_usb_úq
 ();

94 
	`£tup_des¸ùt‹s
 ();

95 
	}
}

98 
	$i§_HIGHSPEED
 (Ë
öãºu±


100 
	`˛ór_usb_úq
 ();

101 
	`£tup_des¸ùt‹s
 ();

102 
	}
}

105 
	$usb_ö°Æl_h™dÀrs
 ()

107 
	`£tup_des¸ùt‹s
 ();

109 
	`hook_uv
 (
UV_SUDAV
, (Ë
i§_SUDAV
);

110 
	`hook_uv
 (
UV_USBRESET
, (Ë
i§_USBRESET
);

111 
	`hook_uv
 (
UV_HIGHSPEED
, (Ë
i§_HIGHSPEED
);

113 
USBIE
 = 
bmSUDAV
 | 
bmURES
 | 
bmHSGRANT
;

114 
	}
}

120 
	$∂ausibÀ_ídpoöt
 (
ï
)

122 
ï
 &= ~0x80;

124 i‡(
ï
 > 8)

127 i‡(
ï
 == 1)

130  (
ï
 & 0x1) == 0;

131 
	}
}

136 
xd©a
 volatile *

137 
	$ïcs
 (
ï
)

139 i‡(
ï
 == 0x01)

140  
EP1OUTCS
;

142 i‡(
ï
 == 0x81)

143  
EP1INCS
;

145 
ï
 &= ~0x80;

147 i‡(
ï
 == 0x00)

148  
EP0CS
;

150  
EP2CS
 + (
ï
 >> 1);

151 
	}
}

154 
	$usb_h™dÀ_£tup_∑ckë
 ()

156 
_usb_gŸ_SUDAV
 = 0;

160 
bReque°Ty≥
 & 
bmRT_TYPE_MASK
){

162 
bmRT_TYPE_CLASS
:

163 
bmRT_TYPE_RESERVED
:

164 
	`fx2_°Æl_ï0
 ();

167 
bmRT_TYPE_VENDOR
:

171 i‡(!
	`≠p_víd‹_cmd
 ())

172 
	`fx2_°Æl_ï0
 ();

175 
bmRT_TYPE_STD
:

178 i‡((
bReque°Ty≥
 & 
bmRT_DIR_MASK
Ë=
bmRT_DIR_IN
){

184 
bReque°
){

186 
RQ_GET_CONFIG
:

187 
EP0BUF
[0] = 
_usb_c⁄fig
;

188 
EP0BCH
 = 0;

189 
EP0BCL
 = 1;

194 
RQ_GET_INTERFACE
:

195 
EP0BUF
[0] = 
_usb_Æt_£âög
;

196 
EP0BCH
 = 0;

197 
EP0BCL
 = 1;

202 
RQ_GET_DESCR
:

203 
wVÆueH
){

205 
DT_DEVICE
:

206 
SUDPTRH
 = 
	`MSB
 (
cuºít_devi˚_des¸
);

207 
SUDPTRL
 = 
	`LSB
 (
cuºít_devi˚_des¸
);

210 
DT_DEVQUAL
:

211 
SUDPTRH
 = 
	`MSB
 (
cuºít_devquÆ_des¸
);

212 
SUDPTRL
 = 
	`LSB
 (
cuºít_devquÆ_des¸
);

215 
DT_CONFIG
:

216 i‡(0 && 
wVÆueL
 != 1)

217 
	`fx2_°Æl_ï0
 ();

219 
SUDPTRH
 = 
	`MSB
 (
cuºít_c⁄fig_des¸
);

220 
SUDPTRL
 = 
	`LSB
 (
cuºít_c⁄fig_des¸
);

224 
DT_OTHER_SPEED
:

225 i‡(0 && 
wVÆueL
 != 1)

226 
	`fx2_°Æl_ï0
 ();

228 
SUDPTRH
 = 
	`MSB
 (
Ÿhî_c⁄fig_des¸
);

229 
SUDPTRL
 = 
	`LSB
 (
Ÿhî_c⁄fig_des¸
);

233 
DT_STRING
:

234 i‡(
wVÆueL
 >
n°rög_des¸ùt‹s
)

235 
	`fx2_°Æl_ï0
 ();

237 
xd©a
 *
p
 = 
°rög_des¸ùt‹s
[
wVÆueL
];

238 
SUDPTRH
 = 
	`MSB
 (
p
);

239 
SUDPTRL
 = 
	`LSB
 (
p
);

244 
	`fx2_°Æl_ï0
 ();

251 
RQ_GET_STATUS
:

252 
bReque°Ty≥
 & 
bmRT_RECIP_MASK
){

253 
bmRT_RECIP_DEVICE
:

254 
EP0BUF
[0] = 
bmGSDA_SELF_POWERED
;

255 
EP0BUF
[1] = 0;

256 
EP0BCH
 = 0;

257 
EP0BCL
 = 2;

260 
bmRT_RECIP_INTERFACE
:

261 
EP0BUF
[0] = 0;

262 
EP0BUF
[1] = 0;

263 
EP0BCH
 = 0;

264 
EP0BCL
 = 2;

267 
bmRT_RECIP_ENDPOINT
:

268 i‡(
	`∂ausibÀ_ídpoöt
 (
wIndexL
)){

269 
EP0BUF
[0] = *
	`ïcs
 (
wIndexL
Ë& 
bmEPSTALL
;

270 
EP0BUF
[1] = 0;

271 
EP0BCH
 = 0;

272 
EP0BCL
 = 2;

275 
	`fx2_°Æl_ï0
 ();

279 
	`fx2_°Æl_ï0
 ();

286 
RQ_SYNCH_FRAME
:

288 
	`fx2_°Æl_ï0
 ();

299 
bReque°
){

301 
RQ_SET_CONFIG
:

302 
_usb_c⁄fig
 = 
wVÆueL
;

305 
RQ_SET_INTERFACE
:

306 
_usb_Æt_£âög
 = 
wVÆueL
;

311 
RQ_CLEAR_FEATURE
:

312 
bReque°Ty≥
 & 
bmRT_RECIP_MASK
){

314 
bmRT_RECIP_DEVICE
:

315 
wVÆueL
){

316 
FS_DEV_REMOTE_WAKEUP
:

318 
	`fx2_°Æl_ï0
 ();

322 
bmRT_RECIP_ENDPOINT
:

323 i‡(
wVÆueL
 =
FS_ENDPOINT_HALT
 && 
	`∂ausibÀ_ídpoöt
 (
wIndexL
)){

324 *
	`ïcs
 (
wIndexL
Ë&~
bmEPSTALL
;

325 
	`fx2_ª£t_d©a_toggÀ
 (
wIndexL
);

328 
	`fx2_°Æl_ï0
 ();

332 
	`fx2_°Æl_ï0
 ();

339 
RQ_SET_FEATURE
:

340 
bReque°Ty≥
 & 
bmRT_RECIP_MASK
){

342 
bmRT_RECIP_DEVICE
:

343 
wVÆueL
){

344 
FS_TEST_MODE
:

348 
FS_DEV_REMOTE_WAKEUP
:

350 
	`fx2_°Æl_ï0
 ();

356 
bmRT_RECIP_ENDPOINT
:

357 
wVÆueL
){

358 
FS_ENDPOINT_HALT
:

359 i‡(
	`∂ausibÀ_ídpoöt
 (
wIndexL
))

360 *
	`ïcs
 (
wIndexL
Ë|
bmEPSTALL
;

362 
	`fx2_°Æl_ï0
 ();

366 
	`fx2_°Æl_ï0
 ();

373 
RQ_SET_ADDRESS
:

374 
RQ_SET_DESCR
:

376 
	`fx2_°Æl_ï0
 ();

385 
EP0CS
 |
bmHSNAK
;

386 
	}
}

	@firmware/fx2/common/usb_common.h

23 #i‚de‡
_USB_COMMON_H_


24 
	#_USB_COMMON_H_


	)

26 vﬁ©ûê
bô
 
_usb_gŸ_SUDAV
;

30 
≠p_víd‹_cmd
 ();

32 
usb_ö°Æl_h™dÀrs
 ();

33 
usb_h™dÀ_£tup_∑ckë
 ();

35 
	#usb_£tup_∑ckë_avaû
(Ë
_usb_gŸ_SUDAV


	)

	@firmware/fx2/common/usb_descriptors.h

23 
xd©a
 c⁄° 
high_•ìd_devi˚_des¸
[];

24 
xd©a
 c⁄° 
high_•ìd_devquÆ_des¸
[];

25 
xd©a
 c⁄° 
high_•ìd_c⁄fig_des¸
[];

27 
xd©a
 c⁄° 
fuŒ_•ìd_devi˚_des¸
[];

28 
xd©a
 c⁄° 
fuŒ_•ìd_devquÆ_des¸
[];

29 
xd©a
 c⁄° 
fuŒ_•ìd_c⁄fig_des¸
[];

31 
xd©a
 
n°rög_des¸ùt‹s
;

32 
xd©a
 * xd©®
°rög_des¸ùt‹s
[];

37 
xd©a
 
usb_desc_hw_ªv_bö¨y_∑tch_loˇti⁄_0
[];

38 
xd©a
 
usb_desc_hw_ªv_bö¨y_∑tch_loˇti⁄_1
[];

39 
xd©a
 
usb_desc_hw_ªv_ascii_∑tch_loˇti⁄_0
[];

40 
xd©a
 
usb_desc_£rül_numbî_ascii
[];

	@firmware/fx2/common/usb_requests.h

27 #i‚de‡
_USB_REQUESTS_H_


28 
	#_USB_REQUESTS_H_


	)

32 
	#bmRT_DIR_MASK
 (0x1 << 7)

	)

33 
	#bmRT_DIR_IN
 (1 << 7)

	)

34 
	#bmRT_DIR_OUT
 (0 << 7)

	)

36 
	#bmRT_TYPE_MASK
 (0x3 << 5)

	)

37 
	#bmRT_TYPE_STD
 (0 << 5)

	)

38 
	#bmRT_TYPE_CLASS
 (1 << 5)

	)

39 
	#bmRT_TYPE_VENDOR
 (2 << 5)

	)

40 
	#bmRT_TYPE_RESERVED
 (3 << 5)

	)

42 
	#bmRT_RECIP_MASK
 (0x1‡<< 0)

	)

43 
	#bmRT_RECIP_DEVICE
 (0 << 0)

	)

44 
	#bmRT_RECIP_INTERFACE
 (1 << 0)

	)

45 
	#bmRT_RECIP_ENDPOINT
 (2 << 0)

	)

46 
	#bmRT_RECIP_OTHER
 (3 << 0)

	)

51 
	#RQ_GET_STATUS
 0

	)

52 
	#RQ_CLEAR_FEATURE
 1

	)

53 
	#RQ_RESERVED_2
 2

	)

54 
	#RQ_SET_FEATURE
 3

	)

55 
	#RQ_RESERVED_4
 4

	)

56 
	#RQ_SET_ADDRESS
 5

	)

57 
	#RQ_GET_DESCR
 6

	)

58 
	#RQ_SET_DESCR
 7

	)

59 
	#RQ_GET_CONFIG
 8

	)

60 
	#RQ_SET_CONFIG
 9

	)

61 
	#RQ_GET_INTERFACE
 10

	)

62 
	#RQ_SET_INTERFACE
 11

	)

63 
	#RQ_SYNCH_FRAME
 12

	)

67 
	#DT_DEVICE
 1

	)

68 
	#DT_CONFIG
 2

	)

69 
	#DT_STRING
 3

	)

70 
	#DT_INTERFACE
 4

	)

71 
	#DT_ENDPOINT
 5

	)

72 
	#DT_DEVQUAL
 6

	)

73 
	#DT_OTHER_SPEED
 7

	)

74 
	#DT_INTERFACE_POWER
 8

	)

78 
	#FS_ENDPOINT_HALT
 0

79 
	#FS_DEV_REMOTE_WAKEUP
 1

80 
	#FS_TEST_MODE
 2

81 

	)

84 
	#bmGSDA_SELF_POWERED
 0x01

	)

85 
	#bmGSDA_REM_WAKEUP
 0x02

	)

	@firmware/fx2/common/usrp_commands.h

21 #i‚de‡
_USRP_COMMANDS_H_


22 
	#_USRP_COMMANDS_H_


	)

24 
	~<u§p_öãrÁ˚s.h
>

25 
	~<u§p_•i_defs.h
>

27 
	#MAX_EP0_PKTSIZE
 64

28 

	)

33 
	#VRT_VENDOR_IN
 0xC0

	)

34 
	#VRT_VENDOR_OUT
 0x40

	)

46 
	#VRQ_GET_STATUS
 0x80

	)

47 
	#GS_TX_UNDERRUN
 0

48 
	#GS_RX_OVERRUN
 1

49 

	)

50 
	#VRQ_I2C_READ
 0x81

51 

	)

52 
	#VRQ_SPI_READ
 0x82

56 

	)

57 
	#VRQ_FW_COMPAT
 0x83

58 

	)

61 
	#VRQ_SET_LED
 0x01

62 

	)

63 
	#VRQ_FPGA_LOAD
 0x02

	)

64 
	#FL_BEGIN
 0

65 
	#FL_XFER
 1

66 
	#FL_END
 2

68 

	)

69 
	#VRQ_FPGA_WRITE_REG
 0x03

70 
	#VRQ_FPGA_SET_RESET
 0x04

71 
	#VRQ_FPGA_SET_TX_ENABLE
 0x05

72 
	#VRQ_FPGA_SET_RX_ENABLE
 0x06

74 

	)

75 
	#VRQ_SET_SLEEP_BITS
 0x07

76 

	)

77 
	#SLEEP_ADC0
 0x01

	)

78 
	#SLEEP_ADC1
 0x02

	)

79 
	#SLEEP_DAC0
 0x04

	)

80 
	#SLEEP_DAC1
 0x08

	)

82 
	#VRQ_I2C_WRITE
 0x08

83 

	)

84 
	#VRQ_SPI_WRITE
 0x09

88 

	)

89 
	#VRQ_FPGA_SET_TX_RESET
 0x0a

90 
	#VRQ_FPGA_SET_RX_RESET
 0x0b

91 

	)

92 
	#VRQ_RESET_GPIF
 0x0c

	)

93 
	#VRQ_ENABLE_GPIF
 0x0d

	)

94 
	#VRQ_CLEAR_FPGA_FIFO
 0x0e

	)

100 
	#USRP_HASH_SLOT_0_ADDR
 0xe1e0

	)

101 
	#USRP_HASH_SLOT_1_ADDR
 0xe1f0

	)

	@firmware/fx2/common/usrp_common.h

27 #i‚de‡
_USRPCOMMON_H_


28 
	#_USRPCOMMON_H_


	)

30 
	~"u§p_c⁄fig.h
"

31 
	~"u§p_ªgs.h
"

32 
	~"syncdñay.h
"

63 
	#TRUE
 1

	)

64 
	#FALSE
 0

	)

67 
öô_u§p
 ();

68 
öô_gpif
 ();

70 
£t_Àd_0
 (
⁄
);

71 
£t_Àd_1
 (
⁄
);

72 
toggÀ_Àd_0
 ();

73 
toggÀ_Àd_1
 ();

75 
	#œ_åa˚
(
v
)

	)

	@firmware/fx2/common/usrp_config.h

29 
	#UC_TRACE_USING_PORT_A
 0

	)

37 
	#UC_START_WITH_GSTATE_OUTPUT_ENABLED
 0

	)

44 
	#UC_BOARD_HAS_FPGA
 1

	)

	@firmware/fx2/common/usrp_globals.h

22 #i‚de‡
_USRP_GLOBALS_H_


23 
	#_USRP_GLOBALS_H_


	)

25 
g_tx_íabÀ
;

26 
g_rx_íabÀ
;

27 
g_Âga_ª£t
;

28 
g_rx_ovîrun
;

29 
g_tx_undîrun
;

	@firmware/fx2/common/usrp_i2c_addr.h

22 #i‚de‡
INCLUDED_USRP_I2C_ADDR_H


23 
	#INCLUDED_USRP_I2C_ADDR_H


	)

27 
	#I2C_DEV_EEPROM
 0x50

28 

	)

29 
	#I2C_ADDR_BOOT
 (
I2C_DEV_EEPROM
 | 0x0)

	)

30 
	#I2C_ADDR_TX_A
 (
I2C_DEV_EEPROM
 | 0x4)

	)

31 
	#I2C_ADDR_RX_A
 (
I2C_DEV_EEPROM
 | 0x5)

	)

32 
	#I2C_ADDR_TX_B
 (
I2C_DEV_EEPROM
 | 0x6)

	)

33 
	#I2C_ADDR_RX_B
 (
I2C_DEV_EEPROM
 | 0x7)

	)

60 
	#DB_EEPROM_MAGIC
 0x00

	)

61 
	#DB_EEPROM_MAGIC_VALUE
 0xDB

	)

62 
	#DB_EEPROM_ID_LSB
 0x01

	)

63 
	#DB_EEPROM_ID_MSB
 0x02

	)

64 
	#DB_EEPROM_OE_LSB
 0x03

	)

65 
	#DB_EEPROM_OE_MSB
 0x04

	)

66 
	#DB_EEPROM_OFFSET_0_LSB
 0x05

67 
	#DB_EEPROM_OFFSET_0_MSB
 0x06

	)

68 
	#DB_EEPROM_OFFSET_1_LSB
 0x07

69 
	#DB_EEPROM_OFFSET_1_MSB
 0x08

	)

70 
	#DB_EEPROM_CHKSUM
 0x1f

	)

72 
	#DB_EEPROM_CLEN
 0x20

73 

	)

74 
	#DB_EEPROM_CUSTOM_BASE
 
DB_EEPROM_CLEN


76 

	)

	@firmware/fx2/common/usrp_ids.h

29 #i‚de‡
_USRP_IDS_H_


30 
	#_USRP_IDS_H_


	)

32 
	#USB_VID_CYPRESS
 0x04b4

	)

33 
	#USB_PID_CYPRESS_FX2
 0x8613

	)

36 
	#USB_VID_FSF
 0xfffe

37 
	#USB_PID_FSF_EXP_0
 0x0000

38 
	#USB_PID_FSF_EXP_1
 0x0001

39 
	#USB_PID_FSF_USRP
 0x0002

40 
	#USB_PID_FSF_USRP1P
 0x0003

41 
	#USB_PID_FSF_SSRP
 0x0004

42 
	#USB_PID_FSF_SSRP_ª£rved
 0x0005

43 
	#USB_PID_FSF_HPSDR
 0x0006

44 
	#USB_PID_FSF_HPSDR_HA
 0x0007

45 
	#USB_PID_FSF_QS1R
 0x0008

46 
	#USB_PID_FSF_EZDOP
 0x0009

47 
	#USB_PID_FSF_BDALE_0
 0x000a

48 
	#USB_PID_FSF_BDALE_1
 0x000b

49 
	#USB_PID_FSF_BDALE_2
 0x000c

50 
	#USB_PID_FSF_BDALE_3
 0x000d

51 
	#USB_PID_FSF_BDALE_4
 0x000e

52 
	#USB_PID_FSF_BDALE_5
 0x000f

53 
	#USB_PID_FSF_BDALE_6
 0x0010

54 
	#USB_PID_FSF_BDALE_7
 0x0011

55 
	#USB_PID_FSF_BDALE_8
 0x0012

56 
	#USB_PID_FSF_BDALE_9
 0x0013

57 
	#USB_PID_FSF_HPSDR_HERMES
 0x0014

58 
	#USB_PID_FSF_THINKRF
 0x0015

59 
	#USB_PID_FSF_MSA
 0x0016

60 

	)

61 
	#USB_PID_FSF_LBNL_UXO
 0x0018

62 

	)

64 
	#USB_DID_USRP_0
 0x0000

65 
	#USB_DID_USRP_1
 0x0001

66 
	#USB_DID_USRP_2
 0x0002

67 

	)

	@firmware/fx2/common/usrp_interfaces.h

23 #i‚de‡
_USRP_INTERFACES_H_


24 
	#_USRP_INTERFACES_H_


	)

34 
	#USRP_CMD_INTERFACE
 0

	)

35 
	#USRP_CMD_ALTINTERFACE
 0

	)

36 
	#USRP_CMD_ENDPOINT
 0

	)

38 
	#USRP_TX_INTERFACE
 1

	)

39 
	#USRP_TX_ALTINTERFACE
 0

	)

40 
	#USRP_TX_ENDPOINT
 2

41 

	)

42 
	#USRP_RX_INTERFACE
 2

	)

43 
	#USRP_RX_ALTINTERFACE
 0

	)

44 
	#USRP_RX_ENDPOINT
 6

45 

	)

	@firmware/fx2/common/usrp_spi_defs.h

23 #i‚de‡
INCLUDED_USRP_SPI_DEFS_H


24 
	#INCLUDED_USRP_SPI_DEFS_H


	)

52 
	#SPI_FMT_xSB_MASK
 (1 << 7)

	)

53 
	#SPI_FMT_LSB
 (1 << 7)

54 
	#SPI_FMT_MSB
 (0 << 7)

55 
	#SPI_FMT_HDR_MASK
 (3 << 5)

	)

56 
	#SPI_FMT_HDR_0
 (0 << 5)

57 
	#SPI_FMT_HDR_1
 (1 << 5)

58 
	#SPI_FMT_HDR_2
 (2 << 5)

59 

	)

69 
	#SPI_ENABLE_FPGA
 0x01

70 
	#SPI_ENABLE_CODEC_A
 0x02

71 
	#SPI_ENABLE_CODEC_B
 0x04

72 
	#SPI_ENABLE_ª£rved
 0x08

	)

73 
	#SPI_ENABLE_TX_A
 0x10

74 
	#SPI_ENABLE_RX_A
 0x20

75 
	#SPI_ENABLE_TX_B
 0x40

76 
	#SPI_ENABLE_RX_B
 0x80

77 

	)

	@firmware/fx2/usrp1/board_specific.c

23 
	~"u§p_comm⁄.h
"

24 
	~"•i.h
"

27 
	$£t_Àd_0
 (
⁄
)

29 i‡(!
⁄
)

30 
USRP_PC
 |
bmPC_LED0
;

32 
USRP_PC
 &~
bmPC_LED0
;

33 
	}
}

36 
	$£t_Àd_1
 (
⁄
)

38 i‡(!
⁄
)

39 
USRP_PC
 |
bmPC_LED1
;

41 
USRP_PC
 &~
bmPC_LED1
;

42 
	}
}

45 
	$toggÀ_Àd_0
 ()

47 
USRP_PC
 ^
bmPC_LED0
;

48 
	}
}

51 
	$toggÀ_Àd_1
 ()

53 
USRP_PC
 ^
bmPC_LED1
;

54 
	}
}

57 
	$œ_åa˚_öô
 ()

59 
	}
}

62 
	$£t_¶ìp_bôs
 (
bôs
, 
mask
)

65 
	}
}

67 
xd©a
 
	gxbuf
[1];

70 
	$wrôe_9862
 (
which
, 
ªgno
, 
vÆue
)

72 
xbuf
[0] = 
vÆue
;

74 
	`•i_wrôe
 (0, 
ªgno
 & 0x3f,

75 
which
 =0 ? 
SPI_ENABLE_CODEC_A
 : 
SPI_ENABLE_CODEC_B
,

76 
SPI_FMT_MSB
 | 
SPI_FMT_HDR_1
,

77 
xbuf
, 1);

78 
	}
}

81 
	$wrôe_bŸh_9862s
 (
ªgno
, 
vÆue
)

83 
xbuf
[0] = 
vÆue
;

85 
	`•i_wrôe
 (0, 
ªgno
 & 0x3f,

86 
SPI_ENABLE_CODEC_A
 | 
SPI_ENABLE_CODEC_B
,

87 
SPI_FMT_MSB
 | 
SPI_FMT_HDR_1
,

88 
xbuf
, 1);

89 
	}
}

91 
	#REG_RX_PWR_DN
 1

	)

92 
	#REG_TX_PWR_DN
 8

	)

93 
	#REG_TX_MODULATOR
 20

	)

96 
	$powî_down_9862s
 ()

98 
	`wrôe_bŸh_9862s
 (
REG_RX_PWR_DN
, 0x01);

99 
	`wrôe_bŸh_9862s
 (
REG_TX_PWR_DN
, 0x0f);

100 
	`wrôe_bŸh_9862s
 (
REG_TX_MODULATOR
, 0x00);

101 
	}
}

104 
	$öô_bﬂrd
 ()

106 
	`œ_åa˚_öô
 ();

107 
	`öô_•i
 ();

109 
USRP_PC
 &~
bmPC_nRESET
;

110 
USRP_PC
 |
bmPC_nRESET
;

112 
	`powî_down_9862s
 ();

113 
	}
}

	@firmware/fx2/usrp1/eeprom_io.c

23 
	~"ì¥om_io.h
"

24 
	~"i2c.h
"

25 
	~"dñay.h
"

29 
	$ì¥om_ªad
 (
i2c_addr
, 
ì¥om_off£t
,

30 
xd©a
 *
buf
, 
Àn
)

35 
xd©a
 
cmd
[1];

36 
cmd
[0] = 
ì¥om_off£t
;

37 i‡(!
	`i2c_wrôe
(
i2c_addr
, 
cmd
, 1))

40  
	`i2c_ªad
(
i2c_addr
, 
buf
, 
Àn
);

41 
	}
}

48 
	$ì¥om_wrôe
 (
i2c_addr
, 
ì¥om_off£t
,

49 c⁄° 
xd©a
 *
buf
, 
Àn
)

51 
xd©a
 
cmd
[2];

52 
ok
;

54 
Àn
-- > 0){

55 
cmd
[0] = 
ì¥om_off£t
++;

56 
cmd
[1] = *
buf
++;

57 
ok
 = 
	`i2c_wrôe
(
i2c_addr
, 
cmd
, 2);

58 
	`mdñay
(10);

59 i‡(!
ok
)

63 
	}
}

	@firmware/fx2/usrp1/eeprom_io.h

23 #i‚de‡
INCLUDED_EEPROM_IO_H


24 
	#INCLUDED_EEPROM_IO_H


	)

29 
ì¥om_ªad
 (
i2c_addr
, 
ì¥om_off£t
,

30 
xd©a
 *
buf
, 
Àn
);

34 
ì¥om_wrôe
 (
i2c_addr
, 
ì¥om_off£t
,

35 c⁄° 
xd©a
 *
buf
, 
Àn
);

	@firmware/fx2/usrp1/fpga_load.c

21 
	~"u§p_comm⁄.h
"

22 
	~"Âga_lﬂd.h
"

23 
	~"dñay.h
"

37 
	$Âga_lﬂd_begö
 ()

39 
USRP_ALTERA_CONFIG
 &~
bmALTERA_BITS
;

40 
	`udñay
 (40);

41 
USRP_ALTERA_CONFIG
 |
bmALTERA_NCONFIG
;

43 i‡(
UC_BOARD_HAS_FPGA
){

46 (
USRP_ALTERA_CONFIG
 & 
bmALTERA_NSTATUS
) == 0)

53 
	}
}

73 
	$˛ock_out_c⁄fig_byã
 (
bôs
)

75 
i
;

79 
i
 = 0; i < 8; i++){

81 
USRP_ALTERA_CONFIG
 = ((USRP_ALTERA_CONFIG & ~
bmALTERA_DATA0
Ë| ((
bôs
 & 1) ? bmALTERA_DATA0 : 0));

82 
USRP_ALTERA_CONFIG
 |
bmALTERA_DCLK
;

83 
USRP_ALTERA_CONFIG
 &~
bmALTERA_DCLK
;

85 
bôs
 = bits >> 1;

87 
	}
}

92 
	$˛ock_out_c⁄fig_byã
 (
bôs
Ë
_«ked


94 
_asm


95 
mov
 
a
, 
d∂


97 
ºc
 
a


98 
mov
 
_bôALTERA_DATA0
,
c


99 
£tb
 
_bôALTERA_DCLK


100 
˛r
 
_bôALTERA_DCLK


102 
ºc
 
a


103 
mov
 
_bôALTERA_DATA0
,
c


104 
£tb
 
_bôALTERA_DCLK


105 
˛r
 
_bôALTERA_DCLK


107 
ºc
 
a


108 
mov
 
_bôALTERA_DATA0
,
c


109 
£tb
 
_bôALTERA_DCLK


110 
˛r
 
_bôALTERA_DCLK


112 
ºc
 
a


113 
mov
 
_bôALTERA_DATA0
,
c


114 
£tb
 
_bôALTERA_DCLK


115 
˛r
 
_bôALTERA_DCLK


117 
ºc
 
a


118 
mov
 
_bôALTERA_DATA0
,
c


119 
£tb
 
_bôALTERA_DCLK


120 
˛r
 
_bôALTERA_DCLK


122 
ºc
 
a


123 
mov
 
_bôALTERA_DATA0
,
c


124 
£tb
 
_bôALTERA_DCLK


125 
˛r
 
_bôALTERA_DCLK


127 
ºc
 
a


128 
mov
 
_bôALTERA_DATA0
,
c


129 
£tb
 
_bôALTERA_DCLK


130 
˛r
 
_bôALTERA_DCLK


132 
ºc
 
a


133 
mov
 
_bôALTERA_DATA0
,
c


134 
£tb
 
_bôALTERA_DCLK


135 
˛r
 
_bôALTERA_DCLK


137 
ªt


139 
_ídasm
;

140 
	}
}

145 
	$˛ock_out_byãs
 (
byãcou¡
,

146 
xd©a
 *
p
)

148 
byãcou¡
-- > 0)

149 
	`˛ock_out_c⁄fig_byã
 (*
p
++);

150 
	}
}

166 
	$Âga_lﬂd_x„r
 (
xd©a
 *
p
, 
byãcou¡
)

168 
	`˛ock_out_byãs
 (
byãcou¡
, 
p
);

170 
	}
}

176 
	$Âga_lﬂd_íd
 ()

178 
°©us
 = 
USRP_ALTERA_CONFIG
;

180 i‡(!
UC_BOARD_HAS_FPGA
)

183 i‡((
°©us
 & 
bmALTERA_NSTATUS
) == 0)

186 i‡((
°©us
 & 
bmALTERA_CONF_DONE
) == bmALTERA_CONF_DONE)

193 
	}
}

	@firmware/fx2/usrp1/fpga_rev2.c

23 
	~"Âga.h
"

24 
	~"Âga_ªgs_comm⁄.h
"

25 
	~"u§p_comm⁄.h
"

26 
	~"u§p_globÆs.h
"

27 
	~"•i.h
"

29 
	gg_tx_ª£t
 = 0;

30 
	gg_rx_ª£t
 = 0;

33 
	$Âga_wrôe_ªg
 (
ªgno
, c⁄° 
xd©a
 *
ªgvÆ
)

35 
	`•i_wrôe
 (0, 0x00 | (
ªgno
 & 0x7f),

36 
SPI_ENABLE_FPGA
,

37 
SPI_FMT_MSB
 | 
SPI_FMT_HDR_1
,

38 
ªgvÆ
, 4);

39 
	}
}

42 
xd©a
 
	gªgvÆ
[4] = {0, 0, 0, 0};

45 
	$wrôe_Âga_ma°î_˘æ
 ()

47 
v
 = 0;

48 i‡(
g_tx_íabÀ
)

49 
v
 |
bmFR_MC_ENABLE_TX
;

50 i‡(
g_rx_íabÀ
)

51 
v
 |
bmFR_MC_ENABLE_RX
;

52 i‡(
g_tx_ª£t
)

53 
v
 |
bmFR_MC_RESET_TX
;

54 i‡(
g_rx_ª£t
)

55 
v
 |
bmFR_MC_RESET_RX
;

56 
ªgvÆ
[3] = 
v
;

58 
	`Âga_wrôe_ªg
 (
FR_MASTER_CTRL
, 
ªgvÆ
);

59 
	}
}

64 
	$Âga_£t_ª£t
 (
⁄
)

66 
⁄
 &= 0x1;

68 i‡(
⁄
){

69 
USRP_PC
 &~
bmPC_nRESET
;

70 
g_tx_íabÀ
 = 0;

71 
g_rx_íabÀ
 = 0;

72 
g_tx_ª£t
 = 0;

73 
g_rx_ª£t
 = 0;

76 
USRP_PC
 |
bmPC_nRESET
;

77 
	}
}

80 
	$Âga_£t_tx_íabÀ
 (
⁄
)

82 
⁄
 &= 0x1;

83 
g_tx_íabÀ
 = 
⁄
;

85 
	`wrôe_Âga_ma°î_˘æ
 ();

87 i‡(
⁄
){

88 
g_tx_undîrun
 = 0;

89 
	`Âga_˛ór_Êags
 ();

91 
	}
}

94 
	$Âga_£t_rx_íabÀ
 (
⁄
)

96 
⁄
 &= 0x1;

97 
g_rx_íabÀ
 = 
⁄
;

99 
	`wrôe_Âga_ma°î_˘æ
 ();

100 i‡(
⁄
){

101 
g_rx_ovîrun
 = 0;

102 
	`Âga_˛ór_Êags
 ();

104 
	}
}

107 
	$Âga_£t_tx_ª£t
 (
⁄
)

109 
⁄
 &= 0x1;

110 
g_tx_ª£t
 = 
⁄
;

112 
	`wrôe_Âga_ma°î_˘æ
 ();

113 
	}
}

116 
	$Âga_£t_rx_ª£t
 (
⁄
)

118 
⁄
 &= 0x1;

119 
g_rx_ª£t
 = 
⁄
;

121 
	`wrôe_Âga_ma°î_˘æ
 ();

122 
	}
}

	@firmware/fx2/usrp1/fpga_rev2.h

21 #i‚de‡
INCLUDED_FPGA_REV1_H


22 
	#INCLUDED_FPGA_REV1_H


	)

24 
Âga_£t_ª£t
 (
v
);

25 
Âga_£t_tx_íabÀ
 (
v
);

26 
Âga_£t_rx_íabÀ
 (
v
);

27 
Âga_£t_tx_ª£t
 (
v
);

28 
Âga_£t_rx_ª£t
 (
v
);

30 
Âga_has_room_f‹_∑ckë
 ();

31 
Âga_has_∑ckë_avaû
 ();

33 #i‡(
UC_BOARD_HAS_FPGA
)

37 
	#Âga_has_room_f‹_∑ckë
(Ë(
GPIFREADYSTAT
 & 
bmFPGA_HAS_SPACE
)

	)

42 
	#Âga_has_∑ckë_avaû
(Ë(
GPIFREADYSTAT
 & 
bmFPGA_PKT_AVAIL
)

	)

46 
	#Âga_has_room_f‹_∑ckë
(Ë
TRUE


	)

47 
	#Âga_has_∑ckë_avaû
(Ë
TRUE


	)

51 
	#Âga_˛ór_Êags
() \

53 
USRP_PE
 |
bmPE_FPGA_CLR_STATUS
; \

54 
USRP_PE
 &~
bmPE_FPGA_CLR_STATUS
; \

55 } 0)

	)

	@firmware/fx2/usrp1/gpif.c

153 
	~"fx2.h
"

154 
	~"fx2ªgs.h
"

155 
	~"fx2sdly.h
"

159 c⁄° 
xd©a
 
	gWaveD©a
[128] =

185 c⁄° 
xd©a
 
	gFlowSèãs
[36] =

195 c⁄° 
xd©a
 
	gInôD©a
[7] =

203 
	$GpifInô
( )

205 
BYTE
 
i
;

227 
IFCONFIG
 = 0xEE;

236 
GPIFABORT
 = 0xFF;

238 
GPIFREADYCFG
 = 
InôD©a
[ 0 ];

239 
GPIFCTLCFG
 = 
InôD©a
[ 1 ];

240 
GPIFIDLECS
 = 
InôD©a
[ 2 ];

241 
GPIFIDLECTL
 = 
InôD©a
[ 3 ];

242 
GPIFWFSELECT
 = 
InôD©a
[ 5 ];

243 
GPIFREADYSTAT
 = 
InôD©a
[ 6 ];

246 
AUTOPTRSETUP
 = 0x07;

251 
AUTOPTRH1
 = 
	`MSB
–&
WaveD©a
 );

252 
AUTOPTRL1
 = 
	`LSB
–&
WaveD©a
 );

255 
AUTOPTRH2
 = 0xE4;

256 
AUTOPTRL2
 = 0x00;

259  
i
 = 0x00; i < 128; i++ )

261 
EXTAUTODAT2
 = 
EXTAUTODAT1
;

265 
PORTCCFG
 = 0xFF;

266 
OEC
 = 0xFF;

267 
PORTECFG
 |= 0x80;

268 
OEE
 |= 0x80;

277 
SYNCDELAY
;

278 
GPIFADRH
 = 0x00;

279 
SYNCDELAY
;

280 
GPIFADRL
 = 0x00;

283 
FLOWSTATE
 = 
FlowSèãs
[ 0 ];

284 
FLOWLOGIC
 = 
FlowSèãs
[ 1 ];

285 
FLOWEQ0CTL
 = 
FlowSèãs
[ 2 ];

286 
FLOWEQ1CTL
 = 
FlowSèãs
[ 3 ];

287 
FLOWHOLDOFF
 = 
FlowSèãs
[ 4 ];

288 
FLOWSTB
 = 
FlowSèãs
[ 5 ];

289 
FLOWSTBEDGE
 = 
FlowSèãs
[ 6 ];

290 
FLOWSTBHPERIOD
 = 
FlowSèãs
[ 7 ];

291 
	}
}

	@firmware/fx2/usrp1/usrp_common.c

25 
	~"u§p_comm⁄.h
"

27 
öô_bﬂrd
 ();

30 
	$öô_u§p
 ()

32 
CPUCS
 = 
bmCLKSPD1
;

33 
CKCON
 = 0;

37 
IFCONFIG
 = 
bmIFCLKSRC
 | 
bm3048MHZ
 | 
bmIFCLKOE
 | 
bmIFCLKPOL
 | 
bmIFGPIF
;

38 
SYNCDELAY
;

42 
IOA
 = 
bmPORT_A_INITIAL
;

43 
OEA
 = 
bmPORT_A_OUTPUTS
;

45 
IOC
 = 
bmPORT_C_INITIAL
;

46 
OEC
 = 
bmPORT_C_OUTPUTS
;

48 
IOE
 = 
bmPORT_E_INITIAL
;

49 
OEE
 = 
bmPORT_E_OUTPUTS
;

57 
EP1OUTCFG
 = 
bmVALID
 | 
bmBULK
; 
SYNCDELAY
;

58 
EP1INCFG
 = 
bmVALID
 | 
bmBULK
 | 
bmIN
; 
SYNCDELAY
;

60 
EP2CFG
 = 
bmVALID
 | 
bmBULK
 | 
bmQUADBUF
; 
SYNCDELAY
;

61 
EP4CFG
 = 0; 
SYNCDELAY
;

62 
EP6CFG
 = 
bmVALID
 | 
bmBULK
 | 
bmQUADBUF
 | 
bmIN
; 
SYNCDELAY
;

63 
EP8CFG
 = 0; 
SYNCDELAY
;

67 
FIFORESET
 = 
bmNAKALL
; 
SYNCDELAY
;

68 
FIFORESET
 = 2; 
SYNCDELAY
;

70 
FIFORESET
 = 6; 
SYNCDELAY
;

72 
FIFORESET
 = 0; 
SYNCDELAY
;

78 
EP2FIFOCFG
 = 
bmWORDWIDE
; 
SYNCDELAY
;

79 
EP2FIFOCFG
 = 
bmAUTOOUT
 | 
bmWORDWIDE
; 
SYNCDELAY
;

80 
EP6FIFOCFG
 = 
bmAUTOIN
 | 
bmWORDWIDE
; 
SYNCDELAY
;

86 
EP2BCL
 = 0x80; 
SYNCDELAY
;

87 
EP2BCL
 = 0x80; 
SYNCDELAY
;

88 
EP2BCL
 = 0x80; 
SYNCDELAY
;

89 
EP2BCL
 = 0x80; 
SYNCDELAY
;

92 
EP0BCH
 = 0; 
SYNCDELAY
;

96 
EP1OUTBC
 = 0; 
SYNCDELAY
;

98 
EP2GPIFFLGSEL
 = 0x01; 
SYNCDELAY
;

99 
EP6GPIFFLGSEL
 = 0x02; 
SYNCDELAY
;

104 
EP6AUTOINLENH
 = (512Ë>> 8; 
SYNCDELAY
;

105 
EP6AUTOINLENL
 = (512Ë& 0xff; 
SYNCDELAY
;

107 
	`öô_bﬂrd
 ();

108 
	}
}

	@firmware/fx2/usrp1/usrp_gpif.c

163 c⁄° 
	gWaveD©a
[128] =

189 c⁄° 
	gFlowSèãs
[36] =

199 c⁄° 
	gInôD©a
[7] =

	@firmware/fx2/usrp1/usrp_gpif_inline.h

5 
	#£tup_Êow°©e_comm⁄
() \

7 
FLOWSTATE
 = 0x81; \

8 
FLOWLOGIC
 = 0x2d; \

9 
FLOWEQ0CTL
 = 0x26; \

10 
FLOWEQ1CTL
 = 0x00; \

11 
FLOWHOLDOFF
 = 0x04; \

12 
FLOWSTB
 = 0x04; \

13 
FLOWSTBEDGE
 = 0x03; \

14 
FLOWSTBHPERIOD
 = 0x02; \

15 
GPIFHOLDAMOUNT
 = 0x00; \

16 } 0)

	)

18 
	#£tup_Êow°©e_ªad
() \

20 
FLOWEQ0CTL
 = 0x26; \

21 } 0)

	)

23 
	#£tup_Êow°©e_wrôe
() \

25 
FLOWEQ0CTL
 = 0x21; \

26 } 0)

	)

	@firmware/fx2/usrp1/usrp_main.c

21 
	~"u§p_comm⁄.h
"

22 
	~"u§p_ªgs.h
"

23 
	~"u§p_comm™ds.h
"

24 
	~"Âga.h
"

25 
	~"u§p_gpif_ölöe.h
"

26 
	~"timî.h
"

27 
	~"i2c.h
"

28 
	~"i§.h
"

29 
	~"usb_comm⁄.h
"

30 
	~"fx2utûs.h
"

31 
	~"u§p_globÆs.h
"

32 
	~"u§p_i2c_addr.h
"

33 
	~<°rög.h
>

34 
	~"•i.h
"

35 
	~"ì¥om_io.h
"

36 
	~"usb_des¸ùt‹s.h
"

41 
	#HW_REV_OFFSET
 5

	)

42 
	#SERIAL_NO_OFFSET
 248

	)

43 
	#SERIAL_NO_LEN
 8

	)

46 
	#bReque°Ty≥
 
SETUPDAT
[0]

	)

47 
	#bReque°
 
SETUPDAT
[1]

	)

48 
	#wVÆueL
 
SETUPDAT
[2]

	)

49 
	#wVÆueH
 
SETUPDAT
[3]

	)

50 
	#wIndexL
 
SETUPDAT
[4]

	)

51 
	#wIndexH
 
SETUPDAT
[5]

	)

52 
	#wLígthL
 
SETUPDAT
[6]

	)

53 
	#wLígthH
 
SETUPDAT
[7]

	)

56 
	gg_tx_íabÀ
 = 0;

57 
	gg_rx_íabÀ
 = 0;

58 
	gg_rx_ovîrun
 = 0;

59 
	gg_tx_undîrun
 = 0;

65 
	#USRP_HASH_SIZE
 16

	)

66 
xd©a
 
©
 
USRP_HASH_SLOT_1_ADDR
 
	ghash1
[
USRP_HASH_SIZE
];

69 
	$gë_ï0_d©a
 ()

71 
EP0BCL
 = 0;

73 
EP0CS
 & 
bmEPBUSY
)

75 
	}
}

82 
	$≠p_víd‹_cmd
 ()

84 i‡(
bReque°Ty≥
 =
VRT_VENDOR_IN
){

90 
bReque°
){

92 
VRQ_GET_STATUS
:

93 
wIndexL
){

95 
GS_TX_UNDERRUN
:

96 
EP0BUF
[0] = 
g_tx_undîrun
;

97 
g_tx_undîrun
 = 0;

98 
EP0BCH
 = 0;

99 
EP0BCL
 = 1;

102 
GS_RX_OVERRUN
:

103 
EP0BUF
[0] = 
g_rx_ovîrun
;

104 
g_rx_ovîrun
 = 0;

105 
EP0BCH
 = 0;

106 
EP0BCL
 = 1;

114 
VRQ_I2C_READ
:

115 i‡(!
	`i2c_ªad
 (
wVÆueL
, 
EP0BUF
, 
wLígthL
))

118 
EP0BCH
 = 0;

119 
EP0BCL
 = 
wLígthL
;

122 
VRQ_SPI_READ
:

123 i‡(!
	`•i_ªad
 (
wVÆueH
, 
wVÆueL
, 
wIndexH
, 
wIndexL
, 
EP0BUF
, 
wLígthL
))

126 
EP0BCH
 = 0;

127 
EP0BCL
 = 
wLígthL
;

135 i‡(
bReque°Ty≥
 =
VRT_VENDOR_OUT
){

141 
bReque°
){

143 
VRQ_SET_LED
:

144 
wIndexL
){

146 
	`£t_Àd_0
 (
wVÆueL
);

150 
	`£t_Àd_1
 (
wVÆueL
);

158 
VRQ_FPGA_LOAD
:

159 
wIndexL
){

160 
FL_BEGIN
:

161  
	`Âga_lﬂd_begö
 ();

163 
FL_XFER
:

164 
	`gë_ï0_d©a
 ();

165  
	`Âga_lﬂd_x„r
 (
EP0BUF
, 
EP0BCL
);

167 
FL_END
:

168  
	`Âga_lﬂd_íd
 ();

176 
VRQ_FPGA_SET_RESET
:

177 
	`Âga_£t_ª£t
 (
wVÆueL
);

180 
VRQ_FPGA_SET_TX_ENABLE
:

181 
	`Âga_£t_tx_íabÀ
 (
wVÆueL
);

184 
VRQ_FPGA_SET_RX_ENABLE
:

185 
	`Âga_£t_rx_íabÀ
 (
wVÆueL
);

188 
VRQ_FPGA_SET_TX_RESET
:

189 
	`Âga_£t_tx_ª£t
 (
wVÆueL
);

192 
VRQ_FPGA_SET_RX_RESET
:

193 
	`Âga_£t_rx_ª£t
 (
wVÆueL
);

196 
VRQ_I2C_WRITE
:

197 
	`gë_ï0_d©a
 ();

198 i‡(!
	`i2c_wrôe
 (
wVÆueL
, 
EP0BUF
, 
EP0BCL
))

202 
VRQ_SPI_WRITE
:

203 
	`gë_ï0_d©a
 ();

204 i‡(!
	`•i_wrôe
 (
wVÆueH
, 
wVÆueL
, 
wIndexH
, 
wIndexL
, 
EP0BUF
, 
EP0BCL
))

217 
	}
}

222 
	$maö_lo›
 ()

224 
	`£tup_Êow°©e_comm⁄
 ();

228 i‡(
	`usb_£tup_∑ckë_avaû
 ())

229 
	`usb_h™dÀ_£tup_∑ckë
 ();

232 i‡(
GPIFTRIG
 & 
bmGPIF_IDLE
){

238 i‡(
UC_BOARD_HAS_FPGA
 && (
USRP_PA
 & (
bmPA_TX_UNDERRUN
 | 
bmPA_RX_OVERRUN
))){

241 i‡(
USRP_PA
 & 
bmPA_TX_UNDERRUN
)

242 
g_tx_undîrun
 = 1;

244 i‡(
USRP_PA
 & 
bmPA_RX_OVERRUN
)

245 
g_rx_ovîrun
 = 1;

248 
	`Âga_˛ór_Êags
 ();

254 i‡(
g_tx_íabÀ
 && !(
EP24FIFOFLGS
 & 0x02)){

256 i‡(
	`Âga_has_room_f‹_∑ckë
 ()){

258 
GPIFTCB1
 = 0x01; 
SYNCDELAY
;

259 
GPIFTCB0
 = 0x00; 
SYNCDELAY
;

261 
	`£tup_Êow°©e_wrôe
 ();

263 
SYNCDELAY
;

264 
GPIFTRIG
 = 
bmGPIF_EP2_START
 | 
bmGPIF_WRITE
;

265 
SYNCDELAY
;

267 !(
GPIFTRIG
 & 
bmGPIF_IDLE
)){

276 i‡(
g_rx_íabÀ
 && !(
EP6CS
 & 
bmEPFULL
)){

278 i‡(
	`Âga_has_∑ckë_avaû
 ()){

280 
GPIFTCB1
 = 0x01; 
SYNCDELAY
;

281 
GPIFTCB0
 = 0x00; 
SYNCDELAY
;

283 
	`£tup_Êow°©e_ªad
 ();

285 
SYNCDELAY
;

286 
GPIFTRIG
 = 
bmGPIF_EP6_START
 | 
bmGPIF_READ
;

287 
SYNCDELAY
;

289 !(
GPIFTRIG
 & 
bmGPIF_IDLE
)){

293 
SYNCDELAY
;

294 
INPKTEND
 = 6;

299 
	}
}

308 
	$i§_tick
 (Ë
öãºu±


310 
cou¡
 = 1;

312 i‡(--
cou¡
 == 0){

313 
cou¡
 = 50;

314 
USRP_LED_REG
 ^
bmLED0
;

317 
	`˛ór_timî_úq
 ();

318 
	}
}

325 
	$∑tch_usb_des¸ùt‹s
()

327 
xd©a
 
hw_ªv
;

328 
xd©a
 
£rül_no
[8];

329 
i
;

331 
	`ì¥om_ªad
(
I2C_ADDR_BOOT
, 
HW_REV_OFFSET
, &
hw_ªv
, 1);

332 
usb_desc_hw_ªv_bö¨y_∑tch_loˇti⁄_0
[0] = 
hw_ªv
;

333 
usb_desc_hw_ªv_bö¨y_∑tch_loˇti⁄_1
[0] = 
hw_ªv
;

334 
usb_desc_hw_ªv_ascii_∑tch_loˇti⁄_0
[0] = 
hw_ªv
 + '0';

336 
	`ì¥om_ªad
(
I2C_ADDR_BOOT
, 
SERIAL_NO_OFFSET
, 
£rül_no
, 
SERIAL_NO_LEN
);

338 
i
 = 0; i < 
SERIAL_NO_LEN
; i++){

339 
ch
 = 
£rül_no
[
i
];

340 i‡(
ch
 == 0xff)

341 
ch
 = '0';

342 
usb_desc_£rül_numbî_ascii
[
i
 << 1] = 
ch
;

344 
	}
}

347 
	$maö
 ()

350 
g_rx_íabÀ
 = 0;

351 
g_tx_íabÀ
 = 0;

352 
g_rx_ovîrun
 = 0;

353 
g_tx_undîrun
 = 0;

356 
	`mem£t
 (
hash1
, 0, 
USRP_HASH_SIZE
);

358 
	`öô_u§p
 ();

359 
	`öô_gpif
 ();

362 
IFCONFIG
 |
bmGSTATE
;

364 
	`£t_Àd_0
 (0);

365 
	`£t_Àd_1
 (0);

367 
EA
 = 0;

369 
	`∑tch_usb_des¸ùt‹s
();

371 
	`£tup_autove˘‹s
 ();

372 
	`usb_ö°Æl_h™dÀrs
 ();

373 
	`hook_timî_tick
 ((Ë
i§_tick
);

375 
EIEX4
 = 1;

376 
EA
 = 1;

378 
	`fx2_ªnumî©e
 ();

380 
	`maö_lo›
 ();

381 
	}
}

	@firmware/fx2/usrp1/usrp_regs.h

26 #i‚de‡
_USRP_REV1_REGS_H_


27 
	#_USRP_REV1_REGS_H_


	)

29 
	~"fx2ªgs.h
"

35 
	#USRP_PA
 
IOA


36 
	#USRP_PA_OE
 
OEA


37 

	)

38 
	#bmPA_S_CLK
 
bmBIT0


39 
	#bmPA_S_DATA_TO_PERIPH
 
bmBIT1


40 
	#bmPA_S_DATA_FROM_PERIPH
 
bmBIT2


41 
	#bmPA_SEN_FPGA
 
bmBIT3


42 
	#bmPA_SEN_CODEC_A
 
bmBIT4


43 
	#bmPA_SEN_CODEC_B
 
bmBIT5


46 
	#bmPA_RX_OVERRUN
 
bmBIT6


47 
	#bmPA_TX_UNDERRUN
 
bmBIT7


48 

	)

50 
sbô
 
	g©
 0x80+0 
	gbôS_CLK
;

51 
sbô
 
	g©
 0x80+1 
	gbôS_OUT
;

52 
sbô
 
	g©
 0x80+2 
	gbôS_IN
;

57 
	#bmPORT_A_OUTPUTS
 (
bmPA_S_CLK
 \

58 | 
bmPA_S_DATA_TO_PERIPH
 \

59 | 
bmPA_SEN_FPGA
 \

60 | 
bmPA_SEN_CODEC_A
 \

61 | 
bmPA_SEN_CODEC_B
 \

62 )

	)

64 
	#bmPORT_A_INITIAL
 (
bmPA_SEN_FPGA
 | 
bmPA_SEN_CODEC_A
 | 
bmPA_SEN_CODEC_B
)

	)

74 
	#USRP_PC
 
IOC


75 
	#USRP_PC_OE
 
OEC


76 

	)

77 
	#USRP_ALTERA_CONFIG
 
USRP_PC


	)

79 
	#bmPC_nRESET
 
bmBIT0


80 
	#bmALTERA_DATA0
 
bmBIT1


	)

81 
	#bmALTERA_NCONFIG
 
bmBIT2


	)

82 
	#bmALTERA_DCLK
 
bmBIT3


	)

83 
	#bmALTERA_CONF_DONE
 
bmBIT4


	)

84 
	#bmALTERA_NSTATUS
 
bmBIT5


	)

85 
	#bmPC_LED0
 
bmBIT6


86 
	#bmPC_LED1
 
bmBIT7


87 

	)

88 
sbô
 
	g©
 0xA0+1 
	gbôALTERA_DATA0
;

89 
sbô
 
	g©
 0xA0+3 
	gbôALTERA_DCLK
;

92 
	#bmALTERA_BITS
 (
bmALTERA_DATA0
 \

93 | 
bmALTERA_NCONFIG
 \

94 | 
bmALTERA_DCLK
 \

95 | 
bmALTERA_CONF_DONE
 \

96 | 
bmALTERA_NSTATUS
)

	)

98 
	#bmPORT_C_OUTPUTS
 (
bmPC_nRESET
 \

99 | 
bmALTERA_DATA0
 \

100 | 
bmALTERA_NCONFIG
 \

101 | 
bmALTERA_DCLK
 \

102 | 
bmPC_LED0
 \

103 | 
bmPC_LED1
 \

104 )

	)

106 
	#bmPORT_C_INITIAL
 (
bmPC_LED0
 | 
bmPC_LED1
)

	)

109 
	#USRP_LED_REG
 
USRP_PC


	)

110 
	#bmLED0
 
bmPC_LED0


	)

111 
	#bmLED1
 
bmPC_LED1


	)

118 
	#USRP_PE
 
IOE


119 
	#USRP_PE_OE
 
OEE


120 

	)

121 
	#bmPE_PE0
 
bmBIT0


122 
	#bmPE_PE1
 
bmBIT1


123 
	#bmPE_PE2
 
bmBIT2


124 
	#bmPE_FPGA_CLR_STATUS
 
bmBIT3


125 
	#bmPE_SEN_TX_A
 
bmBIT4


126 
	#bmPE_SEN_RX_A
 
bmBIT5


127 
	#bmPE_SEN_TX_B
 
bmBIT6


128 
	#bmPE_SEN_RX_B
 
bmBIT7


129 

	)

131 
	#bmPORT_E_OUTPUTS
 (
bmPE_FPGA_CLR_STATUS
 \

132 | 
bmPE_SEN_TX_A
 \

133 | 
bmPE_SEN_RX_A
 \

134 | 
bmPE_SEN_TX_B
 \

135 | 
bmPE_SEN_RX_B
 \

136 )

	)

139 
	#bmPORT_E_INITIAL
 (
bmPE_SEN_TX_A
 \

140 | 
bmPE_SEN_RX_A
 \

141 | 
bmPE_SEN_TX_B
 \

142 | 
bmPE_SEN_RX_B
 \

143 )

	)

149 
	#bmFPGA_HAS_SPACE
 
bmBIT0


150 
	#bmFPGA_PKT_AVAIL
 
bmBIT1


153 

	)

	@firmware/fx3/b200/b200_gpifconfig.h

16 #i‚de‡
_INCLUDED_CYFXGPIF2CONFIG_


17 
	#_INCLUDED_CYFXGPIF2CONFIG_


	)

18 
	~"cyu3ty≥s.h
"

19 
	~"cyu3gpif.h
"

24 
	#CY_NUMBER_OF_STATES
 7

	)

29 
	#RESET
 0

	)

30 
	#IDLE
 1

	)

31 
	#READ
 2

	)

32 
	#WRITE
 3

	)

33 
	#SHORT_PKT
 4

	)

34 
	#ZLP
 5

	)

35 
	#DSS_STATE
 6

	)

41 
	#ALPHA_RESET
 0xC

	)

47 
uöt16_t
 
	gCyFxGpifTønsôi⁄
[] = {

57 
CyU3PGpifWaveD©a
 
	gCyFxGpifWaved©a
[] = {

71 
uöt8_t
 
	gCyFxGpifWaved©aPosôi⁄
[] = {

84 
uöt32_t
 
	gCyFxGpifRegVÆue
[] = {

166 c⁄° 
CyU3PGpifC⁄fig_t
 
	gCyFxGpifC⁄fig
 = {

167 (
uöt16_t
)((
CyFxGpifWaved©aPosôi⁄
)/(
uöt8_t
)),

168 
CyFxGpifWaved©a
,

169 
CyFxGpifWaved©aPosôi⁄
,

170 (
uöt16_t
)((
CyFxGpifTønsôi⁄
)/(uint16_t)),

171 
CyFxGpifTønsôi⁄
,

172 (
uöt16_t
)((
CyFxGpifRegVÆue
)/(
uöt32_t
)),

173 
CyFxGpifRegVÆue


	@firmware/fx3/b200/b200_i2c.c

5 
	~"b200_i2c.h
"

7 
	~"cyu3i2c.h
"

10 
	$CyFxI2cInô
 (
uöt16_t
 
∑geLí
) {

11 
CyU3PI2cC⁄fig_t
 
i2cC⁄fig
;

14 
	`CyU3PI2cInô
 ();

18 
	`CyU3PMemSë
 ((
uöt8_t
 *)&
i2cC⁄fig
, 0, (i2cConfig));

19 
i2cC⁄fig
.
bôR©e
 = 
CY_FX_USBI2C_I2C_BITRATE
;

20 
i2cC⁄fig
.
busTimeout
 = 0xFFFFFFFF;

21 
i2cC⁄fig
.
dmaTimeout
 = 0xFFFF;

22 
i2cC⁄fig
.
isDma
 = 
CyFÆ£
;

24 
	`CyU3PI2cSëC⁄fig
 (&
i2cC⁄fig
, 
NULL
);

25 
glI2cPageSize
 = 
∑geLí
;

26 
	}
}

29 
	$CyFxUsbI2cTøns„r
 (

30 
uöt16_t
 
byãAddªss
,

31 
uöt8_t
 
devAddr
,

32 
uöt16_t
 
byãCou¡
,

33 
uöt8_t
 *
buf„r
,

34 
CyBoﬁ_t
 
isRód
)

36 
CyU3PI2cPªambÀ_t
 
¥ómbÀ
;

37 
uöt16_t
 
∑geCou¡
 = (
byãCou¡
 / 
glI2cPageSize
);

38 
uöt16_t
 
ªsCou¡
 = 
glI2cPageSize
;

40 i‡(
byãCou¡
 == 0) {

44 i‡((
byãCou¡
 % 
glI2cPageSize
) != 0) {

45 
∑geCou¡
 ++;

46 
ªsCou¡
 = 
byãCou¡
 % 
glI2cPageSize
;

49 
∑geCou¡
 != 0) {

50 i‡(
isRód
) {

52 
¥ómbÀ
.
Àngth
 = 4;

53 
¥ómbÀ
.
buf„r
[0] = 
devAddr
;

54 
¥ómbÀ
.
buf„r
[1] = (
uöt8_t
)(
byãAddªss
 >> 8);

55 
¥ómbÀ
.
buf„r
[2] = (
uöt8_t
)(
byãAddªss
 & 0xFF);

56 
¥ómbÀ
.
buf„r
[3] = (
devAddr
 | 0x01);

57 
¥ómbÀ
.
˘æMask
 = 0x0004;

59 
	`CyU3PI2cRe˚iveByãs
 (&
¥ómbÀ
, 
buf„r
, (
∑geCou¡
 =1Ë? 
ªsCou¡
 : 
glI2cPageSize
, 0);

62 
¥ómbÀ
.
Àngth
 = 3;

63 
¥ómbÀ
.
buf„r
[0] = 
devAddr
;

64 
¥ómbÀ
.
buf„r
[1] = (
uöt8_t
)(
byãAddªss
 >> 8);

65 
¥ómbÀ
.
buf„r
[2] = (
uöt8_t
)(
byãAddªss
 & 0xFF);

66 
¥ómbÀ
.
˘æMask
 = 0x0000;

68 
	`CyU3PI2cTønsmôByãs
 (&
¥ómbÀ
, 
buf„r
, (
∑geCou¡
 =1Ë? 
ªsCou¡
 : 
glI2cPageSize
, 0);

70 
¥ómbÀ
.
Àngth
 = 1;

71 
	`CyU3PI2cWaôF‹Ack
(&
¥ómbÀ
, 200);

75 
	`CyU3PThªadSÀï
 (1);

78 
byãAddªss
 +
glI2cPageSize
;

79 
buf„r
 +
glI2cPageSize
;

80 
∑geCou¡
 --;

82 
	}
}

	@firmware/fx3/b200/b200_i2c.h

5 #i‚de‡
_B200_I2C_H


6 
	#_B200_I2C_H


	)

8 
	~"cyu3exã∫c°¨t.h
"

10 
	~"cyu3usbc⁄°.h
"

11 
	~"cyu3ty≥s.h
"

17 
uöt16_t
 
	gglI2cPageSize
 = 0x40;

21 
	#CY_FX_USBI2C_I2C_MAX_CAPACITY
 (32 * 1024Ë

	)

25 
	#CY_FX_USBI2C_I2C_PAGE_SIZE
 (64)

	)

28 
	#CY_FX_USBI2C_I2C_BITRATE
 (100000)

	)

31 
	#CY_FX_USB_I2C_TIMEOUT
 (5000)

	)

34 
CyFxI2cInô
 (
uöt16_t
 
∑geLí
);

35 
CyFxUsbI2cTøns„r
 (
uöt16_t
 
byãAddªss
, 
uöt8_t
 
devAddr
,

36 
uöt16_t
 
byãCou¡
, 
uöt8_t
 *
buf„r
, 
CyBoﬁ_t
 
isRód
);

38 
	~"cyu3exã∫˚nd.h
"

	@firmware/fx3/b200/b200_main.c

10 
	~<°d¨g.h
>

11 
	~<°dio.h
>

13 
	~"b200_maö.h
"

14 
	~"b200_gpifc⁄fig.h
"

15 
	~"b200_i2c.h
"

17 
	~"cyu3dma.h
"

18 
	~"cyu3îr‹.h
"

19 
	~"cyu3gpif.h
"

20 
	~"cyu3gpio.h
"

21 
	~"cyu3•i.h
"

22 
	~"cyu3os.h
"

23 
	~"cyu3pib.h
"

24 
	~"cyu3sy°em.h
"

25 
	~"cyu3usb.h
"

26 
	~"cyu3utûs.h
"

27 
	~"cyfxvîsi⁄.h
"

28 
	~"pib_ªgs.h
"

30 
	#STATIC_SAVER
 

31 

	)

37 
	#HAS_HEAP


38 
	#ENABLE_MSG


39 
	#ENABLE_MANUAL_DMA_XFER


41 
	#ENABLE_MANUAL_DMA_XFER_FROM_HOST


	)

42 
	#ENABLE_MANUAL_DMA_XFER_TO_HOST


	)

44 
	#ENABLE_FPGA_SB


45 
	#ENABLE_RE_ENUM_THREAD


	)

46 
	#ENABLE_USB_EVENT_LOGGING


	)

51 
	#WATCHDOG_TIMEOUT
 1500

	)

52 
	#CHECK_POWER_STATE_SLEEP_TIME
 500

53 

	)

54 
	#FPGA_PROGRAMMING_POLL_SLEEP
 10

55 
	#FPGA_PROGRAMMING_BITSTREAM_START_POLL_COUNT
 250

56 
	#FPGA_PROGRAMMING_INITB_POLL_COUNT
 100

57 
	#FPGA_PROGRAMMING_DONE_POLL_COUNT
 250

58 

	)

59 
	#FPGA_RESET_SETTLING_TIME
 (1*10)

60 

	)

61 
	#RE_ENUM_THREAD_SLEEP_TIME
 100

	)

62 
	#KEEP_ALIVE_LOOP_COUNT
 200

	)

64 #¥agm®
mesßge
 "----------------------"

66 #ifde‡
ENABLE_MSG


67 #¥agm®
mesßge
 "msgÉnabled"

69 #¥agm®
mesßge
 "msg disabled"

72 #ifde‡
ENABLE_MANUAL_DMA_XFER


73 #¥agm®
mesßge
 "Manual DMAÅransfers"

75 #ifde‡
ENABLE_MANUAL_DMA_XFER_FROM_HOST


76 #¥agm®
mesßge
 " -> From host"

79 #ifde‡
ENABLE_MANUAL_DMA_XFER_TO_HOST


80 #¥agm®
mesßge
 " <- To host"

83 #ifde‡
ENABLE_DMA_BUFFER_PACKET_DEBUG


84 #¥agm®
mesßge
 " Packet debuggingÉnabled"

88 #¥agm®
mesßge
 "Auto DMAÅransfers"

91 #ifde‡
ENABLE_FPGA_SB


92 #¥agm®
mesßge
 "FPGA Settings BusÉnabled"

94 #¥agm®
mesßge
 "FPGA Settings Bus disabled"

97 #ifde‡
ENABLE_RE_ENUM_THREAD


98 #¥agm®
mesßge
 "Re-enumeration & statisticsÅhreadÉnabled"

100 #¥agm®
mesßge
 "Re-enumeration & statisticsÅhread disabled"

103 #ifde‡
ENABLE_USB_EVENT_LOGGING


104 #¥agm®
mesßge
 "USBÉventÜoggingÉnabled"

106 #¥agm®
mesßge
 "USBÉventÜogging disabled"

109 #ifde‡
PREVENT_LOW_POWER_MODE


110 #¥agm®
mesßge
 "Preventing Low Power Mode"

112 #¥agm®
mesßge
 "Allowing Low Power Mode"

115 #ifde‡
HAS_HEAP


116 #¥agm®
mesßge
 "HeapÉnabled"

118 #¥agm®
mesßge
 "Heap disabled"

121 #ifde‡
ENABLE_INIT_B_WORKAROUND


122 #¥agm®
mesßge
 "INIT_B workaroundÉnabled"

124 #¥agm®
mesßge
 "INIT_B workaround disabled"

127 #ifde‡
ENABLE_DONE_WORKAROUND


128 #¥agm®
mesßge
 "DONE workaroundÉnabled"

130 #¥agm®
mesßge
 "DONE workaround disabled"

133 #¥agm®
mesßge
 "----------------------"

136 
CyU3PDmaCh™√l
 
	gd©a_c⁄s_to_¥od_ch™_h™dÀ
;

137 
CyU3PDmaCh™√l
 
	gd©a_¥od_to_c⁄s_ch™_h™dÀ
;

139 
CyU3PDmaCh™√l
 
	g˘æ_c⁄s_to_¥od_ch™_h™dÀ
;

140 
CyU3PDmaCh™√l
 
	g˘æ_¥od_to_c⁄s_ch™_h™dÀ
;

142 
CyU3PEvít
 
	gg_evít_usb_c⁄fig
;

143 
CyU3PThªad
 
	gthªad_maö_≠p
;

144 
CyU3PThªad
 
	gthªad_Âga_c⁄fig
;

145 #ifde‡
ENABLE_RE_ENUM_THREAD


146 
CyU3PThªad
 
	gthªad_ª_íum
;

149 
CyBoﬁ_t
 
	gg_≠p_ru¬ög
 = 
CyFÆ£
;

150 
uöt8_t
 
	gg_fx3_°©e
 = 
STATE_UNDEFINED
;

152 
	#USB2_VREQ_BUF_SIZE
 64

	)

153 
	#USB3_VREQ_BUF_SIZE
 512

	)

154 
	#MIN_VREQ_BUF_SIZE
 
USB2_VREQ_BUF_SIZE


	)

155 
	#MAX_VREQ_BUF_SIZE
 
USB3_VREQ_BUF_SIZE


	)

157 
uöt16_t
 
	gg_víd‹_ªq_buff_size
 = 
MIN_VREQ_BUF_SIZE
;

158 
uöt8_t
 
	gg_víd‹_ªq_buf„r
[
MAX_VREQ_BUF_SIZE
] 
__©åibuã__
 ((
Æig√d
 (32)));

159 
uöt16_t
 
	gg_víd‹_ªq_ªad_cou¡
 = 0;

161 
uöt8_t
 
	gÂga_hash
[4] 
__©åibuã__
 ((
Æig√d
 (32)));

162 
uöt8_t
 
	gfw_hash
[4] 
__©åibuã__
 ((
Æig√d
 (32)));

163 
uöt8_t
 
	gcom∑t_num
[2];

164 
uöt32_t
 
	gg_Âga_¥ogømmög_wrôe_cou¡
 = 0;

166 
	#COUNTER_MAGIC
 0x10024001

	)

167 
	#LOG_BUFFER_SIZE
 1024

168 
log_buf„r
[
LOG_BUFFER_SIZE
];

	)

169 
	glog_c⁄tiguous_buf„r
[
LOG_BUFFER_SIZE
];

170 
	glog_buf„r_idx
 = 0, 
	glog_buf„r_Àn
 = 0;

171 #ifde‡
ENABLE_MSG


172 
	glog_cou¡
 = 0;

175 
	#USB_EVENT_LOG_SIZE
 64

	)

176 
uöt8_t
 
	gg_usb_evít_log
[
USB_EVENT_LOG_SIZE
];

177 
uöt16_t
 
	gg_œ°_usb_evít_log_ödex
 = 0;

178 
uöt8_t
 
	gg_usb_evít_log_c⁄tiguous_buf
[
USB_EVENT_LOG_SIZE
];

180 #ifde‡
ENABLE_FPGA_SB


181 
CyBoﬁ_t
 
	gg_Âga_sb_íabÀd
 = 
CyFÆ£
;

183 
uöt16_t
 
	gg_Âga_sb_œ°_usb_evít_log_ödex
 = 0;

184 
CyU3PThªad
 
	gthªad_Âga_sb_pﬁl
;

185 
CyU3PMuãx
 
	gg_su¨t_lock
;

188 
CyU3PMuãx
 
	gg_log_lock
, 
	gg_cou¡îs_lock
, 
	gg_cou¡îs_dma_‰om_ho°_lock
, 
	gg_cou¡îs_dma_to_ho°_lock
;

190 
	#FPGA_SB_UART_ADDR_BASE
 0x00

	)

192 
	eUARTRegs


194 
	mSUART_CLKDIV
,

195 
	mSUART_TXLEVEL
,

196 
	mSUART_RXLEVEL
,

197 
	mSUART_TXCHAR
,

198 
	mSUART_RXCHAR


201 
	eUARTPackëTy≥


203 
	mUPT_NONE
 = '\0',

204 
	mUPT_MSG
 = ' ',

205 
	mUPT_COUNTERS
 = 'C',

206 
	mUPT_USB_EVENTS
 = 'U',

209 
	eC⁄figFœgs
 {

210 
	mCF_NONE
 = 0,

211 
	mCF_TX_SWING
 = 1 << 0,

212 
	mCF_TX_DEEMPHASIS
 = 1 << 1,

213 
	mCF_DISABLE_USB2
 = 1 << 2,

214 
	mCF_ENABLE_AS_SUPERSPEED
 = 1 << 3,

215 
	mCF_PPORT_DRIVE_STRENGTH
 = 1 << 4,

216 
	mCF_DMA_BUFFER_SIZE
 = 1 << 5,

217 
	mCF_DMA_BUFFER_COUNT
 = 1 << 6,

218 
	mCF_MANUAL_DMA
 = 1 << 7,

219 
	mCF_SB_BAUD_DIV
 = 1 << 8,

221 
	mCF_RE_ENUM
 = 1 << 31

224 
	sC⁄fig
 {

225 
	mtx_swög
;

226 
	mtx_dìmphasis
;

227 
	mdißbÀ_usb2
;

228 
	míabÀ_as_su≥r•ìd
;

229 
	mµ‹t_drive_°ªngth
;

230 
	mdma_buf„r_size
;

231 
	mdma_buf„r_cou¡
;

232 
	mm™uÆ_dma
;

233 
	msb_baud_div
;

234 } 
	tCONFIG
, *
	tPCONFIG
;

236 
	sC⁄figMod
 {

237 
	mÊags
;

238 
CONFIG
 
	mc⁄fig
;

239 } 
	tCONFIG_MOD
, *
	tPCONFIG_MOD
;

241 
CONFIG
 
	gg_c⁄fig
 = {

246 
CY_U3P_DS_THREE_QUARTER_STRENGTH
,

252 
CONFIG_MOD
 
	gg_c⁄fig_mod
;

254 
	#REG_LNK_PHY_ERROR_STATUS
 0xE0033044

	)

256 
	ePhyEº‹s
 {

257 
	mPHYERR_PHY_LOCK_EV
 = 1 << 8,

258 
	mPHYERR_TRAINING_ERROR_EV
 = 1 << 7,

259 
	mPHYERR_RX_ERROR_CRC32_EV
 = 1 << 6,

260 
	mPHYERR_RX_ERROR_CRC16_EV
 = 1 << 5,

261 
	mPHYERR_RX_ERROR_CRC5_EV
 = 1 << 4,

262 
	mPHYERR_PHY_ERROR_DISPARITY_EV
 = 1 << 3,

263 
	mPHYERR_PHY_ERROR_EB_UND_EV
 = 1 << 2,

264 
	mPHYERR_PHY_ERROR_EB_OVR_EV
 = 1 << 1,

265 
	mPHYERR_PHY_ERROR_DECODE_EV
 = 1 << 0,

267 
	mPHYERR_MAX
 = 
PHYERR_PHY_LOCK_EV
,

268 
	mPHYERR_MASK
 = (
PHYERR_MAX
 << 1) - 1

271 
	sUSBEº‹Cou¡îs
 {

272 
	mphy_îr‹_cou¡
;

273 
	mlök_îr‹_cou¡
;

275 
	mPHY_LOCK_EV
;

276 
	mTRAINING_ERROR_EV
;

277 
	mRX_ERROR_CRC32_EV
;

278 
	mRX_ERROR_CRC16_EV
;

279 
	mRX_ERROR_CRC5_EV
;

280 
	mPHY_ERROR_DISPARITY_EV
;

281 
	mPHY_ERROR_EB_UND_EV
;

282 
	mPHY_ERROR_EB_OVR_EV
;

283 
	mPHY_ERROR_DECODE_EV
;

284 } 
	tUSB_ERROR_COUNTERS
, *
	tPUSB_ERROR_COUNTERS
;

286 
	sDMACou¡îs
 {

287 
	mXFER_CPLT
;

288 
	mSEND_CPLT
;

289 
	mRECV_CPLT
;

290 
	mPROD_EVENT
;

291 
	mCONS_EVENT
;

292 
	mABORTED
;

293 
	mERROR
;

294 
	mPROD_SUSP
;

295 
	mCONS_SUSP
;

297 
	mBUFFER_MARKER
;

298 
	mBUFFER_EOP
;

299 
	mBUFFER_ERROR
;

300 
	mBUFFER_OCCUPIED
;

302 
	mœ°_cou¡
;

303 
	mœ°_size
;

305 
	mœ°_sid
;

306 
	mbad_sid_cou¡
;

307 } 
	tDMA_COUNTERS
, *
	tPDMA_COUNTERS
;

309 
	sPIBCou¡îs


311 
	msockë_öa˘ive
;

312 } 
	tPIB_COUNTERS
, *
	tPPIB_COUNTERS
;

314 
	sCou¡îs
 {

315 
	mmagic
;

317 
DMA_COUNTERS
 
	mdma_to_ho°
;

318 
DMA_COUNTERS
 
	mdma_‰om_ho°
;

320 
	mlog_ovîrun_cou¡
;

322 
	musb_îr‹_upd©e_cou¡
;

323 
USB_ERROR_COUNTERS
 
	musb_îr‹_cou¡îs
;

325 
	musb_ï_undîrun_cou¡
;

327 
	mhóp_size
;

329 
	mªsume_cou¡
;

331 
	m°©e_å™sôi⁄_cou¡
;

332 
	mövÆid_gpif_°©e
;

334 
PIB_COUNTERS
 
	mpib_cou¡îs
[4];

335 } 
	tCOUNTERS
, *
	tPCOUNTERS
;

337 vﬁ©ûê
COUNTERS
 
	gg_cou¡îs
;

339 #i‚de‡
mö


340 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

343 
	#LOCKP
(
p
Ë
	`CyU3PMuãxGë
’, 
CYU3P_WAIT_FOREVER
)

	)

344 
	#UNLOCKP
(
p
Ë
	`CyU3PMuãxPut
’)

	)

345 
	#LOCK
(
p
Ë
	`LOCKP
(&p)

	)

346 
	#UNLOCK
(
p
Ë
	`UNLOCKP
(&p)

	)

350 *
	ghóp_íd
 = 0;

351 
ˇddr_t
 
	$_sbrk
(
ö¸
)

353 #ifde‡
HAS_HEAP


354 
__hóp_°¨t
;

355 
__hóp_íd
;

356 *
¥ev_hóp_íd
;

358 i‡(
hóp_íd
 == 0)

360 
hóp_íd
 = (*)&
__hóp_°¨t
;

362 
¥ev_hóp_íd
 = 
hóp_íd
;

364 i‡(
hóp_íd
 + 
ö¸
 > &
__hóp_íd
)

366  (
ˇddr_t
) 0;

368 
hóp_íd
 +
ö¸
;

369 
g_cou¡îs
.
hóp_size
 +
ö¸
;

371  (
ˇddr_t
Ë
¥ev_hóp_íd
;

373  (
ˇddr_t
) -1;

375 
	}
}

379 
b200_°¨t_Âga_sb_gpio
();

380 
sb_wrôe
(
uöt8_t
 
ªg
, 
uöt32_t
 
vÆ
);

381 
_sb_wrôe_°rög
(c⁄° * 
msg
);

383 
	$msg
(c⁄° * 
°r
, ...) {

384 
	#msg_CHECK_USE_LOCK


	)

387 #ifde‡
ENABLE_MSG


388 
va_li°
 
¨gs
;

389 
buf
[
LOG_BUFFER_SIZE
];

390 
idx
 = 0;

392 
msg_CHECK_USE_LOCK


393 
	`LOCK
(
g_log_lock
);

395 ++
log_cou¡
;

396 
log_cou¡
 %= 10000;

398 
	`va_°¨t
(
¨gs
, 
°r
);

401 
uöt32_t
 
time_now
 = 
	`CyU3PGëTime
();

402 
idx
 +
	`•rötf
(
buf
, "%08X %04ò", (
uöt
)
time_now
, 
log_cou¡
);

405 
idx
 +
	`•rötf
(
buf
, "%04ò", 
log_cou¡
);

406 
idx
 +
	`v¢¥ötf
(
buf
 + idx, 
LOG_BUFFER_SIZE
 - idx, 
°r
, 
¨gs
);

408 
	`va_íd
(
¨gs
);

410 i‡((
LOG_BUFFER_SIZE
 - 
log_buf„r_Àn
Ë< (
idx
 + 1 + 1)) {

411 
msg_CHECK_USE_LOCK


412 
	`LOCK
(
g_cou¡îs_lock
);

413 ++
g_cou¡îs
.
log_ovîrun_cou¡
;

414 
msg_CHECK_USE_LOCK


415 
	`UNLOCK
(
g_cou¡îs_lock
);

417 
msg_exô
;

421 
	`mem˝y
(
log_buf„r
 + 
log_buf„r_Àn
, 
buf
, 
	`mö
(
idx
 + 1, 
LOG_BUFFER_SIZE
 -Üog_buffer_len));

422 i‡((
idx
 + 1Ë> (
LOG_BUFFER_SIZE
 - 
log_buf„r_Àn
))

424 
	`mem˝y
(
log_buf„r
, 
buf
 + (
LOG_BUFFER_SIZE
 - 
log_buf„r_Àn
), (
idx
 + 1) - (LOG_BUFFER_SIZE -Üog_buffer_len));

425 
log_buf„r
[(
idx
 + 1Ë- (
LOG_BUFFER_SIZE
 - 
log_buf„r_Àn
)] = '\0';

428 
log_buf„r
[
log_buf„r_Àn
 + 
idx
 + 1] = '\0';

430 
log_buf„r_Àn
 +(
idx
 + 1);

431 
msg_exô
:

432 
msg_CHECK_USE_LOCK


433 
	`UNLOCK
(
g_log_lock
);

434 #ifde‡
ENABLE_FPGA_SB


435 
	`LOCK
(
g_su¨t_lock
);

436 
	`sb_wrôe
(
SUART_TXCHAR
, 
UPT_MSG
);

437 
	`_sb_wrôe_°rög
(
buf
);

438 
	`_sb_wrôe_°rög
("\r\n");

439 
	`UNLOCK
(
g_su¨t_lock
);

442 
	}
}

460 
	$log_ª£t
() {

463 
log_buf„r_idx
 = 0;

464 
log_buf„r_Àn
 = 0;

465 
log_buf„r
[0] = '\0';

468 
	}
}

470 
	$cou¡îs_auto_ª£t
() {

473 
g_cou¡îs
.
log_ovîrun_cou¡
 = 0;

476 
	}
}

478 
	$cou¡îs_dma_ª£t
() {

479 
	`LOCK
(
g_cou¡îs_lock
);

481 
	`LOCK
(
g_cou¡îs_dma_to_ho°_lock
);

482 
	`mem£t
((*)&
g_cou¡îs
.
dma_to_ho°
, 0x00, (
DMA_COUNTERS
));

483 
	`UNLOCK
(
g_cou¡îs_dma_to_ho°_lock
);

485 
	`LOCK
(
g_cou¡îs_dma_‰om_ho°_lock
);

486 
	`mem£t
((*)&
g_cou¡îs
.
dma_‰om_ho°
, 0x00, (
DMA_COUNTERS
));

487 
	`UNLOCK
(
g_cou¡îs_dma_‰om_ho°_lock
);

489 
	`UNLOCK
(
g_cou¡îs_lock
);

490 
	}
}

492 
	$cou¡îs_ª£t_usb_îr‹s
() {

493 
	`LOCK
(
g_cou¡îs_lock
);

495 
g_cou¡îs
.
usb_îr‹_upd©e_cou¡
 = 0;

496 
	`mem£t
((*)&
g_cou¡îs
.
usb_îr‹_cou¡îs
, 0x00, (g_counters.usb_error_counters));

498 
	`UNLOCK
(
g_cou¡îs_lock
);

499 
	}
}

501 #ifde‡
ENABLE_MANUAL_DMA_XFER


503 
	$dma_ˇŒback
 (

504 
CyU3PDmaCh™√l
 *
chH™dÀ
,

505 
CyU3PDmaCbTy≥_t
 
ty≥
,

506 
CyU3PDmaCBI≈ut_t
 *
öput
,

507 
‰om_ho°
)

509 
CyU3PRëu∫Sètus_t
 
°©us
 = 
CY_U3P_SUCCESS
;

511 
PDMA_COUNTERS
 
˙t
 = (PDMA_COUNTERS)(
‰om_ho°
 ? &
g_cou¡îs
.
dma_‰om_ho°
 : &g_cou¡îs.
dma_to_ho°
);

512 
CyU3PMuãx
* 
lock
 = (
‰om_ho°
 ? &
g_cou¡îs_dma_‰om_ho°_lock
 : &
g_cou¡îs_dma_to_ho°_lock
);

514 
uöt16_t
 
buf„r_°©us
 = (
öput
->
buf„r_p
.
°©us
 & 
CY_U3P_DMA_BUFFER_STATUS_MASK
);

515 i‡(
buf„r_°©us
 & 
CY_U3P_DMA_BUFFER_MARKER
)

517 
˙t
->
BUFFER_MARKER
++;

519 i‡(
buf„r_°©us
 & 
CY_U3P_DMA_BUFFER_EOP
)

521 
˙t
->
BUFFER_EOP
++;

523 i‡(
buf„r_°©us
 & 
CY_U3P_DMA_BUFFER_ERROR
)

525 
˙t
->
BUFFER_ERROR
++;

527 i‡(
buf„r_°©us
 & 
CY_U3P_DMA_BUFFER_OCCUPIED
)

529 
˙t
->
BUFFER_OCCUPIED
++;

532 i‡(
ty≥
 =
CY_U3P_DMA_CB_PROD_EVENT
)

534 #ifde‡
ENABLE_DMA_BUFFER_PACKET_DEBUG


535 
	`LOCKP
(
lock
);

536 
¥od_˙t
 = 
˙t
->
PROD_EVENT
++;

537 
	`UNLOCKP
(
lock
);

541 
˙t
->
œ°_cou¡
 = 
öput
->
buf„r_p
.
cou¡
;

543 i‡(
˙t
->
œ°_size
 !
öput
->
buf„r_p
.
size
)

544 
	`msg
("[DMA%d %05d] buf„r.sizê(%05dË!œ°_sizê(%05d)", 
‰om_ho°
, 
¥od_˙t
, 
öput
->
buf„r_p
.
size
, 
˙t
->
œ°_size
);

545 
˙t
->
œ°_size
 = 
öput
->
buf„r_p
.
size
;

547 
uöt32_t
* 
p32
 = 
öput
->
buf„r_p
.
buf„r
;

548 
uöt32_t
 
sid
 = 
p32
[1];

549 
˙t
->
œ°_sid
 = ()
sid
;

550 i‡(((
‰om_ho°
 =0Ë&& ((
sid
 != 0xa0) && (sid != 0xb0))) ||

551 ((
‰om_ho°
 =1Ë&& ((
sid
 != 0x50) && (sid != 0x60))))

553 
˙t
->
bad_sid_cou¡
++;

554 
	`msg
("[DMA%d %05d] Bad SID: 0x%08x", 
‰om_ho°
, 
¥od_˙t
, 
sid
);

557 
uöt16_t
* 
p16
 = 
öput
->
buf„r_p
.
buf„r
;

559 i‡(
p32
[0] & (((
uöt32_t
)1) << 31))

561 
	`msg
("[DMA%d %05d] Eº‹ code: 0x%x (∑ckëÜí: %05d, buf„∏cou¡: %05d, seq: %04d)", 
‰om_ho°
, 
¥od_˙t
, 
p32
[4], 
p16
[0], 
öput
->
buf„r_p
.
cou¡
, (p16[1] & 0x0fff));

567 i‡(
p16
[1] & (((
uöt16_t
)1) << 12))

569 
	`msg
("[DMA%d %05d] EOB (∑ckëÜí: %05d, buf„∏cou¡: %05d)", 
‰om_ho°
, 
¥od_˙t
, 
p16
[0], 
öput
->
buf„r_p
.
cou¡
);

572 i‡((
p16
[0] !
öput
->
buf„r_p
.
cou¡
) &&

573 ((
p16
[0] + 4Ë!
öput
->
buf„r_p
.
cou¡
))

575 i‡(
‰om_ho°
 == 0)

576 
	`msg
("[DMA%d %05d] PackëÜí (%05dË!buf„∏cou¡ (%05d), seq: %04d [0x%04x 0x%04x]", 
‰om_ho°
, 
¥od_˙t
, 
p16
[0], 
öput
->
buf„r_p
.
cou¡
, (p16[1] & 0x0fff),Ö16[0],Ö16[1]);

581 i‡(
p16
[1] & (((
uöt16_t
)1) << 12))

582 
	`msg
("[DMA%d %05d] 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x", 
‰om_ho°
, 
¥od_˙t
, 
p32
[0],Ö32[1],Ö32[2],Ö32[3],Ö32[4],Ö32[5]);

585 
°©us
 = 
	`CyU3PDmaCh™√lCommôBuf„r
 (
chH™dÀ
, 
öput
->
buf„r_p
.
cou¡
, 0);

586 #i‚de‡
ENABLE_DMA_BUFFER_PACKET_DEBUG


587 
	`LOCKP
(
lock
);

588 
˙t
->
PROD_EVENT
++;

589 
	`UNLOCKP
(
lock
);

592 i‡(
ty≥
 =
CY_U3P_DMA_CB_CONS_EVENT
)

594 
	`LOCKP
(
lock
);

595 
˙t
->
CONS_EVENT
++;

596 
	`UNLOCKP
(
lock
);

598 i‡(
ty≥
 =
CY_U3P_DMA_CB_XFER_CPLT
)

600 
	`LOCKP
(
lock
);

601 
˙t
->
XFER_CPLT
++;

602 
	`UNLOCKP
(
lock
);

604 i‡(
ty≥
 =
CY_U3P_DMA_CB_SEND_CPLT
)

606 
	`LOCKP
(
lock
);

607 
˙t
->
SEND_CPLT
++;

608 
	`UNLOCKP
(
lock
);

610 i‡(
ty≥
 =
CY_U3P_DMA_CB_RECV_CPLT
)

612 
	`LOCKP
(
lock
);

613 
˙t
->
RECV_CPLT
++;

614 
	`UNLOCKP
(
lock
);

616 i‡(
ty≥
 =
CY_U3P_DMA_CB_ABORTED
)

618 
	`LOCKP
(
lock
);

619 
˙t
->
ABORTED
++;

620 
	`UNLOCKP
(
lock
);

622 
	`msg
("! Ab‹ãd %i", 
‰om_ho°
);

624 i‡(
ty≥
 =
CY_U3P_DMA_CB_ERROR
)

626 
	`LOCKP
(
lock
);

627 
˙t
->
ERROR
++;

628 
	`UNLOCKP
(
lock
);

630 
	`msg
("! Eº‹ %i", 
‰om_ho°
);

632 i‡(
ty≥
 =
CY_U3P_DMA_CB_PROD_SUSP
)

634 
	`LOCKP
(
lock
);

635 
˙t
->
PROD_SUSP
++;

636 
	`UNLOCKP
(
lock
);

638 
	`msg
("! Prod su•íd %i", 
‰om_ho°
);

640 i‡(
ty≥
 =
CY_U3P_DMA_CB_CONS_SUSP
)

642 
	`LOCKP
(
lock
);

643 
˙t
->
CONS_SUSP
++;

644 
	`UNLOCKP
(
lock
);

648 
	`CyU3PDmaCh™√lResume
 (
chH™dÀ
, 
CyFÆ£
, 
CyTrue
);

650 
	}
}

652 
	$‰om_ho°_dma_ˇŒback
 (

653 
CyU3PDmaCh™√l
 *
chH™dÀ
,

654 
CyU3PDmaCbTy≥_t
 
ty≥
,

655 
CyU3PDmaCBI≈ut_t
 *
öput
)

657  
	`dma_ˇŒback
(
chH™dÀ
, 
ty≥
, 
öput
, 1);

658 
	}
}

660 
	$to_ho°_dma_ˇŒback
 (

661 
CyU3PDmaCh™√l
 *
chH™dÀ
,

662 
CyU3PDmaCbTy≥_t
 
ty≥
,

663 
CyU3PDmaCBI≈ut_t
 *
öput
)

665  
	`dma_ˇŒback
(
chH™dÀ
, 
ty≥
, 
öput
, 0);

666 
	}
}

673 
	$gpio_öãºu±_ˇŒback
(
uöt8_t
 
gpio_id
) {

674 
CyBoﬁ_t
 
gpio_vÆue
;

676 i‡((
gpio_id
 =
GPIO_DONE
Ë&& (
g_fx3_°©e
 =
STATE_CONFIGURING_FPGA
)) {

677 
	`CyU3PGpioGëVÆue
(
gpio_id
, &
gpio_vÆue
);

679 if(
gpio_vÆue
 =
CyTrue
) {

681 
	`CyU3PEvítSë
(&
g_evít_usb_c⁄fig
, 
EVENT_GPIO_DONE_HIGH
, 
CYU3P_EVENT_OR
);

683 } i‡((
gpio_id
 =
GPIO_INIT_B
Ë&& (
g_fx3_°©e
 =
STATE_FPGA_READY
)) {

684 
	`CyU3PGpioGëVÆue
(
gpio_id
, &
gpio_vÆue
);

686 if(
gpio_vÆue
 =
CyTrue
) {

688 
	`CyU3PEvítSë
(&
g_evít_usb_c⁄fig
, 
EVENT_GPIO_INITB_RISE
, 
CYU3P_EVENT_OR
);

691 
	}
}

699 
	$b200_fw_°›
() {

700 
	`msg
("b200_fw_stop");

702 
CyU3PEpC⁄fig_t
 
usb_ídpoöt_c⁄fig
;

705 
g_≠p_ru¬ög
 = 
CyFÆ£
;

708 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_PRODUCER
);

709 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_CONSUMER
);

710 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_PRODUCER
);

711 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_CONSUMER
);

715 
	`CyU3PDmaCh™√lRe£t
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
);

716 
	`CyU3PDmaCh™√lRe£t
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
);

717 
	`CyU3PDmaCh™√lRe£t
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
);

718 
	`CyU3PDmaCh™√lRe£t
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
);

721 
	`CyU3PDmaCh™√lDe°roy
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
);

722 
	`CyU3PDmaCh™√lDe°roy
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
);

723 
	`CyU3PDmaCh™√lDe°roy
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
);

724 
	`CyU3PDmaCh™√lDe°roy
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
);

727 
	`CyU3PMemSë
((
uöt8_t
 *Ë&
usb_ídpoöt_c⁄fig
, 0, \

728 (
usb_ídpoöt_c⁄fig
));

729 
usb_ídpoöt_c⁄fig
.
íabÀ
 = 
CyFÆ£
;

731 
	`CyU3PSëEpC⁄fig
(
DATA_ENDPOINT_PRODUCER
, &
usb_ídpoöt_c⁄fig
);

732 
	`CyU3PSëEpC⁄fig
(
DATA_ENDPOINT_CONSUMER
, &
usb_ídpoöt_c⁄fig
);

733 
	`CyU3PSëEpC⁄fig
(
CTRL_ENDPOINT_PRODUCER
, &
usb_ídpoöt_c⁄fig
);

734 
	`CyU3PSëEpC⁄fig
(
CTRL_ENDPOINT_CONSUMER
, &
usb_ídpoöt_c⁄fig
);

735 
	}
}

738 
	$ª£t_gpif
() {

739 
g_fx3_°©e
 = 
STATE_BUSY
;

742 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_RESET
, 
CyTrue
);

745 
	`CyU3PGpifDißbÀ
–
CyFÆ£
);

748 
	`CyU3PDmaCh™√lRe£t
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
);

749 
	`CyU3PDmaCh™√lRe£t
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
);

750 
	`CyU3PDmaCh™√lRe£t
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
);

751 
	`CyU3PDmaCh™√lRe£t
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
);

754 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

755 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

756 
	`CyU3PDmaCh™√lSëX„r
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

757 
	`CyU3PDmaCh™√lSëX„r
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

760 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_PRODUCER
);

761 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_CONSUMER
);

762 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_PRODUCER
);

763 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_CONSUMER
);

778 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_RESET
, 
CyFÆ£
);

780 
	`CyU3PThªadSÀï
(
FPGA_RESET_SETTLING_TIME
);

782 i‡(
	`CyU3PGpifSMSèπ
(
RESET
, 
ALPHA_RESET
Ë!
CY_U3P_SUCCESS
)

783 
	`msg
("! CyU3PGpifSMStart");

785 
	`msg
("GPIFÑeset");

787 
	`b200_°¨t_Âga_sb_gpio
();

789 
g_fx3_°©e
 = 
STATE_RUNNING
;

790 
	}
}

793 
CyU3PRëu∫Sètus_t
 
	$b200_£t_io_m©rix
(
CyBoﬁ_t
 
Âga_c⁄fig_mode
) {

794 
CyU3PIoM©rixC⁄fig_t
 
io_c⁄fig_m©rix
;

795 
CyU3PRëu∫Sètus_t
 
ªs
;

800 
	`CyU3PMemSë
((
uöt8_t
 *Ë&
io_c⁄fig_m©rix
, 0, (io_config_matrix));

801 
io_c⁄fig_m©rix
.
isDQ32Bô
 = (
Âga_c⁄fig_mode
 =
CyFÆ£
);

802 
io_c⁄fig_m©rix
.
ÕpMode
 = 
CY_U3P_IO_MATRIX_LPP_DEFAULT
;

803 
io_c⁄fig_m©rix
.
gpioSim∂eEn
[0] = 0 | 
MASK_GPIO_FPGA_SB_SCL
 | 
MASK_GPIO_FPGA_SB_SDA
;

804 
io_c⁄fig_m©rix
.
gpioSim∂eEn
[1] = 
MASK_GPIO_PROGRAM_B
 \

805 | 
MASK_GPIO_INIT_B
 \

806 | (
Âga_c⁄fig_mode
 ? 0 : \

808 
MASK_GPIO_SHDN_SW
 \

809 | 
MASK_GPIO_AUX_PWR_ON
 \

810 | 
MASK_GPIO_FX3_SCLK
 \

811 | 
MASK_GPIO_FX3_CE
 \

812 | 
MASK_GPIO_FX3_MISO
 \

813 | 
MASK_GPIO_FX3_MOSI
);

814 
io_c⁄fig_m©rix
.
gpioCom∂exEn
[0] = 0;

815 
io_c⁄fig_m©rix
.
gpioCom∂exEn
[1] = 0;

816 
io_c⁄fig_m©rix
.
u£U¨t
 = 
CyFÆ£
;

817 
io_c⁄fig_m©rix
.
u£I2C
 = 
CyTrue
;

818 
io_c⁄fig_m©rix
.
u£I2S
 = 
CyFÆ£
;

819 
io_c⁄fig_m©rix
.
u£Spi
 = 
Âga_c⁄fig_mode
;

821 
ªs
 = 
	`CyU3PDevi˚C⁄figuªIOM©rix
(&
io_c⁄fig_m©rix
);

822 i‡(
ªs
 !
CY_U3P_SUCCESS
)

823 
	`msg
("! ConfigureIOMatrix");

825  
ªs
;

826 
	}
}

829 
CyU3PRëu∫Sètus_t
 
	$b200_gpio_öô
(
CyBoﬁ_t
 
£t_ˇŒback
) {

830 
CyU3PGpioClock_t
 
gpio_˛ock_c⁄fig
;

831 
CyU3PRëu∫Sètus_t
 
ªs
;

835 
	`CyU3PMemSë
((
uöt8_t
 *Ë&
gpio_˛ock_c⁄fig
, 0, \

836 (
gpio_˛ock_c⁄fig
));

837 
gpio_˛ock_c⁄fig
.
Á°ClkDiv
 = 2;

838 
gpio_˛ock_c⁄fig
.
¶owClkDiv
 = 0;

839 
gpio_˛ock_c⁄fig
.
sim∂eDiv
 = 
CY_U3P_GPIO_SIMPLE_DIV_BY_2
;

840 
gpio_˛ock_c⁄fig
.
˛kSrc
 = 
CY_U3P_SYS_CLK
;

841 
gpio_˛ock_c⁄fig
.
hÆfDiv
 = 0;

843 
ªs
 = 
	`CyU3PGpioInô
(&
gpio_˛ock_c⁄fig
, (
£t_ˇŒback
 ? 
gpio_öãºu±_ˇŒback
 : 
NULL
));

844 i‡(
ªs
 !
CY_U3P_SUCCESS
)

845 
	`msg
("! CyU3PGpioInit");

847  
ªs
;

848 
	}
}

851 
	$sb_wrôe
(
uöt8_t
 
ªg
, 
uöt32_t
 
vÆ
) {

852 #ifde‡
ENABLE_FPGA_SB


853 c⁄° 
Àn
 = 32;

854 
i
;

856 i‡(
g_Âga_sb_íabÀd
 =
CyFÆ£
)

859 
ªg
 +
FPGA_SB_UART_ADDR_BASE
;

864 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 1);

865 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SDA
, 0);

868 
i
 = 7; i >= 0; i--) {

869 
uöt8_t
 
bô
 = ((
ªg
 & (0x1 << 
i
)) ? 0x01 : 0x00);

870 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 0);

871 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SDA
, 
bô
);

873 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 1);

877 
i
 = (
Àn
-1); i >= 0; i--) {

878 
uöt8_t
 
bô
 = ((
vÆ
 & (0x1 << 
i
)) ? 0x01 : 0x00);

879 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 0);

880 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SDA
, 
bô
);

882 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 1);

886 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SDA
, 0);

887 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 0);

888 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 1);

889 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SDA
, 1);

891 
	}
}

894 
	$_sb_wrôe_°rög
(c⁄° * 
msg
) {

895 #ifde‡
ENABLE_FPGA_SB


896 *
msg
) {

897 
	`sb_wrôe
(
SUART_TXCHAR
, (
uöt8_t
)(*(
msg
++)));

900 
	}
}

903 
	$sb_wrôe_°rög
(c⁄° * 
msg
) {

904 #ifde‡
ENABLE_FPGA_SB


905 
	`LOCK
(
g_su¨t_lock
);

906 
	`_sb_wrôe_°rög
(
msg
);

907 
	`UNLOCK
(
g_su¨t_lock
);

909 
	}
}

912 
	$b200_íabÀ_Âga_sb_gpio
(
CyBoﬁ_t
 
íabÀ
) {

913 #ifde‡
ENABLE_FPGA_SB


914 
CyU3PGpioSim∂eC⁄fig_t
 
gpio_c⁄fig
;

915 
CyU3PRëu∫Sètus_t
 
ªs
;

917 i‡(
íabÀ
 =
CyFÆ£
) {

918 
g_Âga_sb_íabÀd
 = 
CyFÆ£
;

923 
gpio_c⁄fig
.
outVÆue
 = 
CyFÆ£
;

924 
gpio_c⁄fig
.
driveLowEn
 = 
CyTrue
;

925 
gpio_c⁄fig
.
driveHighEn
 = 
CyTrue
;

926 
gpio_c⁄fig
.
öputEn
 = 
CyFÆ£
;

927 
gpio_c⁄fig
.
öåMode
 = 
CY_U3P_GPIO_NO_INTR
;

929 
ªs
 = 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FPGA_SB_SCL
, &
gpio_c⁄fig
);

930 i‡(
ªs
 !
CY_U3P_SUCCESS
) {

931 
	`msg
("! GpioSetSimpleConfig GPIO_FPGA_SB_SCL");

933 
ªs
 = 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FPGA_SB_SDA
, &
gpio_c⁄fig
);

934 i‡(
ªs
 !
CY_U3P_SUCCESS
) {

935 
	`msg
("! GpioSetSimpleConfig GPIO_FPGA_SB_SDA");

938 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SCL
, 1);

939 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_SB_SDA
, 1);

941 
g_Âga_sb_íabÀd
 = 
CyTrue
;

943 
	`msg
("Debug SB OK");

945 
	}
}

948 
	$b200_°¨t_Âga_sb_gpio
() {

949 #ifde‡
ENABLE_FPGA_SB


950 
	`LOCK
(
g_su¨t_lock
);

951 
	`sb_wrôe
(
SUART_CLKDIV
, 
g_c⁄fig
.
sb_baud_div
);

952 
	`_sb_wrôe_°rög
("\r\n B2x0 FPGAÑeset\r\n");

953 
	`UNLOCK
(
g_su¨t_lock
);

955 
	`msg
("Com∑t: %d.%d", 
FX3_COMPAT_MAJOR
, 
FX3_COMPAT_MINOR
);

956 
	`msg
("FX3 SDK: %d.%d.%d (buûd %d)", 
CYFX_VERSION_MAJOR
, 
CYFX_VERSION_MINOR
, 
CYFX_VERSION_PATCH
, 
CYFX_VERSION_BUILD
);

958 
	}
}

966 
	$b200_gpios_¥e_Âga_c⁄fig
() {

967 
CyU3PGpioSim∂eC⁄fig_t
 
gpio_c⁄fig
;

973 
	`b200_£t_io_m©rix
(
CyTrue
);

981 
	`CyU3PDevi˚GpioOvîride
(
GPIO_FPGA_RESET
, 
CyTrue
);

982 
	`CyU3PDevi˚GpioOvîride
(
GPIO_DONE
, 
CyTrue
);

994 
gpio_c⁄fig
.
outVÆue
 = 
CyFÆ£
;

995 
gpio_c⁄fig
.
driveLowEn
 = 
CyTrue
;

996 
gpio_c⁄fig
.
driveHighEn
 = 
CyTrue
;

997 
gpio_c⁄fig
.
öputEn
 = 
CyFÆ£
;

998 
gpio_c⁄fig
.
öåMode
 = 
CY_U3P_GPIO_NO_INTR
;

1000 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FPGA_RESET
, &
gpio_c⁄fig
);

1001 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_PROGRAM_B
, &
gpio_c⁄fig
);

1005 
gpio_c⁄fig
.
outVÆue
 = 
CyTrue
;

1006 
gpio_c⁄fig
.
öputEn
 = 
CyTrue
;

1007 
gpio_c⁄fig
.
driveLowEn
 = 
CyFÆ£
;

1008 
gpio_c⁄fig
.
driveHighEn
 = 
CyFÆ£
;

1009 
gpio_c⁄fig
.
öåMode
 = 
CY_U3P_GPIO_INTR_POS_EDGE
;

1011 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_DONE
, &
gpio_c⁄fig
);

1012 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_INIT_B
, &
gpio_c⁄fig
);

1015 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_RESET
, 0);

1016 
	`CyU3PGpioSëVÆue
(
GPIO_PROGRAM_B
, 1);

1018 
	`b200_íabÀ_Âga_sb_gpio
(
CyTrue
);

1019 
	}
}

1022 
	$b200_¶fifo_mode_gpio_c⁄fig
() {

1023 
CyU3PGpioSim∂eC⁄fig_t
 
gpio_c⁄fig
;

1029 
	`b200_£t_io_m©rix
(
CyFÆ£
);

1037 
	`CyU3PDevi˚GpioOvîride
(
GPIO_FPGA_RESET
, 
CyTrue
);

1038 
	`CyU3PDevi˚GpioOvîride
(
GPIO_DONE
, 
CyTrue
);

1039 
	`CyU3PDevi˚GpioOvîride
(
GPIO_FX3_SCLK
, 
CyTrue
);

1040 
	`CyU3PDevi˚GpioOvîride
(
GPIO_FX3_CE
, 
CyTrue
);

1041 
	`CyU3PDevi˚GpioOvîride
(
GPIO_FX3_MISO
, 
CyTrue
);

1042 
	`CyU3PDevi˚GpioOvîride
(
GPIO_FX3_MOSI
, 
CyTrue
);

1054 
gpio_c⁄fig
.
outVÆue
 = 
CyFÆ£
;

1055 
gpio_c⁄fig
.
driveLowEn
 = 
CyTrue
;

1056 
gpio_c⁄fig
.
driveHighEn
 = 
CyTrue
;

1057 
gpio_c⁄fig
.
öputEn
 = 
CyFÆ£
;

1058 
gpio_c⁄fig
.
öåMode
 = 
CY_U3P_GPIO_NO_INTR
;

1060 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FPGA_RESET
, &
gpio_c⁄fig
);

1061 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_SHDN_SW
, &
gpio_c⁄fig
);

1062 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FX3_SCLK
, &
gpio_c⁄fig
);

1063 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FX3_CE
, &
gpio_c⁄fig
);

1064 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FX3_MOSI
, &
gpio_c⁄fig
);

1068 
gpio_c⁄fig
.
outVÆue
 = 
CyFÆ£
;

1069 
gpio_c⁄fig
.
öputEn
 = 
CyTrue
;

1070 
gpio_c⁄fig
.
driveLowEn
 = 
CyFÆ£
;

1071 
gpio_c⁄fig
.
driveHighEn
 = 
CyFÆ£
;

1072 
gpio_c⁄fig
.
öåMode
 = 
CY_U3P_GPIO_NO_INTR
;

1074 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_FX3_MISO
, &
gpio_c⁄fig
);

1075 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_AUX_PWR_ON
, &
gpio_c⁄fig
);

1076 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_PROGRAM_B
, &
gpio_c⁄fig
);

1077 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_INIT_B
, &
gpio_c⁄fig
);

1078 
	`CyU3PGpioSëSim∂eC⁄fig
(
GPIO_DONE
, &
gpio_c⁄fig
);

1081 
	`CyU3PGpioSëVÆue
(
GPIO_FPGA_RESET
, 0);

1082 
	`CyU3PGpioSëVÆue
(
GPIO_SHDN_SW
, 1);

1083 
	`CyU3PGpioSëVÆue
(
GPIO_FX3_SCLK
, 0);

1084 
	`CyU3PGpioSëVÆue
(
GPIO_FX3_CE
, 1);

1085 
	`CyU3PGpioSëVÆue
(
GPIO_FX3_MOSI
, 0);

1090 
	}
}

1098 
	$b200_fw_°¨t
() {

1099 
	`msg
("b200_fw_start");

1101 
CyU3PDmaCh™√lC⁄fig_t
 
dma_ch™√l_c⁄fig
;

1102 
CyU3PEpC⁄fig_t
 
usb_ídpoöt_c⁄fig
;

1103 
CyU3PUSBS≥ed_t
 
usb_•ìd
;

1104 
uöt16_t
 
max_∑ckë_size
 = 0;

1105 
uöt16_t
 
d©a_buf„r_cou¡
 = 0;

1106 
uöt16_t
 
d©a_buf„r_size
 = 0;

1107 
uöt16_t
 
d©a_buf„r_size_to_ho°
 = 0;

1108 
uöt16_t
 
d©a_buf„r_size_‰om_ho°
 = 0;

1109 
uöt8_t
 
num_∑ckës_≥r_bur°
 = 0;

1110 
CyU3PRëu∫Sètus_t
 
≠iRëSètus
 = 
CY_U3P_SUCCESS
;

1114 
usb_•ìd
 = 
	`CyU3PUsbGëS≥ed
();

1115 
usb_•ìd
) {

1116 
CY_U3P_FULL_SPEED
:

1117 
CY_U3P_HIGH_SPEED
:

1118 
max_∑ckë_size
 = 512;

1119 
d©a_buf„r_cou¡
 = 16;

1120 
d©a_buf„r_size
 = 512;

1121 
g_víd‹_ªq_buff_size
 = 
USB2_VREQ_BUF_SIZE
;

1122 
num_∑ckës_≥r_bur°
 = 
USB2_PACKETS_PER_BURST
;

1124 
d©a_buf„r_size_to_ho°
 = 
d©a_buf„r_size_‰om_ho°
 = 
d©a_buf„r_size
;

1128 
CY_U3P_SUPER_SPEED
:

1130 
≠iRëSètus
 = 
	`CyU3PUsbLPMDißbÀ
();

1132 i‡(
≠iRëSètus
 !
CY_U3P_SUCCESS
)

1133 
	`msg
("! LPMDißbÀ faûed (%d)", 
≠iRëSètus
);

1135 
	`msg
("LPMDisable OK");

1137 
max_∑ckë_size
 = 1024;

1171 
d©a_buf„r_cou¡
 = 
g_c⁄fig
.
dma_buf„r_cou¡
;

1172 
d©a_buf„r_size
 = 
g_c⁄fig
.
dma_buf„r_size
;

1174 
d©a_buf„r_size_to_ho°
 = 
d©a_buf„r_size
;

1175 
d©a_buf„r_size_‰om_ho°
 = 
d©a_buf„r_size
;

1177 
g_víd‹_ªq_buff_size
 = 
USB3_VREQ_BUF_SIZE
;

1178 
num_∑ckës_≥r_bur°
 = 
USB3_PACKETS_PER_BURST
*1+4*0;

1181 
CY_U3P_NOT_CONNECTED
:

1182 
	`msg
("! CY_U3P_NOT_CONNECTED");

1189 
	`msg
("[DMA]Åÿho°: %d, from ho°: %d, dïth: %d, bur° size: %d", 
d©a_buf„r_size_to_ho°
, 
d©a_buf„r_size_‰om_ho°
, 
d©a_buf„r_cou¡
, 
num_∑ckës_≥r_bur°
);

1191 #ifde‡
ENABLE_MANUAL_DMA_XFER


1192 
	`msg
("[DMA] CallbackÉnabled");

1194 #ifde‡
ENABLE_P2U_SUSP_EOP


1195 
	`msg
("[DMA] P2U_SUSP_EOPÉnabled");

1197 #ifde‡
ENABLE_MANUAL_DMA_XFER_FROM_HOST


1198 
	`msg
("[DMA] ManualÅransfers from host");

1200 #ifde‡
ENABLE_MANUAL_DMA_XFER_TO_HOST


1201 
	`msg
("[DMA] ManualÅransfersÅo host");

1203 #ifde‡
ENABLE_DMA_BUFFER_PACKET_DEBUG


1204 
	`msg
("[DMA] Packet debuggingÉnabled");

1208 
	`msg
("[DMA] AUTOÅransfer mode");

1211 
	`msg
("[DMA] Tøns„∏ovîride: %s", (
g_c⁄fig
.
m™uÆ_dma
 ? "manual" : "auto"));

1218 
	`CyU3PMemSë
((
uöt8_t
 *Ë&
usb_ídpoöt_c⁄fig
, 0, \

1219 (
usb_ídpoöt_c⁄fig
));

1232 
usb_ídpoöt_c⁄fig
.
íabÀ
 = 
CyTrue
;

1233 
usb_ídpoöt_c⁄fig
.
ïTy≥
 = 
CY_U3P_USB_EP_BULK
;

1234 
usb_ídpoöt_c⁄fig
.
bur°Lí
 = 
num_∑ckës_≥r_bur°
;

1235 
usb_ídpoöt_c⁄fig
.
°ªams
 = 0;

1236 
usb_ídpoöt_c⁄fig
.
pcktSize
 = 
max_∑ckë_size
;

1239 
	`CyU3PSëEpC⁄fig
(
DATA_ENDPOINT_PRODUCER
, &
usb_ídpoöt_c⁄fig
);

1240 
	`CyU3PSëEpC⁄fig
(
DATA_ENDPOINT_CONSUMER
, &
usb_ídpoöt_c⁄fig
);

1245 
dma_ch™√l_c⁄fig
.
size
 = 
d©a_buf„r_size_‰om_ho°
;

1246 
dma_ch™√l_c⁄fig
.
cou¡
 = 
d©a_buf„r_cou¡
;

1247 
dma_ch™√l_c⁄fig
.
¥odSckId
 = 
PRODUCER_DATA_SOCKET
;

1248 
dma_ch™√l_c⁄fig
.
c⁄sSckId
 = 
DATA_TX_PPORT_SOCKET
;

1249 
dma_ch™√l_c⁄fig
.
dmaMode
 = 
CY_U3P_DMA_MODE_BYTE
;

1250 
dma_ch™√l_c⁄fig
.
nŸifiˇti⁄
 = 0 |

1251 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& deföed(
ENABLE_MANUAL_DMA_XFER_FROM_HOST
)

1252 
CY_U3P_DMA_CB_XFER_CPLT
 |

1253 
CY_U3P_DMA_CB_SEND_CPLT
 |

1254 
CY_U3P_DMA_CB_RECV_CPLT
 |

1255 
CY_U3P_DMA_CB_PROD_EVENT
 |

1256 
CY_U3P_DMA_CB_CONS_EVENT
 |

1257 
CY_U3P_DMA_CB_ABORTED
 |

1258 
CY_U3P_DMA_CB_ERROR
 |

1259 
CY_U3P_DMA_CB_PROD_SUSP
 |

1260 
CY_U3P_DMA_CB_CONS_SUSP
 |

1265 
dma_ch™√l_c⁄fig
.
cb
 =

1266 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& deföed(
ENABLE_MANUAL_DMA_XFER_FROM_HOST
)

1267 
‰om_ho°_dma_ˇŒback
;

1269 
NULL
;

1271 
dma_ch™√l_c⁄fig
.
¥odHódî
 = 0;

1272 
dma_ch™√l_c⁄fig
.
¥odFoŸî
 = 0;

1273 
dma_ch™√l_c⁄fig
.
c⁄sHódî
 = 0;

1274 
dma_ch™√l_c⁄fig
.
¥odAvaûCou¡
 = 0;

1276 
	`CyU3PDmaCh™√lCª©e
 (&
d©a_c⁄s_to_¥od_ch™_h™dÀ
,

1277 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& deföed(
ENABLE_MANUAL_DMA_XFER_FROM_HOST
)

1278 (
g_c⁄fig
.
m™uÆ_dma
 ? 
CY_U3P_DMA_TYPE_MANUAL
 : 
CY_U3P_DMA_TYPE_AUTO
),

1280 
CY_U3P_DMA_TYPE_AUTO
,

1282 &
dma_ch™√l_c⁄fig
);

1289 
dma_ch™√l_c⁄fig
.
size
 = 
d©a_buf„r_size_to_ho°
;

1290 
dma_ch™√l_c⁄fig
.
¥odSckId
 = 
DATA_RX_PPORT_SOCKET
;

1291 
dma_ch™√l_c⁄fig
.
c⁄sSckId
 = 
CONSUMER_DATA_SOCKET
;

1292 
dma_ch™√l_c⁄fig
.
nŸifiˇti⁄
 = 0 |

1293 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& deföed(
ENABLE_MANUAL_DMA_XFER_TO_HOST
)

1294 
CY_U3P_DMA_CB_XFER_CPLT
 |

1295 
CY_U3P_DMA_CB_SEND_CPLT
 |

1296 
CY_U3P_DMA_CB_RECV_CPLT
 |

1297 
CY_U3P_DMA_CB_PROD_EVENT
 |

1298 
CY_U3P_DMA_CB_CONS_EVENT
 |

1299 
CY_U3P_DMA_CB_ABORTED
 |

1300 
CY_U3P_DMA_CB_ERROR
 |

1301 
CY_U3P_DMA_CB_PROD_SUSP
 |

1302 
CY_U3P_DMA_CB_CONS_SUSP
 |

1304 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& deföed(
ENABLE_P2U_SUSP_EOP
)

1305 
CY_U3P_DMA_CB_CONS_SUSP
 |

1310 
dma_ch™√l_c⁄fig
.
cb
 =

1311 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& (deföed(
ENABLE_MANUAL_DMA_XFER_TO_HOST
Ë|| deföed(
ENABLE_P2U_SUSP_EOP
))

1312 
to_ho°_dma_ˇŒback
;

1314 
NULL
;

1316 
	`CyU3PDmaCh™√lCª©e
 (&
d©a_¥od_to_c⁄s_ch™_h™dÀ
,

1317 #i‡
	`deföed
(
ENABLE_MANUAL_DMA_XFER
Ë&& deföed(
ENABLE_MANUAL_DMA_XFER_TO_HOST
)

1318 (
g_c⁄fig
.
m™uÆ_dma
 ? 
CY_U3P_DMA_TYPE_MANUAL
 : 
CY_U3P_DMA_TYPE_AUTO
),

1320 
CY_U3P_DMA_TYPE_AUTO
,

1322 &
dma_ch™√l_c⁄fig
);

1323 #ifde‡
ENABLE_P2U_SUSP_EOP


1324 
	`CyU3PDmaCh™√lSëSu•íd
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
, 
CY_U3P_DMA_SCK_SUSP_NONE
, 
CY_U3P_DMA_SCK_SUSP_EOP
);

1327 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_PRODUCER
);

1328 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_CONSUMER
);

1331 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

1332 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

1340 
	`CyU3PMemSë
((
uöt8_t
 *Ë&
usb_ídpoöt_c⁄fig
, 0, \

1341 (
usb_ídpoöt_c⁄fig
));

1354 
usb_ídpoöt_c⁄fig
.
íabÀ
 = 
CyTrue
;

1355 
usb_ídpoöt_c⁄fig
.
ïTy≥
 = 
CY_U3P_USB_EP_BULK
;

1356 
usb_ídpoöt_c⁄fig
.
bur°Lí
 = 
num_∑ckës_≥r_bur°
;

1357 
usb_ídpoöt_c⁄fig
.
°ªams
 = 0;

1358 
usb_ídpoöt_c⁄fig
.
pcktSize
 = 
max_∑ckë_size
;

1361 
	`CyU3PSëEpC⁄fig
(
CTRL_ENDPOINT_PRODUCER
, &
usb_ídpoöt_c⁄fig
);

1362 
	`CyU3PSëEpC⁄fig
(
CTRL_ENDPOINT_CONSUMER
, &
usb_ídpoöt_c⁄fig
);

1366 
dma_ch™√l_c⁄fig
.
size
 = 
max_∑ckë_size
;

1367 
dma_ch™√l_c⁄fig
.
cou¡
 = 2;

1368 
dma_ch™√l_c⁄fig
.
¥odSckId
 = 
PRODUCER_CTRL_SOCKET
;

1369 
dma_ch™√l_c⁄fig
.
c⁄sSckId
 = 
CTRL_COMM_PPORT_SOCKET
;

1370 
dma_ch™√l_c⁄fig
.
dmaMode
 = 
CY_U3P_DMA_MODE_BYTE
;

1371 
dma_ch™√l_c⁄fig
.
nŸifiˇti⁄
 = 0;

1372 
dma_ch™√l_c⁄fig
.
cb
 = 
NULL
;

1373 
dma_ch™√l_c⁄fig
.
¥odHódî
 = 0;

1374 
dma_ch™√l_c⁄fig
.
¥odFoŸî
 = 0;

1375 
dma_ch™√l_c⁄fig
.
c⁄sHódî
 = 0;

1376 
dma_ch™√l_c⁄fig
.
¥odAvaûCou¡
 = 0;

1378 
	`CyU3PDmaCh™√lCª©e
 (&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
,

1379 
CY_U3P_DMA_TYPE_AUTO
, &
dma_ch™√l_c⁄fig
);

1382 
dma_ch™√l_c⁄fig
.
¥odSckId
 = 
CTRL_RESP_PPORT_SOCKET
;

1383 
dma_ch™√l_c⁄fig
.
c⁄sSckId
 = 
CONSUMER_CTRL_SOCKET
;

1384 
dma_ch™√l_c⁄fig
.
cb
 = 
NULL
;

1385 
	`CyU3PDmaCh™√lCª©e
 (&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
,

1386 
CY_U3P_DMA_TYPE_AUTO
, &
dma_ch™√l_c⁄fig
);

1389 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_PRODUCER
);

1390 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_CONSUMER
);

1393 
	`CyU3PDmaCh™√lSëX„r
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

1394 
	`CyU3PDmaCh™√lSëX„r
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

1399 
g_≠p_ru¬ög
 = 
CyTrue
;

1400 
	}
}

1409 
	$evít_usb_ˇŒback
 (
CyU3PUsbEvítTy≥_t
 
evít_ty≥
, 
uöt16_t
 
evít_d©a
) {

1411 
evít_ty≥
) {

1412 
CY_U3P_USB_EVENT_SETCONF
:

1413 
	`msg
("USB_EVENT_SETCONF (#%d)", 
evít_d©a
);

1414 if(
g_≠p_ru¬ög
) {

1415 
	`b200_fw_°›
();

1418 
	`b200_fw_°¨t
();

1421 
CY_U3P_USB_EVENT_RESET
:

1422 
CY_U3P_USB_EVENT_DISCONNECT
:

1423 i‡(
evít_ty≥
 =
CY_U3P_USB_EVENT_RESET
)

1424 
	`msg
("USB_EVENT_RESET");

1426 
	`msg
("USB_EVENT_DISCONNECT");

1427 if(
g_≠p_ru¬ög
) {

1428 
	`b200_fw_°›
();

1432 
CY_U3P_USB_EVENT_CONNECT
:

1433 
	`msg
("USB_EVENT_CONNECT");

1436 
CY_U3P_USB_EVENT_SUSPEND
:

1437 
	`msg
("USB_EVENT_SUSPEND");

1440 
CY_U3P_USB_EVENT_RESUME
:

1442 
g_cou¡îs
.
ªsume_cou¡
++;

1445 
CY_U3P_USB_EVENT_SPEED
:

1446 
	`msg
("USB_EVENT_SPEED");

1449 
CY_U3P_USB_EVENT_SETINTF
:

1450 
	`msg
("USB_EVENT_SETINTF");

1453 
CY_U3P_USB_EVENT_SET_SEL
:

1454 
	`msg
("USB_EVENT_SET_SEL");

1457 
CY_U3P_USB_EVENT_SOF_ITP
:

1461 
CY_U3P_USB_EVENT_EP0_STAT_CPLT
:

1465 
CY_U3P_USB_EVENT_VBUS_VALID
:

1466 
	`msg
("USB_EVENT_VBUS_VALID");

1469 
CY_U3P_USB_EVENT_VBUS_REMOVED
:

1470 
	`msg
("USB_EVENT_VBUS_REMOVED");

1473 
CY_U3P_USB_EVENT_HOST_CONNECT
:

1474 
	`msg
("USB_EVENT_HOST_CONNECT");

1477 
CY_U3P_USB_EVENT_HOST_DISCONNECT
:

1478 
	`msg
("USB_EVENT_HOST_DISCONNECT");

1481 
CY_U3P_USB_EVENT_OTG_CHANGE
:

1482 
	`msg
("USB_EVENT_OTG_CHANGE");

1485 
CY_U3P_USB_EVENT_OTG_VBUS_CHG
:

1486 
	`msg
("USB_EVENT_OTG_VBUS_CHG");

1489 
CY_U3P_USB_EVENT_OTG_SRP
:

1490 
	`msg
("USB_EVENT_OTG_SRP");

1493 
CY_U3P_USB_EVENT_EP_UNDERRUN
:

1494 
	`LOCK
(
g_cou¡îs_lock
);

1495 ++
g_cou¡îs
.
usb_ï_undîrun_cou¡
;

1496 
	`UNLOCK
(
g_cou¡îs_lock
);

1498 
	`msg
("! USB_EVENT_EP_UNDERRUN o¿EP 0x%02x", 
evít_d©a
);

1501 
CY_U3P_USB_EVENT_LNK_RECOVERY
:

1502 
	`msg
("USB_EVENT_LNK_RECOVERY");

1504 #i‡(
CYFX_VERSION_MAJOR
 >1Ë&& (
CYFX_VERSION_MINOR
 >= 3)

1505 
CY_U3P_USB_EVENT_USB3_LNKFAIL
:

1506 
	`msg
("USB_EVENT_USB3_LNKFAIL");

1509 
CY_U3P_USB_EVENT_SS_COMP_ENTRY
:

1510 
	`msg
("USB_EVENT_SS_COMP_ENTRY");

1513 
CY_U3P_USB_EVENT_SS_COMP_EXIT
:

1514 
	`msg
("USB_EVENT_SS_COMP_EXIT");

1519 
	`msg
("! Unhandled USBÉvent");

1522 
	}
}

1535 
CyBoﬁ_t
 
	$usb_£tup_ˇŒback
(
uöt32_t
 
d©a0
, uöt32_à
d©a1
) {

1536 
STATIC_SAVER
 
uöt8_t
 
bReque°Ty≥
, 
bReque°
, 
bTy≥
, 
bT¨gë
, 
i2cAddr
;

1537 
STATIC_SAVER
 
uöt16_t
 
wVÆue
, 
wIndex
, 
wLígth
;

1539 
CyBoﬁ_t
 
h™dÀd
 = 
CyFÆ£
;

1542 
bReque°Ty≥
 = (
uöt8_t
)(
d©a0
 & 
CY_U3P_USB_REQUEST_TYPE_MASK
);

1543 
bTy≥
 = (
uöt8_t
)(
bReque°Ty≥
 & 
CY_U3P_USB_TYPE_MASK
);

1544 
bT¨gë
 = (
uöt8_t
)(
bReque°Ty≥
 & 
CY_U3P_USB_TARGET_MASK
);

1545 
bReque°
 = (
uöt8_t
)((
d©a0
 & 
CY_U3P_USB_REQUEST_MASK
Ë>> 
CY_U3P_USB_REQUEST_POS
);

1546 
wVÆue
 = (
uöt16_t
)((
d©a0
 & 
CY_U3P_USB_VALUE_MASK
Ë>> 
CY_U3P_USB_VALUE_POS
);

1547 
wIndex
 = (
uöt16_t
)((
d©a1
 & 
CY_U3P_USB_INDEX_MASK
Ë>> 
CY_U3P_USB_INDEX_POS
);

1548 
wLígth
 = (
uöt16_t
)((
d©a1
 & 
CY_U3P_USB_LENGTH_MASK
Ë>> 
CY_U3P_USB_LENGTH_POS
);

1550 if(
bTy≥
 =
CY_U3P_USB_STANDARD_RQT
) {

1554 if((
bT¨gë
 =
CY_U3P_USB_TARGET_INTF
) \

1555 && ((
bReque°
 =
CY_U3P_USB_SC_SET_FEATURE
) \

1556 || (
bReque°
 =
CY_U3P_USB_SC_CLEAR_FEATURE
)Ë&& (
wVÆue
 == 0)) {

1558 if(
g_≠p_ru¬ög
) {

1559 
	`CyU3PUsbAckSëup
();

1560 
	`msg
("ACK set/clear");

1562 
	`CyU3PUsbSèŒ
(0, 
CyTrue
, 
CyFÆ£
);

1563 
	`msg
("! STALL set/clear");

1566 
h™dÀd
 = 
CyTrue
;

1570 if((
bT¨gë
 =
CY_U3P_USB_TARGET_DEVICE
) \

1571 && (
bReque°
 =
CY_U3P_USB_SC_GET_DESCRIPTOR
) \

1572 && (
wVÆue
 =((
CY_U3P_USB_STRING_DESCR
 << 8) | 0xEE))) {

1574 if(
wLígth
 > 
b200_usb_¥odu˘_desc
[0]) {

1575 
wLígth
 = 
b200_usb_¥odu˘_desc
[0];

1580 
	`CyU3PUsbSídEP0D©a
(
wLígth
, ((
uöt8_t
 *Ë
b200_usb_¥odu˘_desc
));

1581 
h™dÀd
 = 
CyTrue
;

1594 if((
bT¨gë
 =
CY_U3P_USB_TARGET_ENDPT
) \

1595 && (
bReque°
 =
CY_U3P_USB_SC_CLEAR_FEATURE
)

1596 && (
wVÆue
 =
CY_U3P_USBX_FS_EP_HALT
)) {

1597 if(
g_≠p_ru¬ög
) {

1598 if(
wIndex
 =
DATA_ENDPOINT_PRODUCER
) {

1599 
	`CyU3PDmaCh™√lRe£t
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
);

1600 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_PRODUCER
);

1601 
	`CyU3PUsbRe£tEp
(
DATA_ENDPOINT_PRODUCER
);

1602 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_c⁄s_to_¥od_ch™_h™dÀ
, \

1603 
DMA_SIZE_INFINITE
);

1604 
	`CyU3PUsbSèŒ
(
wIndex
, 
CyFÆ£
, 
CyTrue
);

1605 
h™dÀd
 = 
CyTrue
;

1606 
	`CyU3PUsbAckSëup
();

1608 
	`msg
("Clear DATA_ENDPOINT_PRODUCER");

1611 if(
wIndex
 =
DATA_ENDPOINT_CONSUMER
) {

1612 
	`CyU3PDmaCh™√lRe£t
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
);

1613 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_CONSUMER
);

1614 
	`CyU3PUsbRe£tEp
(
DATA_ENDPOINT_CONSUMER
);

1615 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
, \

1616 
DMA_SIZE_INFINITE
);

1617 
	`CyU3PUsbSèŒ
(
wIndex
, 
CyFÆ£
, 
CyTrue
);

1618 
h™dÀd
 = 
CyTrue
;

1619 
	`CyU3PUsbAckSëup
();

1621 
	`msg
("Clear DATA_ENDPOINT_CONSUMER");

1624 if(
wIndex
 =
CTRL_ENDPOINT_PRODUCER
) {

1625 
	`CyU3PDmaCh™√lRe£t
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
);

1626 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_PRODUCER
);

1627 
	`CyU3PUsbRe£tEp
(
CTRL_ENDPOINT_PRODUCER
);

1628 
	`CyU3PDmaCh™√lSëX„r
(&
˘æ_c⁄s_to_¥od_ch™_h™dÀ
, \

1629 
DMA_SIZE_INFINITE
);

1630 
	`CyU3PUsbSèŒ
(
wIndex
, 
CyFÆ£
, 
CyTrue
);

1631 
h™dÀd
 = 
CyTrue
;

1632 
	`CyU3PUsbAckSëup
();

1634 
	`msg
("Clear CTRL_ENDPOINT_PRODUCER");

1637 if(
wIndex
 =
CTRL_ENDPOINT_CONSUMER
) {

1638 
	`CyU3PDmaCh™√lRe£t
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
);

1639 
	`CyU3PUsbFlushEp
(
CTRL_ENDPOINT_CONSUMER
);

1640 
	`CyU3PUsbRe£tEp
(
CTRL_ENDPOINT_CONSUMER
);

1641 
	`CyU3PDmaCh™√lSëX„r
(&
˘æ_¥od_to_c⁄s_ch™_h™dÀ
, \

1642 
DMA_SIZE_INFINITE
);

1643 
	`CyU3PUsbSèŒ
(
wIndex
, 
CyFÆ£
, 
CyTrue
);

1644 
h™dÀd
 = 
CyTrue
;

1645 
	`CyU3PUsbAckSëup
();

1647 
	`msg
("Clear CTRL_ENDPOINT_CONSUMER");

1654 if(
bReque°Ty≥
 & 
CY_U3P_USB_VENDOR_RQT
) {

1656 
h™dÀd
 = 
CyTrue
;

1657 
uöt16_t
 
ªad_cou¡
 = 0;

1659 
bReque°
) {

1660 
B200_VREQ_BITSTREAM_START
: {

1661 
	`CyU3PUsbGëEP0D©a
(1, 
g_víd‹_ªq_buf„r
, &
ªad_cou¡
);

1663 
g_Âga_¥ogømmög_wrôe_cou¡
 = 0;

1665 
	`CyU3PEvítSë
(&
g_evít_usb_c⁄fig
, 
EVENT_BITSTREAM_START
, \

1666 
CYU3P_EVENT_OR
);

1670 
B200_VREQ_BITSTREAM_DATA
: {

1671 
	`CyU3PUsbGëEP0D©a
(
g_víd‹_ªq_buff_size
, 
g_víd‹_ªq_buf„r
, \

1672 &
ªad_cou¡
);

1674 i‡(
g_fx3_°©e
 =
STATE_CONFIGURING_FPGA
) {

1675 ++
g_Âga_¥ogømmög_wrôe_cou¡
;

1676 
	`CyU3PSpiTønsmôW‹ds
(
g_víd‹_ªq_buf„r
, 
ªad_cou¡
);

1677 
	`CyU3PThªadSÀï
(1);

1682 
B200_VREQ_BITSTREAM_DATA_FILL
: {

1683 
	`CyU3PUsbGëEP0D©a
(
g_víd‹_ªq_buff_size
, 
g_víd‹_ªq_buf„r
, &
g_víd‹_ªq_ªad_cou¡
);

1687 
B200_VREQ_BITSTREAM_DATA_COMMIT
: {

1688  
•i_ªsu…
 = -1;

1689 i‡(
g_fx3_°©e
 =
STATE_CONFIGURING_FPGA
) {

1690 ++
g_Âga_¥ogømmög_wrôe_cou¡
;

1691 
•i_ªsu…
 = 
	`CyU3PSpiTønsmôW‹ds
(
g_víd‹_ªq_buf„r
, 
g_víd‹_ªq_ªad_cou¡
);

1692 
	`CyU3PThªadSÀï
(1);

1694 
	`CyU3PUsbSídEP0D©a
((
•i_ªsu…
), (
uöt8_t
*)&spi_result);

1698 
B200_VREQ_FPGA_CONFIG
: {

1699 
	`CyU3PUsbGëEP0D©a
(1, 
g_víd‹_ªq_buf„r
, &
ªad_cou¡
);

1701 
	`CyU3PEvítSë
(&
g_evít_usb_c⁄fig
, 
EVENT_FPGA_CONFIG
, 
CYU3P_EVENT_OR
);

1705 
B200_VREQ_GET_COMPAT
: {

1706 
	`CyU3PUsbSídEP0D©a
–(
com∑t_num
), compat_num);

1710 
B200_VREQ_SET_FPGA_HASH
: {

1711 
	`CyU3PUsbGëEP0D©a
(4, 
Âga_hash
, &
ªad_cou¡
);

1715 
B200_VREQ_GET_FPGA_HASH
: {

1716 
	`CyU3PUsbSídEP0D©a
–(
Âga_hash
), fpga_hash);

1720 
B200_VREQ_SET_FW_HASH
: {

1721 
	`CyU3PUsbGëEP0D©a
(4, 
fw_hash
, &
ªad_cou¡
);

1725 
B200_VREQ_GET_FW_HASH
: {

1726 
	`CyU3PUsbSídEP0D©a
–(
fw_hash
), fw_hash);

1730 
B200_VREQ_LOOP_CODE
: {

1731 
	`CyU3PUsbSídEP0D©a
(
g_víd‹_ªq_buff_size
, 
g_víd‹_ªq_buf„r
);

1735 
B200_VREQ_GET_LOG
: {

1736 
	`LOCK
(
g_log_lock
);

1738 i‡(
log_buf„r_Àn
 == 0) {

1739 
log_buf„r
[0] = '\0';

1740 
	`CyU3PUsbSídEP0D©a
(1, (
uöt8_t
*)
log_buf„r
);

1744 i‡(
log_buf„r_idx
 == 0)

1745 
	`CyU3PUsbSídEP0D©a
(
log_buf„r_Àn
, (
uöt8_t
*)
log_buf„r
);

1747 
Àn1
 = 
	`mö
(
LOG_BUFFER_SIZE
 - 
log_buf„r_idx
, 
log_buf„r_Àn
);

1748 
	`mem˝y
(
log_c⁄tiguous_buf„r
, 
log_buf„r
 + 
log_buf„r_idx
, 
Àn1
);

1750 i‡(
Àn1
 < 
log_buf„r_Àn
)

1751 
	`mem˝y
(
log_c⁄tiguous_buf„r
 + 
Àn1
, 
log_buf„r
, 
log_buf„r_Àn
 -Üen1);

1752 
	`CyU3PUsbSídEP0D©a
(
log_buf„r_Àn
, (
uöt8_t
*)
log_c⁄tiguous_buf„r
);

1758 
	`log_ª£t
();

1760 
	`UNLOCK
(
g_log_lock
);

1767 
B200_VREQ_GET_COUNTERS
: {

1768 
	`LOCK
(
g_cou¡îs_lock
);

1770 
	`CyU3PUsbSídEP0D©a
((
COUNTERS
), (
uöt8_t
*)&
g_cou¡îs
);

1772 
	`cou¡îs_auto_ª£t
();

1774 
	`UNLOCK
(
g_cou¡îs_lock
);

1781 
B200_VREQ_CLEAR_COUNTERS
: {

1782 
	`CyU3PUsbAckSëup
();

1785 
	`cou¡îs_dma_ª£t
();

1790 
B200_VREQ_GET_USB_EVENT_LOG
: {

1791 
uöt16_t
 
idx
 = 
	`CyU3PUsbGëEvítLogIndex
();

1792 i‡(
idx
 > (
USB_EVENT_LOG_SIZE
-1)) {

1793 
	`msg
("! USBÉvíàlog idx = %i", ()
idx
);

1797 
uöt16_t
 
Àn
 = 0;

1798 i‡(
idx
 < 
g_œ°_usb_evít_log_ödex
) {

1799 
uöt16_t
 
Àn1
 = (
USB_EVENT_LOG_SIZE
 - 
g_œ°_usb_evít_log_ödex
);

1800 i‡(
Àn1
 > (
USB_EVENT_LOG_SIZE
-1)) {

1801 
	`msg
("! USBÉvíàlogÜí 2.1 = %i", ()
Àn1
);

1804 
Àn
 = 
Àn1
 + 
idx
;

1805 i‡(
Àn
 > (
USB_EVENT_LOG_SIZE
-1)) {

1806 
	`msg
("! USBÉvíàlogÜí 2.2 = %i", ()
Àn
);

1809 
	`mem˝y
(
g_usb_evít_log_c⁄tiguous_buf
, 
g_usb_evít_log
 + 
g_œ°_usb_evít_log_ödex
, 
Àn1
);

1810 
	`mem˝y
(
g_usb_evít_log_c⁄tiguous_buf
 + 
Àn1
, 
g_usb_evít_log
, 
idx
);

1813 
Àn
 = 
idx
 - 
g_œ°_usb_evít_log_ödex
;

1814 i‡(
Àn
 > (
USB_EVENT_LOG_SIZE
-1)) {

1815 
	`msg
("! USBÉvíàlogÜí 1 = %i", ()
Àn
);

1818 i‡(
Àn
 > 0) {

1819 
	`mem˝y
(
g_usb_evít_log_c⁄tiguous_buf
, 
g_usb_evít_log
 + 
g_œ°_usb_evít_log_ödex
, 
Àn
);

1825 
	`CyU3PUsbSídEP0D©a
(
Àn
, 
g_usb_evít_log_c⁄tiguous_buf
);

1827 
g_œ°_usb_evít_log_ödex
 = 
idx
;

1831 
B200_VREQ_SET_CONFIG
: {

1832 
	`CyU3PUsbGëEP0D©a
((
CONFIG_MOD
), (
uöt8_t
*)
g_víd‹_ªq_buf„r
, &
ªad_cou¡
);

1833 i‡(
ªad_cou¡
 =(
CONFIG_MOD
)) {

1834 
	`mem˝y
(&
g_c⁄fig_mod
, 
g_víd‹_ªq_buf„r
, (
CONFIG_MOD
));

1835 
	`CyU3PEvítSë
(&
g_evít_usb_c⁄fig
, 
EVENT_RE_ENUM
, 
CYU3P_EVENT_OR
);

1840 
B200_VREQ_GET_CONFIG
: {

1841 
	`CyU3PUsbSídEP0D©a
((
g_c⁄fig
), (
uöt8_t
*)&g_config);

1845 
B200_VREQ_WRITE_SB
: {

1846 
	`CyU3PUsbGëEP0D©a
(
g_víd‹_ªq_buff_size
, (
uöt8_t
*)
g_víd‹_ªq_buf„r
, &
ªad_cou¡
);

1847 #ifde‡
ENABLE_FPGA_SB


1848 
uöt16_t
 
i
;

1849 
	`LOCK
(
g_su¨t_lock
);

1850 
i
 = 0; i < 
ªad_cou¡
; ++i)

1851 
	`sb_wrôe
(
SUART_TXCHAR
, 
g_víd‹_ªq_buf„r
[
i
]);

1852 
	`UNLOCK
(
g_su¨t_lock
);

1854 
	`msg
("WrŸê%d SB ch¨s", 
ªad_cou¡
);

1856 
	`msg
("SB is disabled");

1861 
B200_VREQ_SET_SB_BAUD_DIV
: {

1862 
uöt16_t
 
div
;

1863 
	`CyU3PUsbGëEP0D©a
((
div
), (
uöt8_t
*)&div, &
ªad_cou¡
);

1865 i‡(
ªad_cou¡
 =(
div
)) {

1866 #ifde‡
ENABLE_FPGA_SB


1867 
	`LOCK
(
g_su¨t_lock
);

1868 
	`sb_wrôe
(
SUART_CLKDIV
, 
div
);

1869 
	`UNLOCK
(
g_su¨t_lock
);

1870 
	`msg
("SUART_CLKDIV = %d", 
div
);

1871  
g_c⁄fig
.
sb_baud_div
 = 
div
;

1873 
	`msg
("SB is disabled");

1877 
	`msg
("! SUART_CLKDIVÑe˚ived %d byãs", 
ªad_cou¡
);

1882 
B200_VREQ_FLUSH_DATA_EPS
: {

1898 i‡(
	`CyU3PDmaCh™√lRe£t
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
Ë!
CY_U3P_SUCCESS
)

1900 
	`msg
("! CyU3PDmaChannelReset");

1903 
	`CyU3PUsbFlushEp
(
DATA_ENDPOINT_CONSUMER
);

1909 
	`CyU3PDmaCh™√lSëX„r
(&
d©a_¥od_to_c⁄s_ch™_h™dÀ
, 
DMA_SIZE_INFINITE
);

1919 
	`CyU3PUsbAckSëup
();

1924 
B200_VREQ_EEPROM_WRITE
: {

1925 
i2cAddr
 = 0xA0 | ((
wVÆue
 & 0x0007) << 1);

1926 
	`CyU3PUsbGëEP0D©a
(((
wLígth
 + 15Ë& 0xFFF0), 
g_víd‹_ªq_buf„r
, 
NULL
);

1928 
	`CyFxUsbI2cTøns„r
 (
wIndex
, 
i2cAddr
, 
wLígth
,

1929 
g_víd‹_ªq_buf„r
, 
CyFÆ£
);

1933 
B200_VREQ_EEPROM_READ
: {

1934 
i2cAddr
 = 0xA0 | ((
wVÆue
 & 0x0007) << 1);

1935 
	`CyU3PMemSë
 (
g_víd‹_ªq_buf„r
, 0,  (g_vendor_req_buffer));

1936 
	`CyFxUsbI2cTøns„r
 (
wIndex
, 
i2cAddr
, 
wLígth
,

1937 
g_víd‹_ªq_buf„r
, 
CyTrue
);

1939 
	`CyU3PUsbSídEP0D©a
(
wLígth
, 
g_víd‹_ªq_buf„r
);

1943 
B200_VREQ_TOGGLE_FPGA_RESET
: {

1944 
	`CyU3PUsbGëEP0D©a
(
g_víd‹_ªq_buff_size
, 
g_víd‹_ªq_buf„r
, \

1945 &
ªad_cou¡
);

1952 
B200_VREQ_TOGGLE_GPIF_RESET
: {

1953 
	`CyU3PUsbGëEP0D©a
(
g_víd‹_ªq_buff_size
, 
g_víd‹_ªq_buf„r
, \

1954 &
ªad_cou¡
);

1956 
	`ª£t_gpif
();

1960 
B200_VREQ_RESET_DEVICE
: {

1961 
	`CyU3PUsbGëEP0D©a
(4, 
g_víd‹_ªq_buf„r
, &
ªad_cou¡
);

1963 
	`CyU3PDevi˚Re£t
(
CyFÆ£
);

1967 
B200_VREQ_GET_USB_SPEED
: {

1968 
CyU3PUSBS≥ed_t
 
usb_•ìd
 = 
	`CyU3PUsbGëS≥ed
();

1969 
usb_•ìd
) {

1970 
CY_U3P_SUPER_SPEED
:

1971 
g_víd‹_ªq_buf„r
[0] = 3;

1974 
CY_U3P_FULL_SPEED
:

1975 
CY_U3P_HIGH_SPEED
:

1976 
g_víd‹_ªq_buf„r
[0] = 2;

1980 
g_víd‹_ªq_buf„r
[0] = 1;

1984 
	`CyU3PUsbSídEP0D©a
(1, 
g_víd‹_ªq_buf„r
);

1988 
B200_VREQ_GET_STATUS
: {

1989 
g_víd‹_ªq_buf„r
[0] = 
g_fx3_°©e
;

1990 
	`CyU3PUsbSídEP0D©a
(1, 
g_víd‹_ªq_buf„r
);

1995 
	`msg
("! Unknow¿VREQ %02X", (
uöt32_t
)
bReque°
);

1996 
h™dÀd
 = 
CyFÆ£
;

2000 
	`CyU3PUsbFlushEp
(
VREQ_ENDPOINT_PRODUCER
);

2001 
	`CyU3PUsbFlushEp
(
VREQ_ENDPOINT_CONSUMER
);

2004  
h™dÀd
;

2005 
	}
}

2016 
CyBoﬁ_t
 
	$Õm_ªque°_ˇŒback
(
CyU3PUsbLökPowîMode
 
lök_mode
) {

2017 
	`msg
("!Üpm_ªque°_ˇŒback = %i", 
lök_mode
);

2020 
CyFÆ£
;

2024 
	}
}

2028 
	$gpif_îr‹_cb
(
CyU3PPibI¡rTy≥
 
cbTy≥
, 
uöt16_t
 
cbArg
)

2030 i‡(
cbTy≥
==
CYU3P_PIB_INTR_ERROR
)

2032 
	`CYU3P_GET_PIB_ERROR_TYPE
(
cbArg
))

2034 
CYU3P_PIB_ERR_NONE
:

2036 
CYU3P_PIB_ERR_THR0_WR_OVERRUN
:

2037 
	`msg
("CYU3P_PIB_ERR_THR0_WR_OVERRUN");

2039 
CYU3P_PIB_ERR_THR1_WR_OVERRUN
:

2040 
	`msg
("CYU3P_PIB_ERR_THR1_WR_OVERRUN");

2042 
CYU3P_PIB_ERR_THR2_WR_OVERRUN
:

2043 
	`msg
("CYU3P_PIB_ERR_THR2_WR_OVERRUN");

2045 
CYU3P_PIB_ERR_THR3_WR_OVERRUN
:

2046 
	`msg
("CYU3P_PIB_ERR_THR3_WR_OVERRUN");

2048 
CYU3P_PIB_ERR_THR0_RD_UNDERRUN
:

2049 
	`msg
("CYU3P_PIB_ERR_THR0_RD_UNDERRUN");

2051 
CYU3P_PIB_ERR_THR1_RD_UNDERRUN
:

2052 
	`msg
("CYU3P_PIB_ERR_THR1_RD_UNDERRUN");

2054 
CYU3P_PIB_ERR_THR2_RD_UNDERRUN
:

2055 
	`msg
("CYU3P_PIB_ERR_THR2_RD_UNDERRUN");

2057 
CYU3P_PIB_ERR_THR3_RD_UNDERRUN
:

2058 
	`msg
("CYU3P_PIB_ERR_THR3_RD_UNDERRUN");

2060 
CYU3P_PIB_ERR_THR0_ADAP_UNDERRUN
:

2061 
	`msg
("CYU3P_PIB_ERR_THR0_ADAP_UNDERRUN");

2063 
CYU3P_PIB_ERR_THR1_ADAP_OVERRUN
:

2064 
	`msg
("CYU3P_PIB_ERR_THR1_ADAP_OVERRUN");

2067 
CYU3P_PIB_ERR_THR1_SCK_INACTIVE
:

2069 ++
g_cou¡îs
.
pib_cou¡îs
[1].
sockë_öa˘ive
;

2072 
	`msg
("Unknow¿CYU3P_PIB_ERR %i", 
	`CYU3P_GET_PIB_ERROR_TYPE
(
cbArg
));

2076 
	`CYU3P_GET_GPIF_ERROR_TYPE
(
cbArg
))

2078 
CYU3P_GPIF_ERR_NONE
:

2081 
CYU3P_GPIF_ERR_INADDR_OVERWRITE
:

2082 
	`msg
("CYU3P_GPIF_ERR_INADDR_OVERWRITE");

2084 
CYU3P_GPIF_ERR_EGADDR_INVALID
:

2085 
	`msg
("CYU3P_GPIF_ERR_EGADDR_INVALID");

2087 
CYU3P_GPIF_ERR_DATA_READ_ERR
:

2088 
	`msg
("CYU3P_GPIF_ERR_DATA_READ_ERR");

2090 
CYU3P_GPIF_ERR_DATA_WRITE_ERR
:

2091 
	`msg
("CYU3P_GPIF_ERR_DATA_WRITE_ERR");

2093 
CYU3P_GPIF_ERR_ADDR_READ_ERR
:

2094 
	`msg
("CYU3P_GPIF_ERR_ADDR_READ_ERR");

2096 
CYU3P_GPIF_ERR_ADDR_WRITE_ERR
:

2097 
	`msg
("CYU3P_GPIF_ERR_ADDR_WRITE_ERR");

2099 
CYU3P_GPIF_ERR_INVALID_STATE
:

2101 ++
g_cou¡îs
.
övÆid_gpif_°©e
;

2104 
	`msg
("Unknow¿CYU3P_GPIF_ERR %i", 
	`CYU3P_GET_GPIF_ERROR_TYPE
(
cbArg
));

2108 
	}
}

2111 
	$GpifSèãCh™geCb
(
uöt8_t
 
°©eId
)

2114 ++
g_cou¡îs
.
°©e_å™sôi⁄_cou¡
;

2115 
	}
}

2123 
	$b200_gpif_öô
() {

2124 
	`msg
("b200_gpif_init");

2126 
CyU3PPibClock_t
 
pib_˛ock_c⁄fig
;

2129 
pib_˛ock_c⁄fig
.
˛kDiv
 = 2;

2130 
pib_˛ock_c⁄fig
.
˛kSrc
 = 
CY_U3P_SYS_CLK
;

2131 
pib_˛ock_c⁄fig
.
isHÆfDiv
 = 
CyFÆ£
;

2132 
pib_˛ock_c⁄fig
.
isDŒE«bÀ
 = 
CyFÆ£
;

2133 i‡(
	`CyU3PPibInô
(
CyTrue
, &
pib_˛ock_c⁄fig
Ë!
CY_U3P_SUCCESS
)

2134 
	`msg
("! CyU3PPibInit");

2137 i‡(
	`CyU3PGpifLﬂd
(&
CyFxGpifC⁄fig
Ë!
CY_U3P_SUCCESS
)

2138 
	`msg
("! CyU3PGpifLoad");

2140 
	`msg
("GPIFÜoaded");

2148 i‡(
	`CyU3PGpifSockëC⁄figuª
(0, 
DATA_TX_PPORT_SOCKET
, 5, 
CyFÆ£
, 1Ë!
CY_U3P_SUCCESS
)

2149 
	`msg
("! CyU3PGpifSocketConfigure 0");

2150 i‡(
	`CyU3PGpifSockëC⁄figuª
(1, 
DATA_RX_PPORT_SOCKET
, 6, 
CyFÆ£
, 1Ë!
CY_U3P_SUCCESS
)

2151 
	`msg
("! CyU3PGpifSocketConfigure 1");

2152 i‡(
	`CyU3PGpifSockëC⁄figuª
(2, 
CTRL_COMM_PPORT_SOCKET
, 5, 
CyFÆ£
, 1Ë!
CY_U3P_SUCCESS
)

2153 
	`msg
("! CyU3PGpifSocketConfigure 2");

2154 i‡(
	`CyU3PGpifSockëC⁄figuª
(3, 
CTRL_RESP_PPORT_SOCKET
, 6, 
CyFÆ£
, 1Ë!
CY_U3P_SUCCESS
)

2155 
	`msg
("! CyU3PGpifSocketConfigure 3");

2160 
	`CyU3PPibRegi°îCÆlback
(
gpif_îr‹_cb
, 
CYU3P_PIB_INTR_ERROR
);

2161 
	}
}

2169 
CyU3PRëu∫Sètus_t
 
	$b200_•i_öô
() {

2170 
	`msg
("b200_spi_init");

2172 
CyU3PSpiC⁄fig_t
 
•iC⁄fig
;

2175 
	`CyU3PSpiInô
();

2180 
	`CyU3PMemSë
 ((
uöt8_t
 *)&
•iC⁄fig
, 0, (spiConfig));

2181 
•iC⁄fig
.
isLsbFú°
 = 
CyFÆ£
;

2182 
•iC⁄fig
.
˝ﬁ
 = 
CyFÆ£
;

2183 
•iC⁄fig
.
˝ha
 = 
CyFÆ£
;

2184 
•iC⁄fig
.
s¢Pﬁ
 = 
CyTrue
;

2185 
•iC⁄fig
.
ÀadTime
 = 
CY_U3P_SPI_SSN_LAG_LEAD_HALF_CLK
;

2186 
•iC⁄fig
.
œgTime
 = 
CY_U3P_SPI_SSN_LAG_LEAD_HALF_CLK
;

2187 
•iC⁄fig
.
s¢Cål
 = 
CY_U3P_SPI_SSN_CTRL_FW
;

2188 
•iC⁄fig
.
˛ock
 = 20000000;

2189 
•iC⁄fig
.
w‹dLí
 = 8;

2191 
CyU3PRëu∫Sètus_t
 
ªs
 = 
	`CyU3PSpiSëC⁄fig
(&
•iC⁄fig
, 
NULL
);

2193 i‡(
ªs
 !
CY_U3P_SUCCESS
)

2194 
	`msg
("! CyU3PSpiSetConfig");

2196  
ªs
;

2197 
	}
}

2205 
	$b200_usb_öô
() {

2209 
	`CyFxI2cInô
(
CY_FX_USBI2C_I2C_PAGE_SIZE
);

2212 
	`CyU3PUsbSèπ
();

2218 
	`CyU3PUsbRegi°îSëupCÆlback
(
usb_£tup_ˇŒback
, 
CyTrue
);

2220 
	`CyU3PUsbRegi°îEvítCÆlback
(
evít_usb_ˇŒback
);

2222 
	`CyU3PUsbRegi°îLPMReque°CÆlback
(
Õm_ªque°_ˇŒback
);

2225 
uöt8_t
 
vÆid
[4];

2226 
uöt8_t
 
vidpid
[4];

2227 
	`CyU3PMemSë
(
vÆid
, 0, 4);

2228 
	`CyFxUsbI2cTøns„r
(0x0, 0xA0, 4, 
vÆid
, 
CyTrue
);

2229 if(*((
uöt32_t
 *Ë&(
vÆid
[0])) == 0xB2145943) {

2234 
	`CyU3PMemSë
(
vidpid
, 0, 4);

2235 
	`CyFxUsbI2cTøns„r
(0x4, 0xA0, 4, 
vidpid
, 
CyTrue
);

2236 
b200_usb2_dev_desc
[8] = 
vidpid
[2];

2237 
b200_usb2_dev_desc
[9] = 
vidpid
[3];

2238 
b200_usb2_dev_desc
[10] = 
vidpid
[0];

2239 
b200_usb2_dev_desc
[11] = 
vidpid
[1];

2241 
b200_usb3_dev_desc
[8] = 
vidpid
[2];

2242 
b200_usb3_dev_desc
[9] = 
vidpid
[3];

2243 
b200_usb3_dev_desc
[10] = 
vidpid
[0];

2244 
b200_usb3_dev_desc
[11] = 
vidpid
[1];

2256 
uöt8_t
 *
m‰_°rög
 = 
NULL
;

2257 
uöt8_t
 *
¥odu˘_°rög
 = 
NULL
;

2258 if((
vidpid
[3] == 0x25) && (vidpid[2] == 0x00)) {

2259 
m‰_°rög
 = 
b200_usb_m™uÁ˘uª_desc
;

2260 
¥odu˘_°rög
 = 
b200_usb_¥odu˘_desc
;

2261 } if((
vidpid
[3] == 0x39) && (vidpid[2] == 0x23)) {

2262 
m‰_°rög
 = 
niu§p_usb_m™uÁ˘uª_desc
;

2264 if((
vidpid
[1] == 0x78) && (vidpid[0] == 0x13)) {

2265 
¥odu˘_°rög
 = 
niu§p_2900_usb_¥odu˘_desc
;

2266 } if((
vidpid
[1] == 0x78) && (vidpid[0] == 0x14)) {

2267 
¥odu˘_°rög
 = 
niu§p_2901_usb_¥odu˘_desc
;

2269 
¥odu˘_°rög
 = 
unknown_desc
;

2272 
m‰_°rög
 = 
unknown_desc
;

2273 
¥odu˘_°rög
 = 
unknown_desc
;

2276 
uöt8_t
 
ascii_£rül
[9];

2277 
	`CyU3PMemSë
(
ascii_£rül
, 0, 9);

2278 
	`CyFxUsbI2cTøns„r
(0x4f7, 0xA0, 9, 
ascii_£rül
, 
CyTrue
);

2279 
uöt8_t
 
cou¡
;

2280 
dev_£rül
[0] = 2;

2281 
cou¡
 = 0; count < 9; count++) {

2282 
uöt8_t
 
byã
 = 
ascii_£rül
[
cou¡
];

2283 i‡(
byã
 < 32 || byte > 127) ;

2284 
dev_£rül
[2 + (
cou¡
 * 2)] = 
byã
;

2286 
dev_£rül
[0] += 2;

2293 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_HS_DEVICE_DESCR
, 0,

2294 (
uöt8_t
 *Ë
b200_usb2_dev_desc
);

2296 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_SS_DEVICE_DESCR
, 0,

2297 (
uöt8_t
 *Ë
b200_usb3_dev_desc
);

2300 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_DEVQUAL_DESCR
, 0,

2301 (
uöt8_t
 *Ë
b200_dev_quÆ_desc
);

2304 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_HS_CONFIG_DESCR
, 0,

2305 (
uöt8_t
 *Ë
b200_usb_hs_c⁄fig_desc
);

2307 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_FS_CONFIG_DESCR
, 0,

2308 (
uöt8_t
 *Ë
b200_usb_fs_c⁄fig_desc
);

2310 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_SS_CONFIG_DESCR
, 0,

2311 (
uöt8_t
 *Ë
b200_usb_ss_c⁄fig_desc
);

2314 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_SS_BOS_DESCR
, 0,

2315 (
uöt8_t
 *Ë
b200_usb_bos_desc
);

2318 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_STRING_DESCR
, 0,

2319 (
uöt8_t
 *Ë
b200_°rög_œng_id_desc
);

2321 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_STRING_DESCR
, 1,

2322 (
uöt8_t
 *Ë
m‰_°rög
);

2324 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_STRING_DESCR
, 2,

2325 (
uöt8_t
 *Ë
¥odu˘_°rög
);

2327 
	`CyU3PUsbSëDesc
(
CY_U3P_USB_SET_STRING_DESCR
, 3,

2328 (
uöt8_t
 *Ë
dev_£rül
);

2334 c⁄° 
uöt32_t
 
tx_swög
 = 
g_c⁄fig
.tx_swing ;

2335 i‡(
	`CyU3PUsbSëTxSwög
(
tx_swög
Ë=
CY_U3P_SUCCESS
)

2336 
	`msg
("CyU3PUsbSëTxSwög: %d", 
tx_swög
);

2338 
	`msg
("! CyU3PUsbSëTxSwög: %d", 
tx_swög
);

2343 i‡(
	`CyU3PC⁄√˘Sèã
(
CyTrue
, (
g_c⁄fig
.
íabÀ_as_su≥r•ìd
 !0 ? CyTruê: 
CyFÆ£
)Ë=
CY_U3P_SUCCESS
) {

2344 
CyU3PUSBS≥ed_t
 
usb_•ìd
 = 
	`CyU3PUsbGëS≥ed
();

2345 
	`msg
("Lök u∞(•ìd: USB %d)", ()
usb_•ìd
);

2348 
	`msg
("! FailedÅoÉstablishÜink");

2349 
	}
}

2352 
	$b200_ª°‹e_gpio_f‹_Âga_c⁄fig
() {

2353 
	`CyU3PDevi˚GpioRe°‹e
(
GPIO_FPGA_RESET
);

2354 
	`CyU3PDevi˚GpioRe°‹e
(
GPIO_DONE
);

2356 
	`CyU3PDevi˚GpioRe°‹e
(
GPIO_FX3_SCLK
);

2357 
	`CyU3PDevi˚GpioRe°‹e
(
GPIO_FX3_CE
);

2358 
	`CyU3PDevi˚GpioRe°‹e
(
GPIO_FX3_MISO
);

2359 
	`CyU3PDevi˚GpioRe°‹e
(
GPIO_FX3_MOSI
);

2362 
	}
}

2364 
	$thªad_Âga_c⁄fig_íåy
(
uöt32_t
 
öput
) {

2365 
uöt32_t
 
evít_Êag
;

2372 if(
	`CyU3PEvítGë
(&
g_evít_usb_c⁄fig
, \

2373 (
EVENT_FPGA_CONFIG
), 
CYU3P_EVENT_AND_CLEAR
, \

2374 &
evít_Êag
, 
CYU3P_WAIT_FOREVER
Ë=
CY_U3P_SUCCESS
) {

2377 
uöt32_t
 
ﬁd_Âga_¥ogømmög_wrôe_cou¡
 = 0;

2379 if(
g_fx3_°©e
 =
STATE_ERROR
) {

2380 
	`CyU3PThªadRñöquish
();

2384 if(
g_fx3_°©e
 =
STATE_RUNNING
) {

2387 
	`b200_ª°‹e_gpio_f‹_Âga_c⁄fig
();

2388 
	`CyU3PGpifDißbÀ
(
CyTrue
);

2391 
	`CyU3PSysW©chDogCÀ¨
();

2393 
g_fx3_°©e
 = 
STATE_BUSY
;

2396 
	`b200_gpios_¥e_Âga_c⁄fig
();

2398 
	`CyU3PSysW©chDogCÀ¨
();

2401 
	`b200_•i_öô
();

2403 
	`CyU3PSysW©chDogCÀ¨
();

2406 
uöt32_t
 
waô_cou¡
 = 0;

2409 
g_fx3_°©e
 = 
STATE_FPGA_READY
;

2411 
	`msg
("Begin FPGA");

2414 
	`CyU3PEvítGë
(&
g_evít_usb_c⁄fig
, \

2415 (
EVENT_BITSTREAM_START
), 
CYU3P_EVENT_AND_CLEAR
, \

2416 &
evít_Êag
, 
CYU3P_NO_WAIT
Ë!
CY_U3P_SUCCESS
) {

2418 if(
waô_cou¡
 >
FPGA_PROGRAMMING_BITSTREAM_START_POLL_COUNT
) {

2419 
	`msg
("! Bitstream didn't start");

2420 
g_fx3_°©e
 = 
STATE_UNCONFIGURED
;

2421 
	`CyU3PThªadRñöquish
();

2425 
waô_cou¡
++;

2426 
	`CyU3PThªadSÀï
(
FPGA_PROGRAMMING_POLL_SLEEP
);

2427 
	`CyU3PSysW©chDogCÀ¨
();

2430 i‡(
waô_cou¡
 >
FPGA_PROGRAMMING_BITSTREAM_START_POLL_COUNT
)

2434 
	`CyU3PGpioSëVÆue
(
GPIO_PROGRAM_B
, 0);

2435 
	`CyU3PThªadSÀï
(20);

2436 
	`CyU3PGpioSëVÆue
(
GPIO_PROGRAM_B
, 1);

2439 
waô_cou¡
 = 0;

2441 
	`msg
("Wait FPGA");

2443 
	`CyU3PEvítGë
(&
g_evít_usb_c⁄fig
, \

2444 (
EVENT_GPIO_INITB_RISE
), 
CYU3P_EVENT_AND_CLEAR
, \

2445 &
evít_Êag
, 
CYU3P_NO_WAIT
Ë!
CY_U3P_SUCCESS
) {

2447 if(
waô_cou¡
 >
FPGA_PROGRAMMING_INITB_POLL_COUNT
) {

2448 
	`msg
("! INITB didn'tÑise");

2449 
g_fx3_°©e
 = 
STATE_UNCONFIGURED
;

2450 
	`CyU3PThªadRñöquish
();

2454 
waô_cou¡
++;

2455 
	`CyU3PThªadSÀï
(
FPGA_PROGRAMMING_POLL_SLEEP
);

2456 
	`CyU3PSysW©chDogCÀ¨
();

2458 #ifde‡
ENABLE_INIT_B_WORKAROUND


2459 i‡(
waô_cou¡
 >
FPGA_PROGRAMMING_INITB_POLL_COUNT
)

2461 
CyBoﬁ_t
 
gpio_öô_b
;

2462 
	`CyU3PGpioGëVÆue
(
GPIO_INIT_B
, &
gpio_öô_b
);

2463 i‡(
gpio_öô_b
 =
CyTrue
)

2465 
waô_cou¡
 = 0;

2469 
	`msg
("! INIT_B stillÇot high");

2473 i‡(
waô_cou¡
 >
FPGA_PROGRAMMING_INITB_POLL_COUNT
)

2477 
waô_cou¡
 = 0;

2478 
g_fx3_°©e
 = 
STATE_CONFIGURING_FPGA
;

2480 
	`msg
("Configuring FPGA");

2484 
	`CyU3PEvítGë
(&
g_evít_usb_c⁄fig
, \

2485 (
EVENT_GPIO_DONE_HIGH
), 
CYU3P_EVENT_AND_CLEAR
, \

2486 &
evít_Êag
, 
CYU3P_NO_WAIT
Ë!
CY_U3P_SUCCESS
) {

2492 if(
waô_cou¡
 >
FPGA_PROGRAMMING_DONE_POLL_COUNT
) {

2493 
	`msg
("! DONE didn't go high");

2494 
g_fx3_°©e
 = 
STATE_UNCONFIGURED
;

2495 
	`CyU3PThªadRñöquish
();

2499 i‡(
ﬁd_Âga_¥ogømmög_wrôe_cou¡
 =
g_Âga_¥ogømmög_wrôe_cou¡
)

2500 
waô_cou¡
++;

2502 
waô_cou¡
 = 0;

2503 
ﬁd_Âga_¥ogømmög_wrôe_cou¡
 = 
g_Âga_¥ogømmög_wrôe_cou¡
;

2506 
	`CyU3PThªadSÀï
(
FPGA_PROGRAMMING_POLL_SLEEP
);

2507 
	`CyU3PSysW©chDogCÀ¨
();

2509 #ifde‡
ENABLE_DONE_WORKAROUND


2510 i‡(
waô_cou¡
 >
FPGA_PROGRAMMING_DONE_POLL_COUNT
)

2512 
CyBoﬁ_t
 
gpio_d⁄e
;

2513 
	`CyU3PGpioGëVÆue
(
GPIO_DONE
, &
gpio_d⁄e
);

2514 i‡(
gpio_d⁄e
 =
CyTrue
)

2516 
waô_cou¡
 = 0;

2520 
	`msg
("! DONE stillÇot high");

2524 i‡(
waô_cou¡
 >
FPGA_PROGRAMMING_DONE_POLL_COUNT
)

2527 
	`msg
("FPGA done");

2530 
g_fx3_°©e
 = 
STATE_BUSY
;

2532 
	`CyU3PSysW©chDogCÀ¨
();

2536 
	`CyU3PSpiDeInô
();

2537 
	`b200_ª°‹e_gpio_f‹_Âga_c⁄fig
();

2539 
	`CyU3PSysW©chDogCÀ¨
();

2542 
	`b200_¶fifo_mode_gpio_c⁄fig
();

2547 
	`CyU3PSysW©chDogCÀ¨
();

2551 
	`b200_gpif_öô
();

2553 
	`CyU3PThªadSÀï
(1);

2554 
	`b200_°¨t_Âga_sb_gpio
();

2557 
g_fx3_°©e
 = 
STATE_RUNNING
;

2559 
	`msg
("Running");

2562 
	`CyU3PThªadRñöquish
();

2564 
	}
}

2575 
	$thªad_maö_≠p_íåy
(
uöt32_t
 
öput
) {

2580 
	`CyU3PSysW©chDogCÀ¨
();

2581 
	`CyU3PThªadSÀï
(
CHECK_POWER_STATE_SLEEP_TIME
);

2582 #ifde‡
PREVENT_LOW_POWER_MODE


2588 
CyU3PUsbLökPowîMode
 
cuºít_°©e
;

2590 if((
	`CyU3PUsbGëS≥ed
 (Ë=
CY_U3P_SUPER_SPEED
)) {

2593 
	`CyU3PUsbGëLökPowîSèã
(&
cuºít_°©e
);

2595 i‡(
cuºít_°©e
 > 
CyU3PUsbLPM_U3
)

2596 
	`msg
("Powî sèã %i", 
cuºít_°©e
);

2598 (
cuºít_°©e
 >
CyU3PUsbLPM_U1
) \

2599 && (
cuºít_°©e
 <
CyU3PUsbLPM_U3
)) {

2601 
	`msg
("! LPS = %i", 
cuºít_°©e
);

2603 
	`CyU3PUsbSëLökPowîSèã
(
CyU3PUsbLPM_U0
);

2604 
	`CyU3PThªadSÀï
(1);

2606 i‡(
	`CyU3PUsbGëS≥ed
 (Ë!
CY_U3P_SUPER_SPEED
)

2609 
	`CyU3PUsbGëLökPowîSèã
 (&
cuºít_°©e
);

2615 
	}
}

2617 
uöt16_t
 
	gg_pﬁl_œ°_phy_îr‹_cou¡
 = 0, 
	gg_pﬁl_œ°_lök_îr‹_cou¡
 = 0;

2618 
uöt32_t
 
	gg_pﬁl_œ°_phy_îr‹_°©us
 = 0;

2620 
	$upd©e_îr‹_cou¡îs
() {

2621 i‡(
	`CyU3PUsbGëS≥ed
 (Ë!
CY_U3P_SUPER_SPEED
)

2624 
uvöt32_t
 
ªg
 = 
REG_LNK_PHY_ERROR_STATUS
;

2625 
uöt32_t
 
vÆ
 = 0;

2626 i‡(
	`CyU3PRódDevi˚Regi°îs
((
uvöt32_t
*)
ªg
, 1, &
vÆ
Ë=
CY_U3P_SUCCESS
) {

2627 
g_pﬁl_œ°_phy_îr‹_°©us
 |(
vÆ
 & 
PHYERR_MASK
);

2630 
uöt32_t
 
zîo
 = 
PHYERR_MASK
;

2631 i‡(
	`CyU3PWrôeDevi˚Regi°îs
((
uvöt32_t
*)
ªg
, 1, &
zîo
Ë!
CY_U3P_SUCCESS
)

2632 
	`msg
("! CyU3PWriteDeviceRegisters");

2636 
	`msg
("! RegÑead fail");

2644 
uöt16_t
 
phy_îr‹_cou¡
 = 0, 
lök_îr‹_cou¡
 = 0;

2645 i‡(
	`CyU3PUsbGëEº‹Cou¡s
(&
phy_îr‹_cou¡
, &
lök_îr‹_cou¡
Ë=
CY_U3P_SUCCESS
) {

2646 
g_pﬁl_œ°_phy_îr‹_cou¡
 +
phy_îr‹_cou¡
;

2647 
g_pﬁl_œ°_lök_îr‹_cou¡
 +
lök_îr‹_cou¡
;

2651 
	`msg
("! CyU3PUsbGetErrorCounts");

2654 
	`LOCK
(
g_cou¡îs_lock
);

2655 
g_cou¡îs
.
usb_îr‹_upd©e_cou¡
++;

2656 
g_cou¡îs
.
usb_îr‹_cou¡îs
.
phy_îr‹_cou¡
 +=Öhy_error_count;

2657 
g_cou¡îs
.
usb_îr‹_cou¡îs
.
lök_îr‹_cou¡
 +=Üink_error_count;

2658 i‡(
vÆ
 & 
PHYERR_MASK
) {

2659 i‡(
vÆ
 & 
PHYERR_PHY_LOCK_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
PHY_LOCK_EV
++;

2660 i‡(
vÆ
 & 
PHYERR_TRAINING_ERROR_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
TRAINING_ERROR_EV
++;

2661 i‡(
vÆ
 & 
PHYERR_RX_ERROR_CRC32_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
RX_ERROR_CRC32_EV
++;

2662 i‡(
vÆ
 & 
PHYERR_RX_ERROR_CRC16_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
RX_ERROR_CRC16_EV
++;

2663 i‡(
vÆ
 & 
PHYERR_RX_ERROR_CRC5_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
RX_ERROR_CRC5_EV
++;

2664 i‡(
vÆ
 & 
PHYERR_PHY_ERROR_DISPARITY_EV
)
g_cou¡îs
.
usb_îr‹_cou¡îs
.
PHY_ERROR_DISPARITY_EV
++;

2665 i‡(
vÆ
 & 
PHYERR_PHY_ERROR_EB_UND_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
PHY_ERROR_EB_UND_EV
++;

2666 i‡(
vÆ
 & 
PHYERR_PHY_ERROR_EB_OVR_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
PHY_ERROR_EB_OVR_EV
++;

2667 i‡(
vÆ
 & 
PHYERR_PHY_ERROR_DECODE_EV
Ë
g_cou¡îs
.
usb_îr‹_cou¡îs
.
PHY_ERROR_DECODE_EV
++;

2669 
	`UNLOCK
(
g_cou¡îs_lock
);

2670 
	}
}

2673 
	$thªad_ª_íum_íåy
(
uöt32_t
 
öput
) {

2674 
uöt32_t
 
evít_Êag
;

2678 
kìp_Æive
 = 0;

2681 i‡(
	`CyU3PEvítGë
(&
g_evít_usb_c⁄fig
, \

2682 (
EVENT_RE_ENUM
), 
CYU3P_EVENT_AND_CLEAR
, \

2683 &
evít_Êag
, 
RE_ENUM_THREAD_SLEEP_TIME
Ë=
CY_U3P_SUCCESS
) {

2684 
	`msg
("Re-config");

2690 
ª_íum
 = 
g_c⁄fig_mod
.
Êags
 & (
CF_RE_ENUM
 | 
CF_TX_SWING
 | 
CF_TX_DEEMPHASIS
 | 
CF_DISABLE_USB2
 | 
CF_ENABLE_AS_SUPERSPEED
);

2692 
	`CyU3PThªadSÀï
(100);

2708 i‡(
ª_íum
) {

2709 i‡(
	`CyU3PC⁄√˘Sèã
(
CyFÆ£
, (
g_c⁄fig
.
íabÀ_as_su≥r•ìd
 !0 ? 
CyTrue
 : CyFÆ£)Ë=
CY_U3P_SUCCESS
)

2710 
	`msg
("Link down");

2712 
	`msg
("! FailedÅo bringÜink down");

2715 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_TX_DEEMPHASIS
) {

2716 #i‡(
CYFX_VERSION_MAJOR
 >1Ë&& (
CYFX_VERSION_MINOR
 >= 3)

2717 i‡((
g_c⁄fig_mod
.
c⁄fig
.
tx_dìmphasis
 < 0x1FË&& (
	`CyU3PUsbSëTxDìmphasis
(g_c⁄fig_mod.c⁄fig.tx_dìmphasisË=
CY_U3P_SUCCESS
)) {

2718 
	`msg
("TX dìmphasi†now: %d (was: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
tx_dìmphasis
, 
g_c⁄fig
.tx_deemphasis);

2719 
g_c⁄fig
.
tx_dìmphasis
 = 
g_c⁄fig_mod
.
c⁄fig
.tx_deemphasis;

2723 
	`msg
("! FaûedÅÿ£àTX dìmphasis: %d (°ûl: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
tx_dìmphasis
, 
g_c⁄fig
.tx_deemphasis);

2726 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_TX_SWING
) {

2727 i‡((
g_c⁄fig_mod
.
c⁄fig
.
tx_swög
 < 128Ë&& (
	`CyU3PUsbSëTxSwög
(g_c⁄fig_mod.c⁄fig.tx_swögË=
CY_U3P_SUCCESS
)) {

2728 
	`msg
("TX swögÇow: %d (was: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
tx_swög
, 
g_c⁄fig
.tx_swing);

2729 
g_c⁄fig
.
tx_swög
 = 
g_c⁄fig_mod
.
c⁄fig
.tx_swing;

2732 
	`msg
("! FaûedÅÿ£àTX swög: %d (°ûl: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
tx_swög
, 
g_c⁄fig
.tx_swing);

2735 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_DISABLE_USB2
) {

2736 i‡(
	`CyU3PUsbC⁄åﬁUsb2Suµ‹t
((
g_c⁄fig_mod
.
c⁄fig
.
dißbÀ_usb2
 !0 ? 
CyTrue
 : 
CyFÆ£
)Ë=
CY_U3P_SUCCESS
) {

2737 
	`msg
("USB 2 suµ‹ànow: %†(was: %d)", (
g_c⁄fig_mod
.
c⁄fig
.
dißbÀ_usb2
 ? "dißbÀd" : "íabÀd"), (
g_c⁄fig
.disable_usb2 ? "disabled" : "enabled"));

2738 
g_c⁄fig
.
dißbÀ_usb2
 = 
g_c⁄fig_mod
.
c⁄fig
.disable_usb2;

2741 
	`msg
("! FaûedÅÿch™gêUSB 2 suµ‹àto: %†(°ûl: %s)", (
g_c⁄fig_mod
.
c⁄fig
.
dißbÀ_usb2
 ? "íabÀd" : "dißbÀd"), (
g_c⁄fig
.disable_usb2 ? "enabled" : "disabled"));

2744 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_PPORT_DRIVE_STRENGTH
) {

2746 i‡((
g_c⁄fig_mod
.
c⁄fig
.
µ‹t_drive_°ªngth
 >
CY_U3P_DS_QUARTER_STRENGTH
) &&

2747 (
g_c⁄fig_mod
.
c⁄fig
.
µ‹t_drive_°ªngth
 <
CY_U3P_DS_FULL_STRENGTH
) &&

2748 (
	`CyU3PSëPp‹tDriveSåígth
(
g_c⁄fig_mod
.
c⁄fig
.
µ‹t_drive_°ªngth
Ë=
CY_U3P_SUCCESS
)) {

2749 
	`msg
("PP‹àdrivê°ªngthÇow: %d (was: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
µ‹t_drive_°ªngth
, 
g_c⁄fig
.pport_drive_strength);

2750 
g_c⁄fig
.
µ‹t_drive_°ªngth
 = 
g_c⁄fig_mod
.
c⁄fig
.pport_drive_strength;

2753 
	`msg
("! FaûedÅÿ£àPP‹àdrivê°ªngth: %d (°ûl: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
µ‹t_drive_°ªngth
, 
g_c⁄fig
.pport_drive_strength);

2756 
ªöô_dma
 = 
g_c⁄fig_mod
.
Êags
 & (
CF_MANUAL_DMA
 | 
CF_DMA_BUFFER_COUNT
 | 
CF_DMA_BUFFER_SIZE
);

2757 i‡(
ª_íum
)

2758 
ªöô_dma
 = 0;

2760 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_MANUAL_DMA
) {

2761 #ifde‡
ENABLE_MANUAL_DMA_XFER


2762 
	`msg
("DMAÅøns„r†wû»be: %†(was: %s)", (
g_c⁄fig_mod
.
c⁄fig
.
m™uÆ_dma
 ? "m™uÆ" : "auto"), (
g_c⁄fig
.manual_dma ? "manual" : "auto"));

2763 
g_c⁄fig
.
m™uÆ_dma
 = 
g_c⁄fig_mod
.
c⁄fig
.manual_dma;

2765 
	`msg
("! Manual DMAÅransfersÇot compiled into FW");

2769 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_DMA_BUFFER_COUNT
) {

2770 
	`msg
("DMA buf„∏cou¡ wû»be: %d (was: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
dma_buf„r_cou¡
, 
g_c⁄fig
.dma_buffer_count);

2771 
g_c⁄fig
.
dma_buf„r_cou¡
 = 
g_c⁄fig_mod
.
c⁄fig
.dma_buffer_count;

2774 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_DMA_BUFFER_SIZE
) {

2775 
	`msg
("DMA buf„∏sizêwû»be: %d (was: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
dma_buf„r_size
, 
g_c⁄fig
.dma_buffer_size);

2776 
g_c⁄fig
.
dma_buf„r_size
 = 
g_c⁄fig_mod
.
c⁄fig
.dma_buffer_size;

2779 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_SB_BAUD_DIV
) {

2780 #ifde‡
ENABLE_FPGA_SB


2781 
	`LOCK
(
g_su¨t_lock
);

2782 
	`sb_wrôe
(
SUART_CLKDIV
, 
g_c⁄fig_mod
.
c⁄fig
.
sb_baud_div
);

2783 
	`UNLOCK
(
g_su¨t_lock
);

2784 
	`msg
("SUART_CLKDIVÇow: %d (was: %d)", 
g_c⁄fig_mod
.
c⁄fig
.
sb_baud_div
, 
g_c⁄fig
.sb_baud_div);

2785 
g_c⁄fig
.
sb_baud_div
 = 
g_c⁄fig_mod
.
c⁄fig
.sb_baud_div;

2787 
	`msg
("! FaûedÅÿ£àSUART_CLKDIV: SB i†dißbÀd (°ûl: %d)", 
g_c⁄fig
.
sb_baud_div
);

2793 i‡(
g_c⁄fig_mod
.
Êags
 & 
CF_ENABLE_AS_SUPERSPEED
) {

2794 
	`msg
("E«bÀ Su≥rS≥ed: %†(was: %s)", (
g_c⁄fig_mod
.
c⁄fig
.
íabÀ_as_su≥r•ìd
 ? "yes" : "no"), (
g_c⁄fig
.enable_as_superspeed ? "yes" : "no"));

2795 
g_c⁄fig
.
íabÀ_as_su≥r•ìd
 = 
g_c⁄fig_mod
.
c⁄fig
.enable_as_superspeed;

2798 i‡(
ªöô_dma
) {

2799 i‡(
g_≠p_ru¬ög
) {

2800 
	`msg
("Stopping FW...");

2802 
	`b200_fw_°›
();

2805 
	`msg
("Starting FW...");

2807 
	`b200_fw_°¨t
();

2811 i‡(
ª_íum
) {

2812 
	`msg
("C⁄√˘ög... (a†Su≥rS≥ed: %d)", 
g_c⁄fig
.
íabÀ_as_su≥r•ìd
);

2814 i‡(
	`CyU3PC⁄√˘Sèã
(
CyTrue
, (
g_c⁄fig
.
íabÀ_as_su≥r•ìd
 !0 ? CyTruê: 
CyFÆ£
)Ë=
CY_U3P_SUCCESS
) {

2815 
CyU3PUSBS≥ed_t
 
usb_•ìd
 = 
	`CyU3PUsbGëS≥ed
();

2816 
	`msg
("Lök u∞(•ìd: USB %d)", ()
usb_•ìd
);

2819 
	`msg
("! FailedÅo bringÜink up");

2822 
	`cou¡îs_ª£t_usb_îr‹s
();

2825 i‡(++
kìp_Æive
 =
KEEP_ALIVE_LOOP_COUNT
) {

2826 
	`msg
("Keep-alive");

2827 
kìp_Æive
 = 0;

2829 #i‚de‡
ENABLE_FPGA_SB


2830 
	`upd©e_îr‹_cou¡îs
();

2834 
	`CyU3PThªadRñöquish
();

2836 
	}
}

2839 
	$ba£16_ícode
(
uöt8_t
 
v
, 
out
[2], 
fú°
) {

2840 
out
[0] = 
fú°
 + (
v
 >> 4);

2841 
out
[1] = 
fú°
 + (
v
 & 0x0F);

2842 
	}
}

2845 #ifde‡
ENABLE_FPGA_SB


2846 
	$thªad_Âga_sb_pﬁl_íåy
(
uöt32_t
 
öput
) {

2850 
uöt16_t
 
i
;

2851 
uöt8_t
 
has_ch™ge
 = 0;

2853 
	`upd©e_îr‹_cou¡îs
();

2859 i‡(
g_pﬁl_œ°_phy_îr‹_°©us
 != 0)

2860 
has_ch™ge
 = 1;

2862 
uöt16_t
 
idx
 = 
	`CyU3PUsbGëEvítLogIndex
();

2863 i‡(
idx
 > (
USB_EVENT_LOG_SIZE
-1)) {

2864 
	`msg
("! USBÉvíàlog idx = %i", ()
idx
);

2868 
uöt8_t
 
has_usb_evíts
 = 0;

2870 i‡(
g_Âga_sb_œ°_usb_evít_log_ödex
 !
idx
) {

2871 i‡(
idx
 < 
g_Âga_sb_œ°_usb_evít_log_ödex
) {

2872 
i
 = 
g_Âga_sb_œ°_usb_evít_log_ödex
; i < 
USB_EVENT_LOG_SIZE
; i++) {

2873 i‡(
g_usb_evít_log
[
i
] != 0x14 && g_usb_event_log[i] != 0x15 && g_usb_event_log[i] != 0x16) {

2874 
has_usb_evíts
 = 1;

2879 i‡(
has_usb_evíts
 == 0) {

2880 
i
 = 0; i < 
idx
; i++) {

2881 i‡(
g_usb_evít_log
[
i
] != 0x14 && g_usb_event_log[i] != 0x15 && g_usb_event_log[i] != 0x16) {

2882 
has_usb_evíts
 = 1;

2889 
i
 = 
g_Âga_sb_œ°_usb_evít_log_ödex
; i < 
idx
; i++) {

2890 i‡(
g_usb_evít_log
[
i
] != 0x14 && g_usb_event_log[i] != 0x15 && g_usb_event_log[i] != 0x16) {

2891 
has_usb_evíts
 = 1;

2898 i‡(
has_ch™ge
 || 
has_usb_evíts
) {

2899 
	`LOCK
(
g_su¨t_lock
);

2901 
	`sb_wrôe
(
SUART_TXCHAR
, 
UPT_USB_EVENTS
);

2903 
out
[3];

2904 
out
[2] = '\0';

2906 i‡(
has_usb_evíts
) {

2907 i‡(
idx
 < 
g_Âga_sb_œ°_usb_evít_log_ödex
) {

2908 
i
 = 
g_Âga_sb_œ°_usb_evít_log_ödex
; i < 
USB_EVENT_LOG_SIZE
; i++) {

2909 i‡(
g_usb_evít_log
[
i
] == 0x14 || g_usb_event_log[i] == 0x15 || g_usb_event_log[i] == 0x16)

2911 
	`ba£16_ícode
(
g_usb_evít_log
[
i
], 
out
, 'A');

2912 
	`_sb_wrôe_°rög
(
out
);

2915 
i
 = 0; i < 
idx
; i++) {

2916 i‡(
g_usb_evít_log
[
i
] == 0x14 || g_usb_event_log[i] == 0x15 || g_usb_event_log[i] == 0x16)

2918 
	`ba£16_ícode
(
g_usb_evít_log
[
i
], 
out
, 'A');

2919 
	`_sb_wrôe_°rög
(
out
);

2923 
i
 = 
g_Âga_sb_œ°_usb_evít_log_ödex
; i < 
idx
; i++) {

2924 i‡(
g_usb_evít_log
[
i
] == 0x14 || g_usb_event_log[i] == 0x15 || g_usb_event_log[i] == 0x16)

2926 
	`ba£16_ícode
(
g_usb_evít_log
[
i
], 
out
, 'A');

2927 
	`_sb_wrôe_°rög
(
out
);

2935 i‡(
g_pﬁl_œ°_phy_îr‹_°©us
 != 0) {

2936 
uöt32_t
 
mask
;

2937 
size_t
 
off£t
;

2938 
mask
 = 
PHYERR_MAX
, 
off£t
 = 0; mask != 0; mask >>= 1, ++offset) {

2939 i‡((
g_pﬁl_œ°_phy_îr‹_°©us
 & 
mask
) != 0) {

2940 
	`sb_wrôe
(
SUART_TXCHAR
, 'a');

2941 
	`sb_wrôe
(
SUART_TXCHAR
, 'a' + 
off£t
);

2960 
	`_sb_wrôe_°rög
("\r\n");

2962 
	`UNLOCK
(
g_su¨t_lock
);

2965 
g_pﬁl_œ°_phy_îr‹_cou¡
 = 0;

2966 
g_pﬁl_œ°_lök_îr‹_cou¡
 = 0;

2967 
g_pﬁl_œ°_phy_îr‹_°©us
 = 0;

2969 
g_Âga_sb_œ°_usb_evít_log_ödex
 = 
idx
;

2971 
	`CyU3PThªadRñöquish
();

2973 
	}
}

2984 
	$CyFxAµliˇti⁄Deföe
() {

2985 *
≠p_thªad_±r
, *
Âga_thªad_±r
;

2986 #ifde‡
ENABLE_RE_ENUM_THREAD


2987 *
ª_íum_thªad_±r
;

2989 #ifde‡
ENABLE_FPGA_SB


2990 *
Âga_sb_pﬁl_thªad_±r
;

2993 
g_cou¡îs
.
magic
 = 
COUNTER_MAGIC
;

2996 
	`CyU3PMuãxCª©e
(&
g_log_lock
, 
CYU3P_NO_INHERIT
);

2997 
	`CyU3PMuãxCª©e
(&
g_cou¡îs_lock
, 
CYU3P_NO_INHERIT
);

2998 
	`CyU3PMuãxCª©e
(&
g_cou¡îs_dma_‰om_ho°_lock
, 
CYU3P_NO_INHERIT
);

2999 
	`CyU3PMuãxCª©e
(&
g_cou¡îs_dma_to_ho°_lock
, 
CYU3P_NO_INHERIT
);

3000 #ifde‡
ENABLE_FPGA_SB


3001 
	`CyU3PMuãxCª©e
(&
g_su¨t_lock
, 
CYU3P_NO_INHERIT
);

3003 #ifde‡
ENABLE_USB_EVENT_LOGGING


3004 
	`CyU3PUsbInôEvítLog
(
g_usb_evít_log
, 
USB_EVENT_LOG_SIZE
);

3010 
g_fx3_°©e
 = 
STATE_BUSY
;

3013 
com∑t_num
[0] = 
FX3_COMPAT_MAJOR
;

3014 
com∑t_num
[1] = 
FX3_COMPAT_MINOR
;

3017 
	`b200_usb_öô
();

3020 
	`CyU3PSysW©chDogC⁄figuª
(
CyTrue
, 
WATCHDOG_TIMEOUT
);

3023 
g_fx3_°©e
 = 
STATE_UNCONFIGURED
;

3027 
	`b200_gpio_öô
(
CyTrue
);

3029 
	`b200_íabÀ_Âga_sb_gpio
(
CyTrue
);

3031 
	`msg
("Com∑t: %d.%d", 
FX3_COMPAT_MAJOR
, 
FX3_COMPAT_MINOR
);

3032 
	`msg
("FX3 SDK: %d.%d.%d (buûd %d)", 
CYFX_VERSION_MAJOR
, 
CYFX_VERSION_MINOR
, 
CYFX_VERSION_PATCH
, 
CYFX_VERSION_BUILD
);

3033 
	`msg
("FW buût: %†%s", 
__TIME__
, 
__DATE__
);

3039 
	`CyU3PEvítCª©e
(&
g_evít_usb_c⁄fig
);

3042 
≠p_thªad_±r
 = 
	`CyU3PMemAŒoc
(
APP_THREAD_STACK_SIZE
);

3045 
Âga_thªad_±r
 = 
	`CyU3PMemAŒoc
(
APP_THREAD_STACK_SIZE
);

3046 #ifde‡
ENABLE_RE_ENUM_THREAD


3047 
ª_íum_thªad_±r
 = 
	`CyU3PMemAŒoc
(
APP_THREAD_STACK_SIZE
);

3049 #ifde‡
ENABLE_FPGA_SB


3050 
Âga_sb_pﬁl_thªad_±r
 = 
	`CyU3PMemAŒoc
(
APP_THREAD_STACK_SIZE
);

3055 i‡(
≠p_thªad_±r
 !
NULL
)

3056 
	`CyU3PThªadCª©e
(&
thªad_maö_≠p
,

3058 
thªad_maö_≠p_íåy
,

3060 
≠p_thªad_±r
,

3061 
APP_THREAD_STACK_SIZE
,

3062 
THREAD_PRIORITY
,

3063 
THREAD_PRIORITY
,

3064 
CYU3P_NO_TIME_SLICE
,

3065 
CYU3P_AUTO_START
);

3068 i‡(
Âga_thªad_±r
 !
NULL
)

3069 
	`CyU3PThªadCª©e
(&
thªad_Âga_c⁄fig
,

3071 
thªad_Âga_c⁄fig_íåy
,

3073 
Âga_thªad_±r
,

3074 
APP_THREAD_STACK_SIZE
,

3075 
THREAD_PRIORITY
,

3076 
THREAD_PRIORITY
,

3077 
CYU3P_NO_TIME_SLICE
,

3078 
CYU3P_AUTO_START
);

3079 #ifde‡
ENABLE_RE_ENUM_THREAD


3081 i‡(
ª_íum_thªad_±r
 !
NULL
)

3082 
	`CyU3PThªadCª©e
(&
thªad_ª_íum
,

3084 
thªad_ª_íum_íåy
,

3086 
ª_íum_thªad_±r
,

3087 
APP_THREAD_STACK_SIZE
,

3088 
THREAD_PRIORITY
,

3089 
THREAD_PRIORITY
,

3090 
CYU3P_NO_TIME_SLICE
,

3091 
CYU3P_AUTO_START
);

3093 #ifde‡
ENABLE_FPGA_SB


3095 i‡(
Âga_sb_pﬁl_thªad_±r
 !
NULL
)

3096 
	`CyU3PThªadCª©e
(&
thªad_Âga_sb_pﬁl
,

3098 
thªad_Âga_sb_pﬁl_íåy
,

3100 
Âga_sb_pﬁl_thªad_±r
,

3101 
APP_THREAD_STACK_SIZE
,

3102 
THREAD_PRIORITY
,

3103 
THREAD_PRIORITY
,

3104 
CYU3P_NO_TIME_SLICE
,

3105 
CYU3P_AUTO_START
);

3107 
	}
}

3110 
	$maö
() {

3111 
CyU3PRëu∫Sètus_t
 
°©us
 = 
CY_U3P_SUCCESS
;

3112 
CyU3PSysClockC⁄fig_t
 
˛ock_c⁄fig
;

3120 
˛ock_c⁄fig
.
˝uClkDiv
 = 2;

3121 
˛ock_c⁄fig
.
dmaClkDiv
 = 2;

3122 
˛ock_c⁄fig
.
mmioClkDiv
 = 2;

3123 
˛ock_c⁄fig
.
u£SèndbyClk
 = 
CyFÆ£
;

3124 
˛ock_c⁄fig
.
˛kSrc
 = 
CY_U3P_SYS_CLK
;

3125 
˛ock_c⁄fig
.
£tSysClk400
 = 
CyTrue
;

3127 
°©us
 = 
	`CyU3PDevi˚Inô
(&
˛ock_c⁄fig
);

3128 if(
°©us
 !
CY_U3P_SUCCESS
)

3129 
h™dÀ_Áèl_îr‹
;

3136 
°©us
 = 
	`CyU3PDevi˚CacheC⁄åﬁ
(
CyTrue
, 
CyFÆ£
, CyFalse);

3137 i‡(
°©us
 !
CY_U3P_SUCCESS
)

3138 
h™dÀ_Áèl_îr‹
;

3143 
°©us
 = 
	`b200_£t_io_m©rix
(
CyTrue
);

3144 if(
°©us
 !
CY_U3P_SUCCESS
)

3145 
h™dÀ_Áèl_îr‹
;

3150 
	`CyU3PKî√lE¡ry
();

3159 
h™dÀ_Áèl_îr‹
:

3161 
	}
}

	@firmware/fx3/b200/b200_main.h

5 #i‚de‡
_B200_MAIN_H


6 
	#_B200_MAIN_H


	)

8 
	~"cyu3exã∫c°¨t.h
"

10 
	~"cyu3ty≥s.h
"

11 
	~"cyu3usbc⁄°.h
"

13 
	#FX3_COMPAT_MAJOR
 (
uöt8_t
)(8)

	)

14 
	#FX3_COMPAT_MINOR
 (
uöt8_t
)(0)

	)

17 
	#GPIO_FPGA_RESET
 (
uöt32_t
)(26)

18 
	#GPIO_DONE
 (
uöt32_t
)(27)

	)

19 
	#GPIO_PROGRAM_B
 (
uöt32_t
)(45)

	)

20 
	#GPIO_INIT_B
 (
uöt32_t
)(50)

	)

21 
	#GPIO_AUX_PWR_ON
 (
uöt32_t
)(51)

	)

22 
	#GPIO_SHDN_SW
 (
uöt32_t
)(52)

	)

23 
	#GPIO_FX3_SCLK
 (
uöt32_t
)(53)

	)

24 
	#GPIO_FX3_CE
 (
uöt32_t
)(54)

	)

25 
	#GPIO_FX3_MISO
 (
uöt32_t
)(55)

	)

26 
	#GPIO_FX3_MOSI
 (
uöt32_t
)(56)

	)

27 
	#GPIO_FPGA_SB_SCL
 (
uöt32_t
)(25)

28 
	#GPIO_FPGA_SB_SDA
 (
uöt32_t
)(23)

29 

	)

33 
	#MASK_GPIO_PROGRAM_B
 (
uöt32_t
)(1 << (
GPIO_PROGRAM_B
 - 32))

	)

34 
	#MASK_GPIO_INIT_B
 (
uöt32_t
)(1 << (
GPIO_INIT_B
 - 32))

	)

35 
	#MASK_GPIO_AUX_PWR_ON
 (
uöt32_t
)(1 << (
GPIO_FX3_SCLK
 - 32))

	)

36 
	#MASK_GPIO_SHDN_SW
 (
uöt32_t
)(1 << (
GPIO_FX3_SCLK
 - 32))

	)

37 
	#MASK_GPIO_FX3_SCLK
 (
uöt32_t
)(1 << (
GPIO_FX3_SCLK
 - 32))

	)

38 
	#MASK_GPIO_FX3_CE
 (
uöt32_t
)(1 << (
GPIO_FX3_CE
 - 32))

	)

39 
	#MASK_GPIO_FX3_MISO
 (
uöt32_t
)(1 << (
GPIO_FX3_MISO
 - 32))

	)

40 
	#MASK_GPIO_FX3_MOSI
 (
uöt32_t
)(1 << (
GPIO_FX3_MOSI
 - 32))

	)

41 
	#MASK_GPIO_FPGA_SB_SCL
 (
uöt32_t
)(1 << (
GPIO_FPGA_SB_SCL
 - 0))

	)

42 
	#MASK_GPIO_FPGA_SB_SDA
 (
uöt32_t
)(1 << (
GPIO_FPGA_SB_SDA
 - 0))

	)

44 
	#USB3_PACKETS_PER_BURST
 (16)

	)

45 
	#USB2_PACKETS_PER_BURST
 (1)

	)

46 
	#DMA_SIZE_INFINITE
 (0)

	)

48 
	#APP_THREAD_STACK_SIZE
 (0x0800)

	)

49 
	#THREAD_PRIORITY
 (8)

	)

51 
	#B200_VREQ_BITSTREAM_START
 (
uöt8_t
)(0x02)

	)

52 
	#B200_VREQ_BITSTREAM_DATA
 (
uöt8_t
)(0x12)

	)

53 
	#B200_VREQ_BITSTREAM_DATA_FILL
 (
uöt8_t
)(0x13)

	)

54 
	#B200_VREQ_BITSTREAM_DATA_COMMIT
 (
uöt8_t
)(0x14)

	)

55 
	#B200_VREQ_GET_COMPAT
 (
uöt8_t
)(0x15)

	)

56 
	#B200_VREQ_SET_FPGA_HASH
 (
uöt8_t
)(0x1C)

	)

57 
	#B200_VREQ_GET_FPGA_HASH
 (
uöt8_t
)(0x1D)

	)

58 
	#B200_VREQ_SET_FW_HASH
 (
uöt8_t
)(0x1E)

	)

59 
	#B200_VREQ_GET_FW_HASH
 (
uöt8_t
)(0x1F)

	)

60 
	#B200_VREQ_LOOP_CODE
 (
uöt8_t
)(0x22)

	)

61 
	#B200_VREQ_GET_LOG
 (
uöt8_t
)(0x23)

	)

62 
	#B200_VREQ_GET_COUNTERS
 (
uöt8_t
)(0x24)

	)

63 
	#B200_VREQ_CLEAR_COUNTERS
 (
uöt8_t
)(0x25)

	)

64 
	#B200_VREQ_GET_USB_EVENT_LOG
 (
uöt8_t
)(0x26)

	)

65 
	#B200_VREQ_SET_CONFIG
 (
uöt8_t
)(0x27)

	)

66 
	#B200_VREQ_GET_CONFIG
 (
uöt8_t
)(0x28)

	)

67 
	#B200_VREQ_WRITE_SB
 (
uöt8_t
)(0x29)

	)

68 
	#B200_VREQ_SET_SB_BAUD_DIV
 (
uöt8_t
)(0x30)

	)

69 
	#B200_VREQ_FLUSH_DATA_EPS
 (
uöt8_t
)(0x31)

	)

70 
	#B200_VREQ_FPGA_CONFIG
 (
uöt8_t
)(0x55)

	)

71 
	#B200_VREQ_TOGGLE_FPGA_RESET
 (
uöt8_t
)(0x62)

	)

72 
	#B200_VREQ_TOGGLE_GPIF_RESET
 (
uöt8_t
)(0x72)

	)

73 
	#B200_VREQ_GET_USB_SPEED
 (
uöt8_t
)(0x80)

	)

74 
	#B200_VREQ_GET_STATUS
 (
uöt8_t
)(0x83)

	)

75 
	#B200_VREQ_RESET_DEVICE
 (
uöt8_t
)(0x99)

	)

76 
	#B200_VREQ_EEPROM_WRITE
 (
uöt8_t
)(0xBA)

	)

77 
	#B200_VREQ_EEPROM_READ
 (
uöt8_t
)(0xBB)

	)

79 
	#EVENT_BITSTREAM_START
 (1 << 1)

	)

80 
	#EVENT_GPIO_DONE_HIGH
 (1 << 2)

	)

81 
	#EVENT_GPIO_INITB_RISE
 (1 << 3)

	)

82 
	#EVENT_FPGA_CONFIG
 (1 << 4)

	)

83 
	#EVENT_RE_ENUM
 (1 << 5)

	)

87 
	#STATE_UNDEFINED
 (0)

	)

88 
	#STATE_FPGA_READY
 (1)

	)

89 
	#STATE_CONFIGURING_FPGA
 (2)

	)

90 
	#STATE_BUSY
 (3)

	)

91 
	#STATE_RUNNING
 (4)

	)

92 
	#STATE_UNCONFIGURED
 (5)

	)

93 
	#STATE_ERROR
 (6)

	)

99 
	#VREQ_ENDPOINT_PRODUCER
 0x00

100 
	#VREQ_ENDPOINT_CONSUMER
 0x80

101 

	)

102 
	#DATA_ENDPOINT_PRODUCER
 0x02

103 
	#DATA_ENDPOINT_CONSUMER
 0x86

104 

	)

105 
	#CTRL_ENDPOINT_PRODUCER
 0x04

106 
	#CTRL_ENDPOINT_CONSUMER
 0x88

107 

	)

108 
	#PRODUCER_DATA_SOCKET
 
CY_U3P_UIB_SOCKET_PROD_2


	)

109 
	#CONSUMER_DATA_SOCKET
 
CY_U3P_UIB_SOCKET_CONS_6


	)

111 
	#PRODUCER_CTRL_SOCKET
 
CY_U3P_UIB_SOCKET_PROD_4


	)

112 
	#CONSUMER_CTRL_SOCKET
 
CY_U3P_UIB_SOCKET_CONS_8


	)

114 
	#DATA_TX_PPORT_SOCKET
 
CY_U3P_PIB_SOCKET_0


	)

115 
	#DATA_RX_PPORT_SOCKET
 
CY_U3P_PIB_SOCKET_1


	)

116 
	#CTRL_COMM_PPORT_SOCKET
 
CY_U3P_PIB_SOCKET_2


	)

117 
	#CTRL_RESP_PPORT_SOCKET
 
CY_U3P_PIB_SOCKET_3


	)

121 
uöt8_t
 
b200_usb2_dev_desc
[];

122 
uöt8_t
 
b200_usb3_dev_desc
[];

123 c⁄° 
uöt8_t
 
b200_dev_quÆ_desc
[];

124 c⁄° 
uöt8_t
 
b200_usb_fs_c⁄fig_desc
[];

125 c⁄° 
uöt8_t
 
b200_usb_hs_c⁄fig_desc
[];

126 c⁄° 
uöt8_t
 
b200_usb_bos_desc
[];

127 c⁄° 
uöt8_t
 
b200_usb_ss_c⁄fig_desc
[];

128 c⁄° 
uöt8_t
 
b200_°rög_œng_id_desc
[];

129 c⁄° 
uöt8_t
 
b200_usb_m™uÁ˘uª_desc
[];

130 c⁄° 
uöt8_t
 
b200_usb_¥odu˘_desc
[];

131 c⁄° 
uöt8_t
 
niu§p_usb_m™uÁ˘uª_desc
[];

132 c⁄° 
uöt8_t
 
niu§p_2900_usb_¥odu˘_desc
[];

133 c⁄° 
uöt8_t
 
niu§p_2901_usb_¥odu˘_desc
[];

134 c⁄° 
uöt8_t
 
unknown_desc
[];

135 
uöt8_t
 
dev_£rül
[];

138 
	~"cyu3exã∫˚nd.h
"

	@firmware/fx3/b200/b200_usb_descriptors.c

9 
	~"b200_maö.h
"

13 
uöt8_t
 
	gb200_usb2_dev_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

16 
CY_U3P_USB_DEVICE_DESCR
,

33 
uöt8_t
 
	gb200_usb3_dev_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

36 
CY_U3P_USB_DEVICE_DESCR
,

53 c⁄° 
uöt8_t
 
	gb200_usb_bos_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

56 
CY_U3P_BOS_DESCR
,

62 
CY_U3P_DEVICE_CAPB_DESCR
,

63 
CY_U3P_USB2_EXTN_CAPB_TYPE
,

68 
CY_U3P_DEVICE_CAPB_DESCR
,

69 
CY_U3P_SS_USB_CAPB_TYPE
,

79 c⁄° 
uöt8_t
 
	gb200_dev_quÆ_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

82 
CY_U3P_USB_DEVQUAL_DESCR
,

94 c⁄° 
uöt8_t
 
	gb200_usb_fs_c⁄fig_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

98 
CY_U3P_USB_CONFIG_DESCR
,

108 
CY_U3P_USB_INTRFC_DESCR
,

119 
CY_U3P_USB_INTRFC_DESCR
,

130 
CY_U3P_USB_ENDPNT_DESCR
,

131 
DATA_ENDPOINT_PRODUCER
,

132 
CY_U3P_USB_EP_BULK
,

138 
CY_U3P_USB_INTRFC_DESCR
,

149 
CY_U3P_USB_ENDPNT_DESCR
,

150 
DATA_ENDPOINT_CONSUMER
,

151 
CY_U3P_USB_EP_BULK
,

157 
CY_U3P_USB_INTRFC_DESCR
,

168 
CY_U3P_USB_ENDPNT_DESCR
,

169 
CTRL_ENDPOINT_PRODUCER
,

170 
CY_U3P_USB_EP_BULK
,

176 
CY_U3P_USB_INTRFC_DESCR
,

187 
CY_U3P_USB_ENDPNT_DESCR
,

188 
CTRL_ENDPOINT_CONSUMER
,

189 
CY_U3P_USB_EP_BULK
,

196 c⁄° 
uöt8_t
 
	gb200_usb_hs_c⁄fig_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

200 
CY_U3P_USB_CONFIG_DESCR
,

210 
CY_U3P_USB_INTRFC_DESCR
,

221 
CY_U3P_USB_INTRFC_DESCR
,

232 
CY_U3P_USB_ENDPNT_DESCR
,

233 
DATA_ENDPOINT_PRODUCER
,

234 
CY_U3P_USB_EP_BULK
,

240 
CY_U3P_USB_INTRFC_DESCR
,

251 
CY_U3P_USB_ENDPNT_DESCR
,

252 
DATA_ENDPOINT_CONSUMER
,

253 
CY_U3P_USB_EP_BULK
,

259 
CY_U3P_USB_INTRFC_DESCR
,

270 
CY_U3P_USB_ENDPNT_DESCR
,

271 
CTRL_ENDPOINT_PRODUCER
,

272 
CY_U3P_USB_EP_BULK
,

278 
CY_U3P_USB_INTRFC_DESCR
,

289 
CY_U3P_USB_ENDPNT_DESCR
,

290 
CTRL_ENDPOINT_CONSUMER
,

291 
CY_U3P_USB_EP_BULK
,

298 c⁄° 
uöt8_t
 
	gb200_usb_ss_c⁄fig_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

302 
CY_U3P_USB_CONFIG_DESCR
,

312 
CY_U3P_USB_INTRFC_DESCR
,

323 
CY_U3P_USB_INTRFC_DESCR
,

334 
CY_U3P_USB_ENDPNT_DESCR
,

335 
DATA_ENDPOINT_PRODUCER
,

336 
CY_U3P_USB_EP_BULK
,

342 
CY_U3P_SS_EP_COMPN_DESCR
,

343 (
USB3_PACKETS_PER_BURST
 - 1),

349 
CY_U3P_USB_INTRFC_DESCR
,

360 
CY_U3P_USB_ENDPNT_DESCR
,

361 
DATA_ENDPOINT_CONSUMER
,

362 
CY_U3P_USB_EP_BULK
,

368 
CY_U3P_SS_EP_COMPN_DESCR
,

369 (
USB3_PACKETS_PER_BURST
 - 1),

375 
CY_U3P_USB_INTRFC_DESCR
,

386 
CY_U3P_USB_ENDPNT_DESCR
,

387 
CTRL_ENDPOINT_PRODUCER
,

388 
CY_U3P_USB_EP_BULK
,

394 
CY_U3P_SS_EP_COMPN_DESCR
,

395 (
USB3_PACKETS_PER_BURST
 - 1),

401 
CY_U3P_USB_INTRFC_DESCR
,

412 
CY_U3P_USB_ENDPNT_DESCR
,

413 
CTRL_ENDPOINT_CONSUMER
,

414 
CY_U3P_USB_EP_BULK
,

420 
CY_U3P_SS_EP_COMPN_DESCR
,

421 (
USB3_PACKETS_PER_BURST
 - 1),

427 c⁄° 
uöt8_t
 
	gb200_usb_ss_c⁄fig_desc_√w
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

431 
CY_U3P_USB_CONFIG_DESCR
,

441 
CY_U3P_USB_INTRFC_DESCR
,

452 
CY_U3P_USB_INTRFC_DESCR
,

463 
CY_U3P_USB_ENDPNT_DESCR
,

464 
DATA_ENDPOINT_PRODUCER
,

465 
CY_U3P_USB_EP_BULK
,

471 
CY_U3P_SS_EP_COMPN_DESCR
,

472 (
USB3_PACKETS_PER_BURST
 - 1),

478 
CY_U3P_USB_ENDPNT_DESCR
,

479 
DATA_ENDPOINT_CONSUMER
,

480 
CY_U3P_USB_EP_BULK
,

486 
CY_U3P_SS_EP_COMPN_DESCR
,

487 (
USB3_PACKETS_PER_BURST
 - 1),

493 
CY_U3P_USB_ENDPNT_DESCR
,

494 
CTRL_ENDPOINT_PRODUCER
,

495 
CY_U3P_USB_EP_BULK
,

501 
CY_U3P_SS_EP_COMPN_DESCR
,

502 (
USB3_PACKETS_PER_BURST
 - 1),

508 
CY_U3P_USB_ENDPNT_DESCR
,

509 
CTRL_ENDPOINT_CONSUMER
,

510 
CY_U3P_USB_EP_BULK
,

516 
CY_U3P_SS_EP_COMPN_DESCR
,

517 (
USB3_PACKETS_PER_BURST
 - 1),

524 c⁄° 
uöt8_t
 
	gb200_°rög_œng_id_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

527 
CY_U3P_USB_STRING_DESCR
,

533 c⁄° 
uöt8_t
 
	gb200_usb_m™uÁ˘uª_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

536 
CY_U3P_USB_STRING_DESCR
,

558 c⁄° 
uöt8_t
 
	gniu§p_usb_m™uÁ˘uª_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

561 
CY_U3P_USB_STRING_DESCR
,

592 c⁄° 
uöt8_t
 
	gb200_usb_¥odu˘_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

595 
CY_U3P_USB_STRING_DESCR
,

608 c⁄° 
uöt8_t
 
	gniu§p_2900_usb_¥odu˘_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

611 
CY_U3P_USB_STRING_DESCR
,

627 c⁄° 
uöt8_t
 
	gniu§p_2901_usb_¥odu˘_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

630 
CY_U3P_USB_STRING_DESCR
,

645 c⁄° 
uöt8_t
 
	gunknown_desc
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

648 
CY_U3P_USB_STRING_DESCR
,

659 c⁄° 
uöt8_t
 
	gCyFxUsbOSDs¸
[] 
__©åibuã__
 ((
Æig√d
 (32))) =

662 
CY_U3P_USB_STRING_DESCR
,

672 
uöt8_t
 
	gdev_£rül
[20] 
__©åibuã__
 ((
Æig√d
 (32))) =

675 
CY_U3P_USB_STRING_DESCR
,

690 c⁄° 
uöt8_t
 
	gCyFxUsbDs¸AlignBuf„r
[32] 
__©åibuã__
 ((
Æig√d
 (32)));

	@firmware/fx3/gpif2_designer/b200_v2.cydsn/cyfxgpif2config.h

16 #i‚de‡
_INCLUDED_CYFXGPIF2CONFIG_


17 
	#_INCLUDED_CYFXGPIF2CONFIG_


	)

18 
	~"cyu3ty≥s.h
"

19 
	~"cyu3gpif.h
"

24 
	#CY_NUMBER_OF_STATES
 6

	)

29 
	#RESET
 0

	)

30 
	#IDLE
 1

	)

31 
	#READ
 2

	)

32 
	#WRITE
 3

	)

33 
	#SHORT_PKT
 4

	)

34 
	#ZLP
 5

	)

40 
	#ALPHA_RESET
 0x8

	)

46 
uöt16_t
 
	gCyFxGpifTønsôi⁄
[] = {

56 
CyU3PGpifWaveD©a
 
	gCyFxGpifWaved©a
[] = {

69 
uöt8_t
 
	gCyFxGpifWaved©aPosôi⁄
[] = {

82 
uöt32_t
 
	gCyFxGpifRegVÆue
[] = {

164 c⁄° 
CyU3PGpifC⁄fig_t
 
	gCyFxGpifC⁄fig
 = {

165 (
uöt16_t
)((
CyFxGpifWaved©aPosôi⁄
)/(
uöt8_t
)),

166 
CyFxGpifWaved©a
,

167 
CyFxGpifWaved©aPosôi⁄
,

168 (
uöt16_t
)((
CyFxGpifTønsôi⁄
)/(uint16_t)),

169 
CyFxGpifTønsôi⁄
,

170 (
uöt16_t
)((
CyFxGpifRegVÆue
)/(
uöt32_t
)),

171 
CyFxGpifRegVÆue


	@firmware/octoclock/bootloader/main.c

18 
	~<°dboﬁ.h
>

19 
	~<°döt.h
>

20 
	~<°rög.h
>

22 
	~<avr/boŸ.h
>

23 
	~<avr/ì¥om.h
>

24 
	~<avr/io.h
>

25 
	~<avr/pgm•a˚.h
>

26 
	~<avr/wdt.h
>

28 
	~<avæibdefs.h
>

29 
	~<o˘o˛ock.h
>

30 
	~<debug.h
>

31 
	~<√tw‹k.h
>

33 
	~<√t/íc28j60.h
>

35 
	~"o˘o˛ock/comm⁄.h
"

37 
	#TIME_PASSED
 (
TCNT1
 > 
TIMER1_ONE_SECOND
)

	)

42 
boﬁ
 
	gª˚ived_cmd
 = 
Ál£
;

43 
boﬁ
 
	gd⁄e_bu∫ög
 = 
Ál£
;

44 
boﬁ
 
	g≠p_checked
 = 
Ál£
;

53 
uöt16_t
 
	mfw_Àn
;

54 
uöt16_t
 
	mfw_¸c
;

55 } 
	t¸c_öfo_t
;

57 
¸c_öfo_t
 
	g¸c_öfo
;

64 
	$boŸ_¥ogøm_∑ge
(
uöt8_t
 *
buf
, 
uöt16_t
 
∑ge
){

66 
uöt8_t
 
§eg
 = 
SREG
;

67 
	`˛i
();

69 
	`ì¥om_busy_waô
();

71 
	`boŸ_∑ge_îa£
(
∑ge
);

72 
	`boŸ_•m_busy_waô
();

74 
uöt16_t
 
i
 = 0; i < 
SPM_PAGESIZE
; i += 2){

76 
uöt16_t
 
w
 = *
buf
++;

77 
w
 +((*
buf
++) << 8);

79 
	`boŸ_∑ge_fûl
(
∑ge
 + 
i
, 
w
);

82 
	`boŸ_∑ge_wrôe
(
∑ge
);

83 
	`boŸ_•m_busy_waô
();

87 
	`boŸ_rww_íabÀ
();

90 
SREG
 = 
§eg
;

91 
	`£i
();

92 
	}
}

97 
	$ªad_fúmw¨e
(
uöt16_t
 
addr
, 
o˘o˛ock_∑ckë_t
 *
pkt_out
){

98 
size_t
 
i
 = 0; i < 
SPM_PAGESIZE
; i++){

99 
pkt_out
->
d©a
[
i
] = 
	`pgm_ªad_byã
(
addr
+i);

101 
	}
}

108 
	$ˇlcuœã_¸c
(
uöt16_t
 *
¸c
, uöt16_à
Àn
){

109 *
¸c
 = 0xFFFF;

111 
size_t
 
i
 = 0; i < 
Àn
; i++){

112 *
¸c
 ^
	`pgm_ªad_byã
(
i
);

113 
uöt8_t
 
j
 = 0; j < 8; ++j){

114 if(*
¸c
 & 1) *crc = (*crc >> 1) ^ 0xA001;

115 *
¸c
 = (*crc >> 1);

118 
	}
}

125 
boﬁ
 
	$vÆid_≠p
(){

126 
¸c_öfo_t
 
¸c_ì¥om_öfo
;

127 
	`ì¥om_ªad_block
(&
¸c_ì¥om_öfo
, (*)
OCTOCLOCK_EEPROM_APP_LEN
, 4);

129 
	`ˇlcuœã_¸c
(&(
¸c_öfo
.
fw_¸c
), 
¸c_ì¥om_öfo
.
fw_Àn
);

130  (
¸c_öfo
.
fw_¸c
 =
¸c_ì¥om_öfo
.fw_crc);

131 
	}
}

136 
	$h™dÀ_udp_quîy_∑ckë
(

137 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

138 *
∑ylﬂd
, 
∑ylﬂd_Àn


140 c⁄° 
o˘o˛ock_∑ckë_t
 *
pkt_ö
 = (o˘o˛ock_∑ckë_t*)
∑ylﬂd
;

143 if(
pkt_ö
->
code
 =
OCTOCLOCK_QUERY_CMD
){

144 
o˘o˛ock_∑ckë_t
 
pkt_out
;

145 
pkt_out
.
¥Ÿo_vî
 = 
OCTOCLOCK_BOOTLOADER_PROTO_VER
;

146 
pkt_out
.
£quí˚
 = 
pkt_ö
->sequence;

147 
pkt_out
.
code
 = 
OCTOCLOCK_QUERY_ACK
;

148 
pkt_out
.
Àn
 = 0;

149 
	`£nd_udp_pkt
(
OCTOCLOCK_UDP_CTRL_PORT
, 
§c
, (*)&
pkt_out
, (
o˘o˛ock_∑ckë_t
));

151 
	}
}

153 
	$h™dÀ_udp_fw_∑ckë
(

154 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

155 *
∑ylﬂd
, 
∑ylﬂd_Àn


157 
o˘o˛ock_∑ckë_t
 *
pkt_ö
 = (o˘o˛ock_∑ckë_t*)
∑ylﬂd
;

158 
o˘o˛ock_∑ckë_t
 
pkt_out
;

159 
pkt_out
.
¥Ÿo_vî
 = 
OCTOCLOCK_BOOTLOADER_PROTO_VER
;

160 
pkt_out
.
£quí˚
 = 
pkt_ö
->sequence;

161 
pkt_out
.
Àn
 = 0;

163 
pkt_ö
->
code
){

164 
PREPARE_FW_BURN_CMD
:

165 
ª˚ived_cmd
 = 
åue
;

166 
d⁄e_bu∫ög
 = 
Ál£
;

167 
¸c_öfo
.
fw_¸c
 = 
pkt_ö
->
¸c
;

168 
¸c_öfo
.
fw_Àn
 = 
pkt_ö
->
Àn
;

169 
pkt_out
.
code
 = 
FW_BURN_READY_ACK
;

173 
FILE_TRANSFER_CMD
:

174 
	`boŸ_¥ogøm_∑ge
(
pkt_ö
->
d©a
,Ökt_ö->
addr
);

175 
pkt_out
.
code
 = 
FILE_TRANSFER_ACK
;

176 
pkt_out
.
addr
 = 
pkt_ö
->addr;

180 
READ_FW_CMD
:

181 
pkt_out
.
code
 = 
READ_FW_ACK
;

182 
	`ªad_fúmw¨e
(
pkt_ö
->
addr
, &
pkt_out
);

186 
FINALIZE_BURNING_CMD
:

187 
d⁄e_bu∫ög
 = 
åue
;

188 
	`ì¥om_wrôe_block
(&
¸c_öfo
, (*)
OCTOCLOCK_EEPROM_APP_LEN
, 4);

189 
pkt_out
.
code
 = 
FINALIZE_BURNING_ACK
;

195 
	`£nd_udp_pkt
(
OCTOCLOCK_UDP_FW_PORT
, 
§c
, (*)&
pkt_out
, (
o˘o˛ock_∑ckë_t
));

196 
	}
}

198 
	$h™dÀ_udp_ì¥om_∑ckë
(

199 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

200 *
∑ylﬂd
, 
∑ylﬂd_Àn


202 
o˘o˛ock_∑ckë_t
 *
pkt_ö
 = (o˘o˛ock_∑ckë_t*)
∑ylﬂd
;

203 
o˘o˛ock_∑ckë_t
 
pkt_out
;

204 
pkt_out
.
¥Ÿo_vî
 = 
OCTOCLOCK_BOOTLOADER_PROTO_VER
;

205 
pkt_out
.
£quí˚
 = 
pkt_ö
->sequence;

206 
pkt_out
.
Àn
 = 0;

209 if(
pkt_ö
->
¥Ÿo_vî
 =
OCTOCLOCK_FW_COMPAT_NUM
){

210 
pkt_ö
->
code
){

211 
CLEAR_EEPROM_CMD
:

212 
ª˚ived_cmd
 = 
åue
;

213 
uöt8_t
 
bœnk_ì¥om
[103];

214 
	`mem£t
(
bœnk_ì¥om
, 0xFF, 103);

215 
	`ì¥om_wrôe_block
(
bœnk_ì¥om
, 0, 103);

216 
pkt_out
.
code
 = 
CLEAR_EEPROM_ACK
;

217 
	`£nd_udp_pkt
(
OCTOCLOCK_UDP_EEPROM_PORT
, 
§c
, (*)&
pkt_out
, (
o˘o˛ock_∑ckë_t
));

224 
	}
}

226 
	$maö
(){

229 
	`wdt_dißbÀ
();

232 
MCUCR
 = (1<<
IVCE
);

233 
MCUCR
 = (1<<
IVSEL
);

234 
	`˛i
();

237 
	`£tup_©mñ_io_p‹ts
();

240 
	`TIMER1_INIT
();

243 
	`√tw‹k_öô
();

244 
	`ªgi°î_udp_li°íî
(
OCTOCLOCK_UDP_CTRL_PORT
, 
h™dÀ_udp_quîy_∑ckë
);

245 
	`ªgi°î_udp_li°íî
(
OCTOCLOCK_UDP_FW_PORT
, 
h™dÀ_udp_fw_∑ckë
);

246 
	`ªgi°î_udp_li°íî
(
OCTOCLOCK_UDP_EEPROM_PORT
, 
h™dÀ_udp_ì¥om_∑ckë
);

249 
PORTC
 |= 0x20;

250 
PORTC
 |= (0x20<<1);

251 
PORTC
 |= (0x20<<2);

263 
åue
){

264 if(
d⁄e_bu∫ög
){

265 if(
	`vÆid_≠p
()) ;

266 
d⁄e_bu∫ög
 = 
Ál£
;

268 if(!
≠p_checked
 && !
ª˚ived_cmd
 && 
TIME_PASSED
){

269 
≠p_checked
 = 
åue
;

270 if(
	`vÆid_≠p
()) ;

273 
	`√tw‹k_check
();

277 
PORTC
 &= ~0x20;

278 
PORTC
 &= ~(0x20<<1);

279 
PORTC
 &= ~(0x20<<2);

285 
	`TIMER1_DISABLE
();

286 
MCUCR
 = (1<<
IVCE
);

287 
MCUCR
 = 0;

288 
	`˛i
();

289 
	`asm
("jmp 0000");

290 
	}
}

	@firmware/octoclock/include/arch/cc.h

1 #i‚de‡
INCLUDED_ARCH_CC_H


2 
	#INCLUDED_ARCH_CC_H


	)

4 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

8 
	~<°döt.h
>

10 
uöt8_t
 
	tu8_t
;

11 
öt8_t
 
	ts8_t
;

12 
uöt16_t
 
	tu16_t
;

13 
öt16_t
 
	ts16_t
;

14 
uöt32_t
 
	tu32_t
;

15 
öt32_t
 
	ts32_t
;

19 
	tu8_t
;

20 sig√d 
	ts8_t
;

21 
	tu16_t
;

22 sig√d 
	ts16_t
;

23 
	tu32_t
;

24 sig√d 
	ts32_t
;

27 
u32_t
 
	tmem_±r_t
;

30 
	#U16_F
 "u"

	)

31 
	#S16_F
 "d"

	)

32 
	#X16_F
 "x"

	)

33 
	#U32_F
 "u"

	)

34 
	#S32_F
 "d"

	)

35 
	#X32_F
 "x"

	)

39 
	#U16_F
 "hu"

	)

40 
	#S16_F
 "hd"

	)

41 
	#X16_F
 "hx"

	)

42 
	#U32_F
 "lu"

	)

43 
	#S32_F
 "ld"

	)

44 
	#X32_F
 "lx"

	)

48 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

49 
	#PACK_STRUCT_STRUCT


	)

50 
	#PACK_STRUCT_BEGIN


	)

51 
	#PACK_STRUCT_END


	)

53 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

54 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

55 
	#PACK_STRUCT_BEGIN


	)

56 
	#PACK_STRUCT_END


	)

60 
ab‹t
();

61 
	#LWIP_PLATFORM_ASSERT
(
msg
Ë
	`ab‹t
()

	)

	@firmware/octoclock/include/arch/perf.h

1 
	#PERF_START
 ((Ë0)

	)

2 
	#PERF_STOP
(
msg
Ë((Ë0)

	)

	@firmware/octoclock/include/avrlibdefs.h

22 #i‚de‡
AVRLIBDEFS_H


23 
	#AVRLIBDEFS_H


	)

27 #i‚de‡
outb


28 
	#outb
(
addr
, 
d©a
Ëadd∏(d©a)

	)

30 #i‚de‡
öb


31 
	#öb
(
addr
Ë◊ddr)

	)

33 #i‚de‡
outw


34 
	#outw
(
addr
, 
d©a
Ëadd∏(d©a)

	)

36 #i‚de‡
öw


37 
	#öw
(
addr
Ë◊ddr)

	)

39 #i‚de‡
BV


40 
	#BV
(
bô
Ë(1<<(bô))

	)

42 #i‚de‡
cbi


43 
	#cbi
(
ªg
,
bô
Ëªg &~(
	`BV
(bô))

	)

45 #i‚de‡
sbi


46 
	#sbi
(
ªg
,
bô
Ëªg |(
	`BV
(bô))

	)

48 #i‚de‡
˛i


49 
	#˛i
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("˛i" ::)

	)

51 #i‚de‡
£i


52 
	#£i
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("£i" ::)

	)

58 
	#GNUC_PACKED
 
	`__©åibuã__
((
∑cked
))

	)

61 
	#DDR
(
x
) ((x)-1)

62 
	#PIN
(
x
) ((x)-2)

63 

	)

65 
	#MIN
(
a
,
b
Ë(◊<b)?◊):(b))

	)

66 
	#MAX
(
a
,
b
Ë(◊>b)?◊):(b))

	)

67 
	#ABS
(
x
Ë((x>0)?(x):(-x))

	)

70 
	#PI
 3.14159265359

	)

	@firmware/octoclock/include/avrlibtypes.h

22 #i‚de‡
AVRLIBTYPES_H


23 
	#AVRLIBTYPES_H


	)

25 #i‚de‡
WIN32


27 
	#FALSE
 0

	)

28 
	#TRUE
 -1

	)

32 
	tu08
;

33 sig√d 
	ts08
;

34 
	tu16
;

35 sig√d 
	ts16
;

36 
	tu32
;

37 sig√d 
	ts32
;

38 
	tu64
;

39 sig√d 
	ts64
;

43 
	#MAX_U08
 255

	)

44 
	#MAX_U16
 65535

	)

45 
	#MAX_U32
 4294967295

	)

49 
	#MIN_S08
 -128

	)

50 
	#MAX_S08
 127

	)

51 
	#MIN_S16
 -32768

	)

52 
	#MAX_S16
 32767

	)

53 
	#MIN_S32
 -2147483648

	)

54 
	#MAX_S32
 2147483647

	)

56 #i‚de‡
WIN32


58 
	tBOOL
;

59 
	tBYTE
;

60 
	tWORD
;

61 
	tDWORD
;

63 
	tUCHAR
;

64 
	tUINT
;

65 
	tUSHORT
;

66 
	tULONG
;

68 
	tCHAR
;

69 
	tINT
;

70 
	tLONG
;

	@firmware/octoclock/include/clkdist.h

18 #i‚de‡
_CLKDIST_H_


19 
	#_CLKDIST_H_


	)

21 
	~<°dboﬁ.h
>

23 
	~<o˘o˛ock.h
>

26 
	mReg0
=0, 
	mReg1
, 
	mReg2
, 
	mReg3
, 
	mReg4
, 
	mReg5
, 
	mReg6
, 
	mReg7
,

27 
	mReg8_Sètus_C⁄åﬁ
,

28 
	mRód_Comm™d
=0xE,

29 
	mRAM_EEPROM_U∆ock
=0x1F,

30 
	mRAM_EEPROM_Lock
=0x3f

31 } 
	tCDCE18005
;

34 
	mPrim¨y_GPS
,

35 
	mSec⁄d¨y_Ext


36 } 
	tTI_I≈ut_10_MHz
;

39 
	mLo
,

40 
	mHi


41 } 
	tLevñs
;

43 
£tup_TI_CDCE18005
(
TI_I≈ut_10_MHz
 
which_öput
);

45 
ª£t_TI_CDCE18005
();

47 
uöt32_t
 
gë_TI_CDCE18005
(
CDCE18005
 
which_ªgi°î
);

49 
£t_TI_CDCE18005
(
CDCE18005
 
which_ªgi°î
, 
uöt32_t
 
bôs
);

51 
boﬁ
 
check_TI_CDCE18005
(
TI_I≈ut_10_MHz
 
which_öput
, 
CDCE18005
 
which_ªgi°î
);

	@firmware/octoclock/include/compiler.h

18 #i‚de‡
INCLUDED_COMPILER_H


19 
	#INCLUDED_COMPILER_H


	)

21 
	#_AL2
 
	`__©åibuã__
((
	`Æig√d
 (2)))

	)

22 
	#_AL4
 
	`__©åibuã__
((
	`Æig√d
 (4)))

	)

	@firmware/octoclock/include/debug.h

18 #i‚de‡
_DEBUG_H_


19 
	#_DEBUG_H_


	)

22 #i‡
deföed
(
DEBUG
Ë&& !deföed(
__BOOTLOADER__
)

24 
	~<avr/pgm•a˚.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°döt.h
>

28 
	~<£rül.h
>

30 
	#DEBUG_INIT
(Ë
	`£rül_öô
(&
PORTF
, 0)

	)

31 
	#DEBUG_LOG
(
msg
Ë
	`£rül_tx_P
(
	`PSTR
(msg), &
PORTF
, 0, 
åue
)

	)

32 
	#DEBUG_LOG_NNL
(
msg
Ë
	`£rül_tx_P
(
	`PSTR
(msg), &
PORTF
, 0, 
Ál£
)

	)

33 
	#DEBUG_LOG_BYTE
(
byã
Ë
	`£rül_tx_byã
(byã, &
PORTF
, 0, 
åue
)

	)

34 
	#DEBUG_LOG_BYTE_NNL
(
byã
Ë
	`£rül_tx_byã
(byã, &
PORTF
, 0, 
Ál£
)

	)

35 
	#DEBUG_LOG_HEX
(
byã
Ë
	`£rül_tx_hex
(byã, &
PORTF
, 0, 
åue
)

	)

36 
	#DEBUG_LOG_HEX_NNL
(
byã
Ë
	`£rül_tx_hex
(byã, &
PORTF
, 0, 
Ál£
)

	)

38 
	#DEBUG_LOG_CHAR_ARR_NNL
(
¨r
,
Àn
Ë
uöt8_t
 
i
 = 0; i <Üen; i++){ \

39 
	`DEBUG_LOG_BYTE_NNL
(
¨r
[
i
]); \

40 
	`DEBUG_LOG_NNL
(" "); \

41 }

	)

42 
	#DEBUG_LOG_CHAR_ARR
(
¨r
,
Àn
Ë
	`DEBUG_LOG_CHAR_ARR_NNL
(arr,len); \

43 
	`DEBUG_LOG
(" ")

	)

45 
	#DEBUG_LOG_MAC
(
mac_addr
Ë
	`DEBUG_LOG_HEX_NNL
(mac_addr[0]); \

46 
	`DEBUG_LOG_NNL
(":"); \

47 
	`DEBUG_LOG_HEX_NNL
(
mac_addr
[1]); \

48 
	`DEBUG_LOG_NNL
(":"); \

49 
	`DEBUG_LOG_HEX_NNL
(
mac_addr
[2]); \

50 
	`DEBUG_LOG_NNL
(":"); \

51 
	`DEBUG_LOG_HEX_NNL
(
mac_addr
[3]); \

52 
	`DEBUG_LOG_NNL
(":"); \

53 
	`DEBUG_LOG_HEX_NNL
(
mac_addr
[4]); \

54 
	`DEBUG_LOG_NNL
(":"); \

55 
	`DEBUG_LOG_HEX
(
mac_addr
[5]);

	)

57 
	#DEBUG_LOG_IP
(
ù_addr
Ë
	`DEBUG_LOG_BYTE_NNL
(
	`ù4_addr1
(&ip_addr)); \

58 
	`DEBUG_LOG_NNL
("."); \

59 
	`DEBUG_LOG_BYTE_NNL
(
	`ù4_addr2
(&
ù_addr
)); \

60 
	`DEBUG_LOG_NNL
("."); \

61 
	`DEBUG_LOG_BYTE_NNL
(
	`ù4_addr3
(&
ù_addr
)); \

62 
	`DEBUG_LOG_NNL
("."); \

63 
	`DEBUG_LOG_BYTE
(
	`ù4_addr4
(&
ù_addr
));

	)

65 
	#DEBUG_LOG_SHORT
(
num
Ë
	`DEBUG_LOG_HEX_NNL
(((
uöt8_t
*)&num)[1]); \

66 
	`DEBUG_LOG_HEX
(((
uöt8_t
*)&
num
)[0]);

	)

68 
	#DEBUG_LOG_INT
(
num
Ë
	`DEBUG_LOG_HEX_NNL
(((
uöt8_t
*)&num)[3]); \

69 
	`DEBUG_LOG_HEX_NNL
(((
uöt8_t
*)&
num
)[2]); \

70 
	`DEBUG_LOG_HEX_NNL
(((
uöt8_t
*)&
num
)[1]); \

71 
	`DEBUG_LOG_HEX
(((
uöt8_t
*)&
num
)[0]);

	)

75 
	#DEBUG_INIT
()

	)

76 
	#DEBUG_LOG
(
msg
)

	)

77 
	#DEBUG_LOG_NNL
(
msg
)

	)

78 
	#DEBUG_LOG_CHAR
(
byã
)

	)

79 
	#DEBUG_LOG_CHAR_NNL
(
byã
)

	)

80 
	#DEBUG_LOG_BYTE
(
byã
)

	)

81 
	#DEBUG_LOG_BYTE_NNL
(
byã
)

	)

82 
	#DEBUG_LOG_HEX
(
byã
)

	)

83 
	#DEBUG_LOG_HEX_NNL
(
byã
)

	)

84 
	#DEBUG_LOG_CHAR_ARR
(
¨r
,
Àn
)

	)

85 
	#DEBUG_LOG_CHAR_ARR_NNL
(
¨r
,
Àn
)

	)

87 
	#DEBUG_LOG_MAC
(
mac_addr
)

	)

88 
	#DEBUG_LOG_IP
(
ù_addr
)

	)

89 
	#DEBUG_LOG_SHORT
(
num
)

	)

90 
	#DEBUG_LOG_INT
(
num
)

	)

	@firmware/octoclock/include/gpsdo.h

18 #i‚de‡
_GPSDO_H_


19 
	#_GPSDO_H_


	)

21 
	~<°döt.h
>

23 
	#POOLSIZE
 256

	)

25 
	ggpsdo_buf
[
POOLSIZE
];

26 
gpsdo_ˇche_°©e_t
 
	ggpsdo_°©e
;

28 
£nd_gpsdo_cmd
(* 
buf
, 
uöt8_t
 
size
);

	@firmware/octoclock/include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

61 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

62 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

64 
	e√tc⁄n_ty≥
 {

65 
NETCONN_INVALID
 = 0,

67 
NETCONN_TCP
 = 0x10,

69 
NETCONN_UDP
 = 0x20,

70 
NETCONN_UDPLITE
 = 0x21,

71 
NETCONN_UDPNOCHKSUM
= 0x22,

73 
NETCONN_RAW
 = 0x40

76 
	e√tc⁄n_°©e
 {

77 
NETCONN_NONE
,

78 
NETCONN_WRITE
,

79 
NETCONN_LISTEN
,

80 
NETCONN_CONNECT
,

81 
NETCONN_CLOSE


84 
	e√tc⁄n_evt
 {

85 
NETCONN_EVT_RCVPLUS
,

86 
NETCONN_EVT_RCVMINUS
,

87 
NETCONN_EVT_SENDPLUS
,

88 
NETCONN_EVT_SENDMINUS


91 #i‡
LWIP_IGMP


92 
	e√tc⁄n_igmp
 {

93 
NETCONN_JOIN
,

94 
NETCONN_LEAVE


99 
ù_pcb
;

100 
t˝_pcb
;

101 
udp_pcb
;

102 
øw_pcb
;

103 
√tc⁄n
;

106 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

109 
	s√tc⁄n
 {

111 
√tc⁄n_ty≥
 
ty≥
;

113 
√tc⁄n_°©e
 
°©e
;

116 
ù_pcb
 *
ù
;

117 
t˝_pcb
 *
t˝
;

118 
udp_pcb
 *
udp
;

119 
øw_pcb
 *
øw
;

120 } 
pcb
;

122 
îr_t
 
îr
;

124 
sys_£m_t
 
›_com∂ëed
;

127 
sys_mbox_t
 
ªcvmbox
;

130 
sys_mbox_t
 
ac˚±mbox
;

132 
sockë
;

133 #i‡
LWIP_SO_RCVTIMEO


136 
ªcv_timeout
;

138 #i‡
LWIP_SO_RCVBUF


140 
ªcv_bufsize
;

142 
s16_t
 
ªcv_avaû
;

143 #i‡
LWIP_TCP


146 
≠i_msg_msg
 *
wrôe_msg
;

149 
size_t
 
wrôe_off£t
;

150 #i‡
LWIP_TCPIP_CORE_LOCKING


154 
u8_t
 
wrôe_dñayed
;

158 
√tc⁄n_ˇŒback
 
ˇŒback
;

162 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

163 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

164 }

	)

167 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

168 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

170 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

171 
√tc⁄n_ˇŒback
 
ˇŒback
);

172 
îr_t
 
√tc⁄n_dñëe
 (
√tc⁄n
 *
c⁄n
);

174 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

176 
îr_t
 
√tc⁄n_gëaddr
 (
√tc⁄n
 *
c⁄n
,

177 
ù_addr
 *
addr
,

178 
u16_t
 *
p‹t
,

179 
u8_t
 
loˇl
);

180 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

181 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

183 
îr_t
 
√tc⁄n_böd
 (
√tc⁄n
 *
c⁄n
,

184 
ù_addr
 *
addr
,

185 
u16_t
 
p‹t
);

186 
îr_t
 
√tc⁄n_c⁄√˘
 (
√tc⁄n
 *
c⁄n
,

187 
ù_addr
 *
addr
,

188 
u16_t
 
p‹t
);

189 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

190 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

191 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

192 
√tc⁄n
 * 
√tc⁄n_ac˚±
 (√tc⁄¿*
c⁄n
);

193 
√tbuf
 * 
√tc⁄n_ªcv
 (
√tc⁄n
 *
c⁄n
);

194 
îr_t
 
√tc⁄n_£ndto
 (
√tc⁄n
 *
c⁄n
,

195 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

196 
îr_t
 
√tc⁄n_£nd
 (
√tc⁄n
 *
c⁄n
,

197 
√tbuf
 *
buf
);

198 
îr_t
 
√tc⁄n_wrôe
 (
√tc⁄n
 *
c⁄n
,

199 c⁄° *
d©≠å
, 
size_t
 
size
,

200 
u8_t
 
≠iÊags
);

201 
îr_t
 
√tc⁄n_˛o£
 (
√tc⁄n
 *
c⁄n
);

203 #i‡
LWIP_IGMP


204 
îr_t
 
√tc⁄n_joö_Àave_group
 (
√tc⁄n
 *
c⁄n
,

205 
ù_addr
 *
mu…üddr
,

206 
ù_addr
 *
öãrÁ˚
,

207 
√tc⁄n_igmp
 
joö_‹_Àave
);

209 #i‡
LWIP_DNS


210 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
);

213 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
îr
)

	)

214 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

216 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


57 
	s≠i_msg_msg
 {

60 
√tc⁄n
 *
c⁄n
;

64 
√tbuf
 *
b
;

67 
u8_t
 
¥Ÿo
;

68 } 
n
;

71 
ù_addr
 *
ùaddr
;

72 
u16_t
 
p‹t
;

73 } 
bc
;

76 
ù_addr
 *
ùaddr
;

77 
u16_t
 *
p‹t
;

78 
u8_t
 
loˇl
;

79 } 
ad
;

82 c⁄° *
d©≠å
;

83 
size_t
 
Àn
;

84 
u8_t
 
≠iÊags
;

85 } 
w
;

88 
u16_t
 
Àn
;

89 } 
r
;

90 #i‡
LWIP_IGMP


93 
ù_addr
 *
mu…üddr
;

94 
ù_addr
 *
öãrÁ˚
;

95 
√tc⁄n_igmp
 
joö_‹_Àave
;

96 } 
jl
;

98 #i‡
TCP_LISTEN_BACKLOG


100 
u8_t
 
backlog
;

101 } 
lb
;

103 } 
msg
;

109 
	s≠i_msg
 {

111 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

113 
≠i_msg_msg
 
msg
;

116 #i‡
LWIP_DNS


121 
	sdns_≠i_msg
 {

123 c⁄° *
«me
;

125 
ù_addr
 *
addr
;

128 
sys_£m_t
 
£m
;

130 
îr_t
 *
îr
;

134 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

135 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

136 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

137 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

138 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

139 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

140 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

141 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

142 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

143 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

144 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

145 #i‡
LWIP_IGMP


146 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

149 #i‡
LWIP_DNS


150 
do_gëho°by«me
(*
¨g
);

153 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

154 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

156 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

50 #ifde‡
__˝lu•lus


54 #i‚de‡
PACK_STRUCT_BEGIN


55 
	#PACK_STRUCT_BEGIN


	)

58 #i‚de‡
PACK_STRUCT_END


59 
	#PACK_STRUCT_END


	)

62 #i‚de‡
PACK_STRUCT_FIELD


63 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

67 #i‚de‡
LWIP_UNUSED_ARG


68 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

72 #ifde‡
LWIP_PROVIDE_ERRNO


74 
	#EPERM
 1

	)

75 
	#ENOENT
 2

	)

76 
	#ESRCH
 3

	)

77 
	#EINTR
 4

	)

78 
	#EIO
 5

	)

79 
	#ENXIO
 6

	)

80 
	#E2BIG
 7

	)

81 
	#ENOEXEC
 8

	)

82 
	#EBADF
 9

	)

83 
	#ECHILD
 10

	)

84 
	#EAGAIN
 11

	)

85 
	#ENOMEM
 12

	)

86 
	#EACCES
 13

	)

87 
	#EFAULT
 14

	)

88 
	#ENOTBLK
 15

	)

89 
	#EBUSY
 16

	)

90 
	#EEXIST
 17

	)

91 
	#EXDEV
 18

	)

92 
	#ENODEV
 19

	)

93 
	#ENOTDIR
 20

	)

94 
	#EISDIR
 21

	)

95 
	#EINVAL
 22

	)

96 
	#ENFILE
 23

	)

97 
	#EMFILE
 24

	)

98 
	#ENOTTY
 25

	)

99 
	#ETXTBSY
 26

	)

100 
	#EFBIG
 27

	)

101 
	#ENOSPC
 28

	)

102 
	#ESPIPE
 29

	)

103 
	#EROFS
 30

	)

104 
	#EMLINK
 31

	)

105 
	#EPIPE
 32

	)

106 
	#EDOM
 33

	)

107 
	#ERANGE
 34

	)

108 
	#EDEADLK
 35

	)

109 
	#ENAMETOOLONG
 36

	)

110 
	#ENOLCK
 37

	)

111 
	#ENOSYS
 38

	)

112 
	#ENOTEMPTY
 39

	)

113 
	#ELOOP
 40

	)

114 
	#EWOULDBLOCK
 
EAGAIN


	)

115 
	#ENOMSG
 42

	)

116 
	#EIDRM
 43

	)

117 
	#ECHRNG
 44

	)

118 
	#EL2NSYNC
 45

	)

119 
	#EL3HLT
 46

	)

120 
	#EL3RST
 47

	)

121 
	#ELNRNG
 48

	)

122 
	#EUNATCH
 49

	)

123 
	#ENOCSI
 50

	)

124 
	#EL2HLT
 51

	)

125 
	#EBADE
 52

	)

126 
	#EBADR
 53

	)

127 
	#EXFULL
 54

	)

128 
	#ENOANO
 55

	)

129 
	#EBADRQC
 56

	)

130 
	#EBADSLT
 57

	)

132 
	#EDEADLOCK
 
EDEADLK


	)

134 
	#EBFONT
 59

	)

135 
	#ENOSTR
 60

	)

136 
	#ENODATA
 61

	)

137 
	#ETIME
 62

	)

138 
	#ENOSR
 63

	)

139 
	#ENONET
 64

	)

140 
	#ENOPKG
 65

	)

141 
	#EREMOTE
 66

	)

142 
	#ENOLINK
 67

	)

143 
	#EADV
 68

	)

144 
	#ESRMNT
 69

	)

145 
	#ECOMM
 70

	)

146 
	#EPROTO
 71

	)

147 
	#EMULTIHOP
 72

	)

148 
	#EDOTDOT
 73

	)

149 
	#EBADMSG
 74

	)

150 
	#EOVERFLOW
 75

	)

151 
	#ENOTUNIQ
 76

	)

152 
	#EBADFD
 77

	)

153 
	#EREMCHG
 78

	)

154 
	#ELIBACC
 79

	)

155 
	#ELIBBAD
 80

	)

156 
	#ELIBSCN
 81

	)

157 
	#ELIBMAX
 82

	)

158 
	#ELIBEXEC
 83

	)

159 
	#EILSEQ
 84

	)

160 
	#ERESTART
 85

	)

161 
	#ESTRPIPE
 86

	)

162 
	#EUSERS
 87

	)

163 
	#ENOTSOCK
 88

	)

164 
	#EDESTADDRREQ
 89

	)

165 
	#EMSGSIZE
 90

	)

166 
	#EPROTOTYPE
 91

	)

167 
	#ENOPROTOOPT
 92

	)

168 
	#EPROTONOSUPPORT
 93

	)

169 
	#ESOCKTNOSUPPORT
 94

	)

170 
	#EOPNOTSUPP
 95

	)

171 
	#EPFNOSUPPORT
 96

	)

172 
	#EAFNOSUPPORT
 97

	)

173 
	#EADDRINUSE
 98

	)

174 
	#EADDRNOTAVAIL
 99

	)

175 
	#ENETDOWN
 100

	)

176 
	#ENETUNREACH
 101

	)

177 
	#ENETRESET
 102

	)

178 
	#ECONNABORTED
 103

	)

179 
	#ECONNRESET
 104

	)

180 
	#ENOBUFS
 105

	)

181 
	#EISCONN
 106

	)

182 
	#ENOTCONN
 107

	)

183 
	#ESHUTDOWN
 108

	)

184 
	#ETOOMANYREFS
 109

	)

185 
	#ETIMEDOUT
 110

	)

186 
	#ECONNREFUSED
 111

	)

187 
	#EHOSTDOWN
 112

	)

188 
	#EHOSTUNREACH
 113

	)

189 
	#EALREADY
 114

	)

190 
	#EINPROGRESS
 115

	)

191 
	#ESTALE
 116

	)

192 
	#EUCLEAN
 117

	)

193 
	#ENOTNAM
 118

	)

194 
	#ENAVAIL
 119

	)

195 
	#EISNAM
 120

	)

196 
	#EREMOTEIO
 121

	)

197 
	#EDQUOT
 122

	)

199 
	#ENOMEDIUM
 123

	)

200 
	#EMEDIUMTYPE
 124

	)

203 
	#ENSROK
 0

	)

204 
	#ENSRNODATA
 160

	)

205 
	#ENSRFORMERR
 161

	)

206 
	#ENSRSERVFAIL
 162

	)

207 
	#ENSRNOTFOUND
 163

	)

208 
	#ENSRNOTIMP
 164

	)

209 
	#ENSRREFUSED
 165

	)

210 
	#ENSRBADQUERY
 166

	)

211 
	#ENSRBADNAME
 167

	)

212 
	#ENSRBADFAMILY
 168

	)

213 
	#ENSRBADRESP
 169

	)

214 
	#ENSRCONNREFUSED
 170

	)

215 
	#ENSRTIMEOUT
 171

	)

216 
	#ENSROF
 172

	)

217 
	#ENSRFILE
 173

	)

218 
	#ENSRNOMEM
 174

	)

219 
	#ENSRDESTRUCTION
 175

	)

220 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

221 
	#ENSRCNAMELOOP
 177

	)

223 #i‚de‡
î∫o


224 
î∫o
;

229 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

56 
	#AUTOIP_TMR_INTERVAL
 100

	)

57 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

60 
	#PROBE_WAIT
 1

	)

61 
	#PROBE_MIN
 1

	)

62 
	#PROBE_MAX
 2

	)

63 
	#PROBE_NUM
 3

	)

64 
	#ANNOUNCE_NUM
 2

	)

65 
	#ANNOUNCE_INTERVAL
 2

	)

66 
	#ANNOUNCE_WAIT
 2

	)

67 
	#MAX_CONFLICTS
 10

	)

68 
	#RATE_LIMIT_INTERVAL
 60

	)

69 
	#DEFEND_INTERVAL
 10

	)

72 
	#AUTOIP_STATE_OFF
 0

	)

73 
	#AUTOIP_STATE_PROBING
 1

	)

74 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

75 
	#AUTOIP_STATE_BOUND
 3

	)

77 
	sautoù


79 
ù_addr
 
	mŒùaddr
;

80 
u8_t
 
	m°©e
;

81 
u8_t
 
	m£¡_num
;

82 
u16_t
 
	mâw
;

83 
u8_t
 
	mœ°c⁄Êi˘
;

84 
u8_t
 
	måõd_Œùaddr
;

89 
autoù_öô
();

92 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

95 
îr_t
 
autoù_°›
(
√tif
 *netif);

98 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

101 
autoù_tmr
();

	@firmware/octoclock/include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_OFF
 0x00

	)

44 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

45 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

46 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

47 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

50 
	#LWIP_DBG_ON
 0x80U

	)

52 
	#LWIP_DBG_OFF
 0x00U

	)

55 
	#LWIP_DBG_TRACE
 0x40U

	)

57 
	#LWIP_DBG_STATE
 0x20U

	)

59 
	#LWIP_DBG_FRESH
 0x10U

	)

61 
	#LWIP_DBG_HALT
 0x08U

	)

63 #i‚de‡
LWIP_NOASSERT


64 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

65 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

67 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

71 #i‚de‡
LWIP_ERROR


72 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

73 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

76 #ifde‡
LWIP_DEBUG


80 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

82 ((
debug
Ë& 
LWIP_DBG_ON
) && \

83 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

84 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

85 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

86 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

90 } 0)

	)

93 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@firmware/octoclock/include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

38 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

39 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

41 #i‚de‡
NULL


42 
	#NULL
 ((*)0)

	)

	@firmware/octoclock/include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	sdh˝


28 
u8_t
 
°©e
;

30 
u8_t
 
åõs
;

32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
pbuf
 *
p
;

38 
dh˝_msg
 *
msg_ö
;

40 
dh˝_msg
 *
›ti⁄s_ö
;

42 
u16_t
 
›ti⁄s_ö_Àn
;

44 
pbuf
 *
p_out
;

45 
dh˝_msg
 *
msg_out
;

46 
u16_t
 
›ti⁄s_out_Àn
;

47 
u16_t
 
ªque°_timeout
;

48 
u16_t
 
t1_timeout
;

49 
u16_t
 
t2_timeout
;

50 
ù_addr
 
£rvî_ù_addr
;

51 
ù_addr
 
of„ªd_ù_addr
;

52 
ù_addr
 
of„ªd_¢_mask
;

53 
ù_addr
 
of„ªd_gw_addr
;

54 
ù_addr
 
of„ªd_bc_addr
;

55 
	#DHCP_MAX_DNS
 2

	)

56 
u32_t
 
dns_cou¡
;

57 
ù_addr
 
of„ªd_dns_addr
[
DHCP_MAX_DNS
];

59 
u32_t
 
of„ªd_t0_Àa£
;

60 
u32_t
 
of„ªd_t1_ª√w
;

61 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_AUTOIP_COOP


63 
u8_t
 
autoù_co›_°©e
;

69 
ù_addr
 
of„ªd_si_addr
;

70 
u8_t
 *
boŸ_fûe_«me
;

75 #ifde‡
PACK_STRUCT_USE_INCLUDES


76 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


80 
	sdh˝_msg


82 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

86 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

88 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

89 
PACK_STRUCT_FIELD
(
ù_addr
 
cüddr
);

90 
PACK_STRUCT_FIELD
(
ù_addr
 
yüddr
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
süddr
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
güddr
);

93 
	#DHCP_CHADDR_LEN
 16U

	)

94 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

95 
	#DHCP_SNAME_LEN
 64U

	)

96 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

97 
	#DHCP_FILE_LEN
 128U

	)

98 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

99 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

100 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

102 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

103 #unde‡
DHCP_OPTIONS_LEN


106 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

108 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

110 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

111 } 
PACK_STRUCT_STRUCT
;

112 
PACK_STRUCT_END


113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/ï°ru˘.h
"

118 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

120 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

122 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

124 
dh˝_°›
(
√tif
 *netif);

126 
dh˝_öf‹m
(
√tif
 *netif);

129 #i‡
DHCP_DOES_ARP_CHECK


130 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
);

134 
dh˝_cﬂr£_tmr
();

136 
dh˝_föe_tmr
();

139 
	#DHCP_MSG_OFS
 (
UDP_DATA_OFS
)

	)

140 
	#DHCP_OP_OFS
 (
DHCP_MSG_OFS
 + 0)

	)

141 
	#DHCP_HTYPE_OFS
 (
DHCP_MSG_OFS
 + 1)

	)

142 
	#DHCP_HLEN_OFS
 (
DHCP_MSG_OFS
 + 2)

	)

143 
	#DHCP_HOPS_OFS
 (
DHCP_MSG_OFS
 + 3)

	)

144 
	#DHCP_XID_OFS
 (
DHCP_MSG_OFS
 + 4)

	)

145 
	#DHCP_SECS_OFS
 (
DHCP_MSG_OFS
 + 8)

	)

146 
	#DHCP_FLAGS_OFS
 (
DHCP_MSG_OFS
 + 10)

	)

147 
	#DHCP_CIADDR_OFS
 (
DHCP_MSG_OFS
 + 12)

	)

148 
	#DHCP_YIADDR_OFS
 (
DHCP_MSG_OFS
 + 16)

	)

149 
	#DHCP_SIADDR_OFS
 (
DHCP_MSG_OFS
 + 20)

	)

150 
	#DHCP_GIADDR_OFS
 (
DHCP_MSG_OFS
 + 24)

	)

151 
	#DHCP_CHADDR_OFS
 (
DHCP_MSG_OFS
 + 28)

	)

152 
	#DHCP_SNAME_OFS
 (
DHCP_MSG_OFS
 + 44)

	)

153 
	#DHCP_FILE_OFS
 (
DHCP_MSG_OFS
 + 108)

	)

154 
	#DHCP_MSG_LEN
 236

	)

156 
	#DHCP_COOKIE_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
)

	)

157 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
 + 4)

	)

159 
	#DHCP_CLIENT_PORT
 68

	)

160 
	#DHCP_SERVER_PORT
 67

	)

163 
	#DHCP_REQUESTING
 1

	)

164 
	#DHCP_INIT
 2

	)

165 
	#DHCP_REBOOTING
 3

	)

166 
	#DHCP_REBINDING
 4

	)

167 
	#DHCP_RENEWING
 5

	)

168 
	#DHCP_SELECTING
 6

	)

169 
	#DHCP_INFORMING
 7

	)

170 
	#DHCP_CHECKING
 8

	)

171 
	#DHCP_PERMANENT
 9

	)

172 
	#DHCP_BOUND
 10

	)

174 
	#DHCP_BACKING_OFF
 12

	)

175 
	#DHCP_OFF
 13

	)

178 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

179 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

181 
	#DHCP_BOOTREQUEST
 1

	)

182 
	#DHCP_BOOTREPLY
 2

	)

184 
	#DHCP_DISCOVER
 1

	)

185 
	#DHCP_OFFER
 2

	)

186 
	#DHCP_REQUEST
 3

	)

187 
	#DHCP_DECLINE
 4

	)

188 
	#DHCP_ACK
 5

	)

189 
	#DHCP_NAK
 6

	)

190 
	#DHCP_RELEASE
 7

	)

191 
	#DHCP_INFORM
 8

	)

193 
	#DHCP_HTYPE_ETH
 1

	)

195 
	#DHCP_HLEN_ETH
 6

	)

197 
	#DHCP_BROADCAST_FLAG
 15

	)

198 
	#DHCP_BROADCAST_MASK
 (1 << 
DHCP_FLAG_BROADCAST
)

	)

201 
	#DHCP_OPTION_PAD
 0

	)

202 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

203 
	#DHCP_OPTION_ROUTER
 3

	)

204 
	#DHCP_OPTION_DNS_SERVER
 6

	)

205 
	#DHCP_OPTION_HOSTNAME
 12

	)

206 
	#DHCP_OPTION_IP_TTL
 23

	)

207 
	#DHCP_OPTION_MTU
 26

	)

208 
	#DHCP_OPTION_BROADCAST
 28

	)

209 
	#DHCP_OPTION_TCP_TTL
 37

	)

210 
	#DHCP_OPTION_END
 255

	)

213 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

214 
	#DHCP_OPTION_LEASE_TIME
 51

	)

215 
	#DHCP_OPTION_OVERLOAD
 52

	)

217 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

218 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

221 
	#DHCP_OPTION_SERVER_ID
 54

	)

222 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

224 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

225 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

227 
	#DHCP_OPTION_T1
 58

	)

228 
	#DHCP_OPTION_T2
 59

	)

229 
	#DHCP_OPTION_US
 60

	)

230 
	#DHCP_OPTION_CLIENT_ID
 61

	)

231 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

232 
	#DHCP_OPTION_BOOTFILE
 67

	)

235 
	#DHCP_OVERLOAD_NONE
 0

	)

236 
	#DHCP_OVERLOAD_FILE
 1

	)

237 
	#DHCP_OVERLOAD_SNAME
 2

	)

238 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

240 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


42 
	#DNS_TMR_INTERVAL
 1000

	)

45 
	#DNS_RRTYPE_A
 1

	)

46 
	#DNS_RRTYPE_NS
 2

	)

47 
	#DNS_RRTYPE_MD
 3

	)

48 
	#DNS_RRTYPE_MF
 4

	)

49 
	#DNS_RRTYPE_CNAME
 5

	)

50 
	#DNS_RRTYPE_SOA
 6

	)

51 
	#DNS_RRTYPE_MB
 7

	)

52 
	#DNS_RRTYPE_MG
 8

	)

53 
	#DNS_RRTYPE_MR
 9

	)

54 
	#DNS_RRTYPE_NULL
 10

	)

55 
	#DNS_RRTYPE_WKS
 11

	)

56 
	#DNS_RRTYPE_PTR
 12

	)

57 
	#DNS_RRTYPE_HINFO
 13

	)

58 
	#DNS_RRTYPE_MINFO
 14

	)

59 
	#DNS_RRTYPE_MX
 15

	)

60 
	#DNS_RRTYPE_TXT
 16

	)

63 
	#DNS_RRCLASS_IN
 1

	)

64 
	#DNS_RRCLASS_CS
 2

	)

65 
	#DNS_RRCLASS_CH
 3

	)

66 
	#DNS_RRCLASS_HS
 4

	)

67 
	#DNS_RRCLASS_FLUSH
 0x800

	)

76 (*
	tdns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr
 *
	tùaddr
, *
	tˇŒback_¨g
);

79 
	`dns_öô
();

81 
	`dns_tmr
();

83 
	`dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
);

85 
ù_addr
 
	`dns_gë£rvî
(
u8_t
 
numdns
);

87 
îr_t
 
	`dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
,

88 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

90 #i‡
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


91 
	`dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

92 
îr_t
 
	`dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

	@firmware/octoclock/include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

58 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_RTE
)

	)

60 
	#ERR_ABRT
 -5

	)

61 
	#ERR_RST
 -6

	)

62 
	#ERR_CLSD
 -7

	)

63 
	#ERR_CONN
 -8

	)

65 
	#ERR_VAL
 -9

	)

67 
	#ERR_ARG
 -10

	)

69 
	#ERR_USE
 -11

	)

71 
	#ERR_IF
 -12

	)

72 
	#ERR_ISCONN
 -13

	)

74 
	#ERR_INPROGRESS
 -14

	)

77 #ifde‡
LWIP_DEBUG


78 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

80 
	#lwù_°ªº
(
x
Ë""

	)

83 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


47 
	#ICMP_ER
 0

	)

48 
	#ICMP_DUR
 3

	)

49 
	#ICMP_SQ
 4

	)

50 
	#ICMP_RD
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TE
 11

	)

53 
	#ICMP_PP
 12

	)

54 
	#ICMP_TS
 13

	)

55 
	#ICMP_TSR
 14

	)

56 
	#ICMP_IRQ
 15

	)

57 
	#ICMP_IR
 16

	)

59 
	eicmp_dur_ty≥
 {

60 
ICMP_DUR_NET
 = 0,

61 
ICMP_DUR_HOST
 = 1,

62 
ICMP_DUR_PROTO
 = 2,

63 
ICMP_DUR_PORT
 = 3,

64 
ICMP_DUR_FRAG
 = 4,

65 
ICMP_DUR_SR
 = 5

68 
	eicmp_ã_ty≥
 {

69 
ICMP_TE_TTL
 = 0,

70 
ICMP_TE_FRAG
 = 1

73 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

75 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

76 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

78 #ifde‡
PACK_STRUCT_USE_INCLUDES


79 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sicmp_echo_hdr
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

91 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

93 } 
PACK_STRUCT_STRUCT
;

94 
PACK_STRUCT_END


95 #ifde‡
PACK_STRUCT_USE_INCLUDES


96 
	~"¨ch/ï°ru˘.h
"

99 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

100 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

103 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

104 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

106 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


52 
	#IP_PROTO_IGMP
 2

	)

53 
	#IGMP_TTL
 1

	)

54 
	#IGMP_MINLEN
 8

	)

55 
	#ROUTER_ALERT
 0x9404

	)

56 
	#ROUTER_ALERTLEN
 4

	)

61 
	#IGMP_MEMB_QUERY
 0x11

	)

62 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

63 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

64 
	#IGMP_LEAVE_GROUP
 0x17

	)

67 
	#IGMP_TMR_INTERVAL
 100

	)

68 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

69 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

72 
	#IGMP_DEL_MAC_FILTER
 0

	)

73 
	#IGMP_ADD_MAC_FILTER
 1

	)

76 
	#IGMP_GROUP_NON_MEMBER
 0

	)

77 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

78 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

83 #ifde‡
PACK_STRUCT_USE_INCLUDES


84 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sigmp_msg
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
igmp_group_addªss
);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

110 
	sigmp_group
 {

111 
igmp_group
 *
√xt
;

112 
√tif
 *
öãrÁ˚
;

113 
ù_addr
 
group_addªss
;

114 
u8_t
 
œ°_ªp‹ãr_Êag
;

115 
u8_t
 
group_°©e
;

116 
u16_t
 
timî
;

117 
u8_t
 
u£
;

122 
igmp_öô
();

124 
îr_t
 
igmp_°¨t
–
√tif
 *netif);

126 
îr_t
 
igmp_°›
–
√tif
 *netif);

128 
igmp_ªp‹t_groups
–
√tif
 *netif);

130 
igmp_group
 *
igmp_lookf‹_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

132 
igmp_group
 *
igmp_lookup_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

134 
îr_t
 
igmp_ªmove_group
–
igmp_group
 *
group
);

136 
igmp_öput
–
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
);

138 
îr_t
 
igmp_joögroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

140 
îr_t
 
igmp_Àavegroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

142 
igmp_tmr
();

144 
igmp_timeout
–
igmp_group
 *
group
);

146 
igmp_°¨t_timî
–
igmp_group
 *
group
, 
u8_t
 
max_time
);

148 
igmp_°›_timî
–
igmp_group
 *
group
);

150 
igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
);

152 
îr_t
 
igmp_ù_ouçut_if
–
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
, 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif);

154 
igmp_£nd
–
igmp_group
 *
group
, 
u8_t
 
ty≥
);

156 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	sö_addr
 {

43 
u32_t
 
s_addr
;

46 
	#INADDR_NONE
 ((
u32_t
)0xffffffffULË

	)

47 
	#INADDR_LOOPBACK
 ((
u32_t
)0x7f000001ULË

	)

48 
	#INADDR_ANY
 ((
u32_t
)0x00000000ULË

	)

49 
	#INADDR_BROADCAST
 ((
u32_t
)0xffffffffULË

	)

51 
u32_t
 
öë_addr
(c⁄° *
˝
);

52 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

53 *
öë_¡ﬂ
(
ö_addr
 
addr
);

55 #ifde‡
ht⁄s


56 #unde‡
ht⁄s


58 #ifde‡
ht⁄l


59 #unde‡
ht⁄l


61 #ifde‡
¡ohs


62 #unde‡
¡ohs


64 #ifde‡
¡ohl


65 #unde‡
¡ohl


68 #i‚de‡
LWIP_PLATFORM_BYTESWAP


69 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

72 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


44 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

45 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

46 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

47 
ù_addr
 *
§c
, ù_add∏*
de°
,

48 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

49 #i‡
LWIP_UDPLITE


50 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

51 
ù_addr
 *
§c
, ù_add∏*
de°
,

52 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

55 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 3U

	)

46 
	#LWIP_VERSION_REVISION
 1U

	)

50 
	#LWIP_VERSION_RC
 255U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


48 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

50 
	#IP_HLEN
 20

	)

52 
	#IP_PROTO_ICMP
 1

	)

53 
	#IP_PROTO_UDP
 17

	)

54 
	#IP_PROTO_UDPLITE
 136

	)

55 
	#IP_PROTO_TCP
 6

	)

60 #ifde‡
IP_HDRINCL


61 #unde‡
IP_HDRINCL


63 
	#IP_HDRINCL
 
NULL


	)

65 #i‡
LWIP_NETIF_HWADDRHINT


66 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

68 
	#IP_PCB_ADDRHINT


	)

75 
	#IP_PCB
 \

77 
ù_addr
 
loˇl_ù
; \

78 
ù_addr
 
ªmŸe_ù
; \

80 
u16_t
 
so_›ti⁄s
; \

82 
u8_t
 
tos
; \

84 
u8_t
 
âl
 \

86 
IP_PCB_ADDRHINT


	)

88 
	sù_pcb
 {

90 
IP_PCB
;

96 
	#SOF_DEBUG
 (
u16_t
)0x0001U

	)

97 
	#SOF_ACCEPTCONN
 (
u16_t
)0x0002U

	)

98 
	#SOF_REUSEADDR
 (
u16_t
)0x0004U

	)

99 
	#SOF_KEEPALIVE
 (
u16_t
)0x0008U

	)

100 
	#SOF_DONTROUTE
 (
u16_t
)0x0010U

	)

101 
	#SOF_BROADCAST
 (
u16_t
)0x0020U

	)

102 
	#SOF_USELOOPBACK
 (
u16_t
)0x0040U

	)

103 
	#SOF_LINGER
 (
u16_t
)0x0080U

	)

104 
	#SOF_OOBINLINE
 (
u16_t
)0x0100U

	)

105 
	#SOF_REUSEPORT
 (
u16_t
)0x0200U

	)

108 #ifde‡
PACK_STRUCT_USE_INCLUDES


109 
	~"¨ch/bp°ru˘.h
"

111 
PACK_STRUCT_BEGIN


112 
	sù_hdr
 {

114 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

116 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

118 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

126 
PACK_STRUCT_FIELD
(
u16_t
 
_âl_¥Ÿo
);

128 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

130 
PACK_STRUCT_FIELD
(
ù_addr
 
§c
);

131 
PACK_STRUCT_FIELD
(
ù_addr
 
de°
);

132 } 
PACK_STRUCT_STRUCT
;

133 
PACK_STRUCT_END


134 #ifde‡
PACK_STRUCT_USE_INCLUDES


135 
	~"¨ch/ï°ru˘.h
"

138 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

139 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

140 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

141 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

142 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

143 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

144 
	#IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

145 
	#IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

146 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

148 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

149 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

150 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

151 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

152 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

153 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`IPH_TTL
(hdrË<< 8)))

	)

154 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

156 
	#ù_öô
(Ë

	)

157 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

158 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

159 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

160 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

161 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

162 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

163 
√tif
 *netif);

164 #i‡
LWIP_NETIF_HWADDRHINT


165 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

166 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

168 #i‡
IP_OPTIONS_SEND


169 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

170 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

171 
u16_t
 
›éí
);

173 
√tif
 *
ù_cuºít_√tif
();

174 c⁄° 
ù_hdr
 *
ù_cuºít_hódî
();

175 #i‡
IP_DEBUG


176 
ù_debug_¥öt
(
pbuf
 *
p
);

178 
	#ù_debug_¥öt
(
p
)

	)

181 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/öë.h
"

39 #ifde‡
__˝lu•lus


43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
√tif
;

73 c⁄° 
ù_addr
 
ù_addr_™y
;

74 c⁄° 
ù_addr
 
ù_addr_brﬂdˇ°
;

79 
	#IP_ADDR_ANY
 ((
ù_addr
 *)&
ù_addr_™y
)

	)

80 
	#IP_ADDR_BROADCAST
 ((
ù_addr
 *)&
ù_addr_brﬂdˇ°
)

	)

87 
	#IN_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

88 
	#IN_CLASSA_NET
 0xff000000

	)

89 
	#IN_CLASSA_NSHIFT
 24

	)

90 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

91 
	#IN_CLASSA_MAX
 128

	)

93 
	#IN_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

94 
	#IN_CLASSB_NET
 0xffff0000

	)

95 
	#IN_CLASSB_NSHIFT
 16

	)

96 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

97 
	#IN_CLASSB_MAX
 65536

	)

99 
	#IN_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

100 
	#IN_CLASSC_NET
 0xffffff00

	)

101 
	#IN_CLASSC_NSHIFT
 8

	)

102 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

104 
	#IN_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

105 
	#IN_CLASSD_NET
 0xf0000000

	)

106 
	#IN_CLASSD_NSHIFT
 28

	)

107 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

108 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

110 
	#IN_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

111 
	#IN_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

113 
	#IN_LOOPBACKNET
 127

	)

115 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

116 (
ùaddr
)->
addr
 = 
	`ht⁄l
(((
u32_t
)((
a
) & 0xff) << 24) | \

117 ((
u32_t
)((
b
) & 0xff) << 16) | \

118 ((
u32_t
)((
c
) & 0xff) << 8) | \

119 (
u32_t
)((
d
Ë& 0xff))

	)

121 
	#ù_addr_£t
(
de°
, 
§c
Ë(de°)->
addr
 = \

122 ((
§c
Ë=
NULL
? 0:\

123 (
§c
)->
addr
)

	)

132 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

133 (
mask
)->
addr
) == \

134 ((
addr2
)->
addr
 & \

135 (
mask
)->
addr
))

	)

136 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

138 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =0)

	)

140 
u8_t
 
ù_addr_isbrﬂdˇ°
(
ù_addr
 *, 
√tif
 *);

142 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xf0000000UL)Ë=¡ohl(0xe0000000UL))

	)

144 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xffff0000UL)Ë=¡ohl(0xa9„0000UL))

	)

146 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

147 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

148 
ùaddr
 !
NULL
 ? \

149 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 24) & 0xff : 0, \

150 
ùaddr
 !
NULL
 ? \

151 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 16) & 0xff : 0, \

152 
ùaddr
 !
NULL
 ? \

153 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 8) & 0xff : 0, \

154 
ùaddr
 !
NULL
 ? \

155 (
u16_t
)
	`¡ohl
((
ùaddr
)->
addr
Ë& 0xf‡: 0))

	)

159 
	#ù4_addr1
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 24Ë& 0xff)

	)

160 
	#ù4_addr2
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 16Ë& 0xff)

	)

161 
	#ù4_addr3
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 8Ë& 0xff)

	)

162 
	#ù4_addr4
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
)Ë& 0xff)

	)

164 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
);

72 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

61 #i‚de‡
mem_ªÆloc


62 *
	$mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
)

64 
	`LWIP_UNUSED_ARG
(
size
);

65  
mem
;

66 
	}
}

73 #i‡
MEM_SIZE
 > 64000l

74 
u32_t
 
	tmem_size_t
;

76 
u16_t
 
	tmem_size_t
;

79 #i‡
MEM_USE_POOLS


81 
	#mem_öô
()

	)

84 
	#mem_ªÆloc
(
mem
, 
size
Ë(mem)

	)

87 
mem_öô
();

88 *
mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
);

90 *
mem_mÆloc
(
mem_size_t
 
size
);

91 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

92 
mem_‰ì
(*
mem
);

95 #i‚de‡
LWIP_MEM_ALIGN_SIZE


96 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

99 #i‚de‡
LWIP_MEM_ALIGN


100 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

103 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


79 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

82 #i‡
MEMP_MEM_MALLOC


84 
	~"mem.h
"

86 
	#memp_öô
()

	)

87 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

88 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

92 #i‡
MEM_USE_POOLS


94 
	smemp_mÆloc_hñ≥r


96 
memp_t
 
	gpoﬁƒ
;

100 
memp_öô
();

102 #i‡
MEMP_OVERFLOW_CHECK


103 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

104 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

106 *
memp_mÆloc
(
memp_t
 
ty≥
);

108 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

112 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

51 #i‡
LWIP_NETCONN


52 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

53 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

56 #i‡
NO_SYS
==0

57 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

58 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

61 #i‡
ARP_QUEUEING


62 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

65 #i‡
LWIP_IGMP


66 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

69 #i‡
NO_SYS
==0

70 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

82 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

83 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

90 #i‡
MEMP_USE_CUSTOM_POOLS


91 
	~"lwùpoﬁs.h
"

98 #unde‡
LWIP_MEMPOOL


99 #unde‡
LWIP_MALLOC_MEMPOOL


100 #unde‡
LWIP_MALLOC_MEMPOOL_START


101 #unde‡
LWIP_MALLOC_MEMPOOL_END


102 #unde‡
LWIP_PBUF_MEMPOOL


	@firmware/octoclock/include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

38 #ifde‡
__˝lu•lus


42 
	s√tbuf
 {

43 
pbuf
 *
p
, *
±r
;

44 
ù_addr
 *
addr
;

45 
u16_t
 
p‹t
;

49 
√tbuf
 * 
√tbuf_√w
 ();

50 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

51 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

52 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

53 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

54 c⁄° *
d©≠å
, 
u16_t
 
size
);

55 
√tbuf_chaö
 (
√tbuf
 *
hód
,

56 
√tbuf
 *
èû
);

58 
u16_t
 
√tbuf_Àn
 (
√tbuf
 *
buf
);

59 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

60 **
d©≠å
, 
u16_t
 *
Àn
);

61 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

62 
√tbuf_fú°
 (
√tbuf
 *
buf
);

65 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

66 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

67 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

68 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

69 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

70 
	#√tbuf_‰omaddr
(
buf
Ë((buf)->
addr
)

	)

71 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

73 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/netdb.h

30 
	~"lwù/›t.h
"

32 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


34 
	~<°ddef.h
>

36 
	~"lwù/sockës.h
"

39 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


40 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

43 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


44 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

47 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


48 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

51 #i‡
LWIP_DNS_API_DEFINE_ERRORS


53 
	#EAI_NONAME
 200

	)

54 
	#EAI_SERVICE
 201

	)

55 
	#EAI_FAIL
 202

	)

56 
	#EAI_MEMORY
 203

	)

58 
	#HOST_NOT_FOUND
 210

	)

59 
	#NO_DATA
 211

	)

60 
	#NO_RECOVERY
 212

	)

61 
	#TRY_AGAIN
 213

	)

64 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


65 
	sho°ít
 {

66 *
	mh_«me
;

67 **
	mh_Æü£s
;

69 
	mh_addπy≥
;

70 
	mh_Àngth
;

71 **
	mh_addr_li°
;

73 
	#h_addr
 
h_addr_li°
[0]

	)

76 
	saddröfo
 {

77 
	mai_Êags
;

78 
	mai_Ámûy
;

79 
	mai_sockty≥
;

80 
	mai_¥Ÿocﬁ
;

81 
sockÀn_t
 
	mai_addæí
;

82 
sockaddr
 *
	mai_addr
;

83 *
	mai_ˇn⁄«me
;

84 
addröfo
 *
	mai_√xt
;

88 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


90 
h_î∫o
;

93 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

94 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

95 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

96 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

97 
lwù_gëaddröfo
(c⁄° *
nodíame
,

98 c⁄° *
£rv«me
,

99 c⁄° 
addröfo
 *
höts
,

100 
addröfo
 **
ªs
);

102 #i‡
LWIP_COMPAT_SOCKETS


103 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

104 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

105 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

106 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
(
a
)

	)

107 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

108 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

	@firmware/octoclock/include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/öë.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

71 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

73 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

75 
	#NETIF_FLAG_DHCP
 0x08U

	)

78 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

80 
	#NETIF_FLAG_ETHARP
 0x20U

	)

82 
	#NETIF_FLAG_IGMP
 0x40U

	)

88 
	s√tif
 {

90 
√tif
 *
√xt
;

93 
ù_addr
 ip_addr;

94 
ù_addr
 
√tmask
;

95 
ù_addr
 
gw
;

99 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *
öp
);

103 
îr_t
 (* 
ouçut
)(
√tif
 *√tif, 
pbuf
 *
p
,

104 
ù_addr
 *
ùaddr
);

108 
îr_t
 (* 
lökouçut
)(
√tif
 *√tif, 
pbuf
 *
p
);

109 #i‡
LWIP_NETIF_STATUS_CALLBACK


112 (* 
°©us_ˇŒback
)(
√tif
 *netif);

114 #i‡
LWIP_NETIF_LINK_CALLBACK


117 (* 
lök_ˇŒback
)(
√tif
 *netif);

121 *
°©e
;

122 #i‡
LWIP_DHCP


124 
dh˝
 *dhcp;

126 #i‡
LWIP_AUTOIP


128 
autoù
 *autoip;

130 #i‡
LWIP_NETIF_HOSTNAME


132 * 
ho°«me
;

135 
u8_t
 
hwaddr_Àn
;

137 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

139 
u16_t
 
mtu
;

141 
u8_t
 
Êags
;

143 
«me
[2];

145 
u8_t
 
num
;

146 #i‡
LWIP_SNMP


148 
u8_t
 
lök_ty≥
;

150 
u32_t
 
lök_•ìd
;

152 
u32_t
 
ts
;

154 
u32_t
 
iföo˘ës
;

155 
u32_t
 
iföuˇ°pkts
;

156 
u32_t
 
ifönuˇ°pkts
;

157 
u32_t
 
ifödisˇrds
;

158 
u32_t
 
ifouto˘ës
;

159 
u32_t
 
ifoutuˇ°pkts
;

160 
u32_t
 
ifouäuˇ°pkts
;

161 
u32_t
 
ifoutdisˇrds
;

163 #i‡
LWIP_IGMP


165 
îr_t
 (*
igmp_mac_fûãr
)–
√tif
 *√tif, 
ù_addr
 *
group
, 
u8_t
 
a˘i⁄
);

167 #i‡
LWIP_NETIF_HWADDRHINT


168 
u8_t
 *
addr_höt
;

170 #i‡
ENABLE_LOOPBACK


172 
pbuf
 *
lo›_fú°
;

173 
pbuf
 *
lo›_œ°
;

174 #i‡
LWIP_LOOPBACK_MAX_PBUFS


175 
u16_t
 
lo›_˙t_cuºít
;

180 #i‡
LWIP_SNMP


181 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

183 
√tif
->
lök_ty≥
 = 
ty≥
; \

185 
√tif
->
lök_•ìd
 = 
•ìd
; \

186 
√tif
->
ts
 = 0; \

187 
√tif
->
iföo˘ës
 = 0; \

188 
√tif
->
iföuˇ°pkts
 = 0; \

189 
√tif
->
ifönuˇ°pkts
 = 0; \

190 
√tif
->
ifödisˇrds
 = 0; \

191 
√tif
->
ifouto˘ës
 = 0; \

192 
√tif
->
ifoutuˇ°pkts
 = 0; \

193 
√tif
->
ifouäuˇ°pkts
 = 0; \

194 
√tif
->
ifoutdisˇrds
 = 0

	)

196 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

201 
√tif
 *
√tif_li°
;

203 
√tif
 *
√tif_deÁu…
;

205 
	#√tif_öô
(Ë

	)

207 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

208 
ù_addr
 *
gw
,

209 *
°©e
,

210 
îr_t
 (* 
öô
)(
√tif
 *netif),

211 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif));

214 
√tif_£t_addr
(
√tif
 *√tif,
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

215 
ù_addr
 *
gw
);

216 
√tif_ªmove
(
√tif
 *Çetif);

222 
√tif
 *
√tif_föd
(*
«me
);

224 
√tif_£t_deÁu…
(
√tif
 *netif);

226 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

227 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
);

228 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
);

230 
√tif_£t_up
(
√tif
 *netif);

231 
√tif_£t_down
(
√tif
 *netif);

232 
u8_t
 
√tif_is_up
(
√tif
 *netif);

234 #i‡
LWIP_NETIF_STATUS_CALLBACK


238 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif));

241 #i‡
LWIP_NETIF_LINK_CALLBACK


242 
√tif_£t_lök_up
(
√tif
 *netif);

243 
√tif_£t_lök_down
(
√tif
 *netif);

244 
u8_t
 
√tif_is_lök_up
(
√tif
 *netif);

248 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif));

251 #ifde‡
__˝lu•lus


255 #i‡
ENABLE_LOOPBACK


256 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
de°_ù
);

257 
√tif_pﬁl
(
√tif
 *netif);

258 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


259 
√tif_pﬁl_Æl
();

	@firmware/octoclock/include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 
	s√tiÁpi_msg_msg
 {

45 #i‡!
LWIP_TCPIP_CORE_LOCKING


46 
sys_£m_t
 
£m
;

48 
îr_t
 
îr
;

49 
√tif
 *netif;

52 
ù_addr
 *
ùaddr
;

53 
ù_addr
 *
√tmask
;

54 
ù_addr
 *
gw
;

55 *
°©e
;

56 
îr_t
 (* 
öô
Ë(
√tif
 *netif);

57 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif);

58 } 
add
;

60 (* 
voidfunc
)(
√tif
 *netif);

61 
îr_t
 (* 
îπfunc
)(
√tif
 *netif);

62 } 
comm⁄
;

63 } 
msg
;

66 
	s√tiÁpi_msg
 {

67 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

68 
√tiÁpi_msg_msg
 
msg
;

73 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

74 
ù_addr
 *
ùaddr
,

75 
ù_addr
 *
√tmask
,

76 
ù_addr
 *
gw
,

77 *
°©e
,

78 
îr_t
 (* 
öô
)(
√tif
 *netif),

79 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif) );

81 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

82 (* 
voidfunc
)(
√tif
 *netif),

83 
îr_t
 (* 
îπfunc
)(
√tif
 *netif) );

85 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

86 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

87 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

88 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

89 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

90 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

91 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

92 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

94 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
MEMCPY


76 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

83 #i‚de‡
SMEMCPY


84 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

97 #i‚de‡
MEM_LIBC_MALLOC


98 
	#MEM_LIBC_MALLOC
 0

	)

106 #i‚de‡
MEMP_MEM_MALLOC


107 
	#MEMP_MEM_MALLOC
 0

	)

115 #i‚de‡
MEM_ALIGNMENT


116 
	#MEM_ALIGNMENT
 1

	)

123 #i‚de‡
MEM_SIZE


124 
	#MEM_SIZE
 1600

	)

136 #i‚de‡
MEMP_OVERFLOW_CHECK


137 
	#MEMP_OVERFLOW_CHECK
 0

	)

144 #i‚de‡
MEMP_SANITY_CHECK


145 
	#MEMP_SANITY_CHECK
 0

	)

154 #i‚de‡
MEM_USE_POOLS


155 
	#MEM_USE_POOLS
 0

	)

162 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


163 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

172 #i‚de‡
MEMP_USE_CUSTOM_POOLS


173 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

194 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


195 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

208 #i‚de‡
MEMP_NUM_PBUF


209 
	#MEMP_NUM_PBUF
 16

	)

216 #i‚de‡
MEMP_NUM_RAW_PCB


217 
	#MEMP_NUM_RAW_PCB
 4

	)

225 #i‚de‡
MEMP_NUM_UDP_PCB


226 
	#MEMP_NUM_UDP_PCB
 4

	)

233 #i‚de‡
MEMP_NUM_TCP_PCB


234 
	#MEMP_NUM_TCP_PCB
 5

	)

241 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


242 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

249 #i‚de‡
MEMP_NUM_TCP_SEG


250 
	#MEMP_NUM_TCP_SEG
 16

	)

257 #i‚de‡
MEMP_NUM_REASSDATA


258 
	#MEMP_NUM_REASSDATA
 5

	)

267 #i‚de‡
MEMP_NUM_ARP_QUEUE


268 
	#MEMP_NUM_ARP_QUEUE
 30

	)

277 #i‚de‡
MEMP_NUM_IGMP_GROUP


278 
	#MEMP_NUM_IGMP_GROUP
 8

	)

285 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


286 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

293 #i‚de‡
MEMP_NUM_NETBUF


294 
	#MEMP_NUM_NETBUF
 2

	)

301 #i‚de‡
MEMP_NUM_NETCONN


302 
	#MEMP_NUM_NETCONN
 4

	)

310 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


311 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

319 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


320 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

326 #i‚de‡
PBUF_POOL_SIZE


327 
	#PBUF_POOL_SIZE
 16

	)

338 #i‚de‡
LWIP_ARP


339 
	#LWIP_ARP
 1

	)

345 #i‚de‡
ARP_TABLE_SIZE


346 
	#ARP_TABLE_SIZE
 10

	)

353 #i‚de‡
ARP_QUEUEING


354 
	#ARP_QUEUEING
 1

	)

365 #i‚de‡
ETHARP_TRUST_IP_MAC


366 
	#ETHARP_TRUST_IP_MAC
 1

	)

379 #i‚de‡
IP_FORWARD


380 
	#IP_FORWARD
 0

	)

388 #i‚de‡
IP_OPTIONS_ALLOWED


389 
	#IP_OPTIONS_ALLOWED
 1

	)

397 #i‚de‡
IP_REASSEMBLY


398 
	#IP_REASSEMBLY
 1

	)

406 #i‚de‡
IP_FRAG


407 
	#IP_FRAG
 1

	)

415 #i‚de‡
IP_REASS_MAXAGE


416 
	#IP_REASS_MAXAGE
 3

	)

425 #i‚de‡
IP_REASS_MAX_PBUFS


426 
	#IP_REASS_MAX_PBUFS
 10

	)

434 #i‚de‡
IP_FRAG_USES_STATIC_BUF


435 
	#IP_FRAG_USES_STATIC_BUF
 1

	)

442 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

443 
	#IP_FRAG_MAX_MTU
 1500

	)

449 #i‚de‡
IP_DEFAULT_TTL


450 
	#IP_DEFAULT_TTL
 255

	)

458 #i‚de‡
IP_SOF_BROADCAST


459 
	#IP_SOF_BROADCAST
 0

	)

466 #i‚de‡
IP_SOF_BROADCAST_RECV


467 
	#IP_SOF_BROADCAST_RECV
 0

	)

479 #i‚de‡
LWIP_ICMP


480 
	#LWIP_ICMP
 1

	)

486 #i‚de‡
ICMP_TTL


487 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

493 #i‚de‡
LWIP_BROADCAST_PING


494 
	#LWIP_BROADCAST_PING
 0

	)

500 #i‚de‡
LWIP_MULTICAST_PING


501 
	#LWIP_MULTICAST_PING
 0

	)

512 #i‚de‡
LWIP_RAW


513 
	#LWIP_RAW
 1

	)

519 #i‚de‡
RAW_TTL


520 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

531 #i‚de‡
LWIP_DHCP


532 
	#LWIP_DHCP
 0

	)

538 #i‚de‡
DHCP_DOES_ARP_CHECK


539 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

550 #i‚de‡
LWIP_AUTOIP


551 
	#LWIP_AUTOIP
 0

	)

558 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


559 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

569 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


570 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

582 #i‚de‡
LWIP_SNMP


583 
	#LWIP_SNMP
 0

	)

590 #i‚de‡
SNMP_CONCURRENT_REQUESTS


591 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

598 #i‚de‡
SNMP_TRAP_DESTINATIONS


599 
	#SNMP_TRAP_DESTINATIONS
 1

	)

605 #i‚de‡
SNMP_PRIVATE_MIB


606 
	#SNMP_PRIVATE_MIB
 0

	)

614 #i‚de‡
SNMP_SAFE_REQUESTS


615 
	#SNMP_SAFE_REQUESTS
 1

	)

626 #i‚de‡
LWIP_IGMP


627 
	#LWIP_IGMP
 0

	)

639 #i‚de‡
LWIP_DNS


640 
	#LWIP_DNS
 0

	)

644 #i‚de‡
DNS_TABLE_SIZE


645 
	#DNS_TABLE_SIZE
 4

	)

649 #i‚de‡
DNS_MAX_NAME_LENGTH


650 
	#DNS_MAX_NAME_LENGTH
 256

	)

654 #i‚de‡
DNS_MAX_SERVERS


655 
	#DNS_MAX_SERVERS
 2

	)

659 #i‚de‡
DNS_DOES_NAME_CHECK


660 
	#DNS_DOES_NAME_CHECK
 1

	)

666 #i‚de‡
DNS_USES_STATIC_BUF


667 
	#DNS_USES_STATIC_BUF
 1

	)

671 #i‚de‡
DNS_MSG_SIZE


672 
	#DNS_MSG_SIZE
 512

	)

685 #i‚de‡
DNS_LOCAL_HOSTLIST


686 
	#DNS_LOCAL_HOSTLIST
 0

	)

691 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


692 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

703 #i‚de‡
LWIP_UDP


704 
	#LWIP_UDP
 1

	)

710 #i‚de‡
LWIP_UDPLITE


711 
	#LWIP_UDPLITE
 0

	)

717 #i‚de‡
UDP_TTL


718 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

729 #i‚de‡
LWIP_TCP


730 
	#LWIP_TCP
 1

	)

736 #i‚de‡
TCP_TTL


737 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

744 #i‚de‡
TCP_WND


745 
	#TCP_WND
 2048

	)

751 #i‚de‡
TCP_MAXRTX


752 
	#TCP_MAXRTX
 12

	)

758 #i‚de‡
TCP_SYNMAXRTX


759 
	#TCP_SYNMAXRTX
 6

	)

766 #i‚de‡
TCP_QUEUE_OOSEQ


767 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

777 #i‚de‡
TCP_MSS


778 
	#TCP_MSS
 128

	)

789 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


790 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

797 #i‚de‡
TCP_SND_BUF


798 
	#TCP_SND_BUF
 256

	)

805 #i‚de‡
TCP_SND_QUEUELEN


806 
	#TCP_SND_QUEUELEN
 (4 * (
TCP_SND_BUF
/
TCP_MSS
))

	)

814 #i‚de‡
TCP_SNDLOWAT


815 
	#TCP_SNDLOWAT
 (
TCP_SND_BUF
/2)

	)

821 #i‚de‡
TCP_LISTEN_BACKLOG


822 
	#TCP_LISTEN_BACKLOG
 0

	)

830 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


831 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

837 #i‚de‡
LWIP_TCP_TIMESTAMPS


838 
	#LWIP_TCP_TIMESTAMPS
 0

	)

845 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


846 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

856 #i‚de‡
LWIP_EVENT_API


857 
	#LWIP_EVENT_API
 0

	)

858 
	#LWIP_CALLBACK_API
 1

	)

860 
	#LWIP_EVENT_API
 1

	)

861 
	#LWIP_CALLBACK_API
 0

	)

875 #i‚de‡
PBUF_LINK_HLEN


876 
	#PBUF_LINK_HLEN
 14

	)

884 #i‚de‡
PBUF_POOL_BUFSIZE


885 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

897 #i‚de‡
LWIP_NETIF_HOSTNAME


898 
	#LWIP_NETIF_HOSTNAME
 0

	)

904 #i‚de‡
LWIP_NETIF_API


905 
	#LWIP_NETIF_API
 0

	)

912 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


913 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

920 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


921 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

931 #i‚de‡
LWIP_NETIF_HWADDRHINT


932 
	#LWIP_NETIF_HWADDRHINT
 0

	)

939 #i‚de‡
LWIP_NETIF_LOOPBACK


940 
	#LWIP_NETIF_LOOPBACK
 0

	)

947 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


948 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

964 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


965 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

977 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


978 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

989 #i‚de‡
LWIP_HAVE_LOOPIF


990 
	#LWIP_HAVE_LOOPIF
 0

	)

1001 #i‚de‡
LWIP_HAVE_SLIPIF


1002 
	#LWIP_HAVE_SLIPIF
 0

	)

1013 #i‚de‡
TCPIP_THREAD_NAME


1014 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1022 #i‚de‡
TCPIP_THREAD_STACKSIZE


1023 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1031 #i‚de‡
TCPIP_THREAD_PRIO


1032 
	#TCPIP_THREAD_PRIO
 1

	)

1040 #i‚de‡
TCPIP_MBOX_SIZE


1041 
	#TCPIP_MBOX_SIZE
 0

	)

1047 #i‚de‡
SLIPIF_THREAD_NAME


1048 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1056 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1057 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1065 #i‚de‡
SLIPIF_THREAD_PRIO


1066 
	#SLIPIF_THREAD_PRIO
 1

	)

1072 #i‚de‡
PPP_THREAD_NAME


1073 
	#PPP_THREAD_NAME
 "µpMaö"

	)

1081 #i‚de‡
PPP_THREAD_STACKSIZE


1082 
	#PPP_THREAD_STACKSIZE
 0

	)

1090 #i‚de‡
PPP_THREAD_PRIO


1091 
	#PPP_THREAD_PRIO
 1

	)

1097 #i‚de‡
DEFAULT_THREAD_NAME


1098 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1106 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1107 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1115 #i‚de‡
DEFAULT_THREAD_PRIO


1116 
	#DEFAULT_THREAD_PRIO
 1

	)

1124 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1125 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1133 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1134 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1142 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1143 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1151 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1152 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1164 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1165 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1171 #i‚de‡
LWIP_NETCONN


1172 
	#LWIP_NETCONN
 1

	)

1183 #i‚de‡
LWIP_SOCKET


1184 
	#LWIP_SOCKET
 1

	)

1191 #i‚de‡
LWIP_COMPAT_SOCKETS


1192 
	#LWIP_COMPAT_SOCKETS
 1

	)

1200 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1201 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1209 #i‚de‡
LWIP_TCP_KEEPALIVE


1210 
	#LWIP_TCP_KEEPALIVE
 0

	)

1216 #i‚de‡
LWIP_SO_RCVTIMEO


1217 
	#LWIP_SO_RCVTIMEO
 0

	)

1223 #i‚de‡
LWIP_SO_RCVBUF


1224 
	#LWIP_SO_RCVBUF
 0

	)

1230 #i‚de‡
RECV_BUFSIZE_DEFAULT


1231 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1237 #i‚de‡
SO_REUSE


1238 
	#SO_REUSE
 0

	)

1249 #i‚de‡
LWIP_STATS


1250 
	#LWIP_STATS
 1

	)

1253 #i‡
LWIP_STATS


1258 #i‚de‡
LWIP_STATS_DISPLAY


1259 
	#LWIP_STATS_DISPLAY
 0

	)

1265 #i‚de‡
LINK_STATS


1266 
	#LINK_STATS
 1

	)

1272 #i‚de‡
ETHARP_STATS


1273 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1279 #i‚de‡
IP_STATS


1280 
	#IP_STATS
 1

	)

1287 #i‚de‡
IPFRAG_STATS


1288 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1294 #i‚de‡
ICMP_STATS


1295 
	#ICMP_STATS
 1

	)

1301 #i‚de‡
IGMP_STATS


1302 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1309 #i‚de‡
UDP_STATS


1310 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1317 #i‚de‡
TCP_STATS


1318 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1324 #i‚de‡
MEM_STATS


1325 
	#MEM_STATS
 1

	)

1331 #i‚de‡
MEMP_STATS


1332 
	#MEMP_STATS
 1

	)

1338 #i‚de‡
SYS_STATS


1339 
	#SYS_STATS
 1

	)

1344 
	#LINK_STATS
 0

	)

1345 
	#IP_STATS
 0

	)

1346 
	#IPFRAG_STATS
 0

	)

1347 
	#ICMP_STATS
 0

	)

1348 
	#IGMP_STATS
 0

	)

1349 
	#UDP_STATS
 0

	)

1350 
	#TCP_STATS
 0

	)

1351 
	#MEM_STATS
 0

	)

1352 
	#MEMP_STATS
 0

	)

1353 
	#SYS_STATS
 0

	)

1354 
	#LWIP_STATS_DISPLAY
 0

	)

1366 #i‚de‡
PPP_SUPPORT


1367 
	#PPP_SUPPORT
 0

	)

1373 #i‚de‡
PPPOE_SUPPORT


1374 
	#PPPOE_SUPPORT
 0

	)

1380 #i‚de‡
PPPOS_SUPPORT


1381 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1384 #i‡
PPP_SUPPORT


1389 #i‚de‡
NUM_PPP


1390 
	#NUM_PPP
 1

	)

1396 #i‚de‡
PAP_SUPPORT


1397 
	#PAP_SUPPORT
 0

	)

1403 #i‚de‡
CHAP_SUPPORT


1404 
	#CHAP_SUPPORT
 0

	)

1410 #i‚de‡
MSCHAP_SUPPORT


1411 
	#MSCHAP_SUPPORT
 0

	)

1417 #i‚de‡
CBCP_SUPPORT


1418 
	#CBCP_SUPPORT
 0

	)

1424 #i‚de‡
CCP_SUPPORT


1425 
	#CCP_SUPPORT
 0

	)

1431 #i‚de‡
VJ_SUPPORT


1432 
	#VJ_SUPPORT
 0

	)

1438 #i‚de‡
MD5_SUPPORT


1439 
	#MD5_SUPPORT
 0

	)

1445 #i‚de‡
FSM_DEFTIMEOUT


1446 
	#FSM_DEFTIMEOUT
 6

	)

1449 #i‚de‡
FSM_DEFMAXTERMREQS


1450 
	#FSM_DEFMAXTERMREQS
 2

	)

1453 #i‚de‡
FSM_DEFMAXCONFREQS


1454 
	#FSM_DEFMAXCONFREQS
 10

	)

1457 #i‚de‡
FSM_DEFMAXNAKLOOPS


1458 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1461 #i‚de‡
UPAP_DEFTIMEOUT


1462 
	#UPAP_DEFTIMEOUT
 6

	)

1465 #i‚de‡
UPAP_DEFREQTIME


1466 
	#UPAP_DEFREQTIME
 30

	)

1469 #i‚de‡
CHAP_DEFTIMEOUT


1470 
	#CHAP_DEFTIMEOUT
 6

	)

1473 #i‚de‡
CHAP_DEFTRANSMITS


1474 
	#CHAP_DEFTRANSMITS
 10

	)

1478 #i‚de‡
LCP_ECHOINTERVAL


1479 
	#LCP_ECHOINTERVAL
 0

	)

1483 #i‚de‡
LCP_MAXECHOFAILS


1484 
	#LCP_MAXECHOFAILS
 3

	)

1488 #i‚de‡
PPP_MAXIDLEFLAG


1489 
	#PPP_MAXIDLEFLAG
 100

	)

1500 
	#PPP_MTU
 1500

	)

1501 #i‚de‡
PPP_MAXMTU


1503 
	#PPP_MAXMTU
 1500

	)

1505 
	#PPP_MINMTU
 64

	)

1506 
	#PPP_MRU
 1500

	)

1507 
	#PPP_MAXMRU
 1500

	)

1508 #i‚de‡
PPP_DEFMRU


1509 
	#PPP_DEFMRU
 296

	)

1511 
	#PPP_MINMRU
 128

	)

1514 
	#MAXNAMELEN
 256

	)

1515 
	#MAXSECRETLEN
 256

	)

1527 #i‚de‡
CHECKSUM_GEN_IP


1528 
	#CHECKSUM_GEN_IP
 1

	)

1534 #i‚de‡
CHECKSUM_GEN_UDP


1535 
	#CHECKSUM_GEN_UDP
 1

	)

1541 #i‚de‡
CHECKSUM_GEN_TCP


1542 
	#CHECKSUM_GEN_TCP
 1

	)

1548 #i‚de‡
CHECKSUM_CHECK_IP


1549 
	#CHECKSUM_CHECK_IP
 1

	)

1555 #i‚de‡
CHECKSUM_CHECK_UDP


1556 
	#CHECKSUM_CHECK_UDP
 1

	)

1562 #i‚de‡
CHECKSUM_CHECK_TCP


1563 
	#CHECKSUM_CHECK_TCP
 1

	)

1576 #i‚de‡
LWIP_DBG_MIN_LEVEL


1577 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_OFF


	)

1584 #i‚de‡
LWIP_DBG_TYPES_ON


1585 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1591 #i‚de‡
ETHARP_DEBUG


1592 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1598 #i‚de‡
NETIF_DEBUG


1599 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1605 #i‚de‡
PBUF_DEBUG


1606 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1612 #i‚de‡
API_LIB_DEBUG


1613 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1619 #i‚de‡
API_MSG_DEBUG


1620 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1626 #i‚de‡
SOCKETS_DEBUG


1627 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1633 #i‚de‡
ICMP_DEBUG


1634 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1640 #i‚de‡
IGMP_DEBUG


1641 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1647 #i‚de‡
INET_DEBUG


1648 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1654 #i‚de‡
IP_DEBUG


1655 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1661 #i‚de‡
IP_REASS_DEBUG


1662 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1668 #i‚de‡
RAW_DEBUG


1669 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1675 #i‚de‡
MEM_DEBUG


1676 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1682 #i‚de‡
MEMP_DEBUG


1683 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1689 #i‚de‡
SYS_DEBUG


1690 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1696 #i‚de‡
TCP_DEBUG


1697 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1703 #i‚de‡
TCP_INPUT_DEBUG


1704 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1710 #i‚de‡
TCP_FR_DEBUG


1711 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1718 #i‚de‡
TCP_RTO_DEBUG


1719 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1725 #i‚de‡
TCP_CWND_DEBUG


1726 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1732 #i‚de‡
TCP_WND_DEBUG


1733 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1739 #i‚de‡
TCP_OUTPUT_DEBUG


1740 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1746 #i‚de‡
TCP_RST_DEBUG


1747 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1753 #i‚de‡
TCP_QLEN_DEBUG


1754 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1760 #i‚de‡
UDP_DEBUG


1761 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1767 #i‚de‡
TCPIP_DEBUG


1768 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1774 #i‚de‡
PPP_DEBUG


1775 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

1781 #i‚de‡
SLIP_DEBUG


1782 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

1788 #i‚de‡
DHCP_DEBUG


1789 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

1795 #i‚de‡
AUTOIP_DEBUG


1796 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

1802 #i‚de‡
SNMP_MSG_DEBUG


1803 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1809 #i‚de‡
SNMP_MIB_DEBUG


1810 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

1816 #i‚de‡
DNS_DEBUG


1817 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@firmware/octoclock/include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 
	#PBUF_TRANSPORT_HLEN
 20

	)

44 
	#PBUF_IP_HLEN
 20

	)

47 
PBUF_TRANSPORT
,

48 
PBUF_IP
,

49 
PBUF_LINK
,

50 
PBUF_RAW


51 } 
	tpbuf_œyî
;

54 
PBUF_RAM
,

55 
PBUF_ROM
,

56 
PBUF_REF
,

57 
PBUF_POOL


58 } 
	tpbuf_ty≥
;

62 
	#PBUF_FLAG_PUSH
 0x01U

	)

64 
	spbuf
 {

66 
pbuf
 *
√xt
;

69 *
∑ylﬂd
;

78 
u16_t
 
tŸ_Àn
;

81 
u16_t
 
Àn
;

84 
u8_t
 
ty≥
;

87 
u8_t
 
Êags
;

94 
u16_t
 
ªf
;

99 
	#pbuf_öô
()

	)

101 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
size
, 
pbuf_ty≥
 
ty≥
);

102 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

103 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

104 
pbuf_ªf
(
pbuf
 *
p
);

105 
pbuf_ªf_chaö
(
pbuf
 *
p
);

106 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

107 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

108 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

109 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

110 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

111 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

112 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

113 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

114 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

116 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/öë.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
	søw_pcb
 {

50 
IP_PCB
;

52 
øw_pcb
 *
√xt
;

54 
u8_t
 
¥Ÿocﬁ
;

66 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

67 
ù_addr
 *
addr
);

69 *
ªcv_¨g
;

74 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

75 
øw_ªmove
 (
øw_pcb
 *
pcb
);

76 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

77 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

79 
øw_ªcv
 (
øw_pcb
 *
pcb
,

80 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
,

81 
pbuf
 *
p
,

82 
ù_addr
 *
addr
),

83 *
ªcv_¨g
);

84 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
);

85 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

88 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

89 
	#øw_öô
(Ë

	)

91 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


54 
sio_fd_t
 
sio_›í
(
u8_t
);

57 #i‚de‡
sio_£nd


58 
sio_£nd
(
u8_t
, 
sio_fd_t
);

61 #i‚de‡
sio_ªcv


62 
u8_t
 
sio_ªcv
(
sio_fd_t
);

65 #i‚de‡
sio_ªad


66 
u32_t
 
sio_ªad
(
sio_fd_t
, 
u8_t
 *, u32_t);

69 #i‚de‡
sio_wrôe


70 
u32_t
 
sio_wrôe
(
sio_fd_t
, 
u8_t
 *, u32_t);

73 #i‚de‡
sio_ªad_ab‹t


74 
sio_ªad_ab‹t
(
sio_fd_t
);

77 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/udp.h
"

40 #ifde‡
__˝lu•lus


47 
	e¢mp_ifTy≥
 {

48 
¢mp_ifTy≥_Ÿhî
=1,

49 
¢mp_ifTy≥_ªguœr1822
,

50 
¢mp_ifTy≥_hdh1822
,

51 
¢mp_ifTy≥_ddn_x25
,

52 
¢mp_ifTy≥_rfc877_x25
,

53 
¢mp_ifTy≥_ëhî√t_csmacd
,

54 
¢mp_ifTy≥_iso88023_csmacd
,

55 
¢mp_ifTy≥_iso88024_tokíBus
,

56 
¢mp_ifTy≥_iso88025_tokíRög
,

57 
¢mp_ifTy≥_iso88026_m™
,

58 
¢mp_ifTy≥_°¨L™
,

59 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

60 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

61 
¢mp_ifTy≥_hy≥rch™√l
,

62 
¢mp_ifTy≥_fddi
,

63 
¢mp_ifTy≥_œpb
,

64 
¢mp_ifTy≥_sdlc
,

65 
¢mp_ifTy≥_ds1
,

66 
¢mp_ifTy≥_e1
,

67 
¢mp_ifTy≥_basicISDN
,

68 
¢mp_ifTy≥_¥im¨yISDN
,

69 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

70 
¢mp_ifTy≥_µp
,

71 
¢mp_ifTy≥_so·w¨eLo›back
,

72 
¢mp_ifTy≥_e⁄
,

73 
¢mp_ifTy≥_ëhî√t_3Mbô
,

74 
¢mp_ifTy≥_nsù
,

75 
¢mp_ifTy≥_¶ù
,

76 
¢mp_ifTy≥_u…ø
,

77 
¢mp_ifTy≥_ds3
,

78 
¢mp_ifTy≥_sù
,

79 
¢mp_ifTy≥_‰ame_ªœy


82 #i‡
LWIP_SNMP


85 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

88 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

91 
	s¢mp_obj_id


93 
u8_t
 
Àn
;

94 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

98 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

99 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

100 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

101 
¢mp_öc_sysu±ime
();

102 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

103 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

104 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

105 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

106 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

110 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

111 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

112 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

113 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

114 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

116 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

117 
¢mp_öc_iÊi°
();

118 
¢mp_dec_iÊi°
();

121 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

122 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

125 
¢mp_öc_ùöª˚ives
();

126 
¢mp_öc_ùöhdªº‹s
();

127 
¢mp_öc_ùöaddªº‹s
();

128 
¢mp_öc_ùf‹wd©agøms
();

129 
¢mp_öc_ùöunknow≈rŸos
();

130 
¢mp_öc_ùödisˇrds
();

131 
¢mp_öc_ùödñivîs
();

132 
¢mp_öc_ùouåeque°s
();

133 
¢mp_öc_ùoutdisˇrds
();

134 
¢mp_öc_ùouä‹ouãs
();

135 
¢mp_öc_ùªasmªqds
();

136 
¢mp_öc_ùªasmoks
();

137 
¢mp_öc_ùªasmÁûs
();

138 
¢mp_öc_ù‰agoks
();

139 
¢mp_öc_ù‰agÁûs
();

140 
¢mp_öc_ù‰ag¸óãs
();

141 
¢mp_öc_ùroutögdisˇrds
();

142 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

143 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

144 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

145 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_öc_icmpömsgs
();

149 
¢mp_öc_icmpöîr‹s
();

150 
¢mp_öc_icmpöde°uƒóchs
();

151 
¢mp_öc_icmpötimìxcds
();

152 
¢mp_öc_icmpö∑rm¥obs
();

153 
¢mp_öc_icmpö§cquíchs
();

154 
¢mp_öc_icmpöªdúe˘s
();

155 
¢mp_öc_icmpöechos
();

156 
¢mp_öc_icmpöech‹ïs
();

157 
¢mp_öc_icmpötime°amps
();

158 
¢mp_öc_icmpötime°am¥ïs
();

159 
¢mp_öc_icmpöaddrmasks
();

160 
¢mp_öc_icmpöaddrmaskªps
();

161 
¢mp_öc_icmpoutmsgs
();

162 
¢mp_öc_icmpouãº‹s
();

163 
¢mp_öc_icmpoutde°uƒóchs
();

164 
¢mp_öc_icmpouâimìxcds
();

165 
¢mp_öc_icmpouç¨m¥obs
();

166 
¢mp_öc_icmpout§cquíchs
();

167 
¢mp_öc_icmpouåedúe˘s
();

168 
¢mp_öc_icmpouãchos
();

169 
¢mp_öc_icmpouãch‹ïs
();

170 
¢mp_öc_icmpouâime°amps
();

171 
¢mp_öc_icmpouâime°am¥ïs
();

172 
¢mp_öc_icmpouèddrmasks
();

173 
¢mp_öc_icmpouèddrmaskªps
();

176 
¢mp_öc_t˝a˘ive›ís
();

177 
¢mp_öc_t˝∑ssive›ís
();

178 
¢mp_öc_t˝©ãm±Áûs
();

179 
¢mp_öc_t˝e°abª£ts
();

180 
¢mp_öc_t˝ö£gs
();

181 
¢mp_öc_t˝out£gs
();

182 
¢mp_öc_t˝ªå™s£gs
();

183 
¢mp_öc_t˝öîrs
();

184 
¢mp_öc_t˝ouå°s
();

187 
¢mp_öc_udpöd©agøms
();

188 
¢mp_öc_ud≤›‹ts
();

189 
¢mp_öc_udpöîr‹s
();

190 
¢mp_öc_udpoutd©agøms
();

191 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

192 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_öc_¢mpöpkts
();

196 
¢mp_öc_¢mpouçkts
();

197 
¢mp_öc_¢mpöbadvîsi⁄s
();

198 
¢mp_öc_¢mpöbadcommunôy«mes
();

199 
¢mp_öc_¢mpöbadcommunôyu£s
();

200 
¢mp_öc_¢mpöa¢∑r£îrs
();

201 
¢mp_öc_¢mpötoobigs
();

202 
¢mp_öc_¢mpönosuch«mes
();

203 
¢mp_öc_¢mpöbadvÆues
();

204 
¢mp_öc_¢mpöªad⁄lys
();

205 
¢mp_öc_¢mpögíîrs
();

206 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

207 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

208 
¢mp_öc_¢mpögëªque°s
();

209 
¢mp_öc_¢mpögë√xts
();

210 
¢mp_öc_¢mpö£åeque°s
();

211 
¢mp_öc_¢mpögëª•⁄£s
();

212 
¢mp_öc_¢mpöå≠s
();

213 
¢mp_öc_¢mpouâoobigs
();

214 
¢mp_öc_¢mpouäosuch«mes
();

215 
¢mp_öc_¢mpoutbadvÆues
();

216 
¢mp_öc_¢mpoutgíîrs
();

217 
¢mp_öc_¢mpoutgëªque°s
();

218 
¢mp_öc_¢mpoutgë√xts
();

219 
¢mp_öc_¢mpout£åeque°s
();

220 
¢mp_öc_¢mpoutgëª•⁄£s
();

221 
¢mp_öc_¢mpouâøps
();

222 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

223 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

224 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

231 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

232 
	#¢mp_£t_sysobjid
(
oid
);

	)

233 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

234 
	#¢mp_öc_sysu±ime
()

	)

235 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

236 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

237 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

238 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

239 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

243 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

244 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

245 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

246 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

247 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

249 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

250 
	#¢mp_öc_iÊi°
()

	)

251 
	#¢mp_dec_iÊi°
()

	)

254 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

255 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_öc_ùöª˚ives
()

	)

259 
	#¢mp_öc_ùöhdªº‹s
()

	)

260 
	#¢mp_öc_ùöaddªº‹s
()

	)

261 
	#¢mp_öc_ùf‹wd©agøms
()

	)

262 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

263 
	#¢mp_öc_ùödisˇrds
()

	)

264 
	#¢mp_öc_ùödñivîs
()

	)

265 
	#¢mp_öc_ùouåeque°s
()

	)

266 
	#¢mp_öc_ùoutdisˇrds
()

	)

267 
	#¢mp_öc_ùouä‹ouãs
()

	)

268 
	#¢mp_öc_ùªasmªqds
()

	)

269 
	#¢mp_öc_ùªasmoks
()

	)

270 
	#¢mp_öc_ùªasmÁûs
()

	)

271 
	#¢mp_öc_ù‰agoks
()

	)

272 
	#¢mp_öc_ù‰agÁûs
()

	)

273 
	#¢mp_öc_ù‰ag¸óãs
()

	)

274 
	#¢mp_öc_ùroutögdisˇrds
()

	)

275 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

276 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

277 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

278 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_öc_icmpömsgs
()

	)

282 
	#¢mp_öc_icmpöîr‹s
()

	)

283 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

284 
	#¢mp_öc_icmpötimìxcds
()

	)

285 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

286 
	#¢mp_öc_icmpö§cquíchs
()

	)

287 
	#¢mp_öc_icmpöªdúe˘s
()

	)

288 
	#¢mp_öc_icmpöechos
()

	)

289 
	#¢mp_öc_icmpöech‹ïs
()

	)

290 
	#¢mp_öc_icmpötime°amps
()

	)

291 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

292 
	#¢mp_öc_icmpöaddrmasks
()

	)

293 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

294 
	#¢mp_öc_icmpoutmsgs
()

	)

295 
	#¢mp_öc_icmpouãº‹s
()

	)

296 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

297 
	#¢mp_öc_icmpouâimìxcds
()

	)

298 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

299 
	#¢mp_öc_icmpout§cquíchs
()

	)

300 
	#¢mp_öc_icmpouåedúe˘s
()

	)

301 
	#¢mp_öc_icmpouãchos
()

	)

302 
	#¢mp_öc_icmpouãch‹ïs
()

	)

303 
	#¢mp_öc_icmpouâime°amps
()

	)

304 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

305 
	#¢mp_öc_icmpouèddrmasks
()

	)

306 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

308 
	#¢mp_öc_t˝a˘ive›ís
()

	)

309 
	#¢mp_öc_t˝∑ssive›ís
()

	)

310 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

311 
	#¢mp_öc_t˝e°abª£ts
()

	)

312 
	#¢mp_öc_t˝ö£gs
()

	)

313 
	#¢mp_öc_t˝out£gs
()

	)

314 
	#¢mp_öc_t˝ªå™s£gs
()

	)

315 
	#¢mp_öc_t˝öîrs
()

	)

316 
	#¢mp_öc_t˝ouå°s
()

	)

319 
	#¢mp_öc_udpöd©agøms
()

	)

320 
	#¢mp_öc_ud≤›‹ts
()

	)

321 
	#¢mp_öc_udpöîr‹s
()

	)

322 
	#¢mp_öc_udpoutd©agøms
()

	)

323 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

324 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_öc_¢mpöpkts
()

	)

328 
	#¢mp_öc_¢mpouçkts
()

	)

329 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

330 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

331 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

332 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

333 
	#¢mp_öc_¢mpötoobigs
()

	)

334 
	#¢mp_öc_¢mpönosuch«mes
()

	)

335 
	#¢mp_öc_¢mpöbadvÆues
()

	)

336 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

337 
	#¢mp_öc_¢mpögíîrs
()

	)

338 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

339 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

340 
	#¢mp_öc_¢mpögëªque°s
()

	)

341 
	#¢mp_öc_¢mpögë√xts
()

	)

342 
	#¢mp_öc_¢mpö£åeque°s
()

	)

343 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

344 
	#¢mp_öc_¢mpöå≠s
()

	)

345 
	#¢mp_öc_¢mpouâoobigs
()

	)

346 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

347 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

348 
	#¢mp_öc_¢mpoutgíîrs
()

	)

349 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

350 
	#¢mp_öc_¢mpoutgë√xts
()

	)

351 
	#¢mp_öc_¢mpout£åeque°s
()

	)

352 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

353 
	#¢mp_öc_¢mpouâøps
()

	)

354 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

355 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

356 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

360 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (!0x80 | !0x40)

	)

50 
	#SNMP_ASN1_APPLIC
 (!0x80 | 0x40)

	)

51 
	#SNMP_ASN1_CONTXT
 ( 0x80 | !0x40)

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20)

	)

54 
	#SNMP_ASN1_PRIMIT
 (!0x20)

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
);

95 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

42 #i‡
LWIP_SNMP


44 #i‡
SNMP_PRIVATE_MIB


45 
	~"¥iv©e_mib.h
"

48 #ifde‡
__˝lu•lus


54 #i‚de‡
SNMP_IN_PORT


55 
	#SNMP_IN_PORT
 161

	)

59 #i‚de‡
SNMP_TRAP_PORT


60 
	#SNMP_TRAP_PORT
 162

	)

63 
	#SNMP_ES_NOERROR
 0

	)

64 
	#SNMP_ES_TOOBIG
 1

	)

65 
	#SNMP_ES_NOSUCHNAME
 2

	)

66 
	#SNMP_ES_BADVALUE
 3

	)

67 
	#SNMP_ES_READONLY
 4

	)

68 
	#SNMP_ES_GENERROR
 5

	)

70 
	#SNMP_GENTRAP_COLDSTART
 0

	)

71 
	#SNMP_GENTRAP_WARMSTART
 1

	)

72 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

73 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

75 
	s¢mp_v¨böd


78 
¢mp_v¨böd
 *
√xt
;

80 
¢mp_v¨böd
 *
¥ev
;

83 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

88 
u8_t
 
vÆue_ty≥
;

90 
u8_t
 
vÆue_Àn
;

92 *
vÆue
;

95 
u8_t
 
£qÀ∆í
;

97 
u8_t
 
ﬁíÀn
;

99 
u8_t
 
vÀ∆í
;

101 
u16_t
 
£qÀn
;

103 
u16_t
 
ﬁí
;

105 
u16_t
 
vÀn
;

108 
	s¢mp_v¨böd_roŸ


110 
¢mp_v¨böd
 *
hód
;

111 
¢mp_v¨böd
 *
èû
;

113 
u8_t
 
cou¡
;

115 
u8_t
 
£qÀ∆í
;

117 
u16_t
 
£qÀn
;

121 
	s¢mp_ª•_hódî_Àngths


124 
u8_t
 
îridxÀ∆í
;

126 
u8_t
 
îr°©À∆í
;

128 
u8_t
 
ridÀ∆í
;

130 
u8_t
 
pduÀ∆í
;

132 
u8_t
 
comÀ∆í
;

134 
u8_t
 
vîÀ∆í
;

136 
u8_t
 
£qÀ∆í
;

139 
u16_t
 
îridxÀn
;

141 
u16_t
 
îr°©Àn
;

143 
u16_t
 
ridÀn
;

145 
u16_t
 
pduÀn
;

147 
u16_t
 
comÀn
;

149 
u16_t
 
vîÀn
;

151 
u16_t
 
£qÀn
;

155 
	s¢mp_å≠_hódî_Àngths


158 
u8_t
 
t¶íÀn
;

160 
u8_t
 
°ΩÀ∆í
;

162 
u8_t
 
gå∂íÀn
;

164 
u8_t
 
ØddæíÀn
;

166 
u8_t
 
eidÀ∆í
;

168 
u8_t
 
pduÀ∆í
;

170 
u8_t
 
comÀ∆í
;

172 
u8_t
 
vîÀ∆í
;

174 
u8_t
 
£qÀ∆í
;

177 
u16_t
 
t¶í
;

179 
u16_t
 
°ΩÀn
;

181 
u16_t
 
gå∂í
;

183 
u16_t
 
Øddæí
;

185 
u16_t
 
eidÀn
;

187 
u16_t
 
pduÀn
;

189 
u16_t
 
comÀn
;

191 
u16_t
 
vîÀn
;

193 
u16_t
 
£qÀn
;

197 
	#SNMP_MSG_EMPTY
 0

	)

199 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

202 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

203 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

204 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

205 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

206 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

210 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

211 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

212 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

213 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

214 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

216 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

217 
	s¢mp_msg_p°©


220 
udp_pcb
 *
pcb
;

222 
ù_addr
 
sù
;

224 
u16_t
 
•
;

226 
u8_t
 
π
;

228 
s32_t
 
rid
;

230 
s32_t
 
îr‹_°©us
;

232 
s32_t
 
îr‹_ödex
;

234 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

236 
u8_t
 
com_°æí
;

238 
u8_t
 
°©e
;

240 
mib_exã∫Æ_node
 *
ext_mib_node
;

241 
¢mp_«me_±r
 
ext_«me_±r
;

242 
obj_def
 
ext_obje˘_def
;

243 
¢mp_obj_id
 
ext_oid
;

245 
u8_t
 
vb_idx
;

247 
¢mp_v¨böd
 *
vb_±r
;

249 
¢mp_v¨böd_roŸ
 
övb
;

251 
¢mp_v¨böd_roŸ
 
outvb
;

253 
¢mp_ª•_hódî_Àngths
 
rhl
;

256 
	s¢mp_msg_å≠


259 
udp_pcb
 *
pcb
;

261 
ù_addr
 
dù
;

264 
¢mp_obj_id
 *
íãΩri£
;

266 
u8_t
 
sù_øw
[4];

268 
u32_t
 
gí_å≠
;

270 
u32_t
 
•c_å≠
;

272 
u32_t
 
ts
;

274 
¢mp_v¨böd_roŸ
 
outvb
;

276 
¢mp_å≠_hódî_Àngths
 
thl
;

280 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

282 c⁄° 
¢mp_publiccommunôy
[7];

284 
¢mp_msg_å≠
 
å≠_msg
;

287 
¢mp_öô
();

288 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

289 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
);

292 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

293 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

294 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

295 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

300 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

301 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

302 
¢mp_cﬁd°¨t_å≠
();

303 
¢mp_authÁû_å≠
();

305 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


47 
	~"¥iv©e_mib.h
"

50 #ifde‡
__˝lu•lus


55 
	#MIB_OBJECT_NONE
 0

	)

56 
	#MIB_OBJECT_SCALAR
 1

	)

57 
	#MIB_OBJECT_TAB
 2

	)

60 
	#MIB_OBJECT_READ_ONLY
 0

	)

61 
	#MIB_OBJECT_READ_WRITE
 1

	)

62 
	#MIB_OBJECT_WRITE_ONLY
 2

	)

63 
	#MIB_OBJECT_NOT_ACCESSIBLE
 3

	)

66 
	sobj_def


69 
u8_t
 
ö°™˚
;

71 
u8_t
 
ac˚ss
;

73 
u8_t
 
a¢_ty≥
;

75 
u16_t
 
v_Àn
;

77 
u8_t
 
id_ö°_Àn
;

79 
s32_t
 *
id_ö°_±r
;

82 
	s¢mp_«me_±r


84 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

89 
	#MIB_NODE_SC
 0x01

	)

91 
	#MIB_NODE_AR
 0x02

	)

93 
	#MIB_NODE_RA
 0x03

	)

95 
	#MIB_NODE_LR
 0x04

	)

97 
	#MIB_NODE_EX
 0x05

	)

100 
	smib_node


103 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

106 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

108 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 c⁄° 
u8_t
 
node_ty≥
;

114 c⁄° 
u16_t
 
maxÀngth
;

118 
mib_node
 
	tmib_sˇœr_node
;

122 
	smib_¨øy_node


125 (* c⁄° 
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

126 (* c⁄° 
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

127 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

128 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

130 c⁄° 
u8_t
 
node_ty≥
;

131 c⁄° 
u16_t
 
maxÀngth
;

134 c⁄° 
s32_t
 *
objid
;

135 
mib_node
* c⁄° *
≈å
;

140 
	smib_øm_¨øy_node


143 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

144 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

145 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

146 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

148 
u8_t
 
node_ty≥
;

149 
u16_t
 
maxÀngth
;

152 
s32_t
 *
objid
;

153 
mib_node
 **
≈å
;

156 
	smib_li°_node


158 
mib_li°_node
 *
¥ev
;

159 
mib_li°_node
 *
√xt
;

160 
s32_t
 
objid
;

161 
mib_node
 *
≈å
;

166 
	smib_li°_roŸnode


169 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

170 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

171 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

172 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

174 
u8_t
 
node_ty≥
;

175 
u16_t
 
maxÀngth
;

178 
mib_li°_node
 *
hód
;

179 
mib_li°_node
 *
èû
;

181 
u16_t
 
cou¡
;

186 
	smib_exã∫Æ_node


189 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

190 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

191 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

192 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

194 
u8_t
 
node_ty≥
;

195 
u16_t
 
maxÀngth
;

200 * 
addr_öf
;

202 
u8_t
 
åì_Àvñs
;

204 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

207 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

208 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

211 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

212 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

213 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

214 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

216 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

217 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

218 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

219 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

223 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

224 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

225 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

229 c⁄° 
mib_¨øy_node
 
öã∫ë
;

232 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

233 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

234 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

235 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

237 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
);

238 
¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
);

239 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

240 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

242 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

243 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

244 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

245 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

247 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

248 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

249 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

251 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

252 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

253 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

254 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

256 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

65 #i‚de‡
sockÀn_t


66 
	#sockÀn_t
 
u32_t


	)

70 
	#SOCK_STREAM
 1

	)

71 
	#SOCK_DGRAM
 2

	)

72 
	#SOCK_RAW
 3

	)

77 
	#SO_DEBUG
 0x0001

	)

78 
	#SO_ACCEPTCONN
 0x0002

	)

79 
	#SO_REUSEADDR
 0x0004

	)

80 
	#SO_KEEPALIVE
 0x0008

	)

81 
	#SO_DONTROUTE
 0x0010

	)

82 
	#SO_BROADCAST
 0x0020

	)

83 
	#SO_USELOOPBACK
 0x0040

	)

84 
	#SO_LINGER
 0x0080

	)

85 
	#SO_OOBINLINE
 0x0100

	)

86 
	#SO_REUSEPORT
 0x0200

	)

88 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

93 
	#SO_SNDBUF
 0x1001

	)

94 
	#SO_RCVBUF
 0x1002

	)

95 
	#SO_SNDLOWAT
 0x1003

	)

96 
	#SO_RCVLOWAT
 0x1004

	)

97 
	#SO_SNDTIMEO
 0x1005

	)

98 
	#SO_RCVTIMEO
 0x1006

	)

99 
	#SO_ERROR
 0x1007

	)

100 
	#SO_TYPE
 0x1008

	)

101 
	#SO_CONTIMEO
 0x1009

	)

102 
	#SO_NO_CHECK
 0x100®

	)

108 
	slögî
 {

109 
l_⁄off
;

110 
l_lögî
;

116 
	#SOL_SOCKET
 0xff‡

	)

119 
	#AF_UNSPEC
 0

	)

120 
	#AF_INET
 2

	)

121 
	#PF_INET
 
AF_INET


	)

122 
	#PF_UNSPEC
 
AF_UNSPEC


	)

124 
	#IPPROTO_IP
 0

	)

125 
	#IPPROTO_TCP
 6

	)

126 
	#IPPROTO_UDP
 17

	)

127 
	#IPPROTO_UDPLITE
 136

	)

130 
	#MSG_PEEK
 0x01

	)

131 
	#MSG_WAITALL
 0x02

	)

132 
	#MSG_OOB
 0x04

	)

133 
	#MSG_DONTWAIT
 0x08

	)

134 
	#MSG_MORE
 0x10

	)

140 
	#IP_TOS
 1

	)

141 
	#IP_TTL
 2

	)

143 #i‡
LWIP_TCP


147 
	#TCP_NODELAY
 0x01

	)

148 
	#TCP_KEEPALIVE
 0x02

	)

149 
	#TCP_KEEPIDLE
 0x03

	)

150 
	#TCP_KEEPINTVL
 0x04

	)

151 
	#TCP_KEEPCNT
 0x05

	)

154 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


158 
	#UDPLITE_SEND_CSCOV
 0x01

	)

159 
	#UDPLITE_RECV_CSCOV
 0x02

	)

163 #i‡
LWIP_IGMP


167 
	#IP_ADD_MEMBERSHIP
 3

	)

168 
	#IP_DROP_MEMBERSHIP
 4

	)

169 
	#IP_MULTICAST_TTL
 5

	)

170 
	#IP_MULTICAST_IF
 6

	)

171 
	#IP_MULTICAST_LOOP
 7

	)

173 
	sù_mªq
 {

174 
ö_addr
 
imr_mu…üddr
;

175 
ö_addr
 
imr_öãrÁ˚
;

176 } 
	tù_mªq
;

195 
	#IPTOS_TOS_MASK
 0x1E

	)

196 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

197 
	#IPTOS_LOWDELAY
 0x10

	)

198 
	#IPTOS_THROUGHPUT
 0x08

	)

199 
	#IPTOS_RELIABILITY
 0x04

	)

200 
	#IPTOS_LOWCOST
 0x02

	)

201 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

212 
	#IPTOS_PREC_MASK
 0xe0

	)

213 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

214 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

215 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

216 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

217 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

218 
	#IPTOS_PREC_FLASH
 0x60

	)

219 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

220 
	#IPTOS_PREC_PRIORITY
 0x20

	)

221 
	#IPTOS_PREC_ROUTINE
 0x00

	)

234 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

235 
	#IOCPARM_MASK
 0x7fU

	)

236 
	#IOC_VOID
 0x20000000UL

	)

237 
	#IOC_OUT
 0x40000000UL

	)

238 
	#IOC_IN
 0x80000000UL

	)

239 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

242 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

244 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

246 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

249 #i‚de‡
FIONREAD


250 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

252 #i‚de‡
FIONBIO


253 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

257 #i‚de‡
SIOCSHIWAT


258 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

259 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

260 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

261 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

262 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

266 #i‚de‡
O_NONBLOCK


267 
	#O_NONBLOCK
 04000U

	)

271 #i‚de‡
FD_SET


272 #unde‡
FD_SETSIZE


274 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

275 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

276 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

277 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

278 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

280 
	sfd_£t
 {

281 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

282 } 
	tfd_£t
;

288 #i‚de‡
LWIP_TIMEVAL_PRIVATE


289 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

292 #i‡
LWIP_TIMEVAL_PRIVATE


293 
	stimevÆ
 {

294 
tv_£c
;

295 
tv_u£c
;

299 
lwù_sockë_öô
();

301 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

302 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

303 
lwù_shutdown
(
s
, 
how
);

304 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

305 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

306 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

307 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

308 
lwù_˛o£
(
s
);

309 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

310 
lwù_li°í
(
s
, 
backlog
);

311 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

312 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

313 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

314 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

315 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

316 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

317 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

318 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

319 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

320 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

321 
timevÆ
 *
timeout
);

322 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

324 #i‡
LWIP_COMPAT_SOCKETS


325 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

326 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

327 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

328 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

329 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

330 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

331 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

332 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

333 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

334 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

335 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

336 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

337 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

338 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

339 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

340 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

341 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

343 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


344 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

345 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

346 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

351 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mÀ√º
;

75 
STAT_COUNTER
 
	mchkîr
;

76 
STAT_COUNTER
 
	mv1_rxed
;

77 
STAT_COUNTER
 
	mjoö_£¡
;

78 
STAT_COUNTER
 
	mÀave_£¡
;

79 
STAT_COUNTER
 
	muniˇ°_quîy
;

80 
STAT_COUNTER
 
	mªp‹t_£¡
;

81 
STAT_COUNTER
 
	mªp‹t_rxed
;

82 
STAT_COUNTER
 
	mgroup_quîy_rxed
;

85 
	s°©s_mem
 {

86 
mem_size_t
 
	mavaû
;

87 
mem_size_t
 
	mu£d
;

88 
mem_size_t
 
	mmax
;

89 
STAT_COUNTER
 
	mîr
;

90 
STAT_COUNTER
 
	mûÀgÆ
;

93 
	s°©s_sy£Àm
 {

94 
STAT_COUNTER
 
	mu£d
;

95 
STAT_COUNTER
 
	mmax
;

96 
STAT_COUNTER
 
	mîr
;

99 
	s°©s_sys
 {

100 
°©s_sy£Àm
 
	m£m
;

101 
°©s_sy£Àm
 
	mmbox
;

104 
	s°©s_
 {

105 #i‡
LINK_STATS


106 
°©s_¥Ÿo
 
	mlök
;

108 #i‡
ETHARP_STATS


109 
°©s_¥Ÿo
 
	mëh¨p
;

111 #i‡
IPFRAG_STATS


112 
°©s_¥Ÿo
 
	mù_‰ag
;

114 #i‡
IP_STATS


115 
°©s_¥Ÿo
 
	mù
;

117 #i‡
ICMP_STATS


118 
°©s_¥Ÿo
 
	micmp
;

120 #i‡
IGMP_STATS


121 
°©s_igmp
 
	migmp
;

123 #i‡
UDP_STATS


124 
°©s_¥Ÿo
 
	mudp
;

126 #i‡
TCP_STATS


127 
°©s_¥Ÿo
 
	mt˝
;

129 #i‡
MEM_STATS


130 
°©s_mem
 
	mmem
;

132 #i‡
MEMP_STATS


133 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

135 #i‡
SYS_STATS


136 
°©s_sys
 
	msys
;

140 
°©s_
 
lwù_°©s
;

142 
	#°©s_öô
(Ë

	)

144 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

145 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

147 
	#°©s_öô
()

	)

148 
	#STATS_INC
(
x
)

	)

149 
	#STATS_DEC
(
x
)

	)

152 #i‡
TCP_STATS


153 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

154 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

156 
	#TCP_STATS_INC
(
x
)

	)

157 
	#TCP_STATS_DISPLAY
()

	)

160 #i‡
UDP_STATS


161 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

162 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

164 
	#UDP_STATS_INC
(
x
)

	)

165 
	#UDP_STATS_DISPLAY
()

	)

168 #i‡
ICMP_STATS


169 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

170 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

172 
	#ICMP_STATS_INC
(
x
)

	)

173 
	#ICMP_STATS_DISPLAY
()

	)

176 #i‡
IGMP_STATS


177 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

178 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

180 
	#IGMP_STATS_INC
(
x
)

	)

181 
	#IGMP_STATS_DISPLAY
()

	)

184 #i‡
IP_STATS


185 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

186 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

188 
	#IP_STATS_INC
(
x
)

	)

189 
	#IP_STATS_DISPLAY
()

	)

192 #i‡
IPFRAG_STATS


193 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

194 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

196 
	#IPFRAG_STATS_INC
(
x
)

	)

197 
	#IPFRAG_STATS_DISPLAY
()

	)

200 #i‡
ETHARP_STATS


201 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

202 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

204 
	#ETHARP_STATS_INC
(
x
)

	)

205 
	#ETHARP_STATS_DISPLAY
()

	)

208 #i‡
LINK_STATS


209 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

210 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

212 
	#LINK_STATS_INC
(
x
)

	)

213 
	#LINK_STATS_DISPLAY
()

	)

216 #i‡
MEM_STATS


217 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

218 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

219 
	#MEM_STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.
mem
.
u£d
 += y; \

220 i‡(
lwù_°©s
.
mem
.
max
 <Üwù_°©s.mem.
u£d
) { \

221 
lwù_°©s
.
mem
.
max
 =Üwù_°©s.mem.
u£d
; \

223 } 0)

	)

224 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

225 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

227 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

228 
	#MEM_STATS_INC
(
x
)

	)

229 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

230 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

231 
	#MEM_STATS_DISPLAY
()

	)

234 #i‡
MEMP_STATS


235 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

236 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

237 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

238 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ëdÿ{ ++
lwù_°©s
.
memp
[i].
u£d
; \

239 i‡(
lwù_°©s
.
memp
[
i
].
max
 <Üwù_°©s.memp[i].
u£d
) { \

240 
lwù_°©s
.
memp
[
i
].
max
 =Üwù_°©s.memp[i].
u£d
; \

242 } 0)

	)

243 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

245 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

246 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

247 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

248 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

249 
	#MEMP_STATS_DISPLAY
(
i
)

	)

252 #i‡
SYS_STATS


253 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

254 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

255 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

257 
	#SYS_STATS_INC
(
x
)

	)

258 
	#SYS_STATS_DEC
(
x
)

	)

259 
	#SYS_STATS_DISPLAY
()

	)

263 #i‡
LWIP_STATS_DISPLAY


264 
°©s_di•œy
();

265 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

266 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

267 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

268 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

269 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

271 
	#°©s_di•œy
()

	)

272 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

273 
	#°©s_di•œy_igmp
(
igmp
)

	)

274 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

275 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

276 
	#°©s_di•œy_sys
(
sys
)

	)

279 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_mbox_t
;

47 
	ssys_timeo
 {
u8_t
 
	mdummy
;};

49 
	#sys_öô
()

	)

50 
	#sys_timeout
(
m
,
h
,
a
)

	)

51 
	#sys_u¡imeout
(
m
,
a
)

	)

52 
	#sys_£m_√w
(
c
Ë
	)
c

53 
	#sys_£m_sig«l
(
s
)

	)

54 
	#sys_£m_waô
(
s
)

	)

55 
	#sys_£m_waô_timeout
(
s
,
t
)

	)

56 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

57 
	#sys_£m_‰ì
(
s
)

	)

58 
	#sys_mbox_√w
(
s
Ë0

	)

59 
	#sys_mbox_„tch
(
m
,
d
)

	)

60 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

61 
	#sys_mbox_po°
(
m
,
d
)

	)

62 
	#sys_mbox_åypo°
(
m
,
d
)

	)

63 
	#sys_mbox_‰ì
(
m
)

	)

65 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

70 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

75 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

77 
	~"lwù/îr.h
"

78 
	~"¨ch/sys_¨ch.h
"

80 (* 
	tsys_timeout_h™dÀr
)(*
	t¨g
);

82 
	ssys_timeo
 {

83 
sys_timeo
 *
√xt
;

84 
u32_t
 
time
;

85 
sys_timeout_h™dÀr
 
h
;

86 *
¨g
;

89 
	ssys_timeouts
 {

90 
sys_timeo
 *
√xt
;

94 
	`sys_öô
();

105 
	`sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

106 
	`sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

107 
sys_timeouts
 *
	`sys_¨ch_timeouts
();

110 
sys_£m_t
 
	`sys_£m_√w
(
u8_t
 
cou¡
);

111 
	`sys_£m_sig«l
(
sys_£m_t
 
£m
);

112 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, u32_à
timeout
);

113 
	`sys_£m_‰ì
(
sys_£m_t
 
£m
);

114 
	`sys_£m_waô
(
sys_£m_t
 
£m
);

115 
	`sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
);

118 #i‚de‡
sys_m¶ìp


119 
	`sys_m¶ìp
(
u32_t
 
ms
);

121 #i‚de‡
sys_jiffõs


122 
u32_t
 
	`sys_jiffõs
();

126 
sys_mbox_t
 
	`sys_mbox_√w
(
size
);

127 
	`sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
);

128 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
);

129 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, u32_à
timeout
);

130 #i‚de‡
sys_¨ch_mbox_åy„tch


131 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
);

134 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

135 
	`sys_mbox_‰ì
(
sys_mbox_t
 
mbox
);

136 
	`sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
);

139 
sys_thªad_t
 
	`sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *¨g, 
°acksize
, 
¥io
);

144 
u32_t
 
	`sys_now
();

151 #i‚de‡
SYS_ARCH_PROTECT


157 #i‡
SYS_LIGHTWEIGHT_PROT


164 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

174 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

183 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

184 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

185 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

189 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

190 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

191 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

202 #i‚de‡
SYS_ARCH_INC


203 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

204 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

205 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

206 
v¨
 +
vÆ
; \

207 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

208 } 0)

	)

211 #i‚de‡
SYS_ARCH_DEC


212 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

213 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

214 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

215 
v¨
 -
vÆ
; \

216 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

217 } 0)

	)

220 #i‚de‡
SYS_ARCH_GET


221 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

222 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

223 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

224 
ªt
 = 
v¨
; \

225 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

226 } 0)

	)

229 #i‚de‡
SYS_ARCH_SET


230 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

231 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

232 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

233 
v¨
 = 
vÆ
; \

234 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

235 } 0)

	)

239 #ifde‡
__˝lu•lus


240 
	}
}

	@firmware/octoclock/include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


50 
t˝_pcb
;

55 
	#t˝_öô
(Ë

	)

56 
t˝_tmr
 ();

60 
t˝_pcb
 * 
t˝_√w
 ();

61 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

63 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

64 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
,

65 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,

66 
îr_t
 
îr
));

67 
t˝_ªcv
 (
t˝_pcb
 *
pcb
,

68 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
,

69 
pbuf
 *
p
, 
îr_t
 
îr
));

70 
t˝_£¡
 (
t˝_pcb
 *
pcb
,

71 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
,

72 
u16_t
 
Àn
));

73 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
,

74 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
),

75 
u8_t
 
öãrvÆ
);

76 
t˝_îr
 (
t˝_pcb
 *
pcb
,

77 (* 
îr
)(*
¨g
, 
îr_t
Érr));

79 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

80 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

82 #i‡
TCP_LISTEN_BACKLOG


83 
	#t˝_ac˚±ed
(
pcb
Ë(((
t˝_pcb_li°í
 *)’cb))->
ac˚±s_≥ndög
--)

	)

85 
	#t˝_ac˚±ed
(
pcb
)

	)

88 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

89 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

90 
u16_t
 
p‹t
);

91 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

92 
u16_t
 
p‹t
, 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
,

93 
t˝_pcb
 *
çcb
,

94 
îr_t
 
îr
));

96 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

97 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

99 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

100 
	#t˝_ab‹t
(
pcb
Ë
	`t˝_ab™d⁄
(’cb), 1)

	)

101 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

104 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

105 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

107 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

108 
u8_t
 
≠iÊags
);

110 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

112 
	#TCP_PRIO_MIN
 1

	)

113 
	#TCP_PRIO_NORMAL
 64

	)

114 
	#TCP_PRIO_MAX
 127

	)

118 
t˝_¶owtmr
 ();

119 
t˝_Á°tmr
 ();

123 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

125 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

126 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

127 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

128 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

138 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

139 ((
çcb
)->
Êags
 & 
TF_NODELAY
) || \

140 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

141 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) \

142 Ë? 1 : 0)

	)

143 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

146 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

147 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

148 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

149 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

152 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

154 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

155 
	#TCP_FIN
 0x01U

	)

156 
	#TCP_SYN
 0x02U

	)

157 
	#TCP_RST
 0x04U

	)

158 
	#TCP_PSH
 0x08U

	)

159 
	#TCP_ACK
 0x10U

	)

160 
	#TCP_URG
 0x20U

	)

161 
	#TCP_ECE
 0x40U

	)

162 
	#TCP_CWR
 0x80U

	)

164 
	#TCP_FLAGS
 0x3fU

	)

167 
	#TCP_HLEN
 20

	)

169 #i‚de‡
TCP_TMR_INTERVAL


170 
	#TCP_TMR_INTERVAL
 250

	)

173 #i‚de‡
TCP_FAST_INTERVAL


174 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

177 #i‚de‡
TCP_SLOW_INTERVAL


178 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

181 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

182 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

184 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

186 #i‚de‡
TCP_MSL


187 
	#TCP_MSL
 60000UL

	)

191 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


192 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

195 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


196 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

199 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


200 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

203 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

208 #ifde‡
PACK_STRUCT_USE_INCLUDES


209 
	~"¨ch/bp°ru˘.h
"

211 
PACK_STRUCT_BEGIN


212 
	st˝_hdr
 {

213 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

214 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

215 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

216 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

217 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

218 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

219 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

220 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

221 } 
PACK_STRUCT_STRUCT
;

222 
PACK_STRUCT_END


223 #ifde‡
PACK_STRUCT_USE_INCLUDES


224 
	~"¨ch/ï°ru˘.h
"

227 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

228 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

229 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

231 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

232 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

233 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË& ~
TCP_FLAGS
Ë| (Êags))

	)

234 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (Êags))

	)

235 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

237 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& 
TCP_FIN
 || \

238 
	`TCPH_FLAGS
((
£g
)->
t˝hdr
Ë& 
TCP_SYN
)? 1: 0))

	)

240 
	et˝_°©e
 {

241 
CLOSED
 = 0,

242 
LISTEN
 = 1,

243 
SYN_SENT
 = 2,

244 
SYN_RCVD
 = 3,

245 
ESTABLISHED
 = 4,

246 
FIN_WAIT_1
 = 5,

247 
FIN_WAIT_2
 = 6,

248 
CLOSE_WAIT
 = 7,

249 
CLOSING
 = 8,

250 
LAST_ACK
 = 9,

251 
TIME_WAIT
 = 10

256 
	#TF_RESET
 (
u8_t
)0x08U

	)

257 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

258 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

261 #i‡
LWIP_CALLBACK_API


269 
	#DEF_ACCEPT_CALLBACK
 
	`îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

	)

271 
	#DEF_ACCEPT_CALLBACK


	)

277 
	#TCP_PCB_COMMON
(
ty≥
) \

278 
ty≥
 *
√xt
; \

279 
t˝_°©e
 
°©e
; \

280 
u8_t
 
¥io
; \

281 *
ˇŒback_¨g
; \

283 
u16_t
 
loˇl_p‹t
; \

285 
DEF_ACCEPT_CALLBACK


	)

289 
	st˝_pcb
 {

291 
IP_PCB
;

293 
TCP_PCB_COMMON
(
t˝_pcb
);

296 
u16_t
 
ªmŸe_p‹t
;

298 
u8_t
 
Êags
;

299 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

300 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

301 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

302 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

303 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

304 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

305 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

310 
u32_t
 
rcv_nxt
;

311 
u16_t
 
rcv_wnd
;

312 
u16_t
 
rcv_™n_wnd
;

313 
u32_t
 
rcv_™n_right_edge
;

316 
u32_t
 
tmr
;

317 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

320 
s16_t
 
πime
;

322 
u16_t
 
mss
;

325 
u32_t
 
πã°
;

326 
u32_t
 
π£q
;

327 
s16_t
 
ß
, 
sv
;

329 
s16_t
 
πo
;

330 
u8_t
 
ƒtx
;

333 
u32_t
 
œ°ack
;

334 
u8_t
 
du∑cks
;

337 
u16_t
 
cwnd
;

338 
u16_t
 
s°hªsh
;

341 
u32_t
 
¢d_nxt
;

342 
u16_t
 
¢d_wnd
;

343 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

345 
u32_t
 
¢d_lbb
;

347 
u16_t
 
acked
;

349 
u16_t
 
¢d_buf
;

350 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffff-3)

	)

351 
u16_t
 
¢d_queuñí
;

355 
t˝_£g
 *
un£¡
;

356 
t˝_£g
 *
u«cked
;

357 #i‡
TCP_QUEUE_OOSEQ


358 
t˝_£g
 *
oo£q
;

361 
pbuf
 *
ªfu£d_d©a
;

363 #i‡
LWIP_CALLBACK_API


370 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
•a˚
);

379 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

387 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
pcb
,Éº_à
îr
);

396 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
pcb
);

406 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

409 #i‡
LWIP_TCP_TIMESTAMPS


410 
u32_t
 
ts_œ°ack£¡
;

411 
u32_t
 
ts_ª˚¡
;

415 
u32_t
 
kìp_idÀ
;

416 #i‡
LWIP_TCP_KEEPALIVE


417 
u32_t
 
kìp_ötvl
;

418 
u32_t
 
kìp_˙t
;

422 
u32_t
 
≥rsi°_˙t
;

424 
u8_t
 
≥rsi°_backoff
;

427 
u8_t
 
kìp_˙t_£¡
;

430 
	st˝_pcb_li°í
 {

432 
IP_PCB
;

434 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

436 #i‡
TCP_LISTEN_BACKLOG


437 
u8_t
 
backlog
;

438 
u8_t
 
ac˚±s_≥ndög
;

442 #i‡
LWIP_EVENT_API


444 
	elwù_evít
 {

445 
LWIP_EVENT_ACCEPT
,

446 
LWIP_EVENT_SENT
,

447 
LWIP_EVENT_RECV
,

448 
LWIP_EVENT_CONNECTED
,

449 
LWIP_EVENT_POLL
,

450 
LWIP_EVENT_ERR


453 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

454 
lwù_evít
,

455 
pbuf
 *
p
,

456 
u16_t
 
size
,

457 
îr_t
 
îr
);

459 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

460 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

461 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

462 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

463 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

464 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

465 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

466 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

467 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

468 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

469 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

470 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

473 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

475 if((
pcb
)->
ac˚±
 !
NULL
) \

476 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

477 (
ªt
Ë
ERR_OK
; \

478 } 0)

	)

480 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

482 if((
pcb
)->
£¡
 !
NULL
) \

483 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

484 (
ªt
Ë
ERR_OK
; \

485 } 0)

	)

487 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

489 if((
pcb
)->
ªcv
 !
NULL
) { \

490 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
)); \

492 (
ªt
Ë
ERR_OK
; \

493 i‡(
p
 !
NULL
) \

494 
	`pbuf_‰ì
(
p
); \

496 } 0)

	)

498 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

500 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

501 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

502 (
ªt
Ë
ERR_OK
; \

503 } 0)

	)

505 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

507 if((
pcb
)->
pﬁl
 !
NULL
) \

508 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

509 (
ªt
Ë
ERR_OK
; \

510 } 0)

	)

512 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

514 if((
îrf
Ë!
NULL
) \

515 (
îrf
)((
¨g
),(
îr
)); \

516 } 0)

	)

521 
	st˝_£g
 {

522 
t˝_£g
 *
√xt
;

523 
pbuf
 *
p
;

524 *
d©≠å
;

525 
u16_t
 
Àn
;

526 
u8_t
 
Êags
;

527 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

528 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

529 
t˝_hdr
 *
t˝hdr
;

532 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

533 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

534 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

537 
	#TCP_BUILD_MSS_OPTION
(
x
Ë(xË
	`ht⁄l
(((
u32_t
)2 << 24) | \

538 ((
u32_t
)4 << 16) | \

539 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

540 (
TCP_MSS
 & 255))

	)

543 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

544 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

545 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

547 
u8_t
 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

548 
u8_t
 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

549 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

551 
	#t˝_ack
(
pcb
) \

553 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

554 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

555 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

556 
	`t˝_ouçut
(
pcb
); \

559 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

561 } 0)

	)

563 
	#t˝_ack_now
(
pcb
) \

565 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

566 
	`t˝_ouçut
(
pcb
); \

567 } 0)

	)

569 
îr_t
 
t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

570 
îr_t
 
t˝_íqueue
(
t˝_pcb
 *
pcb
, *
d©≠å
, 
u16_t
 
Àn
,

571 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
);

573 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

575 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

576 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

577 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

579 
u32_t
 
t˝_√xt_iss
();

581 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

582 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

584 #i‡
TCP_CALCULATE_EFF_SEND_MSS


585 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr
 *
addr
);

588 
t˝_pcb
 *
t˝_öput_pcb
;

589 
u32_t
 
t˝_ticks
;

591 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


592 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

593 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

594 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

595 
t˝_debug_¥öt_pcbs
();

596 
s16_t
 
t˝_pcbs_ß√
();

598 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

599 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

600 
	#t˝_debug_¥öt_°©e
(
s
)

	)

601 
	#t˝_debug_¥öt_pcbs
()

	)

602 
	#t˝_pcbs_ß√
(Ë1

	)

605 #i‡
NO_SYS


606 
	#t˝_timî_√eded
()

	)

608 
t˝_timî_√eded
();

612 
	ut˝_li°í_pcbs_t
 {

613 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

614 
t˝_pcb
 *
	gpcbs
;

616 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

617 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

620 
t˝_pcb
 *
t˝_tw_pcbs
;

622 
t˝_pcb
 *
t˝_tmp_pcb
;

634 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

635 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", 
≈cb
,Çpcb->
loˇl_p‹t
)); \

636 
t˝_tmp_pcb
 = *
pcbs
; \

637 
t˝_tmp_pcb
 !
NULL
; \

638 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

639 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !
≈cb
); \

641 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", 
≈cb
->
°©e
 !
CLOSED
); \

642 
≈cb
->
√xt
 = *
pcbs
; \

643 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", 
≈cb
->
√xt
 !=Çpcb); \

644 *(
pcbs
Ë
≈cb
; \

645 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

646 
	`t˝_timî_√eded
(); \

647 } 0)

	)

648 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

649 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *
pcbs
 !
NULL
); \

650 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

651 if(*
pcbs
 =
≈cb
) { \

652 *
pcbs
 = (*pcbs)->
√xt
; \

653 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

654 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

655 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

659 
≈cb
->
√xt
 = 
NULL
; \

660 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

661 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

662 } 0)

	)

666 
	#TCP_REG
(
pcbs
, 
≈cb
) \

668 
≈cb
->
√xt
 = *
pcbs
; \

669 *(
pcbs
Ë
≈cb
; \

670 
	`t˝_timî_√eded
(); \

671 } 0)

	)

673 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

675 if(*(
pcbs
Ë=
≈cb
) { \

676 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

679 
t˝_tmp_pcb
 = *
pcbs
; \

680 
t˝_tmp_pcb
 !
NULL
; \

681 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

682 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

683 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

688 
≈cb
->
√xt
 = 
NULL
; \

689 } 0)

	)

693 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/√tif.h
"

46 #ifde‡
__˝lu•lus


50 #i‡
LWIP_TCPIP_CORE_LOCKING


52 
sys_£m_t
 
lock_t˝ù_c‹e
;

53 
	#LOCK_TCPIP_CORE
(Ë
	`sys_£m_waô
(
lock_t˝ù_c‹e
)

	)

54 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_£m_sig«l
(
lock_t˝ù_c‹e
)

	)

55 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

56 
	#TCPIP_APIMSG_ACK
(
m
)

	)

57 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

58 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

60 
	#LOCK_TCPIP_CORE
()

	)

61 
	#UNLOCK_TCPIP_CORE
()

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
c⁄n
->
›_com∂ëed
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
£m
)

	)

68 
t˝ù_öô
((* 
t˝ù_öô_d⁄e
)(*), *
¨g
);

70 #i‡
LWIP_NETCONN


71 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

72 #i‡
LWIP_TCPIP_CORE_LOCKING


73 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

77 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

79 #i‡
LWIP_NETIF_API


80 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

81 #i‡
LWIP_TCPIP_CORE_LOCKING


82 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

86 
îr_t
 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
);

87 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

90 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

91 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

93 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

94 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

96 
	et˝ù_msg_ty≥
 {

97 #i‡
LWIP_NETCONN


98 
	gTCPIP_MSG_API
,

100 
	gTCPIP_MSG_INPKT
,

101 #i‡
LWIP_NETIF_API


102 
	gTCPIP_MSG_NETIFAPI
,

104 
	gTCPIP_MSG_CALLBACK
,

105 
	gTCPIP_MSG_TIMEOUT
,

106 
	gTCPIP_MSG_UNTIMEOUT


109 
	st˝ù_msg
 {

110 
t˝ù_msg_ty≥
 
	gty≥
;

111 
sys_£m_t
 *
	g£m
;

113 #i‡
LWIP_NETCONN


114 
≠i_msg
 *
	g≠imsg
;

116 #i‡
LWIP_NETIF_API


117 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

120 
pbuf
 *
	gp
;

121 
√tif
 *
	g√tif
;

122 } 
	göp
;

124 (*
	gf
)(*
	g˘x
);

125 *
	g˘x
;

126 } 
	gcb
;

128 
u32_t
 
	gm£cs
;

129 
sys_timeout_h™dÀr
 
	gh
;

130 *
	g¨g
;

131 } 
	gtmo
;

132 } 
	gmsg
;

135 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

70 
	sudp_pcb
 {

72 
IP_PCB
;

76 
udp_pcb
 *
√xt
;

78 
u8_t
 
Êags
;

80 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

82 #i‡
LWIP_IGMP


84 
ù_addr
 
mu…iˇ°_ù
;

87 #i‡
LWIP_UDPLITE


89 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

103 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

104 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

106 *
ªcv_¨g
;

109 
udp_pcb
 *
udp_pcbs
;

113 
udp_pcb
 * 
udp_√w
 ();

114 
udp_ªmove
 (
udp_pcb
 *
pcb
);

115 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

116 
u16_t
 
p‹t
);

117 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

118 
u16_t
 
p‹t
);

119 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

120 
udp_ªcv
 (
udp_pcb
 *
pcb
,

121 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
,

122 
pbuf
 *
p
,

123 
ù_addr
 *
addr
,

124 
u16_t
 
p‹t
),

125 *
ªcv_¨g
);

126 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif);

127 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

128 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

130 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

131 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

134 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

136 
	#udp_öô
(Ë

	)

138 #i‡
UDP_DEBUG


139 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

141 
	#udp_debug_¥öt
(
udphdr
)

	)

144 #ifde‡
__˝lu•lus


	@firmware/octoclock/include/lwipopts.h

26 
	#NO_SYS
 1

	)

35 
	#MEM_ALIGNMENT
 4

	)

41 
	#MEM_SIZE
 256

	)

48 
	#MEM_USE_POOLS
 0

	)

56 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

64 
	#MEMP_NUM_PBUF
 8

	)

71 
	#MEMP_NUM_UDP_PCB
 4

	)

78 
	#PBUF_LINK_HLEN
 16

	)

79 
	#ETH_PAD_SIZE
 2

	)

84 
	#PBUF_POOL_SIZE
 8

	)

92 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(128+28+
PBUF_LINK_HLEN
)

	)

99 
	#ARP_TABLE_SIZE
 5

	)

105 
	#ARP_QUEUEING
 0

	)

113 
	#MEMP_NUM_ARP_QUEUE
 5

	)

121 
	#IP_OPTIONS_ALLOWED
 0

	)

128 
	#IP_REASSEMBLY
 0

	)

135 
	#IP_FRAG
 0

	)

140 
	#LWIP_DHCP
 0

	)

145 
	#LWIP_IGMP
 0

	)

150 
	#LWIP_UDP
 1

	)

155 
	#LWIP_TCP
 0

	)

160 
	#LWIP_NETCONN
 0

	)

165 
	#LWIP_SOCKET
 0

	)

170 
	#LWIP_STATS
 0

	)

175 
	#CHECKSUM_GEN_IP
 0

	)

180 
	#CHECKSUM_GEN_UDP
 0

	)

185 
	#CHECKSUM_CHECK_IP
 0

	)

190 
	#CHECKSUM_CHECK_UDP
 0

	)

196 
	#LWIP_NETIF_LINK_CALLBACK
 1

	)

	@firmware/octoclock/include/lwippools.h

1 #i‚de‡
INCLUDED_LWIPPOOLS_H


2 
	#INCLUDED_LWIPPOOLS_H


	)

20 
LWIP_MALLOC_MEMPOOL_START


21 
	$LWIP_MALLOC_MEMPOOL
(2, 256)

22 
LWIP_MALLOC_MEMPOOL_END


	@firmware/octoclock/include/net/enc28j60.h

18 #i‚de‡
_NET_ENC28J60_H_


19 
	#_NET_ENC28J60_H_


	)

21 
	~<avr/io.h
>

23 
	#SPI_DDR
 
DDRB


	)

24 
	#SPI_PORT
 
PORTB


	)

25 
	#SPI_CS
 0

	)

26 
	#SPI_MOSI
 2

	)

27 
	#SPI_MISO
 3

	)

28 
	#SPI_SCK
 1

	)

31 
	#ADDR_MASK
 0x1F

	)

32 
	#BANK_MASK
 0x60

	)

33 
	#SPRD_MASK
 0x80

	)

36 
	#EIE
 0x1B

	)

37 
	#EIR
 0x1C

	)

38 
	#ESTAT
 0x1D

	)

39 
	#ECON2
 0x1E

	)

40 
	#ECON1
 0x1F

	)

43 
	#ERDPTL
 0x00

	)

44 
	#ERDPTH
 0x01

	)

45 
	#EWRPTL
 0x02

	)

46 
	#EWRPTH
 0x03

	)

47 
	#ETXSTL
 0x04

	)

48 
	#ETXSTH
 0x05

	)

49 
	#ETXNDL
 0x06

	)

50 
	#ETXNDH
 0x07

	)

51 
	#ERXSTL
 0x08

	)

52 
	#ERXSTH
 0x09

	)

53 
	#ERXNDL
 0x0A

	)

54 
	#ERXNDH
 0x0B

	)

55 
	#ERXRDPTL
 0x0C

	)

56 
	#ERXRDPTH
 0x0D

	)

57 
	#ERXWRPTL
 0x0E

	)

58 
	#ERXWRPTH
 0x0F

	)

59 
	#EDMASTL
 0x10

	)

60 
	#EDMASTH
 0x11

	)

61 
	#EDMANDL
 0x12

	)

62 
	#EDMANDH
 0x13

	)

63 
	#EDMADSTL
 0x14

	)

64 
	#EDMADSTH
 0x15

	)

65 
	#EDMACSL
 0x16

	)

66 
	#EDMACSH
 0x17

	)

69 
	#EHT0
 0x20

	)

70 
	#EHT1
 0x21

	)

71 
	#EHT2
 0x22

	)

72 
	#EHT3
 0x23

	)

73 
	#EHT4
 0x24

	)

74 
	#EHT5
 0x25

	)

75 
	#EHT6
 0x26

	)

76 
	#EHT7
 0x27

	)

77 
	#EPMM0
 0x28

	)

78 
	#EPMM1
 0x29

	)

79 
	#EPMM2
 0x2A

	)

80 
	#EPMM3
 0x2B

	)

81 
	#EPMM4
 0x2C

	)

82 
	#EPMM5
 0x2D

	)

83 
	#EPMM6
 0x2E

	)

84 
	#EPMM7
 0x2F

	)

85 
	#EPMCSL
 0x30

	)

86 
	#EPMCSH
 0x31

	)

87 
	#EPMOL
 0x34

	)

88 
	#EPMOH
 0x35

	)

89 
	#EWOLIE
 0x36

	)

90 
	#EWOLIR
 0x37

	)

91 
	#ERXFCON
 0x38

	)

92 
	#EPKTCNT
 0x39

	)

95 
	#MACON1
 0xC0

	)

96 
	#MACON2
 0xC1

	)

97 
	#MACON3
 0xC2

	)

98 
	#MACON4
 0xC3

	)

99 
	#MABBIPG
 0xC4

	)

100 
	#MAIPGL
 0xC6

	)

101 
	#MAIPGH
 0xC7

	)

102 
	#MACLCON1
 0xC8

	)

103 
	#MACLCON2
 0xC9

	)

104 
	#MAMXFLL
 0xCA

	)

105 
	#MAMXFLH
 0xCB

	)

106 
	#MAPHSUP
 0xCD

	)

107 
	#MICON
 0xD1

	)

108 
	#MICMD
 0xD2

	)

109 
	#MIREGADR
 0xD4

	)

110 
	#MIWRL
 0xD6

	)

111 
	#MIWRH
 0xD7

	)

112 
	#MIRDL
 0xD8

	)

113 
	#MIRDH
 0xD9

	)

116 
	#MAADR1
 0xE0

	)

117 
	#MAADR0
 0xE1

	)

118 
	#MAADR3
 0xE2

	)

119 
	#MAADR2
 0xE3

	)

120 
	#MAADR5
 0xE4

	)

121 
	#MAADR4
 0xE5

	)

122 
	#EBSTSD
 0x66

	)

123 
	#EBSTCON
 0x67

	)

124 
	#EBSTCSL
 0x68

	)

125 
	#EBSTCSH
 0x69

	)

126 
	#MISTAT
 0xEA

	)

127 
	#EREVID
 0x72

	)

128 
	#ECOCON
 0x75

	)

129 
	#EFLOCON
 0x77

	)

130 
	#EPAUSL
 0x78

	)

131 
	#EPAUSH
 0x79

	)

134 
	#PHCON1
 0x00

	)

135 
	#PHSTAT1
 0x01

	)

136 
	#PHHID1
 0x02

	)

137 
	#PHHID2
 0x03

	)

138 
	#PHCON2
 0x10

	)

139 
	#PHSTAT2
 0x11

	)

140 
	#PHIE
 0x12

	)

141 
	#PHIR
 0x13

	)

142 
	#PHLCON
 0x14

	)

145 
	#UCEN
 0x80

	)

146 
	#ANDOR
 0x40

	)

147 
	#CRCEN
 0x20

	)

148 
	#PMEN
 0x10

	)

149 
	#MPEN
 0x08

	)

150 
	#HTEN
 0x04

	)

151 
	#MCEN
 0x02

	)

152 
	#BCEN
 0x01

	)

155 
	#INTIE
 0x80

	)

156 
	#PKTIE
 0x40

	)

157 
	#DMAIE
 0x20

	)

158 
	#LINKIE
 0x10

	)

159 
	#TXIE
 0x08

	)

160 
	#WOLIE
 0x04

	)

161 
	#TXERIE
 0x02

	)

162 
	#RXERIE
 0x01

	)

165 
	#PKTIF
 0x40

	)

166 
	#DMAIF
 0x20

	)

167 
	#LINKIF
 0x10

	)

168 
	#TXIF
 0x08

	)

169 
	#WOLIF
 0x04

	)

170 
	#TXERIF
 0x02

	)

171 
	#RXERIF
 0x01

	)

174 
	#INT
 0x80

	)

175 
	#LATECOL
 0x10

	)

176 
	#RXBUSY
 0x04

	)

177 
	#TXABRT
 0x02

	)

178 
	#CLKRDY
 0x01

	)

181 
	#AUTOINC
 0x80

	)

182 
	#PKTDEC
 0x40

	)

183 
	#PWRSV
 0x20

	)

184 
	#VRPS
 0x08

	)

187 
	#TXRST
 0x80

	)

188 
	#RXRST
 0x40

	)

189 
	#DMAST
 0x20

	)

190 
	#CSUMEN
 0x10

	)

191 
	#TXRTS
 0x08

	)

192 
	#ENCRXEN
 0x04

	)

193 
	#BSEL1
 0x02

	)

194 
	#BSEL0
 0x01

	)

197 
	#LOOPBK
 0x10

	)

198 
	#TXPAUS
 0x08

	)

199 
	#RXPAUS
 0x04

	)

200 
	#PASSALL
 0x02

	)

201 
	#MARXEN
 0x01

	)

204 
	#MARST
 0x80

	)

205 
	#RNDRST
 0x40

	)

206 
	#MARXRST
 0x08

	)

207 
	#RFUNRST
 0x04

	)

208 
	#MATXRST
 0x02

	)

209 
	#TFUNRST
 0x01

	)

212 
	#PADCFG2
 0x80

	)

213 
	#PADCFG1
 0x40

	)

214 
	#PADCFG0
 0x20

	)

215 
	#TXCRCEN
 0x10

	)

216 
	#PHDRLEN
 0x08

	)

217 
	#HFRMLEN
 0x04

	)

218 
	#FRMLNEN
 0x02

	)

219 
	#FULDPX
 0x01

	)

222 
	#MIISCAN
 0x02

	)

223 
	#MIIRD
 0x01

	)

226 
	#NVALID
 0x04

	)

227 
	#SCAN
 0x02

	)

228 
	#BUSY
 0x01

	)

231 
	#PRST
 0x8000

	)

232 
	#PLOOPBK
 0x4000

	)

233 
	#PPWRSV
 0x0800

	)

234 
	#PDPXMD
 0x0100

	)

237 
	#PFDPX
 0x1000

	)

238 
	#PHDPX
 0x0800

	)

239 
	#LLSTAT
 0x0004

	)

240 
	#JBSTAT
 0x0002

	)

243 
	#FRCLINK
 0x4000

	)

244 
	#TXDIS
 0x2000

	)

245 
	#JABBER
 0x0400

	)

246 
	#HDLDIS
 0x0100

	)

249 
	#PHUGEEN
 0x08

	)

250 
	#PPADEN
 0x04

	)

251 
	#PCRCEN
 0x02

	)

252 
	#POVERRIDE
 0x01

	)

255 
	#RCR
 0x00

256 
	#RBM
 0x3A

257 
	#WCR
 0x40

258 
	#WBM
 0x7A

259 
	#BFS
 0x80

260 
	#BFC
 0xA0

261 
	#SC
 0xFF

262 

	)

264 
	#RXSTART_INIT
 0x0000

	)

265 
	#RXSTOP_INIT
 (0x1FFF-0x0600-1)

	)

266 
	#TXSTART_INIT
 (0x1FFF-0x0600)

	)

267 
	#TXSTOP_INIT
 0x1FFF

	)

268 
	#MAX_FRAMELEN
 1500

	)

270 
íc28j60_öô
(
uöt8_t
* 
mac_addr
);

272 
uöt16_t
 
íc28j60_ªcv
(
uöt8_t
* 
buf„r
, uöt16_à
max_Àn
);

274 
íc28j60_£nd
(
uöt8_t
* 
buf„r
, 
uöt16_t
 
Àn
);

	@firmware/octoclock/include/net/eth_hdr.h

18 #i‚de‡
INCLUDED_ETH_HDR_H


19 
	#INCLUDED_ETH_HDR_H


	)

21 
	~<compûî.h
>

22 
	~<√t/ëh_mac_addr.h
>

24 
	#ETH_HLEN
 14

	)

31 
ëh_mac_addr_t
 
	md°
;

32 
ëh_mac_addr_t
 
	m§c
;

33 
uöt16_t
 
	mëhîty≥
;

34 } 
	t_AL2
 
	tëh_hdr_t
;

	@firmware/octoclock/include/net/eth_mac_addr.h

18 #i‚de‡
INCLUDED_ETH_MAC_ADDR_H


19 
	#INCLUDED_ETH_MAC_ADDR_H


	)

21 
	~<°döt.h
>

25 
uöt8_t
 
	maddr
[6];

26 } 
	tëh_mac_addr_t
 
	t__©åibuã__
((
	tÆig√d
(1)));

	@firmware/octoclock/include/net/ethertype.h

18 #i‚de‡
INCLUDED_ETHERTYPE_H


19 
	#INCLUDED_ETHERTYPE_H


	)

23 
	#ETHERTYPE_IPV4
 0x0800

	)

24 
	#ETHERTYPE_ARP
 0x0806

	)

	@firmware/octoclock/include/net/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

27 
	#ARPHRD_NETROM
 0

	)

28 
	#ARPHRD_ETHER
 1

	)

29 
	#ARPHRD_EETHER
 2

	)

30 
	#ARPHRD_AX25
 3

	)

31 
	#ARPHRD_PRONET
 4

	)

32 
	#ARPHRD_CHAOS
 5

	)

33 
	#ARPHRD_IEEE802
 6

	)

34 
	#ARPHRD_ARCNET
 7

	)

35 
	#ARPHRD_APPLETLK
 8

	)

36 
	#ARPHRD_DLCI
 15

	)

37 
	#ARPHRD_ATM
 19

	)

38 
	#ARPHRD_METRICOM
 23

	)

39 
	#ARPHRD_IEEE1394
 24

	)

40 
	#ARPHRD_EUI64
 27

	)

41 
	#ARPHRD_INFINIBAND
 32

	)

44 
	#ARPHRD_SLIP
 256

	)

45 
	#ARPHRD_CSLIP
 257

	)

46 
	#ARPHRD_SLIP6
 258

	)

47 
	#ARPHRD_CSLIP6
 259

	)

48 
	#ARPHRD_RSRVD
 260

	)

49 
	#ARPHRD_ADAPT
 264

	)

50 
	#ARPHRD_ROSE
 270

	)

51 
	#ARPHRD_X25
 271

	)

52 
	#ARPHRD_HWX25
 272

	)

53 
	#ARPHRD_CAN
 280

	)

54 
	#ARPHRD_PPP
 512

	)

55 
	#ARPHRD_CISCO
 513

	)

56 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

57 
	#ARPHRD_LAPB
 516

	)

58 
	#ARPHRD_DDCMP
 517

	)

59 
	#ARPHRD_RAWHDLC
 518

	)

61 
	#ARPHRD_TUNNEL
 768

	)

62 
	#ARPHRD_TUNNEL6
 769

	)

63 
	#ARPHRD_FRAD
 770

	)

64 
	#ARPHRD_SKIP
 771

	)

65 
	#ARPHRD_LOOPBACK
 772

	)

66 
	#ARPHRD_LOCALTLK
 773

	)

67 
	#ARPHRD_FDDI
 774

	)

68 
	#ARPHRD_BIF
 775

	)

69 
	#ARPHRD_SIT
 776

	)

70 
	#ARPHRD_IPDDP
 777

	)

71 
	#ARPHRD_IPGRE
 778

	)

72 
	#ARPHRD_PIMREG
 779

	)

73 
	#ARPHRD_HIPPI
 780

	)

74 
	#ARPHRD_ASH
 781

	)

75 
	#ARPHRD_ECONET
 782

	)

76 
	#ARPHRD_IRDA
 783

	)

78 
	#ARPHRD_FCPP
 784

	)

79 
	#ARPHRD_FCAL
 785

	)

80 
	#ARPHRD_FCPL
 786

	)

81 
	#ARPHRD_FCFABRIC
 787

	)

83 
	#ARPHRD_IEEE802_TR
 800

	)

84 
	#ARPHRD_IEEE80211
 801

	)

85 
	#ARPHRD_IEEE80211_PRISM
 802

	)

86 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

88 
	#ARPHRD_VOID
 0xFFFF

	)

89 
	#ARPHRD_NONE
 0xFFFE

	)

92 
	#ARPOP_REQUEST
 1

	)

93 
	#ARPOP_REPLY
 2

	)

94 
	#ARPOP_RREQUEST
 3

	)

95 
	#ARPOP_RREPLY
 4

	)

96 
	#ARPOP_InREQUEST
 8

	)

97 
	#ARPOP_InREPLY
 9

	)

98 
	#ARPOP_NAK
 10

	)

102 
	#ATF_COM
 0x02

	)

103 
	#ATF_PERM
 0x04

	)

104 
	#ATF_PUBL
 0x08

	)

105 
	#ATF_USETRAILERS
 0x10

	)

106 
	#ATF_NETMASK
 0x20

	)

108 
	#ATF_DONTPUB
 0x40

	)

110 
	t__be16
;

115 
	s¨phdr


117 
__be16
 
	m¨_hrd
;

118 
__be16
 
	m¨_¥o
;

119 
	m¨_h 
;

120 
	m¨_∂n
;

121 
__be16
 
	m¨_›
;

127 
	m¨_sha
[
ETH_ALEN
];

128 
	m¨_sù
[4];

129 
	m¨_tha
[
ETH_ALEN
];

130 
	m¨_tù
[4];

138 
	s¨p_ëh_ùv4


140 
__be16
 
	m¨_hrd
;

141 
__be16
 
	m¨_¥o
;

142 
	m¨_h 
;

143 
	m¨_∂n
;

144 
__be16
 
	m¨_›
;

146 
	m¨_sha
[6];

147 
	m¨_sù
[4];

148 
	m¨_tha
[6];

149 
	m¨_tù
[4];

	@firmware/octoclock/include/net/socket_address.h

18 #i‚de‡
INCLUDED_SOCKET_ADDRESS_H


19 
	#INCLUDED_SOCKET_ADDRESS_H


	)

21 
	~<lwù/ù_addr.h
>

25 
	ssockë_addªss
 {

26 
	mp‹t
;

27 
ù_addr
 
	maddr
;

28 } 
	tsockë_addªss_t
;

30 
ölöe
 
sockë_addªss


31 
	$make_sockë_addªss
(
ù_addr
 
addr
, 
p‹t
)

33 
sockë_addªss
 
r
;

34 
r
.
p‹t
 =Öort;

35 
r
.
addr
 =áddr;

36  
r
;

37 
	}
}

	@firmware/octoclock/include/net/udp_handlers.h

18 #i‚de‡
_NET_UDP_HANDLERS_H_


19 
	#_NET_UDP_HANDLERS_H_


	)

21 
	~<√tw‹k.h
>

22 
	~<√t/sockë_addªss.h
>

24 
h™dÀ_udp_˘æ_∑ckë
(

25 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

26 *
∑ylﬂd
, 
∑ylﬂd_Àn


29 
h™dÀ_udp_gpsdo_∑ckë
(

30 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

31 *
∑ylﬂd
, 
∑ylﬂd_Àn


	@firmware/octoclock/include/network.h

17 #i‚de‡
INCLUDED_NETWORK_H


18 
	#INCLUDED_NETWORK_H


	)

20 
	~<°döt.h
>

21 
	~<°ddef.h
>

23 
	~<o˘o˛ock.h
>

24 
	~<√t/sockë_addªss.h
>

25 
	~<√t/ëh_mac_addr.h
>

27 
	~"o˘o˛ock/comm⁄.h
"

34 
	#ht⁄s
(
n
Ë(((((
uöt16_t
)“Ë& 0xFF)Ë<< 8Ë| (((uöt16_t)“Ë& 0xFF00Ë>> 8))

	)

35 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

37 
	#ht⁄l
(
n
Ë(((((
uöt32_t
)(n) & 0xFF)) << 24) | \

38 ((((
uöt32_t
)(
n
) & 0xFF00)) << 8) | \

39 ((((
uöt32_t
)(
n
) & 0xFF0000)) >> 8) | \

40 ((((
uöt32_t
)(
n
Ë& 0xFF000000)Ë>> 24))

	)

42 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

44 
	#_MAC_ADDR
(
mac_addr
,
a
,
b
,
c
,
d
,
e
,
f
) mac_addr[0] =á; \

45 
mac_addr
[1] = 
b
; \

46 
mac_addr
[2] = 
c
; \

47 
mac_addr
[3] = 
d
; \

48 
mac_addr
[4] = 
e
; \

49 
mac_addr
[5] = 
f
;

	)

51 
	#_MAC_SET_EQUAL
(
mac_addr1
,
mac_addr2
Ë
uöt8_t
 
i
 = 0; i < 6; i++Ëmac_addr1[i] = mac_addr2[i];

	)

53 
	#_IP
(
a
,
b
,
c
,
d
Ë(((
uöt32_t
Ô << 24Ë| ((uöt32_t)b << 16Ë| ((uöt32_t)¯<< 8Ë| ((uöt32_t)d << 0))

	)

54 
	#_IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

55 
	#_IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

56 
	#_IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

57 
	#_IPH_LEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_Àn
))

	)

58 
	#_IPH_ID
(
hdr
Ë(
	`¡ohs
((hdr)->
_id
))

	)

59 
	#_IPH_OFFSET
(
hdr
Ë(
	`¡ohs
((hdr)->
_off£t
))

	)

60 
	#_IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

61 
	#_IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

62 
	#_IPH_CHKSUM
(
hdr
Ë(
	`¡ohs
((hdr)->
_chksum
))

	)

64 
	#_IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

65 
	#_IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (
	`ht⁄s
÷í))

	)

66 
	#_IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

67 
	#_IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

68 
	#_IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`_IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

69 
	#_IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`_IPH_TTL
(hdrË<< 8)))

	)

70 
	#_IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

72 vﬁ©ûê
boﬁ
 
	gusög_√tw‹k_deÁu…s
;

75 
	#ETH_BUF_SIZE
 512

	)

76 
uöt8_t
 
	gëh_buf
[
ETH_BUF_SIZE
];

78 (*
	tudp_ª˚ivî_t
)(
	tsockë_addªss
 
	t§c
, sockë_addªs†
	td°
,

79 *
	t∑ylﬂd
, 
	t∑ylﬂd_Àn
);

81 
	`öô_udp_li°íîs
();

83 
	`ªgi°î_addrs
(c⁄° 
ëh_mac_addr_t
 *
mac_addr
, c⁄° 
ù_addr
 *ip_addr);

85 
	`ªgi°î_udp_li°íî
(
p‹t
, 
udp_ª˚ivî_t
 
rcvr
);

87 
	`£nd_udp_pkt
(
§c_p‹t
, 
sockë_addªss
 
d°
,

88 c⁄° *
buf
, 
size_t
 
Àn
);

90 
	`h™dÀ_ëh_∑ckë
(
size_t
 
ªcv_Àn
);

92 
	`√tw‹k_check
();

94 
	`√tw‹k_öô
();

	@firmware/octoclock/include/octoclock.h

18 #i‚de‡
_OCTOCLOCK_H_


19 
	#_OCTOCLOCK_H_


	)

21 
	~"o˘o˛ock/comm⁄.h
"

23 
	~<°dboﬁ.h
>

24 
	~<°döt.h
>

27 
	#F_CPU
 7372800UL

	)

35 
	#TIMER1_INIT
(Ë
TCCR1B
 = (1 << 
CS12
Ë| (1 << 
CS10
); \

36 
TIMSK
 |(1<<
TOIE1
); \

37 
TCNT1
 = 0;

	)

39 
	#TIMER1_DISABLE
(Ë
TCCR1B
 = 0; \

40 
TIMSK
 = 0; \

41 
TCNT1
 = 0;

	)

43 
	#TIMER1_ONE_SECOND
 ((
uöt32_t
)(12207))

	)

46 
	#OCTOCLOCK_EEPROM_MAC_ADDR
 0

	)

47 
	#OCTOCLOCK_EEPROM_IP_ADDR
 6

	)

48 
	#OCTOCLOCK_EEPROM_DR_ADDR
 10

	)

49 
	#OCTOCLOCK_EEPROM_NETMASK
 14

	)

50 
	#OCTOCLOCK_EEPROM_SERIAL
 18

	)

51 
	#OCTOCLOCK_EEPROM_NAME
 28

	)

52 
	#OCTOCLOCK_EEPROM_REVISION
 38

	)

54 
	#OCTOCLOCK_EEPROM_APP_LEN
 100

	)

55 
	#OCTOCLOCK_EEPROM_APP_CRC
 102

	)

61 
	#HEX__
(
n
Ë0x##n##
LU


	)

64 
	#B8__
(
x
) ((x&0x0000000FLU)?1:0) \

65 +((
x
&0x000000F0LU)?2:0) \

66 +((
x
&0x00000F00LU)?4:0) \

67 +((
x
&0x0000F000LU)?8:0) \

68 +((
x
&0x000F0000LU)?16:0) \

69 +((
x
&0x00F00000LU)?32:0) \

70 +((
x
&0x0F000000LU)?64:0) \

71 +((
x
&0xF0000000LU)?128:0)

	)

74 
	#Bôs_8
(
d
Ë(()
	`B8__
(
	`HEX__
(d)))

	)

77 
	#Bôs_16
(
dmsb
,
dlsb
Ë((()
	`Bôs_8
(dmsb)<<8) \

78 + 
	`Bôs_8
(
dlsb
))

	)

81 
	#Bôs_32
(
dmsb
,
db2
,
db3
,
dlsb
Ë((()
	`Bôs_8
(dmsb)<<24) \

82 + (()
	`Bôs_8
(
db2
)<<16) \

83 + (()
	`Bôs_8
(
db3
)<<8) \

84 + 
	`Bôs_8
(
dlsb
))

	)

92 
£tup_©mñ_io_p‹ts
();

	@firmware/octoclock/include/serial.h

18 #i‚de‡
_SERIAL_H_


19 
	#_SERIAL_H_


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

24 
	~<o˘o˛ock.h
>

26 
	#BAUD_DELAY
(
baud
Ë((1.0 / ()baudË* (()
F_CPU
 / 8.0))

	)

27 
	#BAUD_115200_DELAY
 
	`BAUD_DELAY
(115200)

	)

29 
£rül_öô
(vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
);

30 
£rül_tx_P
(c⁄° * 
mesßge
, vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
);

31 
£rül_tx
(c⁄° * 
mesßge
, vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
);

32 
£rül_tx_byã
(
uöt8_t
 
byã
, vﬁ©ûêuöt8_t* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
);

33 
£rül_tx_hex
(
uöt8_t
 
byã
, vﬁ©ûêuöt8_t* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
);

34 
£rül_rx_ch¨
(vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
);

35 
£rül_rx_ch¨_nowaô
(vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
);

	@firmware/octoclock/include/state.h

18 #i‚de‡
_STATE_H_


19 
	#_STATE_H_


	)

21 
	~<°dboﬁ.h
>

23 
	~<o˘o˛ock.h
>

26 vﬁ©ûê
boﬁ
 
g_ext_ªf_¥e£¡
;

27 vﬁ©ûê
boﬁ
 
g_gps_¥e£¡
;

28 vﬁ©ûê
swôch_pos_t
 
g_swôch_pos
;

29 vﬁ©ûê
ªf_t
 
g_ªf
;

32 
	mLED_TOP
,

33 
	mLED_MIDDLE
,

34 
	mLED_BOTTOM


35 } 
	tÀd_t
;

37 
Àd
(
Àd_t
 
which
, 
boﬁ
 
⁄
);

39 
Àds_off
();

41 
¥e„r_öã∫Æ
();

43 
¥e„r_exã∫Æ
();

	@firmware/octoclock/include/usart.h

18 #i‚de‡
_USART_H_


19 
	#_USART_H_


	)

21 
	#USART_BAUDRATE
 115200

	)

22 
	#BAUD_PRESCALE
 3

	)

24 
ußπ_öô
();

26 
ußπ_gëc
();

28 
ußπ_putc
(
ch
);

	@firmware/octoclock/lib/arp_cache.c

18 
	~"¨p_ˇche.h
"

19 
	~<°ddef.h
>

22 
ù_addr
 
	mù
;

23 
ëh_mac_addr_t
 
	mmac
;

24 } 
	t¨p_ˇche_t
;

26 
	#NENTRIES
 8

27 

	)

28 
size_t
 
	g√¡rõs
;

29 
size_t
 
	gvi˘im
;

30 
¨p_ˇche_t
 
	gˇche
[
NENTRIES
];

33 
	$¨p_ˇche_öô
()

35 
√¡rõs
 = 0;

36 
vi˘im
 = 0;

37 
	}
}

41 
	$¨p_ˇche_lookup
(c⁄° 
ù_addr
 *
ù
)

43 
i
;

44 
i
 = 0; i < 
√¡rõs
; i++)

45 i‡(
ˇche
[
i
].
ù
.
addr
 == ip->addr)

46  
i
;

49 
	}
}

52 
	$¨p_ˇche_Æloc
()

54 i‡(
√¡rõs
 < 
NENTRIES
)

55  
√¡rõs
++;

57 
i
 = 
vi˘im
;

58 
vi˘im
 = (vi˘im + 1Ë% 
NENTRIES
;

59  
i
;

60 
	}
}

63 
	$¨p_ˇche_upd©e
(c⁄° 
ù_addr
 *
ù
,

64 c⁄° 
ëh_mac_addr_t
 *
mac
)

66 
i
 = 
	`¨p_ˇche_lookup
(
ù
);

67 i‡(
i
 < 0){

68 
i
 = 
	`¨p_ˇche_Æloc
();

69 
ˇche
[
i
].
ù
 = *ip;

70 
ˇche
[
i
].
mac
 = *mac;

73 
ˇche
[
i
].
mac
 = *mac;

75 
	}
}

77 
boﬁ


78 
	$¨p_ˇche_lookup_mac
(c⁄° 
ù_addr
 *
ù
,

79 
ëh_mac_addr_t
 *
mac
)

81 
i
 = 
	`¨p_ˇche_lookup
(
ù
);

82 i‡(
i
 < 0)

83  
Ál£
;

85 *
mac
 = 
ˇche
[
i
].mac;

86  
åue
;

87 
	}
}

	@firmware/octoclock/lib/arp_cache.h

18 #i‚de‡
INCLUDED_ARP_CACHE_H


19 
	#INCLUDED_ARP_CACHE_H


	)

21 
	~<lwù/ù_addr.h
>

22 
	~<√t/ëh_mac_addr.h
>

23 
	~<°dboﬁ.h
>

25 
¨p_ˇche_öô
();

27 
¨p_ˇche_upd©e
(c⁄° 
ù_addr
 *
ù
,

28 c⁄° 
ëh_mac_addr_t
 *
mac
);

30 
boﬁ
 
¨p_ˇche_lookup_mac
(c⁄° 
ù_addr
 *
ù
,

31 
ëh_mac_addr_t
 *
mac
);

	@firmware/octoclock/lib/clkdist.c

18 
	~<avr/io.h
>

20 
	~<o˘o˛ock.h
>

21 
	~<˛kdi°.h
>

22 
	~<°©e.h
>

24 
	~<utû/dñay.h
>

26 
	#waô
(Ë
uöt16_t
 
u
=14000; u; u--Ë
	`asm
("n›");

	)

28 
	#CLK
 (
PA0
)

29 
	#CE_
 (
PA1
)

30 
	#MOSI
 (
PA2
)

	)

31 
	#MISO
 (
PA3
)

	)

32 
	#PD_
 (
PA4
)

	)

33 
	#SYNC_
 (
PA5
)

	)

38 c⁄° 
uöt32_t
 
	gèbÀ_Pri_Ref
[] = {

39 
Bôs_32
(1,01010100,0,0),

40 
Bôs_32
(1,01010100,0,0),

41 
Bôs_32
(1,01010100,0,0),

42 
Bôs_32
(1,01010100,0,0),

43 
Bôs_32
(1,01010100,0,0),

44 
Bôs_32
(0,0,1001,11010100),

45 
Bôs_32
(1,0,0010000,0),

46 
Bôs_32
(1,01000000,0,0),

47 
Bôs_32
(0,0,1,10000000)

52 c⁄° 
uöt32_t
 
	gèbÀ_Sec_Ref
[] = {

53 
Bôs_32
(0001,01010100,0,100000),

54 
Bôs_32
(0001,01010100,0,100000),

55 
Bôs_32
(0001,01010100,0,100000),

56 
Bôs_32
(0001,01010100,0,100000),

57 
Bôs_32
(0001,01010100,0,100000),

58 
Bôs_32
(0,0,1,10011011),

59 
Bôs_32
(1,0,10000,0),

60 
Bôs_32
(1,01000000,0,0),

61 
Bôs_32
(0,0,1,10000000)

66 
	gèbÀ_size
 =  (
èbÀ_Pri_Ref
Ë/ (
uöt32_t
);

68 
	$£t_bô
(
uöt8_t
 
bô_numbî
, 
Levñs
 
bô_vÆue
) {

70 if(
bô_vÆue
 =
Hi
)

71 
PORTA
 |1<<
bô_numbî
;

73 
PORTA
 &~ (1<<
bô_numbî
);

74 
	}
}

76 
boﬁ
 
	$gë_bô
(
uöt8_t
 
bô_numbî
) {

77 
	`asm
("nop");

79 
uöt8_t
 
p‹tA
 = 
PINA
;

80  (
p‹tA
 & 1<< 
bô_numbî
Ë> 0 ? 
åue
 : 
Ál£
;

81 
	}
}

85 
	$£nd_SPI
(
uöt32_t
 
bôs
) {

88 
	`£t_bô
(
CE_
, 
Lo
);

92 
uöt8_t
 
i
=0; i<32; i++) {

93 
	`£t_bô
(
MOSI
, ((
bôs
 & (1UL<<
i
)Ë? 
Hi
 : 
Lo
) );

94 
	`asm
("nop");

95 
	`£t_bô
(
CLK
, 
Hi
);

96 
	`£t_bô
(
CLK
, 
Lo
);

100 
	`£t_bô
(
CE_
, 
Hi
);

101 
	}
}

103 
uöt32_t
 
	$ª˚ive_SPI
() {

104 
uöt32_t
 
bôs
 = 0;

106 
	`£t_bô
(
CE_
, 
Hi
);

107 
	`£t_bô
(
CLK
, 
Lo
);

108 
	`£t_bô
(
MOSI
,
Lo
);

109 
	`£t_bô
(
CE_
, 
Lo
);

112 
uöt8_t
 
i
=0; i<32; i++){

113 
bôs
 >>= 1;

114 
	`£t_bô
(
CLK
, 
Hi
);

115 if–
	`gë_bô
(
MISO
ËË
bôs
 |= 0x80000000;

116 
	`£t_bô
(
CLK
, 
Lo
);

120 
	`£t_bô
(
CE_
, 
Hi
);

123  (
uöt32_t
)(
bôs
 >> 4);

124 
	}
}

126 
	$£tup_TI_CDCE18005
(
TI_I≈ut_10_MHz
 
which_öput
) {

128 
uöt32_t
 
ãmp
;

130 if(
which_öput
 =
Prim¨y_GPS
) {

131 
uöt8_t
 
i
=0; i<
èbÀ_size
; i++){

132 
ãmp
 = 
èbÀ_Pri_Ref
[
i
]<<4;

133 
ãmp
 |
i
;

135 
	`£nd_SPI
(
ãmp
);

139 
uöt8_t
 
i
=0; i<
èbÀ_size
; i++){

140 
ãmp
 = 
èbÀ_Sec_Ref
[
i
]<<4;

141 
ãmp
 |
i
;

143 
	`£nd_SPI
(
ãmp
);

146 
	}
}

148 
	$ª£t_TI_CDCE18005
() {

150 
	`£t_bô
(
CE_
, 
Hi
);

151 
	`£t_bô
(
PD_
, 
Lo
);

152 
	`waô
();

155 
	`£t_bô
(
PD_
, 
Hi
);

156 
	`waô
();

158 
	`£t_bô
(
SYNC_
, 
Lo
);

159 
	`waô
();

160 
	`£t_bô
(
SYNC_
, 
Hi
);

162 
	`waô
();

163 
	}
}

165 
uöt32_t
 
	$gë_TI_CDCE18005
(
CDCE18005
 
which_ªgi°î
){

166 
uöt32_t
 
gë_ªg_vÆue
 = 0;

167 
gë_ªg_vÆue
 = (0xf0 & (
which_ªgi°î
 << 4)Ë| 
Ród_Comm™d
;

170 
	`£nd_SPI
(
gë_ªg_vÆue
);

171  
	`ª˚ive_SPI
();

172 
	}
}

174 
	$£t_TI_CDCE18005
(
CDCE18005
 
which_ªgi°î
, 
uöt32_t
 
bôs
){

175 
	`£nd_SPI
((
bôs
 << 4Ë| 
which_ªgi°î
);

176 
	}
}

178 
boﬁ
 
	$check_TI_CDCE18005
(
TI_I≈ut_10_MHz
 
which_öput
,

179 
CDCE18005
 
which_ªgi°î
) {

181 if(
which_öput
 =
Prim¨y_GPS
){

182 
uöt32_t
 
ªad_vÆue
 = 
	`gë_TI_CDCE18005
(
which_ªgi°î
);

183  
ªad_vÆue
 =
èbÀ_Pri_Ref
[
which_ªgi°î
];

185 
uöt32_t
 
ªad_vÆue
 = 
	`gë_TI_CDCE18005
(
which_ªgi°î
);

186  
ªad_vÆue
 =
èbÀ_Sec_Ref
[
which_ªgi°î
];

188 
	}
}

	@firmware/octoclock/lib/enc28j60.c

18 
	~<o˘o˛ock.h
>

20 
	~<√t/íc28j60.h
>

22 
	~<utû/dñay.h
>

24 
uöt8_t
 
	gcuºít_b™k
;

25 
uöt16_t
 
	g√xt_pkt_±r
;

27 
	#SET_CS_ACTIVE
(Ë
SPI_PORT
 &~(1<<
SPI_CS
);

	)

28 
	#SET_CS_PASSIVE
(Ë
SPI_PORT
 |(1<<
SPI_CS
);

	)

29 
	#SPI_WAIT
(Ë!(
SPSR
 & (1<<
SPIF
)));

	)

31 
uöt8_t
 
	$íc28j60_ªad_›
(
uöt8_t
 
›
, uöt8_à
addr
){

32 
	`SET_CS_ACTIVE
();

33 
SPDR
 = (
›
 | (
addr
 & 
ADDR_MASK
));

34 
	`SPI_WAIT
();

35 
SPDR
 = 0x00;

36 
	`SPI_WAIT
();

38 if(
addr
 & 0x80){

39 
SPDR
 = 0x00;

40 
	`SPI_WAIT
();

43 
	`SET_CS_PASSIVE
();

44  
SPDR
;

45 
	}
}

47 
	$íc28j60_wrôe_›
(
uöt8_t
 
›
, uöt8_à
addr
, uöt8_à
vÆue
){

48 
	`SET_CS_ACTIVE
();

50 
SPDR
 = (
›
 | (
addr
 & 
ADDR_MASK
));

51 
	`SPI_WAIT
();

52 
SPDR
 = 
vÆue
;

53 
	`SPI_WAIT
();

55 
	`SET_CS_PASSIVE
();

56 
	}
}

58 
	$íc28j60_ªad_buf„r
(
uöt8_t
* 
buf
, 
uöt16_t
 
Àn
){

59 
	`SET_CS_ACTIVE
();

61 
SPDR
 = 
RBM
;

62 
	`SPI_WAIT
();

63 
Àn
){

64 
Àn
--;

65 
SPDR
 = 0x00;

66 
	`SPI_WAIT
();

67 *
buf
 = 
SPDR
;

68 
buf
++;

70 *
buf
 = '\0';

72 
	`SET_CS_PASSIVE
();

73 
	}
}

75 
	$íc28j60_wrôe_buf„r
(
uöt8_t
* 
buf
, 
uöt16_t
 
Àn
){

76 
	`SET_CS_ACTIVE
();

78 
SPDR
 = 
WBM
;

79 
	`SPI_WAIT
();

80 
Àn
){

81 
Àn
--;

82 
SPDR
 = *
buf
;

83 
buf
++;

84 
	`SPI_WAIT
();

87 
	`SET_CS_PASSIVE
();

88 
	}
}

90 
	$íc28j60_£t_b™k
(
uöt8_t
 
addr
){

91 if((
addr
 & 
BANK_MASK
Ë!
cuºít_b™k
){

92 
	`íc28j60_wrôe_›
(
BFC
, 
ECON1
, (
BSEL1
|
BSEL0
));

93 
	`íc28j60_wrôe_›
(
BFS
, 
ECON1
, ((
addr
 & 
BANK_MASK
) >> 5));

94 
cuºít_b™k
 = (
addr
 & 
BANK_MASK
);

96 
	}
}

98 
uöt8_t
 
	$íc28j60_ªad
(
uöt8_t
 
addr
){

99 
	`íc28j60_£t_b™k
(
addr
);

100  
	`íc28j60_ªad_›
(
RCR
, 
addr
);

101 
	}
}

103 
	$íc28j60_wrôe
(
uöt8_t
 
addr
, 
uöt16_t
 
vÆue
){

104 
	`íc28j60_£t_b™k
(
addr
);

105 
	`íc28j60_wrôe_›
(
WCR
, 
addr
, 
vÆue
);

106 
	}
}

108 
	$íc28j60_öô
(
uöt8_t
* 
mac_addr
){

109 
SPI_DDR
 |(1 << 
SPI_CS
);

110 
	`SET_CS_PASSIVE
();

112 
SPI_DDR
 |((1 << 
SPI_MOSI
Ë| (1 << 
SPI_SCK
));

113 
SPI_DDR
 &~(1 << 
SPI_MISO
);

114 
SPI_PORT
 &~(1 << 
SPI_MOSI
);

115 
SPI_PORT
 &~(1 << 
SPI_SCK
);

116 
SPCR
 = ((1 << 
SPE
Ë| (1 << 
MSTR
));

117 
SPSR
 |(1 << 
SPI2X
);

118 
	`íc28j60_wrôe_›
(
SC
, 0, SC);

119 
√xt_pkt_±r
 = 
RXSTART_INIT
;

122 
	`íc28j60_wrôe
(
ERXSTL
, (
RXSTART_INIT
 & 0xFF));

123 
	`íc28j60_wrôe
(
ERXSTH
, (
RXSTART_INIT
 >> 8));

124 
	`íc28j60_wrôe
(
ERXNDL
, (
RXSTOP_INIT
 & 0xFF));

125 
	`íc28j60_wrôe
(
ERXNDH
, (
RXSTOP_INIT
 >> 8));

128 
	`íc28j60_wrôe
(
ETXSTL
, (
TXSTART_INIT
 & 0xFF));

129 
	`íc28j60_wrôe
(
ETXSTH
, (
TXSTART_INIT
 >> 8));

130 
	`íc28j60_wrôe
(
ETXNDL
, (
TXSTOP_INIT
 & 0xFF));

131 
	`íc28j60_wrôe
(
ETXNDH
, (
TXSTOP_INIT
 >> 8));

134 
	`íc28j60_wrôe
(
ERXFCON
, (
UCEN
|
CRCEN
|
PMEN
|
BCEN
));

135 
	`íc28j60_wrôe
(
EPMM0
, 0x3F);

136 
	`íc28j60_wrôe
(
EPMM1
, 0x30);

137 
	`íc28j60_wrôe
(
EPMCSL
, 0xF9);

138 
	`íc28j60_wrôe
(
EPMCSH
, 0xF7);

141 
	`íc28j60_wrôe
(
MACON1
, (
MARXEN
|
TXPAUS
|
RXPAUS
));

142 
	`íc28j60_wrôe
(
MACON2
, 0x00);

143 
	`íc28j60_wrôe_›
(
BFS
, 
MACON3
, (
PADCFG0
|
TXCRCEN
|
FRMLNEN
));

144 
	`íc28j60_wrôe
(
MAIPGL
, 0x12);

145 
	`íc28j60_wrôe
(
MAIPGH
, 0x0C);

146 
	`íc28j60_wrôe
(
MABBIPG
, 0x12);

147 
	`íc28j60_wrôe
(
MAMXFLL
, (
MAX_FRAMELEN
 & 0xFF));

148 
	`íc28j60_wrôe
(
MAMXFLH
, (
MAX_FRAMELEN
 >> 8));

149 
	`íc28j60_wrôe
(
MAADR5
, 
mac_addr
[0]);

150 
	`íc28j60_wrôe
(
MAADR4
, 
mac_addr
[1]);

151 
	`íc28j60_wrôe
(
MAADR3
, 
mac_addr
[2]);

152 
	`íc28j60_wrôe
(
MAADR2
, 
mac_addr
[3]);

153 
	`íc28j60_wrôe
(
MAADR1
, 
mac_addr
[4]);

154 
	`íc28j60_wrôe
(
MAADR0
, 
mac_addr
[5]);

156 
	`íc28j60_£t_b™k
(
ECON1
);

157 
	`íc28j60_wrôe_›
(
BFS
, 
ECON1
, 
ENCRXEN
);

158 
	}
}

160 
uöt16_t
 
	$íc28j60_ªcv
(
uöt8_t
* 
buf
, 
uöt16_t
 
max_Àn
){

161 
uöt16_t
 
rx°©
, 
Àn
;

164 if(
	`íc28j60_ªad
(
EPKTCNT
) == 0)  0;

166 
	`íc28j60_wrôe
(
ERDPTL
, (
√xt_pkt_±r
 & 0xFF));

167 
	`íc28j60_wrôe
(
ERDPTH
, (
√xt_pkt_±r
 >> 8));

168 
√xt_pkt_±r
 = 
	`íc28j60_ªad_›
(
RBM
, 0Ë| ((
uöt16_t
)enc28j60_read_op(RBM, 0) << 8);

169 
Àn
 = 
	`íc28j60_ªad_›
(
RBM
, 0Ë| ((
uöt16_t
)enc28j60_read_op(RBM, 0) << 8);

170 
Àn
 -= 4;

171 
rx°©
 = 
	`íc28j60_ªad_›
(
RBM
, 0Ë| ((
uöt16_t
)enc28j60_read_op(RBM, 0) << 8);

174 if(
Àn
 > (
max_Àn
 - 1))Üen = max_len - 1;

175 if((
rx°©
 & 0x80Ë=0Ë
Àn
 = 0;

176 
	`íc28j60_ªad_buf„r
(
buf
, 
Àn
);

179 
	`íc28j60_wrôe
(
ERXRDPTL
, (
√xt_pkt_±r
 & 0xFF));

180 
	`íc28j60_wrôe
(
ERXRDPTH
, (
√xt_pkt_±r
 >> 8));

181 if(((
√xt_pkt_±r
 - 1Ë< 
RXSTART_INIT
Ë|| (“ext_pkt_±∏- 1Ë> 
RXSTOP_INIT
)){

182 
	`íc28j60_wrôe
(
ERXRDPTL
, (
RXSTOP_INIT
 & 0xFF));

183 
	`íc28j60_wrôe
(
ERXRDPTH
, (
RXSTOP_INIT
 >> 8));

186 
	`íc28j60_wrôe
(
ERXRDPTL
, ((
√xt_pkt_±r
 - 1) & 0xFF));

187 
	`íc28j60_wrôe
(
ERXRDPTH
, ((
√xt_pkt_±r
 - 1) >> 8));

189 
	`íc28j60_wrôe_›
(
BFS
, 
ECON2
, 
PKTDEC
);

191  
Àn
;

192 
	}
}

194 
	$íc28j60_£nd
(
uöt8_t
* 
buf
, 
uöt16_t
 
Àn
){

197 
	`íc28j60_ªad_›
(
RCR
, 
ECON1
Ë& 
TXRTS
){

198 if(
	`íc28j60_ªad
(
EIR
Ë& 
TXERIF
){

199 
	`íc28j60_wrôe_›
(
BFS
, 
ECON1
, 
TXRST
);

200 
	`íc28j60_wrôe_›
(
BFC
, 
ECON1
, 
TXRST
);

204 
	`íc28j60_wrôe
(
EWRPTL
, (
TXSTART_INIT
 & 0xFF));

205 
	`íc28j60_wrôe
(
EWRPTH
, (
TXSTART_INIT
 >> 8));

206 
	`íc28j60_wrôe
(
ETXNDL
, ((
TXSTART_INIT
 + 
Àn
) & 0xFF));

207 
	`íc28j60_wrôe
(
ETXNDH
, ((
TXSTART_INIT
 + 
Àn
) >> 8));

208 
	`íc28j60_wrôe_›
(
WBM
, 0, 0x00);

209 
	`íc28j60_wrôe_buf„r
(
buf
, 
Àn
);

210 
	`íc28j60_wrôe_›
(
BFS
, 
ECON1
, 
TXRTS
);

211 
	}
}

	@firmware/octoclock/lib/gpsdo.c

18 
	~<avr/öãºu±.h
>

20 
	~<o˘o˛ock.h
>

21 
	~<gpsdo.h
>

22 
	~<ußπ.h
>

24 
	$£nd_gpsdo_cmd
(* 
buf
, 
uöt8_t
 
size
){

25 
uöt8_t
 
i
 = 0; i < 
size
; i++Ë
	`ußπ_putc
(
buf
[i]);

26 
	}
}

29 
	$ISR
(
USART1_RX_ve˘
){

30 
gpsdo_buf
[
gpsdo_°©e
.
pos
] = 
UDR1
;

32 if(
gpsdo_°©e
.
pos
 =(
POOLSIZE
-1)){

33 
gpsdo_°©e
.
num_wøps
++;

34 
gpsdo_°©e
.
pos
 = 0;

36 
gpsdo_°©e
.
pos
++;

37 
	}
}

	@firmware/octoclock/lib/init.c

51 
	~<avr/io.h
>

53 
	~<o˘o˛ock.h
>

55 
	$£tup_©mñ_io_p‹ts
(){

74 
PORTA
 = 
	`Bôs_8
(00100010);

75 
DDRA
 = 1<<
DDA6
 | 1<<
DDA5
 | 1<<
DDA4
 | 1<<
DDA2
 | 1<<
DDA1
 | 1<<
DDA0
;

93 
PORTB
 = 
	`Bôs_8
(01100001);

94 
DDRB
 = 
	`Bôs_8
(11110111);

112 
PORTC
 = 0;

113 
DDRC
 = ~–1<<
DDC1
 );

131 
PORTD
 = 0;

132 
DDRD
 = 1<<
DDD3
;

150 
PORTE
 = 0;

151 
DDRE
 = 1<<
DDE1
;

172 
PORTF
 = 0;

173 
DDRF
 = 0xff;

175 
	}
}

	@firmware/octoclock/lib/network.c

18 
	~<°döt.h
>

19 
	~<°rög.h
>

21 
	~<avr/ì¥om.h
>

22 
	~<avr/öãºu±.h
>

24 
	~<lwù/ù.h
>

25 
	~<lwù/udp.h
>

26 
	~<lwù/icmp.h
>

28 
	~<debug.h
>

29 
	~<o˘o˛ock.h
>

30 
	~<°©e.h
>

31 
	~<√tw‹k.h
>

33 
	~<√t/íc28j60.h
>

34 
	~<√t/ëh_hdr.h
>

35 
	~<√t/if_¨p.h
>

36 
	~<√t/ëhîty≥.h
>

38 
	~<utû/dñay.h
>

40 
	~"¨p_ˇche.h
"

45 c⁄° 
size_t
 
	gout_buff_size
 = 
ETH_BUF_SIZE
;

46 c⁄° 
ëh_mac_addr_t
 
	gBCAST_MAC_ADDR
 = {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}};

47 
	#MAX_UDP_LISTENERS
 10

	)

52 
uöt32_t
 
	$chksum_buf„r
(

53 
uöt16_t
 *
buf
, 
size_t
 
nsh‹ts
,

54 
uöt32_t
 
öôül_chksum


56 
uöt32_t
 
chksum
 = 
öôül_chksum
;

57 
size_t
 
i
 = 0; i < 
nsh‹ts
; i++Ë
chksum
 +
buf
[i];

59 
chksum
 >> 16) chksum = (chksum & 0xffff) + (chksum >> 16);

61  
chksum
;

62 
	}
}

67 
ëh_mac_addr_t
 
	g_loˇl_mac_addr
;

68 
ù_addr
 
	g_loˇl_ù_addr
;

70 
	sli°íî_íåy
 {

71 
	mp‹t
;

72 
udp_ª˚ivî_t
 
	mrcvr
;

75 
li°íî_íåy
 
	gli°íîs
[
MAX_UDP_LISTENERS
];

77 
	$öô_udp_li°íîs
(){

78 
i
 = 0; i < 
MAX_UDP_LISTENERS
; i++)

79 
li°íîs
[
i
].
rcvr
 = 
NULL
;

80 
	}
}

82 
li°íî_íåy
 *

83 
	$föd_li°íî_by_p‹t
(
p‹t
)

85 
p‹t
 = 
	`¡ohs
(port);

87 
i
 = 0; i < 
MAX_UDP_LISTENERS
; i++){

88 i‡(
p‹t
 =
li°íîs
[
i
].port)

89  &
li°íîs
[
i
];

92 
	}
}

94 
li°íî_íåy
 *

95 
	$föd_‰ì_li°íî
()

97 
i
 = 0; i < 
MAX_UDP_LISTENERS
; i++){

98 i‡(
li°íîs
[
i
].
rcvr
 =
NULL
)

99  &
li°íîs
[
i
];

101 
	`ab‹t
();

102 
	}
}

105 
	$ªgi°î_udp_li°íî
(
p‹t
, 
udp_ª˚ivî_t
 
rcvr
)

107 
li°íî_íåy
 *
lx
 = 
	`föd_li°íî_by_p‹t
(
p‹t
);

108 i‡(
lx
)

109 
lx
->
rcvr
 =Ñcvr;

111 
lx
 = 
	`föd_‰ì_li°íî
();

112 
lx
->
p‹t
 =Öort;

113 
lx
->
rcvr
 =Ñcvr;

115 
	}
}

130 
	$£nd_pkt
(

131 
ëh_mac_addr_t
 
d°
, 
ëhîty≥
,

132 c⁄° *
buf0
, 
size_t
 
Àn0
,

133 c⁄° *
buf1
, 
size_t
 
Àn1
,

134 c⁄° *
buf2
, 
size_t
 
Àn2


137 
ëh_hdr_t
 
ehdr
;

138 
ehdr
.
d°
 = dst;

139 
ehdr
.
§c
 = 
_loˇl_mac_addr
;

140 
ehdr
.
ëhîty≥
 =Éthertype;

144 
uöt8_t
 *
p
;

145 
p
 = 
ëh_buf
;

146 
size_t
 
tŸÆ_Àn
 = 0;

149 c⁄° *
buffs
[] = {&
ehdr
, 
buf0
, 
buf1
, 
buf2
};

150 
size_t
 
Àns
[] = {(
ehdr
), 
Àn0
, 
Àn1
, 
Àn2
};

153 
size_t
 
i
 = 0; i < (
buffs
)/(buffs[0]); i++){

154 
tŸÆ_Àn
 +
Àns
[
i
];

155 
size_t
 
byãs_ªmaöög
 = 
out_buff_size
 - (size_t)(
p
 - (
uöt8_t
*)
ëh_buf
);

156 i‡(
Àns
[
i
] > 
byãs_ªmaöög
)Üens[i] = bytes_remaining;

157 
	`mem˝y
(
p
, 
buffs
[
i
], 
Àns
[i]);

158 
p
 +
Àns
[
i
];

162 i‡(
tŸÆ_Àn
 < 64)Åotal_len = 64;

167 
	`íc28j60_£nd
(
ëh_buf
, 
tŸÆ_Àn
);

168 
	}
}

171 
	$£nd_ù_pkt
(
ù_addr
 
d°
, 
¥Ÿocﬁ
,

172 c⁄° *
buf0
, 
uöt16_t
 
Àn0
,

173 c⁄° *
buf1
, 
uöt16_t
 
Àn1
)

175 
ù_hdr
 
ù
;

176 
	`_IPH_VHLTOS_SET
(&
ù
, 4, 5, 0);

177 
	`_IPH_LEN_SET
(&
ù
, (
IP_HLEN
 + 
Àn0
 + 
Àn1
));

178 
	`_IPH_ID_SET
(&
ù
, 0);

179 
	`_IPH_OFFSET_SET
(&
ù
, 
	`ht⁄s
(
IP_DF
));

180 
	`_IPH_TTL_SET
(&
ù
, 64);

181 
	`_IPH_PROTO_SET
(&
ù
, 
¥Ÿocﬁ
);

182 
	`_IPH_CHKSUM_SET
(&
ù
, 0);

183 
ù
.
§c
.
addr
 = 
	`ht⁄l
(
_loˇl_ù_addr
.addr);

184 
ù
.
de°
 = 
d°
;

186 
	`_IPH_CHKSUM_SET
(&
ù
, ~
	`chksum_buf„r
(

187 (
uöt16_t
 *Ë&
ù
, (ù)/(
öt16_t
), 0

190 
ëh_mac_addr_t
 
d°_mac
;

191 
boﬁ
 
found
 = 
	`¨p_ˇche_lookup_mac
(&
ù
.
de°
, &
d°_mac
);

192 i‡(!
found
) ;

194 
	`£nd_pkt
(
d°_mac
, 
	`ht⁄s
(
ETHERTYPE_IPV4
),

195 &
ù
, (ù), 
buf0
, 
Àn0
, 
buf1
, 
Àn1
);

196 
	}
}

199 
	$£nd_udp_pkt
(
§c_p‹t
, 
sockë_addªss
 
d°
,

200 c⁄° *
buf
, 
size_t
 
Àn
)

202 
udp_hdr
 
udp
 
_AL2
;

203 
udp
.
§c
 = 
	`ht⁄s
(
§c_p‹t
);

204 
udp
.
de°
 = 
	`ht⁄s
(
d°
.
p‹t
);

205 
udp
.
Àn
 = 
	`ht⁄s
(
UDP_HLEN
 +Üen);

206 
udp
.
chksum
 = 0;

208 
	`£nd_ù_pkt
(
d°
.
addr
, 
IP_PROTO_UDP
,

209 &
udp
, (udp), 
buf
, 
Àn
);

210 
	}
}

213 
	$h™dÀ_udp_∑ckë
(
ù_addr
 
§c_ù
, ù_add∏
d°_ù
,

214 
udp_hdr
 *
udp
, 
size_t
 
Àn
)

216 *
∑ylﬂd
 = ((*Ë
udp
Ë+ 
UDP_HLEN
;

217 
∑ylﬂd_Àn
 = 
Àn
 - 
UDP_HLEN
;

219 
li°íî_íåy
 *
lx
 = 
	`föd_li°íî_by_p‹t
(
udp
->
de°
);

220 i‡(
lx
){

221 
sockë_addªss
 
§c
 = 
	`make_sockë_addªss
(
§c_ù
, 
	`¡ohs
(
udp
->src));

222 
sockë_addªss
 
d°
 = 
	`make_sockë_addªss
(
d°_ù
, 
	`¡ohs
(
udp
->
de°
));

223 
lx
->
	`rcvr
(
§c
, 
d°
, 
∑ylﬂd
, 
∑ylﬂd_Àn
);

225 
	}
}

228 
	$h™dÀ_icmp_∑ckë
(
ù_addr
 
§c
, ù_add∏
d°
,

229 
icmp_echo_hdr
 *
icmp
, 
size_t
 
Àn
)

231 
icmp
->
ty≥
){

232 
ICMP_DUR
:

233 i‡(
icmp
->
code
 =
ICMP_DUR_PORT
){

235 
ù_hdr
 *
ù
 = (ù_hd∏*)(((
uöt8_t
*)
icmp
Ë+ (
icmp_echo_hdr
));

236 
udp_hdr
 *
udp
 = (udp_hd∏*)(((*)
ù
Ë+ 
IP_HLEN
);

237 
uöt8_t
 
¥Ÿocﬁ
 = 
	`¡ohs
(
ù
->
_âl_¥Ÿo
) & 0xff;

238 i‡(
¥Ÿocﬁ
 !
IP_PROTO_UDP
) ;

240 
li°íî_íåy
 *
lx
 = 
	`föd_li°íî_by_p‹t
(
udp
->
§c
);

241 i‡(
lx
){

242 
sockë_addªss
 
§c
 = 
	`make_sockë_addªss
(
ù
->§c, 
udp
->src);

243 
sockë_addªss
 
d°
 = 
	`make_sockë_addªss
(
ù
->
de°
, 
udp
->dest);

244 
lx
->
	`rcvr
(
§c
, 
d°
, 
NULL
, 0);

249 
ICMP_ECHO
:{

250 c⁄° *
icmp_d©a_buff
 = ((
uöt8_t
*)
icmp
Ë+ (
icmp_echo_hdr
);

251 
uöt16_t
 
icmp_d©a_Àn
 = 
Àn
 - (
icmp_echo_hdr
);

253 
icmp_echo_hdr
 
echo_ª∂y
;

254 
echo_ª∂y
.
ty≥
 = 0;

255 
echo_ª∂y
.
code
 = 0;

256 
echo_ª∂y
.
chksum
 = 0;

257 
echo_ª∂y
.
id
 = 
icmp
->id;

258 
echo_ª∂y
.
£qno
 = 
icmp
->seqno;

259 
echo_ª∂y
.
chksum
 = ~
	`chksum_buf„r
(

260 (
uöt16_t
 *)
icmp_d©a_buff
,

261 
icmp_d©a_Àn
/(
öt16_t
),

262 
	`chksum_buf„r
(

263 (
uöt16_t
 *)&
echo_ª∂y
,

264 (
echo_ª∂y
)/(
öt16_t
),

268 
	`£nd_ù_pkt
(

269 
§c
, 
IP_PROTO_ICMP
,

270 &
echo_ª∂y
, (echo_reply),

271 
icmp_d©a_buff
, 
icmp_d©a_Àn


279 
	}
}

282 
	$£nd_¨p_ª∂y
(
¨p_ëh_ùv4
 *
ªq
, 
ëh_mac_addr_t
 
our_mac
)

284 
¨p_ëh_ùv4
 
ª∂y
 
_AL4
;

285 
ª∂y
.
¨_hrd
 = 
ªq
->ar_hrd;

286 
ª∂y
.
¨_¥o
 = 
ªq
->ar_pro;

287 
ª∂y
.
¨_h 
 = 
ªq
->ar_hln;

288 
ª∂y
.
¨_∂n
 = 
ªq
->ar_pln;

289 
ª∂y
.
¨_›
 = 
	`ht⁄s
(
ARPOP_REPLY
);

290 
	`mem˝y
(
ª∂y
.
¨_sha
, &
our_mac
, 6);

291 
	`mem˝y
(
ª∂y
.
¨_sù
, 
ªq
->
¨_tù
, 4);

292 
	`mem˝y
(
ª∂y
.
¨_tha
, 
ªq
->
¨_sha
, 6);

293 
	`mem˝y
(
ª∂y
.
¨_tù
, 
ªq
->
¨_sù
, 4);

295 
ëh_mac_addr_t
 
t
;

296 
	`mem˝y
(
t
.
addr
, 
ª∂y
.
¨_tha
, 6);

297 
	`£nd_pkt
(
t
, 
	`ht⁄s
(
ETHERTYPE_ARP
), &
ª∂y
, (reply), 0, 0, 0, 0);

298 
	}
}

301 
	$h™dÀ_¨p_∑ckë
(
¨p_ëh_ùv4
 *
p
, 
size_t
 
size
)

303 i‡(
size
 < (
¨p_ëh_ùv4
))

306 i‡(
	`¡ohs
(
p
->
¨_hrd
Ë!
ARPHRD_ETHER


307 || 
	`¡ohs
(
p
->
¨_¥o
Ë!
ETHERTYPE_IPV4


308 || 
p
->
¨_h 
 != 6

309 || 
p
->
¨_∂n
 != 4)

312 if(
	`¡ohs
(
p
->
¨_›
Ë=
ARPOP_REPLY
){

313 
ù_addr
 ip_addr;

314 
	`mem˝y
(&
ù_addr
, 
p
->
¨_sù
, (ip_addr));

315 
ëh_mac_addr_t
 
mac_addr
;

316 
	`mem˝y
(&
mac_addr
, 
p
->
¨_sha
, (mac_addr));

317 
	`¨p_ˇche_upd©e
(&
ù_addr
, &
mac_addr
);

320 i‡(
	`¡ohs
(
p
->
¨_›
Ë!
ARPOP_REQUEST
)

323 
ù_addr
 
sù
;

324 
ù_addr
 
tù
;

326 
	`mem˝y
(&(
sù
.
addr
), &(
p
->
¨_sù
), 4);

327 
	`mem˝y
(&(
tù
.
addr
), &(
p
->
¨_tù
), 4);

328 
sù
.
addr
 = 
	`¡ohl
(sip.addr);

329 
tù
.
addr
 = 
	`¡ohl
(tip.addr);

331 if(
	`memcmp
(&
tù
, &
_loˇl_ù_addr
, (_local_ip_addr)) == 0){

332 
	`£nd_¨p_ª∂y
(
p
, 
_loˇl_mac_addr
);

334 
	}
}

337 
	$h™dÀ_ëh_∑ckë
(
size_t
 
ªcv_Àn
)

339 
ëh_hdr_t
 *
ëh_hdr
 = (ëh_hdr_à*)
ëh_buf
;

340 
uöt16_t
 
ëhîty≥
 = 
	`ht⁄s
(
ëh_hdr
->ethertype);

342 i‡(
ëhîty≥
 =
ETHERTYPE_ARP
){

343 
¨p_ëh_ùv4
 *
¨p
 = (¨p_ëh_ùv4 *)(
ëh_buf
 + (
ëh_hdr_t
));

344 
	`h™dÀ_¨p_∑ckë
(
¨p
, 
ªcv_Àn
-
ETH_HLEN
);

346 i‡(
ëhîty≥
 =
ETHERTYPE_IPV4
){

347 
ù_hdr
 *
ù
 = (ù_hd∏*)(
ëh_buf
 + (
ëh_hdr_t
));

349 i‡(
	`_IPH_V
(
ù
Ë!4 || 
	`_IPH_HL
(ip) != 5)

352 i‡(
	`_IPH_OFFSET
(
ù
Ë& (
IP_MF
 | 
IP_OFFMASK
))

356 
boﬁ
 
is_bˇ°
 = 
	`memcmp
(&
ëh_hdr
->
d°
, &
BCAST_MAC_ADDR
, (BCAST_MAC_ADDR)) == 0;

357 
ù_addr
 
ht⁄l_loˇl_ù_addr
;

358 
ht⁄l_loˇl_ù_addr
.
addr
 = 
	`ht⁄l
(
_loˇl_ù_addr
.addr);

360 
boﬁ
 
is_my_ù
 = 
	`memcmp
(&
ù
->
de°
, &
ht⁄l_loˇl_ù_addr
, (
_loˇl_ù_addr
)) == 0;

361 i‡(!
is_bˇ°
 && !
is_my_ù
) ;

363 
	`¨p_ˇche_upd©e
(&
ù
->
§c
, (
ëh_mac_addr_t
 *)(((*)
ëh_buf
)+6));

365 
	`_IPH_PROTO
(
ù
)){

366 
IP_PROTO_UDP
:

367 
	`h™dÀ_udp_∑ckë
(
ù
->
§c
, ip->
de°
, (
udp_hdr
 *)(((*)ùË+ 
IP_HLEN
), (
ªcv_Àn
-
ETH_HLEN
-IP_HLEN));

370 
IP_PROTO_ICMP
:

371 
	`h™dÀ_icmp_∑ckë
(
ù
->
§c
, ip->
de°
, (
icmp_echo_hdr
 *)(((*)ùË+ 
IP_HLEN
), (
ªcv_Àn
-
ETH_HLEN
-IP_HLEN));

380 
	}
}

386 
boﬁ
 
	g£nd_g¨p
 = 
Ál£
;

387 
uöt32_t
 
	gnum_ovîÊows
 = 0;

390 
	$ISR
(
TIMER1_OVF_ve˘
){

391 
num_ovîÊows
++;

392 if(!(
num_ovîÊows
 % 6)Ë
£nd_g¨p
 = 
åue
;

393 
	}
}

397 
	$£nd_gøtuôous_¨p
(){

398 
£nd_g¨p
 = 
Ál£
;

401 
ù_addr
 
ht⁄l_ù_addr
;

402 
ht⁄l_ù_addr
.
addr
 = 
	`ht⁄l
(
_loˇl_ù_addr
.addr);

404 
¨p_ëh_ùv4
 
ªq
 
_AL4
;

405 
ªq
.
¨_hrd
 = 
	`ht⁄s
(
ARPHRD_ETHER
);

406 
ªq
.
¨_¥o
 = 
	`ht⁄s
(
ETHERTYPE_IPV4
);

407 
ªq
.
¨_h 
 = (
ëh_mac_addr_t
);

408 
ªq
.
¨_∂n
 = (
ù_addr
);

409 
ªq
.
¨_›
 = 
	`ht⁄s
(
ARPOP_REQUEST
);

410 
	`mem˝y
(
ªq
.
¨_sha
, &
_loˇl_mac_addr
, (
ëh_mac_addr_t
));

411 
	`mem˝y
(
ªq
.
¨_sù
, &
ht⁄l_ù_addr
, (
ù_addr
));

412 
	`mem£t
(
ªq
.
¨_tha
, 0x00, (
ëh_mac_addr_t
));

413 
	`mem˝y
(
ªq
.
¨_tù
, &
ht⁄l_ù_addr
, (
ù_addr
));

416 
	`£nd_pkt
(
BCAST_MAC_ADDR
, 
	`ht⁄s
(
ETHERTYPE_ARP
), &
ªq
, (req), 0, 0, 0, 0);

417 
	}
}

420 
	$√tw‹k_check
(){

421 
size_t
 
ªcv_Àn
 = 
	`íc28j60_ªcv
(
ëh_buf
, 
ETH_BUF_SIZE
);

422 if(
ªcv_Àn
 > 0Ë
	`h™dÀ_ëh_∑ckë
(recv_len);

424 if(
£nd_g¨p
Ë
	`£nd_gøtuôous_¨p
();

425 
	}
}

427 
	$√tw‹k_öô
(){

432 
	`ì¥om_busy_waô
();

433 if(
	`ì¥om_ªad_byã
(0) == 0xFF){

434 
	`_MAC_ADDR
(
_loˇl_mac_addr
.
addr
, 0x00,0x80,0x2F,0x11,0x22,0x33);

435 
_loˇl_ù_addr
.
addr
 = 
	`_IP
(192,168,10,3);

436 
usög_√tw‹k_deÁu…s
 = 
åue
;

439 
	`ì¥om_ªad_block
((*)&
_loˇl_mac_addr
, (*)
OCTOCLOCK_EEPROM_MAC_ADDR
, 6);

440 
	`ì¥om_ªad_block
((*)&
_loˇl_ù_addr
, (*)
OCTOCLOCK_EEPROM_IP_ADDR
, 4);

441 
usög_√tw‹k_deÁu…s
 = 
Ál£
;

444 
	`íc28j60_öô
((
uöt8_t
*)&
_loˇl_mac_addr
);

445 
	`öô_udp_li°íîs
();

447 
£nd_g¨p
 = 
åue
;

448 
	}
}

	@firmware/octoclock/lib/serial.c

18 
	~<°dboﬁ.h
>

20 
	~<o˘o˛ock.h
>

21 
	~<£rül.h
>

23 
	~<avr/pgm•a˚.h
>

24 
	~<utû/dñay.h
>

25 
	~<avr/io.h
>

26 
	~<avr/öãºu±.h
>

28 
	$£rül_öô
(vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
){

29 *
p‹t
 |
	`_BV
(
ödex
);

30 
	}
}

32 
	$_£rül_tx_£nd
(
uöt8_t
* 
buf„r
, vﬁ©ûêuöt8_t* 
p‹t
, uöt8_à
ödex
){

33 c⁄° 
uöt8_t
 
dñay
 = 
BAUD_115200_DELAY
;

34 
uöt8_t
 
cou¡down
;

36 
uöt8_t
 
i
 = 0; i < 10; ++i){

37 if(
buf„r
[
i
]Ë*
p‹t
 |
	`_BV
(
ödex
);

38 *
p‹t
 &~
	`_BV
(
ödex
);

40 
cou¡down
 = 
dñay
;

41 --
cou¡down
Ë
	`asm
("nop");

43 
	}
}

45 
	$_£rül_tx_ch¨
(
c
, vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
){

46 
uöt8_t
 
buf„r
[10];

47 
uöt8_t
 
i
 = 0;

49 
buf„r
[
i
++] = 0;

50 
idx
 = 0; idx < 8; ++idx)

51 
buf„r
[
i
++] = (((
uöt8_t
)(
c
Ë& ((uöt8_t)1<<((
idx
)))) ? 0x01 : 0x00);

52 
buf„r
[
i
++] = 1;

54 
	`_£rül_tx_£nd
(
buf„r
, 
p‹t
, 
ödex
);

55 
	}
}

57 
	$£rül_tx_P
(c⁄° * 
mesßge
, vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
){

58 
c
 = 
	`pgm_ªad_byã
(
mesßge
);

59 if(
c
 == '\0') ;

62 
	`_£rül_tx_ch¨
(
c
, 
p‹t
, 
ödex
);

63 
c
 = 
	`pgm_ªad_byã
(++
mesßge
);

64 } 
c
 != '\0');

66 if(
√wlöe
){

67 
	`_£rül_tx_ch¨
('\r', 
p‹t
, 
ödex
);

68 
	`_£rül_tx_ch¨
('\n', 
p‹t
, 
ödex
);

71 *
p‹t
 |
	`_BV
(
ödex
);

72 
	}
}

74 
	$£rül_tx
(c⁄° * 
mesßge
, vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
){

75 i‡(
mesßge
[0] == '\0')

80 
	`_£rül_tx_ch¨
(*
mesßge
, 
p‹t
, 
ödex
);

81 } *(++
mesßge
) != '\0');

83 i‡(
√wlöe
){

84 
	`_£rül_tx_ch¨
('\r', 
p‹t
, 
ödex
);

85 
	`_£rül_tx_ch¨
('\n', 
p‹t
, 
ödex
);

88 *
p‹t
 |
	`_BV
(
ödex
);

89 
	}
}

91 
	$£rül_tx_byã
(
uöt8_t
 
byã
, vﬁ©ûêuöt8_t* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
){

92 
ch
[4];

93 
ch
[0] = '0' + (
byã
 / 100);

94 
ch
[1] = '0' + ((
byã
 % 100) / 10);

95 
ch
[2] = '0' + (
byã
 % 10);

96 
ch
[3] = '\0';

97 
	`£rül_tx
(
ch
, 
p‹t
, 
ödex
, 
√wlöe
);

98 
	}
}

100 
	$£rül_tx_hex
(
uöt8_t
 
byã
, vﬁ©ûêuöt8_t* 
p‹t
, uöt8_à
ödex
, 
boﬁ
 
√wlöe
){

101 
ch
[3];

102 
uöt8_t
 
_byã
 = 
byã
 >> 4;

103 i‡(
_byã
 < 10)

104 
ch
[0] = '0' + 
_byã
;

106 
ch
[0] = 'A' + (
_byã
 - 10);

107 
byã
 &= 0x0F;

108 i‡(
byã
 < 10)

109 
ch
[1] = '0' + 
byã
;

111 
ch
[1] = 'A' + (
byã
 - 10);

112 
ch
[2] = '\0';

113 
	`£rül_tx
(
ch
, 
p‹t
, 
ödex
, 
√wlöe
);

114 
	}
}

116 
	$£rül_rx_ch¨
(vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
){

117 
c
 = 0;

118 c⁄° 
uöt8_t
 
dñay
 = 
BAUD_115200_DELAY
;

119 
uöt8_t
 
cou¡down
;

122 *
p‹t
 & 
	`_BV
(
ödex
));

125 
cou¡down
 = 
dñay
;

126 --
cou¡down
Ë
	`asm
("nop");

128 
uöt8_t
 
i
 = 0; i < 8; ++i){

129 if(*
p‹t
 & 
	`_BV
(
ödex
)Ë
c
 &(
uöt8_t
)(1 << 
i
);

131 
cou¡down
 = 
dñay
;

132 --
cou¡down
Ë
	`asm
("nop");

135  
c
;

136 
	}
}

139 
	$£rül_rx_ch¨_nowaô
(vﬁ©ûê
uöt8_t
* 
p‹t
, uöt8_à
ödex
){

140 
c
 = 0;

141 c⁄° 
uöt8_t
 
dñay
 = 
BAUD_115200_DELAY
;

142 
uöt8_t
 
cou¡down
;

145 
cou¡down
 = 
dñay
;

146 --
cou¡down
Ë
	`asm
("nop");

148 
uöt8_t
 
i
 = 0; i < 8; ++i){

149 if(*
p‹t
 & 
	`_BV
(
ödex
)Ë
c
 &(
uöt8_t
)(1 << 
i
);

151 
cou¡down
 = 
dñay
;

152 --
cou¡down
Ë
	`asm
("nop");

155  
c
;

156 
	}
}

	@firmware/octoclock/lib/state.c

18 
	~<avr/io.h
>

20 
	~<avæibdefs.h
>

21 
	~<debug.h
>

22 
	~<o˘o˛ock.h
>

23 
	~<˛kdi°.h
>

24 
	~<°©e.h
>

27 vﬁ©ûê
boﬁ
 
	gg_ext_ªf_¥e£¡
 = 
Ál£
;

28 vﬁ©ûê
boﬁ
 
	gg_gps_¥e£¡
 = 
Ál£
;

29 vﬁ©ûê
swôch_pos_t
 
	gg_swôch_pos
 = 
PREFER_INTERNAL
;

30 vﬁ©ûê
ªf_t
 
	gg_ªf
 = 
NO_REF
;

32 
	$Àd
(
Àd_t
 
which
, 
boﬁ
 
⁄
){

34 
uöt8_t
 
LED
 = 0x20 << 
which
;

36 if(
⁄
)

37 
PORTC
 |
LED
;

39 
PORTC
 &~
LED
;

40 
	}
}

42 
	$Àds_off
(){

43 
	`Àd
(
LED_TOP
, 
Ál£
);

44 
	`Àd
(
LED_MIDDLE
, 
Ál£
);

45 
	`Àd
(
LED_BOTTOM
, 
Ál£
);

46 
	}
}

48 
	$f‹˚_öã∫Æ
(){

49 
	`Àd
(
LED_TOP
, 
åue
);

50 
	`Àd
(
LED_MIDDLE
, 
Ál£
);

51 
	`Àd
(
LED_BOTTOM
, 
åue
);

54 
	`˛i
();

55 
	`£tup_TI_CDCE18005
(
Prim¨y_GPS
);

56 
	`£i
();

59 
PORTA
 |(1<<
PA6
);

60 
	}
}

62 
	$f‹˚_exã∫Æ
(){

63 
	`Àd
(
LED_TOP
, 
Ál£
);

64 
	`Àd
(
LED_MIDDLE
, 
åue
);

65 
	`Àd
(
LED_BOTTOM
, 
åue
);

68 
	`˛i
();

69 
	`£tup_TI_CDCE18005
(
Sec⁄d¨y_Ext
);

70 
	`£i
();

73 
PORTA
 &~(1<<
PA6
);

74 
	}
}

76 
	$¥e„r_öã∫Æ
(){

78 if(
g_gps_¥e£¡
)

79 
	`f‹˚_öã∫Æ
();

80 if(
g_ext_ªf_¥e£¡
)

81 
	`f‹˚_exã∫Æ
();

83 
	`Àds_off
();

84 
	}
}

86 
	$¥e„r_exã∫Æ
(){

88 if(
g_ext_ªf_¥e£¡
)

89 
	`f‹˚_exã∫Æ
();

90 if(
g_gps_¥e£¡
)

91 
	`f‹˚_öã∫Æ
();

93 
	`Àds_off
();

94 
	}
}

	@firmware/octoclock/lib/udp_handlers.c

18 
	~<°rög.h
>

20 
	~<avr/ì¥om.h
>

21 
	~<avr/io.h
>

22 
	~<avr/wdt.h
>

24 
	~<o˘o˛ock.h
>

25 
	~<gpsdo.h
>

26 
	~<√tw‹k.h
>

27 
	~<°©e.h
>

28 
	~<√t/udp_h™dÀrs.h
>

30 
	$h™dÀ_udp_˘æ_∑ckë
(

31 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

32 *
∑ylﬂd
, 
∑ylﬂd_Àn


34 c⁄° 
o˘o˛ock_∑ckë_t
 *
pkt_ö
 = (o˘o˛ock_∑ckë_t*)
∑ylﬂd
;

35 
o˘o˛ock_∑ckë_t
 
pkt_out
;

36 
pkt_out
.
¥Ÿo_vî
 = 
OCTOCLOCK_FW_COMPAT_NUM
;

37 
pkt_out
.
£quí˚
 = 
pkt_ö
->sequence;

39 
pkt_ö
->
code
){

40 
OCTOCLOCK_QUERY_CMD
:

41 
pkt_out
.
code
 = 
OCTOCLOCK_QUERY_ACK
;

42 
pkt_out
.
Àn
 = 0;

45 
RESET_CMD
:

46 
pkt_out
.
code
 = 
RESET_ACK
;

47 
	`£nd_udp_pkt
(
OCTOCLOCK_UDP_CTRL_PORT
, 
§c
, (*)&
pkt_out
, (
o˘o˛ock_∑ckë_t
));

48 
	`wdt_íabÀ
(
WDTO_30MS
);

52 
SEND_EEPROM_CMD
:

53 
pkt_out
.
code
 = 
SEND_EEPROM_ACK
;

54 
pkt_out
.
Àn
 = (
o˘o˛ock_fw_ì¥om_t
);

56 
o˘o˛ock_fw_ì¥om_t
 *
ì¥om_öfo
 = (o˘o˛ock_fw_ì¥om_t*)
pkt_out
.
d©a
;

59 
	`ì¥om_busy_waô
();

60 
	`ì¥om_ªad_block
(
ì¥om_öfo
, 0, (
o˘o˛ock_fw_ì¥om_t
));

63 if(
usög_√tw‹k_deÁu…s
){

64 
	`_MAC_ADDR
(
ì¥om_öfo
->
mac_addr
, 0x00,0x80,0x2F,0x11,0x22,0x33);

65 
ì¥om_öfo
->
ù_addr
 = 
	`_IP
(192,168,10,3);

66 
ì¥om_öfo
->
dr_addr
 = 
	`_IP
(192,168,10,1);

67 
ì¥om_öfo
->
√tmask
 = 
	`_IP
(255,255,255,0);

71 if(
ì¥om_öfo
->
ªvisi⁄
 == 0xFF)Éeprom_info->revision = 0;

74 
BURN_EEPROM_CMD
:{

76 if(
pkt_ö
->
Àn
 !(
o˘o˛ock_fw_ì¥om_t
)){

77 
pkt_out
.
code
 = 
BURN_EEPROM_FAILURE_ACK
;

85 c⁄° 
o˘o˛ock_fw_ì¥om_t
 *
ì¥om_pkt
 = (o˘o˛ock_fw_ì¥om_t*)
pkt_ö
->
d©a
;

86 
pkt_out
.
Àn
 = 0;

89 
	`ì¥om_busy_waô
();

90 
	`ì¥om_wrôe_block
(
ì¥om_pkt
, 0, (
o˘o˛ock_fw_ì¥om_t
));

93 
uöt8_t
 
ì¥om_c⁄ã¡s
[(
o˘o˛ock_fw_ì¥om_t
)];

94 
	`ì¥om_busy_waô
();

95 
	`ì¥om_ªad_block
(
ì¥om_c⁄ã¡s
, 0, (
o˘o˛ock_fw_ì¥om_t
));

96 
uöt8_t
 
n
 = 
	`memcmp
(
ì¥om_c⁄ã¡s
, 
ì¥om_pkt
, (
o˘o˛ock_fw_ì¥om_t
));

97 
pkt_out
.
code
 = 
n
 ? 
BURN_EEPROM_FAILURE_ACK


98 : 
BURN_EEPROM_SUCCESS_ACK
;

102 
SEND_STATE_CMD
:

103 
pkt_out
.
code
 = 
SEND_STATE_ACK
;

104 
pkt_out
.
Àn
 = (
o˘o˛ock_°©e_t
);

107 
o˘o˛ock_°©e_t
 *
°©e
 = (o˘o˛ock_°©e_t*)
pkt_out
.
d©a
;

108 
°©e
->
exã∫Æ_dëe˘ed
 = 
g_ext_ªf_¥e£¡
 ? 1 : 0;

109 
°©e
->
gps_dëe˘ed
 = 
g_gps_¥e£¡
 ? 1 : 0;

110 
°©e
->
which_ªf
 = (
uöt8_t
)
g_ªf
;

111 
°©e
->
swôch_pos
 = (
uöt8_t
)
g_swôch_pos
;

118 
	`£nd_udp_pkt
(
OCTOCLOCK_UDP_CTRL_PORT
, 
§c
, (*)&
pkt_out
, (
o˘o˛ock_∑ckë_t
));

119 
	}
}

121 
	$h™dÀ_udp_gpsdo_∑ckë
(

122 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

123 *
∑ylﬂd
, 
∑ylﬂd_Àn


125 c⁄° 
o˘o˛ock_∑ckë_t
 *
pkt_ö
 = (o˘o˛ock_∑ckë_t*)
∑ylﬂd
;

126 
o˘o˛ock_∑ckë_t
 
pkt_out
;

127 
pkt_out
.
¥Ÿo_vî
 = 
OCTOCLOCK_FW_COMPAT_NUM
;

128 
pkt_out
.
£quí˚
 = 
pkt_ö
->sequence;

130 
pkt_ö
->
code
){

131 
HOST_SEND_TO_GPSDO_CMD
:

132 
	`£nd_gpsdo_cmd
((*)
pkt_ö
->
d©a
,Ökt_ö->
Àn
);

133 
pkt_out
.
code
 = 
HOST_SEND_TO_GPSDO_ACK
;

134 
pkt_out
.
Àn
 = 0;

137 
SEND_POOLSIZE_CMD
:

138 
pkt_out
.
code
 = 
SEND_POOLSIZE_ACK
;

139 
pkt_out
.
Àn
 = 0;

140 
pkt_out
.
poﬁsize
 = 
POOLSIZE
;

143 
SEND_CACHE_STATE_CMD
:

144 
pkt_out
.
code
 = 
SEND_CACHE_STATE_ACK
;

145 
pkt_out
.
°©e
 = 
gpsdo_°©e
;

148 
SEND_GPSDO_CACHE_CMD
:

149 
pkt_out
.
code
 = 
SEND_GPSDO_CACHE_ACK
;

150 
pkt_out
.
°©e
 = 
gpsdo_°©e
;

151 
pkt_out
.
Àn
 = 
POOLSIZE
;

152 
	`mem˝y
(
pkt_out
.
d©a
, 
gpsdo_buf
, 
POOLSIZE
);

159 
	`£nd_udp_pkt
(
OCTOCLOCK_UDP_GPSDO_PORT
, 
§c
, (*)&
pkt_out
, (
o˘o˛ock_∑ckë_t
));

160 
	}
}

	@firmware/octoclock/lib/usart.c

18 
	~<o˘o˛ock.h
>

19 
	~<ußπ.h
>

21 
	~<utû/dñay.h
>

22 
	~<avr/io.h
>

24 
	$ußπ_öô
(){

25 
UCSR1B
 = (1 << 
TXEN
Ë| (1 << 
RXEN
Ë| (1 << 
RXCIE
);

26 
UCSR1C
 = (3 << 
UCSZ0
);

27 
UBRR1H
 = (
uöt8_t
)(
BAUD_PRESCALE
 >> 8);

28 
UBRR1L
 = (
uöt8_t
)
BAUD_PRESCALE
;

29 
	}
}

31 
	$ußπ_gëc
(){

32 (
UCSR1A
 & (1 << 
RXC
)) == 0);

34  
UDR1
;

35 
	}
}

37 
	$ußπ_putc
(
ch
){

38 (
UCSR1A
 & (1 << 
UDRE1
)) == 0);

40 
UDR1
 = 
ch
;

41 
	}
}

	@firmware/octoclock/octoclock_r4/octoclock_r4_main.c

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

54 
	~<°döt.h
>

55 
	~<°dboﬁ.h
>

57 
	~<avr/ì¥om.h
>

58 
	~<avr/öãºu±.h
>

59 
	~<avr/io.h
>

61 
	~<avæibdefs.h
>

62 
	~<o˘o˛ock.h
>

63 
	~<debug.h
>

64 
	~<˛kdi°.h
>

65 
	~<°©e.h
>

66 
	~<√tw‹k.h
>

67 
	~<ußπ.h
>

68 
	~<√t/udp_h™dÀrs.h
>

77 
	#TIMER3_INIT
(Ë
TCCR3B
 = (1 << 
ICES3
Ë| (1 << 
CS30
); \

78 
ETIMSK
 |(1 << 
TOIE3
); \

79 
TCNT3
 = 0; \

80 
ICR3
 = 0;

	)

88 
	#EXT_REF_TIMEOUT
 5

	)

90 vﬁ©ûê
uöt16_t
 
	gnum_ovîÊows
 = 0;

91 
uöt16_t
 
	gcuºít_num_ovîÊows
 = 0;

92 
uöt16_t
 
	g¥ev_num_ovîÊows
 = 0;

93 
uöt16_t
 
	gcuºít_ICR3
 = 0;

94 
uöt16_t
 
	g¥ev_ICR3
 = 0;

95 
ªf_t
 
	g¥ev_ªf
 = 
NO_REF
;

96 
swôch_pos_t
 
	g¥ev_swôch_pos
 = 
PREFER_EXTERNAL
;

97 
boﬁ
 
	gt›
 = 
Ál£
;

99 
	$ISR
(
TIMER3_OVF_ve˘
){

100 
num_ovîÊows
++;

101 
	}
}

107 
	$maö
(){

112 
	`˛i
();

115 
MCUCR
 = (1<<
IVCE
);

116 
MCUCR
 = 0;

119 
g_ext_ªf_¥e£¡
 = 
Ál£
;

120 
g_gps_¥e£¡
 = 
Ál£
;

121 
g_swôch_pos
 = 
PREFER_INTERNAL
;

122 
g_ªf
 = 
NO_REF
;

125 
	`£tup_©mñ_io_p‹ts
();

128 
	`ª£t_TI_CDCE18005
();

131 
	`ußπ_öô
();

134 
	`√tw‹k_öô
();

135 
	`ªgi°î_udp_li°íî
(
OCTOCLOCK_UDP_CTRL_PORT
, 
h™dÀ_udp_˘æ_∑ckë
);

136 
	`ªgi°î_udp_li°íî
(
OCTOCLOCK_UDP_GPSDO_PORT
, 
h™dÀ_udp_gpsdo_∑ckë
);

139 
	`TIMER1_INIT
();

140 
	`TIMER3_INIT
();

143 
	`DEBUG_INIT
();

144 
	`DEBUG_LOG
(" ");

146 
	`Àds_off
();

148 
	`£i
();

151 
g_gps_¥e£¡
 = (
PIND
 & (1<<
DDD4
));

154 
¥ev_ªf
 = 
NO_REF
;

155 
¥ev_swôch_pos
 = 
PREFER_EXTERNAL
;

156 
	`˛i
();

157 
¥ev_ICR3
 = 
ICR3
;

158 
	`£i
();

159 
¥ev_num_ovîÊows
 = 0;

164 
åue
){

166 
g_swôch_pos
 = (
PINC
 & (1<<
DDC1
)Ë? 
PREFER_EXTERNAL
 : 
PREFER_INTERNAL
;

174 
	`˛i
();

175 
cuºít_ICR3
 = 
ICR3
;

176 
cuºít_num_ovîÊows
 = 
num_ovîÊows
;

177 
	`£i
();

180 if(
cuºít_ICR3
 !
¥ev_ICR3
){

181 
	`˛i
();

182 
TCNT3
 = 0;

183 
num_ovîÊows
 = 0;

184 
	`£i
();

185 
g_ext_ªf_¥e£¡
 = 
åue
;

189 if(
cuºít_num_ovîÊows
 >
EXT_REF_TIMEOUT
){

190 
g_ext_ªf_¥e£¡
 = 
Ál£
;

194 if(!
g_gps_¥e£¡
 && !
g_ext_ªf_¥e£¡
Ë
g_ªf
 = 
NO_REF
;

195 if(
g_gps_¥e£¡
 && !
g_ext_ªf_¥e£¡
Ë
g_ªf
 = 
INTERNAL
;

196 if(!
g_gps_¥e£¡
 && 
g_ext_ªf_¥e£¡
Ë
g_ªf
 = 
EXTERNAL
;

197 
g_ªf
 = (
g_swôch_pos
 =
PREFER_INTERNAL
Ë? 
INTERNAL
 : 
EXTERNAL
;

199 if((
g_ªf
 !
¥ev_ªf
Ë|| (
g_swôch_pos
 !
¥ev_swôch_pos
)){

200 if(
g_swôch_pos
 =
PREFER_INTERNAL
Ë
	`¥e„r_öã∫Æ
();

201 
	`¥e„r_exã∫Æ
();

205 
¥ev_ªf
 = 
g_ªf
;

206 
¥ev_swôch_pos
 = 
g_swôch_pos
;

207 
¥ev_ICR3
 = 
cuºít_ICR3
;

208 
¥ev_num_ovîÊows
 = 
cuºít_num_ovîÊows
;

211 
	`√tw‹k_check
();

213 
	}
}

	@firmware/usrp2/apps/txrx_uhd.c

19 
	~"u2_öô.h
"

20 
	~"•i.h
"

21 
	~"i2c.h
"

22 
	~"hÆ_io.h
"

23 
	~"pic.h
"

26 
	~"n⁄°dio.h
"

29 
	~"¨p_ˇche.h
"

30 
	~"ëhî√t.h
"

31 
	~"√t_comm⁄.h
"

32 
	~"u§p2/fw_comm⁄.h
"

33 
	~"udp_fw_upd©e.h
"

34 
	~"pkt_˘æ.h
"

35 
	~"udp_u¨t.h
"

38 
	~<°ddef.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<°dboﬁ.h
>

43 #ifde‡
BOOTLOADER


44 
	~<boŸlﬂdî_utûs.h
>

48 
uöt32_t
 
	gfw_ªgs
[8];

50 
	$h™dÀ_udp_d©a_∑ckë
(

51 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

52 *
∑ylﬂd
, 
∑ylﬂd_Àn


55 i‡(
∑ylﬂd
 =
NULL
Ë
§c
.
p‹t
){

56 
USRP2_UDP_RX_DSP0_PORT
:

58 
§_rx_˘æ0
->
˛ór
 = 1;

59 
fw_ªgs
[
U2_FW_REG_LOCK_TIME
] = 0;

62 
USRP2_UDP_RX_DSP1_PORT
:

64 
§_rx_˘æ1
->
˛ór
 = 1;

65 
fw_ªgs
[
U2_FW_REG_LOCK_TIME
] = 0;

68 
USRP2_UDP_TX_DSP0_PORT
:

70 
§_tx_˘æ
->
cyc_≥r_up
 = 0;

71 
fw_ªgs
[
U2_FW_REG_LOCK_TIME
] = 0;

78 
size_t
 
which
 = 0;

79 i‡(
∑ylﬂd
 !0Ë
d°
.
p‹t
){

80 
USRP2_UDP_RX_DSP0_PORT
:

81 
which
 = 0;

84 
USRP2_UDP_RX_DSP1_PORT
:

85 
which
 = 2;

88 
USRP2_UDP_TX_DSP0_PORT
:

89 
which
 = 1;

92 
USRP2_UDP_FIFO_CRTL_PORT
:

93 
which
 = 3;

101 c⁄° 
sockë_addªss
 
§c_addr
 = 
d°
;

102 
sockë_addªss
 
d°_addr
 = 
§c
;

103 
ëh_mac_addr_t
 
ëh_mac_d°
;

104 
	`¨p_ˇche_lookup_mac
(&
d°_addr
.
addr
, &
ëh_mac_d°
);

107 i‡(
∑ylﬂd_Àn
 >(
u§p2_°ªam_˘æ_t
)){

110 c⁄° 
u§p2_°ªam_˘æ_t
 *
°ªam_˘æ
 = (c⁄° u§p2_°ªam_˘æ_à*)
∑ylﬂd
;

111 
d°_addr
.
addr
.add∏
°ªam_˘æ
->
ù_addr
;

112 
d°_addr
.
p‹t
 = (
uöt16_t
)
°ªam_˘æ
->
udp_p‹t
;

113 
ù_addr
 
ù_de°
 = 
d°_addr
.
addr
;

116 c⁄° 
uöt32_t
 
sub√t_mask
 = 
	`gë_sub√t
()->
addr
;

117 c⁄° 
boﬁ
 
ö_sub√t
 = ((
	`gë_ù_addr
()->
addr
 & 
sub√t_mask
Ë=(
ù_de°
.addr & subnet_mask));

118 i‡(!
ö_sub√t
Ë
ù_de°
 = *
	`gë_g©eway
();

121 c⁄° 
boﬁ
 
ok
 = 
	`¨p_ˇche_lookup_mac
(&
ù_de°
, &
ëh_mac_d°
);

122 i‡(!
ok
Ë
	`√t_comm⁄_£nd_¨p_ªque°
(&
ù_de°
);

123 c⁄° 
uöt32_t
 
ªsu…
 = (
ok
)? 0 : ~0;

124 
	`£nd_udp_pkt
(
d°
.
p‹t
, 
§c
, &
ªsu…
, (result));

127 
	`£tup_‰amî
(
ëh_mac_d°
, *
	`ëhî√t_mac_addr
(), 
d°_addr
, 
§c_addr
, 
which
);

128 
	}
}

130 
	#OTW_GPIO_BANK_TO_NUM
(
b™k
) \

131 (((
b™k
Ë=
USRP2_DIR_RX
)? (
GPIO_RX_BANK
Ë: (
GPIO_TX_BANK
))

	)

133 
	$h™dÀ_udp_˘æ_∑ckë
(

134 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

135 *
∑ylﬂd
, 
∑ylﬂd_Àn


138 c⁄° 
u§p2_˘æ_d©a_t
 *
˘æ_d©a_ö
 = (u§p2_˘æ_d©a_à*)
∑ylﬂd
;

139 
uöt32_t
 
˘æ_d©a_ö_id
 = 
˘æ_d©a_ö
->
id
;

142 i‡(
∑ylﬂd_Àn
 >(
uöt32_t
Ë&& 
˘æ_d©a_ö
->
¥Ÿo_vî
 !
USRP2_FW_COMPAT_NUM
){

143 i‡(
˘æ_d©a_ö
->
¥Ÿo_vî
Ë
	`¥ötf
("!Error in controlÖacket handler: Expected compatibilityÇumber %d, but got %d\n",

144 
USRP2_FW_COMPAT_NUM
, 
˘æ_d©a_ö
->
¥Ÿo_vî


146 
˘æ_d©a_ö_id
 = 
USRP2_CTRL_ID_WAZZUP_BRO
;

150 i‡(
∑ylﬂd_Àn
 < (
u§p2_˘æ_d©a_t
)){

151 
	`¥ötf
("!Error in controlÖacket handler: ExpectedÖayloadÜength %d, but got %d\n",

152 ()(
u§p2_˘æ_d©a_t
), 
∑ylﬂd_Àn


154 
˘æ_d©a_ö_id
 = 
USRP2_CTRL_ID_HUH_WHAT
;

158 
u§p2_˘æ_d©a_t
 
˘æ_d©a_out
;

159 
˘æ_d©a_out
.
¥Ÿo_vî
 = 
USRP2_FW_COMPAT_NUM
;

160 
˘æ_d©a_out
.
id
=
USRP2_CTRL_ID_HUH_WHAT
;

161 
˘æ_d©a_out
.
£q
=
˘æ_d©a_ö
->seq;

164 
˘æ_d©a_ö_id
){

169 
USRP2_CTRL_ID_WAZZUP_BRO
:

170 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_WAZZUP_DUDE
;

171 
	`mem˝y
(&
˘æ_d©a_out
.
d©a
.
ù_addr
, 
	`gë_ù_addr
(), (ip_addr));

177 
USRP2_CTRL_ID_TRANSACT_ME_SOME_SPI_BRO
:{

179 
uöt32_t
 
ªsu…
 = 
	`•i_å™ß˘
(

180 (
˘æ_d©a_ö
->
d©a
.
•i_¨gs
.
ªadback
 =0)? 
SPI_TXONLY
 : 
SPI_TXRX
,

181 
˘æ_d©a_ö
->
d©a
.
•i_¨gs
.
dev
,

182 
˘æ_d©a_ö
->
d©a
.
•i_¨gs
.data,

183 
˘æ_d©a_ö
->
d©a
.
•i_¨gs
.
num_bôs
,

184 ((
˘æ_d©a_ö
->
d©a
.
•i_¨gs
.
mosi_edge
 =
USRP2_CLK_EDGE_RISE
)? 
SPI_PUSH_FALL
 : 
SPI_PUSH_RISE
) |

185 ((
˘æ_d©a_ö
->
d©a
.
•i_¨gs
.
miso_edge
 =
USRP2_CLK_EDGE_RISE
)? 
SPI_LATCH_RISE
 : 
SPI_LATCH_FALL
)

189 
˘æ_d©a_out
.
d©a
.
•i_¨gs
.d©®
ªsu…
;

190 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_OMG_TRANSACTED_SPI_DUDE
;

197 
USRP2_CTRL_ID_DO_AN_I2C_READ_FOR_ME_BRO
:{

198 
uöt8_t
 
num_byãs
 = 
˘æ_d©a_ö
->
d©a
.
i2c_¨gs
.
byãs
;

199 
	`i2c_ªad
(

200 
˘æ_d©a_ö
->
d©a
.
i2c_¨gs
.
addr
,

201 
˘æ_d©a_out
.
d©a
.
i2c_¨gs
.data,

202 
num_byãs


204 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_HERES_THE_I2C_DATA_DUDE
;

205 
˘æ_d©a_out
.
d©a
.
i2c_¨gs
.
byãs
 = 
num_byãs
;

209 
USRP2_CTRL_ID_WRITE_THESE_I2C_VALUES_BRO
:{

210 
uöt8_t
 
num_byãs
 = 
˘æ_d©a_ö
->
d©a
.
i2c_¨gs
.
byãs
;

211 
	`i2c_wrôe
(

212 
˘æ_d©a_ö
->
d©a
.
i2c_¨gs
.
addr
,

213 
˘æ_d©a_ö
->
d©a
.
i2c_¨gs
.data,

214 
num_byãs


216 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_COOL_IM_DONE_I2C_WRITE_DUDE
;

217 
˘æ_d©a_out
.
d©a
.
i2c_¨gs
.
byãs
 = 
num_byãs
;

224 
USRP2_CTRL_ID_GET_THIS_REGISTER_FOR_ME_BRO
:

225 
˘æ_d©a_ö
->
d©a
.
ªg_¨gs
.
a˘i⁄
){

226 
USRP2_REG_ACTION_FPGA_PEEK32
:

227 
˘æ_d©a_out
.
d©a
.
ªg_¨gs
.d©®*((
uöt32_t
 *Ë
˘æ_d©a_ö
->d©a.ªg_¨gs.
addr
);

230 
USRP2_REG_ACTION_FPGA_PEEK16
:

231 
˘æ_d©a_out
.
d©a
.
ªg_¨gs
.d©®*((
uöt16_t
 *Ë
˘æ_d©a_ö
->d©a.ªg_¨gs.
addr
);

234 
USRP2_REG_ACTION_FPGA_POKE32
:

235 *((
uöt32_t
 *Ë
˘æ_d©a_ö
->
d©a
.
ªg_¨gs
.
addr
) = (uint32_t)ctrl_data_in->data.reg_args.data;

238 
USRP2_REG_ACTION_FPGA_POKE16
:

239 *((
uöt16_t
 *Ë
˘æ_d©a_ö
->
d©a
.
ªg_¨gs
.
addr
) = (uint16_t)ctrl_data_in->data.reg_args.data;

242 
USRP2_REG_ACTION_FW_PEEK32
:

243 
˘æ_d©a_out
.
d©a
.
ªg_¨gs
.d©®
fw_ªgs
[(
˘æ_d©a_ö
->d©a.ªg_¨gs.
addr
)];

246 
USRP2_REG_ACTION_FW_POKE32
:

247 
fw_ªgs
[(
˘æ_d©a_ö
->
d©a
.
ªg_¨gs
.
addr
)] = ctrl_data_in->data.reg_args.data;

251 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_OMG_GOT_REGISTER_SO_BAD_DUDE
;

257 
USRP2_CTRL_ID_HOLLER_AT_ME_BRO
:

258 
˘æ_d©a_out
.
d©a
.
echo_¨gs
.
Àn
 = 
∑ylﬂd_Àn
;

259 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_HOLLER_BACK_DUDE
;

260 
	`£nd_udp_pkt
(
USRP2_UDP_CTRL_PORT
, 
§c
, &
˘æ_d©a_out
, 
˘æ_d©a_ö
->
d©a
.
echo_¨gs
.
Àn
);

264 
˘æ_d©a_out
.
id
 = 
USRP2_CTRL_ID_HUH_WHAT
;

266 
	`£nd_udp_pkt
(
USRP2_UDP_CTRL_PORT
, 
§c
, &
˘æ_d©a_out
, (ctrl_data_out));

267 
	}
}

269 
	~<√t/∑dded_ëh_hdr.h
>

270 
	$h™dÀ_öp_∑ckë
(
uöt32_t
 *
buff
, 
size_t
 
num_löes
){

274 
∑dded_ëh_hdr_t
 
ëh_hdr
;

275 
code
[4];

277 
ù_addr
 ip_addr;

278 } 
d©a
;

279 }
	tªcovîy_∑ckë_t
;

280 
ªcovîy_∑ckë_t
 *
ªcovîy_∑ckë
 = (ªcovîy_∑ckë_à*)
buff
;

281 i‡(
ªcovîy_∑ckë
->
ëh_hdr
.
ëhîty≥
 =0xbìê&& 
	`°∫cmp
‘ecovîy_∑ckë->
code
, "addr", 4) == 0){

282 
	`¥ötf
("GŸ i∞ªcovîyÖackë: "); 
	`¥öt_ù_addr
(&
ªcovîy_∑ckë
->
d©a
.
ù_addr
); 
	`√wlöe
();

283 
	`£t_ù_addr
(&
ªcovîy_∑ckë
->
d©a
.
ù_addr
);

288 
	`h™dÀ_ëh_∑ckë
(
buff
, 
num_löes
);

289 
	}
}

296 
	$lök_ch™ged_ˇŒback
(
•ìd
){

297 
	`¥ötf
("\√thÜök ch™ged: s≥ed = %d\n", 
•ìd
);

298 i‡(
•ìd
 != 0){

299 
	`hÆ_£t_Àds
(
LED_RJ45
, LED_RJ45);

300 
	`pkt_˘æ_£t_routög_mode
(
PKT_CTRL_ROUTING_MODE_MASTER
);

301 
	`£nd_gøtuôous_¨p
();

304 
	`hÆ_£t_Àds
(0x0, 
LED_RJ45
);

305 
	`pkt_˘æ_£t_routög_mode
(
PKT_CTRL_ROUTING_MODE_SLAVE
);

307 
	}
}

310 
	$maö
()

312 
	`u2_öô
();

313 
	`¨p_ˇche_öô
();

314 #ifde‡
BOOTLOADER


315 
	`put°r
("\nUSRP N210 UDP bootloader\n");

317 
	`put°r
("\nTxRx-UHD-ZPU\n");

319 
	`¥ötf
("FPGA com∑tibûôyÇumbî: %d\n", 
USRP2_FPGA_COMPAT_NUM
);

320 
	`¥ötf
("Fúmw¨êcom∑tibûôyÇumbî: %d\n", 
USRP2_FW_COMPAT_NUM
);

323 
fw_ªgs
[
U2_FW_REG_VER_MINOR
] = 
USRP2_FW_VER_MINOR
;

325 #ifde‡
BOOTLOADER


327 
	`do_the_boŸlﬂd_thög
();

329 
	`ëh_addrs_£t_deÁu…
();

332 
	`¥öt_mac_addr
(
	`ëhî√t_mac_addr
()); 
	`√wlöe
();

333 
	`¥öt_ù_addr
(
	`gë_ù_addr
()); 
	`√wlöe
();

336 
	`ªgi°î_addrs
(
	`ëhî√t_mac_addr
(), 
	`gë_ù_addr
());

337 
	`pkt_˘æ_¥ogøm_ö•e˘‹
(
	`gë_ù_addr
(), 
USRP2_UDP_TX_DSP0_PORT
);

340 
	`öô_udp_li°íîs
();

341 
	`ªgi°î_udp_li°íî
(
USRP2_UDP_CTRL_PORT
, 
h™dÀ_udp_˘æ_∑ckë
);

342 
	`ªgi°î_udp_li°íî
(
USRP2_UDP_RX_DSP0_PORT
, 
h™dÀ_udp_d©a_∑ckë
);

343 
	`ªgi°î_udp_li°íî
(
USRP2_UDP_RX_DSP1_PORT
, 
h™dÀ_udp_d©a_∑ckë
);

344 
	`ªgi°î_udp_li°íî
(
USRP2_UDP_TX_DSP0_PORT
, 
h™dÀ_udp_d©a_∑ckë
);

345 
	`ªgi°î_udp_li°íî
(
USRP2_UDP_FIFO_CRTL_PORT
, 
h™dÀ_udp_d©a_∑ckë
);

347 #ifde‡
USRP2P


348 
	`ªgi°î_udp_li°íî
(
USRP2_UDP_UPDATE_PORT
, 
h™dÀ_udp_fw_upd©e_∑ckë
);

351 
	`udp_u¨t_öô
(
USRP2_UDP_UART_BASE_PORT
);

354 
	`pkt_˘æ_£t_routög_mode
(
PKT_CTRL_ROUTING_MODE_SLAVE
);

357 
	`ëhî√t_ªgi°î_lök_ch™ged_ˇŒback
(
lök_ch™ged_ˇŒback
);

358 
	`ëhî√t_öô
();

360 
åue
){

362 
size_t
 
num_löes
;

363 *
buff
 = 
	`pkt_˘æ_˛aim_öcomög_buf„r
(&
num_löes
);

364 i‡(
buff
 !
NULL
){

365 
	`h™dÀ_öp_∑ckë
((
uöt32_t
 *)
buff
, 
num_löes
);

366 
	`pkt_˘æ_ªÀa£_öcomög_buf„r
();

369 
	`udp_u¨t_pﬁl
();

371 
	`pic_öãºu±_h™dÀr
();

386 
	}
}

	@firmware/usrp2/lib/_exit.c

23 
	$_exô
(
°©us
)

27 
	}
}

	@firmware/usrp2/lib/abort.c

22 
	~<n⁄°dio.h
>

24 
_exô
(
°©us
);

27 
	$ab‹t
()

29 
	`put°r
("\n\nabort\n");

31 
	`_exô
(-1);

32 
	}
}

	@firmware/usrp2/lib/ad9510.c

19 
	~"ad9510.h
"

20 
	~"•i.h
"

21 
	~<mem‹y_m≠.h
>

23 
	#RD
 (1 << 15)

	)

24 
	#WR
 (0 << 15)

	)

27 
	$ad9510_wrôe_ªg
(
ªgno
, 
uöt8_t
 
vÆue
)

29 
uöt32_t
 
ö°
 = 
WR
 | (
ªgno
 & 0xff);

30 
uöt32_t
 
v
 = (
ö°
 << 8Ë| (
vÆue
 & 0xff);

31 
	`•i_å™ß˘
(
SPI_TXONLY
, 
SPI_SS_AD9510
, 
v
, 24, 
SPI_PUSH_FALL
);

32 
	}
}

35 
	$ad9510_ªad_ªg
(
ªgno
)

37 
uöt32_t
 
ö°
 = 
RD
 | (
ªgno
 & 0xff);

38 
uöt32_t
 
v
 = (
ö°
 << 8) | 0;

39 
uöt32_t
 
r
 = 
	`•i_å™ß˘
(
SPI_TXRX
, 
SPI_SS_AD9510
, 
v
, 24,

40 
SPI_PUSH_FALL
 | 
SPI_LATCH_FALL
);

41  
r
 & 0xff;

42 
	}
}

	@firmware/usrp2/lib/ad9510.h

18 #i‚de‡
INCLUDED_AD9510_H


19 
	#INCLUDED_AD9510_H


	)

21 
	~<°döt.h
>

27 
ad9510_wrôe_ªg
(
ªgno
, 
uöt8_t
 
vÆue
);

28 
ad9510_ªad_ªg
(
ªgno
);

	@firmware/usrp2/lib/arp_cache.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~<c⁄fig.h
>

21 
	~"¨p_ˇche.h
"

22 
	~<°ddef.h
>

25 
ù_addr
 
	mù
;

26 
ëh_mac_addr_t
 
	mmac
;

27 } 
	t¨p_ˇche_t
;

29 
	#NENTRIES
 8

30 

	)

31 
size_t
 
	g√¡rõs
;

32 
size_t
 
	gvi˘im
;

33 
¨p_ˇche_t
 
	gˇche
[
NENTRIES
];

36 
	$¨p_ˇche_öô
()

38 
√¡rõs
 = 0;

39 
vi˘im
 = 0;

40 
	}
}

44 
	$¨p_ˇche_lookup
(c⁄° 
ù_addr
 *
ù
)

46 
i
;

47 
i
 = 0; i < 
√¡rõs
; i++)

48 i‡(
ˇche
[
i
].
ù
.
addr
 == ip->addr)

49  
i
;

52 
	}
}

55 
	$¨p_ˇche_Æloc
()

57 i‡(
√¡rõs
 < 
NENTRIES
)

58  
√¡rõs
++;

60 
i
 = 
vi˘im
;

61 
vi˘im
 = (vi˘im + 1Ë% 
NENTRIES
;

62  
i
;

63 
	}
}

66 
	$¨p_ˇche_upd©e
(c⁄° 
ù_addr
 *
ù
,

67 c⁄° 
ëh_mac_addr_t
 *
mac
)

69 
i
 = 
	`¨p_ˇche_lookup
(
ù
);

70 i‡(
i
 < 0){

71 
i
 = 
	`¨p_ˇche_Æloc
();

72 
ˇche
[
i
].
ù
 = *ip;

73 
ˇche
[
i
].
mac
 = *mac;

76 
ˇche
[
i
].
mac
 = *mac;

78 
	}
}

80 
boﬁ


81 
	$¨p_ˇche_lookup_mac
(c⁄° 
ù_addr
 *
ù
,

82 
ëh_mac_addr_t
 *
mac
)

84 
i
 = 
	`¨p_ˇche_lookup
(
ù
);

85 i‡(
i
 < 0)

86  
Ál£
;

88 *
mac
 = 
ˇche
[
i
].mac;

89  
åue
;

90 
	}
}

	@firmware/usrp2/lib/arp_cache.h

18 #i‚de‡
INCLUDED_ARP_CACHE_H


19 
	#INCLUDED_ARP_CACHE_H


	)

21 
	~<lwù/ù_addr.h
>

22 
	~<√t/ëh_mac_addr.h
>

23 
	~<°dboﬁ.h
>

25 
¨p_ˇche_öô
();

27 
¨p_ˇche_upd©e
(c⁄° 
ù_addr
 *
ù
,

28 c⁄° 
ëh_mac_addr_t
 *
mac
);

30 
boﬁ
 
¨p_ˇche_lookup_mac
(c⁄° 
ù_addr
 *
ù
,

31 
ëh_mac_addr_t
 *
mac
);

	@firmware/usrp2/lib/banal.c

19 
	~<b™Æ.h
>

21 
uöt32_t


22 
	$gë_uöt32
(c⁄° *
s
)

24  (
s
[0] << 24) | (s[1] << 16) | (s[2] << 8) | s[3];

25 
	}
}

27 
uöt64_t


28 
	$gë_uöt64
(c⁄° *
s
)

30  (((
uöt64_t
)
	`gë_uöt32
(
s
)) << 32) | get_uint32(s+4);

31 
	}
}

	@firmware/usrp2/lib/banal.h

18 #i‚de‡
INCLUDED_BANAL_H


19 
	#INCLUDED_BANAL_H


	)

21 
	~<°döt.h
>

23 
	#dimof
(
x
Ë((x)/(x[0]))

	)

27 
ölöe
 
uöt8_t


28 
	$gë_uöt8
(c⁄° *
s
)

30  
s
[0];

31 
	}
}

33 
ölöe
 
uöt16_t


34 
	$gë_uöt16
(c⁄° *
s
)

36  (
s
[0] << 8) | s[1];

37 
	}
}

39 
uöt32_t


40 
gë_uöt32
(c⁄° *
s
);

42 
uöt64_t


43 
gë_uöt64
(c⁄° *
s
);

47 
ölöe
 
öt8_t


48 
	$gë_öt8
(c⁄° *
s
)

50  
	`gë_uöt8
(
s
);

51 
	}
}

53 
ölöe
 
öt16_t


54 
	$gë_öt16
(c⁄° *
s
)

56  
	`gë_uöt16
(
s
);

57 
	}
}

59 
ölöe
 
öt32_t


60 
	$gë_öt32
(c⁄° *
s
)

62  
	`gë_uöt32
(
s
);

63 
	}
}

65 
ölöe
 
öt64_t


66 
	$gë_öt64
(c⁄° *
s
)

68  
	`gë_uöt64
(
s
);

69 
	}
}

	@firmware/usrp2/lib/clocks.c

21 
	~<˛ocks.h
>

22 
	~<°dboﬁ.h
>

23 
	~"mem‹y_m≠.h
"

24 
	~"ad9510.h
"

25 
	~"•i.h
"

30 
boﬁ
 
˛ocks_lock_dëe˘
();

35 
˛ocks_íabÀ_Âga_˛k
(
boﬁ
 
íabÀ
, 
divis‹
);

38 
	$˛ocks_öô
()

41 
	`ad9510_wrôe_ªg
(0x45, 0x01);

44 
	`˛ocks_íabÀ_Âga_˛k
(
åue
, 1);

52 !
	`˛ocks_lock_dëe˘
());

55 
ouçut_ªgs
->
˛k_˘æ
 |
CLK_RESET
;

56 
	}
}

58 
boﬁ


59 
	$˛ocks_lock_dëe˘
()

61  (
pic_ªgs
->
≥ndög
 & 
PIC_CLKSTATUS
);

62 
	}
}

64 
ölöe


65 
	$˛ocks_gí_div
(
divis‹
)

67 
L
,
H
;

68 
L
 = (
divis‹
>>1)-1;

69 
H
 = 
divis‹
-
L
-2;

70  (
L
<<4)|
H
;

71 
	}
}

73 
	#CLOCK_OUT_EN
 0x08

	)

74 
	#CLOCK_OUT_DIS_CMOS
 0x01

	)

75 
	#CLOCK_OUT_DIS_PECL
 0x02

	)

76 
	#CLOCK_DIV_DIS
 0x80

	)

77 
	#CLOCK_DIV_EN
 0x00

	)

79 
	#CLOCK_MODE_PECL
 1

	)

80 
	#CLOCK_MODE_LVDS
 2

	)

81 
	#CLOCK_MODE_CMOS
 3

	)

85 
	$˛ocks_íabÀ_XXX_˛k
(
boﬁ
 
íabÀ
, 
divis‹
, 
ªg_í
, 
ªg_div
, 
mode
)

87 
íabÀ_w‹d
, 
div_w‹d
, 
div_í_w‹d
;

89 
mode
) {

90 
CLOCK_MODE_LVDS
 :

91 
íabÀ_w‹d
 = 
íabÀ
 ? 0x02 : 0x03;

93 
CLOCK_MODE_CMOS
 :

94 
íabÀ_w‹d
 = 
íabÀ
 ? 0x08 : 0x09;

96 
CLOCK_MODE_PECL
 :

98 
íabÀ_w‹d
 = 
íabÀ
 ? 0x08 : 0x0A;

101 if(
íabÀ
 && (
divis‹
>1)) {

102 
div_w‹d
 = 
	`˛ocks_gí_div
(
divis‹
);

103 
div_í_w‹d
 = 
CLOCK_DIV_EN
;

106 
div_w‹d
 = 0;

107 
div_í_w‹d
 = 
CLOCK_DIV_DIS
;

110 
	`ad9510_wrôe_ªg
(
ªg_í
,
íabÀ_w‹d
);

111 
	`ad9510_wrôe_ªg
(
ªg_div
,
div_w‹d
);

112 
	`ad9510_wrôe_ªg
(
ªg_div
+1,
div_í_w‹d
);

113 
	`ad9510_wrôe_ªg
(0x5A, 0x01);

114 
	}
}

118 
	$˛ocks_íabÀ_Âga_˛k
(
boﬁ
 
íabÀ
, 
divis‹
)

120 
	`˛ocks_íabÀ_XXX_˛k
(
íabÀ
,
divis‹
,0x3D,0x4A,
CLOCK_MODE_PECL
);

121 
	}
}

	@firmware/usrp2/lib/clocks.h

21 #i‚de‡
INCLUDED_CLOCKS_H


22 
	#INCLUDED_CLOCKS_H


	)

28 
˛ocks_öô
();

	@firmware/usrp2/lib/compiler.h

18 #i‚de‡
INCLUDED_COMPILER_H


19 
	#INCLUDED_COMPILER_H


	)

22 
	#_AL4
 
	`__©åibuã__
((
	`Æig√d
 (4)))

	)

24 
	#FORCE_INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

	@firmware/usrp2/lib/eeprom.c

18 
	~"i2c.h
"

19 
	~"mdñay.h
"

20 
	~"u§p2/fw_comm⁄.h
"

22 c⁄° 
	gEEPROM_PAGESIZE
 = 16;

24 
boﬁ
 
	$föd_ß„_boŸed_Êag
() {

25 
Êag_byã
;

26 
	`ì¥om_ªad
(
USRP2_I2C_ADDR_MBOARD
, 
USRP2_EE_MBOARD_BOOTLOADER_FLAGS
, &
Êag_byã
, 1);

27  (
Êag_byã
 == 0x5E);

28 
	}
}

30 
	$£t_ß„_boŸed_Êag
(
boﬁ
 
Êag
) {

31 
Êag_byã
 = 
Êag
 ? 0x5E : 0xDC;

32 
	`ì¥om_wrôe
(
USRP2_I2C_ADDR_MBOARD
, 
USRP2_EE_MBOARD_BOOTLOADER_FLAGS
, &
Êag_byã
, 1);

33 
	}
}

35 
boﬁ


36 
	$ì¥om_wrôe
 (
i2c_addr
, 
ì¥om_off£t
, c⁄° *
buf
, 
Àn
)

38 
cmd
[2];

39 c⁄° *
p
 = (*Ë
buf
;

47 
Àn
-- > 0){

48 
cmd
[0] = 
ì¥om_off£t
++;

49 
cmd
[1] = *
p
++;

50 
boﬁ
 
r
 = 
	`i2c_wrôe
 (
i2c_addr
, 
cmd
,  (cmd));

51 
	`mdñay
 (10);

52 i‡(!
r
)

53  
Ál£
;

55  
åue
;

56 
	}
}

58 
boﬁ


59 
	$ì¥om_ªad
 (
i2c_addr
, 
ì¥om_off£t
, *
buf
, 
Àn
)

61 *
p
 = (*Ë
buf
;

66 
cmd
[1];

67 
cmd
[0] = 
ì¥om_off£t
;

68 i‡(!
	`i2c_wrôe
 (
i2c_addr
, 
cmd
,  (cmd)))

69  
Ál£
;

71 
Àn
 > 0){

73 
n
 = 
Àn
;

74 i‡(!
	`i2c_ªad
 (
i2c_addr
, 
p
, 
n
))

75  
Ál£
;

76 
Àn
 -
n
;

77 
p
 +
n
;

79  
åue
;

80 
	}
}

	@firmware/usrp2/lib/eth_addrs.c

19 
	~"ëhî√t.h
"

20 
	~"mem‹y_m≠.h
"

21 
	~"n⁄°dio.h
"

22 
	~<°dboﬁ.h
>

23 
	~<°rög.h
>

24 
	~"i2c.h
"

25 
	~"u§p2/fw_comm⁄.h
"

27 
boﬁ


28 
	$u≈rogømmed
(c⁄° *
t
, 
size_t
 
Àn
)

30 
i
;

31 
uöt8_t
 *
p
 = (uöt8_à*)
t
;

32 
boﬁ
 
Æl_zîos
 = 
åue
;

33 
boﬁ
 
Æl_⁄es
 = 
åue
;

34 
i
 = 0; i < 
Àn
; i++){

35 
Æl_zîos
 &
p
[
i
] == 0x00;

36 
Æl_⁄es
 &
p
[
i
] == 0xff;

38  
Æl_⁄es
 | 
Æl_zîos
;

39 
	}
}

42 
ëh_mac_addr_t
 
	mmac_addr
;

43 
ù_addr
 
	mù_addr
;

44 
ù_addr
 
	mg©eway
;

45 
ù_addr
 
	msub√t
;

46 } 
	tëh_addrs_t
;

48 
boﬁ
 
	gëh_addrs_öôülized
 = 
Ál£
;

50 c⁄° 
ëh_addrs_t
 
	gdeÁu…_ëh_addrs
 = {

51 .
mac_addr
 = {{0x00, 0x50, 0xC2, 0x85, 0x3f, 0xff}},

52 .
	gù_addr
 = {(192 << 24 | 168 << 16 | 10 << 8 | 2 << 0)},

53 .
	gg©eway
 = {(192 << 24 | 168 << 16 | 10 << 8 | 1 << 0)},

54 .
	gsub√t
 = {(255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)},

57 
ëh_addrs_t
 
	gcuºít_ëh_addrs
;

59 
	$ëh_addrs_öô
(){

60 i‡(
ëh_addrs_öôülized
) ;

61 
ëh_addrs_öôülized
 = 
åue
;

63 
	#ëh_addrs_öô_x
(
addr
, 
x
){ \

64 c⁄° 
boﬁ
 
ok
 = 
	`ì¥om_ªad
(
USRP2_I2C_ADDR_MBOARD
, 
addr
, &
cuºít_ëh_addrs
.
x
, (current_eth_addrs.x)); \

65 i‡(!
ok
 || 
	`u≈rogømmed
(&
cuºít_ëh_addrs
.
x
, (current_eth_addrs.x))){ \

66 
	`mem˝y
(&
cuºít_ëh_addrs
.
x
, &
deÁu…_ëh_addrs
.x, (current_eth_addrs.x)); \

68 }

	)

70 
	`ëh_addrs_öô_x
(
USRP2_EE_MBOARD_MAC_ADDR
, 
mac_addr
);

71 
	`ëh_addrs_öô_x
(
USRP2_EE_MBOARD_IP_ADDR
, 
ù_addr
);

72 
	`ëh_addrs_öô_x
(
USRP2_EE_MBOARD_GATEWAY
, 
g©eway
);

73 
	`ëh_addrs_öô_x
(
USRP2_EE_MBOARD_SUBNET
, 
sub√t
);

75 
	}
}

77 c⁄° 
ëh_mac_addr_t
 *
	$ëhî√t_mac_addr
(){

78 
	`ëh_addrs_öô
();

79  &
cuºít_ëh_addrs
.
mac_addr
;

80 
	}
}

82 c⁄° 
ù_addr
 *
	$gë_ù_addr
(){

83 
	`ëh_addrs_öô
();

84  &
cuºít_ëh_addrs
.
ù_addr
;

85 
	}
}

87 c⁄° 
ù_addr
 *
	$gë_sub√t
(){

88 
	`ëh_addrs_öô
();

89  &
cuºít_ëh_addrs
.
sub√t
;

90 
	}
}

92 c⁄° 
ù_addr
 *
	$gë_g©eway
(){

93 
	`ëh_addrs_öô
();

94  &
cuºít_ëh_addrs
.
g©eway
;

95 
	}
}

97 
boﬁ
 
	$£t_ù_addr
(c⁄° 
ù_addr
 *
t
){

98 c⁄° 
boﬁ
 
ok
 = 
	`ì¥om_wrôe
(
USRP2_I2C_ADDR_MBOARD
, 
USRP2_EE_MBOARD_IP_ADDR
, 
t
, (
ù_addr
));

99 i‡(
ok
Ë
cuºít_ëh_addrs
.
ù_addr
 = *
t
;

100  
ok
;

101 
	}
}

103 
	$ëh_addrs_£t_deÁu…
(){

104 
ëh_addrs_öôülized
 = 
åue
;

105 
	`mem˝y
(&
cuºít_ëh_addrs
, &
deÁu…_ëh_addrs
, (default_eth_addrs));

106 
	}
}

	@firmware/usrp2/lib/eth_mac.c

19 
	~"ëh_mac.h
"

20 
	~"mem‹y_m≠.h
"

21 
	~<°dboﬁ.h
>

22 
	~"ëh_phy.h
"

23 
	~"mdñay.h
"

24 
	~"°dio.h
"

26 
	#PHY_ADDR
 1

	)

29 
	$ëh_mac_£t_addr
(c⁄° 
ëh_mac_addr_t
 *
§c
)

41 
	}
}

45 
	$ëh_mac_öô
(c⁄° 
ëh_mac_addr_t
 *
§c
)

47 
ëh_mac
->
miimodî
 = 25;

49 
	`ëh_mac_£t_addr
(
§c
);

50 
ëh_mac
->
£âögs
 = 
MAC_SET_PAUSE_EN
 | 
MAC_SET_PASS_BCAST
 | 
MAC_SET_PASS_UCAST
 | 
MAC_SET_PAUSE_SEND_EN
 | 
MAC_SET_PASS_ALL
;

52 
ëh_mac
->
∑u£_time
 = 38;

53 
ëh_mac
->
∑u£_thªsh
 = 1200;

67 
	}
}

70 
	$ëh_mac_ªad_rm⁄
(
addr
)

72 
t
 = 0;

82  
t
;

83 
	}
}

86 
	$ëh_mac_miim_ªad
(
addr
)

89 
phy_addr
 = 
PHY_ADDR
;

90 
ëh_mac
->
miüddªss
 = ((
addr
 & 0x1fË<< 8Ë| 
phy_addr
;

91 
ëh_mac
->
miicomm™d
 = 
MIIC_RSTAT
;

93 (
ëh_mac
->
mii°©us
 & 
MIIS_BUSY
) != 0)

96 
r
 = 
ëh_mac
->
miúx_d©a
;

98  
r
;

99 
	}
}

102 
	$ëh_mac_miim_wrôe
(
addr
, 
vÆue
)

104 
phy_addr
 = 
PHY_ADDR
;

105 
ëh_mac
->
miüddªss
 = ((
addr
 & 0x1fË<< 8Ë| 
phy_addr
;

106 
ëh_mac
->
miôx_d©a
 = 
vÆue
;

107 
ëh_mac
->
miicomm™d
 = 
MIIC_WCTRLDATA
;

110 (
ëh_mac
->
mii°©us
 & 
MIIS_BUSY
) != 0)

112 
	}
}

115 
	$ëh_mac_miim_ªad_°©us
()

117 i‡(
	`hwc⁄fig_simuœti⁄_p
())

120  
ëh_mac
->
mii°©us
;

121 
	}
}

	@firmware/usrp2/lib/eth_mac.h

19 #i‚de‡
INCLUDED_ETH_MAC_H


20 
	#INCLUDED_ETH_MAC_H


	)

22 
	~<√t/ëh_mac_addr.h
>

24 
ëh_mac_öô
(c⁄° 
ëh_mac_addr_t
 *
§c
);

26 
ëh_mac_£t_addr
(c⁄° 
ëh_mac_addr_t
 *
§c
);

27 
ëh_mac_ªad_rm⁄
(
addr
);

28 
ëh_mac_miim_ªad
(
addr
);

29 
ëh_mac_miim_wrôe
(
addr
, 
vÆue
);

30 
ëh_mac_miim_ªad_°©us
();

	@firmware/usrp2/lib/ethernet.h

19 #i‚de‡
INCLUDED_ETHERNET_H


20 
	#INCLUDED_ETHERNET_H


	)

22 
	~<√t/ëh_mac_addr.h
>

23 
	~<lwù/ù_addr.h
>

24 
	~<°dboﬁ.h
>

26 (*
	tëhî√t_lök_ch™ged_ˇŒback_t
)(
	t•ìd
);

32 
	`ëhî√t_öô
();

40 
	`ëhî√t_ªgi°î_lök_ch™ged_ˇŒback
(
ëhî√t_lök_ch™ged_ˇŒback_t
 
cb
);

45 c⁄° 
ëh_mac_addr_t
 *
	`ëhî√t_mac_addr
();

50 c⁄° 
ù_addr
 *
	`gë_ù_addr
();

55 c⁄° 
ù_addr
 *
	`gë_g©eway
();

60 c⁄° 
ù_addr
 *
	`gë_sub√t
();

65 
boﬁ
 
	`£t_ù_addr
(c⁄° 
ù_addr
 *
t
);

68 
	`ëh_addrs_£t_deÁu…
();

73 
	`ëhî√t_check_îr‹s
();

75 
	#RME_RX_CRC
 0x0001

	)

76 
	#RME_RX_FIFO_FULL
 0x0002

	)

77 
	#RME_RX_2SHORT_2LONG
 0x0004

	)

79 
	#RME_TX_JAM_DROP
 0x0010

	)

80 
	#RME_TX_FIFO_UNDER
 0x0020

	)

81 
	#RME_TX_FIFO_OVER
 0x0040

	)

84 íum { 
LS_UNKNOWN
, 
LS_DOWN
, 
LS_UP
 } 
	tëh_lök_°©e_t
;

87 
	#FC_NONE
 0x0

	)

88 
	#FC_WE_TX
 0x1

89 
	#FC_WE_RX
 0x2

90 
	#FC_SYMM
 (
FC_WE_TX
 | 
FC_WE_RX
)

	)

92 
	#S_UNKNOWN
 (-1)

93 

	)

95 
ëh_lök_°©e_t
 
lök_°©e
;

96 
lök_•ìd
;

97 
Êow_c⁄åﬁ
;

98 } 
	tëhî√t_t
;

	@firmware/usrp2/lib/ethertype.h

18 #i‚de‡
INCLUDED_ETHERTYPE_H


19 
	#INCLUDED_ETHERTYPE_H


	)

23 
	#ETHERTYPE_IPV4
 0x0800

	)

24 
	#ETHERTYPE_ARP
 0x0806

	)

	@firmware/usrp2/lib/exit.c

22 
_exô
(
°©us
);

25 
	$exô
(
°©us
)

27 
	`_exô
(
°©us
);

28 
	}
}

	@firmware/usrp2/lib/hal_io.c

21 
	~"mem‹y_m≠.h
"

22 
	~"hÆ_u¨t.h
"

23 
	~"hÆ_io.h
"

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

34 
	gÀds_shadow
 = 0;

35 
	gÀd_§c_shadow
 = 0;

38 
	$hÆ_£t_Àds
(
vÆue
, 
mask
)

40 
ei
 = 
	`hÆ_dißbÀ_öts
();

41 
Àds_shadow
 = (Àds_shadow & ~
mask
Ë| (
vÆue
 & mask);

42 
ouçut_ªgs
->
Àds
 = 
Àds_shadow
;

43 
	`hÆ_ª°‹e_öts
(
ei
);

44 
	}
}

48 
	$hÆ_£t_Àd_§c
(
vÆue
, 
mask
)

50 
ei
 = 
	`hÆ_dißbÀ_öts
();

51 
Àd_§c_shadow
 = (Àd_§c_shadow & ~
mask
Ë| (
vÆue
 & mask);

52 
ouçut_ªgs
->
Àd_§c
 = 
Àd_§c_shadow
;

53 
	`hÆ_ª°‹e_öts
(
ei
);

54 
	}
}

57 
	$hÆ_toggÀ_Àds
(
mask
)

59 
ei
 = 
	`hÆ_dißbÀ_öts
();

60 
Àds_shadow
 ^
mask
;

61 
ouçut_ªgs
->
Àds
 = 
Àds_shadow
;

62 
	`hÆ_ª°‹e_öts
(
ei
);

63 
	}
}

70 #i‡
deföed
(
HAL_IO_USES_DBOARD_PINS
)

84 
	#W
 0x0080

	)

87 
	$hÆ_io_öô
()

90 
	`hÆ_gpio_£t_rx_mode
(15, 7, 
GPIOM_OUTPUT
);

93 
	`hÆ_gpio_£t_rx
(0x0000, 0xff80);

94 
	}
}

97 
	$hÆ_föish
()

99 vﬁ©ûê*
p
 = (*) 0xC2F0;

100 *
p
 = 0;

101 
	}
}

104 
ölöe
 

105 
	$putch¨
(
ch
)

107 
	`hÆ_gpio_£t_rx
((
s
 << 8Ë| 
W
, 0xff80);

108 
	`hÆ_gpio_£t_rx
(0, 0xff80);

109  
ch
;

110 
	}
}

112 #ñi‡
deföed
(
HAL_IO_USES_UART
)

115 
	$hÆ_io_öô
()

117 
	`hÆ_u¨t_öô
();

118 
	}
}

121 
	$hÆ_föish
()

123 
	}
}

126 
ölöe
 

127 
	$Âutch¨
(
hÆ_u¨t_«me_t
 
u
, 
ch
)

129 
	`hÆ_u¨t_putc
(
u
, 
ch
);

130  
ch
;

131 
	}
}

133 
ölöe
 

134 
	$putch¨
(
ch
)

136 
	`hÆ_u¨t_putc
(
DEFAULT_UART
, 
ch
);

137  
ch
;

138 
	}
}

141 
	$fgëch¨
(
hÆ_u¨t_«me_t
 
u
)

143  
	`hÆ_u¨t_gëc
(
u
);

144 
	}
}

147 
	$gëch¨
()

149  
	`fgëch¨
(
DEFAULT_UART
);

150 
	}
}

155 
	$hÆ_io_öô
()

157 
	}
}

160 
	$hÆ_föish
()

162 
	}
}

165 
ölöe
 

166 
	$putch¨
(
ch
)

168  
ch
;

169 
	}
}

172 
	$gëch¨
()

174  
EOF
;

175 
	}
}

187 
ölöe
 

188 
	$‚ewlöe
(
hÆ_u¨t_«me_t
 
u
)

190 
	`Âutch¨
(
u
, '\n');

191 
	}
}

193 
ölöe
 

194 
	$√wlöe
()

196 
	`‚ewlöe
(
DEFAULT_UART
);

197 
	}
}

200 
	$Âut°r
(
hÆ_u¨t_«me_t
 
u
, c⁄° *
s
)

202 *
s
)

203 
	`Âutch¨
(
u
, *
s
++);

206 
	}
}

209 
	$‚put°r
(
hÆ_u¨t_«me_t
 
u
, c⁄° *
s
, 
Àn
)

211 
x
 = 0;

212 *
s
 && (
Àn
 > 
x
++))

213 
	`Âutch¨
(
u
, *
s
++);

215  
x
;

216 
	}
}

219 
	$put°r
(c⁄° *
s
)

221  
	`Âut°r
(
DEFAULT_UART
, 
s
);

222 
	}
}

225 
	$Âuts
(
hÆ_u¨t_«me_t
 
u
, c⁄° *
s
)

227 
	`Âut°r
(
u
, 
s
);

228 
	`Âutch¨
(
u
, '\n');

230 
	}
}

232 
	$puts
(c⁄° *
s
)

234  
	`Âuts
(
DEFAULT_UART
, 
s
);

235 
	}
}

238 
	$fgës
(
hÆ_u¨t_«me_t
 
u
, * c⁄° 
s
)

240 *
x
 = 
s
;

241 (*
x
=()
	`hÆ_u¨t_gëc
(
u
)) != '\n') x++;

242 *
x
 = 0;

243  
s
;

244 
	}
}

247 
	$‚gës
(
hÆ_u¨t_«me_t
 
u
, * c⁄° 
s
, 
Àn
)

249 *
x
 = 
s
;

250 ((*
x
=()
	`hÆ_u¨t_gëc
(
u
)Ë!'\n'Ë&& ((x-
s
Ë< 
Àn
)) x++;

251 *
x
 = 0;

252  (
x
-
s
);

253 
	}
}

256 
	$‚gës_noblock
(
hÆ_u¨t_«me_t
 
u
, * c⁄° 
s
, 
Àn
)

258 
i
;

259 
i
=0; i < 
Àn
; i++) {

260 
ªt
 = 
	`hÆ_u¨t_gëc_noblock
(
u
);

261 
s
[
i
] = (Ë
ªt
;

262 if((
ªt
 =-1Ë|| (
s
[
i
] == '\n')) ;

264 
s
[
i
] = 0;

266  
i
;

267 
	}
}

270 
	$gës
(* c⁄° 
s
)

272  
	`fgës
(
DEFAULT_UART
, 
s
);

273 
	}
}

	@firmware/usrp2/lib/hal_io.h

19 #i‚de‡
INCLUDED_HAL_IO_H


20 
	#INCLUDED_HAL_IO_H


	)

22 
	~"mem‹y_m≠.h
"

23 
	~"hÆ_u¨t.h
"

25 
hÆ_io_öô
();

26 
hÆ_föish
();

27 *
gës
(* c⁄° 
s
);

28 
Âut°r
(
hÆ_u¨t_«me_t
 
u
, c⁄° *
s
);

29 
‚put°r
(
hÆ_u¨t_«me_t
 
u
, c⁄° *
s
, 
Àn
);

30 
‚gës
(
hÆ_u¨t_«me_t
 
u
, * c⁄° 
s
, 
Àn
);

31 
‚gës_noblock
(
hÆ_u¨t_«me_t
 
u
, * c⁄° 
s
, 
Àn
);

42 
hÆ_£t_Àds
(
vÆue
, 
mask
);

43 
hÆ_£t_Àd_§c
(
vÆue
, 
mask
);

44 
hÆ_toggÀ_Àds
(
mask
);

54 
ölöe
 

55 
	$hÆ_£t_timeout
(
dñè_ticks
)

57 
§_sim∂e_timî
->
⁄ëime
 = 
dñè_ticks
;

58 
	}
}

70 
ölöe
 

71 
	$hÆ_dißbÀ_öts
()

74 
	}
}

80 
ölöe
 

81 
	$hÆ_íabÀ_öts
()

84 
	}
}

90 
ölöe
 

91 
	$hÆ_ª°‹e_öts
(
¥ev_°©e
)

94 
	}
}

	@firmware/usrp2/lib/hal_uart.c

19 
	~"mem‹y_m≠.h
"

20 
	~"hÆ_u¨t.h
"

21 
	~"hÆ_io.h
"

22 
	~"mdñay.h
"

27 
	#NSPEEDS
 6

	)

28 
	#MAX_WB_DIV
 4

	)

32 c⁄° 
uöt16_t


33 
	gdivis‹_èbÀ
[
NSPEEDS
] = {

42 
	gu¨t_mode
[4] = {

43 [
UART_DEBUG
] = 
UART_MODE_ONLCR
,

44 [
UART_EXP
] = 
UART_MODE_ONLCR
,

45 [
UART_GPS
] = 
UART_MODE_ONLCR


48 
	gu¨t_•ìds
[4] = {

49 [
UART_DEBUG
] = 
US_230400
,

50 [
UART_EXP
] = 
US_230400
,

51 [
UART_GPS
] = 
US_115200


55 
	$hÆ_u¨t_£t_mode
(
hÆ_u¨t_«me_t
 
u¨t
, 
mode
)

57 
u¨t_mode
[
u¨t
] = 
mode
;

58 
	}
}

60 
	$hÆ_u¨t_£t_•ìd
(
hÆ_u¨t_«me_t
 
u¨t
, 
hÆ_u¨t_•ìd_t
 
•ìd
)

62 
u¨t_ªgs
[
u¨t
].
˛kdiv
 = 
divis‹_èbÀ
[
•ìd
];

63 
	}
}

66 
	$hÆ_u¨t_öô
()

68 
i
 = 0; i < 3; i++) {

69 
	`hÆ_u¨t_£t_mode
(
i
, 
u¨t_mode
[i]);

70 
	`hÆ_u¨t_£t_•ìd
(
i
, 
u¨t_•ìds
[i]);

72 
	}
}

75 
	$hÆ_u¨t_putc
(
hÆ_u¨t_«me_t
 
u
, 
ch
)

77 i‡((
ch
 ='\n'Ë&& (
u¨t_mode
[
u
] =
UART_MODE_ONLCR
))

78 
	`hÆ_u¨t_putc
(
u
, '\r');

80 
u¨t_ªgs
[
u
].
txÀvñ
 == 0)

83 
u¨t_ªgs
[
u
].
txch¨
 = 
ch
;

84 
	}
}

87 
	$hÆ_u¨t_putc_nowaô
(
hÆ_u¨t_«me_t
 
u
, 
ch
)

89 i‡((
ch
 ='\n'Ë&& (
u¨t_mode
[
u
] =
UART_MODE_ONLCR
))

90 
	`hÆ_u¨t_putc
(
u
, '\r');

92 if(
u¨t_ªgs
[
u
].
txÀvñ
)

93 
u¨t_ªgs
[
u
].
txch¨
 = 
ch
;

94 
	}
}

97 
	$hÆ_u¨t_gëc
(
hÆ_u¨t_«me_t
 
u
)

99 (
u¨t_ªgs
[
u
].
rxÀvñ
) == 0)

102  
u¨t_ªgs
[
u
].
rxch¨
;

103 
	}
}

106 
	$hÆ_u¨t_gëc_noblock
(
hÆ_u¨t_«me_t
 
u
)

111 if(
u¨t_ªgs
[
u
].
rxÀvñ
 == 0)  -1;

112  
u¨t_ªgs
[
u
].
rxch¨
;

113 
	}
}

115 
	$hÆ_u¨t_rx_Êush
(
hÆ_u¨t_«me_t
 
u
)

117 
x
 = 0;

118 
u¨t_ªgs
[
u
].
rxÀvñ
Ë
x
 = u¨t_ªgs[u].
rxch¨
;

119  
x
;

120 
	}
}

	@firmware/usrp2/lib/hal_uart.h

19 #i‚de‡
INCLUDED_HAL_UART_H


20 
	#INCLUDED_HAL_UART_H


	)

25 
	#UART_MODE_RAW
 0x0000

26 
	#UART_MODE_ONLCR
 0x0001

27 

	)

28 
	#DEFAULT_UART
 
UART_DEBUG


29 

	)

31 
	mUS_9600
 = 0,

32 
	mUS_19200
 = 1,

33 
	mUS_38400
 = 2,

34 
	mUS_57600
 = 3,

35 
	mUS_115200
 = 4,

36 
	mUS_230400
 = 5

37 } 
	thÆ_u¨t_•ìd_t
;

40 
hÆ_u¨t_•ìd_t
 
	m•ìd
;

41 } 
	thÆ_u¨t_c⁄fig_t
;

44 
	mUART_DEBUG
 = 0,

45 
	mUART_EXP
 = 1,

46 
	mUART_GPS
 = 2

47 } 
	thÆ_u¨t_«me_t
;

52 
hÆ_u¨t_£t_mode
(
hÆ_u¨t_«me_t
 
u¨t
, 
Êags
);

57 
hÆ_u¨t_öô
();

63 
hÆ_u¨t_£t_c⁄fig
(c⁄° 
hÆ_u¨t_c⁄fig_t
 *
c
);

68 
hÆ_u¨t_gë_c⁄fig
(
hÆ_u¨t_c⁄fig_t
 *
c
);

73 
hÆ_u¨t_putc
(
hÆ_u¨t_«me_t
 
u
, 
ch
);

78 
hÆ_u¨t_putc_nowaô
(
hÆ_u¨t_«me_t
 
u
, 
ch
);

83 
hÆ_u¨t_gëc
(
hÆ_u¨t_«me_t
 
u
);

88 
hÆ_u¨t_gëc_noblock
(
hÆ_u¨t_«me_t
 
u
);

90 
hÆ_u¨t_rx_Êush
(
hÆ_u¨t_«me_t
 
u
);

	@firmware/usrp2/lib/i2c.c

19 
	~"i2c.h
"

20 
	~"mem‹y_m≠.h
"

21 
	~"°döt.h
"

22 
	~<°rög.h
>

23 
	~"n⁄°dio.h
"

25 
	#MAX_WB_DIV
 4

26 

	)

29 
	#PRESCALER
(
wb_div
Ë(((
MASTER_CLK_RATE
/(wb_div)Ë/ (5 * 400000)Ë- 1)

	)

31 
uöt16_t
 
	g¥esˇÀr_vÆues
[
MAX_WB_DIV
+1] = {

33 
PRESCALER
(1),

34 
PRESCALER
(2),

35 
PRESCALER
(3),

36 
PRESCALER
(4),

40 
	$i2c_öô
()

42 
i2c_ªgs
->
˘æ
 = 0;

45 
wb_div
 = 
	`hwc⁄fig_wishb⁄e_divis‹
();

46 i‡(
wb_div
 > 
MAX_WB_DIV
)

47 
wb_div
 = 
MAX_WB_DIV
;

49 
i2c_ªgs
->
¥esˇÀr_lo
 = 
¥esˇÀr_vÆues
[
wb_div
] & 0xff;

50 
i2c_ªgs
->
¥esˇÀr_hi
 = (
¥esˇÀr_vÆues
[
wb_div
] >> 8) & 0xff;

52 
i2c_ªgs
->
˘æ
 = 
I2C_CTRL_EN
;

56 
	}
}

58 
ölöe
 

59 
	$waô_f‹_x„r
()

61 
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_TIP
)

63 
	}
}

65 
ölöe
 
boﬁ


66 
	$waô_chk_ack
()

68 
	`waô_f‹_x„r
();

70 i‡((
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_RXACK
) != 0){

71  
Ál£
;

73  
åue
;

74 
	}
}

76 
boﬁ


77 
	$i2c_ªad
 (
i2c_addr
, *
buf
, 
Àn
)

79 i‡(
Àn
 == 0)

80  
åue
;

82 
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_BUSY
)

85 
i2c_ªgs
->
d©a
 = (
i2c_addr
 << 1) | 1;

87 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_START
;

88 i‡(!
	`waô_chk_ack
())

89 
Áû
;

91 ; 
Àn
 > 0; 
buf
++,Üen--){

92 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_RD
 | (
Àn
 =1 ? (
I2C_CMD_NACK
 | 
I2C_CMD_STOP
) : 0);

93 
	`waô_f‹_x„r
();

94 *
buf
 = 
i2c_ªgs
->
d©a
;

96  
åue
;

98 
Áû
:

99 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_STOP
;

100  
Ál£
;

101 
	}
}

104 
boﬁ


105 
	$i2c_wrôe
(
i2c_addr
, c⁄° *
buf
, 
Àn
)

107 
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_BUSY
)

110 
i2c_ªgs
->
d©a
 = (
i2c_addr
 << 1) | 0;

113 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_START
 | (
Àn
 =0 ? 
I2C_CMD_STOP
 : 0);

114 i‡(!
	`waô_chk_ack
())

115 
Áû
;

117 ; 
Àn
 > 0; 
buf
++,Üen--){

118 
i2c_ªgs
->
d©a
 = *
buf
;

119 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | (
Àn
 =1 ? 
I2C_CMD_STOP
 : 0);

120 i‡(!
	`waô_chk_ack
())

121 
Áû
;

123  
åue
;

125 
Áû
:

126 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_STOP
;

127  
Ál£
;

128 
	}
}

	@firmware/usrp2/lib/i2c.h

19 #i‚de‡
INCLUDED_I2C_H


20 
	#INCLUDED_I2C_H


	)

22 
	~<°dboﬁ.h
>

23 
	~"°döt.h
"

25 
i2c_öô
();

26 
boﬁ
 
i2c_ªad
 (
i2c_addr
, *
buf
, 
Àn
);

27 
boﬁ
 
i2c_wrôe
(
i2c_addr
, c⁄° *
buf
, 
Àn
);

29 
boﬁ
 
ì¥om_wrôe
 (
i2c_addr
, 
ì¥om_off£t
, c⁄° *
buf
, 
Àn
);

34 
boﬁ
 
ì¥om_ªad
 (
i2c_addr
, 
ì¥om_off£t
, *
buf
, 
Àn
);

36 
boﬁ
 
föd_ß„_boŸed_Êag
();

37 
£t_ß„_boŸed_Êag
(
boﬁ
 
Êag
);

	@firmware/usrp2/lib/i2c_async.c

25 
	~"mem‹y_m≠.h
"

26 
	~"°döt.h
"

27 
	~<°rög.h
>

28 
	~"pic.h
"

29 
	~"n⁄°dio.h
"

30 
	~"i2c_async.h
"

33 vﬁ©ûê
uöt8_t
 
	gi2c_buf
[17];

34 vﬁ©ûê
uöt8_t
 *vﬁ©ûê
	gi2c_buÂå
 = 
i2c_buf
;

35 vﬁ©ûê
uöt8_t
 
	gi2c_Àn
 = 0;

36 vﬁ©ûê
i2c_°©e_t
 
	gi2c_°©e
 = 
I2C_STATE_IDLE
;

37 
i2c_dú_t
 
	gi2c_dú
;

39 (*vﬁ©ûê
i2c_ˇŒback
)();

40 
	`i2c_úq_h™dÀr
(
úq
);

41 
ölöe
 
	`i2c_async_îr
();

43 
	$i2c_ªgi°î_h™dÀr
() {

44 
	`pic_ªgi°î_h™dÀr
(
IRQ_I2C
, 
i2c_úq_h™dÀr
);

45 
	}
}

48 
	$i2c_úq_h™dÀr
(
úq
) {

60 if(
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_AL
) {

61 
	`¥ötf
("\tArbitrationÜost!\n");

62 
	`i2c_async_îr
();

66 if(
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_TIP
) {

72 
i2c_°©e
) {

74 
I2C_STATE_IDLE
:

76 
	`¥ötf
("AAAAAHHHHH INTERRUPT IN THE IDLE STATE AAAHHHHHHHHH\n");

77 
	`i2c_async_îr
();

80 
I2C_STATE_CONTROL_BYTE_SENT
:

81 
I2C_STATE_DATA
:

86 if(
i2c_dú
 =
I2C_DIR_READ
) {

87 if(
i2c_°©e
 =
I2C_STATE_DATA
Ë*(
i2c_buÂå
++Ë
i2c_ªgs
->
d©a
;

90 if(
i2c_Àn
 > 1)

91 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_RD
;

93 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_RD
 | 
I2C_CMD_NACK
 | 
I2C_CMD_STOP
;

95 if(
i2c_dú
 =
I2C_DIR_WRITE
) {

98 
i2c_ªgs
->
d©a
 = *(
i2c_buÂå
++);

99 if(
i2c_Àn
 > 1)

100 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
;

103 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_STOP
;

106 
i2c_Àn
--;

107 if(
i2c_Àn
 =0Ë
i2c_°©e
 = 
I2C_STATE_LAST_BYTE
;

108 
i2c_°©e
 = 
I2C_STATE_DATA
;

112 
I2C_STATE_LAST_BYTE
:

115 if(
i2c_dú
 =
I2C_DIR_READ
) {

116 *(
i2c_buÂå
++Ë
i2c_ªgs
->
d©a
;

118 
i2c_°©e
 = 
I2C_STATE_DATA_READY
;

120 
i2c_°©e
 = 
I2C_STATE_IDLE
;

122 
i2c_ªgs
->
˘æ
 &~
I2C_CTRL_IE
;

124 if(
i2c_ˇŒback
) {

125 
	`i2c_ˇŒback
();

135 
	}
}

137 
i2c_ªgi°î_ˇŒback
((*vﬁ©ûê
ˇŒback
)()) {

138 
i2c_ˇŒback
 = 
ˇŒback
;

139 
	}
}

141 
ölöe
 
	$i2c_async_îr
() {

142 
i2c_°©e
 = 
I2C_STATE_IDLE
;

143 
i2c_ªgs
->
˘æ
 &~
I2C_CTRL_IE
;

144 
	`¥ötf
("I2CÉrror\n");

146 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_STOP
;

147 
	}
}

149 
boﬁ
 
	$i2c_async_ªad
(
uöt8_t
 
addr
, 
Àn
) {

151 if(
i2c_°©e
 !
I2C_STATE_IDLE
Ë 
Ál£
;

152 if(
Àn
 =0Ë 
åue
;

153 if(
Àn
 > (
i2c_buf
)Ë 
Ál£
;

156 
i2c_ªgs
->
˘æ
 &~
I2C_CTRL_IE
;

157 
i2c_ªgs
->
cmd_°©us
 |
I2C_CMD_IACK
;

159 
i2c_Àn
 = 
Àn
;

160 
i2c_dú
 = 
I2C_DIR_READ
;

161 
i2c_buÂå
 = 
i2c_buf
;

163 
i2c_ªgs
->
˘æ
 |
I2C_CTRL_IE
;

164 
i2c_ªgs
->
d©a
 = (
addr
 << 1) | 0x01;

165 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_START
;

167 
i2c_°©e
 = 
I2C_STATE_CONTROL_BYTE_SENT
;

168  
åue
;

169 
	}
}

171 
boﬁ
 
	$i2c_async_wrôe
(
uöt8_t
 
addr
, c⁄° uöt8_à*
buf
, 
Àn
) {

173 if(
i2c_°©e
 !
I2C_STATE_IDLE
Ë 
Ál£
;

174 if(
Àn
 > (
i2c_buf
)Ë 
Ál£
;

177 
i2c_ªgs
->
˘æ
 &~
I2C_CTRL_IE
;

178 
i2c_ªgs
->
cmd_°©us
 |
I2C_CMD_IACK
;

181 
	`mem˝y
((*)
i2c_buf
, 
buf
, 
Àn
);

183 
i2c_Àn
 = 
Àn
;

184 
i2c_dú
 = 
I2C_DIR_WRITE
;

185 
i2c_buÂå
 = 
i2c_buf
;

187 
i2c_ªgs
->
˘æ
 |
I2C_CTRL_IE
;

188 
i2c_ªgs
->
d©a
 = (
addr
 << 1) | 0x00;

189 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_START
;

191 
i2c_°©e
 = 
I2C_STATE_CONTROL_BYTE_SENT
;

193  
åue
;

194 
	}
}

197 
boﬁ
 
	$i2c_async_d©a_ªady
(*
buf
) {

198 if(
i2c_°©e
 =
I2C_STATE_DATA_READY
) {

199 
i2c_°©e
 = 
I2C_STATE_IDLE
;

200 
	`mem˝y
(
buf
, (*)
i2c_buf
, (
i2c_buÂå
 - i2c_buf));

202  
åue
;

204  
Ál£
;

205 
	}
}

	@firmware/usrp2/lib/i2c_async.h

21 #i‚de‡
INCLUDED_I2C_ASYNC_H


22 
	#INCLUDED_I2C_ASYNC_H


	)

24 
	~<°dboﬁ.h
>

25 
	~"°döt.h
"

27 íum { 
	mI2C_STATE_IDLE
,

28 
	mI2C_STATE_CONTROL_BYTE_SENT
,

29 
	mI2C_STATE_DATA
,

30 
	mI2C_STATE_LAST_BYTE
,

31 
	mI2C_STATE_DATA_READY
,

32 
	mI2C_STATE_ERROR


33 } 
	ti2c_°©e_t
;

35 íum { 
	mI2C_DIR_WRITE
=0, 
	mI2C_DIR_READ
=1 } 
	ti2c_dú_t
;

37 
boﬁ
 
i2c_async_ªad
(
uöt8_t
 
addr
, 
Àn
);

38 
boﬁ
 
i2c_async_wrôe
(
uöt8_t
 
addr
, c⁄° uöt8_à*
buf
, 
Àn
);

39 
boﬁ
 
i2c_async_d©a_ªady
(*);

41 
i2c_ªgi°î_ˇŒback
((*
ˇŒback
)());

42 
	`i2c_ªgi°î_h™dÀr
();

47 
boﬁ
 
	`ì¥om_wrôe_async
 (
i2c_addr
, 
ì¥om_off£t
, c⁄° *
buf
, 
Àn
, (*
ˇŒback
)());

48 
boﬁ
 
	`ì¥om_ªad_async
(
i2c_addr
, 
ì¥om_off£t
, *
buf
, 
Àn
, (*
ˇŒback
)());

	@firmware/usrp2/lib/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

27 
	#ARPHRD_NETROM
 0

	)

28 
	#ARPHRD_ETHER
 1

	)

29 
	#ARPHRD_EETHER
 2

	)

30 
	#ARPHRD_AX25
 3

	)

31 
	#ARPHRD_PRONET
 4

	)

32 
	#ARPHRD_CHAOS
 5

	)

33 
	#ARPHRD_IEEE802
 6

	)

34 
	#ARPHRD_ARCNET
 7

	)

35 
	#ARPHRD_APPLETLK
 8

	)

36 
	#ARPHRD_DLCI
 15

	)

37 
	#ARPHRD_ATM
 19

	)

38 
	#ARPHRD_METRICOM
 23

	)

39 
	#ARPHRD_IEEE1394
 24

	)

40 
	#ARPHRD_EUI64
 27

	)

41 
	#ARPHRD_INFINIBAND
 32

	)

44 
	#ARPHRD_SLIP
 256

	)

45 
	#ARPHRD_CSLIP
 257

	)

46 
	#ARPHRD_SLIP6
 258

	)

47 
	#ARPHRD_CSLIP6
 259

	)

48 
	#ARPHRD_RSRVD
 260

	)

49 
	#ARPHRD_ADAPT
 264

	)

50 
	#ARPHRD_ROSE
 270

	)

51 
	#ARPHRD_X25
 271

	)

52 
	#ARPHRD_HWX25
 272

	)

53 
	#ARPHRD_CAN
 280

	)

54 
	#ARPHRD_PPP
 512

	)

55 
	#ARPHRD_CISCO
 513

	)

56 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

57 
	#ARPHRD_LAPB
 516

	)

58 
	#ARPHRD_DDCMP
 517

	)

59 
	#ARPHRD_RAWHDLC
 518

	)

61 
	#ARPHRD_TUNNEL
 768

	)

62 
	#ARPHRD_TUNNEL6
 769

	)

63 
	#ARPHRD_FRAD
 770

	)

64 
	#ARPHRD_SKIP
 771

	)

65 
	#ARPHRD_LOOPBACK
 772

	)

66 
	#ARPHRD_LOCALTLK
 773

	)

67 
	#ARPHRD_FDDI
 774

	)

68 
	#ARPHRD_BIF
 775

	)

69 
	#ARPHRD_SIT
 776

	)

70 
	#ARPHRD_IPDDP
 777

	)

71 
	#ARPHRD_IPGRE
 778

	)

72 
	#ARPHRD_PIMREG
 779

	)

73 
	#ARPHRD_HIPPI
 780

	)

74 
	#ARPHRD_ASH
 781

	)

75 
	#ARPHRD_ECONET
 782

	)

76 
	#ARPHRD_IRDA
 783

	)

78 
	#ARPHRD_FCPP
 784

	)

79 
	#ARPHRD_FCAL
 785

	)

80 
	#ARPHRD_FCPL
 786

	)

81 
	#ARPHRD_FCFABRIC
 787

	)

83 
	#ARPHRD_IEEE802_TR
 800

	)

84 
	#ARPHRD_IEEE80211
 801

	)

85 
	#ARPHRD_IEEE80211_PRISM
 802

	)

86 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

88 
	#ARPHRD_VOID
 0xFFFF

	)

89 
	#ARPHRD_NONE
 0xFFFE

	)

92 
	#ARPOP_REQUEST
 1

	)

93 
	#ARPOP_REPLY
 2

	)

94 
	#ARPOP_RREQUEST
 3

	)

95 
	#ARPOP_RREPLY
 4

	)

96 
	#ARPOP_InREQUEST
 8

	)

97 
	#ARPOP_InREPLY
 9

	)

98 
	#ARPOP_NAK
 10

	)

102 
	#ATF_COM
 0x02

	)

103 
	#ATF_PERM
 0x04

	)

104 
	#ATF_PUBL
 0x08

	)

105 
	#ATF_USETRAILERS
 0x10

	)

106 
	#ATF_NETMASK
 0x20

	)

108 
	#ATF_DONTPUB
 0x40

	)

110 
	t__be16
;

115 
	s¨phdr


117 
__be16
 
	m¨_hrd
;

118 
__be16
 
	m¨_¥o
;

119 
	m¨_h 
;

120 
	m¨_∂n
;

121 
__be16
 
	m¨_›
;

127 
	m¨_sha
[
ETH_ALEN
];

128 
	m¨_sù
[4];

129 
	m¨_tha
[
ETH_ALEN
];

130 
	m¨_tù
[4];

138 
	s¨p_ëh_ùv4


140 
__be16
 
	m¨_hrd
;

141 
__be16
 
	m¨_¥o
;

142 
	m¨_h 
;

143 
	m¨_∂n
;

144 
__be16
 
	m¨_›
;

146 
	m¨_sha
[6];

147 
	m¨_sù
[4];

148 
	m¨_tha
[6];

149 
	m¨_tù
[4];

	@firmware/usrp2/lib/ihex.c

7 
	~"ihex.h
"

8 
	~<˘y≥.h
>

11 
uöt8_t
 
	$asc2nibbÀ
(
öput
) {

12 if(
öput
 > 'Z')  input - 'W';

13 if(
öput
 > '9')  input - '7';

14  
öput
 - '0';

15 
	}
}

17 
	$ihex_∑r£
(
öput
[], 
ihex_ªc‹d_t
 *
ªc‹d
) {

20 
uöt8_t
 
öpuéí
;

21 
uöt8_t
 
t
, 
i
, 
checksum_ˇlc
=0, 
checksum_ªad
;

24 if(
öput
[0] != ':')  -1;

27 
öpuéí
=1;

28 
öput
[
öpuéí
]) {

29 if–!
	`isxdigô
(
öput
[
öpuéí
++]) )  -2;

33 
ªc‹d
->
Àngth
 = (
	`asc2nibbÀ
(
öput
[1]) << 4) +ásc2nibble(input[2]);

34 if(
öput
[(
ªc‹d
->
Àngth
<<1) + 11] != 0)  -3;

37 
ªc‹d
->
addr
 = (
	`asc2nibbÀ
(
öput
[3]) << 12) + (asc2nibble(input[4]) << 8) + (asc2nibble(input[5]) << 4) +ásc2nibble(input[6]);

40 
ªc‹d
->
ty≥
 = (
	`asc2nibbÀ
(
öput
[7]) << 4) +ásc2nibble(input[8]);

44 
i
=0; i < 
ªc‹d
->
Àngth
; i++) {

45 
t
 = 9 + (
i
<<1);

46 
ªc‹d
->
d©a
[
i
] = (
	`asc2nibbÀ
(
öput
[
t
]) << 4) + (asc2nibble(input[t + 1]));

47 
checksum_ˇlc
 +
ªc‹d
->
d©a
[
i
];

49 
checksum_ˇlc
 +
ªc‹d
->
Àngth
 +Ñec‹d->
ty≥
 + (ªc‹d->
addr
 >> 8) + (record->addr & 0xFF);

50 
checksum_ˇlc
 = ~checksum_calc + 1;

53 
checksum_ªad
 = (
	`asc2nibbÀ
(
öput
[9 + (
ªc‹d
->
Àngth
<<1)]) << 4) +ásc2nibble(input[10 + (record->length<<1)]);

54 if(
checksum_ˇlc
 !
checksum_ªad
)  -5;

57 
	}
}

	@firmware/usrp2/lib/ihex.h

7 
	~<°döt.h
>

8 
	~<°ddef.h
>

11 
uöt8_t
 
	mty≥
;

12 
size_t
 
	mÀngth
;

13 
uöt32_t
 
	maddr
;

14 
uöt8_t
 *
	md©a
;

15 } 
	tihex_ªc‹d_t
;

18 
ihex_∑r£
(
öput
[], 
ihex_ªc‹d_t
 *
ªc‹d
);

	@firmware/usrp2/lib/mdelay.c

19 
	~"mdñay.h
"

20 
	~"mem‹y_m≠.h
"

22 
	$mdñay
(
ms
){

23 i‡(
	`hwc⁄fig_simuœti⁄_p
()) ;

24 
i
 = 0; i < 
ms
; i++){

25 c⁄° 
uöt32_t
 
num_ticks
 = 
MASTER_CLK_RATE
/1000;

26 c⁄° 
uöt32_t
 
ticks_begö
 = 
rouãr_°©us
->
time64_ticks_rb
;

27 (
rouãr_°©us
->
time64_ticks_rb
 - 
ticks_begö
Ë< 
num_ticks
){

31 
	}
}

	@firmware/usrp2/lib/mdelay.h

19 #i‚de‡
INCLUDED_MDELAY_H


20 
	#INCLUDED_MDELAY_H


	)

27 
mdñay
(
ms
);

	@firmware/usrp2/lib/memcpy_wa.c

19 
	~"mem˝y_wa.h
"

20 
	~<°döt.h
>

21 
	~<°dlib.h
>

28 
	$mem˝y_wa
(*
d°
, c⁄° *
§c
, 
size_t
 
nbyãs
)

30 i‡(((
öçå_t
Ë
d°
 & 0x3)

31 || ((
öçå_t
Ë
§c
 & 0x3)

32 || (
nbyãs
 & 0x3))

33 
	`exô
(1);

35 *
dp
 = (*Ë
d°
;

36 *
•
 = (*Ë
§c
;

37 
nw
 = 
nbyãs
/4;

39 
i
;

40 
i
 = 0; i < 
nw
; i++)

41 
dp
[
i
] = 
•
[i];

42 
	}
}

	@firmware/usrp2/lib/memcpy_wa.h

19 #i‚de‡
INCLUDED_MEMCPY_WA_H


20 
	#INCLUDED_MEMCPY_WA_H


	)

22 
	~<°ddef.h
>

28 
mem˝y_wa
(*
d°
, c⁄° *
§c
, 
size_t
 
nbyãs
);

	@firmware/usrp2/lib/memory_map.h

19 #i‚de‡
INCLUDED_MEMORY_MAP_H


20 
	#INCLUDED_MEMORY_MAP_H


	)

22 
	~<°döt.h
>

24 
	#MASTER_CLK_RATE
 100000000

25 

	)

29 
	#ROUTER_RAM_BASE
 0x4000

	)

30 
	#SPI_BASE
 0x5000

	)

31 
	#I2C_BASE
 0x5400

	)

32 
	#GPIO_BASE
 0x5800

	)

33 
	#READBACK_BASE
 0x5C00

	)

34 
	#ETH_BASE
 0x6000

	)

35 
	#SETTING_REGS_BASE
 0x7000

	)

36 
	#PIC_BASE
 0x8000

	)

37 
	#UART_BASE
 0x8800

	)

38 
	#ATR_BASE
 0x8C00

	)

39 #ifde‡
USRP2


40 
	#SDSPI_BASE
 0xB000

	)

42 #ifde‡
USRP2P


43 
	#ICAP_BASE
 0xA000

	)

44 
	#SPIF_BASE
 0xB000

	)

45 
	#RAM_BASE
 0xC000

	)

53 
	#SPI_SS_AD9510
 1

	)

54 
	#SPI_SS_AD9777
 2

	)

55 
	#SPI_SS_RX_DAC
 4

	)

56 
	#SPI_SS_RX_ADC
 8

	)

57 
	#SPI_SS_RX_DB
 16

	)

58 
	#SPI_SS_TX_DAC
 32

	)

59 
	#SPI_SS_TX_ADC
 64

	)

60 
	#SPI_SS_TX_DB
 128

	)

61 
	#SPI_SS_ADS62P44
 256

	)

64 
	#SPI_CTRL_ASS
 (1<<13)

	)

65 
	#SPI_CTRL_IE
 (1<<12)

	)

66 
	#SPI_CTRL_LSB
 (1<<11)

	)

67 
	#SPI_CTRL_TXNEG
 (1<<10)

	)

68 
	#SPI_CTRL_RXNEG
 (1<< 9)

	)

69 
	#SPI_CTRL_GO_BSY
 (1<< 8)

	)

70 
	#SPI_CTRL_CHAR_LEN_MASK
 0x7F

	)

77 vﬁ©ûê
uöt32_t
 
	m¥esˇÀr_lo
;

78 vﬁ©ûê
uöt32_t
 
	m¥esˇÀr_hi
;

79 vﬁ©ûê
uöt32_t
 
	m˘æ
;

80 vﬁ©ûê
uöt32_t
 
	md©a
;

81 vﬁ©ûê
uöt32_t
 
	mcmd_°©us
;

82 } 
	ti2c_ªgs_t
;

84 
	#i2c_ªgs
 ((
i2c_ªgs_t
 *Ë
I2C_BASE
)

	)

86 
	#I2C_CTRL_EN
 (1 << 7)

87 
	#I2C_CTRL_IE
 (1 << 6)

88 

	)

92 
	#I2C_CMD_START
 (1 << 7)

93 
	#I2C_CMD_STOP
 (1 << 6)

94 
	#I2C_CMD_RD
 (1 << 5)

95 
	#I2C_CMD_WR
 (1 << 4)

96 
	#I2C_CMD_NACK
 (1 << 3)

97 
	#I2C_CMD_RSVD_2
 (1 << 2)

98 
	#I2C_CMD_RSVD_1
 (1 << 1)

99 
	#I2C_CMD_IACK
 (1 << 0)

100 

	)

101 
	#I2C_ST_RXACK
 (1 << 7)

102 
	#I2C_ST_BUSY
 (1 << 6)

103 
	#I2C_ST_AL
 (1 << 5)

104 
	#I2C_ST_RSVD_4
 (1 << 4)

105 
	#I2C_ST_RSVD_3
 (1 << 3)

106 
	#I2C_ST_RSVD_2
 (1 << 2)

107 
	#I2C_ST_TIP
 (1 << 1)

108 
	#I2C_ST_IP
 (1 << 0)

109 

	)

115 vﬁ©ûê
uöt32_t
 
	m•i
;

116 vﬁ©ûê
uöt32_t
 
	m_∑ddög
[7];

117 vﬁ©ûê
uöt32_t
 
	m°©us
;

118 vﬁ©ûê
uöt32_t
 
	m_unu£d
;

119 vﬁ©ûê
uöt32_t
 
	mtime64_£cs_rb
;

120 vﬁ©ûê
uöt32_t
 
	mtime64_ticks_rb
;

121 vﬁ©ûê
uöt32_t
 
	mcom∑t_num
;

122 vﬁ©ûê
uöt32_t
 
	múqs
;

123 } 
	trouãr_°©us_t
;

125 
	#SPI_READY_IRQ
 (1 << 12)

	)

127 
	#rouãr_°©us
 ((
rouãr_°©us_t
 *Ë
READBACK_BASE
)

	)

128 
	#ªadback_mux
 ((
rouãr_°©us_t
 *Ë
READBACK_BASE
)

129 

	)

133 
ölöe
 

134 
	$hwc⁄fig_simuœti⁄_p
()

137 
	}
}

143 
ölöe
 

144 
	$hwc⁄fig_wishb⁄e_divis‹
()

147 
	}
}

154 vﬁ©ûê
	m£âögs
;

155 vﬁ©ûê
	muˇ°_hi
;

156 vﬁ©ûê
	muˇ°_lo
;

157 vﬁ©ûê
	mmˇ°_hi
;

158 vﬁ©ûê
	mmˇ°_lo
;

159 vﬁ©ûê
	mmiimodî
;

160 vﬁ©ûê
	mmiüddªss
;

161 vﬁ©ûê
	mmiôx_d©a
;

162 vﬁ©ûê
	mmiicomm™d
;

163 vﬁ©ûê
	mmii°©us
;

164 vﬁ©ûê
	mmiúx_d©a
;

165 vﬁ©ûê
	m∑u£_time
;

166 vﬁ©ûê
	m∑u£_thªsh
;

167 } 
	tëh_mac_ªgs_t
;

170 
	#MAC_SET_PAUSE_EN
 (1 << 0)

171 
	#MAC_SET_PASS_ALL
 (1 << 1)

172 
	#MAC_SET_PASS_PAUSE
 (1 << 2)

173 
	#MAC_SET_PASS_BCAST
 (1 << 3)

174 
	#MAC_SET_PASS_MCAST
 (1 << 4)

175 
	#MAC_SET_PASS_UCAST
 (1 << 5)

176 
	#MAC_SET_PAUSE_SEND_EN
 (1 << 6)

177 

	)

179 
	#MIIC_SCANSSTAT
 (1 << 0)

180 
	#MIIC_RSTAT
 (1 << 1)

181 
	#MIIC_WCTRLDATA
 (1 << 2)

182 

	)

184 
	#MIIS_LINKFAIL
 (1 << 0)

185 
	#MIIS_BUSY
 (1 << 1)

186 
	#MIIS_NVALID
 (1 << 2)

188 

	)

189 
	#ëh_mac
 ((
ëh_mac_ªgs_t
 *Ë
ETH_BASE
)

	)

198 
	#SR_MISC
 0

199 
	#SR_SIMTIMER
 8

200 
	#SR_TIME64
 10

201 
	#SR_BUF_POOL
 16

202 
	#SR_SPI_CORE
 20

203 
	#SR_RX_FRONT
 24

204 
	#SR_RX_CTRL0
 32

205 
	#SR_RX_DSP0
 48

206 
	#SR_RX_CTRL1
 80

207 
	#SR_RX_DSP1
 96

208 

	)

209 
	#SR_TX_FRONT
 128

210 
	#SR_TX_CTRL
 144

211 
	#SR_TX_DSP
 160

212 

	)

213 
	#SR_UDP_SM
 192

214 

	)

215 
	#_SR_ADDR
(
§
Ë(
SETTING_REGS_BASE
 + (§Ë* (
uöt32_t
))

	)

217 
	#SR_ADDR_BLDRDONE
 
	`_SR_ADDR
(5)

	)

222 vﬁ©ûê
uöt32_t
 
	mdividî
;

223 vﬁ©ûê
uöt32_t
 
	mc⁄åﬁ
;

224 vﬁ©ûê
uöt32_t
 
	md©a
;

225 } 
	t•i_c‹e_t
;

227 
	#SPI_CORE_SLAVE_SELECT_SHIFT
 0

	)

228 
	#SPI_CORE_NUM_BITS_SHIFT
 24

	)

229 
	#SPI_CORE_DATA_IN_EDGE_SHIFT
 30

	)

230 
	#SPI_CORE_DATA_OUT_EDGE_SHIFT
 31

	)

232 
	#•i_c‹e
 ((
•i_c‹e_t
 *Ë
	`_SR_ADDR
(
SR_SPI_CORE
))

	)

237 vﬁ©ûê
uöt32_t
 
	mmode_˘æ
;

238 vﬁ©ûê
uöt32_t
 
	mù_addr
;

239 vﬁ©ûê
uöt32_t
 
	md©a_p‹ts
;

240 vﬁ©ûê
uöt32_t
 
	miÁ˚_˘æ
;

241 } 
	trouãr_˘æ_t
;

243 
	#rouãr_˘æ
 ((
rouãr_˘æ_t
 *Ë
	`_SR_ADDR
(
SR_BUF_POOL
))

	)

248 vﬁ©ûê
uöt32_t
 
	m˛k_˘æ
;

249 vﬁ©ûê
uöt32_t
 
	m£rdes_˘æ
;

250 vﬁ©ûê
uöt32_t
 
	madc_˘æ
;

251 vﬁ©ûê
uöt32_t
 
	mÀds
;

252 vﬁ©ûê
uöt32_t
 
	mphy_˘æ
;

253 vﬁ©ûê
uöt32_t
 
	mdebug_mux_˘æ
;

254 vﬁ©ûê
uöt32_t
 
	mÀd_§c
;

255 vﬁ©ûê
uöt32_t
 
	mÊush_iˇche
;

256 } 
	touçut_ªgs_t
;

258 
	#CLK_RESET
 (1<<4)

	)

259 
	#CLK_ENABLE
 (1<<3Ë| (1<<2)

	)

260 
	#CLK_SEL
 (1<<1Ë| (1<<0)

	)

262 
	#SERDES_ENABLE
 8

	)

263 
	#SERDES_PRBSEN
 4

	)

264 
	#SERDES_LOOPEN
 2

	)

265 
	#SERDES_RXEN
 1

	)

267 
	#ADC_CTRL_ON
 0x0F

	)

268 
	#ADC_CTRL_OFF
 0x00

	)

272 
	#LED_A
 (1 << 4)

	)

273 
	#LED_B
 (1 << 1)

	)

274 
	#LED_E
 (1 << 2)

	)

275 
	#LED_D
 (1 << 0)

	)

276 
	#LED_C
 (1 << 3)

	)

278 
	#LED_RJ45
 (1 << 5)

	)

280 
	#ouçut_ªgs
 ((
ouçut_ªgs_t
 *Ë
SETTING_REGS_BASE
)

	)

286 vﬁ©ûê
uöt32_t
 
	míåy
[16];

287 } 
	mèbÀ
[4];

288 } 
	t§_¥Ÿo_‰amî_t
;

290 
	#§_¥Ÿo_‰amî_ªgs
 ((
§_¥Ÿo_‰amî_t
 *Ë
	`_SR_ADDR
(
SR_UDP_SM
))

	)

295 vﬁ©ûê
uöt32_t
 
	m_∑d
[4];

296 vﬁ©ûê
uöt32_t
 
	mcyc_≥r_up
;

297 } 
	t§_tx_˘æ_t
;

299 
	#§_tx_˘æ
 ((
§_tx_˘æ_t
 *Ë
	`_SR_ADDR
(
SR_TX_CTRL
))

	)

303 vﬁ©ûê
uöt32_t
 
	m_∑d
[8];

304 vﬁ©ûê
uöt32_t
 
	m˛ór
;

305 } 
	t§_rx_˘æ_t
;

307 
	#§_rx_˘æ0
 ((
§_rx_˘æ_t
 *Ë
	`_SR_ADDR
(
SR_RX_CTRL0
))

	)

308 
	#§_rx_˘æ1
 ((
§_rx_˘æ_t
 *Ë
	`_SR_ADDR
(
SR_RX_CTRL1
))

	)

329 vﬁ©ûê
uöt32_t
 
	m£cs
;

330 vﬁ©ûê
uöt32_t
 
	mticks
;

331 vﬁ©ûê
uöt32_t
 
	mÊags
;

332 vﬁ©ûê
uöt32_t
 
	mimm
;

333 } 
	t§_time64_t
;

335 
	#§_time64
 ((
§_time64_t
 *Ë
	`_SR_ADDR
(
SR_TIME64
))

	)

344 
	#IRQ_BUFFER
 0

345 
	#IRQ_ONETIME
 1

	)

346 
	#IRQ_SPI
 2

	)

347 
	#IRQ_I2C
 3

	)

348 
	#IRQ_PHY
 4

349 
	#IRQ_UNDERRUN
 5

	)

350 
	#IRQ_OVERRUN
 6

	)

351 
	#IRQ_PPS
 7

352 
	#IRQ_UART_RX
 8

	)

353 
	#IRQ_UART_TX
 9

	)

354 
	#IRQ_SERDES
 10

	)

355 
	#IRQ_CLKSTATUS
 11

	)

356 
	#IRQ_PERIODIC
 12

	)

357 
	#IRQ_BUTTON
 13

	)

359 
	#IRQ_TO_MASK
(
x
Ë(1 << (x))

	)

361 
	#PIC_BUFFER_INT
 
	`IRQ_TO_MASK
(
IRQ_BUFFER
)

	)

362 
	#PIC_ONETIME_INT
 
	`IRQ_TO_MASK
(
IRQ_ONETIME
)

	)

363 
	#PIC_SPI_INT
 
	`IRQ_TO_MASK
(
IRQ_SPI
)

	)

364 
	#PIC_I2C_INT
 
	`IRQ_TO_MASK
(
IRQ_I2C
)

	)

365 
	#PIC_PHY_INT
 
	`IRQ_TO_MASK
(
IRQ_PHY
)

	)

366 
	#PIC_UNDERRUN_INT
 
	`IRQ_TO_MASK
(
IRQ_UNDERRUN
)

	)

367 
	#PIC_OVERRUN_INT
 
	`IRQ_TO_MASK
(
IRQ_OVERRUN
)

	)

368 
	#PIC_PPS_INT
 
	`IRQ_TO_MASK
(
IRQ_PPS
)

	)

369 
	#PIC_UART_RX_INT
 
	`IRQ_TO_MASK
(
IRQ_UART_RX
)

	)

370 
	#PIC_UART_TX_INT
 
	`IRQ_TO_MASK
(
IRQ_UART_TX
)

	)

371 
	#PIC_SERDES
 
	`IRQ_TO_MASK
(
IRQ_SERDES
)

	)

372 
	#PIC_CLKSTATUS
 
	`IRQ_TO_MASK
(
IRQ_CLKSTATUS
)

	)

373 
	#PIC_BUTTON
 
	`IRQ_TO_MASK
(
IRQ_BUTTON
)

	)

376 vﬁ©ûê
uöt32_t
 
	medge_íabÀ
;

377 vﬁ©ûê
uöt32_t
 
	mpﬁ¨ôy
;

378 vﬁ©ûê
uöt32_t
 
	mmask
;

379 vﬁ©ûê
uöt32_t
 
	m≥ndög
;

380 } 
	tpic_ªgs_t
;

382 
	#pic_ªgs
 ((
pic_ªgs_t
 *Ë
PIC_BASE
)

	)

387 vﬁ©ûê
uöt32_t
 
	m⁄ëime
;

388 vﬁ©ûê
uöt32_t
 
	m≥riodic
;

389 } 
	t§_sim∂e_timî_t
;

391 
	#§_sim∂e_timî
 ((
§_sim∂e_timî_t
 *Ë
	`_SR_ADDR
(
SR_SIMTIMER
))

	)

400 vﬁ©ûê
uöt32_t
 
	m˛kdiv
;

401 vﬁ©ûê
uöt32_t
 
	mtxÀvñ
;

402 vﬁ©ûê
uöt32_t
 
	mrxÀvñ
;

403 vﬁ©ûê
uöt32_t
 
	mtxch¨
;

404 vﬁ©ûê
uöt32_t
 
	mrxch¨
;

405 vﬁ©ûê
uöt32_t
 
	m∑ddög
[3];

406 } 
	tu¨t_ªgs_t
;

408 
	#u¨t_ªgs
 ((
u¨t_ªgs_t
 *Ë
UART_BASE
)

	)

414 #ifde‡
USRP2


417 vﬁ©ûê
uöt32_t
 
	m°©us
;

418 vﬁ©ûê
uöt32_t
 
	m˛kdiv
;

419 vﬁ©ûê
uöt32_t
 
	m£nd_d©
;

420 vﬁ©ûê
uöt32_t
 
	mª˚ive_d©
;

421 } 
	tsd•i_ªgs_t
;

423 
	#sd•i_ªgs
 ((
sd•i_ªgs_t
 *Ë
SDSPI_BASE
)

	)

430 #ifde‡
USRP2P


433 
uöt32_t
 
	miˇp
;

434 } 
	tiˇp_ªgs_t
;

436 
	#iˇp_ªgs
 ((
iˇp_ªgs_t
 *Ë
ICAP_BASE
)

	)

445 vﬁ©ûê
uöt32_t
 
	mtxrx0
;

446 vﬁ©ûê
uöt32_t
 
	mtxrx1
;

447 vﬁ©ûê
uöt32_t
 
	mtxrx2
;

448 vﬁ©ûê
uöt32_t
 
	mtxrx3
;

449 vﬁ©ûê
uöt32_t
 
	m˘æ
;

450 vﬁ©ûê
uöt32_t
 
	mdiv
;

451 vﬁ©ûê
uöt32_t
 
	mss
;

452 } 
	t•if_ªgs_t
;

454 
	#•if_ªgs
 ((
•if_ªgs_t
 *Ë
SPIF_BASE
)

	)

	@firmware/usrp2/lib/memset_wa.c

19 
	~"mem£t_wa.h
"

20 
	~<°döt.h
>

21 
	~<°dlib.h
>

28 
	$mem£t_wa
(*
d°
, 
c
, 
size_t
 
nbyãs
)

30 i‡(((
öçå_t
Ë
d°
 & 0x3)

31 || (
nbyãs
 & 0x3))

32 
	`exô
(1);

34 *
dp
 = (*Ë
d°
;

36 
c
 &= 0xff;

37 
v
 = (
c
 << 24) | (c << 16) | (c << 8) | c;

38 
nw
 = 
nbyãs
/4;

40 
i
;

41 
i
 = 0; i < 
nw
; i++)

42 
dp
[
i
] = 
v
;

44  
d°
;

45 
	}
}

	@firmware/usrp2/lib/memset_wa.h

19 #i‚de‡
INCLUDED_MEMSET_WA_H


20 
	#INCLUDED_MEMSET_WA_H


	)

22 
	~<°dlib.h
>

24 *
mem£t_wa
(*
s
, 
c
, 
size_t
 
n
);

	@firmware/usrp2/lib/net/eth_mac_addr.h

18 #i‚de‡
INCLUDED_ETH_MAC_ADDR_H


19 
	#INCLUDED_ETH_MAC_ADDR_H


	)

21 
	~<°döt.h
>

26 
uöt8_t
 
	maddr
[6];

27 } 
	tëh_mac_addr_t
;

	@firmware/usrp2/lib/net/padded_eth_hdr.h

18 #i‚de‡
INCLUDED_PADDED_ETH_HDR_H


19 
	#INCLUDED_PADDED_ETH_HDR_H


	)

21 
	~<compûî.h
>

22 
	~<√t/ëh_mac_addr.h
>

30 
uöt16_t
 
	m∑d
;

31 
ëh_mac_addr_t
 
	md°
;

32 
ëh_mac_addr_t
 
	m§c
;

33 
uöt16_t
 
	mëhîty≥
;

34 } 
	t_AL4
 
	t∑dded_ëh_hdr_t
;

	@firmware/usrp2/lib/net/socket_address.h

18 #i‚de‡
INCLUDED_SOCKET_ADDRESS_H


19 
	#INCLUDED_SOCKET_ADDRESS_H


	)

21 
	~<lwù/ù_addr.h
>

25 
	ssockë_addªss
 {

26 
	mp‹t
;

27 
ù_addr
 
	maddr
;

28 } 
	tsockë_addªss_t
;

30 
ölöe
 
sockë_addªss


31 
	$make_sockë_addªss
(
ù_addr
 
addr
, 
p‹t
)

33 
sockë_addªss
 
r
;

34 
r
.
p‹t
 =Öort;

35 
r
.
addr
 =áddr;

36  
r
;

37 
	}
}

	@firmware/usrp2/lib/net_common.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~<c⁄fig.h
>

21 
	~"√t_comm⁄.h
"

22 
	~"b™Æ.h
"

23 
	~<hÆ_io.h
>

24 
	~<mem‹y_m≠.h
>

25 
	~<mem˝y_wa.h
>

26 
	~<ëhî√t.h
>

27 
	~<√t/∑dded_ëh_hdr.h
>

28 
	~<lwù/ù.h
>

29 
	~<lwù/udp.h
>

30 
	~<lwù/icmp.h
>

31 
	~<°dlib.h
>

32 
	~<n⁄°dio.h
>

33 
	~"¨p_ˇche.h
"

34 
	~"if_¨p.h
"

35 
	~<ëhîty≥.h
>

36 
	~<°rög.h
>

37 
	~"pkt_˘æ.h
"

42 c⁄° 
boﬁ
 
	gdebug
 = 
Ál£
;

43 c⁄° 
size_t
 
	gout_buff_size
 = 2048;

44 c⁄° 
ëh_mac_addr_t
 
	gBCAST_MAC_ADDR
 = {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}};

45 
	#MAX_UDP_LISTENERS
 10

	)

50 
uöt32_t
 
	$chksum_buf„r
(

51 
uöt16_t
 *
buf
, 
size_t
 
nsh‹ts
,

52 
uöt32_t
 
öôül_chksum


54 
uöt32_t
 
chksum
 = 
öôül_chksum
;

55 
size_t
 
i
 = 0; i < 
nsh‹ts
; i++Ë
chksum
 +
buf
[i];

57 
chksum
 >> 16) chksum = (chksum & 0xffff) + (chksum >> 16);

59  
chksum
;

60 
	}
}

65 
ëh_mac_addr_t
 
	g_loˇl_mac_addr
;

66 
ù_addr
 
	g_loˇl_ù_addr
;

67 
	$ªgi°î_addrs
(c⁄° 
ëh_mac_addr_t
 *
mac_addr
, c⁄° 
ù_addr
 *ip_addr){

68 
_loˇl_mac_addr
 = *
mac_addr
;

69 
_loˇl_ù_addr
 = *
ù_addr
;

70 
	}
}

72 
	sli°íî_íåy
 {

73 
	mp‹t
;

74 
udp_ª˚ivî_t
 
	mrcvr
;

77 
li°íî_íåy
 
	gli°íîs
[
MAX_UDP_LISTENERS
];

79 
	$öô_udp_li°íîs
(){

80 
i
 = 0; i < 
MAX_UDP_LISTENERS
; i++){

81 
li°íîs
[
i
].
rcvr
 = 
NULL
;

83 
	}
}

85 
li°íî_íåy
 *

86 
	$föd_li°íî_by_p‹t
(
p‹t
)

88 
i
 = 0; i < 
MAX_UDP_LISTENERS
; i++){

89 i‡(
p‹t
 =
li°íîs
[
i
].port)

90  &
li°íîs
[
i
];

93 
	}
}

95 
li°íî_íåy
 *

96 
	$föd_‰ì_li°íî
()

98 
i
 = 0; i < 
MAX_UDP_LISTENERS
; i++){

99 i‡(
li°íîs
[
i
].
rcvr
 =
NULL
)

100  &
li°íîs
[
i
];

102 
	`ab‹t
();

103 
	}
}

106 
	$ªgi°î_udp_li°íî
(
p‹t
, 
udp_ª˚ivî_t
 
rcvr
)

108 
li°íî_íåy
 *
lx
 = 
	`föd_li°íî_by_p‹t
(
p‹t
);

109 i‡(
lx
)

110 
lx
->
rcvr
 =Ñcvr;

112 
lx
 = 
	`föd_‰ì_li°íî
();

113 
lx
->
p‹t
 =Öort;

114 
lx
->
rcvr
 =Ñcvr;

116 
	}
}

121 
	$£tup_‰amî
(

122 
ëh_mac_addr_t
 
ëh_d°
,

123 
ëh_mac_addr_t
 
ëh_§c
,

124 
sockë_addªss
 
sock_d°
,

125 
sockë_addªss
 
sock_§c
,

126 
size_t
 
which


129 
∑dded_ëh_hdr_t
 
ëh
;

130 
ù_hdr
 
ù
;

131 
udp_hdr
 
udp
;

132 } 
‰ame
;

135 
‰ame
.
ëh
.
d°
 = 
ëh_d°
;

136 
‰ame
.
ëh
.
§c
 = 
ëh_§c
;

137 
‰ame
.
ëh
.
ëhîty≥
 = 
ETHERTYPE_IPV4
;

140 
	`IPH_VHLTOS_SET
(&
‰ame
.
ù
, 4, 5, 0);

141 
	`IPH_LEN_SET
(&
‰ame
.
ù
, 0);

142 
	`IPH_ID_SET
(&
‰ame
.
ù
, 0);

143 
	`IPH_OFFSET_SET
(&
‰ame
.
ù
, 
IP_DF
);

144 
	`IPH_TTL_SET
(&
‰ame
.
ù
, 32);

145 
	`IPH_PROTO_SET
(&
‰ame
.
ù
, 
IP_PROTO_UDP
);

146 
	`IPH_CHKSUM_SET
(&
‰ame
.
ù
, 0);

147 
‰ame
.
ù
.
§c
 = 
sock_§c
.
addr
;

148 
‰ame
.
ù
.
de°
 = 
sock_d°
.
addr
;

149 
	`IPH_CHKSUM_SET
(&
‰ame
.
ù
, 
	`chksum_buf„r
(

150 (*Ë&
‰ame
.
ù
,

151 (
‰ame
.
ù
)/(), 0

155 
‰ame
.
udp
.
§c
 = 
sock_§c
.
p‹t
;

156 
‰ame
.
udp
.
de°
 = 
sock_d°
.
p‹t
;

157 
‰ame
.
udp
.
Àn
 = 0;

158 
‰ame
.
udp
.
chksum
 = 0;

161 
	`mem˝y_wa
((*)(
§_¥Ÿo_‰amî_ªgs
->
èbÀ
[
which
].
íåy
 + 1), &
‰ame
, (frame));

162 
	}
}

180 
	$£nd_pkt
(

181 
ëh_mac_addr_t
 
d°
, 
ëhîty≥
,

182 c⁄° *
buf0
, 
size_t
 
Àn0
,

183 c⁄° *
buf1
, 
size_t
 
Àn1
,

184 c⁄° *
buf2
, 
size_t
 
Àn2


188 
uöt32_t
 
˘æ_w‹d
 = 0x0;

191 
∑dded_ëh_hdr_t
 
ehdr
;

192 
ehdr
.
∑d
 = 0;

193 
ehdr
.
d°
 = dst;

194 
ehdr
.
§c
 = 
_loˇl_mac_addr
;

195 
ehdr
.
ëhîty≥
 =Éthertype;

198 
uöt8_t
 *
buff
 = (uöt8_à*)
	`pkt_˘æ_˛aim_outgoög_buf„r
();

199 
uöt8_t
 *
p
 = 
buff
;

200 
size_t
 
tŸÆ_Àn
 = 0;

203 c⁄° *
buffs
[] = {&
˘æ_w‹d
, &
ehdr
, 
buf0
, 
buf1
, 
buf2
};

204 
size_t
 
Àns
[] = {(
˘æ_w‹d
), (
ehdr
), 
Àn0
, 
Àn1
, (
Àn2
 + 3) & ~3};

207 
size_t
 
i
 = 0; i < (
buffs
)/(buffs[0]); i++){

208 
tŸÆ_Àn
 +
Àns
[
i
];

209 
size_t
 
byãs_ªmaöög
 = 
out_buff_size
 - (size_t)(
p
 - 
buff
);

210 i‡(
Àns
[
i
] > 
byãs_ªmaöög
)Üens[i] = bytes_remaining;

211 i‡(
Àns
[
i
] && (÷ís[i] & 0x3Ë|| (
öçå_t
Ë
buffs
[i] & 0x3))

212 
	`¥ötf
("send_pkt: badálignment ofÜenánd/or buf\n");

213 
	`mem˝y_wa
(
p
, 
buffs
[
i
], 
Àns
[i]);

214 
p
 +
Àns
[
i
];

218 i‡(
tŸÆ_Àn
 < 64)Åotal_len = 64;

220 
	`pkt_˘æ_commô_outgoög_buf„r
(
tŸÆ_Àn
/(
uöt32_t
));

221 i‡(
debug
Ë
	`¥ötf
("£¡ %d byãs\n", ()
tŸÆ_Àn
);

222 
	}
}

225 
	$£nd_ù_pkt
(
ù_addr
 
d°
, 
¥Ÿocﬁ
,

226 c⁄° *
buf0
, 
size_t
 
Àn0
,

227 c⁄° *
buf1
, 
size_t
 
Àn1
)

229 
ù_hdr
 
ù
;

230 
	`IPH_VHLTOS_SET
(&
ù
, 4, 5, 0);

231 
	`IPH_LEN_SET
(&
ù
, 
IP_HLEN
 + 
Àn0
 + 
Àn1
);

232 
	`IPH_ID_SET
(&
ù
, 0);

233 
	`IPH_OFFSET_SET
(&
ù
, 
IP_DF
);

234 
	`IPH_TTL_SET
(&
ù
, 32);

235 
	`IPH_PROTO_SET
(&
ù
, 
¥Ÿocﬁ
);

236 
	`IPH_CHKSUM_SET
(&
ù
, 0);

237 
ù
.
§c
 = 
_loˇl_ù_addr
;

238 
ù
.
de°
 = 
d°
;

240 
	`IPH_CHKSUM_SET
(&
ù
, ~
	`chksum_buf„r
(

241 (*Ë&
ù
, (ip)/(), 0

244 
ëh_mac_addr_t
 
d°_mac
;

245 
boﬁ
 
found
 = 
	`¨p_ˇche_lookup_mac
(&
ù
.
de°
, &
d°_mac
);

246 i‡(!
found
){

247 
	`¥ötf
("net_common: failedÅo hit cacheÜooking for ");

248 
	`¥öt_ù_addr
(&
ù
.
de°
);

249 
	`√wlöe
();

253 
	`£nd_pkt
(
d°_mac
, 
ETHERTYPE_IPV4
,

254 &
ù
, (ù), 
buf0
, 
Àn0
, 
buf1
, 
Àn1
);

255 
	}
}

258 
	$£nd_udp_pkt
(
§c_p‹t
, 
sockë_addªss
 
d°
,

259 c⁄° *
buf
, 
size_t
 
Àn
)

261 
udp_hdr
 
udp
 
_AL4
;

262 
udp
.
§c
 = 
§c_p‹t
;

263 
udp
.
de°
 = 
d°
.
p‹t
;

264 
udp
.
Àn
 = 
UDP_HLEN
 +Üen;

265 
udp
.
chksum
 = 0;

267 
	`£nd_ù_pkt
(
d°
.
addr
, 
IP_PROTO_UDP
,

268 &
udp
, (udp), 
buf
, 
Àn
);

269 
	}
}

272 
	$h™dÀ_udp_∑ckë
(
ù_addr
 
§c_ù
, ù_add∏
d°_ù
,

273 
udp_hdr
 *
udp
, 
size_t
 
Àn
)

275 i‡(
Àn
 !
udp
->len){

276 
	`¥ötf
("UDP inc⁄si°íàÀngths: %d %d\n", ()
Àn
, 
udp
->len);

280 *
∑ylﬂd
 = ((*Ë
udp
Ë+ 
UDP_HLEN
;

281 
∑ylﬂd_Àn
 = 
Àn
 - 
UDP_HLEN
;

284 
	`¥ötf
("\nUDP: src = %d dst = %dÜen = %d\n",

285 
udp
->
§c
, udp->
de°
, udp->
Àn
);

290 
li°íî_íåy
 *
lx
 = 
	`föd_li°íî_by_p‹t
(
udp
->
de°
);

291 i‡(
lx
){

292 
sockë_addªss
 
§c
 = 
	`make_sockë_addªss
(
§c_ù
, 
udp
->src);

293 
sockë_addªss
 
d°
 = 
	`make_sockë_addªss
(
d°_ù
, 
udp
->
de°
);

294 
lx
->
	`rcvr
(
§c
, 
d°
, 
∑ylﬂd
, 
∑ylﬂd_Àn
);

296 
	}
}

299 
	$h™dÀ_icmp_∑ckë
(
ù_addr
 
§c
, ù_add∏
d°
,

300 
icmp_echo_hdr
 *
icmp
, 
size_t
 
Àn
)

302 
icmp
->
ty≥
){

303 
ICMP_DUR
:

304 i‡(
icmp
->
code
 =
ICMP_DUR_PORT
){

308 
ù_hdr
 *
ù
 = (ù_hd∏*)(((
uöt8_t
*)
icmp
Ë+ (
icmp_echo_hdr
));

309 
udp_hdr
 *
udp
 = (udp_hd∏*)(((*)
ù
Ë+ 
IP_HLEN
);

310 i‡(
	`IPH_PROTO
(
ù
Ë!
IP_PROTO_UDP
) ;

312 
li°íî_íåy
 *
lx
 = 
	`föd_li°íî_by_p‹t
(
udp
->
§c
);

313 i‡(
lx
){

314 
sockë_addªss
 
§c
 = 
	`make_sockë_addªss
(
ù
->§c, 
udp
->src);

315 
sockë_addªss
 
d°
 = 
	`make_sockë_addªss
(
ù
->
de°
, 
udp
->dest);

316 
lx
->
	`rcvr
(
§c
, 
d°
, 
NULL
, 0);

319 
	`putch¨
('i');

323 
	`putch¨
('i');

327 
ICMP_ECHO
:{

328 c⁄° *
icmp_d©a_buff
 = ((
uöt8_t
*)
icmp
Ë+ (
icmp_echo_hdr
);

329 
size_t
 
icmp_d©a_Àn
 = 
Àn
 - (
icmp_echo_hdr
);

331 
icmp_echo_hdr
 
echo_ª∂y
;

332 
echo_ª∂y
.
ty≥
 = 0;

333 
echo_ª∂y
.
code
 = 0;

334 
echo_ª∂y
.
chksum
 = 0;

335 
echo_ª∂y
.
id
 = 
icmp
->id;

336 
echo_ª∂y
.
£qno
 = 
icmp
->seqno;

337 
echo_ª∂y
.
chksum
 = ~
	`chksum_buf„r
(

338 (*)
icmp_d©a_buff
,

339 
icmp_d©a_Àn
/(),

340 
	`chksum_buf„r
(

341 (*)&
echo_ª∂y
,

342 (
echo_ª∂y
)/(),

346 
	`£nd_ù_pkt
(

347 
§c
, 
IP_PROTO_ICMP
,

348 &
echo_ª∂y
, (echo_reply),

349 
icmp_d©a_buff
, 
icmp_d©a_Àn


356 
	}
}

359 
	$£nd_¨p_ª∂y
(
¨p_ëh_ùv4
 *
ªq
, 
ëh_mac_addr_t
 
our_mac
)

361 
¨p_ëh_ùv4
 
ª∂y
 
_AL4
;

362 
ª∂y
.
¨_hrd
 = 
ªq
->ar_hrd;

363 
ª∂y
.
¨_¥o
 = 
ªq
->ar_pro;

364 
ª∂y
.
¨_h 
 = 
ªq
->ar_hln;

365 
ª∂y
.
¨_∂n
 = 
ªq
->ar_pln;

366 
ª∂y
.
¨_›
 = 
ARPOP_REPLY
;

367 
	`mem˝y
(
ª∂y
.
¨_sha
, &
our_mac
, 6);

368 
	`mem˝y
(
ª∂y
.
¨_sù
, 
ªq
->
¨_tù
, 4);

369 
	`mem˝y
(
ª∂y
.
¨_tha
, 
ªq
->
¨_sha
, 6);

370 
	`mem˝y
(
ª∂y
.
¨_tù
, 
ªq
->
¨_sù
, 4);

372 
ëh_mac_addr_t
 
t
;

373 
	`mem˝y
(
t
.
addr
, 
ª∂y
.
¨_tha
, 6);

374 
	`£nd_pkt
(
t
, 
ETHERTYPE_ARP
, &
ª∂y
, (reply), 0, 0, 0, 0);

375 
	}
}

377 
	$√t_comm⁄_£nd_¨p_ªque°
(c⁄° 
ù_addr
 *
addr
){

378 
¨p_ëh_ùv4
 
ªq
 
_AL4
;

379 
ªq
.
¨_hrd
 = 
ARPHRD_ETHER
;

380 
ªq
.
¨_¥o
 = 
ETHERTYPE_IPV4
;

381 
ªq
.
¨_h 
 = (
ëh_mac_addr_t
);

382 
ªq
.
¨_∂n
 = (
ù_addr
);

383 
ªq
.
¨_›
 = 
ARPOP_REQUEST
;

384 
	`mem˝y
(
ªq
.
¨_sha
, 
	`ëhî√t_mac_addr
(), (
ëh_mac_addr_t
));

385 
	`mem˝y
(
ªq
.
¨_sù
, 
	`gë_ù_addr
(), (
ù_addr
));

386 
	`mem£t
(
ªq
.
¨_tha
, 0x00, (
ëh_mac_addr_t
));

387 
	`mem˝y
(
ªq
.
¨_tù
, 
addr
, (
ù_addr
));

390 
	`£nd_pkt
(
BCAST_MAC_ADDR
, 
ETHERTYPE_ARP
, &
ªq
, (req), 0, 0, 0, 0);

391 
	}
}

393 
	$£nd_gøtuôous_¨p
(){

394 
¨p_ëh_ùv4
 
ªq
 
_AL4
;

395 
ªq
.
¨_hrd
 = 
ARPHRD_ETHER
;

396 
ªq
.
¨_¥o
 = 
ETHERTYPE_IPV4
;

397 
ªq
.
¨_h 
 = (
ëh_mac_addr_t
);

398 
ªq
.
¨_∂n
 = (
ù_addr
);

399 
ªq
.
¨_›
 = 
ARPOP_REQUEST
;

400 
	`mem˝y
(
ªq
.
¨_sha
, 
	`ëhî√t_mac_addr
(), (
ëh_mac_addr_t
));

401 
	`mem˝y
(
ªq
.
¨_sù
, 
	`gë_ù_addr
(), (
ù_addr
));

402 
	`mem£t
(
ªq
.
¨_tha
, 0x00, (
ëh_mac_addr_t
));

403 
	`mem˝y
(
ªq
.
¨_tù
, 
	`gë_ù_addr
(), (
ù_addr
));

406 
	`£nd_pkt
(
BCAST_MAC_ADDR
, 
ETHERTYPE_ARP
, &
ªq
, (req), 0, 0, 0, 0);

407 
	}
}

410 
	$h™dÀ_¨p_∑ckë
(
¨p_ëh_ùv4
 *
p
, 
size_t
 
size
)

412 i‡(
size
 < (
¨p_ëh_ùv4
)){

413 
	`¥ötf
("\nh™dÀ_¨p: weúd sizê%d\n", ()
size
);

418 
	`¥ötf
("¨_hrd = %d\n", 
p
->
¨_hrd
);

419 
	`¥ötf
("¨_¥ÿ%d\n", 
p
->
¨_¥o
);

420 
	`¥ötf
("¨_h  = %d\n", 
p
->
¨_h 
);

421 
	`¥ötf
("¨_∂¿%d\n", 
p
->
¨_∂n
);

422 
	`¥ötf
("¨_› = %d\n", 
p
->
¨_›
);

423 
	`¥ötf
("¨_sh®"); 
	`¥öt_mac_addr
(
p
->
¨_sha
); 
	`√wlöe
();

424 
	`¥ötf
("¨_sù = "); 
	`¥öt_ù_addr
 (
p
->
¨_sù
); 
	`√wlöe
();

425 
	`¥ötf
("¨_th®"); 
	`¥öt_mac_addr
(
p
->
¨_tha
); 
	`√wlöe
();

426 
	`¥ötf
("¨_tù = "); 
	`¥öt_ù_addr
 (
p
->
¨_tù
); 
	`√wlöe
();

429 i‡(
p
->
¨_hrd
 !
ARPHRD_ETHER


430 || 
p
->
¨_¥o
 !
ETHERTYPE_IPV4


431 || 
p
->
¨_h 
 != 6

432 || 
p
->
¨_∂n
 != 4)

435 i‡(
p
->
¨_›
 =
ARPOP_REPLY
){

436 
ù_addr
 ip_addr;

437 
	`mem˝y
(&
ù_addr
, 
p
->
¨_sù
, (ip_addr));

438 
ëh_mac_addr_t
 
mac_addr
;

439 
	`mem˝y
(&
mac_addr
, 
p
->
¨_sha
, (mac_addr));

440 
	`¨p_ˇche_upd©e
(&
ù_addr
, &
mac_addr
);

443 i‡(
p
->
¨_›
 !
ARPOP_REQUEST
)

446 
ù_addr
 
sù
;

447 
ù_addr
 
tù
;

449 
sù
.
addr
 = 
	`gë_öt32
(
p
->
¨_sù
);

450 
tù
.
addr
 = 
	`gë_öt32
(
p
->
¨_tù
);

452 i‡(
	`memcmp
(&
tù
, &
_loˇl_ù_addr
, (_local_ip_addr)) == 0){

453 
	`£nd_¨p_ª∂y
(
p
, 
_loˇl_mac_addr
);

455 
	}
}

458 
	$h™dÀ_ëh_∑ckë
(
uöt32_t
 *
p
, 
size_t
 
∆öes
)

460 
size_t
 
bcou¡
 = 0;

461 i‡(
debug
Ë
	`¥ötf
("===> %d\n", ()
bcou¡
++);

462 i‡(
debug
Ë
	`¥öt_buf„r
(
p
, 
∆öes
);

464 
∑dded_ëh_hdr_t
 *
ëh_hdr
 = (∑dded_ëh_hdr_à*)
p
;

466 i‡(
ëh_hdr
->
ëhîty≥
 =
ETHERTYPE_ARP
){

467 
¨p_ëh_ùv4
 *
¨p
 = (¨p_ëh_ùv4 *)(
p
 + 4);

468 
	`h™dÀ_¨p_∑ckë
(
¨p
, 
∆öes
*(
uöt32_t
) - 14);

470 i‡(
ëh_hdr
->
ëhîty≥
 =
ETHERTYPE_IPV4
){

471 
ù_hdr
 *
ù
 = (ù_hd∏*)(
p
 + 4);

472 i‡(
	`IPH_V
(
ù
Ë!4 || 
	`IPH_HL
(ip) != 5)

475 i‡(
	`IPH_OFFSET
(
ù
Ë& (
IP_MF
 | 
IP_OFFMASK
))

479 
boﬁ
 
is_bˇ°
 = 
	`memcmp
(&
ëh_hdr
->
d°
, &
BCAST_MAC_ADDR
, (BCAST_MAC_ADDR)) == 0;

480 
boﬁ
 
is_my_ù
 = 
	`memcmp
(&
ù
->
de°
, &
_loˇl_ù_addr
, (_local_ip_addr)) == 0;

481 i‡(!
is_bˇ°
 && !
is_my_ù
) ;

483 
	`¨p_ˇche_upd©e
(&
ù
->
§c
, (
ëh_mac_addr_t
 *)(((*)
p
)+8));

485 
¥Ÿocﬁ
 = 
	`IPH_PROTO
(
ù
);

486 
Àn
 = 
	`IPH_LEN
(
ù
Ë- 
IP_HLEN
;

488 
¥Ÿocﬁ
){

489 
IP_PROTO_UDP
:

490 
	`h™dÀ_udp_∑ckë
(
ù
->
§c
, ip->
de°
, (
udp_hdr
 *)(((*)ùË+ 
IP_HLEN
), 
Àn
);

493 
IP_PROTO_ICMP
:

494 
	`h™dÀ_icmp_∑ckë
(
ù
->
§c
, ip->
de°
, (
icmp_echo_hdr
 *)(((*)ùË+ 
IP_HLEN
), 
Àn
);

503 
	}
}

	@firmware/usrp2/lib/net_common.h

17 #i‚de‡
INCLUDED_NET_COMMON_H


18 
	#INCLUDED_NET_COMMON_H


	)

20 
	~<°döt.h
>

21 
	~<°ddef.h
>

22 
	~<√t/sockë_addªss.h
>

23 
	~<√t/ëh_mac_addr.h
>

34 
£tup_‰amî
(

35 
ëh_mac_addr_t
 
ëh_d°
,

36 
ëh_mac_addr_t
 
ëh_§c
,

37 
sockë_addªss
 
sock_d°
,

38 
sockë_addªss
 
sock_§c
,

39 
size_t
 
which


42 (*
	tudp_ª˚ivî_t
)(
	tsockë_addªss
 
	t§c
, sockë_addªs†
	td°
,

43 *
	t∑ylﬂd
, 
	t∑ylﬂd_Àn
);

45 
	`öô_udp_li°íîs
();

47 
	`ªgi°î_addrs
(c⁄° 
ëh_mac_addr_t
 *
mac_addr
, c⁄° 
ù_addr
 *ip_addr);

49 
	`ªgi°î_udp_li°íî
(
p‹t
, 
udp_ª˚ivî_t
 
rcvr
);

51 
	`£nd_udp_pkt
(
§c_p‹t
, 
sockë_addªss
 
d°
,

52 c⁄° *
buf
, 
size_t
 
Àn
);

54 
	`h™dÀ_ëh_∑ckë
(
uöt32_t
 *
p
, 
size_t
 
∆öes
);

56 
	`£nd_gøtuôous_¨p
();

59 
	`√t_comm⁄_£nd_¨p_ªque°
(c⁄° 
ù_addr
 *
addr
);

	@firmware/usrp2/lib/nonstdio.c

19 
	~<n⁄°dio.h
>

21 c⁄° 
	ghex
[16] = "0123456789ABCDEF";

25 
	$puthex4
(
x
)

27 
	`putch¨
(
hex
[
x
 & 0xf]);

28 
	}
}

32 
	$puthex8
(
x
)

34 
	`putch¨
(
hex
[(
x
 >> 4) & 0xf]);

35 
	`putch¨
(
hex
[
x
 & 0xf]);

36 
	}
}

40 
	$puthex16
(
x
)

42 
	`puthex8
(
x
 >> 8);

43 
	`puthex8
(
x
);

44 
	}
}

48 
	$puthex32
(
x
)

50 
	`puthex16
(
x
 >> 16);

51 
	`puthex16
(
x
);

52 
	}
}

55 
	$puthex4_∆
(
x
)

57 
	`puthex4
(
x
);

58 
	`√wlöe
();

59 
	}
}

62 
	$puthex8_∆
(
x
)

64 
	`puthex8
(
x
);

65 
	`√wlöe
();

66 
	}
}

69 
	$puthex16_∆
(
x
)

71 
	`puthex16
(
x
);

72 
	`√wlöe
();

73 
	}
}

76 
	$puthex32_∆
(
x
)

78 
	`puthex32
(
x
);

79 
	`√wlöe
();

80 
	}
}

	@firmware/usrp2/lib/nonstdio.h

21 #i‚de‡
INCLUDED_NONSTDIO_H


22 
	#INCLUDED_NONSTDIO_H


	)

24 
	~<°dio.h
>

25 
	~<°döt.h
>

26 
	~<°ddef.h
>

28 
put°r
(c⁄° *
s
);

29 
puthex4
(
x
);

30 
puthex8
(
x
);

31 
puthex16
(
x
);

32 
puthex32
(
x
);

33 
puthex4_∆
(
x
);

34 
puthex8_∆
(
x
);

35 
puthex16_∆
(
x
);

36 
puthex32_∆
(
x
);

37 
	#puthex
 
puthex32


	)

38 
	#puthex_∆
 
puthex32_∆


	)

39 
√wlöe
();

41 
¥öt_mac_addr
(c⁄° *
addr
);

43 
¥öt_ù_addr
(c⁄° *
addr
);

45 
¥öt_buf„r
(
uöt32_t
 *
buf
, 
size_t
 
n
);

	@firmware/usrp2/lib/pic.c

19 
	~"pic.h
"

20 
	~"hÆ_io.h
"

21 
	~"mem‹y_m≠.h
"

24 
	#NVECTORS
 8

	)

29 
úq_h™dÀr_t
 
	gpic_ve˘‹
[
NVECTORS
];

32 
	$pic_öô
()

36 
pic_ªgs
->
mask
 = ~0;

37 
pic_ªgs
->
edge_íabÀ
 = 
PIC_ONETIME_INT
 | 
PIC_UNDERRUN_INT
 | 
PIC_OVERRUN_INT
 | 
PIC_PPS_INT
;

38 
pic_ªgs
->
pﬁ¨ôy
 = ~0 & ~
PIC_PHY_INT
;

39 
pic_ªgs
->
≥ndög
 = ~0;

41 
i
 = 0; i < 
NVECTORS
; i++){

42 
pic_ve˘‹
[
i
] = 
pic_n›_h™dÀr
;

44 
	}
}

54 
	$pic_öãºu±_h™dÀr
()

57 
live
 = 
pic_ªgs
->
≥ndög
 & ~pic_ªgs->
mask
;

63 
i
;

64 
mask
;

65 
i
=0, 
mask
=1; i < 
NVECTORS
; i++, mask <<= 1){

66 i‡(
mask
 & 
live
){

68 (*
pic_ve˘‹
[
i
])(i);

69 
pic_ªgs
->
≥ndög
 = 
mask
;

73 
	}
}

76 
	$pic_ªgi°î_h™dÀr
(
úq
, 
úq_h™dÀr_t
 
h™dÀr
)

78 i‡(
úq
 >
NVECTORS
)

80 
pic_ve˘‹
[
úq
] = 
h™dÀr
;

82 
pic_ªgs
->
mask
 &~
	`IRQ_TO_MASK
(
úq
);

83 
	}
}

86 
	$pic_n›_h™dÀr
(
úq
)

89 
	}
}

	@firmware/usrp2/lib/pic.h

19 #i‚de‡
INCLUDED_PIC_H


20 
	#INCLUDED_PIC_H


	)

22 (*
	túq_h™dÀr_t
)(
	túq
);

24 
	`pic_öô
();

25 
	`pic_ªgi°î_h™dÀr
(
úq
, 
úq_h™dÀr_t
 
h™dÀr
);

27 
	`pic_n›_h™dÀr
(
úq
);

30 
	`pic_dißbÀ_öãºu±s
();

31 
	`pic_íabÀ_öãºu±s
();

32 
	`pic_ª°‹e_öãºu±s
(
¥ev_°©us
);

34 
	`pic_öãºu±_h™dÀr
();

	@firmware/usrp2/lib/pkt_ctrl.c

18 
	~"pkt_˘æ.h
"

19 
	~"mem‹y_m≠.h
"

20 
	~<n⁄°dio.h
>

23 
	#CPU_STAT_RD_DONE
 (1 << 0)

	)

24 
	#CPU_STAT_RD_EROR
 (1 << 1)

	)

25 
	#CPU_STAT_RD_IDLE
 (1 << 2)

	)

28 
	#CPU_STAT_WR_DONE
 (1 << 4)

	)

29 
	#CPU_STAT_WR_EROR
 (1 << 5)

	)

30 
	#CPU_STAT_WR_IDLE
 (1 << 6)

	)

33 
	#CPU_CTRL_RD_CLEAR
 (1 << 0)

	)

34 
	#CPU_CTRL_RD_START
 (1 << 1)

	)

37 
	#CPU_CTRL_WR_CLEAR
 (1 << 2)

	)

38 
	#CPU_CTRL_WR_START
 (1 << 3)

	)

40 
	$pkt_˘æ_¥ogøm_ö•e˘‹
(

41 c⁄° 
ù_addr
 *ù_addr, 
uöt16_t
 
d©a_p‹t


43 
rouãr_˘æ
->
ù_addr
 = ip_addr->
addr
;

44 
rouãr_˘æ
->
d©a_p‹ts
 = 
d©a_p‹t
;

45 
	}
}

47 
	$pkt_˘æ_£t_routög_mode
(
pkt_˘æ_routög_mode_t
 
mode
){

50 
	`pkt_˘æ_ªÀa£_öcomög_buf„r
();

53 
rouãr_˘æ
->
mode_˘æ
 = 
mode
;

54 
	}
}

56 
ölöe
 
	$˝u_°©_waô_f‹
(
bm
){

57 (
rouãr_°©us
->
°©us
 & 
bm
) == 0){

60 
	}
}

62 *
	$pkt_˘æ_˛aim_öcomög_buf„r
(
size_t
 *
num_löes
){

63 
uöt32_t
 
°©us
 = 
rouãr_°©us
->status;

66 i‡(
°©us
 & 
CPU_STAT_RD_DONE
){

67 *
num_löes
 = (
rouãr_°©us
->
°©us
 >> 16) & 0xffff;

68  ((
uöt32_t
 *Ë
ROUTER_RAM_BASE
);

72 i‡(
°©us
 & 
CPU_STAT_RD_EROR
){

73 
	`put°r
("E");

74 
	`pkt_˘æ_ªÀa£_öcomög_buf„r
();

78  
NULL
;

79 
	}
}

81 
	$pkt_˘æ_ªÀa£_öcomög_buf„r
(){

83 
rouãr_˘æ
->
iÁ˚_˘æ
 = 
CPU_CTRL_RD_CLEAR
;

84 
	`˝u_°©_waô_f‹
(
CPU_STAT_RD_IDLE
);

85 
rouãr_˘æ
->
iÁ˚_˘æ
 = 
CPU_CTRL_RD_START
;

86 
	}
}

88 *
	$pkt_˘æ_˛aim_outgoög_buf„r
(){

90 
	`˝u_°©_waô_f‹
(
CPU_STAT_WR_IDLE
);

91  ((
uöt32_t
 *Ë
ROUTER_RAM_BASE
);

92 
	}
}

94 
	$pkt_˘æ_commô_outgoög_buf„r
(
size_t
 
num_löes
){

96 
rouãr_˘æ
->
iÁ˚_˘æ
 = ((
num_löes
 & 0xffffË<< 16Ë| 
CPU_CTRL_WR_START
;

98 
	`˝u_°©_waô_f‹
(
CPU_STAT_WR_DONE
);

99 
rouãr_˘æ
->
iÁ˚_˘æ
 = 
CPU_CTRL_WR_CLEAR
;

100 
	}
}

	@firmware/usrp2/lib/pkt_ctrl.h

18 #i‚de‡
INCLUDED_PKT_CTRL_H


19 
	#INCLUDED_PKT_CTRL_H


	)

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<lwù/ù_addr.h
>

27 
	mPKT_CTRL_ROUTING_MODE_SLAVE
 = 0,

28 
	mPKT_CTRL_ROUTING_MODE_MASTER
 = 1

29 } 
	tpkt_˘æ_routög_mode_t
;

32 
pkt_˘æ_¥ogøm_ö•e˘‹
(

33 c⁄° 
ù_addr
 *ù_addr, 
uöt16_t
 
d©a_p‹t


37 
pkt_˘æ_£t_routög_mode
(
pkt_˘æ_routög_mode_t
 
mode
);

44 *
pkt_˘æ_˛aim_öcomög_buf„r
(
size_t
 *
num_löes
);

49 
pkt_˘æ_ªÀa£_öcomög_buf„r
();

55 *
pkt_˘æ_˛aim_outgoög_buf„r
();

61 
pkt_˘æ_commô_outgoög_buf„r
(
size_t
 
num_löes
);

	@firmware/usrp2/lib/print_addrs.c

18 
	~"n⁄°dio.h
"

21 
	$¥öt_mac_addr
(c⁄° *
addr
)

23 
uöt8_t
 *
p
 = (uöt8_à*)
addr
;

24 
size_t
 
i
 = 0; i < 6; i++){

25 if(
i
Ë
	`putch¨
(':');

26 
	`puthex8
(
p
[
i
]);

28 
	}
}

30 
	$¥öt_ù_addr
(c⁄° *
addr
){

31 
uöt8_t
 *
p
 = (uöt8_à*)
addr
;

32 
	`¥ötf
("%d.%d.%d.%d", 
p
[0],Ö[1],Ö[2],Ö[3]);

33 
	}
}

	@firmware/usrp2/lib/print_buffer.c

18 
	~<n⁄°dio.h
>

21 
	$¥öt_buf„r
(
uöt32_t
 *
buf
, 
size_t
 
n
)

23 
size_t
 
i
;

24 
i
 = 0; i < 
n
; i++){

25 i‡(
i
 % 4 == 0)

26 
	`puthex16
(
i
 * 4);

28 
	`putch¨
(' ');

29 
	`puthex32
(
buf
[
i
]);

30 i‡(
i
 % 4 == 3)

31 
	`√wlöe
();

34 
	`√wlöe
();

35 
	}
}

	@firmware/usrp2/lib/print_rmon_regs.c

19 #ifde‡
HAVE_CONFIG_H


20 
	~"c⁄fig.h
"

23 
	~"¥öt_rm⁄_ªgs.h
"

24 
	~"ëh_mac.h
"

25 
	~"n⁄°dio.h
"

28 
	$¥öt_rm⁄_ªgs
()

30 
i
;

31 
i
=0; i <= 0x10; i++){

32 
	`put°r
("RMON[0x");

33 
	`puthex8
(
i
);

34 
	`put°r
("] = ");

35 
	`¥ötf
("%d\n", 
	`ëh_mac_ªad_rm⁄
(
i
));

38 
i
=0x20; i <= 0x30; i++){

39 
	`put°r
("RMON[0x");

40 
	`puthex8
(
i
);

41 
	`put°r
("] = ");

42 
	`¥ötf
("%d\n", 
	`ëh_mac_ªad_rm⁄
(
i
));

44 
	}
}

	@firmware/usrp2/lib/print_rmon_regs.h

19 #i‚de‡
INCLUDED_PRINT_RMON_REGS_H


20 
	#INCLUDED_PRINT_RMON_REGS_H


	)

22 
¥öt_rm⁄_ªgs
();

	@firmware/usrp2/lib/printf.c

23 
	~<°d¨g.h
>

24 
	~<°dio.h
>

27 
	$_¥öä
(
u
, 
ba£
, 
issig√d
,

28 (*
emôãr
)(, *), *
pD©a
)

30 c⁄° *
_hex
 = "0123456789ABCDEF";

31 i‡(
issig√d
 && (()
u
 < 0)) {

32 (*
emôãr
)('-', 
pD©a
);

33 
u
 = ()-(()u);

35 i‡(
u
 >
ba£
)

36 
	`_¥öä
(
u
/
ba£
, ba£, 0, 
emôãr
, 
pD©a
);

37 (*
emôãr
)(
_hex
[
u
%
ba£
], 
pD©a
);

38 
	}
}

41 
	$_¥ötf
(c⁄° *
f‹m©
, (*
emôãr
)(, *),

42 *
pD©a
, 
va_li°
 
va
)

44 *
f‹m©
) {

45 i‡(*
f‹m©
 != '%')

46 (*
emôãr
)(*
f‹m©
, 
pD©a
);

48 *++
f‹m©
) {

53 
c
 = ()
	`va_¨g
(
va
, );

54 (*
emôãr
)(
c
, 
pD©a
);

59 
u
 = 
	`va_¨g
(
va
, );

60 
	`_¥öä
(
u
, 10, 0, 
emôãr
, 
pD©a
);

65 
u
 = 
	`va_¨g
(
va
, );

66 
	`_¥öä
(
u
, 10, 1, 
emôãr
, 
pD©a
);

72 
u
 = 
	`va_¨g
(
va
, );

73 
	`_¥öä
(
u
, 16, 0, 
emôãr
, 
pD©a
);

78 *
s
 = 
	`va_¨g
(
va
, *);

79 *
s
) {

80 (*
emôãr
)(*
s
, 
pD©a
);

81 
s
++;

87 
f‹m©
++;

89 
	}
}

92 
_ch¨_emôãr
(
c
, *
pD©a
 
__©åibuã__
((
unu£d
)))

94 
putch¨
(
c
);

98 
	$¥ötf
(c⁄° *
f‹m©
, ...)

100 
va_li°
 
va
;

101 
	`va_°¨t
(
va
, 
f‹m©
);

103 
	`_¥ötf
(
f‹m©
, 
_ch¨_emôãr
, 
NULL
, 
va
);

105 
	`va_íd
(
va
);

109 
	}
}

116 
	$_buf_emôãr
(
c
, *
pD©a
)

118 *((*((**)
pD©a
)))++ = 
c
;

119 
	}
}

121 
	$•rötf
(*
pI¡o
, c⁄° *
f‹m©
, ...)

123 
va_li°
 
va
;

124 
	`va_°¨t
(
va
, 
f‹m©
);

126 
	`_¥ötf
(
f‹m©
, 
_buf_emôãr
, &
pI¡o
, 
va
);

127 *
pI¡o
++ = '\0';

129 
	`va_íd
(
va
);

133 
	}
}

	@firmware/usrp2/lib/spi.c

19 
	~"•i.h
"

20 
	~"mem‹y_m≠.h
"

21 
	~"n⁄°dio.h
"

23 
	$•i_öô
()

25 
•i_c‹e
->
dividî
 = 10;

26 
	}
}

28 
	$•i_waô
()

30 (
ªadback_mux
->
úqs
 & 
SPI_READY_IRQ
) == 0){

33 
	}
}

35 
uöt32_t
 
	$•i_å™ß˘
(
boﬁ
 
ªadback
, 
¶ave
, 
uöt32_t
 
d©a
, 
Àngth
, uöt32_à
Êags
)

37 
uöt32_t
 
c⁄åﬁ_w‹d
 = 0;

38 
c⁄åﬁ_w‹d
 |(
¶ave
 << 
SPI_CORE_SLAVE_SELECT_SHIFT
);

39 
c⁄åﬁ_w‹d
 |(
Àngth
 << 
SPI_CORE_NUM_BITS_SHIFT
);

40 i‡((
Êags
 & 
SPI_PUSH_RISE
Ë!0Ë
c⁄åﬁ_w‹d
 |(1 << 
SPI_CORE_DATA_OUT_EDGE_SHIFT
);

41 i‡((
Êags
 & 
SPI_PUSH_FALL
Ë!0Ë
c⁄åﬁ_w‹d
 |(0 << 
SPI_CORE_DATA_OUT_EDGE_SHIFT
);

42 i‡((
Êags
 & 
SPI_LATCH_RISE
Ë!0Ë
c⁄åﬁ_w‹d
 |(1 << 
SPI_CORE_DATA_IN_EDGE_SHIFT
);

43 i‡((
Êags
 & 
SPI_LATCH_FALL
Ë!0Ë
c⁄åﬁ_w‹d
 |(0 << 
SPI_CORE_DATA_IN_EDGE_SHIFT
);

45 c⁄° 
uöt32_t
 
d©a_out
 = 
d©a
 << (32 - 
Àngth
);

47 
	`•i_waô
();

48 
•i_c‹e
->
c⁄åﬁ
 = 
c⁄åﬁ_w‹d
;

49 
•i_c‹e
->
d©a
 = 
d©a_out
;

51 i‡(!
ªadback
)  0;

53 
	`•i_waô
();

54  
ªadback_mux
->
•i
;

55 
	}
}

	@firmware/usrp2/lib/spi.h

19 #i‚de‡
INCLUDED_SPI_H


20 
	#INCLUDED_SPI_H


	)

22 
	~<°dboﬁ.h
>

23 
	~<°döt.h
>

28 
•i_öô
();

34 
•i_waô
();

36 
	#SPI_TXONLY
 
Ál£


37 
	#SPI_TXRX
 
åue


38 

	)

42 
	#SPI_PUSH_RISE
 (1 << 0)

43 
	#SPI_PUSH_FALL
 (1 << 1)

44 
	#SPI_LATCH_RISE
 (1 << 2)

45 
	#SPI_LATCH_FALL
 (1 << 3)

46 

	)

47 
uöt32_t
 
•i_å™ß˘
(
boﬁ
 
ªadback
, 
¶ave
, uöt32_à
d©a
, 
Àngth
, uöt32_à
Êags
);

	@firmware/usrp2/lib/stdint.h

19 #i‚de‡
INCLUDED_STDINT_H


20 
	#INCLUDED_STDINT_H


	)

22 sig√d 
	töt8_t
;

23 
	tuöt8_t
;

24 
	töt16_t
;

25 
	tuöt16_t
;

26 
	töt32_t
;

27 
	tuöt32_t
;

28 
	töt64_t
;

29 
	tuöt64_t
;

31 
	töçå_t
;

32 
	tuöçå_t
;

	@firmware/usrp2/lib/stdio.h

19 #i‚de‡
INCLUDED_STDIO_H


20 
	#INCLUDED_STDIO_H


	)

24 #i‚de‡
NULL


25 
	#NULL
 0

	)

28 #i‚de‡
EOF


29 
	#EOF
 (-1)

	)

32 
putch¨
(
c
);

33 
puts
(c⁄° *
s
);

34 
¥ötf
(c⁄° *
f‹m©
, ...);

36 
gëch¨
();

	@firmware/usrp2/lib/u2_init.c

18 
	~"u2_öô.h
"

19 
	~"mem‹y_m≠.h
"

20 
	~"•i.h
"

21 
	~"pic.h
"

22 
	~"hÆ_io.h
"

23 
	~"hÆ_u¨t.h
"

24 
	~"i2c.h
"

25 
	~"mdñay.h
"

26 
	~"˛ocks.h
"

27 
	~"u§p2/fw_comm⁄.h
"

28 
	~"n⁄°dio.h
"

34 
boﬁ


35 
	$u2_öô
()

37 
	`hÆ_dißbÀ_öts
();

38 
	`hÆ_io_öô
();

41 
	`•i_öô
();

44 
	`˛ocks_öô
();

46 
	`hÆ_u¨t_öô
();

49 
	`pic_öô
();

50 
	`i2c_öô
();

51 
	`hÆ_íabÀ_öts
();

54 #i‚de‡
BOOTLOADER


55 
	`hÆ_£t_Àd_§c
(0x0, 0x1f);

56 
	`hÆ_£t_Àds
(0x0, 0x1f); 
	`mdñay
(300);

57 
	`hÆ_£t_Àds
(
LED_E
, LED_E); 
	`mdñay
(300);

58 
	`hÆ_£t_Àds
(
LED_C
, LED_C); 
	`mdñay
(300);

59 
	`hÆ_£t_Àds
(
LED_A
, LED_A); 
	`mdñay
(300);

60 
i
 = 0; i < 3; i++){

61 c⁄° 
blöks
 = 
LED_E
 | 
LED_C
 | 
LED_A
;

62 
	`hÆ_£t_Àds
(0x0, 0x1f); 
	`mdñay
(100);

63 
	`hÆ_£t_Àds
(
blöks
, 0x1f); 
	`mdñay
(100);

66 
	`hÆ_£t_Àd_§c
(0x1‡& ~
LED_D
, 0x1f);

67 
	`hÆ_£t_Àds
(
LED_D
, 0x1f);

71 
º
, 
vv
;

72 
vv
 = 
	`ad9777_ªad_ªg
(0);

73 
	`¥ötf
("ad9777Ñeg[0] = 0x%x\n", 
vv
);

75 
º
 = 0x04;Ñr <= 0x0d;Ñr++){

76 
vv
 = 
	`ad9510_ªad_ªg
(
º
);

77 
	`¥ötf
("ad9510Ñeg[0x%x] = 0x%x\n", 
º
, 
vv
);

81 
ouçut_ªgs
->
£rdes_˘æ
 = (
SERDES_ENABLE
 | 
SERDES_RXEN
);

83  
åue
;

84 
	}
}

	@firmware/usrp2/lib/u2_init.h

18 #i‚de‡
INCLUDED_U2_INIT_H


19 
	#INCLUDED_U2_INIT_H


	)

21 
	~<°dboﬁ.h
>

26 
boﬁ
 
u2_öô
();

	@firmware/usrp2/lib/udp_fw_update.h

19 
	~"√t_comm⁄.h
"

21 
	#USRP2_UDP_UPDATE_PORT
 49154

	)

24 
	mUSRP2_FW_UPDATE_ID_WAT
 = ' ',

26 
	mUSRP2_FW_UPDATE_ID_OHAI_LOL
 = 'a',

27 
	mUSRP2_FW_UPDATE_ID_OHAI_OMG
 = 'A',

29 
	mUSRP2_FW_UPDATE_ID_WATS_TEH_FLASH_INFO_LOL
 = 'f',

30 
	mUSRP2_FW_UPDATE_ID_HERES_TEH_FLASH_INFO_OMG
 = 'F',

32 
	mUSRP2_FW_UPDATE_ID_ERASE_TEH_FLASHES_LOL
 = 'e',

33 
	mUSRP2_FW_UPDATE_ID_ERASING_TEH_FLASHES_OMG
 = 'E',

35 
	mUSRP2_FW_UPDATE_ID_R_U_DONE_ERASING_LOL
 = 'd',

36 
	mUSRP2_FW_UPDATE_ID_IM_DONE_ERASING_OMG
 = 'D',

37 
	mUSRP2_FW_UPDATE_ID_NOPE_NOT_DONE_ERASING_OMG
 = 'B',

39 
	mUSRP2_FW_UPDATE_ID_WRITE_TEH_FLASHES_LOL
 = 'w',

40 
	mUSRP2_FW_UPDATE_ID_WROTE_TEH_FLASHES_OMG
 = 'W',

42 
	mUSRP2_FW_UPDATE_ID_READ_TEH_FLASHES_LOL
 = 'r',

43 
	mUSRP2_FW_UPDATE_ID_KK_READ_TEH_FLASHES_OMG
 = 'R',

45 
	mUSRP2_FW_UPDATE_ID_RESET_MAH_COMPUTORZ_LOL
 = 's',

46 
	mUSRP2_FW_UPDATE_ID_RESETTIN_TEH_COMPUTORZ_OMG
 = 'S',

48 
	mUSRP2_FW_UPDATE_ID_I_CAN_HAS_HW_REV_LOL
 = 'v',

49 
	mUSRP2_FW_UPDATE_ID_HERES_TEH_HW_REV_OMG
 = 'V',

51 
	mUSRP2_FW_UPDATE_ID_KTHXBAI
 = '~'

53 } 
	tu§p2_fw_upd©e_id_t
;

56 
uöt32_t
 
	m¥Ÿo_vî
;

57 
uöt32_t
 
	mid
;

58 
uöt32_t
 
	m£q
;

60 
uöt32_t
 
	mù_addr
;

61 
uöt32_t
 
	mhw_ªv
;

63 
uöt32_t
 
	mÊash_addr
;

64 
uöt32_t
 
	mÀngth
;

65 
uöt8_t
 
	md©a
[256];

66 } 
	mÊash_¨gs
;

68 
uöt32_t
 
	m£˘‹_size_byãs
;

69 
uöt32_t
 
	mmem‹y_size_byãs
;

70 } 
	mÊash_öfo_¨gs
;

71 } 
	md©a
;

72 } 
	tu§p2_fw_upd©e_d©a_t
;

74 
h™dÀ_udp_fw_upd©e_∑ckë
(
sockë_addªss
 
§c
, sockë_addªs†
d°
,

75 *
∑ylﬂd
, 
∑ylﬂd_Àn
);

	@firmware/usrp2/lib/udp_uart.c

18 
	~"udp_u¨t.h
"

19 
	~"hÆ_u¨t.h
"

20 
	~"√t_comm⁄.h
"

21 
	~"compûî.h
"

22 
	~<°dboﬁ.h
>

27 
	#MAX_NUM_UARTS
 4

	)

28 #i‚de‡
UDP_UART_MASK


29 #îr‹ 
missög
 
deföôi⁄
 
UDP_UART_MASK
 
íabÀ
 
mask


31 c⁄° 
size_t
 
	gnum_idÀ_cyc_b4_Êush
 = 11;

36 
uöt16_t
 
	g_ba£_p‹t
;

39 
sockë_addªss
 
	md°
;

40 
_AL4
 
uöt8_t
 
	mbuf
[256];

41 
size_t
 
	mÀn
;

42 
size_t
 
	mcyc
;

43 } 
	tudp_u¨t_°©e_t
;

45 
udp_u¨t_°©e_t
 
	g_°©es
[
MAX_NUM_UARTS
];

50 
	$h™dÀ_u¨t_d©a_∑ckë
(

51 
sockë_addªss
 
§c
, sockë_addªs†
d°
,

52 *
∑ylﬂd
, 
∑ylﬂd_Àn


55 i‡(
∑ylﬂd
 =
NULL
){

56 c⁄° 
size_t
 
which
 = 
§c
.
p‹t
-
_ba£_p‹t
;

57 i‡(
which
 >
MAX_NUM_UARTS
) ;

58 
_°©es
[
which
].
d°
.
p‹t
 = 0;

63 c⁄° 
size_t
 
which
 = 
d°
.
p‹t
-
_ba£_p‹t
;

64 i‡(
which
 >
MAX_NUM_UARTS
) ;

65 
_°©es
[
which
].
d°
 = 
§c
;

66 
size_t
 
i
 = 0; i < 
∑ylﬂd_Àn
; i++){

67 
	`hÆ_u¨t_putc
((
hÆ_u¨t_«me_t
)
which
, ()
∑ylﬂd
[
i
]);

70 
	}
}

75 
	$udp_u¨t_öô
(c⁄° 
uöt16_t
 
ba£_p‹t
){

76 
_ba£_p‹t
 = 
ba£_p‹t
;

77 
size_t
 
i
 = 0; i < 
MAX_NUM_UARTS
; i++){

78 
_°©es
[
i
].
d°
.
p‹t
 = 0;

79 
_°©es
[
i
].
Àn
 = 0;

80 
_°©es
[
i
].
cyc
 = 0;

81 
	`ªgi°î_udp_li°íî
(
_ba£_p‹t
+
i
, 
h™dÀ_u¨t_d©a_∑ckë
);

83 
	}
}

88 
	$udp_u¨t_pﬁl
(){

89 
size_t
 
i
 = 0; i < 
MAX_NUM_UARTS
; i++){

90 i‡(((
UDP_UART_MASK
Ë& (1 << 
i
)) == 0) ;

92 
boﬁ
 
√wlöe
 = 
Ál£
;

93 
udp_u¨t_°©e_t
 *
°©e
 = &
_°©es
[
i
];

96 
size_t
 
j
 = 
°©e
->
Àn
; j < (
_°©es
[0].
buf
); j++){

97 
ªt
 = 
	`hÆ_u¨t_gëc_noblock
((
hÆ_u¨t_«me_t
)
i
);

98 i‡(
ªt
 == -1) ;

99 
ch
 = (Ë
ªt
;

100 i‡(
ch
 ='\n' || ch ='\r'Ë
√wlöe
 = 
åue
;

101 
°©e
->
buf
[
j
] = 
ch
;

102 
°©e
->
Àn
++;

103 
°©e
->
cyc
 = 0;

107 i‡(
°©e
->
Àn
 == 0) ;

110 i‡(
√wlöe
 || 
°©e
->
cyc
++ > 
num_idÀ_cyc_b4_Êush
){

111 i‡(
°©e
->
d°
.
p‹t
 !0Ë
	`£nd_udp_pkt
(
_ba£_p‹t
+
i
, sèã->d°, sèã->
buf
, sèã->
Àn
);

112 
°©e
->
Àn
 = 0;

113 
°©e
->
cyc
 = 0;

116 
	}
}

	@firmware/usrp2/lib/udp_uart.h

18 #i‚de‡
INCLUDED_UDP_UART_H


19 
	#INCLUDED_UDP_UART_H


	)

21 
	~<°döt.h
>

28 
udp_u¨t_öô
(c⁄° 
uöt16_t
 
ba£_p‹t
);

34 
udp_u¨t_pﬁl
();

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/api_lib.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_NETCONN


46 
	~"lwù/≠i.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/memp.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

55 
	~<°rög.h
>

67 
√tc⁄n
*

68 
	$√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

70 
√tc⁄n
 *
c⁄n
;

71 
≠i_msg
 
msg
;

73 
c⁄n
 = 
	`√tc⁄n_Æloc
(
t
, 
ˇŒback
);

74 i‡(
c⁄n
 !
NULL
 ) {

75 
msg
.
fun˘i⁄
 = 
do_√wc⁄n
;

76 
msg
.msg.msg.
n
.
¥Ÿo
 =Öroto;

77 
msg
.msg.
c⁄n
 = conn;

78 
	`TCPIP_APIMSG
(&
msg
);

80 i‡(
c⁄n
->
îr
 !
ERR_OK
) {

81 
	`LWIP_ASSERT
("‰ìög c⁄¿wôhouà‰ìögÖcb", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

82 
	`LWIP_ASSERT
("c⁄¿ha†nÿ›_com∂ëed", 
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
);

83 
	`LWIP_ASSERT
("c⁄¿ha†nÿªcvmbox", 
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
);

84 
	`LWIP_ASSERT
("c⁄n->ac˚±mbox shouldn'àexi°", 
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
);

85 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

86 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

87 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

88  
NULL
;

91  
c⁄n
;

92 
	}
}

102 
îr_t


103 
	$√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
)

105 
≠i_msg
 
msg
;

108 i‡(
c⁄n
 =
NULL
) {

109  
ERR_OK
;

112 
msg
.
fun˘i⁄
 = 
do_dñc⁄n
;

113 
msg
.msg.
c⁄n
 = conn;

114 
	`t˝ù_≠imsg
(&
msg
);

116 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

117 
	`√tc⁄n_‰ì
(
c⁄n
);

119  
ERR_OK
;

120 
	}
}

133 
îr_t


134 
	$√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
)

136 
≠i_msg
 
msg
;

138 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

139 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

140 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidÖ‹t", (
p‹t
 !
NULL
),  
ERR_ARG
;);

142 
msg
.
fun˘i⁄
 = 
do_gëaddr
;

143 
msg
.msg.
c⁄n
 = conn;

144 
msg
.msg.msg.
ad
.
ùaddr
 = 
addr
;

145 
msg
.msg.msg.
ad
.
p‹t
 =Öort;

146 
msg
.msg.msg.
ad
.
loˇl
 =Üocal;

147 
	`TCPIP_APIMSG
(&
msg
);

149  
c⁄n
->
îr
;

150 
	}
}

162 
îr_t


163 
	$√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

165 
≠i_msg
 
msg
;

167 
	`LWIP_ERROR
("√tc⁄n_böd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

169 
msg
.
fun˘i⁄
 = 
do_böd
;

170 
msg
.msg.
c⁄n
 = conn;

171 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

172 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

173 
	`TCPIP_APIMSG
(&
msg
);

174  
c⁄n
->
îr
;

175 
	}
}

185 
îr_t


186 
	$√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

188 
≠i_msg
 
msg
;

190 
	`LWIP_ERROR
("√tc⁄n_c⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

192 
msg
.
fun˘i⁄
 = 
do_c⁄√˘
;

193 
msg
.msg.
c⁄n
 = conn;

194 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

195 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

197 
	`t˝ù_≠imsg
(&
msg
);

198  
c⁄n
->
îr
;

199 
	}
}

207 
îr_t


208 
	$√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
)

210 
≠i_msg
 
msg
;

212 
	`LWIP_ERROR
("√tc⁄n_disc⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

214 
msg
.
fun˘i⁄
 = 
do_disc⁄√˘
;

215 
msg
.msg.
c⁄n
 = conn;

216 
	`TCPIP_APIMSG
(&
msg
);

217  
c⁄n
->
îr
;

218 
	}
}

228 
îr_t


229 
	$√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
)

231 
≠i_msg
 
msg
;

234 
	`LWIP_UNUSED_ARG
(
backlog
);

236 
	`LWIP_ERROR
("√tc⁄n_li°í: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

238 
msg
.
fun˘i⁄
 = 
do_li°í
;

239 
msg
.msg.
c⁄n
 = conn;

240 #i‡
TCP_LISTEN_BACKLOG


241 
msg
.msg.msg.
lb
.
backlog
 = backlog;

243 
	`TCPIP_APIMSG
(&
msg
);

244  
c⁄n
->
îr
;

245 
	}
}

253 
√tc⁄n
 *

254 
	$√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
)

256 
√tc⁄n
 *
√wc⁄n
;

258 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

259 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidác˚±mbox", (
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
),  
NULL
;);

261 #i‡
LWIP_SO_RCVTIMEO


262 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, c⁄n->
ªcv_timeout
Ë=
SYS_ARCH_TIMEOUT
) {

263 
√wc⁄n
 = 
NULL
;

266 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, 0);

270 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

272 #i‡
TCP_LISTEN_BACKLOG


273 i‡(
√wc⁄n
 !
NULL
) {

275 
≠i_msg
 
msg
;

276 
msg
.
fun˘i⁄
 = 
do_ªcv
;

277 
msg
.msg.
c⁄n
 = conn;

278 
	`TCPIP_APIMSG
(&
msg
);

283  
√wc⁄n
;

284 
	}
}

292 
√tbuf
 *

293 
	$√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
)

295 
≠i_msg
 
msg
;

296 
√tbuf
 *
buf
 = 
NULL
;

297 
pbuf
 *
p
;

298 
u16_t
 
Àn
;

300 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

302 i‡(
c⁄n
->
ªcvmbox
 =
SYS_MBOX_NULL
) {

305 
c⁄n
->
îr
 = 
ERR_CONN
;

306  
NULL
;

309 i‡(
	`ERR_IS_FATAL
(
c⁄n
->
îr
)) {

310  
NULL
;

313 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

314 #i‡
LWIP_TCP


315 i‡(
c⁄n
->
°©e
 =
NETCONN_LISTEN
) {

317 
c⁄n
->
îr
 = 
ERR_CONN
;

318  
NULL
;

321 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

323 i‡(
buf
 =
NULL
) {

324 
c⁄n
->
îr
 = 
ERR_MEM
;

325  
NULL
;

328 #i‡
LWIP_SO_RCVTIMEO


329 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

330 
c⁄n
->
îr
 = 
ERR_TIMEOUT
;

331 
p
 = 
NULL
;

334 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, 0);

337 i‡(
p
 !
NULL
) {

338 
Àn
 = 
p
->
tŸ_Àn
;

339 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

341 
Àn
 = 0;

345 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
Àn
);

348 i‡(
p
 =
NULL
) {

349 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

351 i‡(
c⁄n
->
îr
 =
ERR_OK
) {

352 
c⁄n
->
îr
 = 
ERR_CLSD
;

354  
NULL
;

357 
buf
->
p
 =Ö;

358 
buf
->
±r
 = 
p
;

359 
buf
->
p‹t
 = 0;

360 
buf
->
addr
 = 
NULL
;

363 
msg
.
fun˘i⁄
 = 
do_ªcv
;

364 
msg
.msg.
c⁄n
 = conn;

365 i‡(
buf
 !
NULL
) {

366 
msg
.msg.msg.
r
.
Àn
 = 
buf
->
p
->
tŸ_Àn
;

368 
msg
.msg.msg.
r
.
Àn
 = 1;

370 
	`TCPIP_APIMSG
(&
msg
);

373 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

374 #i‡
LWIP_SO_RCVTIMEO


375 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

376 
buf
 = 
NULL
;

379 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, 0);

381 i‡(
buf
!=
NULL
) {

382 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
buf
->
p
->
tŸ_Àn
);

384 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
buf
->
p
->
tŸ_Àn
);

389 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_ªcv:Ñe˚ived %∞”º %d)\n", (*)
buf
, 
c⁄n
->
îr
));

391  
buf
;

392 
	}
}

404 
îr_t


405 
	$√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

407 i‡(
buf
 !
NULL
) {

408 
buf
->
addr
 =áddr;

409 
buf
->
p‹t
 =Öort;

410  
	`√tc⁄n_£nd
(
c⁄n
, 
buf
);

412  
ERR_VAL
;

413 
	}
}

422 
îr_t


423 
	$√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
)

425 
≠i_msg
 
msg
;

427 
	`LWIP_ERROR
("√tc⁄n_£nd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

429 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_£nd: sídög %"
U16_F
" byãs\n", 
buf
->
p
->
tŸ_Àn
));

430 
msg
.
fun˘i⁄
 = 
do_£nd
;

431 
msg
.msg.
c⁄n
 = conn;

432 
msg
.msg.msg.
b
 = 
buf
;

433 
	`TCPIP_APIMSG
(&
msg
);

434  
c⁄n
->
îr
;

435 
	}
}

448 
îr_t


449 
	$√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
, 
u8_t
 
≠iÊags
)

451 
≠i_msg
 
msg
;

453 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

454 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n->ty≥", (
c⁄n
->
ty≥
 =
NETCONN_TCP
),  
ERR_VAL
;);

456 
msg
.
fun˘i⁄
 = 
do_wrôe
;

457 
msg
.msg.
c⁄n
 = conn;

458 
msg
.msg.msg.
w
.
d©≠å
 = dataptr;

459 
msg
.msg.msg.
w
.
≠iÊags
 =ápiflags;

460 
msg
.msg.msg.
w
.
Àn
 = 
size
;

464 
	`TCPIP_APIMSG
(&
msg
);

465  
c⁄n
->
îr
;

466 
	}
}

474 
îr_t


475 
	$√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
)

477 
≠i_msg
 
msg
;

479 
	`LWIP_ERROR
("√tc⁄n_˛o£: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

481 
msg
.
fun˘i⁄
 = 
do_˛o£
;

482 
msg
.msg.
c⁄n
 = conn;

483 
	`t˝ù_≠imsg
(&
msg
);

484  
c⁄n
->
îr
;

485 
	}
}

487 #i‡
LWIP_IGMP


498 
îr_t


499 
	$√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
,

500 
ù_addr
 *
mu…üddr
,

501 
ù_addr
 *
öãrÁ˚
,

502 
√tc⁄n_igmp
 
joö_‹_Àave
)

504 
≠i_msg
 
msg
;

506 
	`LWIP_ERROR
("√tc⁄n_joö_Àave_group: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

508 
msg
.
fun˘i⁄
 = 
do_joö_Àave_group
;

509 
msg
.msg.
c⁄n
 = conn;

510 
msg
.msg.msg.
jl
.
mu…üddr
 = multiaddr;

511 
msg
.msg.msg.
jl
.
öãrÁ˚
 = interface;

512 
msg
.msg.msg.
jl
.
joö_‹_Àave
 = join_or_leave;

513 
	`TCPIP_APIMSG
(&
msg
);

514  
c⁄n
->
îr
;

515 
	}
}

518 #i‡
LWIP_DNS


529 
îr_t


530 
	$√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
)

532 
dns_≠i_msg
 
msg
;

533 
îr_t
 
îr
;

534 
sys_£m_t
 
£m
;

536 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidÇame", (
«me
 !
NULL
),  
ERR_ARG
;);

537 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

539 
£m
 = 
	`sys_£m_√w
(0);

540 i‡(
£m
 =
SYS_SEM_NULL
) {

541  
ERR_MEM
;

544 
msg
.
«me
 =Çame;

545 
msg
.
addr
 =áddr;

546 
msg
.
îr
 = &err;

547 
msg
.
£m
 = sem;

549 
	`t˝ù_ˇŒback
(
do_gëho°by«me
, &
msg
);

550 
	`sys_£m_waô
(
£m
);

551 
	`sys_£m_‰ì
(
£m
);

553  
îr
;

554 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/api_msg.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/≠i_msg.h
"

45 
	~"lwù/ù.h
"

46 
	~"lwù/udp.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/øw.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/igmp.h
"

53 
	~"lwù/dns.h
"

55 
	~<°rög.h
>

58 #i‡
LWIP_TCP


59 
îr_t
 
do_wrôem‹e
(
√tc⁄n
 *
c⁄n
);

60 
do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
);

63 #i‡
LWIP_RAW


71 
u8_t


72 
	$ªcv_øw
(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

73 
ù_addr
 *
addr
)

75 
pbuf
 *
q
;

76 
√tbuf
 *
buf
;

77 
√tc⁄n
 *
c⁄n
;

78 #i‡
LWIP_SO_RCVBUF


79 
ªcv_avaû
;

82 
	`LWIP_UNUSED_ARG
(
addr
);

83 
c⁄n
 = 
¨g
;

85 #i‡
LWIP_SO_RCVBUF


86 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

87 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
) &&

88 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë<
c⁄n
->
ªcv_bufsize
)) {

90 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
)) {

93 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

94 if(
q
 !
NULL
) {

95 i‡(
	`pbuf_c›y
(
q
, 
p
Ë!
ERR_OK
) {

96 
	`pbuf_‰ì
(
q
);

97 
q
 = 
NULL
;

101 if(
q
 !
NULL
) {

102 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

103 i‡(
buf
 =
NULL
) {

104 
	`pbuf_‰ì
(
q
);

108 
buf
->
p
 = 
q
;

109 
buf
->
±r
 = 
q
;

110 
buf
->
addr
 = &(((
ù_hdr
*)(
q
->
∑ylﬂd
))->
§c
);

111 
buf
->
p‹t
 = 
pcb
->
¥Ÿocﬁ
;

113 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

114 
	`√tbuf_dñëe
(
buf
);

117 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
q
->
tŸ_Àn
);

119 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
q
->
tŸ_Àn
);

125 
	}
}

128 #i‡
LWIP_UDP


136 
	$ªcv_udp
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

137 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

139 
√tbuf
 *
buf
;

140 
√tc⁄n
 *
c⁄n
;

141 #i‡
LWIP_SO_RCVBUF


142 
ªcv_avaû
;

145 
	`LWIP_UNUSED_ARG
(
pcb
);

146 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê®pcbárgumít", 
pcb
 !
NULL
);

147 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê™árgumít", 
¨g
 !
NULL
);

148 
c⁄n
 = 
¨g
;

149 
	`LWIP_ASSERT
("ªcv_udp:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
udp
 ==Öcb);

151 #i‡
LWIP_SO_RCVBUF


152 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

153 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
) ||

154 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
)) {

156 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

158 
	`pbuf_‰ì
(
p
);

162 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

163 i‡(
buf
 =
NULL
) {

164 
	`pbuf_‰ì
(
p
);

167 
buf
->
p
 =Ö;

168 
buf
->
±r
 = 
p
;

169 
buf
->
addr
 =áddr;

170 
buf
->
p‹t
 =Öort;

173 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

174 
	`√tbuf_dñëe
(
buf
);

177 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
p
->
tŸ_Àn
);

179 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
p
->
tŸ_Àn
);

181 
	}
}

184 #i‡
LWIP_TCP


191 
îr_t


192 
	$ªcv_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

194 
√tc⁄n
 *
c⁄n
;

195 
u16_t
 
Àn
;

197 
	`LWIP_UNUSED_ARG
(
pcb
);

198 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê®pcbárgumít", 
pcb
 !
NULL
);

199 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê™árgumít", 
¨g
 !
NULL
);

200 
c⁄n
 = 
¨g
;

201 
	`LWIP_ASSERT
("ªcv_t˝:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
t˝
 ==Öcb);

203 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

204  
ERR_VAL
;

207 
c⁄n
->
îr
 =Érr;

208 i‡(
p
 !
NULL
) {

209 
Àn
 = 
p
->
tŸ_Àn
;

210 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

212 
Àn
 = 0;

215 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
p
Ë!
ERR_OK
) {

216  
ERR_MEM
;

219 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

222  
ERR_OK
;

223 
	}
}

236 
îr_t


237 
	$pﬁl_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
)

239 
√tc⁄n
 *
c⁄n
 = 
¨g
;

241 
	`LWIP_UNUSED_ARG
(
pcb
);

242 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

244 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

245 
	`do_wrôem‹e
(
c⁄n
);

246 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

247 
	`do_˛o£_öã∫Æ
(
c⁄n
);

250  
ERR_OK
;

251 
	}
}

260 
îr_t


261 
	$£¡_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

263 
√tc⁄n
 *
c⁄n
 = 
¨g
;

265 
	`LWIP_UNUSED_ARG
(
pcb
);

266 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

268 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

269 
	`LWIP_ASSERT
("c⁄n->pcb.t˝ !NULL", 
c⁄n
->
pcb
.
t˝
 !
NULL
);

270 
	`do_wrôem‹e
(
c⁄n
);

271 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

272 
	`do_˛o£_öã∫Æ
(
c⁄n
);

275 i‡(
c⁄n
) {

276 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
)) {

277 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 
Àn
);

281  
ERR_OK
;

282 
	}
}

292 
	$îr_t˝
(*
¨g
, 
îr_t
 
îr
)

294 
√tc⁄n
 *
c⁄n
;

296 
c⁄n
 = 
¨g
;

297 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

299 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

301 
c⁄n
->
îr
 =Érr;

302 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

304 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

305 
	`sys_mbox_po°
(
c⁄n
->
ªcvmbox
, 
NULL
);

307 i‡(
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
 && c⁄n->
°©e
 =
NETCONN_CONNECT
) {

308 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

309 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

311 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

313 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

314 
	`sys_mbox_po°
(
c⁄n
->
ac˚±mbox
, 
NULL
);

316 i‡((
c⁄n
->
°©e
 =
NETCONN_WRITE
Ë|| (c⁄n->°©ê=
NETCONN_CLOSE
)) {

319 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

321 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

323 
	}
}

332 
	$£tup_t˝
(
√tc⁄n
 *
c⁄n
)

334 
t˝_pcb
 *
pcb
;

336 
pcb
 = 
c⁄n
->pcb.
t˝
;

337 
	`t˝_¨g
(
pcb
, 
c⁄n
);

338 
	`t˝_ªcv
(
pcb
, 
ªcv_t˝
);

339 
	`t˝_£¡
(
pcb
, 
£¡_t˝
);

340 
	`t˝_pﬁl
(
pcb
, 
pﬁl_t˝
, 4);

341 
	`t˝_îr
(
pcb
, 
îr_t˝
);

342 
	}
}

350 
îr_t


351 
	$ac˚±_fun˘i⁄
(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

353 
√tc⁄n
 *
√wc⁄n
;

354 
√tc⁄n
 *
c⁄n
;

356 #i‡
API_MSG_DEBUG


357 #i‡
TCP_DEBUG


358 
	`t˝_debug_¥öt_°©e
(
√wpcb
->
°©e
);

361 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

363 
	`LWIP_ERROR
("accept_function: invalid conn->acceptmbox",

364 
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
,  
ERR_VAL
;);

368 
√wc⁄n
 = 
	`√tc⁄n_Æloc
(
c⁄n
->
ty≥
, c⁄n->
ˇŒback
);

369 i‡(
√wc⁄n
 =
NULL
) {

370  
ERR_MEM
;

372 
√wc⁄n
->
pcb
.
t˝
 = 
√wpcb
;

373 
	`£tup_t˝
(
√wc⁄n
);

374 
√wc⁄n
->
îr
 =Érr;

376 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ac˚±mbox
, 
√wc⁄n
Ë!
ERR_OK
) {

379 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

380 
	`√tc⁄n_‰ì
(
√wc⁄n
);

381  
ERR_MEM
;

384 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

387  
ERR_OK
;

388 
	}
}

398 
îr_t


399 
	$pcb_√w
(
≠i_msg_msg
 *
msg
)

401 
msg
->
c⁄n
->
îr
 = 
ERR_OK
;

403 
	`LWIP_ASSERT
("pcb_√w:ÖcbáÃódyáŒoˇãd", 
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
);

406 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

407 #i‡
LWIP_RAW


408 
NETCONN_RAW
:

409 
msg
->
c⁄n
->
pcb
.
øw
 = 
	`øw_√w
(msg->msg.
n
.
¥Ÿo
);

410 if(
msg
->
c⁄n
->
pcb
.
øw
 =
NULL
) {

411 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

414 
	`øw_ªcv
(
msg
->
c⁄n
->
pcb
.
øw
, 
ªcv_øw
, msg->conn);

417 #i‡
LWIP_UDP


418 
NETCONN_UDP
:

419 
msg
->
c⁄n
->
pcb
.
udp
 = 
	`udp_√w
();

420 if(
msg
->
c⁄n
->
pcb
.
udp
 =
NULL
) {

421 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

424 #i‡
LWIP_UDPLITE


425 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPLITE
) {

426 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_UDPLITE
);

429 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPNOCHKSUM
) {

430 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_NOCHKSUM
);

432 
	`udp_ªcv
(
msg
->
c⁄n
->
pcb
.
udp
, 
ªcv_udp
, msg->conn);

435 #i‡
LWIP_TCP


436 
NETCONN_TCP
:

437 
msg
->
c⁄n
->
pcb
.
t˝
 = 
	`t˝_√w
();

438 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

439 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

442 
	`£tup_t˝
(
msg
->
c⁄n
);

447 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

451  
msg
->
c⁄n
->
îr
;

452 
	}
}

461 
	$do_√wc⁄n
(
≠i_msg_msg
 *
msg
)

463 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

464 
	`pcb_√w
(
msg
);

470 
	`TCPIP_APIMSG_ACK
(
msg
);

471 
	}
}

483 
√tc⁄n
*

484 
	$√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

486 
√tc⁄n
 *
c⁄n
;

487 
size
;

489 
c⁄n
 = 
	`memp_mÆloc
(
MEMP_NETCONN
);

490 i‡(
c⁄n
 =
NULL
) {

491  
NULL
;

494 
c⁄n
->
îr
 = 
ERR_OK
;

495 
c⁄n
->
ty≥
 = 
t
;

496 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

498 #i‡(
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_UDP_RECVMBOX_SIZE
) && \

499 (
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_TCP_RECVMBOX_SIZE
)

500 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

502 
	`NETCONNTYPE_GROUP
(
t
)) {

503 #i‡
LWIP_RAW


504 
NETCONN_RAW
:

505 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

508 #i‡
LWIP_UDP


509 
NETCONN_UDP
:

510 
size
 = 
DEFAULT_UDP_RECVMBOX_SIZE
;

513 #i‡
LWIP_TCP


514 
NETCONN_TCP
:

515 
size
 = 
DEFAULT_TCP_RECVMBOX_SIZE
;

519 
	`LWIP_ASSERT
("netconn_alloc: undefinedÇetconn_type", 0);

524 i‡((
c⁄n
->
›_com∂ëed
 = 
	`sys_£m_√w
(0)Ë=
SYS_SEM_NULL
) {

525 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

526  
NULL
;

528 i‡((
c⁄n
->
ªcvmbox
 = 
	`sys_mbox_√w
(
size
)Ë=
SYS_MBOX_NULL
) {

529 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

530 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

531  
NULL
;

534 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

535 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

537 
c⁄n
->
sockë
 = -1;

538 
c⁄n
->
ˇŒback
 = callback;

539 
c⁄n
->
ªcv_avaû
 = 0;

540 #i‡
LWIP_TCP


541 
c⁄n
->
wrôe_msg
 = 
NULL
;

542 
c⁄n
->
wrôe_off£t
 = 0;

543 #i‡
LWIP_TCPIP_CORE_LOCKING


544 
c⁄n
->
wrôe_dñayed
 = 0;

547 #i‡
LWIP_SO_RCVTIMEO


548 
c⁄n
->
ªcv_timeout
 = 0;

550 #i‡
LWIP_SO_RCVBUF


551 
c⁄n
->
ªcv_bufsize
 = 
RECV_BUFSIZE_DEFAULT
;

553  
c⁄n
;

554 
	}
}

563 
	$√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
)

565 *
mem
;

566 
	`LWIP_ASSERT
("PCB mu° bêdóŒoˇãd outsidêthi†fun˘i⁄", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

569 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

570 
	`sys_mbox_åy„tch
(
c⁄n
->
ªcvmbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

571 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

572 if(
mem
 !
NULL
) {

573 
	`pbuf_‰ì
((
pbuf
 *)
mem
);

576 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

579 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

580 
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

584 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

585 
	`sys_mbox_åy„tch
(
c⁄n
->
ac˚±mbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

586 
	`√tc⁄n_dñëe
((
√tc⁄n
 *)
mem
);

588 
	`sys_mbox_‰ì
(
c⁄n
->
ac˚±mbox
);

589 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

592 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

593 
c⁄n
->
›_com∂ëed
 = 
SYS_SEM_NULL
;

595 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

596 
	}
}

598 #i‡
LWIP_TCP


607 
	$do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
)

609 
îr_t
 
îr
;

611 
	`LWIP_ASSERT
("övÆid c⁄n", (
c⁄n
 !
NULL
));

612 
	`LWIP_ASSERT
("thi†i†f‹Å˝Çëc⁄n†⁄ly", (
c⁄n
->
ty≥
 =
NETCONN_TCP
));

613 
	`LWIP_ASSERT
("c⁄¿mu° bêö sèã NETCONN_CLOSE", (
c⁄n
->
°©e
 =
NETCONN_CLOSE
));

614 
	`LWIP_ASSERT
("pcbáÃódy clo£d", (
c⁄n
->
pcb
.
t˝
 !
NULL
));

617 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

618 i‡(
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

619 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

621 
	`t˝_ªcv
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

622 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

624 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

625 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
NULL
, 4);

626 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

629 
îr
 = 
	`t˝_˛o£
(
c⁄n
->
pcb
.
t˝
);

630 i‡(
îr
 =
ERR_OK
) {

632 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

634 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

635 
c⁄n
->
îr
 = 
ERR_OK
;

638 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

639 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

641 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

645 
	`LWIP_ASSERT
("ClosögáÜi°íÖcb mayÇŸ faû!", (
c⁄n
->
pcb
.
t˝
->
°©e
 !
LISTEN
));

646 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
£¡_t˝
);

647 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
pﬁl_t˝
, 4);

648 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
îr_t˝
);

649 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, conn);

653 
	}
}

663 
	$do_dñc⁄n
(
≠i_msg_msg
 *
msg
)

665 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

666 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

667 #i‡
LWIP_RAW


668 
NETCONN_RAW
:

669 
	`øw_ªmove
(
msg
->
c⁄n
->
pcb
.
øw
);

672 #i‡
LWIP_UDP


673 
NETCONN_UDP
:

674 
msg
->
c⁄n
->
pcb
.
udp
->
ªcv_¨g
 = 
NULL
;

675 
	`udp_ªmove
(
msg
->
c⁄n
->
pcb
.
udp
);

678 #i‡
LWIP_TCP


679 
NETCONN_TCP
:

680 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

681 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

694 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

695 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

697 i‡(
msg
->
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
) {

698 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

700 
	}
}

710 
	$do_böd
(
≠i_msg_msg
 *
msg
)

712 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

713 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

714 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

715 #i‡
LWIP_RAW


716 
NETCONN_RAW
:

717 
msg
->
c⁄n
->
îr
 = 
	`øw_böd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

720 #i‡
LWIP_UDP


721 
NETCONN_UDP
:

722 
msg
->
c⁄n
->
îr
 = 
	`udp_böd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

725 #i‡
LWIP_TCP


726 
NETCONN_TCP
:

727 
msg
->
c⁄n
->
îr
 = 
	`t˝_böd
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

735 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

738 
	`TCPIP_APIMSG_ACK
(
msg
);

739 
	}
}

741 #i‡
LWIP_TCP


748 
îr_t


749 
	$do_c⁄√˘ed
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

751 
√tc⁄n
 *
c⁄n
;

753 
	`LWIP_UNUSED_ARG
(
pcb
);

755 
c⁄n
 = 
¨g
;

757 i‡(
c⁄n
 =
NULL
) {

758  
ERR_VAL
;

761 
c⁄n
->
îr
 =Érr;

762 i‡((
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
îr
 =
ERR_OK
)) {

763 
	`£tup_t˝
(
c⁄n
);

765 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

766 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

767  
ERR_OK
;

768 
	}
}

779 
	$do_c⁄√˘
(
≠i_msg_msg
 *
msg
)

781 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

782 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

786 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

787 #i‡
LWIP_RAW


788 
NETCONN_RAW
:

789 
msg
->
c⁄n
->
îr
 = 
	`øw_c⁄√˘
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

790 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

793 #i‡
LWIP_UDP


794 
NETCONN_UDP
:

795 
msg
->
c⁄n
->
îr
 = 
	`udp_c⁄√˘
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

796 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

799 #i‡
LWIP_TCP


800 
NETCONN_TCP
:

801 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CONNECT
;

802 
	`£tup_t˝
(
msg
->
c⁄n
);

803 
msg
->
c⁄n
->
îr
 = 
	`t˝_c⁄√˘
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
,

804 
do_c⁄√˘ed
);

812 
	}
}

822 
	$do_disc⁄√˘
(
≠i_msg_msg
 *
msg
)

824 #i‡
LWIP_UDP


825 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

826 
	`udp_disc⁄√˘
(
msg
->
c⁄n
->
pcb
.
udp
);

829 
	`TCPIP_APIMSG_ACK
(
msg
);

830 
	}
}

839 
	$do_li°í
(
≠i_msg_msg
 *
msg
)

841 #i‡
LWIP_TCP


842 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

843 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

844 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

845 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
CLOSED
) {

846 #i‡
TCP_LISTEN_BACKLOG


847 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í_wôh_backlog
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
lb
.
backlog
);

849 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í
(
msg
->
c⁄n
->
pcb
.
t˝
);

851 i‡(
Õcb
 =
NULL
) {

852 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

855 i‡(
msg
->
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

857 
	`sys_mbox_‰ì
(
msg
->
c⁄n
->
ªcvmbox
);

858 
msg
->
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

860 i‡(
msg
->
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
) {

861 i‡((
msg
->
c⁄n
->
ac˚±mbox
 = 
	`sys_mbox_√w
(
DEFAULT_ACCEPTMBOX_SIZE
)Ë=
SYS_MBOX_NULL
) {

862 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

865 i‡(
msg
->
c⁄n
->
îr
 =
ERR_OK
) {

866 
msg
->
c⁄n
->
°©e
 = 
NETCONN_LISTEN
;

867 
msg
->
c⁄n
->
pcb
.
t˝
 = 
Õcb
;

868 
	`t˝_¨g
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->conn);

869 
	`t˝_ac˚±
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ac˚±_fun˘i⁄
);

873 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

879 
	`TCPIP_APIMSG_ACK
(
msg
);

880 
	}
}

889 
	$do_£nd
(
≠i_msg_msg
 *
msg
)

891 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

892 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

893 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

894 #i‡
LWIP_RAW


895 
NETCONN_RAW
:

896 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

897 
msg
->
c⁄n
->
îr
 = 
	`øw_£nd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
);

899 
msg
->
c⁄n
->
îr
 = 
	`øw_£ndto
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
, msg->msg.b->
addr
);

903 #i‡
LWIP_UDP


904 
NETCONN_UDP
:

905 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

906 
msg
->
c⁄n
->
îr
 = 
	`udp_£nd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
);

908 
msg
->
c⁄n
->
îr
 = 
	`udp_£ndto
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
, msg->msg.b->
addr
, msg->msg.b->
p‹t
);

917 
	`TCPIP_APIMSG_ACK
(
msg
);

918 
	}
}

927 
	$do_ªcv
(
≠i_msg_msg
 *
msg
)

929 #i‡
LWIP_TCP


930 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

931 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

932 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

933 #i‡
TCP_LISTEN_BACKLOG


934 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

935 
	`t˝_ac˚±ed
(
msg
->
c⁄n
->
pcb
.
t˝
);

939 
	`t˝_ªcved
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
r
.
Àn
);

945 
	`TCPIP_APIMSG_ACK
(
msg
);

946 
	}
}

948 #i‡
LWIP_TCP


960 
îr_t


961 
	$do_wrôem‹e
(
√tc⁄n
 *
c⁄n
)

963 
îr_t
 
îr
;

964 *
d©≠å
;

965 
u16_t
 
Àn
, 
avaûabÀ
;

966 
u8_t
 
wrôe_föished
 = 0;

967 
size_t
 
diff
;

969 
	`LWIP_ASSERT
("c⁄n->°©ê=NETCONN_WRITE", (
c⁄n
->
°©e
 =
NETCONN_WRITE
));

971 
d©≠å
 = (
u8_t
*)
c⁄n
->
wrôe_msg
->
msg
.
w
.d©≠å + c⁄n->
wrôe_off£t
;

972 
diff
 = 
c⁄n
->
wrôe_msg
->
msg
.
w
.
Àn
 - c⁄n->
wrôe_off£t
;

973 i‡(
diff
 > 0xffffUL) {

974 
Àn
 = 0xffff;

975 #i‡
LWIP_TCPIP_CORE_LOCKING


976 
c⁄n
->
wrôe_dñayed
 = 1;

979 
Àn
 = (
u16_t
)
diff
;

981 
avaûabÀ
 = 
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
);

982 i‡(
avaûabÀ
 < 
Àn
) {

984 
Àn
 = 
avaûabÀ
;

985 #i‡
LWIP_TCPIP_CORE_LOCKING


986 
c⁄n
->
wrôe_dñayed
 = 1;

990 
îr
 = 
	`t˝_wrôe
(
c⁄n
->
pcb
.
t˝
, 
d©≠å
, 
Àn
, c⁄n->
wrôe_msg
->
msg
.
w
.
≠iÊags
);

991 
	`LWIP_ASSERT
("do_wrôem‹e: invÆidÜígth!", ((
c⁄n
->
wrôe_off£t
 + 
Àn
Ë<c⁄n->
wrôe_msg
->
msg
.
w
.len));

992 i‡(
îr
 =
ERR_OK
) {

993 
c⁄n
->
wrôe_off£t
 +
Àn
;

994 i‡(
c⁄n
->
wrôe_off£t
 =c⁄n->
wrôe_msg
->
msg
.
w
.
Àn
) {

996 
wrôe_föished
 = 1;

997 
c⁄n
->
wrôe_msg
 = 
NULL
;

998 
c⁄n
->
wrôe_off£t
 = 0;

1000 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1002 
îr
 = 
	`t˝_ouçut_«gÀ
(
c⁄n
->
pcb
.
t˝
);

1003 
c⁄n
->
îr
 =Érr;

1004 i‡((
îr
 =
ERR_OK
Ë&& (
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
Ë<
TCP_SNDLOWAT
)) {

1005 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

1007 } i‡(
îr
 =
ERR_MEM
) {

1013 
îr
 = 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

1015 #i‡
LWIP_TCPIP_CORE_LOCKING


1016 
c⁄n
->
wrôe_dñayed
 = 1;

1021 
c⁄n
->
îr
 =Érr;

1022 
wrôe_föished
 = 1;

1025 i‡(
wrôe_föished
) {

1028 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1029 #i‡
LWIP_TCPIP_CORE_LOCKING


1030 i‡(
c⁄n
->
wrôe_dñayed
 != 0)

1033 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

1036 #i‡
LWIP_TCPIP_CORE_LOCKING


1038  
ERR_MEM
;

1040  
ERR_OK
;

1041 
	}
}

1051 
	$do_wrôe
(
≠i_msg_msg
 *
msg
)

1053 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1054 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1055 #i‡
LWIP_TCP


1056 
msg
->
c⁄n
->
°©e
 = 
NETCONN_WRITE
;

1058 
	`LWIP_ASSERT
("Æªady wrôög", 
msg
->
c⁄n
->
wrôe_msg
 =
NULL
 &&

1059 
msg
->
c⁄n
->
wrôe_off£t
 == 0);

1060 
msg
->
c⁄n
->
wrôe_msg
 = msg;

1061 
msg
->
c⁄n
->
wrôe_off£t
 = 0;

1062 #i‡
LWIP_TCPIP_CORE_LOCKING


1063 
msg
->
c⁄n
->
wrôe_dñayed
 = 0;

1064 i‡(
	`do_wrôem‹e
(
msg
->
c⁄n
Ë!
ERR_OK
) {

1065 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_WRITE
);

1066 
	`UNLOCK_TCPIP_CORE
();

1067 
	`sys_¨ch_£m_waô
(
msg
->
c⁄n
->
›_com∂ëed
, 0);

1068 
	`LOCK_TCPIP_CORE
();

1069 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_NONE
);

1072 
	`do_wrôem‹e
(
msg
->
c⁄n
);

1077 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

1079 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1083 
	`TCPIP_APIMSG_ACK
(
msg
);

1084 
	}
}

1093 
	$do_gëaddr
(
≠i_msg_msg
 *
msg
)

1095 i‡(
msg
->
c⁄n
->
pcb
.
ù
 !
NULL
) {

1096 *(
msg
->msg.
ad
.
ùaddr
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
ù
->
loˇl_ù
:msg->c⁄n->pcb.ù->
ªmŸe_ù
);

1098 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1099 #i‡
LWIP_RAW


1100 
NETCONN_RAW
:

1101 i‡(
msg
->msg.
ad
.
loˇl
) {

1102 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
øw
->
¥Ÿocﬁ
;

1105 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1109 #i‡
LWIP_UDP


1110 
NETCONN_UDP
:

1111 i‡(
msg
->msg.
ad
.
loˇl
) {

1112 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
loˇl_p‹t
;

1114 i‡((
msg
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0) {

1115 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1117 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
ªmŸe_p‹t
;

1122 #i‡
LWIP_TCP


1123 
NETCONN_TCP
:

1124 *(
msg
->msg.
ad
.
p‹t
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
t˝
->
loˇl_p‹t
:msg->c⁄n->pcb.t˝->
ªmŸe_p‹t
);

1129 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1131 
	`TCPIP_APIMSG_ACK
(
msg
);

1132 
	}
}

1141 
	$do_˛o£
(
≠i_msg_msg
 *
msg
)

1143 #i‡
LWIP_TCP


1144 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1145 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

1146 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

1151 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1152 
	`TCPIP_APIMSG_ACK
(
msg
);

1154 
	}
}

1156 #i‡
LWIP_IGMP


1164 
	$do_joö_Àave_group
(
≠i_msg_msg
 *
msg
)

1166 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1167 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1168 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1169 #i‡
LWIP_UDP


1170 i‡(
msg
->msg.
jl
.
joö_‹_Àave
 =
NETCONN_JOIN
) {

1171 
msg
->
c⁄n
->
îr
 = 
	`igmp_joögroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1173 
msg
->
c⁄n
->
îr
 = 
	`igmp_Àavegroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1176 #i‡(
LWIP_TCP
 || 
LWIP_RAW
)

1178 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1183 
	`TCPIP_APIMSG_ACK
(
msg
);

1184 
	}
}

1187 #i‡
LWIP_DNS


1194 
	$do_dns_found
(c⁄° *
«me
, 
ù_addr
 *
ùaddr
, *
¨g
)

1196 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1198 
	`LWIP_ASSERT
("DNSÑe•⁄£ f‹ wr⁄g ho°Çame", 
	`°rcmp
(
msg
->
«me
,Çame) == 0);

1200 i‡(
ùaddr
 =
NULL
) {

1202 *
msg
->
îr
 = 
ERR_VAL
;

1205 *
msg
->
îr
 = 
ERR_OK
;

1206 *
msg
->
addr
 = *
ùaddr
;

1209 
	`sys_£m_sig«l
(
msg
->
£m
);

1210 
	}
}

1219 
	$do_gëho°by«me
(*
¨g
)

1221 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1223 *
msg
->
îr
 = 
	`dns_gëho°by«me
(msg->
«me
, msg->
addr
, 
do_dns_found
, msg);

1224 i‡(*
msg
->
îr
 !
ERR_INPROGRESS
) {

1227 
	`sys_£m_sig«l
(
msg
->
£m
);

1229 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/err.c

39 
	~"lwù/îr.h
"

41 #ifde‡
LWIP_DEBUG


43 c⁄° *
	gîr_°ªº
[] = {

68 
	$lwù_°ªº
(
îr_t
 
îr
)

70  
îr_°ªº
[-
îr
];

72 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/netbuf.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/√tbuf.h
"

44 
	~"lwù/memp.h
"

46 
	~<°rög.h
>

56 
√tbuf
 *
	$√tbuf_√w
()

58 
√tbuf
 *
buf
;

60 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

61 i‡(
buf
 !
NULL
) {

62 
buf
->
p
 = 
NULL
;

63 
buf
->
±r
 = 
NULL
;

64 
buf
->
addr
 = 
NULL
;

65  
buf
;

67  
NULL
;

69 
	}
}

77 
	$√tbuf_dñëe
(
√tbuf
 *
buf
)

79 i‡(
buf
 !
NULL
) {

80 i‡(
buf
->
p
 !
NULL
) {

81 
	`pbuf_‰ì
(
buf
->
p
);

82 
buf
->
p
 = buf->
±r
 = 
NULL
;

84 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

86 
	}
}

97 
	$√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
)

99 
	`LWIP_ERROR
("√tbuf_Æloc: invÆid buf", (
buf
 !
NULL
),  NULL;);

102 i‡(
buf
->
p
 !
NULL
) {

103 
	`pbuf_‰ì
(
buf
->
p
);

105 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
size
, 
PBUF_RAM
);

106 i‡(
buf
->
p
 =
NULL
) {

107  
NULL
;

109 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold size",

110 (
buf
->
p
->
Àn
 >
size
));

111 
buf
->
±r
 = buf->
p
;

112  
buf
->
p
->
∑ylﬂd
;

113 
	}
}

121 
	$√tbuf_‰ì
(
√tbuf
 *
buf
)

123 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

124 i‡(
buf
->
p
 !
NULL
) {

125 
	`pbuf_‰ì
(
buf
->
p
);

127 
buf
->
p
 = buf->
±r
 = 
NULL
;

128 
	}
}

139 
îr_t


140 
	$√tbuf_ªf
(
√tbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
size
)

142 
	`LWIP_ERROR
("√tbuf_ªf: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

143 i‡(
buf
->
p
 !
NULL
) {

144 
	`pbuf_‰ì
(
buf
->
p
);

146 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

147 i‡(
buf
->
p
 =
NULL
) {

148 
buf
->
±r
 = 
NULL
;

149  
ERR_MEM
;

151 
buf
->
p
->
∑ylﬂd
 = (*)
d©≠å
;

152 
buf
->
p
->
Àn
 = buf->p->
tŸ_Àn
 = 
size
;

153 
buf
->
±r
 = buf->
p
;

154  
ERR_OK
;

155 
	}
}

164 
	$√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
)

166 
	`LWIP_ERROR
("√tbuf_ªf: invÆid hód", (
hód
 !
NULL
), ;);

167 
	`LWIP_ERROR
("√tbuf_chaö: invÆidÅaû", (
èû
 !
NULL
), ;);

168 
	`pbuf_ˇt
(
hód
->
p
, 
èû
->p);

169 
hód
->
±r
 = hód->
p
;

170 
	`memp_‰ì
(
MEMP_NETBUF
, 
èû
);

171 
	}
}

182 
îr_t


183 
	$√tbuf_d©a
(
√tbuf
 *
buf
, **
d©≠å
, 
u16_t
 *
Àn
)

185 
	`LWIP_ERROR
("√tbuf_d©a: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

186 
	`LWIP_ERROR
("√tbuf_d©a: invÆid d©≠å", (
d©≠å
 !
NULL
),  
ERR_ARG
;);

187 
	`LWIP_ERROR
("√tbuf_d©a: invÆidÜí", (
Àn
 !
NULL
),  
ERR_ARG
;);

189 i‡(
buf
->
±r
 =
NULL
) {

190  
ERR_BUF
;

192 *
d©≠å
 = 
buf
->
±r
->
∑ylﬂd
;

193 *
Àn
 = 
buf
->
±r
->len;

194  
ERR_OK
;

195 
	}
}

207 
s8_t


208 
	$√tbuf_√xt
(
√tbuf
 *
buf
)

210 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
),  -1;);

211 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

214 
buf
->
±r
 = buf->±r->
√xt
;

215 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

219 
	}
}

229 
	$√tbuf_fú°
(
√tbuf
 *
buf
)

231 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

232 
buf
->
±r
 = buf->
p
;

233 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/netdb.c

36 
	~"lwù/√tdb.h
"

38 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


40 
	~"lwù/îr.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/≠i.h
"

45 
	~<°rög.h
>

46 
	~<°dlib.h
>

49 
	sgëho°by«me_r_hñ≥r
 {

50 
ù_addr
 *
	maddrs
;

51 
ù_addr
 
	maddr
;

52 *
	mÆü£s
;

56 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


57 
	gh_î∫o
;

62 #i‚de‡
LWIP_DNS_API_HOSTENT_STORAGE


63 
	#LWIP_DNS_API_HOSTENT_STORAGE
 0

	)

67 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


68 
	#HOSTENT_STORAGE


	)

70 
	#HOSTENT_STORAGE
 

	)

82 
ho°ít
*

83 
	$lwù_gëho°by«me
(c⁄° *
«me
)

85 
îr_t
 
îr
;

86 
ù_addr
 
addr
;

89 
HOSTENT_STORAGE
 
ho°ít
 
s_ho°ít
;

90 
HOSTENT_STORAGE
 *
s_Æü£s
;

91 
HOSTENT_STORAGE
 
ù_addr
 
s_ho°ít_addr
;

92 
HOSTENT_STORAGE
 
ù_addr
 *
s_pho°ít_addr
;

95 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &
addr
);

96 i‡(
îr
 !
ERR_OK
) {

97 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

98 
h_î∫o
 = 
HOST_NOT_FOUND
;

99  
NULL
;

103 
s_ho°ít_addr
 = 
addr
;

104 
s_pho°ít_addr
 = &
s_ho°ít_addr
;

105 
s_ho°ít
.
h_«me
 = (*)
«me
;

106 
s_ho°ít
.
h_Æü£s
 = &
s_Æü£s
;

107 
s_ho°ít
.
h_addπy≥
 = 
AF_INET
;

108 
s_ho°ít
.
h_Àngth
 = (
ù_addr
);

109 
s_ho°ít
.
h_addr_li°
 = (**)&
s_pho°ít_addr
;

111 #i‡
DNS_DEBUG


113 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_«mê =%s\n", 
s_ho°ít
.
h_«me
));

114 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£† =%p\n", 
s_ho°ít
.
h_Æü£s
));

115 i‡(
s_ho°ít
.
h_Æü£s
 !
NULL
) {

116 
u8_t
 
idx
;

117  
idx
=0; 
s_ho°ít
.
h_Æü£s
[idx]; idx++) {

118 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%p\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

119 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%s\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

122 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addπy≥ =%d\n", 
s_ho°ít
.
h_addπy≥
));

123 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Àngth =%d\n", 
s_ho°ít
.
h_Àngth
));

124 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li° =%p\n", 
s_ho°ít
.
h_addr_li°
));

125 i‡(
s_ho°ít
.
h_addr_li°
 !
NULL
) {

126 
u8_t
 
idx
;

127  
idx
=0; 
s_ho°ít
.
h_addr_li°
[idx]; idx++) {

128 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i] =%p\n", 
idx
, 
s_ho°ít
.
h_addr_li°
[idx]));

129 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i]-> =%s\n", 
idx
, 
	`öë_¡ﬂ
(*((
ö_addr
*)(
s_ho°ít
.
h_addr_li°
[idx])))));

134 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


136  
	`sys_thªad_ho°ít
(&
s_ho°ít
);

138  &
s_ho°ít
;

140 
	}
}

159 
	$lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

160 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
)

162 
îr_t
 
îr
;

163 
gëho°by«me_r_hñ≥r
 *
h
;

164 *
ho°«me
;

165 
size_t
 
«mñí
;

166 
lh_î∫o
;

168 i‡(
h_î∫›
 =
NULL
) {

170 
h_î∫›
 = &
lh_î∫o
;

173 i‡(
ªsu…
 =
NULL
) {

175 *
h_î∫›
 = 
EINVAL
;

179 *
ªsu…
 = 
NULL
;

180 i‡((
«me
 =
NULL
Ë|| (
ªt
 =NULLË|| (
buf
 == 0)) {

182 *
h_î∫›
 = 
EINVAL
;

186 
«mñí
 = 
	`°æí
(
«me
);

187 i‡(
buÊí
 < ((
gëho°by«me_r_hñ≥r
Ë+ 
«mñí
 + 1 + (
MEM_ALIGNMENT
 - 1))) {

189 *
h_î∫›
 = 
ERANGE
;

193 
h
 = (
gëho°by«me_r_hñ≥r
*)
	`LWIP_MEM_ALIGN
(
buf
);

194 
ho°«me
 = ((*)
h
Ë+ (
gëho°by«me_r_hñ≥r
);

197 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &(
h
->
addr
));

198 i‡(
îr
 !
ERR_OK
) {

199 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

200 *
h_î∫›
 = 
ENSRNOTFOUND
;

205 
	`MEMCPY
(
ho°«me
, 
«me
, 
«mñí
);

206 
ho°«me
[
«mñí
] = 0;

209 
h
->
addrs
 = &(h->
addr
);

210 
h
->
Æü£s
 = 
NULL
;

211 
ªt
->
h_«me
 = (*)
ho°«me
;

212 
ªt
->
h_Æü£s
 = &(
h
->
Æü£s
);

213 
ªt
->
h_addπy≥
 = 
AF_INET
;

214 
ªt
->
h_Àngth
 = (
ù_addr
);

215 
ªt
->
h_addr_li°
 = (**)&(
h
->
addrs
);

218 *
ªsu…
 = 
ªt
;

222 
	}
}

232 
	$lwù_‰ìaddröfo
(
addröfo
 *
ai
)

234 
addröfo
 *
√xt
;

236 
ai
 !
NULL
) {

237 i‡(
ai
->
ai_addr
 !
NULL
) {

238 
	`mem_‰ì
(
ai
->
ai_addr
);

240 i‡(
ai
->
ai_ˇn⁄«me
 !
NULL
) {

241 
	`mem_‰ì
(
ai
->
ai_ˇn⁄«me
);

243 
√xt
 = 
ai
->
ai_√xt
;

244 
	`mem_‰ì
(
ai
);

245 
ai
 = 
√xt
;

247 
	}
}

269 
	$lwù_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

270 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
)

272 
îr_t
 
îr
;

273 
ù_addr
 
addr
;

274 
addröfo
 *
ai
;

275 
sockaddr_ö
 *
ß
 = 
NULL
;

276 
p‹t_ƒ
 = 0;

278 i‡(
ªs
 =
NULL
) {

279  
EAI_FAIL
;

281 *
ªs
 = 
NULL
;

282 i‡((
nodíame
 =
NULL
Ë&& (
£rv«me
 == NULL)) {

283  
EAI_NONAME
;

286 i‡(
£rv«me
 !
NULL
) {

289 
p‹t_ƒ
 = 
	`©oi
(
£rv«me
);

290 i‡((
p‹t_ƒ
 <= 0) || (port_nr > 0xffff)) {

291  
EAI_SERVICE
;

295 i‡(
nodíame
 !
NULL
) {

297 
îr
 = 
	`√tc⁄n_gëho°by«me
(
nodíame
, &
addr
);

298 i‡(
îr
 !
ERR_OK
) {

299  
EAI_FAIL
;

303 
addr
.add∏
INADDR_LOOPBACK
;

306 
ai
 = 
	`mem_mÆloc
((
addröfo
));

307 i‡(
ai
 =
NULL
) {

308 
memîr
;

310 
	`mem£t
(
ai
, 0, (
addröfo
));

311 
ß
 = 
	`mem_mÆloc
((
sockaddr_ö
));

312 i‡(
ß
 =
NULL
) {

313 
memîr
;

315 
	`mem£t
(
ß
, 0, (
sockaddr_ö
));

317 
ß
->
sö_addr
.
s_addr
 = 
addr
.addr;

318 
ß
->
sö_Ámûy
 = 
AF_INET
;

319 
ß
->
sö_Àn
 = (
sockaddr_ö
);

320 
ß
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t_ƒ
);

323 
ai
->
ai_Ámûy
 = 
AF_INET
;

324 i‡(
höts
 !
NULL
) {

326 
ai
->
ai_sockty≥
 = 
höts
->ai_socktype;

327 
ai
->
ai_¥Ÿocﬁ
 = 
höts
->ai_protocol;

329 i‡(
nodíame
 !
NULL
) {

331 
size_t
 
«mñí
 = 
	`°æí
(
nodíame
);

332 
	`LWIP_ASSERT
("«mñí i†toÿl⁄g", (
«mñí
 + 1Ë<(
mem_size_t
)-1);

333 
ai
->
ai_ˇn⁄«me
 = 
	`mem_mÆloc
((
mem_size_t
)(
«mñí
 + 1));

334 i‡(
ai
->
ai_ˇn⁄«me
 =
NULL
) {

335 
memîr
;

337 
	`MEMCPY
(
ai
->
ai_ˇn⁄«me
, 
nodíame
, 
«mñí
);

338 
ai
->
ai_ˇn⁄«me
[
«mñí
] = 0;

340 
ai
->
ai_addæí
 = (
sockaddr_ö
);

341 
ai
->
ai_addr
 = (
sockaddr
*)
ß
;

343 *
ªs
 = 
ai
;

346 
memîr
:

347 i‡(
ai
 !
NULL
) {

348 
	`mem_‰ì
(
ai
);

350 i‡(
ß
 !
NULL
) {

351 
	`mem_‰ì
(
ß
);

353  
EAI_MEMORY
;

354 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/netifapi.c

34 
	~"lwù/›t.h
"

36 #i‡
LWIP_NETIF_API


38 
	~"lwù/√tiÁpi.h
"

39 
	~"lwù/t˝ù.h
"

45 
	$do_√tiÁpi_√tif_add
–
√tiÁpi_msg_msg
 *
msg
)

47 i‡(!
	`√tif_add
–
msg
->
√tif
,

48 
msg
->msg.
add
.
ùaddr
,

49 
msg
->msg.
add
.
√tmask
,

50 
msg
->msg.
add
.
gw
,

51 
msg
->msg.
add
.
°©e
,

52 
msg
->msg.
add
.
öô
,

53 
msg
->msg.
add
.
öput
)) {

54 
msg
->
îr
 = 
ERR_IF
;

56 
msg
->
îr
 = 
ERR_OK
;

58 
	`TCPIP_NETIFAPI_ACK
(
msg
);

59 
	}
}

66 
	$do_√tiÁpi_√tif_comm⁄
–
√tiÁpi_msg_msg
 *
msg
)

68 i‡(
msg
->msg.
comm⁄
.
îπfunc
!=
NULL
) {

69 
msg
->
îr
 =

70 
msg
->msg.
comm⁄
.
	`îπfunc
(msg->
√tif
);

72 
msg
->
îr
 = 
ERR_OK
;

73 
msg
->msg.
comm⁄
.
	`voidfunc
(msg->
√tif
);

75 
	`TCPIP_NETIFAPI_ACK
(
msg
);

76 
	}
}

84 
îr_t


85 
	$√tiÁpi_√tif_add
(
√tif
 *netif,

86 
ù_addr
 *
ùaddr
,

87 
ù_addr
 *
√tmask
,

88 
ù_addr
 *
gw
,

89 *
°©e
,

90 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

91 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

93 
√tiÁpi_msg
 
msg
;

94 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_add
;

95 
msg
.msg.
√tif
 =Çetif;

96 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

97 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

98 
msg
.msg.msg.
add
.
gw
 = gw;

99 
msg
.msg.msg.
add
.
°©e
 = state;

100 
msg
.msg.msg.
add
.
öô
 = init;

101 
msg
.msg.msg.
add
.
öput
 = input;

102 
	`TCPIP_NETIFAPI
(&
msg
);

103  
msg
.msg.
îr
;

104 
	}
}

112 
îr_t


113 
	$√tiÁpi_√tif_comm⁄
–
√tif
 *netif,

114 (* 
voidfunc
)(
√tif
 *netif),

115 
	$îr_t
 (* 
îπfunc
)(
√tif
 *netif) )

117 
√tiÁpi_msg
 
msg
;

118 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_comm⁄
;

119 
msg
.msg.
√tif
 =Çetif;

120 
msg
.msg.msg.
comm⁄
.
voidfunc
 = voidfunc;

121 
msg
.msg.msg.
comm⁄
.
îπfunc
 =Érrtfunc;

122 
	`TCPIP_NETIFAPI
(&
msg
);

123  
msg
.msg.
îr
;

124 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/sockets.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_SOCKET


45 
	~"lwù/sockës.h
"

46 
	~"lwù/≠i.h
"

47 
	~"lwù/sys.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/öë.h
"

50 
	~"lwù/t˝.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝ù.h
"

55 
	~<°rög.h
>

57 
	#NUM_SOCKETS
 
MEMP_NUM_NETCONN


	)

60 
	slwù_sockë
 {

62 
√tc⁄n
 *
	mc⁄n
;

64 
√tbuf
 *
	mœ°d©a
;

66 
u16_t
 
	mœ°off£t
;

69 
s16_t
 
	mrcvevít
;

72 
u16_t
 
	m£ndevít
;

74 
u16_t
 
	mÊags
;

76 
	mîr
;

80 
	slwù_£À˘_cb
 {

82 
lwù_£À˘_cb
 *
	m√xt
;

84 
fd_£t
 *
	mªad£t
;

86 
fd_£t
 *
	mwrôe£t
;

88 
fd_£t
 *
	mex˚±£t
;

90 
	m£m_sig«Œed
;

92 
sys_£m_t
 
	m£m
;

97 
	slwù_£tgësock›t_d©a
 {

99 
lwù_sockë
 *
	msock
;

101 
	ms
;

103 
	mÀvñ
;

105 
	m›äame
;

108 *
	m›tvÆ
;

110 
sockÀn_t
 *
	m›éí
;

112 
îr_t
 
	mîr
;

116 
lwù_sockë
 
	gsockës
[
NUM_SOCKETS
];

118 
lwù_£À˘_cb
 *
	g£À˘_cb_li°
;

121 
sys_£m_t
 
	gsock£m
;

123 
sys_£m_t
 
	g£À˘£m
;

127 c⁄° 
	gîr_to_î∫o_èbÀ
[] = {

129 
ENOMEM
,

130 
ENOBUFS
,

131 
ETIMEDOUT
,

132 
EHOSTUNREACH
,

133 
ECONNABORTED
,

134 
ECONNRESET
,

135 
ESHUTDOWN
,

136 
ENOTCONN
,

137 
EINVAL
,

138 
EIO
,

139 
EADDRINUSE
,

142 
EINPROGRESS


145 
	#ERR_TO_ERRNO_TABLE_SIZE
 \

146 ((
îr_to_î∫o_èbÀ
)/”º_to_î∫o_èbÀ[0]))

	)

148 
	#îr_to_î∫o
(
îr
) \

149 (()(-(
îr
)Ë< 
ERR_TO_ERRNO_TABLE_SIZE
 ? \

150 
îr_to_î∫o_èbÀ
[-(
îr
)] : 
EIO
)

	)

152 #ifde‡
ERRNO


153 #i‚de‡
£t_î∫o


154 
	#£t_î∫o
(
îr
Ë
î∫o
 = (îr)

	)

157 
	#£t_î∫o
(
îr
)

	)

160 
	#sock_£t_î∫o
(
sk
, 
e
) do { \

161 
sk
->
îr
 = (
e
); \

162 
	`£t_î∫o
(
sk
->
îr
); \

163 } 0)

	)

166 
evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
);

167 
lwù_gësock›t_öã∫Æ
(*
¨g
);

168 
lwù_£tsock›t_öã∫Æ
(*
¨g
);

175 
	$lwù_sockë_öô
()

177 
sock£m
 = 
	`sys_£m_√w
(1);

178 
£À˘£m
 = 
	`sys_£m_√w
(1);

179 
	}
}

187 
lwù_sockë
 *

188 
	$gë_sockë
(
s
)

190 
lwù_sockë
 *
sock
;

192 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

193 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d): invÆid\n", 
s
));

194 
	`£t_î∫o
(
EBADF
);

195  
NULL
;

198 
sock
 = &
sockës
[
s
];

200 i‡(!
sock
->
c⁄n
) {

201 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d):ÇŸá˘ive\n", 
s
));

202 
	`£t_î∫o
(
EBADF
);

203  
NULL
;

206  
sock
;

207 
	}
}

216 
	$Æloc_sockë
(
√tc⁄n
 *
√wc⁄n
)

218 
i
;

221 
	`sys_£m_waô
(
sock£m
);

224 
i
 = 0; i < 
NUM_SOCKETS
; ++i) {

225 i‡(!
sockës
[
i
].
c⁄n
) {

226 
sockës
[
i
].
c⁄n
 = 
√wc⁄n
;

227 
sockës
[
i
].
œ°d©a
 = 
NULL
;

228 
sockës
[
i
].
œ°off£t
 = 0;

229 
sockës
[
i
].
rcvevít
 = 0;

230 
sockës
[
i
].
£ndevít
 = 1;

231 
sockës
[
i
].
Êags
 = 0;

232 
sockës
[
i
].
îr
 = 0;

233 
	`sys_£m_sig«l
(
sock£m
);

234  
i
;

237 
	`sys_£m_sig«l
(
sock£m
);

239 
	}
}

248 
	$lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

250 
lwù_sockë
 *
sock
, *
nsock
;

251 
√tc⁄n
 *
√wc⁄n
;

252 
ù_addr
 
«ddr
;

253 
u16_t
 
p‹t
;

254 
√wsock
;

255 
sockaddr_ö
 
sö
;

256 
îr_t
 
îr
;

258 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d)...\n", 
s
));

259 
sock
 = 
	`gë_sockë
(
s
);

260 i‡(!
sock
)

263 i‡((
sock
->
Êags
 & 
O_NONBLOCK
Ë&& (sock->
rcvevít
 <= 0)) {

264 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

265 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

269 
√wc⁄n
 = 
	`√tc⁄n_ac˚±
(
sock
->
c⁄n
);

270 i‡(!
√wc⁄n
) {

271 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËÁûed,Éº=%d\n", 
s
, 
sock
->
c⁄n
->
îr
));

272 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

277 
îr
 = 
	`√tc⁄n_≥î
(
√wc⁄n
, &
«ddr
, &
p‹t
);

278 i‡(
îr
 !
ERR_OK
) {

279 
	`√tc⁄n_dñëe
(
√wc⁄n
);

280 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

287 i‡(
NULL
 !
addr
) {

288 
	`LWIP_ASSERT
("add∏vÆid buàaddæí NULL", 
addæí
 !
NULL
);

289 
	`mem£t
(&
sö
, 0, (sin));

290 
sö
.
sö_Àn
 = (sin);

291 
sö
.
sö_Ámûy
 = 
AF_INET
;

292 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

293 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

295 i‡(*
addæí
 > (
sö
))

296 *
addæí
 = (
sö
);

298 
	`MEMCPY
(
addr
, &
sö
, *
addæí
);

301 
√wsock
 = 
	`Æloc_sockë
(
√wc⁄n
);

302 i‡(
√wsock
 == -1) {

303 
	`√tc⁄n_dñëe
(
√wc⁄n
);

304 
	`sock_£t_î∫o
(
sock
, 
ENFILE
);

307 
	`LWIP_ASSERT
("övÆid sockë index", (
√wsock
 >0Ë&& (√wsock < 
NUM_SOCKETS
));

308 
√wc⁄n
->
ˇŒback
 = 
evít_ˇŒback
;

309 
nsock
 = &
sockës
[
√wsock
];

310 
	`LWIP_ASSERT
("övÆid sockëÖoöãr", 
nsock
 !
NULL
);

312 
	`sys_£m_waô
(
sock£m
);

318 
nsock
->
rcvevít
 +-1 - 
√wc⁄n
->
sockë
;

319 
√wc⁄n
->
sockë
 = 
√wsock
;

320 
	`sys_£m_sig«l
(
sock£m
);

322 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËªtu∫ögÇew sock=%dáddr=", 
s
, 
√wsock
));

323 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

324 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
p‹t
));

326 
	`sock_£t_î∫o
(
sock
, 0);

327  
√wsock
;

328 
	}
}

331 
	$lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

333 
lwù_sockë
 *
sock
;

334 
ù_addr
 
loˇl_addr
;

335 
u16_t
 
loˇl_p‹t
;

336 
îr_t
 
îr
;

338 
sock
 = 
	`gë_sockë
(
s
);

339 i‡(!
sock
)

342 
	`LWIP_ERROR
("lwù_böd: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

343 ((((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

344 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

346 
loˇl_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

347 
loˇl_p‹t
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

349 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%d,áddr=", 
s
));

350 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
loˇl_addr
);

351 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
loˇl_p‹t
)));

353 
îr
 = 
	`√tc⁄n_böd
(
sock
->
c⁄n
, &
loˇl_addr
, 
	`¡ohs
(
loˇl_p‹t
));

355 i‡(
îr
 !
ERR_OK
) {

356 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

357 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

361 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËsuc˚eded\n", 
s
));

362 
	`sock_£t_î∫o
(
sock
, 0);

364 
	}
}

367 
	$lwù_˛o£
(
s
)

369 
lwù_sockë
 *
sock
;

371 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_˛o£(%d)\n", 
s
));

373 
sock
 = 
	`gë_sockë
(
s
);

374 i‡(!
sock
) {

378 
	`√tc⁄n_dñëe
(
sock
->
c⁄n
);

380 
	`sys_£m_waô
(
sock£m
);

381 i‡(
sock
->
œ°d©a
) {

382 
	`√tbuf_dñëe
(
sock
->
œ°d©a
);

384 
sock
->
œ°d©a
 = 
NULL
;

385 
sock
->
œ°off£t
 = 0;

386 
sock
->
c⁄n
 = 
NULL
;

387 
	`sock_£t_î∫o
(
sock
, 0);

388 
	`sys_£m_sig«l
(
sock£m
);

390 
	}
}

393 
	$lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

395 
lwù_sockë
 *
sock
;

396 
îr_t
 
îr
;

398 
sock
 = 
	`gë_sockë
(
s
);

399 i‡(!
sock
)

402 
	`LWIP_ERROR
("lwù_c⁄√˘: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

403 ((((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

404 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

406 i‡(((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
 =
AF_UNSPEC
) {

407 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d, AF_UNSPEC)\n", 
s
));

408 
îr
 = 
	`√tc⁄n_disc⁄√˘
(
sock
->
c⁄n
);

410 
ù_addr
 
ªmŸe_addr
;

411 
u16_t
 
ªmŸe_p‹t
;

413 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

414 
ªmŸe_p‹t
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

416 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d,áddr=", 
s
));

417 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

418 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
ªmŸe_p‹t
)));

420 
îr
 = 
	`√tc⁄n_c⁄√˘
(
sock
->
c⁄n
, &
ªmŸe_addr
, 
	`¡ohs
(
ªmŸe_p‹t
));

423 i‡(
îr
 !
ERR_OK
) {

424 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

425 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËsuc˚eded\n", 
s
));

430 
	`sock_£t_î∫o
(
sock
, 0);

432 
	}
}

443 
	$lwù_li°í
(
s
, 
backlog
)

445 
lwù_sockë
 *
sock
;

446 
îr_t
 
îr
;

448 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%d, backlog=%d)\n", 
s
, 
backlog
));

450 
sock
 = 
	`gë_sockë
(
s
);

451 i‡(!
sock
)

455 i‡(
backlog
 < 0) {

456 
backlog
 = 0;

458 i‡(
backlog
 > 0xff) {

459 
backlog
 = 0xff;

462 
îr
 = 
	`√tc⁄n_li°í_wôh_backlog
(
sock
->
c⁄n
, 
backlog
);

464 i‡(
îr
 !
ERR_OK
) {

465 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

466 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

470 
	`sock_£t_î∫o
(
sock
, 0);

472 
	}
}

475 
	$lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

476 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

478 
lwù_sockë
 *
sock
;

479 
√tbuf
 *
buf
;

480 
u16_t
 
buÊí
, 
c›yÀn
, 
off
 = 0;

481 
ù_addr
 *
addr
;

482 
u16_t
 
p‹t
;

483 
u8_t
 
d⁄e
 = 0;

485 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d, %p, %"
SZT_F
", 0x%x, ..)\n", 
s
, 
mem
, 
Àn
, 
Êags
));

486 
sock
 = 
	`gë_sockë
(
s
);

487 i‡(!
sock
)

491 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Å› whûêsock->œ°d©a=%p\n", (*)
sock
->
œ°d©a
));

493 i‡(
sock
->
œ°d©a
) {

494 
buf
 = 
sock
->
œ°d©a
;

497 i‡(((
Êags
 & 
MSG_DONTWAIT
Ë|| (
sock
->Êag†& 
O_NONBLOCK
)) &&

498 (
sock
->
rcvevít
 <= 0)) {

499 i‡(
off
 > 0) {

501 
	`sock_£t_î∫o
(
sock
, 0);

502  
off
;

504 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

505 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

511 
sock
->
œ°d©a
 = 
buf
 = 
	`√tc⁄n_ªcv
(sock->
c⁄n
);

512 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Çëc⁄n_ªcvÇëbuf=%p\n", (*)
buf
));

514 i‡(!
buf
) {

515 i‡(
off
 > 0) {

517 
	`sock_£t_î∫o
(
sock
, 0);

518  
off
;

521 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d): bu‡=NULL!\n", 
s
));

522 
	`sock_£t_î∫o
(
sock
, (((sock->
c⁄n
->
pcb
.
ù
 !
NULL
Ë&& (sock->c⁄n->
îr
 =
ERR_OK
))

523 ? 
ETIMEDOUT
 : 
	`îr_to_î∫o
(
sock
->
c⁄n
->
îr
)));

528 
buÊí
 = 
	`√tbuf_Àn
(
buf
);

529 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: buÊí=%"
U16_F
"Üí=%"
SZT_F
" off=%"U16_F" sock->lastoffset=%"U16_F"\n",

530 
buÊí
, 
Àn
, 
off
, 
sock
->
œ°off£t
));

532 
buÊí
 -
sock
->
œ°off£t
;

534 i‡(
Àn
 > 
buÊí
) {

535 
c›yÀn
 = 
buÊí
;

537 
c›yÀn
 = (
u16_t
)
Àn
;

542 
	`√tbuf_c›y_∑πül
(
buf
, (
u8_t
*)
mem
 + 
off
, 
c›yÀn
, 
sock
->
œ°off£t
);

544 
off
 +
c›yÀn
;

546 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

547 
	`LWIP_ASSERT
("övÆid c›yÀn,Üí would undîÊow", 
Àn
 >
c›yÀn
);

548 
Àn
 -
c›yÀn
;

549 i‡–(
Àn
 <= 0) ||

550 (
buf
->
p
->
Êags
 & 
PBUF_FLAG_PUSH
) ||

551 (
sock
->
rcvevít
 <= 0) ||

552 ((
Êags
 & 
MSG_PEEK
)!=0)) {

553 
d⁄e
 = 1;

556 
d⁄e
 = 1;

560 i‡(
d⁄e
) {

561 i‡(
‰om
 && 
‰omÀn
) {

562 
sockaddr_ö
 
sö
;

564 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

565 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

566 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

568 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

569 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

572 
	`mem£t
(&
sö
, 0, (sin));

573 
sö
.
sö_Àn
 = (sin);

574 
sö
.
sö_Ámûy
 = 
AF_INET
;

575 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

576 
sö
.
sö_addr
.
s_addr
 = 
addr
->addr;

578 i‡(*
‰omÀn
 > (
sö
)) {

579 *
‰omÀn
 = (
sö
);

582 
	`MEMCPY
(
‰om
, &
sö
, *
‰omÀn
);

584 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

585 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

586 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%"U16_F"\n", 
p‹t
, 
off
));

588 #i‡
SOCKETS_DEBUG


589 
sockaddr_ö
 
sö
;

591 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

592 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

593 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

595 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

596 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

599 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

600 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

601 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%"U16_F"\n", 
p‹t
, 
off
));

607 i‡((
Êags
 & 
MSG_PEEK
)==0) {

611 i‡((
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
Ë&& (
buÊí
 - 
c›yÀn
 > 0)) {

612 
sock
->
œ°d©a
 = 
buf
;

613 
sock
->
œ°off£t
 +
c›yÀn
;

614 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Üa°d©®nowÇëbuf=%p\n", (*)
buf
));

616 
sock
->
œ°d©a
 = 
NULL
;

617 
sock
->
œ°off£t
 = 0;

618 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: dñëögÇëbuf=%p\n", (*)
buf
));

619 
	`√tbuf_dñëe
(
buf
);

622 } !
d⁄e
);

624 
	`sock_£t_î∫o
(
sock
, 0);

625  
off
;

626 
	}
}

629 
	$lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
)

631  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 0, 
NULL
, NULL);

632 
	}
}

635 
	$lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
)

637  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 
Êags
, 
NULL
, NULL);

638 
	}
}

641 
	$lwù_£nd
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
)

643 
lwù_sockë
 *
sock
;

644 
îr_t
 
îr
;

646 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%d, d©a=%p, size=%"
SZT_F
", flags=0x%x)\n",

647 
s
, 
d©a
, 
size
, 
Êags
));

649 
sock
 = 
	`gë_sockë
(
s
);

650 i‡(!
sock
)

653 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
) {

654 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

655  
	`lwù_£ndto
(
s
, 
d©a
, 
size
, 
Êags
, 
NULL
, 0);

657 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

662 
îr
 = 
	`√tc⁄n_wrôe
(
sock
->
c⁄n
, 
d©a
, 
size
, 
NETCONN_COPY
 | ((
Êags
 & 
MSG_MORE
)?
NETCONN_MORE
:0));

664 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%dËîr=%d size=%"
SZT_F
"\n", 
s
, 
îr
, 
size
));

665 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

666  (
îr
 =
ERR_OK
 ? ()
size
 : -1);

667 
	}
}

670 
	$lwù_£ndto
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
,

671 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

673 
lwù_sockë
 *
sock
;

674 
ù_addr
 
ªmŸe_addr
;

675 
îr_t
 
îr
;

676 
u16_t
 
sh‹t_size
;

677 #i‡!
LWIP_TCPIP_CORE_LOCKING


678 
√tbuf
 
buf
;

679 
u16_t
 
ªmŸe_p‹t
;

682 
sock
 = 
	`gë_sockë
(
s
);

683 i‡(!
sock
)

686 i‡(
sock
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

687 #i‡
LWIP_TCP


688  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 
Êags
);

690 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

695 
	`LWIP_ASSERT
("lwù_£ndto: sizêmu° fô i¿u16_t", 
size
 <= 0xffff);

696 
sh‹t_size
 = (
u16_t
)
size
;

697 
	`LWIP_ERROR
("lwù_£ndto: invÆidáddªss", (((
to
 =
NULL
Ë&& (
tﬁí
 == 0)) ||

698 ((
tﬁí
 =(
sockaddr_ö
)) &&

699 ((((c⁄° 
sockaddr_ö
 *)
to
)->
sö_Ámûy
Ë=
AF_INET
))),

700 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

702 #i‡
LWIP_TCPIP_CORE_LOCKING


704 { 
pbuf
* 
p
;

706 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

707 i‡(
p
 =
NULL
) {

708 
îr
 = 
ERR_MEM
;

710 
p
->
∑ylﬂd
 = (*)
d©a
;

711 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
sh‹t_size
;

713 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

715 
	`LOCK_TCPIP_CORE
();

716 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_RAW
) {

717 
îr
 = 
sock
->
c⁄n
->î∏
	`øw_£ndto
(sock->c⁄n->
pcb
.
øw
, 
p
, &
ªmŸe_addr
);

719 
îr
 = 
sock
->
c⁄n
->î∏
	`udp_£ndto
(sock->c⁄n->
pcb
.
udp
, 
p
, &
ªmŸe_addr
, 
	`¡ohs
(((c⁄° 
sockaddr_ö
 *)
to
)->
sö_p‹t
));

721 
	`UNLOCK_TCPIP_CORE
();

723 
	`pbuf_‰ì
(
p
);

728 
buf
.
p
 = buf.
±r
 = 
NULL
;

729 i‡(
to
) {

730 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

731 
ªmŸe_p‹t
 = 
	`¡ohs
(((c⁄° 
sockaddr_ö
 *)
to
)->
sö_p‹t
);

732 
buf
.
addr
 = &
ªmŸe_addr
;

733 
buf
.
p‹t
 = 
ªmŸe_p‹t
;

735 
ªmŸe_addr
.
addr
 = 0;

736 
ªmŸe_p‹t
 = 0;

737 
buf
.
addr
 = 
NULL
;

738 
buf
.
p‹t
 = 0;

741 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£ndto(%d, d©a=%p, sh‹t_size=%d"
U16_F
", flags=0x%xÅo=",

742 
s
, 
d©a
, 
sh‹t_size
, 
Êags
));

743 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

744 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
ªmŸe_p‹t
));

747 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


749 i‡(
	`√tbuf_Æloc
(&
buf
, 
sh‹t_size
Ë=
NULL
) {

750 
îr
 = 
ERR_MEM
;

752 
îr
 = 
	`√tbuf_èke
(&
buf
, 
d©a
, 
sh‹t_size
);

755 
îr
 = 
	`√tbuf_ªf
(&
buf
, 
d©a
, 
sh‹t_size
);

757 i‡(
îr
 =
ERR_OK
) {

759 
îr
 = 
	`√tc⁄n_£nd
(
sock
->
c⁄n
, &
buf
);

763 
	`√tbuf_‰ì
(&
buf
);

765 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

766  (
îr
 =
ERR_OK
 ? 
sh‹t_size
 : -1);

767 
	}
}

770 
	$lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

772 
√tc⁄n
 *
c⁄n
;

773 
i
;

775 
	`LWIP_UNUSED_ARG
(
domaö
);

778 
ty≥
) {

779 
SOCK_RAW
:

780 
c⁄n
 = 
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
NETCONN_RAW
, (
u8_t
)
¥Ÿocﬁ
, 
evít_ˇŒback
);

781 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_RAW, %d) = ",

782 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

784 
SOCK_DGRAM
:

785 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
–(
¥Ÿocﬁ
 =
IPPROTO_UDPLITE
) ?

786 
NETCONN_UDPLITE
 : 
NETCONN_UDP
, 
evít_ˇŒback
);

787 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",

788 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

790 
SOCK_STREAM
:

791 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
(
NETCONN_TCP
, 
evít_ˇŒback
);

792 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_STREAM, %d) = ",

793 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

796 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",

797 
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

798 
	`£t_î∫o
(
EINVAL
);

802 i‡(!
c⁄n
) {

803 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("-1 / ENOBUFS (couldÇot createÇetconn)\n"));

804 
	`£t_î∫o
(
ENOBUFS
);

808 
i
 = 
	`Æloc_sockë
(
c⁄n
);

810 i‡(
i
 == -1) {

811 
	`√tc⁄n_dñëe
(
c⁄n
);

812 
	`£t_î∫o
(
ENFILE
);

815 
c⁄n
->
sockë
 = 
i
;

816 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("%d\n", 
i
));

817 
	`£t_î∫o
(0);

818  
i
;

819 
	}
}

822 
	$lwù_wrôe
(
s
, c⁄° *
d©a
, 
size_t
 
size
)

824  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 0);

825 
	}
}

843 
	$lwù_£lsˇn
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
)

845 
i
, 
ƒódy
 = 0;

846 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

847 
lwù_sockë
 *
p_sock
;

849 
	`FD_ZERO
(&
Ãód£t
);

850 
	`FD_ZERO
(&
lwrôe£t
);

851 
	`FD_ZERO
(&
Àx˚±£t
);

855 
i
 = 0; i < 
maxfdp1
; i++) {

856 i‡(
	`FD_ISSET
(
i
, 
ªad£t
)) {

858 
p_sock
 = 
	`gë_sockë
(
i
);

859 i‡(
p_sock
 && (p_sock->
œ°d©a
 || (p_sock->
rcvevít
 > 0))) {

860 
	`FD_SET
(
i
, &
Ãód£t
);

861 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Ñódög\n", 
i
));

862 
ƒódy
++;

865 i‡(
	`FD_ISSET
(
i
, 
wrôe£t
)) {

867 
p_sock
 = 
	`gë_sockë
(
i
);

868 i‡(
p_sock
 &&Ö_sock->
£ndevít
) {

869 
	`FD_SET
(
i
, &
lwrôe£t
);

870 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹ wrôög\n", 
i
));

871 
ƒódy
++;

875 *
ªad£t
 = 
Ãód£t
;

876 *
wrôe£t
 = 
lwrôe£t
;

877 
	`FD_ZERO
(
ex˚±£t
);

879  
ƒódy
;

880 
	}
}

887 
	$lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

888 
timevÆ
 *
timeout
)

890 
i
;

891 
ƒódy
;

892 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

893 
u32_t
 
m£˘imeout
;

894 
lwù_£À˘_cb
 
£À˘_cb
;

895 
lwù_£À˘_cb
 *
p_£lcb
;

897 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select(%d, %p, %p, %p,Åvsec=%ldÅvusec=%ld)\n",

898 
maxfdp1
, (*)
ªad£t
, (*Ë
wrôe£t
, (*Ë
ex˚±£t
,

899 
timeout
 ? (Èimeout->
tv_£c
 : ()-1,

900 
timeout
 ? (Èimeout->
tv_u£c
 : ()-1));

902 
£À˘_cb
.
√xt
 = 0;

903 
£À˘_cb
.
ªad£t
 =Ñeadset;

904 
£À˘_cb
.
wrôe£t
 = writeset;

905 
£À˘_cb
.
ex˚±£t
 =Éxceptset;

906 
£À˘_cb
.
£m_sig«Œed
 = 0;

909 
	`sys_£m_waô
(
£À˘£m
);

911 i‡(
ªad£t
)

912 
Ãód£t
 = *
ªad£t
;

914 
	`FD_ZERO
(&
Ãód£t
);

915 i‡(
wrôe£t
)

916 
lwrôe£t
 = *
wrôe£t
;

918 
	`FD_ZERO
(&
lwrôe£t
);

919 i‡(
ex˚±£t
)

920 
Àx˚±£t
 = *
ex˚±£t
;

922 
	`FD_ZERO
(&
Àx˚±£t
);

926 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

929 i‡(!
ƒódy
) {

930 i‡(
timeout
 &&Åimeout->
tv_£c
 =0 &&Åimeout->
tv_u£c
 == 0) {

931 
	`sys_£m_sig«l
(
£À˘£m
);

932 i‡(
ªad£t
)

933 
	`FD_ZERO
(
ªad£t
);

934 i‡(
wrôe£t
)

935 
	`FD_ZERO
(
wrôe£t
);

936 i‡(
ex˚±£t
)

937 
	`FD_ZERO
(
ex˚±£t
);

939 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÇoÅimeout,Ñeturning 0\n"));

940 
	`£t_î∫o
(0);

950 
£À˘_cb
.
£m
 = 
	`sys_£m_√w
(0);

953 
£À˘_cb
.
√xt
 = 
£À˘_cb_li°
;

954 
£À˘_cb_li°
 = &
£À˘_cb
;

957 
	`sys_£m_sig«l
(
£À˘£m
);

960 i‡(
timeout
 == 0)

962 
m£˘imeout
 = 0;

964 
m£˘imeout
 = ((
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 500)/1000));

965 if(
m£˘imeout
 == 0)

966 
m£˘imeout
 = 1;

969 
i
 = 
	`sys_£m_waô_timeout
(
£À˘_cb
.
£m
, 
m£˘imeout
);

972 
	`sys_£m_waô
(
£À˘£m
);

973 i‡(
£À˘_cb_li°
 =&
£À˘_cb
)

974 
£À˘_cb_li°
 = 
£À˘_cb
.
√xt
;

976 
p_£lcb
 = 
£À˘_cb_li°
;Ö_£lcb;Ö_£lcb =Ö_£lcb->
√xt
) {

977 i‡(
p_£lcb
->
√xt
 =&
£À˘_cb
) {

978 
p_£lcb
->
√xt
 = 
£À˘_cb
.next;

983 
	`sys_£m_sig«l
(
£À˘£m
);

985 
	`sys_£m_‰ì
(
£À˘_cb
.
£m
);

986 i‡(
i
 == 0) {

988 i‡(
ªad£t
)

989 
	`FD_ZERO
(
ªad£t
);

990 i‡(
wrôe£t
)

991 
	`FD_ZERO
(
wrôe£t
);

992 i‡(
ex˚±£t
)

993 
	`FD_ZERO
(
ex˚±£t
);

995 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÅimeoutÉxpired\n"));

996 
	`£t_î∫o
(0);

1001 i‡(
ªad£t
)

1002 
Ãód£t
 = *
ªad£t
;

1004 
	`FD_ZERO
(&
Ãód£t
);

1005 i‡(
wrôe£t
)

1006 
lwrôe£t
 = *
wrôe£t
;

1008 
	`FD_ZERO
(&
lwrôe£t
);

1009 i‡(
ex˚±£t
)

1010 
Àx˚±£t
 = *
ex˚±£t
;

1012 
	`FD_ZERO
(&
Àx˚±£t
);

1015 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

1017 
	`sys_£m_sig«l
(
£À˘£m
);

1019 i‡(
ªad£t
)

1020 *
ªad£t
 = 
Ãód£t
;

1021 i‡(
wrôe£t
)

1022 *
wrôe£t
 = 
lwrôe£t
;

1023 i‡(
ex˚±£t
)

1024 *
ex˚±£t
 = 
Àx˚±£t
;

1026 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘:Çªady=%d\n", 
ƒódy
));

1027 
	`£t_î∫o
(0);

1029  
ƒódy
;

1030 
	}
}

1037 
	$evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
)

1039 
s
;

1040 
lwù_sockë
 *
sock
;

1041 
lwù_£À˘_cb
 *
scb
;

1043 
	`LWIP_UNUSED_ARG
(
Àn
);

1046 i‡(
c⁄n
) {

1047 
s
 = 
c⁄n
->
sockë
;

1048 i‡(
s
 < 0) {

1054 
	`sys_£m_waô
(
sock£m
);

1055 i‡(
c⁄n
->
sockë
 < 0) {

1056 i‡(
evt
 =
NETCONN_EVT_RCVPLUS
) {

1057 
c⁄n
->
sockë
--;

1059 
	`sys_£m_sig«l
(
sock£m
);

1062 
	`sys_£m_sig«l
(
sock£m
);

1065 
sock
 = 
	`gë_sockë
(
s
);

1066 i‡(!
sock
) {

1073 
	`sys_£m_waô
(
£À˘£m
);

1075 
evt
) {

1076 
NETCONN_EVT_RCVPLUS
:

1077 
sock
->
rcvevít
++;

1079 
NETCONN_EVT_RCVMINUS
:

1080 
sock
->
rcvevít
--;

1082 
NETCONN_EVT_SENDPLUS
:

1083 
sock
->
£ndevít
 = 1;

1085 
NETCONN_EVT_SENDMINUS
:

1086 
sock
->
£ndevít
 = 0;

1089 
	`LWIP_ASSERT
("unknownÉvent", 0);

1092 
	`sys_£m_sig«l
(
£À˘£m
);

1102 
	`sys_£m_waô
(
£À˘£m
);

1103 
scb
 = 
£À˘_cb_li°
; scb; scb = scb->
√xt
) {

1104 i‡(
scb
->
£m_sig«Œed
 == 0) {

1106 i‡(
scb
->
ªad£t
 && 
	`FD_ISSET
(
s
, scb->readset))

1107 i‡(
sock
->
rcvevít
 > 0)

1109 i‡(
scb
->
wrôe£t
 && 
	`FD_ISSET
(
s
, scb->writeset))

1110 i‡(
sock
->
£ndevít
)

1114 i‡(
scb
) {

1115 
scb
->
£m_sig«Œed
 = 1;

1116 
	`sys_£m_sig«l
(
scb
->
£m
);

1117 
	`sys_£m_sig«l
(
£À˘£m
);

1119 
	`sys_£m_sig«l
(
£À˘£m
);

1123 
	}
}

1130 
	$lwù_shutdown
(
s
, 
how
)

1132 
	`LWIP_UNUSED_ARG
(
how
);

1133 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_shutdown(%d, how=%d)\n", 
s
, 
how
));

1134  
	`lwù_˛o£
(
s
);

1135 
	}
}

1138 
	$lwù_gëadd∫ame
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
, 
u8_t
 
loˇl
)

1140 
lwù_sockë
 *
sock
;

1141 
sockaddr_ö
 
sö
;

1142 
ù_addr
 
«ddr
;

1144 
sock
 = 
	`gë_sockë
(
s
);

1145 i‡(!
sock
)

1148 
	`mem£t
(&
sö
, 0, (sin));

1149 
sö
.
sö_Àn
 = (sin);

1150 
sö
.
sö_Ámûy
 = 
AF_INET
;

1153 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, &
«ddr
, &
sö
.
sö_p‹t
, 
loˇl
);

1155 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gëadd∫ame(%d,áddr=", 
s
));

1156 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

1157 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
sö
.
sö_p‹t
));

1159 
sö
.
sö_p‹t
 = 
	`ht⁄s
(sin.sin_port);

1160 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

1162 i‡(*
«mñí
 > (
sö
))

1163 *
«mñí
 = (
sö
);

1165 
	`MEMCPY
(
«me
, &
sö
, *
«mñí
);

1166 
	`sock_£t_î∫o
(
sock
, 0);

1168 
	}
}

1171 
	$lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1173  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 0);

1174 
	}
}

1177 
	$lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1179  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 1);

1180 
	}
}

1183 
	$lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
)

1185 
îr_t
 
îr
 = 
ERR_OK
;

1186 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1187 
lwù_£tgësock›t_d©a
 
d©a
;

1189 i‡(!
sock
)

1192 i‡((
NULL
 =
›tvÆ
Ë|| (NULL =
›éí
)) {

1193 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1198 
Àvñ
) {

1201 
SOL_SOCKET
:

1202 
›äame
) {

1204 
SO_ACCEPTCONN
:

1205 
SO_BROADCAST
:

1208 
SO_ERROR
:

1209 
SO_KEEPALIVE
:

1212 #i‡
LWIP_SO_RCVTIMEO


1213 
SO_RCVTIMEO
:

1215 #i‡
LWIP_SO_RCVBUF


1216 
SO_RCVBUF
:

1222 #i‡
SO_REUSE


1223 
SO_REUSEADDR
:

1224 
SO_REUSEPORT
:

1226 
SO_TYPE
:

1228 i‡(*
›éí
 < ()) {

1229 
îr
 = 
EINVAL
;

1233 
SO_NO_CHECK
:

1234 i‡(*
›éí
 < ()) {

1235 
îr
 = 
EINVAL
;

1237 #i‡
LWIP_UDP


1238 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1239 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1241 
îr
 = 
EAFNOSUPPORT
;

1247 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1248 
s
, 
›äame
));

1249 
îr
 = 
ENOPROTOOPT
;

1254 
IPPROTO_IP
:

1255 
›äame
) {

1259 
IP_TTL
:

1260 
IP_TOS
:

1261 i‡(*
›éí
 < ()) {

1262 
îr
 = 
EINVAL
;

1265 #i‡
LWIP_IGMP


1266 
IP_MULTICAST_TTL
:

1267 i‡(*
›éí
 < (
u8_t
)) {

1268 
îr
 = 
EINVAL
;

1271 
IP_MULTICAST_IF
:

1272 i‡(*
›éí
 < (
ö_addr
)) {

1273 
îr
 = 
EINVAL
;

1279 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1280 
s
, 
›äame
));

1281 
îr
 = 
ENOPROTOOPT
;

1285 #i‡
LWIP_TCP


1287 
IPPROTO_TCP
:

1288 i‡(*
›éí
 < ()) {

1289 
îr
 = 
EINVAL
;

1294 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1297 
›äame
) {

1298 
TCP_NODELAY
:

1299 
TCP_KEEPALIVE
:

1300 #i‡
LWIP_TCP_KEEPALIVE


1301 
TCP_KEEPIDLE
:

1302 
TCP_KEEPINTVL
:

1303 
TCP_KEEPCNT
:

1308 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1309 
s
, 
›äame
));

1310 
îr
 = 
ENOPROTOOPT
;

1314 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1316 
IPPROTO_UDPLITE
:

1317 i‡(*
›éí
 < ()) {

1318 
îr
 = 
EINVAL
;

1323 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1326 
›äame
) {

1327 
UDPLITE_SEND_CSCOV
:

1328 
UDPLITE_RECV_CSCOV
:

1332 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1333 
s
, 
›äame
));

1334 
îr
 = 
ENOPROTOOPT
;

1340 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1341 
s
, 
Àvñ
, 
›äame
));

1342 
îr
 = 
ENOPROTOOPT
;

1346 i‡(
îr
 !
ERR_OK
) {

1347 
	`sock_£t_î∫o
(
sock
, 
îr
);

1352 
d©a
.
sock
 = sock;

1353 
d©a
.
Àvñ
 =Üevel;

1354 
d©a
.
›äame
 = optname;

1355 
d©a
.
›tvÆ
 = optval;

1356 
d©a
.
›éí
 = optlen;

1357 
d©a
.
îr
 =Érr;

1358 
	`t˝ù_ˇŒback
(
lwù_gësock›t_öã∫Æ
, &
d©a
);

1359 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1361 
îr
 = 
d©a
.err;

1363 
	`sock_£t_î∫o
(
sock
, 
îr
);

1364  
îr
 ? -1 : 0;

1365 
	}
}

1368 
	$lwù_gësock›t_öã∫Æ
(*
¨g
)

1370 
lwù_sockë
 *
sock
;

1371 #ifde‡
LWIP_DEBUG


1372 
s
;

1374 
Àvñ
, 
›äame
;

1375 *
›tvÆ
;

1376 
lwù_£tgësock›t_d©a
 *
d©a
;

1378 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1380 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1381 
sock
 = 
d©a
->sock;

1382 #ifde‡
LWIP_DEBUG


1383 
s
 = 
d©a
->s;

1385 
Àvñ
 = 
d©a
->level;

1386 
›äame
 = 
d©a
->optname;

1387 
›tvÆ
 = 
d©a
->optval;

1389 
Àvñ
) {

1392 
SOL_SOCKET
:

1393 
›äame
) {

1396 
SO_ACCEPTCONN
:

1397 
SO_BROADCAST
:

1400 
SO_KEEPALIVE
:

1402 #i‡
SO_REUSE


1403 
SO_REUSEADDR
:

1404 
SO_REUSEPORT
:

1407 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 & 
›äame
;

1408 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",

1409 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1412 
SO_TYPE
:

1413 
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
)) {

1414 
NETCONN_RAW
:

1415 *(*)
›tvÆ
 = 
SOCK_RAW
;

1417 
NETCONN_TCP
:

1418 *(*)
›tvÆ
 = 
SOCK_STREAM
;

1420 
NETCONN_UDP
:

1421 *(*)
›tvÆ
 = 
SOCK_DGRAM
;

1424 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ty≥
;

1425 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
,

1427 
s
, *(*)
›tvÆ
));

1429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",

1430 
s
, *(*)
›tvÆ
));

1433 
SO_ERROR
:

1434 i‡(
sock
->
îr
 == 0) {

1435 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

1437 *(*)
›tvÆ
 = 
sock
->
îr
;

1438 
sock
->
îr
 = 0;

1439 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",

1440 
s
, *(*)
›tvÆ
));

1443 #i‡
LWIP_SO_RCVTIMEO


1444 
SO_RCVTIMEO
:

1445 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_timeout
;

1448 #i‡
LWIP_SO_RCVBUF


1449 
SO_RCVBUF
:

1450 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_bufsize
;

1453 #i‡
LWIP_UDP


1454 
SO_NO_CHECK
:

1455 *(*)
›tvÆ
 = (
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_NOCHKSUM
) ? 1 : 0;

1462 
IPPROTO_IP
:

1463 
›äame
) {

1464 
IP_TTL
:

1465 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1466 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",

1467 
s
, *(*)
›tvÆ
));

1469 
IP_TOS
:

1470 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
tos
;

1471 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",

1472 
s
, *(*)
›tvÆ
));

1474 #i‡
LWIP_IGMP


1475 
IP_MULTICAST_TTL
:

1476 *(
u8_t
*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1477 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",

1478 
s
, *(*)
›tvÆ
));

1480 
IP_MULTICAST_IF
:

1481 ((
ö_addr
*Ë
›tvÆ
)->
s_addr
 = 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
;

1482 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gësock›t(%d, IPPROTO_IP, IP_MULTICAST_IFË0x%"
X32_F
"\n",

1483 
s
, *(
u32_t
 *)
›tvÆ
));

1489 #i‡
LWIP_TCP


1491 
IPPROTO_TCP
:

1492 
›äame
) {

1493 
TCP_NODELAY
:

1494 *(*)
›tvÆ
 = (
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 & 
TF_NODELAY
);

1495 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",

1496 
s
, (*(*)
›tvÆ
)?"on":"off") );

1498 
TCP_KEEPALIVE
:

1499 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
;

1500 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",

1501 
s
, *(*)
›tvÆ
));

1504 #i‡
LWIP_TCP_KEEPALIVE


1505 
TCP_KEEPIDLE
:

1506 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
/1000);

1507 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",

1508 
s
, *(*)
›tvÆ
));

1510 
TCP_KEEPINTVL
:

1511 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
/1000);

1512 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",

1513 
s
, *(*)
›tvÆ
));

1515 
TCP_KEEPCNT
:

1516 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
;

1517 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",

1518 
s
, *(*)
›tvÆ
));

1525 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1527 
IPPROTO_UDPLITE
:

1528 
›äame
) {

1529 
UDPLITE_SEND_CSCOV
:

1530 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
;

1531 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",

1532 
s
, (*(*)
›tvÆ
)) );

1534 
UDPLITE_RECV_CSCOV
:

1535 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
;

1536 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",

1537 
s
, (*(*)
›tvÆ
)) );

1543 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1544 
	}
}

1547 
	$lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

1549 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1550 
îr
 = 
ERR_OK
;

1551 
lwù_£tgësock›t_d©a
 
d©a
;

1553 i‡(!
sock
)

1556 i‡(
NULL
 =
›tvÆ
) {

1557 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1562 
Àvñ
) {

1565 
SOL_SOCKET
:

1566 
›äame
) {

1568 
SO_BROADCAST
:

1571 
SO_KEEPALIVE
:

1574 #i‡
LWIP_SO_RCVTIMEO


1575 
SO_RCVTIMEO
:

1577 #i‡
LWIP_SO_RCVBUF


1578 
SO_RCVBUF
:

1584 #i‡
SO_REUSE


1585 
SO_REUSEADDR
:

1586 
SO_REUSEPORT
:

1589 i‡(
›éí
 < ()) {

1590 
îr
 = 
EINVAL
;

1593 
SO_NO_CHECK
:

1594 i‡(
›éí
 < ()) {

1595 
îr
 = 
EINVAL
;

1597 #i‡
LWIP_UDP


1598 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1599 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1601 
îr
 = 
EAFNOSUPPORT
;

1606 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1607 
s
, 
›äame
));

1608 
îr
 = 
ENOPROTOOPT
;

1613 
IPPROTO_IP
:

1614 
›äame
) {

1618 
IP_TTL
:

1619 
IP_TOS
:

1620 i‡(
›éí
 < ()) {

1621 
îr
 = 
EINVAL
;

1624 #i‡
LWIP_IGMP


1625 
IP_MULTICAST_TTL
:

1626 i‡(
›éí
 < (
u8_t
)) {

1627 
îr
 = 
EINVAL
;

1629 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1630 
îr
 = 
EAFNOSUPPORT
;

1633 
IP_MULTICAST_IF
:

1634 i‡(
›éí
 < (
ö_addr
)) {

1635 
îr
 = 
EINVAL
;

1637 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1638 
îr
 = 
EAFNOSUPPORT
;

1641 
IP_ADD_MEMBERSHIP
:

1642 
IP_DROP_MEMBERSHIP
:

1643 i‡(
›éí
 < (
ù_mªq
)) {

1644 
îr
 = 
EINVAL
;

1646 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1647 
îr
 = 
EAFNOSUPPORT
;

1652 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1653 
s
, 
›äame
));

1654 
îr
 = 
ENOPROTOOPT
;

1658 #i‡
LWIP_TCP


1660 
IPPROTO_TCP
:

1661 i‡(
›éí
 < ()) {

1662 
îr
 = 
EINVAL
;

1667 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1670 
›äame
) {

1671 
TCP_NODELAY
:

1672 
TCP_KEEPALIVE
:

1673 #i‡
LWIP_TCP_KEEPALIVE


1674 
TCP_KEEPIDLE
:

1675 
TCP_KEEPINTVL
:

1676 
TCP_KEEPCNT
:

1681 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1682 
s
, 
›äame
));

1683 
îr
 = 
ENOPROTOOPT
;

1687 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1689 
IPPROTO_UDPLITE
:

1690 i‡(
›éí
 < ()) {

1691 
îr
 = 
EINVAL
;

1696 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1699 
›äame
) {

1700 
UDPLITE_SEND_CSCOV
:

1701 
UDPLITE_RECV_CSCOV
:

1705 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1706 
s
, 
›äame
));

1707 
îr
 = 
ENOPROTOOPT
;

1713 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1714 
s
, 
Àvñ
, 
›äame
));

1715 
îr
 = 
ENOPROTOOPT
;

1719 i‡(
îr
 !
ERR_OK
) {

1720 
	`sock_£t_î∫o
(
sock
, 
îr
);

1726 
d©a
.
sock
 = sock;

1727 
d©a
.
Àvñ
 =Üevel;

1728 
d©a
.
›äame
 = optname;

1729 
d©a
.
›tvÆ
 = (*)optval;

1730 
d©a
.
›éí
 = &optlen;

1731 
d©a
.
îr
 =Érr;

1732 
	`t˝ù_ˇŒback
(
lwù_£tsock›t_öã∫Æ
, &
d©a
);

1733 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1735 
îr
 = 
d©a
.err;

1737 
	`sock_£t_î∫o
(
sock
, 
îr
);

1738  
îr
 ? -1 : 0;

1739 
	}
}

1742 
	$lwù_£tsock›t_öã∫Æ
(*
¨g
)

1744 
lwù_sockë
 *
sock
;

1745 #ifde‡
LWIP_DEBUG


1746 
s
;

1748 
Àvñ
, 
›äame
;

1749 c⁄° *
›tvÆ
;

1750 
lwù_£tgësock›t_d©a
 *
d©a
;

1752 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1754 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1755 
sock
 = 
d©a
->sock;

1756 #ifde‡
LWIP_DEBUG


1757 
s
 = 
d©a
->s;

1759 
Àvñ
 = 
d©a
->level;

1760 
›äame
 = 
d©a
->optname;

1761 
›tvÆ
 = 
d©a
->optval;

1763 
Àvñ
) {

1766 
SOL_SOCKET
:

1767 
›äame
) {

1770 
SO_BROADCAST
:

1773 
SO_KEEPALIVE
:

1775 #i‡
SO_REUSE


1776 
SO_REUSEADDR
:

1777 
SO_REUSEPORT
:

1780 i‡(*(*)
›tvÆ
) {

1781 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 |
›äame
;

1783 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 &~
›äame
;

1785 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",

1786 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1788 #i‡
LWIP_SO_RCVTIMEO


1789 
SO_RCVTIMEO
:

1790 
sock
->
c⁄n
->
ªcv_timeout
 = ( *(*)
›tvÆ
 );

1793 #i‡
LWIP_SO_RCVBUF


1794 
SO_RCVBUF
:

1795 
sock
->
c⁄n
->
ªcv_bufsize
 = ( *(*)
›tvÆ
 );

1798 #i‡
LWIP_UDP


1799 
SO_NO_CHECK
:

1800 i‡(*(*)
›tvÆ
) {

1801 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_NOCHKSUM
);

1803 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_NOCHKSUM
);

1811 
IPPROTO_IP
:

1812 
›äame
) {

1813 
IP_TTL
:

1814 
sock
->
c⁄n
->
pcb
.
ù
->
âl
 = (
u8_t
)(*(*)
›tvÆ
);

1815 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",

1816 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
âl
));

1818 
IP_TOS
:

1819 
sock
->
c⁄n
->
pcb
.
ù
->
tos
 = (
u8_t
)(*(*)
›tvÆ
);

1820 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",

1821 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
tos
));

1823 #i‡
LWIP_IGMP


1824 
IP_MULTICAST_TTL
:

1825 
sock
->
c⁄n
->
pcb
.
udp
->
âl
 = (
u8_t
)(*(u8_t*)
›tvÆ
);

1827 
IP_MULTICAST_IF
:

1828 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
 = ((
ö_addr
*Ë
›tvÆ
)->
s_addr
;

1830 
IP_ADD_MEMBERSHIP
:

1831 
IP_DROP_MEMBERSHIP
:

1834 
ù_mªq
 *
imr
 = (ù_mªq *)
›tvÆ
;

1835 if(
›äame
 =
IP_ADD_MEMBERSHIP
){

1836 
d©a
->
îr
 = 
	`igmp_joögroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1838 
d©a
->
îr
 = 
	`igmp_Àavegroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1840 if(
d©a
->
îr
 !
ERR_OK
) {

1841 
d©a
->
îr
 = 
EADDRNOTAVAIL
;

1849 #i‡
LWIP_TCP


1851 
IPPROTO_TCP
:

1852 
›äame
) {

1853 
TCP_NODELAY
:

1854 i‡(*(*)
›tvÆ
) {

1855 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 |
TF_NODELAY
;

1857 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 &~
TF_NODELAY
;

1859 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",

1860 
s
, (*(*)
›tvÆ
)?"on":"off") );

1862 
TCP_KEEPALIVE
:

1863 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = (
u32_t
)(*(*)
›tvÆ
);

1864 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPALIVEË-> %"
U32_F
"\n",

1865 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1868 #i‡
LWIP_TCP_KEEPALIVE


1869 
TCP_KEEPIDLE
:

1870 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1871 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPIDLEË-> %"
U32_F
"\n",

1872 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1874 
TCP_KEEPINTVL
:

1875 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1876 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPINTVLË-> %"
U32_F
"\n",

1877 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
));

1879 
TCP_KEEPCNT
:

1880 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
 = (
u32_t
)(*(*)
›tvÆ
);

1881 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPCNTË-> %"
U32_F
"\n",

1882 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
));

1889 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1891 
IPPROTO_UDPLITE
:

1892 
›äame
) {

1893 
UDPLITE_SEND_CSCOV
:

1894 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1896 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = 8;

1898 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = *(*)
›tvÆ
;

1900 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",

1901 
s
, (*(*)
›tvÆ
)) );

1903 
UDPLITE_RECV_CSCOV
:

1904 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1906 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = 8;

1908 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = *(*)
›tvÆ
;

1910 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",

1911 
s
, (*(*)
›tvÆ
)) );

1917 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1918 
	}
}

1921 
	$lwù_io˘l
(
s
, 
cmd
, *
¨gp
)

1923 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1924 
u16_t
 
buÊí
 = 0;

1925 
s16_t
 
ªcv_avaû
;

1927 i‡(!
sock
)

1930 
cmd
) {

1931 
FIONREAD
:

1932 i‡(!
¨gp
) {

1933 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

1937 
	`SYS_ARCH_GET
(
sock
->
c⁄n
->
ªcv_avaû
,Ñecv_avail);

1938 i‡(
ªcv_avaû
 < 0)

1939 
ªcv_avaû
 = 0;

1940 *((
u16_t
*)
¨gp
Ë(u16_t)
ªcv_avaû
;

1943 i‡(
sock
->
œ°d©a
) {

1944 
buÊí
 = 
	`√tbuf_Àn
(
sock
->
œ°d©a
);

1945 
buÊí
 -
sock
->
œ°off£t
;

1947 *((
u16_t
*)
¨gp
Ë+
buÊí
;

1950 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONREAD, %pË%"
U16_F
"\n", 
s
, 
¨gp
, *((
u16_t
*)argp)));

1951 
	`sock_£t_î∫o
(
sock
, 0);

1954 
FIONBIO
:

1955 i‡(
¨gp
 && *(
u32_t
*)argp)

1956 
sock
->
Êags
 |
O_NONBLOCK
;

1958 
sock
->
Êags
 &~
O_NONBLOCK
;

1959 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONBIO, %d)\n", 
s
, !!(
sock
->
Êags
 & 
O_NONBLOCK
)));

1960 
	`sock_£t_î∫o
(
sock
, 0);

1964 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, UNIMPL: 0x%lx, %p)\n", 
s
, 
cmd
, 
¨gp
));

1965 
	`sock_£t_î∫o
(
sock
, 
ENOSYS
);

1968 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/api/tcpip.c

39 
	~"lwù/›t.h
"

41 #i‡!
NO_SYS


43 
	~"lwù/sys.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù_‰ag.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/autoù.h
"

49 
	~"lwù/dh˝.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/dns.h
"

52 
	~"lwù/t˝ù.h
"

53 
	~"lwù/öô.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"√tif/µp_€.h
"

58 (* 
t˝ù_öô_d⁄e
)(*
¨g
);

59 *
t˝ù_öô_d⁄e_¨g
;

60 
sys_mbox_t
 
mbox
 = 
SYS_MBOX_NULL
;

62 #i‡
LWIP_TCPIP_CORE_LOCKING


64 
sys_£m_t
 
lock_t˝ù_c‹e
;

67 #i‡
LWIP_TCP


69 
t˝ù_t˝_timî_a˘ive
;

77 
	$t˝ù_t˝_timî
(*
¨g
)

79 
	`LWIP_UNUSED_ARG
(
¨g
);

82 
	`t˝_tmr
();

84 i‡(
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
) {

86 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

89 
t˝ù_t˝_timî_a˘ive
 = 0;

91 
	}
}

93 #i‡!
NO_SYS


100 
	$t˝_timî_√eded
()

103 i‡(!
t˝ù_t˝_timî_a˘ive
 && (
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
)) {

105 
t˝ù_t˝_timî_a˘ive
 = 1;

106 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

108 
	}
}

112 #i‡
IP_REASSEMBLY


119 
	$ù_ªass_timî
(*
¨g
)

121 
	`LWIP_UNUSED_ARG
(
¨g
);

122 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

123 
	`ù_ªass_tmr
();

124 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

125 
	}
}

128 #i‡
LWIP_ARP


135 
	$¨p_timî
(*
¨g
)

137 
	`LWIP_UNUSED_ARG
(
¨g
);

138 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:Étharp_tmr()\n"));

139 
	`ëh¨p_tmr
();

140 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

141 
	}
}

144 #i‡
LWIP_DHCP


151 
	$dh˝_timî_cﬂr£
(*
¨g
)

153 
	`LWIP_UNUSED_ARG
(
¨g
);

154 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

155 
	`dh˝_cﬂr£_tmr
();

156 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

157 
	}
}

165 
	$dh˝_timî_föe
(*
¨g
)

167 
	`LWIP_UNUSED_ARG
(
¨g
);

168 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

169 
	`dh˝_föe_tmr
();

170 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

171 
	}
}

174 #i‡
LWIP_AUTOIP


181 
	$autoù_timî
(*
¨g
)

183 
	`LWIP_UNUSED_ARG
(
¨g
);

184 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:áutoip_tmr()\n"));

185 
	`autoù_tmr
();

186 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

187 
	}
}

190 #i‡
LWIP_IGMP


197 
	$igmp_timî
(*
¨g
)

199 
	`LWIP_UNUSED_ARG
(
¨g
);

200 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: igmp_tmr()\n"));

201 
	`igmp_tmr
();

202 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

203 
	}
}

206 #i‡
LWIP_DNS


213 
	$dns_timî
(*
¨g
)

215 
	`LWIP_UNUSED_ARG
(
¨g
);

216 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dns_tmr()\n"));

217 
	`dns_tmr
();

218 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

219 
	}
}

233 
	$t˝ù_thªad
(*
¨g
)

235 
t˝ù_msg
 *
msg
;

236 
	`LWIP_UNUSED_ARG
(
¨g
);

238 #i‡
IP_REASSEMBLY


239 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

241 #i‡
LWIP_ARP


242 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

244 #i‡
LWIP_DHCP


245 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

246 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

248 #i‡
LWIP_AUTOIP


249 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

251 #i‡
LWIP_IGMP


252 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

254 #i‡
LWIP_DNS


255 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

258 i‡(
t˝ù_öô_d⁄e
 !
NULL
) {

259 
	`t˝ù_öô_d⁄e
(
t˝ù_öô_d⁄e_¨g
);

262 
	`LOCK_TCPIP_CORE
();

264 
	`sys_mbox_„tch
(
mbox
, (*)&
msg
);

265 
msg
->
ty≥
) {

266 #i‡
LWIP_NETCONN


267 
TCPIP_MSG_API
:

268 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: API mesßgê%p\n", (*)
msg
));

269 
msg
->msg.
≠imsg
->
	`fun˘i⁄
(&(msg->msg.apimsg->msg));

273 
TCPIP_MSG_INPKT
:

274 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: PACKET %p\n", (*)
msg
));

275 #i‡
LWIP_ARP


276 i‡(
msg
->msg.
öp
.
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

277 
	`ëhî√t_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

280 { 
	`ù_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

282 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

285 #i‡
LWIP_NETIF_API


286 
TCPIP_MSG_NETIFAPI
:

287 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: Nëi‡API mesßgê%p\n", (*)
msg
));

288 
msg
->msg.
√tiÁpimsg
->
	`fun˘i⁄
(&(msg->msg.netifapimsg->msg));

292 
TCPIP_MSG_CALLBACK
:

293 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: CALLBACK %p\n", (*)
msg
));

294 
msg
->msg.
cb
.
	`f
(msg->msg.cb.
˘x
);

295 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

298 
TCPIP_MSG_TIMEOUT
:

299 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: TIMEOUT %p\n", (*)
msg
));

300 
	`sys_timeout
(
msg
->msg.
tmo
.
m£cs
, msg->msg.tmo.
h
, msg->msg.tmo.
¨g
);

301 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

303 
TCPIP_MSG_UNTIMEOUT
:

304 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: UNTIMEOUT %p\n", (*)
msg
));

305 
	`sys_u¡imeout
(
msg
->msg.
tmo
.
h
, msg->msg.tmo.
¨g
);

306 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

313 
	}
}

322 
îr_t


323 
	$t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

325 
t˝ù_msg
 *
msg
;

327 i‡(
mbox
 !
SYS_MBOX_NULL
) {

328 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_INPKT
);

329 i‡(
msg
 =
NULL
) {

330  
ERR_MEM
;

333 
msg
->
ty≥
 = 
TCPIP_MSG_INPKT
;

334 
msg
->msg.
öp
.
p
 =Ö;

335 
msg
->msg.
öp
.
√tif
 = inp;

336 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

337 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

338  
ERR_MEM
;

340  
ERR_OK
;

342  
ERR_VAL
;

343 
	}
}

356 
îr_t


357 
	$t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
)

359 
t˝ù_msg
 *
msg
;

361 i‡(
mbox
 !
SYS_MBOX_NULL
) {

362 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

363 i‡(
msg
 =
NULL
) {

364  
ERR_MEM
;

367 
msg
->
ty≥
 = 
TCPIP_MSG_CALLBACK
;

368 
msg
->msg.
cb
.
f
 = f;

369 
msg
->msg.
cb
.
˘x
 = ctx;

370 i‡(
block
) {

371 
	`sys_mbox_po°
(
mbox
, 
msg
);

373 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

374 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

375  
ERR_MEM
;

378  
ERR_OK
;

380  
ERR_VAL
;

381 
	}
}

391 
îr_t


392 
	$t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

394 
t˝ù_msg
 *
msg
;

396 i‡(
mbox
 !
SYS_MBOX_NULL
) {

397 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

398 i‡(
msg
 =
NULL
) {

399  
ERR_MEM
;

402 
msg
->
ty≥
 = 
TCPIP_MSG_TIMEOUT
;

403 
msg
->msg.
tmo
.
m£cs
 = msecs;

404 
msg
->msg.
tmo
.
h
 = h;

405 
msg
->msg.
tmo
.
¨g
 =árg;

406 
	`sys_mbox_po°
(
mbox
, 
msg
);

407  
ERR_OK
;

409  
ERR_VAL
;

410 
	}
}

420 
îr_t


421 
	$t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

423 
t˝ù_msg
 *
msg
;

425 i‡(
mbox
 !
SYS_MBOX_NULL
) {

426 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

427 i‡(
msg
 =
NULL
) {

428  
ERR_MEM
;

431 
msg
->
ty≥
 = 
TCPIP_MSG_UNTIMEOUT
;

432 
msg
->msg.
tmo
.
h
 = h;

433 
msg
->msg.
tmo
.
¨g
 =árg;

434 
	`sys_mbox_po°
(
mbox
, 
msg
);

435  
ERR_OK
;

437  
ERR_VAL
;

438 
	}
}

440 #i‡
LWIP_NETCONN


449 
îr_t


450 
	$t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
)

452 
t˝ù_msg
 
msg
;

454 i‡(
mbox
 !
SYS_MBOX_NULL
) {

455 
msg
.
ty≥
 = 
TCPIP_MSG_API
;

456 
msg
.msg.
≠imsg
 =ápimsg;

457 
	`sys_mbox_po°
(
mbox
, &
msg
);

458 
	`sys_¨ch_£m_waô
(
≠imsg
->
msg
.
c⁄n
->
›_com∂ëed
, 0);

459  
ERR_OK
;

461  
ERR_VAL
;

462 
	}
}

464 #i‡
LWIP_TCPIP_CORE_LOCKING


473 
îr_t


474 
	$t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
)

476 
	`LOCK_TCPIP_CORE
();

477 
≠imsg
->
	`fun˘i⁄
(&◊pimsg->
msg
));

478 
	`UNLOCK_TCPIP_CORE
();

479  
ERR_OK
;

481 
	}
}

485 #i‡
LWIP_NETIF_API


486 #i‡!
LWIP_TCPIP_CORE_LOCKING


494 
îr_t


495 
	$t˝ù_√tiÁpi
(
√tiÁpi_msg
* 
√tiÁpimsg
)

497 
t˝ù_msg
 
msg
;

499 i‡(
mbox
 !
SYS_MBOX_NULL
) {

500 
√tiÁpimsg
->
msg
.
£m
 = 
	`sys_£m_√w
(0);

501 i‡(
√tiÁpimsg
->
msg
.
£m
 =
SYS_SEM_NULL
) {

502 
√tiÁpimsg
->
msg
.
îr
 = 
ERR_MEM
;

503  
√tiÁpimsg
->
msg
.
îr
;

506 
msg
.
ty≥
 = 
TCPIP_MSG_NETIFAPI
;

507 
msg
.msg.
√tiÁpimsg
 =Çetifapimsg;

508 
	`sys_mbox_po°
(
mbox
, &
msg
);

509 
	`sys_£m_waô
(
√tiÁpimsg
->
msg
.
£m
);

510 
	`sys_£m_‰ì
(
√tiÁpimsg
->
msg
.
£m
);

511  
√tiÁpimsg
->
msg
.
îr
;

513  
ERR_VAL
;

514 
	}
}

524 
îr_t


525 
	$t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
* 
√tiÁpimsg
)

527 
	`LOCK_TCPIP_CORE
();

528 
√tiÁpimsg
->
	`fun˘i⁄
(&“ëiÁpimsg->
msg
));

529 
	`UNLOCK_TCPIP_CORE
();

530  
√tiÁpimsg
->
msg
.
îr
;

531 
	}
}

544 
	$t˝ù_öô
((* 
öôfunc
)(*), *
¨g
)

546 
	`lwù_öô
();

548 
t˝ù_öô_d⁄e
 = 
öôfunc
;

549 
t˝ù_öô_d⁄e_¨g
 = 
¨g
;

550 
mbox
 = 
	`sys_mbox_√w
(
TCPIP_MBOX_SIZE
);

551 #i‡
LWIP_TCPIP_CORE_LOCKING


552 
lock_t˝ù_c‹e
 = 
	`sys_£m_√w
(1);

555 
	`sys_thªad_√w
(
TCPIP_THREAD_NAME
, 
t˝ù_thªad
, 
NULL
, 
TCPIP_THREAD_STACKSIZE
, 
TCPIP_THREAD_PRIO
);

556 
	}
}

565 
	$pbuf_‰ì_öt
(*
p
)

567 
pbuf
 *
q
 = 
p
;

568 
	`pbuf_‰ì
(
q
);

569 
	}
}

577 
îr_t


578 
	$pbuf_‰ì_ˇŒback
(
pbuf
 *
p
)

580  
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_öt
, 
p
, 0);

581 
	}
}

590 
îr_t


591 
	$mem_‰ì_ˇŒback
(*
m
)

593  
	`t˝ù_ˇŒback_wôh_block
(
mem_‰ì
, 
m
, 0);

594 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/dhcp.c

71 
	~"lwù/›t.h
"

73 #i‡
LWIP_DHCP


75 
	~"lwù/°©s.h
"

76 
	~"lwù/mem.h
"

77 
	~"lwù/udp.h
"

78 
	~"lwù/ù_addr.h
"

79 
	~"lwù/√tif.h
"

80 
	~"lwù/öë.h
"

81 
	~"lwù/sys.h
"

82 
	~"lwù/dh˝.h
"

83 
	~"lwù/autoù.h
"

84 
	~"lwù/dns.h
"

85 
	~"√tif/ëh¨p.h
"

87 
	~<°rög.h
>

94 #ifde‡
DHCP_GLOBAL_XID_HEADER


95 #ö˛udê
DHCP_GLOBAL_XID_HEADER


100 
	#DHCP_MAX_MSG_LEN
(
√tif
Ë“ëif->
mtu
)

	)

101 
	#DHCP_MAX_MSG_LEN_MIN_REQUIRED
 576

	)

104 
dh˝_h™dÀ_ack
(
√tif
 *netif);

105 
dh˝_h™dÀ_«k
(
√tif
 *netif);

106 
dh˝_h™dÀ_of„r
(
√tif
 *netif);

108 
îr_t
 
dh˝_discovî
(
√tif
 *netif);

109 
îr_t
 
dh˝_£À˘
(
√tif
 *netif);

110 
dh˝_check
(
√tif
 *netif);

111 
dh˝_böd
(
√tif
 *netif);

112 #i‡
DHCP_DOES_ARP_CHECK


113 
îr_t
 
dh˝_de˛öe
(
√tif
 *netif);

115 
îr_t
 
dh˝_ªböd
(
√tif
 *netif);

116 
dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
);

119 
dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

120 
îr_t
 
dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp);

121 
u8_t
 *
dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, u8_à
›ti⁄_ty≥
);

122 
u8_t
 
dh˝_gë_›ti⁄_byã
(u8_à*
±r
);

124 
u16_t
 
dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
);

126 
u32_t
 
dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
);

127 
dh˝_‰ì_ª∂y
(
dh˝
 *dhcp);

130 
dh˝_timeout
(
√tif
 *netif);

131 
dh˝_t1_timeout
(
√tif
 *netif);

132 
dh˝_t2_timeout
(
√tif
 *netif);

136 
îr_t
 
dh˝_¸óã_ªque°
(
√tif
 *netif);

138 
dh˝_dñëe_ªque°
(
√tif
 *netif);

140 
dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
);

142 
dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
);

143 
dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
);

144 
dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
);

146 
dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp);

161 
	$dh˝_h™dÀ_«k
(
√tif
 *netif)

163 
dh˝
 *dh˝ = 
√tif
->dhcp;

164 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_«k“ëif=%pË%c%c%"
U16_F
"\n",

165 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

167 
	`√tif_£t_down
(
√tif
);

169 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

170 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

171 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

173 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

175 
	`dh˝_discovî
(
√tif
);

176 
	}
}

188 
	$dh˝_check
(
√tif
 *netif)

190 
dh˝
 *dh˝ = 
√tif
->dhcp;

191 
îr_t
 
ªsu…
;

192 
u16_t
 
m£cs
;

193 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_check“ëif=%pË%c%c\n", (*)
√tif
, (
s16_t
Íëif->
«me
[0],

194 (
s16_t
)
√tif
->
«me
[1]));

195 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_CHECKING
);

198 
ªsu…
 = 
	`ëh¨p_quîy
(
√tif
, &
dh˝
->
of„ªd_ù_addr
, 
NULL
);

199 i‡(
ªsu…
 !
ERR_OK
) {

200 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_check: couldÇotÖerform ARP query\n"));

202 
dh˝
->
åõs
++;

203 
m£cs
 = 500;

204 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

205 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_check(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

206 
	}
}

214 
	$dh˝_h™dÀ_of„r
(
√tif
 *netif)

216 
dh˝
 *dh˝ = 
√tif
->dhcp;

218 
u8_t
 *
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SERVER_ID
);

219 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_of„r“ëif=%pË%c%c%"
U16_F
"\n",

220 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

221 i‡(
›ti⁄_±r
 !
NULL
) {

222 
dh˝
->
£rvî_ù_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

223 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): sîvî 0x%08"
X32_F
"\n", 
dh˝
->
£rvî_ù_addr
.
addr
));

225 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, (
ù_addr
 *)&dh˝->
msg_ö
->
yüddr
);

226 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): of„∏f‹ 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

228 
	`dh˝_£À˘
(
√tif
);

230 
	}
}

240 
îr_t


241 
	$dh˝_£À˘
(
√tif
 *netif)

243 
dh˝
 *dh˝ = 
√tif
->dhcp;

244 
îr_t
 
ªsu…
;

245 
u16_t
 
m£cs
;

246 #i‡
LWIP_NETIF_HOSTNAME


247 c⁄° *
p
;

250 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_£À˘“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

251 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REQUESTING
);

254 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

255 i‡(
ªsu…
 =
ERR_OK
) {

256 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

257 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

259 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

260 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

263 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

264 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

266 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

267 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

269 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

270 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

271 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

272 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

273 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

275 #i‡
LWIP_NETIF_HOSTNAME


276 
p
 = (c⁄° *)
√tif
->
ho°«me
;

277 i‡(
p
 !
NULL
) {

278 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

279 *
p
) {

280 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

285 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

287 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

292 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

294 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

295 
	`dh˝_dñëe_ªque°
(
√tif
);

296 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_select: REQUESTING\n"));

298 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_select: couldÇotállocate DHCPÑequest\n"));

300 
dh˝
->
åõs
++;

301 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

302 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

303 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_£À˘(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

304  
ªsu…
;

305 
	}
}

312 
	$dh˝_cﬂr£_tmr
()

314 
√tif
 *√ti‡
√tif_li°
;

315 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_coarse_tmr()\n"));

317 
√tif
 !
NULL
) {

319 i‡(
√tif
->
dh˝
 !
NULL
) {

321 i‡(
√tif
->
dh˝
->
t2_timeout
-- == 1) {

322 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å2Åimeout\n"));

324 
	`dh˝_t2_timeout
(
√tif
);

326 } i‡(
√tif
->
dh˝
->
t1_timeout
-- == 1) {

327 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å1Åimeout\n"));

329 
	`dh˝_t1_timeout
(
√tif
);

333 
√tif
 =Çëif->
√xt
;

335 
	}
}

345 
	$dh˝_föe_tmr
()

347 
√tif
 *√ti‡
√tif_li°
;

349 
√tif
 !
NULL
) {

351 i‡(
√tif
->
dh˝
 !
NULL
) {

353 i‡(
√tif
->
dh˝
->
ªque°_timeout
 > 1) {

354 
√tif
->
dh˝
->
ªque°_timeout
--;

356 i‡(
√tif
->
dh˝
->
ªque°_timeout
 == 1) {

357 
√tif
->
dh˝
->
ªque°_timeout
--;

359 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_fine_tmr():ÑequestÅimeout\n"));

361 
	`dh˝_timeout
(
√tif
);

365 
√tif
 =Çëif->
√xt
;

367 
	}
}

378 
	$dh˝_timeout
(
√tif
 *netif)

380 
dh˝
 *dh˝ = 
√tif
->dhcp;

381 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_timeout()\n"));

383 i‡((
dh˝
->
°©e
 =
DHCP_BACKING_OFF
Ë|| (dh˝->°©ê=
DHCP_SELECTING
)) {

384 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout():Ñestarting discovery\n"));

385 
	`dh˝_discovî
(
√tif
);

387 } i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

388 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING, DHCPÑequestÅimed out\n"));

389 i‡(
dh˝
->
åõs
 <= 5) {

390 
	`dh˝_£À˘
(
√tif
);

392 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING,Ñeleasing,Ñestarting\n"));

393 
	`dh˝_ªÀa£
(
√tif
);

394 
	`dh˝_discovî
(
√tif
);

397 } i‡(
dh˝
->
°©e
 =
DHCP_CHECKING
) {

398 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): CHECKING, ARPÑequestÅimed out\n"));

399 i‡(
dh˝
->
åõs
 <= 1) {

400 
	`dh˝_check
(
√tif
);

405 
	`dh˝_böd
(
√tif
);

409 i‡(
dh˝
->
°©e
 =
DHCP_RENEWING
) {

410 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RENEWING, DHCPÑequestÅimed out\n"));

413 
	`dh˝_ª√w
(
√tif
);

415 } i‡(
dh˝
->
°©e
 =
DHCP_REBINDING
) {

416 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REBINDING, DHCPÑequestÅimed out\n"));

417 i‡(
dh˝
->
åõs
 <= 8) {

418 
	`dh˝_ªböd
(
√tif
);

420 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));

421 
	`dh˝_ªÀa£
(
√tif
);

422 
	`dh˝_discovî
(
√tif
);

425 
	}
}

433 
	$dh˝_t1_timeout
(
√tif
 *netif)

435 
dh˝
 *dh˝ = 
√tif
->dhcp;

436 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout()\n"));

437 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

440 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout(): mustÑenew\n"));

441 
	`dh˝_ª√w
(
√tif
);

443 
	}
}

451 
	$dh˝_t2_timeout
(
√tif
 *netif)

453 
dh˝
 *dh˝ = 
√tif
->dhcp;

454 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout()\n"));

455 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

457 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout(): mustÑebind\n"));

458 
	`dh˝_ªböd
(
√tif
);

460 
	}
}

468 
	$dh˝_h™dÀ_ack
(
√tif
 *netif)

470 
dh˝
 *dh˝ = 
√tif
->dhcp;

471 
u8_t
 *
›ti⁄_±r
;

473 
dh˝
->
of„ªd_¢_mask
.
addr
 = 0;

474 
dh˝
->
of„ªd_gw_addr
.
addr
 = 0;

475 
dh˝
->
of„ªd_bc_addr
.
addr
 = 0;

478 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_LEASE_TIME
);

479 i‡(
›ti⁄_±r
 !
NULL
) {

481 
dh˝
->
of„ªd_t0_Àa£
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

484 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T1
);

485 i‡(
›ti⁄_±r
 !
NULL
) {

487 
dh˝
->
of„ªd_t1_ª√w
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

490 
dh˝
->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t0_Àa£
 / 2;

494 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T2
);

495 i‡(
›ti⁄_±r
 !
NULL
) {

497 
dh˝
->
of„ªd_t2_ªböd
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

500 
dh˝
->
of„ªd_t2_ªböd
 = dh˝->
of„ªd_t0_Àa£
;

504 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, &dh˝->
msg_ö
->
yüddr
);

512 
	`ù_addr_£t
(&
dh˝
->
of„ªd_si_addr
, &dh˝->
msg_ö
->
süddr
);

514 i‡(
dh˝
->
msg_ö
->
fûe
[0]) {

515 
dh˝
->
boŸ_fûe_«me
 = 
	`mem_mÆloc
(
	`°æí
(dh˝->
msg_ö
->
fûe
) + 1);

516 
	`°r˝y
(
dh˝
->
boŸ_fûe_«me
, dh˝->
msg_ö
->
fûe
);

521 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

523 i‡(
›ti⁄_±r
 !
NULL
) {

524 
dh˝
->
of„ªd_¢_mask
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

528 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_ROUTER
);

529 i‡(
›ti⁄_±r
 !
NULL
) {

530 
dh˝
->
of„ªd_gw_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

534 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

535 i‡(
›ti⁄_±r
 !
NULL
) {

536 
dh˝
->
of„ªd_bc_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

540 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

541 i‡(
›ti⁄_±r
 !
NULL
) {

542 
u8_t
 
n
;

543 
dh˝
->
dns_cou¡
 = 
	`dh˝_gë_›ti⁄_byã
(&
›ti⁄_±r
[1]Ë/ (
u32_t
)(
ù_addr
);

545 i‡(
dh˝
->
dns_cou¡
 > 
DHCP_MAX_DNS
)

546 
dh˝
->
dns_cou¡
 = 
DHCP_MAX_DNS
;

547 
n
 = 0;Ç < 
dh˝
->
dns_cou¡
;Ç++) {

548 
dh˝
->
of„ªd_dns_addr
[
n
].
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2 +Ç * 4]));

549 #i‡
LWIP_DNS


550 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&(
dh˝
->
of„ªd_dns_addr
[n].
addr
)));

553 #i‡
LWIP_DNS


554 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&
ù_addr_™y
));

557 
	}
}

571 
îr_t


572 
	$dh˝_°¨t
(
√tif
 *netif)

574 
dh˝
 *dhcp;

575 
îr_t
 
ªsu…
 = 
ERR_OK
;

577 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

578 
dh˝
 = 
√tif
->dhcp;

579 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

582 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

585 i‡(
√tif
->
mtu
 < 
DHCP_MAX_MSG_LEN_MIN_REQUIRED
) {

586 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): Cannot useÅhisÇetif with DHCP: MTU isÅoo small\n"));

587  
ERR_MEM
;

591 i‡(
dh˝
 =
NULL
) {

592 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): startingÇew DHCP client\n"));

593 
dh˝
 = 
	`mem_mÆloc
((dhcp));

594 i‡(
dh˝
 =
NULL
) {

595 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇotállocate dhcp\n"));

596  
ERR_MEM
;

599 
√tif
->
dh˝
 = dhcp;

600 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start():állocated dhcp"));

603 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("dhcp_start():Ñestarting DHCP configuration\n"));

604 i‡(
dh˝
->
pcb
 !
NULL
) {

605 
	`udp_ªmove
(
dh˝
->
pcb
);

607 i‡(
dh˝
->
p
 !
NULL
) {

608 
	`pbuf_‰ì
(
dh˝
->
p
);

613 
	`mem£t
(
dh˝
, 0, (dhcp));

615 
dh˝
->
pcb
 = 
	`udp_√w
();

616 i‡(
dh˝
->
pcb
 =
NULL
) {

617 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇot obtainÖcb\n"));

618 
	`mem_‰ì
((*)
dh˝
);

619 
√tif
->
dh˝
 = dh˝ = 
NULL
;

620  
ERR_MEM
;

622 #i‡
IP_SOF_BROADCAST


623 
dh˝
->
pcb
->
so_›ti⁄s
|=
SOF_BROADCAST
;

626 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

627 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

629 
	`udp_ªcv
(
dh˝
->
pcb
, 
dh˝_ªcv
, 
√tif
);

630 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): starting DHCP configuration\n"));

632 
ªsu…
 = 
	`dh˝_discovî
(
√tif
);

633 i‡(
ªsu…
 !
ERR_OK
) {

635 
	`dh˝_°›
(
√tif
);

636  
ERR_MEM
;

639 
√tif
->
Êags
 |
NETIF_FLAG_DHCP
;

640  
ªsu…
;

641 
	}
}

653 
	$dh˝_öf‹m
(
√tif
 *netif)

655 
dh˝
 *dh˝, *
ﬁd_dh˝
 = 
√tif
->dhcp;

656 
îr_t
 
ªsu…
 = 
ERR_OK
;

657 
dh˝
 = 
	`mem_mÆloc
((dhcp));

658 i‡(
dh˝
 =
NULL
) {

659 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇotállocate dhcp\n"));

662 
√tif
->
dh˝
 = dhcp;

663 
	`mem£t
(
dh˝
, 0, (dhcp));

665 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform():állocated dhcp\n"));

666 
dh˝
->
pcb
 = 
	`udp_√w
();

667 i‡(
dh˝
->
pcb
 =
NULL
) {

668 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇot obtainÖcb"));

669 
	`mem_‰ì
((*)
dh˝
);

672 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform(): createdÇew udpÖcb\n"));

674 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

675 i‡(
ªsu…
 =
ERR_OK
) {

677 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

678 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_INFORM
);

680 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

681 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

683 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

685 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

687 #i‡
IP_SOF_BROADCAST


688 
dh˝
->
pcb
->
so_›ti⁄s
|=
SOF_BROADCAST
;

690 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

691 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
);

692 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_inform: INFORMING\n"));

693 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

694 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

695 
	`dh˝_dñëe_ªque°
(
√tif
);

697 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform: couldÇotállocate DHCPÑequest\n"));

700 i‡(
dh˝
->
pcb
 !
NULL
) {

701 
	`udp_ªmove
(
dh˝
->
pcb
);

703 
dh˝
->
pcb
 = 
NULL
;

704 
	`mem_‰ì
((*)
dh˝
);

705 
√tif
->
dh˝
 = 
ﬁd_dh˝
;

706 
	}
}

708 #i‡
DHCP_DOES_ARP_CHECK


715 
	$dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
)

717 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

718 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_arp_reply()\n"));

720 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
°©e
 =
DHCP_CHECKING
)) {

721 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_¨p_ª∂y(): CHECKING,áΩÑïly f‹ 0x%08"
X32_F
"\n", 
addr
->addr));

724 i‡(
	`ù_addr_cmp
(
addr
, &
√tif
->
dh˝
->
of„ªd_ù_addr
)) {

726 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1, ("dhcp_arp_reply():árpÑeply matched with offeredáddress, declining\n"));

727 
	`dh˝_de˛öe
(
√tif
);

730 
	}
}

741 
îr_t


742 
	$dh˝_de˛öe
(
√tif
 *netif)

744 
dh˝
 *dh˝ = 
√tif
->dhcp;

745 
îr_t
 
ªsu…
 = 
ERR_OK
;

746 
u16_t
 
m£cs
;

747 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_decline()\n"));

748 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

750 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

751 i‡(
ªsu…
 =
ERR_OK
) {

752 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

753 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DECLINE
);

755 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

756 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

758 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

760 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

763 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

765 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

766 
	`dh˝_dñëe_ªque°
(
√tif
);

767 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_decline: BACKING OFF\n"));

769 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_decline: couldÇotállocate DHCPÑequest\n"));

771 
dh˝
->
åõs
++;

772 
m£cs
 = 10*1000;

773 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

774 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_de˛öe(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

775  
ªsu…
;

776 
	}
}

785 
îr_t


786 
	$dh˝_discovî
(
√tif
 *netif)

788 
dh˝
 *dh˝ = 
√tif
->dhcp;

789 
îr_t
 
ªsu…
 = 
ERR_OK
;

790 
u16_t
 
m£cs
;

791 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_discover()\n"));

792 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, 
IP_ADDR_ANY
);

793 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_SELECTING
);

795 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

796 i‡(
ªsu…
 =
ERR_OK
) {

797 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: makingÑequest\n"));

798 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

799 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DISCOVER
);

801 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

802 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

804 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

805 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

806 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

807 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

808 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

810 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

812 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover:Ñealloc()ing\n"));

813 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

815 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

816 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));

817 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

818 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: deleting()ing\n"));

819 
	`dh˝_dñëe_ªque°
(
√tif
);

820 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_discover: SELECTING\n"));

822 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_discover: couldÇotállocate DHCPÑequest\n"));

824 
dh˝
->
åõs
++;

825 #i‡
LWIP_DHCP_AUTOIP_COOP


826 if(
dh˝
->
åõs
 >
LWIP_DHCP_AUTOIP_COOP_TRIES
 && dh˝->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_OFF
) {

827 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_ON
;

828 
	`autoù_°¨t
(
√tif
);

831 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

832 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

833 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_discovî(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

834  
ªsu…
;

835 
	}
}

844 
	$dh˝_böd
(
√tif
 *netif)

846 
u32_t
 
timeout
;

847 
dh˝
 *dhcp;

848 
ù_addr
 
¢_mask
, 
gw_addr
;

849 
	`LWIP_ERROR
("dh˝_böd:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

850 
dh˝
 = 
√tif
->dhcp;

851 
	`LWIP_ERROR
("dh˝_böd: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

852 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_böd“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

855 i‡(
dh˝
->
of„ªd_t1_ª√w
 != 0xffffffffUL) {

857 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å1ÑíewÆÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t1_ª√w
));

858 
timeout
 = (
dh˝
->
of„ªd_t1_ª√w
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

859 if(
timeout
 > 0xffff) {

860 
timeout
 = 0xffff;

862 
dh˝
->
t1_timeout
 = (
u16_t
)
timeout
;

863 i‡(
dh˝
->
t1_timeout
 == 0) {

864 
dh˝
->
t1_timeout
 = 1;

866 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t1_ª√w
*1000));

869 i‡(
dh˝
->
of„ªd_t2_ªböd
 != 0xffffffffUL) {

870 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å2ÑebödÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t2_ªböd
));

871 
timeout
 = (
dh˝
->
of„ªd_t2_ªböd
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

872 if(
timeout
 > 0xffff) {

873 
timeout
 = 0xffff;

875 
dh˝
->
t2_timeout
 = (
u16_t
)
timeout
;

876 i‡(
dh˝
->
t2_timeout
 == 0) {

877 
dh˝
->
t2_timeout
 = 1;

879 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t2_ªböd
*1000));

882 
	`ù_addr_£t
(&
¢_mask
, &
dh˝
->
of„ªd_¢_mask
);

886 i‡(
¢_mask
.
addr
 == 0) {

888 
u8_t
 
fú°_o˘ë
 = 
	`ù4_addr1
(&
¢_mask
);

889 i‡(
fú°_o˘ë
 <= 127) {

890 
¢_mask
.
addr
 = 
	`ht⁄l
(0xff000000);

891 } i‡(
fú°_o˘ë
 >= 192) {

892 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffffff00);

894 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffff0000);

898 
	`ù_addr_£t
(&
gw_addr
, &
dh˝
->
of„ªd_gw_addr
);

900 i‡(
gw_addr
.
addr
 == 0) {

902 
gw_addr
.
addr
 = (
dh˝
->
of„ªd_ù_addr
.add∏& 
¢_mask
.addr);

904 
gw_addr
.
addr
 |
	`ht⁄l
(0x00000001);

907 #i‡
LWIP_DHCP_AUTOIP_COOP


908 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

909 
	`autoù_°›
(
√tif
);

910 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

914 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): IP: 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

915 
	`√tif_£t_ùaddr
(
√tif
, &
dh˝
->
of„ªd_ù_addr
);

916 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): SN: 0x%08"
X32_F
"\n", 
¢_mask
.
addr
));

917 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

918 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): GW: 0x%08"
X32_F
"\n", 
gw_addr
.
addr
));

919 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

921 
	`√tif_£t_up
(
√tif
);

923 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BOUND
);

924 
	}
}

931 
îr_t


932 
	$dh˝_ª√w
(
√tif
 *netif)

934 
dh˝
 *dh˝ = 
√tif
->dhcp;

935 
îr_t
 
ªsu…
;

936 
u16_t
 
m£cs
;

937 #i‡
LWIP_NETIF_HOSTNAME


938 c⁄° *
p
;

940 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_renew()\n"));

941 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_RENEWING
);

944 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

945 i‡(
ªsu…
 =
ERR_OK
) {

947 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

948 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

950 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

951 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

953 #i‡
LWIP_NETIF_HOSTNAME


954 
p
 = (c⁄° *)
√tif
->
ho°«me
;

955 i‡(
p
 !
NULL
) {

956 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

957 *
p
) {

958 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

964 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

965 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

969 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

970 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

973 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

975 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

977 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

978 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

979 
	`dh˝_dñëe_ªque°
(
√tif
);

981 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_renew: RENEWING\n"));

983 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_renew: couldÇotállocate DHCPÑequest\n"));

985 
dh˝
->
åõs
++;

987 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 2000 : 20 * 1000;

988 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

989 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ª√w(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

990  
ªsu…
;

991 
	}
}

998 
îr_t


999 
	$dh˝_ªböd
(
√tif
 *netif)

1001 
dh˝
 *dh˝ = 
√tif
->dhcp;

1002 
îr_t
 
ªsu…
;

1003 
u16_t
 
m£cs
;

1004 #i‡
LWIP_NETIF_HOSTNAME


1005 c⁄° *
p
;

1007 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind()\n"));

1008 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBINDING
);

1011 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1012 i‡(
ªsu…
 =
ERR_OK
) {

1014 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1015 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

1017 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

1018 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

1020 #i‡
LWIP_NETIF_HOSTNAME


1021 
p
 = (c⁄° *)
√tif
->
ho°«me
;

1022 i‡(
p
 !
NULL
) {

1023 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

1024 *
p
) {

1025 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

1031 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

1032 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

1034 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

1035 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

1038 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1040 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1043 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

1044 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

1045 
	`dh˝_dñëe_ªque°
(
√tif
);

1046 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind: REBINDING\n"));

1048 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_rebind: couldÇotállocate DHCPÑequest\n"));

1050 
dh˝
->
åõs
++;

1051 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1052 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1053 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªböd(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1054  
ªsu…
;

1055 
	}
}

1062 
îr_t


1063 
	$dh˝_ªÀa£
(
√tif
 *netif)

1065 
dh˝
 *dh˝ = 
√tif
->dhcp;

1066 
îr_t
 
ªsu…
;

1067 
u16_t
 
m£cs
;

1068 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_release()\n"));

1071 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1073 
dh˝
->
£rvî_ù_addr
.
addr
 = 0;

1074 
dh˝
->
of„ªd_ù_addr
.
addr
 = dh˝->
of„ªd_¢_mask
.addr = 0;

1075 
dh˝
->
of„ªd_gw_addr
.
addr
 = dh˝->
of„ªd_bc_addr
.addr = 0;

1076 
dh˝
->
of„ªd_t0_Àa£
 = dh˝->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t2_ªböd
 = 0;

1077 
dh˝
->
dns_cou¡
 = 0;

1080 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1081 i‡(
ªsu…
 =
ERR_OK
) {

1082 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1083 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_RELEASE
);

1085 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1087 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1089 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

1090 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1091 
	`dh˝_dñëe_ªque°
(
√tif
);

1092 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_release: RELEASED, DHCP_OFF\n"));

1094 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_release: couldÇotállocate DHCPÑequest\n"));

1096 
dh˝
->
åõs
++;

1097 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1098 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1099 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªÀa£(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1101 
	`√tif_£t_down
(
√tif
);

1103 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

1104 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

1105 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

1108  
ªsu…
;

1109 
	}
}

1117 
	$dh˝_°›
(
√tif
 *netif)

1119 
dh˝
 *dh˝ = 
√tif
->dhcp;

1120 
	`LWIP_ERROR
("dh˝_°›:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1122 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

1124 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_stop()\n"));

1126 i‡(
dh˝
 !
NULL
) {

1127 #i‡
LWIP_DHCP_AUTOIP_COOP


1128 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

1129 
	`autoù_°›
(
√tif
);

1130 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

1134 i‡(
dh˝
->
pcb
 !
NULL
) {

1135 
	`udp_ªmove
(
dh˝
->
pcb
);

1136 
dh˝
->
pcb
 = 
NULL
;

1138 i‡(
dh˝
->
p
 !
NULL
) {

1139 
	`pbuf_‰ì
(
dh˝
->
p
);

1140 
dh˝
->
p
 = 
NULL
;

1143 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1144 
	`mem_‰ì
((*)
dh˝
);

1145 
√tif
->
dh˝
 = 
NULL
;

1147 
	}
}

1157 
	$dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
)

1159 i‡(
√w_°©e
 !
dh˝
->
°©e
) {

1160 
dh˝
->
°©e
 = 
√w_°©e
;

1161 
dh˝
->
åõs
 = 0;

1163 
	}
}

1171 
	$dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
)

1173 
	`LWIP_ASSERT
("dh˝_›ti⁄: dh˝->›ti⁄s_out_À¿+ 2 + o±i⁄_À¿<DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U + 
›ti⁄_Àn
 <
DHCP_OPTIONS_LEN
);

1174 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_ty≥
;

1175 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_Àn
;

1176 
	}
}

1182 
	$dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
)

1184 
	`LWIP_ASSERT
("dh˝_›ti⁄_byã: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1185 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
vÆue
;

1186 
	}
}

1189 
	$dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
)

1191 
	`LWIP_ASSERT
("dh˝_›ti⁄_sh‹t: dh˝->›ti⁄s_out_À¿+ 2 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U <
DHCP_OPTIONS_LEN
);

1192 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff00U) >> 8);

1193 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
Ë(
vÆue
 & 0x00ffU);

1194 
	}
}

1197 
	$dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
)

1199 
	`LWIP_ASSERT
("dh˝_›ti⁄_l⁄g: dh˝->›ti⁄s_out_À¿+ 4 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 4U <
DHCP_OPTIONS_LEN
);

1200 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff000000UL) >> 24);

1201 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x00ff0000UL) >> 16);

1202 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x0000ff00UL) >> 8);

1203 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x000000ffUL));

1204 
	}
}

1216 
îr_t


1217 
	$dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp)

1219 
u16_t
 
ªt
;

1220 
	`LWIP_ERROR
("dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_ARG
;);

1221 
	`LWIP_ERROR
("dh˝->∞!NULL", (
dh˝
->
p
 !
NULL
),  
ERR_VAL
;);

1223 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1225 i‡(
dh˝
->
p
->
tŸ_Àn
 > ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
)) {

1226 
dh˝
->
›ti⁄s_ö_Àn
 = dh˝->
p
->
tŸ_Àn
 - ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1227 
dh˝
->
›ti⁄s_ö
 = 
	`mem_mÆloc
(dh˝->
›ti⁄s_ö_Àn
);

1228 i‡(
dh˝
->
›ti⁄s_ö
 =
NULL
) {

1229 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->options\n"));

1230  
ERR_MEM
;

1233 
dh˝
->
msg_ö
 = 
	`mem_mÆloc
((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1234 i‡(
dh˝
->
msg_ö
 =
NULL
) {

1235 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->msg_in\n"));

1236 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1237 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1238  
ERR_MEM
;

1242 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
msg_ö
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
, 0);

1243 
	`LWIP_ASSERT
("ªà=sizeof(°ru˘ dh˝_msgË- DHCP_OPTIONS_LEN", 
ªt
 =(
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1244 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytes into dhcp->msg_in[]\n",

1245 (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
));

1247 i‡(
dh˝
->
›ti⁄s_ö
 !
NULL
) {

1249 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
›ti⁄s_ö
, dh˝->
›ti⁄s_ö_Àn
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1250 
	`LWIP_ASSERT
("ªà=dh˝->›ti⁄s_ö_Àn", 
ªt
 =
dh˝
->
›ti⁄s_ö_Àn
);

1251 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytesÅo dhcp->options_in[]\n",

1252 
dh˝
->
›ti⁄s_ö_Àn
));

1254 
	`LWIP_UNUSED_ARG
(
ªt
);

1255  
ERR_OK
;

1256 
	}
}

1263 
	$dh˝_‰ì_ª∂y
(
dh˝
 *dhcp)

1265 i‡(
dh˝
->
msg_ö
 !
NULL
) {

1266 
	`mem_‰ì
((*)
dh˝
->
msg_ö
);

1267 
dh˝
->
msg_ö
 = 
NULL
;

1269 i‡(
dh˝
->
›ti⁄s_ö
) {

1270 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1271 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1272 
dh˝
->
›ti⁄s_ö_Àn
 = 0;

1274 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("dhcp_free_reply(): free'd\n"));

1275 
	}
}

1281 
	$dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

1283 
√tif
 *√ti‡(√ti‡*)
¨g
;

1284 
dh˝
 *dh˝ = 
√tif
->dhcp;

1285 
dh˝_msg
 *
ª∂y_msg
 = (dh˝_msg *)
p
->
∑ylﬂd
;

1286 
u8_t
 *
›ti⁄s_±r
;

1287 
u8_t
 
msg_ty≥
;

1288 
u8_t
 
i
;

1289 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_ªcv’bu‡%pË‰om DHCP sîvî %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"Ö‹à%"U16_F"\n", (*)
p
,

1290 (
u16_t
)(
	`¡ohl
(
addr
->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),

1291 (
u16_t
)(
	`¡ohl
(
addr
->addrË>> 8 & 0xff), (u16_t)“tohl◊ddr->addrË& 0xff), 
p‹t
));

1292 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->À¿%"
U16_F
"\n", 
p
->
Àn
));

1293 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->tŸ_À¿%"
U16_F
"\n", 
p
->
tŸ_Àn
));

1295 
	`LWIP_UNUSED_ARG
(
pcb
);

1296 
	`LWIP_UNUSED_ARG
(
addr
);

1297 
	`LWIP_UNUSED_ARG
(
p‹t
);

1298 
dh˝
->
p
 =Ö;

1300 i‡(
ª∂y_msg
->
›
 !
DHCP_BOOTREPLY
) {

1301 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("nŸá DHCPÑïly mesßge, buàty≥ %"
U16_F
"\n", (
u16_t
)
ª∂y_msg
->
›
));

1302 
‰ì_pbuf_™d_ªtu∫
;

1305 
i
 = 0; i < 
√tif
->
hwaddr_Àn
; i++) {

1306 i‡(
√tif
->
hwaddr
[
i
] !
ª∂y_msg
->
chaddr
[i]) {

1307 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("√tif->hwaddr[%"
U16_F
"]==%02"
X16_F
" !=Ñeply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",

1308 (
u16_t
)
i
, (u16_t)
√tif
->
hwaddr
[i], (u16_t)i, (u16_t)
ª∂y_msg
->
chaddr
[i]));

1309 
‰ì_pbuf_™d_ªtu∫
;

1313 i‡(
	`¡ohl
(
ª∂y_msg
->
xid
Ë!
dh˝
->xid) {

1314 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id mism©chÑïly_msg->xid(%"
X32_F
")!=dh˝->xid(%"X32_F")\n",
	`¡ohl
(
ª∂y_msg
->
xid
),
dh˝
->xid));

1315 
‰ì_pbuf_™d_ªtu∫
;

1318 i‡(
	`dh˝_unfﬁd_ª∂y
(
dh˝
Ë!
ERR_OK
) {

1319 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("problem unfolding DHCP message -Åoo short on memory?\n"));

1320 
‰ì_pbuf_™d_ªtu∫
;

1323 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));

1325 
›ti⁄s_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
);

1326 i‡(
›ti⁄s_±r
 =
NULL
) {

1327 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OPTION_MESSAGE_TYPE optionÇot found\n"));

1328 
‰ì_pbuf_™d_ªtu∫
;

1332 
msg_ty≥
 = 
	`dh˝_gë_›ti⁄_byã
(
›ti⁄s_±r
 + 2);

1334 i‡(
msg_ty≥
 =
DHCP_ACK
) {

1335 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_ACKÑeceived\n"));

1337 i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

1338 
	`dh˝_h™dÀ_ack
(
√tif
);

1339 
dh˝
->
ªque°_timeout
 = 0;

1340 #i‡
DHCP_DOES_ARP_CHECK


1342 
	`dh˝_check
(
√tif
);

1345 
	`dh˝_böd
(
√tif
);

1349 i‡((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

1350 
dh˝
->
ªque°_timeout
 = 0;

1351 
	`dh˝_böd
(
√tif
);

1355 i‡((
msg_ty≥
 =
DHCP_NAK
) &&

1356 ((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REQUESTING
) ||

1357 (
dh˝
->
°©e
 =
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
 ))) {

1358 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_NAKÑeceived\n"));

1359 
dh˝
->
ªque°_timeout
 = 0;

1360 
	`dh˝_h™dÀ_«k
(
√tif
);

1363 i‡((
msg_ty≥
 =
DHCP_OFFER
Ë&& (
dh˝
->
°©e
 =
DHCP_SELECTING
)) {

1364 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OFFERÑeceived in DHCP_SELECTING state\n"));

1365 
dh˝
->
ªque°_timeout
 = 0;

1367 
	`dh˝_h™dÀ_of„r
(
√tif
);

1369 
‰ì_pbuf_™d_ªtu∫
:

1370 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1371 
	`pbuf_‰ì
(
p
);

1372 
dh˝
->
p
 = 
NULL
;

1373 
	}
}

1380 
îr_t


1381 
	$dh˝_¸óã_ªque°
(
√tif
 *netif)

1383 
dh˝
 *dhcp;

1384 
u16_t
 
i
;

1385 #i‚de‡
DHCP_GLOBAL_XID


1390 
u32_t
 
xid
 = 0xABCD0000;

1392 
u32_t
 
xid
;

1393 
u8_t
 
xid_öôüli£d
 = 0;

1394 i‡(!
xid_öôüli£d
) {

1395 
xid
 = 
DHCP_GLOBAL_XID
;

1396 
xid_öôüli£d
 = !xid_initialised;

1399 
	`LWIP_ERROR
("dh˝_¸óã_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

1400 
dh˝
 = 
√tif
->dhcp;

1401 
	`LWIP_ERROR
("dh˝_¸óã_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_VAL
;);

1402 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->p_ouà=NULL", 
dh˝
->
p_out
 =
NULL
);

1403 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->msg_ouà=NULL", 
dh˝
->
msg_out
 =
NULL
);

1404 
dh˝
->
p_out
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dh˝_msg
), 
PBUF_RAM
);

1405 i‡(
dh˝
->
p_out
 =
NULL
) {

1406 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_create_request(): couldÇotállocateÖbuf\n"));

1407  
ERR_MEM
;

1409 
	`LWIP_ASSERT
("dhcp_create_request: checkÅhat firstÖbuf can hold struct dhcp_msg",

1410 (
dh˝
->
p_out
->
Àn
 >(
dh˝_msg
)));

1413 i‡(
dh˝
->
åõs
==0)

1414 
xid
++;

1415 
dh˝
->
xid
 = xid;

1416 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2,

1417 ("å™ß˘i⁄ id xid(%"
X32_F
")\n", 
xid
));

1419 
dh˝
->
msg_out
 = (
dh˝_msg
 *)dh˝->
p_out
->
∑ylﬂd
;

1421 
dh˝
->
msg_out
->
›
 = 
DHCP_BOOTREQUEST
;

1423 
dh˝
->
msg_out
->
hty≥
 = 
DHCP_HTYPE_ETH
;

1425 
dh˝
->
msg_out
->
hÀn
 = 
DHCP_HLEN_ETH
;

1426 
dh˝
->
msg_out
->
h›s
 = 0;

1427 
dh˝
->
msg_out
->
xid
 = 
	`ht⁄l
(dhcp->xid);

1428 
dh˝
->
msg_out
->
£cs
 = 0;

1429 
dh˝
->
msg_out
->
Êags
 = 0;

1430 
dh˝
->
msg_out
->
cüddr
.
addr
 = 0;

1431 i‡(
dh˝
->
°©e
==
DHCP_BOUND
 || dh˝->°©e==
DHCP_RENEWING
 || dh˝->°©e==
DHCP_REBINDING
) {

1432 
dh˝
->
msg_out
->
cüddr
.
addr
 = 
√tif
->
ù_addr
.addr;

1434 
dh˝
->
msg_out
->
yüddr
.
addr
 = 0;

1435 
dh˝
->
msg_out
->
süddr
.
addr
 = 0;

1436 
dh˝
->
msg_out
->
güddr
.
addr
 = 0;

1437 
i
 = 0; i < 
DHCP_CHADDR_LEN
; i++) {

1439 
dh˝
->
msg_out
->
chaddr
[
i
] = (ò< 
√tif
->
hwaddr_Àn
Ë?Çëif->
hwaddr
[i] : 0 ;

1441 
i
 = 0; i < 
DHCP_SNAME_LEN
; i++) {

1442 
dh˝
->
msg_out
->
¢ame
[
i
] = 0;

1444 
i
 = 0; i < 
DHCP_FILE_LEN
; i++) {

1445 
dh˝
->
msg_out
->
fûe
[
i
] = 0;

1447 
dh˝
->
msg_out
->
cookõ
 = 
	`ht⁄l
(0x63825363UL);

1448 
dh˝
->
›ti⁄s_out_Àn
 = 0;

1450 
i
 = 0; i < 
DHCP_OPTIONS_LEN
; i++) {

1451 
dh˝
->
msg_out
->
›ti⁄s
[
i
] = (
u8_t
)i;

1453  
ERR_OK
;

1454 
	}
}

1462 
	$dh˝_dñëe_ªque°
(
√tif
 *netif)

1464 
dh˝
 *dhcp;

1465 
	`LWIP_ERROR
("dh˝_dñëe_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1466 
dh˝
 = 
√tif
->dhcp;

1467 
	`LWIP_ERROR
("dh˝_dñëe_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1468 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->p_ouà!NULL", 
dh˝
->
p_out
 !
NULL
);

1469 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->msg_ouà!NULL", 
dh˝
->
msg_out
 !
NULL
);

1470 i‡(
dh˝
->
p_out
 !
NULL
) {

1471 
	`pbuf_‰ì
(
dh˝
->
p_out
);

1473 
dh˝
->
p_out
 = 
NULL
;

1474 
dh˝
->
msg_out
 = 
NULL
;

1475 
	}
}

1486 
	$dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp)

1488 
	`LWIP_ERROR
("dh˝_›ti⁄_åaûî: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1489 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->msg_ouà!NULL\n", 
dh˝
->
msg_out
 !
NULL
);

1490 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1491 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
DHCP_OPTION_END
;

1493 (
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_MIN_OPTIONS_LEN
) || (dhcp->options_out_len & 3)) {

1495 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1497 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 0;

1499 
	}
}

1510 
u8_t
 *
	$dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
)

1512 
u8_t
 
ovîlﬂd
 = 
DHCP_OVERLOAD_NONE
;

1515 i‡((
dh˝
->
›ti⁄s_ö
 !
NULL
Ë&& (dh˝->
›ti⁄s_ö_Àn
 > 0)) {

1517 
u8_t
 *
›ti⁄s
 = (u8_à*)
dh˝
->
›ti⁄s_ö
;

1518 
u16_t
 
off£t
 = 0;

1520 (
off£t
 < 
dh˝
->
›ti⁄s_ö_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1523 i‡(
›ti⁄s
[
off£t
] =
DHCP_OPTION_OVERLOAD
) {

1524 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("overloaded message detected\n"));

1526 
off£t
 += 2;

1527 
ovîlﬂd
 = 
›ti⁄s
[
off£t
++];

1530 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1531 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£à%"
U16_F
" i¿›ti⁄s\n", 
off£t
));

1532  &
›ti⁄s
[
off£t
];

1535 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("skùpög o±i⁄ %"
U16_F
" i¿›ti⁄s\n", 
›ti⁄s
[
off£t
]));

1537 
off£t
++;

1539 
off£t
 +1 + 
›ti⁄s
[offset];

1543 i‡(
ovîlﬂd
 !
DHCP_OVERLOAD_NONE
) {

1544 
u16_t
 
fõld_Àn
;

1545 i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_FILE
) {

1546 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded file field\n"));

1547 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
fûe
;

1548 
fõld_Àn
 = 
DHCP_FILE_LEN
;

1549 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME
) {

1550 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded sname field\n"));

1551 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1552 
fõld_Àn
 = 
DHCP_SNAME_LEN
;

1555 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded snameánd file field\n"));

1556 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1557 
fõld_Àn
 = 
DHCP_FILE_LEN
 + 
DHCP_SNAME_LEN
;

1559 
off£t
 = 0;

1562 (
off£t
 < 
fõld_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1563 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1564 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£t=%"
U16_F
"\n", 
off£t
));

1565  &
›ti⁄s
[
off£t
];

1568 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("skùpög o±i⁄ %"
U16_F
"\n", 
›ti⁄s
[
off£t
]));

1570 
off£t
++;

1571 
off£t
 +1 + 
›ti⁄s
[offset];

1576  
NULL
;

1577 
	}
}

1587 
u8_t


1588 
	$dh˝_gë_›ti⁄_byã
(
u8_t
 *
±r
)

1590 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ byã vÆue=%"
U16_F
"\n", (
u16_t
)(*
±r
)));

1591  *
±r
;

1592 
	}
}

1603 
u16_t


1604 
	$dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
)

1606 
u16_t
 
vÆue
;

1607 
vÆue
 = *
±r
++ << 8;

1608 
vÆue
 |*
±r
;

1609 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ sh‹àvÆue=%"
U16_F
"\n", 
vÆue
));

1610  
vÆue
;

1611 
	}
}

1622 
u32_t
 
	$dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
)

1624 
u32_t
 
vÆue
;

1625 
vÆue
 = (
u32_t
)(*
±r
++) << 24;

1626 
vÆue
 |(
u32_t
)(*
±r
++) << 16;

1627 
vÆue
 |(
u32_t
)(*
±r
++) << 8;

1628 
vÆue
 |(
u32_t
)(*
±r
++);

1629 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄Ü⁄g vÆue=%"
U32_F
"\n", 
vÆue
));

1630  
vÆue
;

1631 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/dns.c

75 
	~"lwù/›t.h
"

77 #i‡
LWIP_DNS


79 
	~"lwù/udp.h
"

80 
	~"lwù/mem.h
"

81 
	~"lwù/dns.h
"

83 
	~<°rög.h
>

86 #i‚de‡
DNS_SERVER_ADDRESS


87 
	#DNS_SERVER_ADDRESS
 
	`öë_addr
("208.67.222.222"Ë

	)

91 #i‚de‡
DNS_SERVER_PORT


92 
	#DNS_SERVER_PORT
 53

	)

96 #i‚de‡
DNS_MAX_RETRIES


97 
	#DNS_MAX_RETRIES
 4

	)

101 #i‚de‡
DNS_MAX_TTL


102 
	#DNS_MAX_TTL
 604800

	)

106 
	#DNS_FLAG1_RESPONSE
 0x80

	)

107 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

108 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

109 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

110 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

111 
	#DNS_FLAG1_TRUNC
 0x02

	)

112 
	#DNS_FLAG1_RD
 0x01

	)

113 
	#DNS_FLAG2_RA
 0x80

	)

114 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

115 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

116 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

119 
	#DNS_STATE_UNUSED
 0

	)

120 
	#DNS_STATE_NEW
 1

	)

121 
	#DNS_STATE_ASKING
 2

	)

122 
	#DNS_STATE_DONE
 3

	)

124 #ifde‡
PACK_STRUCT_USE_INCLUDES


125 
	~"¨ch/bp°ru˘.h
"

127 
PACK_STRUCT_BEGIN


129 
	sdns_hdr
 {

130 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

131 
PACK_STRUCT_FIELD
(
u8_t
 
Êags1
);

132 
PACK_STRUCT_FIELD
(
u8_t
 
Êags2
);

133 
PACK_STRUCT_FIELD
(
u16_t
 
numque°i⁄s
);

134 
PACK_STRUCT_FIELD
(
u16_t
 
num™swîs
);

135 
PACK_STRUCT_FIELD
(
u16_t
 
numauthº
);

136 
PACK_STRUCT_FIELD
(
u16_t
 
numexå¨r
);

137 } 
	gPACK_STRUCT_STRUCT
;

138 
	gPACK_STRUCT_END


139 #ifde‡
PACK_STRUCT_USE_INCLUDES


140 
	~"¨ch/ï°ru˘.h
"

142 
	#SIZEOF_DNS_HDR
 12

	)

144 #ifde‡
PACK_STRUCT_USE_INCLUDES


145 
	~"¨ch/bp°ru˘.h
"

147 
PACK_STRUCT_BEGIN


149 
	sdns_quîy
 {

152 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

153 
PACK_STRUCT_FIELD
(
u16_t
 
˛ass
);

154 } 
	gPACK_STRUCT_STRUCT
;

155 
	gPACK_STRUCT_END


156 #ifde‡
PACK_STRUCT_USE_INCLUDES


157 
	~"¨ch/ï°ru˘.h
"

159 
	#SIZEOF_DNS_QUERY
 4

	)

161 #ifde‡
PACK_STRUCT_USE_INCLUDES


162 
	~"¨ch/bp°ru˘.h
"

164 
PACK_STRUCT_BEGIN


166 
	sdns_™swî
 {

169 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

170 
PACK_STRUCT_FIELD
(
u16_t
 
˛ass
);

171 
PACK_STRUCT_FIELD
(
u32_t
 
âl
);

172 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

173 } 
	gPACK_STRUCT_STRUCT
;

174 
	gPACK_STRUCT_END


175 #ifde‡
PACK_STRUCT_USE_INCLUDES


176 
	~"¨ch/ï°ru˘.h
"

178 
	#SIZEOF_DNS_ANSWER
 10

	)

181 
	sdns_èbÀ_íåy
 {

182 
u8_t
 
	m°©e
;

183 
u8_t
 
	mnumdns
;

184 
u8_t
 
	mtmr
;

185 
u8_t
 
	mªåõs
;

186 
u8_t
 
	m£qno
;

187 
u8_t
 
	mîr
;

188 
u32_t
 
	mâl
;

189 
	m«me
[
DNS_MAX_NAME_LENGTH
];

190 
ù_addr
 
	mùaddr
;

192 
dns_found_ˇŒback
 
	mfound
;

193 *
	m¨g
;

196 #i‡
DNS_LOCAL_HOSTLIST


198 
	sloˇl_ho°li°_íåy
 {

200 c⁄° *
	m«me
;

202 
u32_t
 
	maddr
;

203 
loˇl_ho°li°_íåy
 *
	m√xt
;

206 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


209 
loˇl_ho°li°_íåy
 *
	gloˇl_ho°li°_dy«mic
;

214 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_PRE


215 
	#DNS_LOCAL_HOSTLIST_STORAGE_PRE
 

	)

219 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_POST


220 
	#DNS_LOCAL_HOSTLIST_STORAGE_POST


	)

222 
DNS_LOCAL_HOSTLIST_STORAGE_PRE
 
loˇl_ho°li°_íåy
 
	gloˇl_ho°li°_°©ic
[]

223 
	gDNS_LOCAL_HOSTLIST_STORAGE_POST
 = 
DNS_LOCAL_HOSTLIST_INIT
;

227 
dns_öô_loˇl
();

232 
dns_ªcv
(*
s
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

233 
dns_check_íåõs
();

240 
udp_pcb
 *
	gdns_pcb
;

241 
u8_t
 
	gdns_£qno
;

242 
dns_èbÀ_íåy
 
	gdns_èbÀ
[
DNS_TABLE_SIZE
];

243 
ù_addr
 
	gdns_£rvîs
[
DNS_MAX_SERVERS
];

245 #i‡(
DNS_USES_STATIC_BUF
 == 1)

246 
u8_t
 
	gdns_∑ylﬂd
[
DNS_MSG_SIZE
];

254 
	$dns_öô
()

256 
ù_addr
 
dns£rvî
;

259 
dns£rvî
.
addr
 = 
DNS_SERVER_ADDRESS
;

261 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_init: initializing\n"));

264 i‡(
dns_pcb
 =
NULL
) {

265 
dns_pcb
 = 
	`udp_√w
();

267 i‡(
dns_pcb
 !
NULL
) {

270 
	`LWIP_ASSERT
("For implicit initializationÅo work, DNS_STATE_UNUSEDÇeedsÅo be 0",

271 
DNS_STATE_UNUSED
 == 0);

274 
	`udp_böd
(
dns_pcb
, 
IP_ADDR_ANY
, 0);

275 
	`udp_ªcv
(
dns_pcb
, 
dns_ªcv
, 
NULL
);

278 
	`dns_£t£rvî
(0, &
dns£rvî
);

281 #i‡
DNS_LOCAL_HOSTLIST


282 
	`dns_öô_loˇl
();

284 
	}
}

293 
	$dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
)

295 i‡((
numdns
 < 
DNS_MAX_SERVERS
Ë&& (
dns_pcb
 !
NULL
) &&

296 (
dns£rvî
 !
NULL
Ë&& (dns£rvî->
addr
 !=0 )) {

297 
dns_£rvîs
[
numdns
] = (*
dns£rvî
);

299 
	}
}

308 
ù_addr


309 
	$dns_gë£rvî
(
u8_t
 
numdns
)

311 i‡(
numdns
 < 
DNS_MAX_SERVERS
) {

312  
dns_£rvîs
[
numdns
];

314  *
IP_ADDR_ANY
;

316 
	}
}

323 
	$dns_tmr
()

325 i‡(
dns_pcb
 !
NULL
) {

326 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_tmr: dns_check_entries\n"));

327 
	`dns_check_íåõs
();

329 
	}
}

331 #i‡
DNS_LOCAL_HOSTLIST


333 
	$dns_öô_loˇl
()

335 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && 
	`deföed
(
DNS_LOCAL_HOSTLIST_INIT
)

336 
i
;

337 
loˇl_ho°li°_íåy
 *
íåy
;

339 
loˇl_ho°li°_íåy
 
loˇl_ho°li°_öô
[] = 
DNS_LOCAL_HOSTLIST_INIT
;

340 
i
 = 0; i < (
loˇl_ho°li°_öô
Ë/ (
loˇl_ho°li°_íåy
); i++) {

341 
íåy
 = 
	`mem_mÆloc
((
loˇl_ho°li°_íåy
));

342 
	`LWIP_ASSERT
("mem-îr‹ i¿dns_öô_loˇl", 
íåy
 !
NULL
);

343 i‡(
íåy
 !
NULL
) {

344 
loˇl_ho°li°_íåy
 *
öô_íåy
 = &
loˇl_ho°li°_öô
[
i
];

345 
íåy
->
«me
 = 
öô_íåy
->name;

346 
íåy
->
addr
 = 
öô_íåy
->addr;

347 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

348 
loˇl_ho°li°_dy«mic
 = 
íåy
;

352 
	}
}

361 
u32_t


362 
	$dns_lookup_loˇl
(c⁄° *
ho°«me
)

364 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


365 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

366 
íåy
 !
NULL
) {

367 if(
	`°rcmp
(
íåy
->
«me
, 
ho°«me
) == 0) {

368  
íåy
->
addr
;

370 
íåy
 =É¡ry->
√xt
;

373 
i
;

374 
i
 = 0; i < (
loˇl_ho°li°_°©ic
Ë/ (
loˇl_ho°li°_íåy
); i++) {

375 if(
	`°rcmp
(
loˇl_ho°li°_°©ic
[
i
].
«me
, 
ho°«me
) == 0) {

376  
loˇl_ho°li°_°©ic
[
i
].
addr
;

380  
INADDR_NONE
;

381 
	}
}

383 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


393 
	$dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
)

395 
ªmoved
 = 0;

396 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

397 
loˇl_ho°li°_íåy
 *
œ°_íåy
 = 
NULL
;

398 
íåy
 !
NULL
) {

399 i‡(((
ho°«me
 =
NULL
Ë|| !
	`°rcmp
(
íåy
->
«me
, hostname)) &&

400 ((
addr
 =
NULL
Ë|| (
íåy
->addr ==áddr->addr))) {

401 
loˇl_ho°li°_íåy
 *
‰ì_íåy
;

402 i‡(
œ°_íåy
 !
NULL
) {

403 
œ°_íåy
->
√xt
 = 
íåy
->next;

405 
loˇl_ho°li°_dy«mic
 = 
íåy
->
√xt
;

407 
‰ì_íåy
 = 
íåy
;

408 
íåy
 =É¡ry->
√xt
;

409 
	`mem_‰ì
(
‰ì_íåy
);

410 
ªmoved
++;

412 
œ°_íåy
 = 
íåy
;

413 
íåy
 =É¡ry->
√xt
;

416  
ªmoved
;

417 
	}
}

427 
îr_t


428 
	$dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
)

430 
loˇl_ho°li°_íåy
 *
íåy
;

431 
íåy
 = 
	`mem_mÆloc
((
loˇl_ho°li°_íåy
));

432 i‡(
íåy
 =
NULL
) {

433  
ERR_MEM
;

435 
íåy
->
«me
 = 
ho°«me
;

436 
íåy
->
addr
 =áddr->addr;

437 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

438 
loˇl_ho°li°_dy«mic
 = 
íåy
;

439  
ERR_OK
;

440 
	}
}

457 
u32_t


458 
	$dns_lookup
(c⁄° *
«me
)

460 
u8_t
 
i
;

461 #i‡
DNS_LOCAL_HOSTLIST
 || 
	`deföed
(
DNS_LOOKUP_LOCAL_EXTERN
)

462 
u32_t
 
addr
;

464 #i‡
DNS_LOCAL_HOSTLIST


465 i‡((
addr
 = 
	`dns_lookup_loˇl
(
«me
)Ë!
INADDR_NONE
) {

466  
addr
;

469 #ifde‡
DNS_LOOKUP_LOCAL_EXTERN


470 if((
addr
 = 
	`DNS_LOOKUP_LOCAL_EXTERN
(
«me
)Ë!
INADDR_NONE
) {

471  
addr
;

476 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

477 i‡((
dns_èbÀ
[
i
].
°©e
 =
DNS_STATE_DONE
) &&

478 (
	`°rcmp
(
«me
, 
dns_èbÀ
[
i
].name) == 0)) {

479 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_lookup: \"%s\": found = ", 
«me
));

480 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, &(
dns_èbÀ
[
i
].
ùaddr
));

481 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

482  
dns_èbÀ
[
i
].
ùaddr
.
addr
;

486  
INADDR_NONE
;

487 
	}
}

489 #i‡
DNS_DOES_NAME_CHECK


500 
u8_t


501 
	$dns_com∑ª_«me
(*
quîy
, *
ª•⁄£
)

503 
n
;

506 
n
 = *
ª•⁄£
++;

508 i‡((
n
 & 0xc0) == 0xc0) {

513 
n
 > 0) {

514 i‡((*
quîy
Ë!(*
ª•⁄£
)) {

517 ++
ª•⁄£
;

518 ++
quîy
;

519 --
n
;

521 ++
quîy
;

523 } *
ª•⁄£
 != 0);

526 
	}
}

536 
	$dns_∑r£_«me
(*
quîy
)

538 
n
;

541 
n
 = *
quîy
++;

543 i‡((
n
 & 0xc0) == 0xc0) {

548 
n
 > 0) {

549 ++
quîy
;

550 --
n
;

553 } *
quîy
 != 0);

555  
quîy
 + 1;

556 
	}
}

567 
îr_t


568 
	$dns_£nd
(
u8_t
 
numdns
, c⁄° * 
«me
, u8_à
id
)

570 
îr_t
 
îr
;

571 
dns_hdr
 *
hdr
;

572 
dns_quîy
 
qry
;

573 
pbuf
 *
p
;

574 *
quîy
, *
≈å
;

575 c⁄° *
pHo°«me
;

576 
u8_t
 
n
;

578 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_£nd: dns_£rvîs[%"
U16_F
"] \"%s\":Ñequest\n",

579 (
u16_t
)(
numdns
), 
«me
));

580 
	`LWIP_ASSERT
("dn†£rvî ouào‡¨øy", 
numdns
 < 
DNS_MAX_SERVERS
);

581 
	`LWIP_ASSERT
("dn†£rvî ha†nÿIPáddªs†£t", 
dns_£rvîs
[
numdns
].
addr
 != 0);

584 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
SIZEOF_DNS_HDR
 + 
DNS_MAX_NAME_LENGTH
 +

585 
SIZEOF_DNS_QUERY
, 
PBUF_RAM
);

586 i‡(
p
 !
NULL
) {

587 
	`LWIP_ASSERT
("pbu‡mu° bêö o√Öõ˚", 
p
->
√xt
 =
NULL
);

589 
hdr
 = (
dns_hdr
*)
p
->
∑ylﬂd
;

590 
	`mem£t
(
hdr
, 0, 
SIZEOF_DNS_HDR
);

591 
hdr
->
id
 = 
	`ht⁄s
(id);

592 
hdr
->
Êags1
 = 
DNS_FLAG1_RD
;

593 
hdr
->
numque°i⁄s
 = 
	`ht⁄s
(1);

594 
quîy
 = (*)
hdr
 + 
SIZEOF_DNS_HDR
;

595 
pHo°«me
 = 
«me
;

596 --
pHo°«me
;

600 ++
pHo°«me
;

601 
≈å
 = 
quîy
;

602 ++
quîy
;

603 
n
 = 0; *
pHo°«me
 != '.' && *pHostname != 0; ++pHostname) {

604 *
quîy
 = *
pHo°«me
;

605 ++
quîy
;

606 ++
n
;

608 *
≈å
 = 
n
;

609 } *
pHo°«me
 != 0);

610 *
quîy
++='\0';

613 
qry
.
ty≥
 = 
	`ht⁄s
(
DNS_RRTYPE_A
);

614 
qry
.
˛ass
 = 
	`ht⁄s
(
DNS_RRCLASS_IN
);

615 
	`MEMCPY
–
quîy
, &
qry
, 
SIZEOF_DNS_QUERY
);

618 
	`pbuf_ªÆloc
(
p
, (
quîy
 + 
SIZEOF_DNS_QUERY
Ë- ((*)’->
∑ylﬂd
)));

621 
	`udp_c⁄√˘
(
dns_pcb
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

623 
îr
 = 
	`udp_£ndto
(
dns_pcb
, 
p
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

626 
	`pbuf_‰ì
(
p
);

628 
îr
 = 
ERR_MEM
;

631  
îr
;

632 
	}
}

644 
	$dns_check_íåy
(
u8_t
 
i
)

646 
dns_èbÀ_íåy
 *
pE¡ry
 = &
dns_èbÀ
[
i
];

648 
	`LWIP_ASSERT
("¨øy index ouào‡bounds", 
i
 < 
DNS_TABLE_SIZE
);

650 
pE¡ry
->
°©e
) {

652 
DNS_STATE_NEW
: {

654 
pE¡ry
->
°©e
 = 
DNS_STATE_ASKING
;

655 
pE¡ry
->
numdns
 = 0;

656 
pE¡ry
->
tmr
 = 1;

657 
pE¡ry
->
ªåõs
 = 0;

660 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

664 
DNS_STATE_ASKING
: {

665 i‡(--
pE¡ry
->
tmr
 == 0) {

666 i‡(++
pE¡ry
->
ªåõs
 =
DNS_MAX_RETRIES
) {

667 i‡((
pE¡ry
->
numdns
+1<
DNS_MAX_SERVERS
Ë&& (
dns_£rvîs
[pE¡ry->numdns+1].
addr
!=0)) {

669 
pE¡ry
->
numdns
++;

670 
pE¡ry
->
tmr
 = 1;

671 
pE¡ry
->
ªåõs
 = 0;

674 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\":Åimeout\n", 
pE¡ry
->
«me
));

676 i‡(
pE¡ry
->
found
)

677 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

679 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

680 
pE¡ry
->
found
 = 
NULL
;

686 
pE¡ry
->
tmr
 =ÖE¡ry->
ªåõs
;

689 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

694 
DNS_STATE_DONE
: {

696 i‡(--
pE¡ry
->
âl
 == 0) {

697 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\": flush\n", 
pE¡ry
->
«me
));

699 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

700 
pE¡ry
->
found
 = 
NULL
;

704 
DNS_STATE_UNUSED
:

708 
	`LWIP_ASSERT
("unknown dns_tableÉntry state:", 0);

711 
	}
}

717 
	$dns_check_íåõs
()

719 
u8_t
 
i
;

721 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

722 
	`dns_check_íåy
(
i
);

724 
	}
}

732 
	$dns_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

734 
u8_t
 
i
;

735 *
pHo°«me
;

736 
dns_hdr
 *
hdr
;

737 
dns_™swî
 
™s
;

738 
dns_èbÀ_íåy
 *
pE¡ry
;

739 
u8_t
 
nque°i⁄s
, 
«nswîs
;

740 #i‡(
DNS_USES_STATIC_BUF
 == 0)

741 
u8_t
 
dns_∑ylﬂd
[
DNS_MSG_SIZE
];

743 #i‡(
DNS_USES_STATIC_BUF
 == 2)

744 
u8_t
* 
dns_∑ylﬂd
;

747 
	`LWIP_UNUSED_ARG
(
¨g
);

748 
	`LWIP_UNUSED_ARG
(
pcb
);

749 
	`LWIP_UNUSED_ARG
(
addr
);

750 
	`LWIP_UNUSED_ARG
(
p‹t
);

753 i‡(
p
->
tŸ_Àn
 > 
DNS_MSG_SIZE
) {

754 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo big\n"));

756 
memîr1
;

760 i‡(
p
->
tŸ_Àn
 < (
SIZEOF_DNS_HDR
 + 
SIZEOF_DNS_QUERY
 + 
SIZEOF_DNS_ANSWER
)) {

761 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo small\n"));

763 
memîr1
;

766 #i‡(
DNS_USES_STATIC_BUF
 == 2)

767 
dns_∑ylﬂd
 = 
	`mem_mÆloc
(
p
->
tŸ_Àn
);

768 i‡(
dns_∑ylﬂd
 =
NULL
) {

769 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv: mem_mallocÉrror\n"));

771 
memîr1
;

776 i‡(
	`pbuf_c›y_∑πül
(
p
, 
dns_∑ylﬂd
,Ö->
tŸ_Àn
, 0) ==Ö->tot_len) {

778 
hdr
 = (
dns_hdr
*)
dns_∑ylﬂd
;

779 
i
 = 
	`ht⁄s
(
hdr
->
id
);

780 i‡(
i
 < 
DNS_TABLE_SIZE
) {

781 
pE¡ry
 = &
dns_èbÀ
[
i
];

782 if(
pE¡ry
->
°©e
 =
DNS_STATE_ASKING
) {

784 
pE¡ry
->
°©e
 = 
DNS_STATE_DONE
;

785 
pE¡ry
->
îr
 = 
hdr
->
Êags2
 & 
DNS_FLAG2_ERR_MASK
;

789 
nque°i⁄s
 = 
	`ht⁄s
(
hdr
->
numque°i⁄s
);

790 
«nswîs
 = 
	`ht⁄s
(
hdr
->
num™swîs
);

793 i‡(((
hdr
->
Êags1
 & 
DNS_FLAG1_RESPONSE
Ë=0Ë|| (
pE¡ry
->
îr
 !0Ë|| (
nque°i⁄s
 != 1)) {

794 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿Êags\n", 
pE¡ry
->
«me
));

796 
ª•⁄£îr
;

799 #i‡
DNS_DOES_NAME_CHECK


801 i‡(
	`dns_com∑ª_«me
((*)(
pE¡ry
->
«me
), (*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
) != 0) {

802 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ÇŸ m©chÅÿquîy\n", 
pE¡ry
->
«me
));

804 
ª•⁄£îr
;

809 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
Ë+ 
SIZEOF_DNS_QUERY
;

811 
«nswîs
 > 0) {

813 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)pHostname);

816 
	`MEMCPY
(&
™s
, 
pHo°«me
, 
SIZEOF_DNS_ANSWER
);

817 if((
	`¡ohs
(
™s
.
ty≥
Ë=
DNS_RRTYPE_A
Ë&& (¡ohs◊ns.
˛ass
Ë=
DNS_RRCLASS_IN
Ë&& (¡ohs◊ns.
Àn
Ë=(
ù_addr
)) ) {

819 
pE¡ry
->
âl
 = 
	`¡ohl
(
™s
.ttl);

820 i‡(
pE¡ry
->
âl
 > 
DNS_MAX_TTL
) {

821 
pE¡ry
->
âl
 = 
DNS_MAX_TTL
;

824 
	`MEMCPY
–&(
pE¡ry
->
ùaddr
), (
pHo°«me
+
SIZEOF_DNS_ANSWER
), (
ù_addr
));

825 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ = ", 
pE¡ry
->
«me
));

826 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, (&(
pE¡ry
->
ùaddr
)));

827 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

829 i‡(
pE¡ry
->
found
) {

830 (*
pE¡ry
->
found
)’E¡ry->
«me
, &pE¡ry->
ùaddr
,ÖE¡ry->
¨g
);

833 
memîr2
;

835 
pHo°«me
 =ÖHo°«mê+ 
SIZEOF_DNS_ANSWER
 + 
	`ht⁄s
(
™s
.
Àn
);

837 --
«nswîs
;

839 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿ª•⁄£\n", 
pE¡ry
->
«me
));

841 
ª•⁄£îr
;

847 
memîr2
;

849 
ª•⁄£îr
:

851 i‡(
pE¡ry
->
found
) {

852 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

855 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

856 
pE¡ry
->
found
 = 
NULL
;

858 
memîr2
:

859 #i‡(
DNS_USES_STATIC_BUF
 == 2)

861 
	`mem_‰ì
(
dns_∑ylﬂd
);

864 
memîr1
:

866 
	`pbuf_‰ì
(
p
);

868 
	}
}

878 
îr_t


879 
	$dns_íqueue
(c⁄° *
«me
, 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
)

881 
u8_t
 
i
;

882 
u8_t
 
l£q
, 
l£qi
;

883 
dns_èbÀ_íåy
 *
pE¡ry
 = 
NULL
;

886 
l£q
 = 
l£qi
 = 0;

887 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

888 
pE¡ry
 = &
dns_èbÀ
[
i
];

890 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_UNUSED
)

894 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_DONE
) {

895 i‡((
dns_£qno
 - 
pE¡ry
->
£qno
Ë> 
l£q
) {

896 
l£q
 = 
dns_£qno
 - 
pE¡ry
->
£qno
;

897 
l£qi
 = 
i
;

903 i‡(
i
 =
DNS_TABLE_SIZE
) {

904 i‡((
l£qi
 >
DNS_TABLE_SIZE
Ë|| (
dns_èbÀ
[l£qi].
°©e
 !
DNS_STATE_DONE
)) {

906 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": DNSÉ¡rõ†èbÀ i†fuŒ\n", 
«me
));

907  
ERR_MEM
;

910 
i
 = 
l£qi
;

911 
pE¡ry
 = &
dns_èbÀ
[
i
];

916 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": u£ DNSÉ¡ry %"
U16_F
"\n", 
«me
, (
u16_t
)(
i
)));

919 
pE¡ry
->
°©e
 = 
DNS_STATE_NEW
;

920 
pE¡ry
->
£qno
 = 
dns_£qno
++;

921 
pE¡ry
->
found
 = found;

922 
pE¡ry
->
¨g
 = 
ˇŒback_¨g
;

923 
	`°r˝y
(
pE¡ry
->
«me
,Çame);

926 
	`dns_check_íåy
(
i
);

929  
ERR_INPROGRESS
;

930 
	}
}

950 
îr_t


951 
	$dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
, 
dns_found_ˇŒback
 
found
,

952 *
ˇŒback_¨g
)

956 i‡((
dns_pcb
 =
NULL
Ë|| (
addr
 == NULL) ||

957 (!
ho°«me
) || (!hostname[0]) ||

958 (
	`°æí
(
ho°«me
Ë>
DNS_MAX_NAME_LENGTH
)) {

959  
ERR_VAL
;

962 #i‡
LWIP_HAVE_LOOPIF


963 i‡(
	`°rcmp
(
ho°«me
,"localhost")==0) {

964 
addr
->add∏
INADDR_LOOPBACK
;

965  
ERR_OK
;

971 i‡(((
addr
->add∏
	`öë_addr
(
ho°«me
)Ë!
INADDR_NONE
) ||

972 ((
addr
->add∏
	`dns_lookup
(
ho°«me
)Ë!
INADDR_NONE
)) {

973  
ERR_OK
;

977  
	`dns_íqueue
(
ho°«me
, 
found
, 
ˇŒback_¨g
);

978 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/init.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öô.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/sockës.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝.h
"

53 
	~"lwù/¢mp_msg.h
"

54 
	~"lwù/autoù.h
"

55 
	~"lwù/igmp.h
"

56 
	~"lwù/dns.h
"

57 
	~"√tif/ëh¨p.h
"

62 #i‚de‡
BYTE_ORDER


65 #i‡(!
IP_SOF_BROADCAST
 && 
IP_SOF_BROADCAST_RECV
)

68 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

71 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

74 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

77 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

80 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

83 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

86 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

89 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

92 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

95 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

98 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

101 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

104 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

107 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

110 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

113 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

116 #i‡(
PPP_SUPPORT
 && (
NO_SYS
==1))

119 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

122 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

125 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

128 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

131 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

134 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

137 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

140 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

143 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

146 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

150 #i‡((
NO_SYS
==0Ë&& (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
)))

153 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

156 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

159 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

162 #i‡(
PBUF_POOL_BUFSIZE
 <
MEM_ALIGNMENT
)

165 #i‡(
TCP_QUEUE_OOSEQ
 && !
LWIP_TCP
)

168 #i‡(
DNS_LOCAL_HOSTLIST
 && !
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && !(
deföed
(
DNS_LOCAL_HOSTLIST_INIT
)))

175 #ifde‡
MEMP_NUM_TCPIP_MSG


178 #ifde‡
MEMP_NUM_API_MSG


181 #ifde‡
TCP_REXMIT_DEBUG


184 #ifde‡
RAW_STATS


187 #ifde‡
ETHARP_QUEUE_FIRST


190 #ifde‡
ETHARP_ALWAYS_INSERT


193 #i‡
SO_REUSE


199 #ifde‡
LWIP_DEBUG


201 
	$lwù_ßnôy_check
()

204 #i‡
LWIP_NETCONN


205 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

206 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

208 #i‡
LWIP_TCP


209 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

210 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

211 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

212 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

213 i‡(
TCP_SNDLOWAT
 > 
TCP_SND_BUF
)

214 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan orÉqualÅo TCP_SND_BUF.\n"));

215 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

216 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

217 i‡(
TCP_WND
 < 
TCP_MSS
)

218 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

220 
	}
}

222 
	#lwù_ßnôy_check
()

	)

229 
	$lwù_öô
()

232 
	`lwù_ßnôy_check
();

235 
	`°©s_öô
();

236 
	`sys_öô
();

237 
	`mem_öô
();

238 
	`memp_öô
();

239 
	`pbuf_öô
();

240 
	`√tif_öô
();

241 #i‡
LWIP_SOCKET


242 
	`lwù_sockë_öô
();

244 
	`ù_öô
();

245 #i‡
LWIP_ARP


246 
	`ëh¨p_öô
();

248 #i‡
LWIP_RAW


249 
	`øw_öô
();

251 #i‡
LWIP_UDP


252 
	`udp_öô
();

254 #i‡
LWIP_TCP


255 
	`t˝_öô
();

257 #i‡
LWIP_SNMP


258 
	`¢mp_öô
();

260 #i‡
LWIP_AUTOIP


261 
	`autoù_öô
();

263 #i‡
LWIP_IGMP


264 
	`igmp_öô
();

266 #i‡
LWIP_DNS


267 
	`dns_öô
();

269 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/autoip.c

65 
	~"lwù/›t.h
"

67 #i‡
LWIP_AUTOIP


69 
	~"lwù/mem.h
"

70 
	~"lwù/udp.h
"

71 
	~"lwù/ù_addr.h
"

72 
	~"lwù/√tif.h
"

73 
	~"lwù/autoù.h
"

74 
	~"√tif/ëh¨p.h
"

76 
	~<°dlib.h
>

77 
	~<°rög.h
>

80 
	#AUTOIP_NET
 0xA9FE0000

	)

82 
	#AUTOIP_RANGE_START
 (
AUTOIP_NET
 | 0x0100)

	)

84 
	#AUTOIP_RANGE_END
 (
AUTOIP_NET
 | 0xFEFF)

	)

89 #i‚de‡
LWIP_AUTOIP_RAND


90 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

91 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

92 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

93 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

94 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

101 #i‚de‡
LWIP_AUTOIP_CREATE_SEED_ADDR


102 
	#LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
) \

103 (
AUTOIP_RANGE_START
 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) | \

104 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)))

	)

108 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

111 
autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr
 *
IPAddr
);

114 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

117 
îr_t
 
autoù_böd
(
√tif
 *netif);

123 
	$autoù_öô
()

125 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_init()\n"));

126 
	}
}

132 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

135 
de„nd
 = 1;

137 if(
de„nd
) {

138 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

142 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

146 
	`autoù_°¨t
(
√tif
);

148 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

150 
	`autoù_¨p_™noun˚
(
√tif
);

151 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

154 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

157 
	`autoù_°¨t
(
√tif
);

159 
	}
}

168 
	$autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr
 *
IPAddr
)

174 
u32_t
 
addr
 = 
	`¡ohl
(
	`LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
));

175 
addr
 +
√tif
->
autoù
->
åõd_Œùaddr
;

176 
addr
 = 
AUTOIP_NET
 | (addr & 0xffff);

179 i‡(
addr
 < 
AUTOIP_RANGE_START
) {

180 
addr
 +
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

182 i‡(
addr
 > 
AUTOIP_RANGE_END
) {

183 
addr
 -
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

185 
	`LWIP_ASSERT
("AUTOIPáddªs†nŸ i¿ønge", (
addr
 >
AUTOIP_RANGE_START
) &&

186 (
addr
 <
AUTOIP_RANGE_END
));

187 
IPAddr
->
addr
 = 
	`ht⁄l
(addr);

189 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

190 ("autoù_¸óã_addr():Årõd_Œùaddr=%"
U16_F
", 0x%08"
X32_F
"\n",

191 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), (
u32_t
)(
IPAddr
->
addr
)));

192 
	}
}

199 
îr_t


200 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

202  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

203 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

204 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

205 
	}
}

212 
îr_t


213 
	$autoù_böd
(
√tif
 *netif)

215 
autoù
 *autoù = 
√tif
->autoip;

216 
ù_addr
 
¢_mask
, 
gw_addr
;

218 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

219 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" 0x%08"
X32_F
"\n",

220 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
, 
autoù
->
Œùaddr
.
addr
));

222 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

223 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

225 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

226 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

227 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

230 
	`√tif_£t_up
(
√tif
);

232  
ERR_OK
;

233 
	}
}

240 
îr_t


241 
	$autoù_°¨t
(
√tif
 *netif)

243 
autoù
 *autoù = 
√tif
->autoip;

244 
îr_t
 
ªsu…
 = 
ERR_OK
;

246 if(
	`√tif_is_up
(
√tif
)) {

247 
	`√tif_£t_down
(
√tif
);

253 
√tif
->
ù_addr
.
addr
 = 0;

254 
√tif
->
√tmask
.
addr
 = 0;

255 
√tif
->
gw
.
addr
 = 0;

257 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

258 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

259 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

260 if(
autoù
 =
NULL
) {

262 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

264 
autoù
 = 
	`mem_mÆloc
((autoip));

265 if(
autoù
 =
NULL
) {

266 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

268  
ERR_MEM
;

270 
	`mem£t
–
autoù
, 0, (autoip));

272 
√tif
->
autoù
 =áutoip;

273 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

275 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

276 
autoù
->
âw
 = 0;

277 
autoù
->
£¡_num
 = 0;

278 
	`mem£t
(&
autoù
->
Œùaddr
, 0, (
ù_addr
));

279 
autoù
->
œ°c⁄Êi˘
 = 0;

282 
	`autoù_¸óã_addr
(
√tif
, &(
autoù
->
Œùaddr
));

283 
autoù
->
åõd_Œùaddr
++;

284 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

285 
autoù
->
£¡_num
 = 0;

291 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

299 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

300 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

303  
ªsu…
;

304 
	}
}

311 
îr_t


312 
	$autoù_°›
(
√tif
 *netif)

314 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

315 
	`√tif_£t_down
(
√tif
);

316  
ERR_OK
;

317 
	}
}

323 
	$autoù_tmr
()

325 
√tif
 *√ti‡
√tif_li°
;

327 
√tif
 !
NULL
) {

329 i‡(
√tif
->
autoù
 !
NULL
) {

330 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

331 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

334 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

335 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

336 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

338 
√tif
->
autoù
->
°©e
) {

339 
AUTOIP_STATE_PROBING
:

340 if(
√tif
->
autoù
->
âw
 > 0) {

341 
√tif
->
autoù
->
âw
--;

343 if(
√tif
->
autoù
->
£¡_num
 =
PROBE_NUM
) {

344 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

345 
√tif
->
autoù
->
£¡_num
 = 0;

346 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

348 
	`ëh¨p_ªque°
(
√tif
, &“ëif->
autoù
->
Œùaddr
));

349 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

351 
√tif
->
autoù
->
£¡_num
++;

353 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

354 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

355 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

360 
AUTOIP_STATE_ANNOUNCING
:

361 if(
√tif
->
autoù
->
âw
 > 0) {

362 
√tif
->
autoù
->
âw
--;

364 if(
√tif
->
autoù
->
£¡_num
 == 0) {

368 
	`autoù_böd
(
√tif
);

371 if(
√tif
->
autoù
->
£¡_num
 =
ANNOUNCE_NUM
) {

372 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

373 
√tif
->
autoù
->
£¡_num
 = 0;

374 
√tif
->
autoù
->
âw
 = 0;

376 
	`autoù_¨p_™noun˚
(
√tif
);

377 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

379 
√tif
->
autoù
->
£¡_num
++;

380 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

387 
√tif
 =Çëif->
√xt
;

389 
	}
}

398 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

400 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_arp_reply()\n"));

401 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

407 
ù_addr
 
sùaddr
, 
dùaddr
;

408 
ëh_addr
 
√tiÁddr
;

409 
√tiÁddr
.
addr
[0] = 
√tif
->
hwaddr
[0];

410 
√tiÁddr
.
addr
[1] = 
√tif
->
hwaddr
[1];

411 
√tiÁddr
.
addr
[2] = 
√tif
->
hwaddr
[2];

412 
√tiÁddr
.
addr
[3] = 
√tif
->
hwaddr
[3];

413 
√tiÁddr
.
addr
[4] = 
√tif
->
hwaddr
[4];

414 
√tiÁddr
.
addr
[5] = 
√tif
->
hwaddr
[5];

419 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

420 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

422 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

423 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

424 (
√tif
->
autoù
->
£¡_num
 == 0))) {

431 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

432 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

433 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

434 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

436 
	`autoù_°¨t
(
√tif
);

443 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

444 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

445 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

447 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

451 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/icmp.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_ICMP


46 
	~"lwù/icmp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/öë_chksum.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

54 
	~<°rög.h
>

59 #i‚de‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


60 
	#LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
 1

	)

64 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

66 
icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
);

78 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
u8_t
 
ty≥
;

81 #ifde‡
LWIP_DEBUG


82 
u8_t
 
code
;

84 
icmp_echo_hdr
 *
õcho
;

85 
ù_hdr
 *
ùhdr
;

86 
ù_addr
 
tm∑ddr
;

87 
s16_t
 
hÀn
;

89 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

90 
	`¢mp_öc_icmpömsgs
();

93 
ùhdr
 = 
p
->
∑ylﬂd
;

94 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

95 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

96 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

97 
À√º
;

100 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

101 #ifde‡
LWIP_DEBUG


102 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

104 
ty≥
) {

105 
ICMP_ECHO
:

106 #i‡!
LWIP_MULTICAST_PING
 || !
LWIP_BROADCAST_PING


108 
ac˚±ed
 = 1;

109 #i‡!
LWIP_MULTICAST_PING


111 i‡(
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

112 
ac˚±ed
 = 0;

115 #i‡!
LWIP_BROADCAST_PING


117 i‡(
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
)) {

118 
ac˚±ed
 = 0;

122 i‡(!
ac˚±ed
) {

123 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

124 
	`ICMP_STATS_INC
(
icmp
.
îr
);

125 
	`pbuf_‰ì
(
p
);

130 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

131 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

132 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

133 
À√º
;

135 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

136 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

137 
	`pbuf_‰ì
(
p
);

138 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

139 
	`¢mp_öc_icmpöîr‹s
();

142 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


143 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

147 
pbuf
 *
r
;

149 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

150 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

151 
memîr
;

154 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

155 i‡(
r
 =
NULL
) {

156 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

157 
memîr
;

159 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

160 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

162 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

163 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

164 
memîr
;

166 
ùhdr
 = 
r
->
∑ylﬂd
;

168 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

169 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

170 
memîr
;

173 
	`pbuf_‰ì
(
p
);

175 
p
 = 
r
;

178 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

179 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

180 
memîr
;

187 
õcho
 = 
p
->
∑ylﬂd
;

188 
tm∑ddr
.
addr
 = 
ùhdr
->
§c
.addr;

189 
ùhdr
->
§c
.
addr
 = iphdr->
de°
.addr;

190 
ùhdr
->
de°
.
addr
 = 
tm∑ddr
.addr;

191 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

193 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP_ECHO
 << 8))) {

194 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8) + 1;

196 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8);

200 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

201 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

202 #i‡
CHECKSUM_GEN_IP


203 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

206 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

208 
	`¢mp_öc_icmpoutmsgs
();

210 
	`¢mp_öc_icmpouãch‹ïs
();

212 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

213 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

215 
îr_t
 
ªt
;

216 
ªt
 = 
	`ù_ouçut_if
(
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

217 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

218 i‡(
ªt
 !
ERR_OK
) {

219 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

224 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

225 (
s16_t
)
ty≥
, (s16_t)
code
));

226 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

227 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

229 
	`pbuf_‰ì
(
p
);

231 
À√º
:

232 
	`pbuf_‰ì
(
p
);

233 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

234 
	`¢mp_öc_icmpöîr‹s
();

236 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


237 
memîr
:

238 
	`pbuf_‰ì
(
p
);

239 
	`ICMP_STATS_INC
(
icmp
.
îr
);

240 
	`¢mp_öc_icmpöîr‹s
();

243 
	}
}

255 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

257 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_DUR
, 
t
);

258 
	}
}

260 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


269 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

271 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_TE
, 
t
);

272 
	}
}

285 
	$icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
)

287 
pbuf
 *
q
;

288 
ù_hdr
 *
ùhdr
;

290 
icmp_echo_hdr
 *
icmphdr
;

293 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

294 
PBUF_RAM
);

295 i‡(
q
 =
NULL
) {

296 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

299 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

300 (
q
->
Àn
 >((
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

302 
ùhdr
 = 
p
->
∑ylﬂd
;

303 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

304 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

305 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

306 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

307 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

309 
icmphdr
 = 
q
->
∑ylﬂd
;

310 
icmphdr
->
ty≥
 =Åype;

311 
icmphdr
->
code
 = code;

312 
icmphdr
->
id
 = 0;

313 
icmphdr
->
£qno
 = 0;

316 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_echo_hdr
), (u8_à*)
p
->payload,

317 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

320 
icmphdr
->
chksum
 = 0;

321 
icmphdr
->
chksum
 = 
	`öë_chksum
(icmphdr, 
q
->
Àn
);

322 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

324 
	`¢mp_öc_icmpoutmsgs
();

326 
	`¢mp_öc_icmpouâimìxcds
();

327 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

328 
	`pbuf_‰ì
(
q
);

329 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/igmp.c

80 
	~"lwù/›t.h
"

82 #i‡
LWIP_IGMP


84 
	~"lwù/igmp.h
"

85 
	~"lwù/debug.h
"

86 
	~"lwù/def.h
"

87 
	~"lwù/mem.h
"

88 
	~"lwù/ù.h
"

89 
	~"lwù/öë.h
"

90 
	~"lwù/öë_chksum.h
"

91 
	~"lwù/√tif.h
"

92 
	~"lwù/icmp.h
"

93 
	~"lwù/udp.h
"

94 
	~"lwù/t˝.h
"

95 
	~"lwù/°©s.h
"

97 
	~"°rög.h
"

103 
igmp_group
* 
	gigmp_group_li°
;

104 
ù_addr
 
	gÆlsy°ems
;

105 
ù_addr
 
	gÆÃouãrs
;

111 
	$igmp_öô
()

113 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

115 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

116 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

117 
	}
}

119 #ifde‡
LWIP_DEBUG


124 
	$igmp_dump_group_li°
()

126 
igmp_group
 *
group
 = 
igmp_group_li°
;

128 
group
 !
NULL
) {

129 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

130 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

131 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
öãrÁ˚
));

132 
group
 = group->
√xt
;

134 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

135 
	}
}

137 
	#igmp_dump_group_li°
()

	)

145 
îr_t


146 
	$igmp_°¨t
(
√tif
 *netif)

148 
igmp_group
* 
group
;

150 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%p\n", 
√tif
));

152 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

154 i‡(
group
 !
NULL
) {

155 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

156 
group
->
u£
++;

159 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

160 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

161 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

162 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

163 
√tif
->
	`igmp_mac_fûãr
–√tif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

166  
ERR_OK
;

169  
ERR_MEM
;

170 
	}
}

177 
îr_t


178 
	$igmp_°›
(
√tif
 *netif)

180 
igmp_group
 *
group
 = 
igmp_group_li°
;

181 
igmp_group
 *
¥ev
 = 
NULL
;

182 
igmp_group
 *
√xt
;

185 
group
 !
NULL
) {

186 
√xt
 = 
group
->next;

188 i‡(
group
->
öãrÁ˚
 =
√tif
) {

190 i‡(
group
 =
igmp_group_li°
) {

191 
igmp_group_li°
 = 
√xt
;

194 i‡(
¥ev
 !
NULL
) {

195 
¥ev
->
√xt
 =Çext;

198 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

199 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

200 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

201 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

202 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

205 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

208 
¥ev
 = 
group
;

211 
group
 = 
√xt
;

213  
ERR_OK
;

214 
	}
}

222 
	$igmp_ªp‹t_groups
–
√tif
 *netif)

224 
igmp_group
 *
group
 = 
igmp_group_li°
;

226 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%p\n", 
√tif
));

228 
group
 !
NULL
) {

229 i‡(
group
->
öãrÁ˚
 =
√tif
) {

230 
	`igmp_dñayög_membî
–
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

232 
group
 = group->
√xt
;

234 
	}
}

244 
igmp_group
 *

245 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

247 
igmp_group
 *
group
 = 
igmp_group_li°
;

249 
group
 !
NULL
) {

250 i‡((
group
->
öãrÁ˚
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

251  
group
;

253 
group
 = group->
√xt
;

259  
NULL
;

260 
	}
}

270 
igmp_group
 *

271 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

273 
igmp_group
 *
group
 = 
igmp_group_li°
;

276 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

277 i‡(
group
 !
NULL
) {

279  
group
;

283 
group
 = 
	`memp_mÆloc
(
MEMP_IGMP_GROUP
);

284 i‡(
group
 !
NULL
) {

285 
group
->
öãrÁ˚
 = 
iÂ
;

286 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

287 
group
->
timî
 = 0;

288 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

289 
group
->
œ°_ªp‹ãr_Êag
 = 0;

290 
group
->
u£
 = 0;

291 
group
->
√xt
 = 
igmp_group_li°
;

293 
igmp_group_li°
 = 
group
;

296 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

297 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

298 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
iÂ
));

300  
group
;

301 
	}
}

309 
îr_t


310 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

312 
îr_t
 
îr
 = 
ERR_OK
;

315 i‡(
igmp_group_li°
 =
group
) {

316 
igmp_group_li°
 = 
group
->
√xt
;

319 
igmp_group
 *
tmpGroup
;

320 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

321 i‡(
tmpGroup
->
√xt
 =
group
) {

322 
tmpGroup
->
√xt
 = 
group
->next;

327 i‡(
tmpGroup
 =
NULL
)

328 
îr
 = 
ERR_ARG
;

331 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

333  
îr
;

334 
	}
}

344 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
)

346 
ù_hdr
 * 
ùhdr
;

347 
igmp_msg
* 
igmp
;

348 
igmp_group
* 
group
;

349 
igmp_group
* 
grou¥ef
;

352 
ùhdr
 = 
p
->
∑ylﬂd
;

353 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

354 
	`pbuf_‰ì
(
p
);

355 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

356 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

360 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

361 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

362 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

363 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

364 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
öp
));

367 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

368 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

369 
	`pbuf_‰ì
(
p
);

370 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

371 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

376 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

379 i‡(!
group
) {

380 
	`pbuf_‰ì
(
p
);

381 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

386 
igmp
->
igmp_msgty≥
) {

387 
IGMP_MEMB_QUERY
: {

389 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& (
igmp
->
igmp_group_addªss
.
addr
 == 0)) {

391 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

393 i‡(
igmp
->
igmp_maxª•
 == 0) {

394 
	`IGMP_STATS_INC
(
igmp
.
v1_rxed
);

395 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

396 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

399 
	`IGMP_STATS_INC
(
igmp
.
group_quîy_rxed
);

400 
grou¥ef
 = 
igmp_group_li°
;

401 
grou¥ef
) {

403 i‡((
grou¥ef
->
öãrÁ˚
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

404 
	`igmp_dñayög_membî
–
grou¥ef
, 
igmp
->
igmp_maxª•
);

406 
grou¥ef
 = grou¥ef->
√xt
;

410 i‡(
group
->
group_addªss
.
addr
 != 0) {

411 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

412 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

413 i‡(
	`ù_addr_cmp
 (
de°
, &
Ælsy°ems
)) {

414 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

416 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
igmp
->
igmp_group_addªss
);

418 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

421 i‡(
group
 !
NULL
) {

422 
	`IGMP_STATS_INC
(
igmp
.
uniˇ°_quîy
);

423 
	`igmp_dñayög_membî
–
group
, 
igmp
->
igmp_maxª•
);

429 
IGMP_V2_MEMB_REPORT
: {

430 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

432 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_rxed
);

433 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

435 
group
->
timî
 = 0;

436 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

437 
group
->
œ°_ªp‹ãr_Êag
 = 0;

442 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",

443 
igmp
->
igmp_msgty≥
, 
group
->
group_°©e
, &group, group->
öãrÁ˚
));

448 
	`pbuf_‰ì
(
p
);

450 
	}
}

459 
îr_t


460 
	$igmp_joögroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

462 
îr_t
 
îr
 = 
ERR_VAL
;

463 
igmp_group
 *
group
;

464 
√tif
 *netif;

467 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

468 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

471 
√tif
 = 
√tif_li°
;

472 
√tif
 !
NULL
) {

474 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

476 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

478 i‡(
group
 !
NULL
) {

480 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

481 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

484 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

485 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

486 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

489 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

490 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

491 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

492 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

493 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

496 
	`IGMP_STATS_INC
(
igmp
.
joö_£¡
);

497 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

499 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

502 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

505 
group
->
u£
++;

507 
îr
 = 
ERR_OK
;

511 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

512  
ERR_MEM
;

516 
√tif
 =Çëif->
√xt
;

519  
îr
;

520 
	}
}

529 
îr_t


530 
	$igmp_Àavegroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

532 
îr_t
 
îr
 = 
ERR_VAL
;

533 
igmp_group
 *
group
;

534 
√tif
 *netif;

537 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

538 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

541 
√tif
 = 
√tif_li°
;

542 
√tif
 !
NULL
) {

544 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

546 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

548 i‡(
group
 !
NULL
) {

550 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

551 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

552 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

555 i‡(
group
->
u£
 <= 1) {

557 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

558 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

559 
	`IGMP_STATS_INC
(
igmp
.
Àave_£¡
);

560 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

564 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

565 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

566 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

567 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

568 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

571 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

572 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

573 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

576 
	`igmp_ªmove_group
(
group
);

579 
group
->
u£
--;

582 
îr
 = 
ERR_OK
;

585 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

589 
√tif
 =Çëif->
√xt
;

592  
îr
;

593 
	}
}

600 
	$igmp_tmr
()

602 
igmp_group
 *
group
 = 
igmp_group_li°
;

604 
group
 !
NULL
) {

605 i‡(
group
->
timî
 != 0) {

606 
group
->
timî
 -= 1;

607 i‡(
group
->
timî
 == 0) {

608 
	`igmp_timeout
(
group
);

611 
group
 = group->
√xt
;

613 
	}
}

622 
	$igmp_timeout
(
igmp_group
 *
group
)

625 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

626 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

627 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

628 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
öãrÁ˚
));

630 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

632 
	}
}

642 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

647 
group
->
timî
 = 
max_time
;

648 
	}
}

656 
	$igmp_°›_timî
(
igmp_group
 *
group
)

658 
group
->
timî
 = 0;

659 
	}
}

668 
	$igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
)

670 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
) ||

671 ((
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
Ë&& (
maxª•
 > group->
timî
))) {

672 
	`igmp_°¨t_timî
(
group
, (
maxª•
)/2);

673 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

675 
	}
}

696 
îr_t


697 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

698 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif)

701 
u16_t
 
ø
[2];

702 
ø
[0] = 
	`ht⁄s
 (
ROUTER_ALERT
);

703 
ø
[1] = 0x0000;

704  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 0, 
¥Ÿo
, 
√tif
, 
ø
, 
ROUTER_ALERTLEN
);

705 
	}
}

714 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

716 
pbuf
* 
p
 = 
NULL
;

717 
igmp_msg
* 
igmp
 = 
NULL
;

718 
ù_addr
 
§c
 = {0};

719 
ù_addr
* 
de°
 = 
NULL
;

722 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
);

724 i‡(
p
) {

725 
igmp
 = 
p
->
∑ylﬂd
;

726 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

727 (
p
->
Àn
 >(
igmp_msg
)));

728 
	`ù_addr_£t
(&
§c
, &((
group
->
öãrÁ˚
)->
ù_addr
));

730 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

731 
de°
 = &(
group
->
group_addªss
);

732 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_£¡
);

733 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

734 
group
->
œ°_ªp‹ãr_Êag
 = 1;

736 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

737 
de°
 = &
ÆÃouãrs
;

738 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

742 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

743 
igmp
->
igmp_msgty≥
 = 
ty≥
;

744 
igmp
->
igmp_maxª•
 = 0;

745 
igmp
->
igmp_checksum
 = 0;

746 
igmp
->
igmp_checksum
 = 
	`öë_chksum
–igmp, 
IGMP_MINLEN
);

748 
	`igmp_ù_ouçut_if
(
p
, &
§c
, 
de°
, 
IGMP_TTL
, 
IP_PROTO_IGMP
, 
group
->
öãrÁ˚
);

751 
	`pbuf_‰ì
(
p
);

753 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

755 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/inet.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë.h
"

44 #i‚de‡
i•röt


45 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

46 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

47 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

48 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

49 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

50 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

60 
u32_t


61 
	$öë_addr
(c⁄° *
˝
)

63 
ö_addr
 
vÆ
;

65 i‡(
	`öë_©⁄
(
˝
, &
vÆ
)) {

66  (
vÆ
.
s_addr
);

68  (
INADDR_NONE
);

69 
	}
}

83 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
)

85 
u32_t
 
vÆ
;

86 
u8_t
 
ba£
;

87 
c
;

88 
u32_t
 
∑πs
[4];

89 
u32_t
 *
µ
 = 
∑πs
;

91 
c
 = *
˝
;

98 i‡(!
	`isdigô
(
c
))

100 
vÆ
 = 0;

101 
ba£
 = 10;

102 i‡(
c
 == '0') {

103 
c
 = *++
˝
;

104 i‡(
c
 == 'x' || c == 'X') {

105 
ba£
 = 16;

106 
c
 = *++
˝
;

108 
ba£
 = 8;

111 i‡(
	`isdigô
(
c
)) {

112 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

113 
c
 = *++
˝
;

114 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

115 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

116 
c
 = *++
˝
;

120 i‡(
c
 == '.') {

127 i‡(
µ
 >
∑πs
 + 3)

129 *
µ
++ = 
vÆ
;

130 
c
 = *++
˝
;

137 i‡(
c
 !'\0' && !
	`is•a˚
(c))

143 
µ
 - 
∑πs
 + 1) {

152 i‡(
vÆ
 > 0xffffffUL)

154 
vÆ
 |
∑πs
[0] << 24;

158 i‡(
vÆ
 > 0xffff)

160 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

164 i‡(
vÆ
 > 0xff)

166 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

169 i‡(
addr
)

170 
addr
->
s_addr
 = 
	`ht⁄l
(
vÆ
);

172 
	}
}

183 
	$öë_¡ﬂ
(
ö_addr
 
addr
)

185 
°r
[16];

186 
u32_t
 
s_addr
 = 
addr
.s_addr;

187 
öv
[3];

188 *
Ω
;

189 
u8_t
 *
≠
;

190 
u8_t
 
ªm
;

191 
u8_t
 
n
;

192 
u8_t
 
i
;

194 
Ω
 = 
°r
;

195 
≠
 = (
u8_t
 *)&
s_addr
;

196 
n
 = 0;Ç < 4;Ç++) {

197 
i
 = 0;

199 
ªm
 = *
≠
 % (
u8_t
)10;

200 *
≠
 /(
u8_t
)10;

201 
öv
[
i
++] = '0' + 
ªm
;

202 } *
≠
);

203 
i
--)

204 *
Ω
++ = 
öv
[
i
];

205 *
Ω
++ = '.';

206 
≠
++;

208 *--
Ω
 = 0;

209  
°r
;

210 
	}
}

225 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

233 
u16_t


234 
	$ht⁄s
(
u16_t
 
n
)

236  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

237 
	}
}

245 
u16_t


246 
	$¡ohs
(
u16_t
 
n
)

248  
	`ht⁄s
(
n
);

249 
	}
}

257 
u32_t


258 
	$ht⁄l
(
u32_t
 
n
)

260  ((
n
 & 0xff) << 24) |

261 ((
n
 & 0xff00) << 8) |

262 ((
n
 & 0xff0000UL) >> 8) |

263 ((
n
 & 0xff000000UL) >> 24);

264 
	}
}

272 
u32_t


273 
	$¡ohl
(
u32_t
 
n
)

275  
	`ht⁄l
(
n
);

276 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/inet_chksum.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë_chksum.h
"

42 
	~"lwù/öë.h
"

44 
	~<°ddef.h
>

57 #i‚de‡
LWIP_CHKSUM


58 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

59 #i‚de‡
LWIP_CHKSUM_ALGORITHM


60 
	#LWIP_CHKSUM_ALGORITHM
 1

	)

64 #i‚de‡
LWIP_CHKSUM_ALGORITHM


65 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

69 #i‡
LWIP_PLATFORM_BYTESWAP
 && (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

71 
	#SWAP_BYTES_IN_WORD
(
w
Ë
	`LWIP_PLATFORM_HTONS
(w)

	)

74 
	#SWAP_BYTES_IN_WORD
(
w
Ë((w & 0xffË<< 8Ë| ((w & 0xff00Ë>> 8)

	)

78 
	#FOLD_U32T
(
u
Ë((u >> 16Ë+ (u & 0x0000ffffUL))

	)

80 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

91 
u16_t


92 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

94 
u32_t
 
acc
;

95 
u16_t
 
§c
;

96 
u8_t
 *
o˘ë±r
;

98 
acc
 = 0;

100 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

101 
Àn
 > 1) {

104 
§c
 = (*
o˘ë±r
) << 8;

105 
o˘ë±r
++;

107 
§c
 |(*
o˘ë±r
);

108 
o˘ë±r
++;

109 
acc
 +
§c
;

110 
Àn
 -= 2;

112 i‡(
Àn
 > 0) {

114 
§c
 = (*
o˘ë±r
) << 8;

115 
acc
 +
§c
;

118 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

119 i‡((
acc
 & 0xffff0000UL) != 0) {

120 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

125  
	`ht⁄s
((
u16_t
)
acc
);

126 
	}
}

129 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

145 
u16_t


146 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

148 
u8_t
 *
pb
 = 
d©≠å
;

149 
u16_t
 *
ps
, 
t
 = 0;

150 
u32_t
 
sum
 = 0;

151 
odd
 = ((
u32_t
)
pb
 & 1);

154 i‡(
odd
 && 
Àn
 > 0) {

155 ((
u8_t
 *)&
t
)[1] = *
pb
++;

156 
Àn
--;

160 
ps
 = (
u16_t
 *)
pb
;

161 
Àn
 > 1) {

162 
sum
 +*
ps
++;

163 
Àn
 -= 2;

167 i‡(
Àn
 > 0) {

168 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;;

172 
sum
 +
t
;

176 
sum
 = 
	`FOLD_U32T
(sum);

177 
sum
 = 
	`FOLD_U32T
(sum);

180 i‡(
odd
) {

181 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

184  
sum
;

185 
	}
}

188 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

201 
u16_t


202 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

204 
u8_t
 *
pb
 = 
d©≠å
;

205 
u16_t
 *
ps
, 
t
 = 0;

206 
u32_t
 *
∂
;

207 
u32_t
 
sum
 = 0, 
tmp
;

209 
odd
 = ((
u32_t
)
pb
 & 1);

211 i‡(
odd
 && 
Àn
 > 0) {

212 ((
u8_t
 *)&
t
)[1] = *
pb
++;

213 
Àn
--;

216 
ps
 = (
u16_t
 *)
pb
;

218 i‡(((
u32_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

219 
sum
 +*
ps
++;

220 
Àn
 -= 2;

223 
∂
 = (
u32_t
 *)
ps
;

225 
Àn
 > 7) {

226 
tmp
 = 
sum
 + *
∂
++;

227 i‡(
tmp
 < 
sum
) {

228 
tmp
++;

231 
sum
 = 
tmp
 + *
∂
++;

232 i‡(
sum
 < 
tmp
) {

233 
sum
++;

236 
Àn
 -= 8;

240 
sum
 = 
	`FOLD_U32T
(sum);

242 
ps
 = (
u16_t
 *)
∂
;

245 
Àn
 > 1) {

246 
sum
 +*
ps
++;

247 
Àn
 -= 2;

251 i‡(
Àn
 > 0) {

252 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

255 
sum
 +
t
;

259 
sum
 = 
	`FOLD_U32T
(sum);

260 
sum
 = 
	`FOLD_U32T
(sum);

262 i‡(
odd
) {

263 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

266  
sum
;

267 
	}
}

282 
u16_t


283 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

284 
ù_addr
 *
§c
, ù_add∏*
de°
,

285 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

287 
u32_t
 
acc
;

288 
pbuf
 *
q
;

289 
u8_t
 
sw≠≥d
;

291 
acc
 = 0;

292 
sw≠≥d
 = 0;

294 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

295 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

296 (*)
q
, (*)q->
√xt
));

297 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

301 
acc
 = 
	`FOLD_U32T
(acc);

302 i‡(
q
->
Àn
 % 2 != 0) {

303 
sw≠≥d
 = 1 - swapped;

304 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

309 i‡(
sw≠≥d
) {

310 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

312 
acc
 +(
§c
->
addr
 & 0xffffUL);

313 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

314 
acc
 +(
de°
->
addr
 & 0xffffUL);

315 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

316 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

317 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

321 
acc
 = 
	`FOLD_U32T
(acc);

322 
acc
 = 
	`FOLD_U32T
(acc);

323 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

324  (
u16_t
)~(
acc
 & 0xffffUL);

325 
	}
}

340 #i‡
LWIP_UDPLITE


341 
u16_t


342 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

343 
ù_addr
 *
§c
, ù_add∏*
de°
,

344 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

346 
u32_t
 
acc
;

347 
pbuf
 *
q
;

348 
u8_t
 
sw≠≥d
;

349 
u16_t
 
chkÀn
;

351 
acc
 = 0;

352 
sw≠≥d
 = 0;

354 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

355 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

356 (*)
q
, (*)q->
√xt
));

357 
chkÀn
 = 
q
->
Àn
;

358 i‡(
chkÀn
 > 
chksum_Àn
) {

359 
chkÀn
 = 
chksum_Àn
;

361 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

362 
chksum_Àn
 -
chkÀn
;

363 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

366 
acc
 = 
	`FOLD_U32T
(acc);

367 i‡(
q
->
Àn
 % 2 != 0) {

368 
sw≠≥d
 = 1 - swapped;

369 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

374 i‡(
sw≠≥d
) {

375 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

377 
acc
 +(
§c
->
addr
 & 0xffffUL);

378 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

379 
acc
 +(
de°
->
addr
 & 0xffffUL);

380 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

381 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

382 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

386 
acc
 = 
	`FOLD_U32T
(acc);

387 
acc
 = 
	`FOLD_U32T
(acc);

388 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

389  (
u16_t
)~(
acc
 & 0xffffUL);

390 
	}
}

403 
u16_t


404 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

406  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

407 
	}
}

416 
u16_t


417 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

419 
u32_t
 
acc
;

420 
pbuf
 *
q
;

421 
u8_t
 
sw≠≥d
;

423 
acc
 = 0;

424 
sw≠≥d
 = 0;

425 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

426 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

427 
acc
 = 
	`FOLD_U32T
(acc);

428 i‡(
q
->
Àn
 % 2 != 0) {

429 
sw≠≥d
 = 1 - swapped;

430 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

434 i‡(
sw≠≥d
) {

435 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

437  (
u16_t
)~(
acc
 & 0xffffUL);

438 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/ip.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/öë.h
"

47 
	~"lwù/öë_chksum.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/°©s.h
"

57 
	~"¨ch/≥rf.h
"

59 
	~<°rög.h
>

65 
√tif
 *
	gcuºít_√tif
;

70 c⁄° 
ù_hdr
 *
	gcuºít_hódî
;

80 
√tif
 *

81 
	$ù_cuºít_√tif
()

83  
cuºít_√tif
;

84 
	}
}

94 c⁄° 
ù_hdr
 *

95 
	$ù_cuºít_hódî
()

97  
cuºít_hódî
;

98 
	}
}

109 
√tif
 *

110 
	$ù_rouã
(
ù_addr
 *
de°
)

112 
√tif
 *netif;

115 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

117 i‡(
	`√tif_is_up
(
√tif
)) {

118 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

120  
√tif
;

124 i‡((
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(netif_default))) {

125 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ù_rouã: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

126 
	`IP_STATS_INC
(
ù
.
πîr
);

127 
	`¢mp_öc_ùouä‹ouãs
();

128  
NULL
;

131  
√tif_deÁu…
;

132 
	}
}

134 #i‡
IP_FORWARD


145 
√tif
 *

146 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

148 
√tif
 *netif;

150 
PERF_START
;

152 
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
));

153 i‡(
√tif
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ 0x%"
X32_F
" found\n",

155 
ùhdr
->
de°
.
addr
));

156 
	`¢mp_öc_ùouä‹ouãs
();

157  (
√tif
 *)
NULL
;

161 i‡(
√tif
 =
öp
) {

162 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

163 
	`¢mp_öc_ùouä‹ouãs
();

164  (
√tif
 *)
NULL
;

168 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

170 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

171 
	`¢mp_öc_ùöhdªº‹s
();

172 #i‡
LWIP_ICMP


174 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

175 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

178  (
√tif
 *)
NULL
;

182 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`ht⁄s
(0xffff - 0x100)) {

183 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100) + 1);

185 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100));

188 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ0x%"
X32_F
"\n",

189 
ùhdr
->
de°
.
addr
));

191 
	`IP_STATS_INC
(
ù
.
fw
);

192 
	`IP_STATS_INC
(
ù
.
xmô
);

193 
	`¢mp_öc_ùf‹wd©agøms
();

195 
	`PERF_STOP
("ip_forward");

197 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

198  
√tif
;

199 
	}
}

216 
îr_t


217 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

219 
ù_hdr
 *
ùhdr
;

220 
√tif
 *netif;

221 
u16_t
 
ùhdr_hÀn
;

222 
u16_t
 
ùhdr_Àn
;

223 #i‡
LWIP_DHCP


224 
check_ù_§c
=1;

227 
	`IP_STATS_INC
(
ù
.
ªcv
);

228 
	`¢mp_öc_ùöª˚ives
();

231 
ùhdr
 = 
p
->
∑ylﬂd
;

232 i‡(
	`IPH_V
(
ùhdr
) != 4) {

233 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 1, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

234 
	`ù_debug_¥öt
(
p
);

235 
	`pbuf_‰ì
(
p
);

236 
	`IP_STATS_INC
(
ù
.
îr
);

237 
	`IP_STATS_INC
(
ù
.
dr›
);

238 
	`¢mp_öc_ùöhdªº‹s
();

239  
ERR_OK
;

243 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

245 
ùhdr_hÀn
 *= 4;

247 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

250 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

251 i‡(
ùhdr_hÀn
 > 
p
->
Àn
)

252 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

253 
ùhdr_hÀn
, 
p
->
Àn
));

254 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
)

255 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), "

257 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

259 
	`pbuf_‰ì
(
p
);

260 
	`IP_STATS_INC
(
ù
.
À√º
);

261 
	`IP_STATS_INC
(
ù
.
dr›
);

262 
	`¢mp_öc_ùödisˇrds
();

263  
ERR_OK
;

267 #i‡
CHECKSUM_CHECK_IP


268 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

271 
	`ù_debug_¥öt
(
p
);

272 
	`pbuf_‰ì
(
p
);

273 
	`IP_STATS_INC
(
ù
.
chkîr
);

274 
	`IP_STATS_INC
(
ù
.
dr›
);

275 
	`¢mp_öc_ùöhdªº‹s
();

276  
ERR_OK
;

282 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

285 #i‡
LWIP_IGMP


286 i‡(
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

287 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &(
ùhdr
->
de°
)))) {

288 
√tif
 = 
öp
;

290 
√tif
 = 
NULL
;

298 
fú°
 = 1;

299 
√tif
 = 
öp
;

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

302 
ùhdr
->
de°
.
addr
, 
√tif
->
ù_addr
.addr,

303 
ùhdr
->
de°
.
addr
 & 
√tif
->
√tmask
.addr,

304 
√tif
->
ù_addr
.
addr
 &Çëif->
√tmask
.addr,

305 
ùhdr
->
de°
.
addr
 & ~(
√tif
->
√tmask
.addr)));

308 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

310 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
)) ||

312 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
√tif
)) {

313 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

314 
√tif
->
«me
[0],Çetif->name[1]));

319 i‡(
fú°
) {

320 
fú°
 = 0;

321 
√tif
 = 
√tif_li°
;

323 
√tif
 =Çëif->
√xt
;

325 i‡(
√tif
 =
öp
) {

326 
√tif
 =Çëif->
√xt
;

328 } 
√tif
 !
NULL
);

331 #i‡
LWIP_DHCP


336 i‡(
√tif
 =
NULL
) {

338 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

339 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

340 
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
)));

341 i‡(
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
Ë=
DHCP_CLIENT_PORT
) {

342 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input: DHCPÖacketáccepted.\n"));

343 
√tif
 = 
öp
;

344 
check_ù_§c
 = 0;

351 #i‡
LWIP_DHCP


352 i‡(
check_ù_§c
)

354 { i‡((
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
§c
), 
öp
)) ||

355 (
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
§c
)))) {

357 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:Öacket source isÇot valid.\n"));

359 
	`pbuf_‰ì
(
p
);

360 
	`IP_STATS_INC
(
ù
.
dr›
);

361 
	`¢mp_öc_ùöaddªº‹s
();

362 
	`¢mp_öc_ùödisˇrds
();

363  
ERR_OK
;

368 i‡(
√tif
 =
NULL
) {

370 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:ÖacketÇot for us.\n"));

371 #i‡
IP_FORWARD


373 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
)) {

375 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

379 
	`¢mp_öc_ùöaddªº‹s
();

380 
	`¢mp_öc_ùödisˇrds
();

382 
	`pbuf_‰ì
(
p
);

383  
ERR_OK
;

386 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`ht⁄s
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

387 #i‡
IP_REASSEMBLY


388 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

389 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`ht⁄s
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

391 
p
 = 
	`ù_ªass
(p);

393 i‡(
p
 =
NULL
) {

394  
ERR_OK
;

396 
ùhdr
 = 
p
->
∑ylﬂd
;

398 
	`pbuf_‰ì
(
p
);

399 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

400 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

401 
	`IP_STATS_INC
(
ù
.
›ãº
);

402 
	`IP_STATS_INC
(
ù
.
dr›
);

404 
	`¢mp_öc_ùöunknow≈rŸos
();

405  
ERR_OK
;

409 #i‡
IP_OPTIONS_ALLOWED
 == 0

411 #i‡
LWIP_IGMP


413 if((
ùhdr_hÀn
 > 
IP_HLEN
 && (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

415 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

417 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

418 
	`pbuf_‰ì
(
p
);

419 
	`IP_STATS_INC
(
ù
.
›ãº
);

420 
	`IP_STATS_INC
(
ù
.
dr›
);

422 
	`¢mp_öc_ùöunknow≈rŸos
();

423  
ERR_OK
;

428 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

429 
	`ù_debug_¥öt
(
p
);

430 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

432 
cuºít_√tif
 = 
öp
;

433 
cuºít_hódî
 = 
ùhdr
;

435 #i‡
LWIP_RAW


437 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

441 
	`IPH_PROTO
(
ùhdr
)) {

442 #i‡
LWIP_UDP


443 
IP_PROTO_UDP
:

444 #i‡
LWIP_UDPLITE


445 
IP_PROTO_UDPLITE
:

447 
	`¢mp_öc_ùödñivîs
();

448 
	`udp_öput
(
p
, 
öp
);

451 #i‡
LWIP_TCP


452 
IP_PROTO_TCP
:

453 
	`¢mp_öc_ùödñivîs
();

454 
	`t˝_öput
(
p
, 
öp
);

457 #i‡
LWIP_ICMP


458 
IP_PROTO_ICMP
:

459 
	`¢mp_öc_ùödñivîs
();

460 
	`icmp_öput
(
p
, 
öp
);

463 #i‡
LWIP_IGMP


464 
IP_PROTO_IGMP
:

465 
	`igmp_öput
(
p
,
öp
,&(
ùhdr
->
de°
));

469 #i‡
LWIP_ICMP


471 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) &&

472 !
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

473 
p
->
∑ylﬂd
 = 
ùhdr
;

474 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

477 
	`pbuf_‰ì
(
p
);

479 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

481 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

482 
	`IP_STATS_INC
(
ù
.
dr›
);

483 
	`¢mp_öc_ùöunknow≈rŸos
();

487 
cuºít_√tif
 = 
NULL
;

488 
cuºít_hódî
 = 
NULL
;

490  
ERR_OK
;

491 
	}
}

518 
îr_t


519 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

520 
u8_t
 
âl
, u8_à
tos
,

521 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

523 #i‡
IP_OPTIONS_SEND


524  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
, 
NULL
, 0);

525 
	}
}

533 
îr_t
 
	$ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

534 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

535 
u16_t
 
›éí
)

538 
ù_hdr
 *
ùhdr
;

539 
u16_t
 
ù_id
 = 0;

541 
	`¢mp_öc_ùouåeque°s
();

544 i‡(
de°
 !
IP_HDRINCL
) {

545 
u16_t
 
ù_hÀn
 = 
IP_HLEN
;

546 #i‡
IP_OPTIONS_SEND


547 
u16_t
 
›éí_Æig√d
 = 0;

548 i‡(
›éí
 != 0) {

550 
›éí_Æig√d
 = ((
›éí
 + 3) & ~3);

551 
ù_hÀn
 +
›éí_Æig√d
;

553 i‡(
	`pbuf_hódî
(
p
, 
›éí_Æig√d
)) {

554 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output_if_opt:ÇotÉnoughÑoom for IP options inÖbuf\n"));

555 
	`IP_STATS_INC
(
ù
.
îr
);

556 
	`¢mp_öc_ùoutdisˇrds
();

557  
ERR_BUF
;

559 
	`MEMCPY
(
p
->
∑ylﬂd
, 
ù_›ti⁄s
, 
›éí
);

560 i‡(
›éí
 < 
›éí_Æig√d
) {

562 
	`mem£t
(((*)
p
->
∑ylﬂd
Ë+ 
›éí
, 0, 
›éí_Æig√d
 - optlen);

567 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

568 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

570 
	`IP_STATS_INC
(
ù
.
îr
);

571 
	`¢mp_öc_ùoutdisˇrds
();

572  
ERR_BUF
;

575 
ùhdr
 = 
p
->
∑ylﬂd
;

576 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

577 (
p
->
Àn
 >(
ù_hdr
)));

579 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

580 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

582 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

584 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
ù_hÀn
 / 4, 
tos
);

585 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

586 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

587 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

588 ++
ù_id
;

590 i‡(
	`ù_addr_ißny
(
§c
)) {

591 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

593 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

596 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

597 #i‡
CHECKSUM_GEN_IP


598 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
ù_hÀn
));

602 
ùhdr
 = 
p
->
∑ylﬂd
;

603 
de°
 = &(
ùhdr
->dest);

606 #i‡
IP_FRAG


608 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu))

609  
	`ù_‰ag
(
p
,
√tif
,
de°
);

612 
	`IP_STATS_INC
(
ù
.
xmô
);

614 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

615 
	`ù_debug_¥öt
(
p
);

617 #i‡(
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

618 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

620 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

622  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

626 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

628  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

630 
	}
}

649 
îr_t


650 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

651 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

653 
√tif
 *netif;

655 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

656 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

657 
	`IP_STATS_INC
(
ù
.
πîr
);

658  
ERR_RTE
;

661  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

662 
	}
}

664 #i‡
LWIP_NETIF_HWADDRHINT


683 
îr_t


684 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

685 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

687 
√tif
 *netif;

688 
îr_t
 
îr
;

690 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

691 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

692 
	`IP_STATS_INC
(
ù
.
πîr
);

693  
ERR_RTE
;

696 
√tif
->
addr_höt
 =áddr_hint;

697 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

698 
√tif
->
addr_höt
 = 
NULL
;

700  
îr
;

701 
	}
}

704 #i‡
IP_DEBUG


709 
	$ù_debug_¥öt
(
pbuf
 *
p
)

711 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

712 
u8_t
 *
∑ylﬂd
;

714 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

716 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

717 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

718 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

719 
	`IPH_V
(
ùhdr
),

720 
	`IPH_HL
(
ùhdr
),

721 
	`IPH_TOS
(
ùhdr
),

722 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

723 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

724 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

725 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

726 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

727 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

728 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

729 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

730 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

731 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

732 
	`IPH_TTL
(
ùhdr
),

733 
	`IPH_PROTO
(
ùhdr
),

734 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

735 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

736 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

737 
	`ù4_addr1
(&
ùhdr
->
§c
),

738 
	`ù4_addr2
(&
ùhdr
->
§c
),

739 
	`ù4_addr3
(&
ùhdr
->
§c
),

740 
	`ù4_addr4
(&
ùhdr
->
§c
)));

741 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

742 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

743 
	`ù4_addr1
(&
ùhdr
->
de°
),

744 
	`ù4_addr2
(&
ùhdr
->
de°
),

745 
	`ù4_addr3
(&
ùhdr
->
de°
),

746 
	`ù4_addr4
(&
ùhdr
->
de°
)));

747 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

748 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/ip_addr.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/√tif.h
"

44 
	#IP_ADDR_ANY_VALUE
 0x00000000UL

	)

45 
	#IP_ADDR_BROADCAST_VALUE
 0xffffffffUL

	)

48 c⁄° 
ù_addr
 
	gù_addr_™y
 = { 
IP_ADDR_ANY_VALUE
 };

49 c⁄° 
ù_addr
 
	gù_addr_brﬂdˇ°
 = { 
IP_ADDR_BROADCAST_VALUE
 };

58 
u8_t
 
	$ù_addr_isbrﬂdˇ°
(
ù_addr
 *
addr
, 
√tif
 *netif)

60 
u32_t
 
addr2ã°
;

62 
addr2ã°
 = 
addr
->addr;

64 i‡((~
addr2ã°
 =
IP_ADDR_ANY_VALUE
) ||

65 (
addr2ã°
 =
IP_ADDR_ANY_VALUE
))

68 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0)

73 i‡(
addr2ã°
 =
√tif
->
ù_addr
.
addr
)

76 i‡(
	`ù_addr_√tcmp
(
addr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

78 && ((
addr2ã°
 & ~
√tif
->
√tmask
.
addr
) ==

79 (
IP_ADDR_BROADCAST_VALUE
 & ~
√tif
->
√tmask
.
addr
)))

84 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/ip_frag.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù_‰ag.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/öë.h
"

45 
	~"lwù/öë_chksum.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/¢mp.h
"

48 
	~"lwù/°©s.h
"

49 
	~"lwù/icmp.h
"

51 
	~<°rög.h
>

53 #i‡
IP_REASSEMBLY


67 #i‚de‡
IP_REASS_CHECK_OVERLAP


68 
	#IP_REASS_CHECK_OVERLAP
 1

	)

75 #i‚de‡
IP_REASS_FREE_OLDEST


76 
	#IP_REASS_FREE_OLDEST
 1

	)

79 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

86 #ifde‡
PACK_STRUCT_USE_INCLUDES


87 
	~"¨ch/bp°ru˘.h
"

89 
PACK_STRUCT_BEGIN


90 
	sù_ªass_hñ≥r
 {

91 
PACK_STRUCT_FIELD
(
pbuf
 *
√xt_pbuf
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
°¨t
);

93 
PACK_STRUCT_FIELD
(
u16_t
 
íd
);

94 } 
	gPACK_STRUCT_STRUCT
;

95 
	gPACK_STRUCT_END


96 #ifde‡
PACK_STRUCT_USE_INCLUDES


97 
	~"¨ch/ï°ru˘.h
"

100 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

101 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

102 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

103 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

106 
ù_ªassd©a
 *
	gªassd©agøms
;

107 
u16_t
 
	gù_ªass_pbufcou¡
;

110 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

111 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

120 
	$ù_ªass_tmr
()

122 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

124 
r
 = 
ªassd©agøms
;

125 
r
 !
NULL
) {

128 i‡(
r
->
timî
 > 0) {

129 
r
->
timî
--;

130 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

131 
¥ev
 = 
r
;

132 
r
 =Ñ->
√xt
;

135 
ù_ªassd©a
 *
tmp
;

136 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

137 
tmp
 = 
r
;

139 
r
 =Ñ->
√xt
;

141 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

144 
	}
}

156 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

158 
pbufs_‰ìd
 = 0;

159 
pbuf
 *
p
;

160 
ù_ªass_hñ≥r
 *
ùrh
;

162 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

163 i‡(
¥ev
 !
NULL
) {

164 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

167 
	`¢mp_öc_ùªasmÁûs
();

168 #i‡
LWIP_ICMP


169 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

170 i‡(
ùrh
->
°¨t
 == 0) {

173 
p
 = 
ùr
->p;

174 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

176 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

177 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

178 
pbufs_‰ìd
 +
	`pbuf_˛í
(
p
);

179 
	`pbuf_‰ì
(
p
);

185 
p
 = 
ùr
->p;

186 
p
 !
NULL
) {

187 
pbuf
 *
pcur
;

188 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

189 
pcur
 = 
p
;

191 
p
 = 
ùrh
->
√xt_pbuf
;

192 
pbufs_‰ìd
 +
	`pbuf_˛í
(
pcur
);

193 
	`pbuf_‰ì
(
pcur
);

196 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

197 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

198 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

200  
pbufs_‰ìd
;

201 
	}
}

203 #i‡
IP_REASS_FREE_OLDEST


214 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

219 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

220 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

221 
Ÿhî_d©agøms
;

226 
ﬁde°
 = 
NULL
;

227 
¥ev
 = 
NULL
;

228 
Ÿhî_d©agøms
 = 0;

229 
r
 = 
ªassd©agøms
;

230 
r
 !
NULL
) {

231 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

233 
Ÿhî_d©agøms
++;

234 i‡(
ﬁde°
 =
NULL
) {

235 
ﬁde°
 = 
r
;

236 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

238 
ﬁde°
 = 
r
;

241 i‡(
r
->
√xt
 !
NULL
) {

242 
¥ev
 = 
r
;

244 
r
 =Ñ->
√xt
;

246 i‡(
ﬁde°
 !
NULL
) {

247 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

248 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

250 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

251  
pbufs_‰ìd
;

252 
	}
}

261 
ù_ªassd©a
*

262 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

264 
ù_ªassd©a
* 
ùr
;

266 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

267 i‡(
ùr
 =
NULL
) {

268 #i‡
IP_REASS_FREE_OLDEST


269 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

270 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

272 i‡(
ùr
 =
NULL
)

275 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

276 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

277  
NULL
;

280 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

281 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

284 
ùr
->
√xt
 = 
ªassd©agøms
;

285 
ªassd©agøms
 = 
ùr
;

288 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

289  
ùr
;

290 
	}
}

297 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

301 i‡(
ªassd©agøms
 =
ùr
) {

303 
ªassd©agøms
 = 
ùr
->
√xt
;

306 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

307 
¥ev
->
√xt
 = 
ùr
->next;

311 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
);

312 
	}
}

324 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

326 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

327 
pbuf
 *
q
;

328 
u16_t
 
off£t
,
Àn
;

329 
ù_hdr
 *
‰aghdr
;

330 
vÆid
 = 1;

333 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

334 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

335 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

340 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

341 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

342 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

343 
ùrh
->
√xt_pbuf
 = 
NULL
;

344 
ùrh
->
°¨t
 = 
off£t
;

345 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

349 
q
 = 
ùr
->
p
; q !
NULL
;) {

350 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

351 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

353 
ùrh
->
√xt_pbuf
 = 
q
;

354 i‡(
ùrh_¥ev
 !
NULL
) {

356 #i‡
IP_REASS_CHECK_OVERLAP


357 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

359 
‰ìpbuf
;

362 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

365 
ùr
->
p
 = 
√w_p
;

368 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

370 
‰ìpbuf
;

371 #i‡
IP_REASS_CHECK_OVERLAP


372 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

374 
‰ìpbuf
;

378 i‡(
ùrh_¥ev
 !
NULL
) {

379 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

382 
vÆid
 = 0;

386 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

387 
ùrh_¥ev
 = 
ùrh_tmp
;

391 i‡(
q
 =
NULL
) {

392 i‡(
ùrh_¥ev
 !
NULL
) {

395 #i‡
IP_REASS_CHECK_OVERLAP


396 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

398 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

399 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

400 
vÆid
 = 0;

403 #i‡
IP_REASS_CHECK_OVERLAP


404 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

405 
ùr
->
p
 =
NULL
);

408 
ùr
->
p
 = 
√w_p
;

414 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

416 i‡(
vÆid
) {

419 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

420 
vÆid
 = 0;

423 
ùrh_¥ev
 = 
ùrh
;

424 
q
 = 
ùrh
->
√xt_pbuf
;

425 
q
 !
NULL
) {

426 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

427 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

428 
vÆid
 = 0;

431 
ùrh_¥ev
 = 
ùrh
;

432 
q
 = 
ùrh
->
√xt_pbuf
;

436 i‡(
vÆid
) {

437 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

438 
	`LWIP_ASSERT
("sanity check",

439 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

440 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

441 
ùrh
->
√xt_pbuf
 =
NULL
);

442 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

443 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

450  
vÆid
;

454 #i‡
IP_REASS_CHECK_OVERLAP


455 
‰ìpbuf
:

456 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

457 
	`pbuf_‰ì
(
√w_p
);

460 
	}
}

468 
pbuf
 *

469 
	$ù_ªass
(
pbuf
 *
p
)

471 
pbuf
 *
r
;

472 
ù_hdr
 *
‰aghdr
;

473 
ù_ªassd©a
 *
ùr
;

474 
ù_ªass_hñ≥r
 *
ùrh
;

475 
u16_t
 
off£t
, 
Àn
;

476 
u8_t
 
˛í
;

477 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

479 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

480 
	`¢mp_öc_ùªasmªqds
();

482 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

484 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

485 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

486 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

487 
nuŒªtu∫
;

490 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

491 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

494 
˛í
 = 
	`pbuf_˛í
(
p
);

495 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

496 #i‡
IP_REASS_FREE_OLDEST


497 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

498 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

502 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

503 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

504 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

507 
nuŒªtu∫
;

513 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

517 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

518 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

519 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

520 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

523 
ùr_¥ev
 = 
ùr
;

526 i‡(
ùr
 =
NULL
) {

528 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

530 if(
ùr
 =
NULL
) {

531 
nuŒªtu∫
;

534 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

535 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

540 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

545 
ù_ªass_pbufcou¡
 +
˛í
;

551 i‡((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_MF
) == 0) {

552 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

553 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

554 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

555 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

556 
ùr
->
d©agøm_Àn
));

560 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

563 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

566 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

569 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

570 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

571 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

572 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

573 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

575 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

577 
p
 = 
ùr
->p;

580 
r
 !
NULL
) {

581 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

584 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

585 
	`pbuf_ˇt
(
p
, 
r
);

586 
r
 = 
ùrh
->
√xt_pbuf
;

589 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

592 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

595  
p
;

598 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

599  
NULL
;

601 
nuŒªtu∫
:

602 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

603 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

604 
	`pbuf_‰ì
(
p
);

605  
NULL
;

606 
	}
}

609 #i‡
IP_FRAG


610 #i‡
IP_FRAG_USES_STATIC_BUF


611 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
 + 
MEM_ALIGNMENT
 - 1)];

627 
îr_t


628 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
)

630 
pbuf
 *
ømbuf
;

631 #i‡
IP_FRAG_USES_STATIC_BUF


632 
pbuf
 *
hódî
;

634 
pbuf
 *
√wpbuf
;

635 
ù_hdr
 *
‹igöÆ_ùhdr
;

637 
ù_hdr
 *
ùhdr
;

638 
u16_t
 
nfb
;

639 
u16_t
 
À·
, 
c›
;

640 
u16_t
 
mtu
 = 
√tif
->mtu;

641 
u16_t
 
ofo
, 
omf
;

642 
u16_t
 
œ°
;

643 
u16_t
 
poff
 = 
IP_HLEN
;

644 
u16_t
 
tmp
;

645 #i‡!
IP_FRAG_USES_STATIC_BUF


646 
u16_t
 
√wpbuÊí
 = 0;

647 
u16_t
 
À·_to_c›y
;

651 #i‡
IP_FRAG_USES_STATIC_BUF


656 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
);

657 i‡(
ømbuf
 =
NULL
) {

658 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

659  
ERR_MEM
;

661 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

662 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

665 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

666 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

668 
‹igöÆ_ùhdr
 = 
p
->
∑ylﬂd
;

669 
ùhdr
 = 
‹igöÆ_ùhdr
;

673 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

674 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

675 
omf
 = 
tmp
 & 
IP_MF
;

677 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

679 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

681 
À·
) {

682 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

685 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

686 i‡(!
œ°
)

687 
tmp
 =Åm∞| 
IP_MF
;

690 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

692 #i‡
IP_FRAG_USES_STATIC_BUF


693 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

700 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
);

701 i‡(
ømbuf
 =
NULL
) {

702  
ERR_MEM
;

704 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

705 (
p
->
Àn
 >(
IP_HLEN
)));

706 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

707 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

710 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

711 
p
->
Àn
 -
poff
;

713 
À·_to_c›y
 = 
c›
;

714 
À·_to_c›y
) {

715 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

717 i‡(!
√wpbuÊí
) {

718 
p
 =Ö->
√xt
;

721 
√wpbuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_REF
);

722 i‡(
√wpbuf
 =
NULL
) {

723 
	`pbuf_‰ì
(
ømbuf
);

724  
ERR_MEM
;

727 
√wpbuf
->
∑ylﬂd
 = 
p
->payload;

728 
√wpbuf
->
Àn
 =Çewpbuf->
tŸ_Àn
 = 
√wpbuÊí
;

732 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

733 
À·_to_c›y
 -
√wpbuÊí
;

734 i‡(
À·_to_c›y
)

735 
p
 =Ö->
√xt
;

737 
poff
 = 
√wpbuÊí
;

741 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

742 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

743 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

744 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

746 #i‡
IP_FRAG_USES_STATIC_BUF


747 i‡(
œ°
)

748 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

755 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
);

756 i‡(
hódî
 !
NULL
) {

757 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

758 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

759 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

760 
	`¢mp_öc_ù‰ag¸óãs
();

761 
	`pbuf_‰ì
(
hódî
);

763 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

764 
	`pbuf_‰ì
(
ømbuf
);

765  
ERR_MEM
;

771 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

772 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

781 
	`pbuf_‰ì
(
ømbuf
);

783 
À·
 -
c›
;

784 
ofo
 +
nfb
;

786 #i‡
IP_FRAG_USES_STATIC_BUF


787 
	`pbuf_‰ì
(
ømbuf
);

789 
	`¢mp_öc_ù‰agoks
();

790  
ERR_OK
;

791 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/icmp6.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/icmp.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

47 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

49 
u8_t
 
ty≥
;

50 
icmp_echo_hdr
 *
õcho
;

51 
ù_hdr
 *
ùhdr
;

52 
ù_addr
 
tm∑ddr
;

54 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

58 
ty≥
 = ((
u8_t
 *)
p
->
∑ylﬂd
)[0];

60 
ty≥
) {

61 
ICMP6_ECHO
:

62 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

64 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

65 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

67 
	`pbuf_‰ì
(
p
);

68 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

71 
õcho
 = 
p
->
∑ylﬂd
;

72 
ùhdr
 = (
ù_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 - 
IP_HLEN
);

73 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

74 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

75 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

78 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp:Ö->À¿%"
S16_F
"Ö->tŸ_À¿%"S16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

79 
	`ù_addr_£t
(&
tm∑ddr
, &(
ùhdr
->
§c
));

80 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(ùhdr->
de°
));

81 
	`ù_addr_£t
(&(
ùhdr
->
de°
), &
tm∑ddr
);

82 
õcho
->
ty≥
 = 
ICMP6_ER
;

84 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP6_ECHO
 << 8))) {

85 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8) + 1;

87 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8);

89 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

90 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

93 
	`ù_ouçut_if
 (
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

94 
ùhdr
->
h›lim
, 
IP_PROTO_ICMP
, 
öp
);

97 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
"ÇŸ suµ‹ãd.\n", (
s16_t
)
ty≥
));

98 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

99 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

102 
	`pbuf_‰ì
(
p
);

103 
	}
}

106 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

108 
pbuf
 *
q
;

109 
ù_hdr
 *
ùhdr
;

110 
icmp_dur_hdr
 *
idur
;

113 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

115 i‡(
q
 =
NULL
) {

116 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

117 
	`pbuf_‰ì
(
p
);

120 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

121 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

123 
ùhdr
 = 
p
->
∑ylﬂd
;

125 
idur
 = 
q
->
∑ylﬂd
;

126 
idur
->
ty≥
 = (
u8_t
)
ICMP6_DUR
;

127 
idur
->
icode
 = (
u8_t
)
t
;

129 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, 
p
->∑ylﬂd, 
IP_HLEN
 + 8);

132 
idur
->
chksum
 = 0;

133 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

134 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

136 
	`ù_ouçut
(
q
, 
NULL
,

137 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

138 
	`pbuf_‰ì
(
q
);

139 
	}
}

142 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

144 
pbuf
 *
q
;

145 
ù_hdr
 *
ùhdr
;

146 
icmp_ã_hdr
 *
ãhdr
;

148 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded\n"));

151 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

153 i‡(
q
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

155 
	`pbuf_‰ì
(
p
);

158 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

159 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

161 
ùhdr
 = 
p
->
∑ylﬂd
;

163 
ãhdr
 = 
q
->
∑ylﬂd
;

164 
ãhdr
->
ty≥
 = (
u8_t
)
ICMP6_TE
;

165 
ãhdr
->
icode
 = (
u8_t
)
t
;

168 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, (u8_à*)
p
->∑ylﬂd, 
IP_HLEN
 + 8);

171 
ãhdr
->
chksum
 = 0;

172 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

173 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

174 
	`ù_ouçut
(
q
, 
NULL
,

175 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

176 
	`pbuf_‰ì
(
q
);

177 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/inet6.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/öë.h
"

54 
u32_t


55 
	$chksum
(*
d©≠å
, 
u16_t
 
Àn
)

57 
u16_t
 *
sd©≠å
 = 
d©≠å
;

58 
u32_t
 
acc
;

61 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

62 
acc
 +*
sd©≠å
++;

66 i‡(
Àn
 == 1) {

67 
acc
 +
	`ht⁄s
((
u16_t
)(*(
u8_t
 *)
d©≠å
) << 8);

70  
acc
;

72 
	}
}

79 
u16_t


80 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

81 
ù_addr
 *
§c
, ù_add∏*
de°
,

82 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
)

84 
u32_t
 
acc
;

85 
pbuf
 *
q
;

86 
u8_t
 
sw≠≥d
, 
i
;

88 
acc
 = 0;

89 
sw≠≥d
 = 0;

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

92 
acc
 >> 16) {

93 
acc
 = (acc & 0xffff) + (acc >> 16);

95 i‡(
q
->
Àn
 % 2 != 0) {

96 
sw≠≥d
 = 1 - swapped;

97 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

101 i‡(
sw≠≥d
) {

102 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

105 
i
 = 0; i < 8; i++) {

106 
acc
 +((
u16_t
 *)
§c
->
addr
)[
i
] & 0xffff;

107 
acc
 +((
u16_t
 *)
de°
->
addr
)[
i
] & 0xffff;

108 
acc
 >> 16) {

109 
acc
 = (acc & 0xffff) + (acc >> 16);

112 
acc
 +(
u16_t
)
	`ht⁄s
((u16_t)
¥Ÿo
);

113 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[0] & 0xffff;

114 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[1] & 0xffff;

116 
acc
 >> 16) {

117 
acc
 = (acc & 0xffff) + (acc >> 16);

119  ~(
acc
 & 0xffff);

120 
	}
}

128 
u16_t


129 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

131 
u32_t
 
acc
, 
sum
;

133 
acc
 = 
	`chksum
(
d©≠å
, 
Àn
);

134 
sum
 = (
acc
 & 0xffff) + (acc >> 16);

135 
sum
 += (sum >> 16);

136  ~(
sum
 & 0xffff);

137 
	}
}

139 
u16_t


140 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

142 
u32_t
 
acc
;

143 
pbuf
 *
q
;

144 
u8_t
 
sw≠≥d
;

146 
acc
 = 0;

147 
sw≠≥d
 = 0;

148 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

149 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

150 
acc
 >> 16) {

151 
acc
 = (acc & 0xffff) + (acc >> 16);

153 i‡(
q
->
Àn
 % 2 != 0) {

154 
sw≠≥d
 = 1 - swapped;

155 
acc
 = (acc & 0xff << 8) | (acc & 0xff00 >> 8);

159 i‡(
sw≠≥d
) {

160 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

162  ~(
acc
 & 0xffff);

163 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/ip6.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/ù.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/udp.h
"

51 
	~"lwù/t˝.h
"

53 
	~"lwù/°©s.h
"

55 
	~"¨ch/≥rf.h
"

63 
	$ù_öô
()

65 
	}
}

74 
√tif
 *

75 
	$ù_rouã
(
ù_addr
 *
de°
)

77 
√tif
 *netif;

79 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

80 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

81  
√tif
;

85  
√tif_deÁu…
;

86 
	}
}

96 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
)

98 
√tif
 *netif;

100 
PERF_START
;

102 i‡((
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
))Ë=
NULL
) {

104 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Ço forwardingÑoute found for "));

105 #i‡
IP_DEBUG


106 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

108 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

109 
	`pbuf_‰ì
(
p
);

113 i‡(--
ùhdr
->
h›lim
 == 0) {

114 #i‡
LWIP_ICMP


116 i‡(
ùhdr
->
√xthdr
 !
IP_PROTO_ICMP
) {

117 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

120 
	`pbuf_‰ì
(
p
);

132 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward: forwardingÖacketÅo "));

133 #i‡
IP_DEBUG


134 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

136 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

138 
	`IP_STATS_INC
(
ù
.
fw
);

139 
	`IP_STATS_INC
(
ù
.
xmô
);

141 
	`PERF_STOP
("ip_forward");

143 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

144 
	}
}

157 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
) {

158 
ù_hdr
 *
ùhdr
;

159 
√tif
 *netif;

162 
PERF_START
;

164 #i‡
IP_DEBUG


165 
	`ù_debug_¥öt
(
p
);

169 
	`IP_STATS_INC
(
ù
.
ªcv
);

172 
ùhdr
 = 
p
->
∑ylﬂd
;

175 i‡(
ùhdr
->
v
 != 6) {

176 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖacket dropped dueÅo bad versionÇumber\n"));

177 #i‡
IP_DEBUG


178 
	`ù_debug_¥öt
(
p
);

180 
	`pbuf_‰ì
(
p
);

181 
	`IP_STATS_INC
(
ù
.
îr
);

182 
	`IP_STATS_INC
(
ù
.
dr›
);

187 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

188 #i‡
IP_DEBUG


189 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: iphdr->dest "));

190 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

191 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->ip_addr "));

192 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

193 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

195 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
))) {

201 i‡(
√tif
 =
NULL
) {

203 #i‡
IP_FORWARD


204 
	`ù_f‹w¨d
(
p
, 
ùhdr
);

206 
	`pbuf_‰ì
(
p
);

210 
	`pbuf_ªÆloc
(
p
, 
IP_HLEN
 + 
	`¡ohs
(
ùhdr
->
Àn
));

213 #i‡
IP_DEBUG


219 if(
	`pbuf_hódî
(
p
, -
IP_HLEN
)) {

220 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

224 
ùhdr
->
√xthdr
) {

225 
IP_PROTO_UDP
:

226 
	`udp_öput
(
p
, 
öp
);

228 
IP_PROTO_TCP
:

229 
	`t˝_öput
(
p
, 
öp
);

231 #i‡
LWIP_ICMP


232 
IP_PROTO_ICMP
:

233 
	`icmp_öput
(
p
, 
öp
);

237 #i‡
LWIP_ICMP


239 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

241 
	`pbuf_‰ì
(
p
);

242 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n",

243 
ùhdr
->
√xthdr
));

245 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

246 
	`IP_STATS_INC
(
ù
.
dr›
);

248 
	`PERF_STOP
("ip_input");

249 
	}
}

259 
îr_t


260 
	$ù_ouçut_if
 (
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

261 
u8_t
 
âl
,

262 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

264 
ù_hdr
 *
ùhdr
;

266 
PERF_START
;

268 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

269 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

271 
	`IP_STATS_INC
(
ù
.
îr
);

273  
ERR_BUF
;

275 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

277 
ùhdr
 = 
p
->
∑ylﬂd
;

280 i‡(
de°
 !
IP_HDRINCL
) {

281 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("!IP_HDRLINCL\n"));

282 
ùhdr
->
h›lim
 = 
âl
;

283 
ùhdr
->
√xthdr
 = 
¥Ÿo
;

284 
ùhdr
->
Àn
 = 
	`ht⁄s
(
p
->
tŸ_Àn
 - 
IP_HLEN
);

285 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

287 
ùhdr
->
v
 = 6;

289 i‡(
	`ù_addr_ißny
(
§c
)) {

290 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

292 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

296 
de°
 = &(
ùhdr
->dest);

299 
	`IP_STATS_INC
(
ù
.
xmô
);

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%¯÷í %"
U16_F
")\n", 
√tif
->
«me
[0],Çëif->«me[1], 
p
->
tŸ_Àn
));

302 #i‡
IP_DEBUG


303 
	`ù_debug_¥öt
(
p
);

306 
	`PERF_STOP
("ip_output_if");

307  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

308 
	}
}

316 
îr_t


317 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

318 
u8_t
 
âl
, u8_à
¥Ÿo
)

320 
√tif
 *netif;

321 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

322 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

323 
	`IP_STATS_INC
(
ù
.
πîr
);

324  
ERR_RTE
;

327  
	`ù_ouçut_if
 (
p
, 
§c
, 
de°
, 
âl
, 
¥Ÿo
, 
√tif
);

328 
	}
}

330 #i‡
LWIP_NETIF_HWADDRHINT


331 
îr_t


332 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

333 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

335 
√tif
 *netif;

336 
îr_t
 
îr
;

338 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

339 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

340 
	`IP_STATS_INC
(
ù
.
πîr
);

341  
ERR_RTE
;

344 
√tif
->
addr_höt
 =áddr_hint;

345 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

346 
√tif
->
addr_höt
 = 
NULL
;

348  
îr
;

349 
	}
}

352 #i‡
IP_DEBUG


354 
	$ù_debug_¥öt
(
pbuf
 *
p
)

356 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

358 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

359 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

360 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" | %"
X16_F
"%"X16_F" | %"X16_F"%"X16_F" | (v,Åraffic class, flowÜabel)\n",

361 
ùhdr
->
v
,

362 
ùhdr
->
t˛ass1
, iphdr->
t˛ass2
,

363 
ùhdr
->
Êow1
, iphdr->
Êow2
));

364 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

365 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" | %2"U16_F" | %2"U16_F" | (len,Çexthdr, hoplim)\n",

366 
	`¡ohs
(
ùhdr
->
Àn
),

367 
ùhdr
->
√xthdr
,

368 
ùhdr
->
h›lim
));

369 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

370 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

371 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) >> 16) & 0xffff,

372 
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) & 0xffff));

373 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

374 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) >> 16) & 0xffff,

375 
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) & 0xffff));

376 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

377 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) >> 16) & 0xffff,

378 
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) & 0xffff));

379 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

380 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) >> 16) & 0xffff,

381 
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) & 0xffff));

382 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

383 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

384 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) >> 16) & 0xffff,

385 
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) & 0xffff));

386 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

387 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) >> 16) & 0xffff,

388 
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) & 0xffff));

389 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

390 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) >> 16) & 0xffff,

391 
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) & 0xffff));

392 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

393 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) >> 16) & 0xffff,

394 
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) & 0xffff));

395 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

396 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/ip6_addr.c

33 
	~"lwù/›t.h
"

34 
	~"lwù/ù_addr.h
"

35 
	~"lwù/öë.h
"

37 
u8_t


38 
	$ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

39 
ù_addr
 *
mask
)

41 ((
addr1
->
addr
[0] & 
mask
->addr[0]Ë=(
addr2
->addr[0] & mask->addr[0]) &&

42 (
addr1
->
addr
[1] & 
mask
->addr[1]Ë=(
addr2
->addr[1] & mask->addr[1]) &&

43 (
addr1
->
addr
[2] & 
mask
->addr[2]Ë=(
addr2
->addr[2] & mask->addr[2]) &&

44 (
addr1
->
addr
[3] & 
mask
->addr[3]Ë=(
addr2
->addr[3] & mask->addr[3]));

46 
	}
}

48 
u8_t


49 
	$ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
)

51 (
addr1
->
addr
[0] =
addr2
->addr[0] &&

52 
addr1
->
addr
[1] =
addr2
->addr[1] &&

53 
addr1
->
addr
[2] =
addr2
->addr[2] &&

54 
addr1
->
addr
[3] =
addr2
->addr[3]);

55 
	}
}

58 
	$ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
)

60 
	`SMEMCPY
(
de°
, 
§c
, (
ù_addr
));

65 
	}
}

67 
u8_t


68 
	$ù_addr_ißny
(
ù_addr
 *
addr
)

70 i‡(
addr
 =
NULL
)  1;

71 ((
addr
->addr[0] |áddr->addr[1] |áddr->addr[2] |áddr->addr[3]) == 0);

72 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/mem.c

56 
	~"lwù/›t.h
"

58 #i‡!
MEM_LIBC_MALLOC


60 
	~"lwù/def.h
"

61 
	~"lwù/mem.h
"

62 
	~"lwù/sys.h
"

63 
	~"lwù/°©s.h
"

65 
	~<°rög.h
>

67 #i‡
MEM_USE_POOLS


78 
	$mem_mÆloc
(
mem_size_t
 
size
)

80 
memp_mÆloc_hñ≥r
 *
ñemít
;

81 
memp_t
 
poﬁƒ
;

82 
mem_size_t
 
ªquúed_size
 = 
size
 + (
memp_mÆloc_hñ≥r
);

84 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoolnr++) {

85 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


86 
agaö
:

90 i‡(
ªquúed_size
 <
memp_sizes
[
poﬁƒ
]) {

94 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

95 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

96  
NULL
;

98 
ñemít
 = (
memp_mÆloc_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
);

99 i‡(
ñemít
 =
NULL
) {

102 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


104 i‡(
poﬁƒ
 < 
MEMP_POOL_LAST
) {

105 
poﬁƒ
++;

106 
agaö
;

109  
NULL
;

113 
ñemít
->
poﬁƒ
 =Öoolnr;

115 
ñemít
++;

117  
ñemít
;

118 
	}
}

128 
	$mem_‰ì
(*
rmem
)

130 
memp_mÆloc_hñ≥r
 *
hmem
 = (memp_mÆloc_hñ≥r*)
rmem
;

132 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

133 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

136 
hmem
--;

138 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

139 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

140 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

143 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem);

144 
	}
}

154 
	smem
 {

156 
mem_size_t
 
	m√xt
;

158 
mem_size_t
 
	m¥ev
;

160 
u8_t
 
	mu£d
;

166 #i‚de‡
MIN_SIZE


167 
	#MIN_SIZE
 12

	)

170 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

171 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

172 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

175 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

177 
u8_t
 *
	gøm
;

179 
mem
 *
	gøm_íd
;

181 
mem
 *
	gl‰ì
;

184 
sys_£m_t
 
	gmem_£m
;

186 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


188 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

191 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

192 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

193 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

194 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

195 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

196 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

201 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

202 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_¨ch_£m_waô
(
mem_£m
, 0)

	)

203 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_£m_sig«l
(
mem_£m
)

	)

205 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

206 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

207 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

224 
	$∂ug_hﬁes
(
mem
 *mem)

226 
mem
 *
nmem
;

227 
mem
 *
pmem
;

229 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

230 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

231 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

234 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

236 
nmem
 = (
mem
 *)&
øm
[mem->
√xt
];

237 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

239 i‡(
l‰ì
 =
nmem
) {

240 
l‰ì
 = 
mem
;

242 
mem
->
√xt
 = 
nmem
->next;

243 ((
mem
 *)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
u8_t
 *)mem -Ñam;

247 
pmem
 = (
mem
 *)&
øm
[mem->
¥ev
];

248 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

250 i‡(
l‰ì
 =
mem
) {

251 
l‰ì
 = 
pmem
;

253 
pmem
->
√xt
 = 
mem
->next;

254 ((
mem
 *)&
øm
[mem->
√xt
])->
¥ev
 = (
u8_t
 *)
pmem
 -Ñam;

256 
	}
}

262 
	$mem_öô
()

264 
mem
 *mem;

266 
	`LWIP_ASSERT
("Sanity checkálignment",

267 (
SIZEOF_STRUCT_MEM
 & (
MEM_ALIGNMENT
-1)) == 0);

270 
øm
 = 
	`LWIP_MEM_ALIGN
(
øm_hóp
);

272 
mem
 = (mem *)
øm
;

273 
mem
->
√xt
 = 
MEM_SIZE_ALIGNED
;

274 
mem
->
¥ev
 = 0;

275 
mem
->
u£d
 = 0;

277 
øm_íd
 = (
mem
 *)&
øm
[
MEM_SIZE_ALIGNED
];

278 
øm_íd
->
u£d
 = 1;

279 
øm_íd
->
√xt
 = 
MEM_SIZE_ALIGNED
;

280 
øm_íd
->
¥ev
 = 
MEM_SIZE_ALIGNED
;

282 
mem_£m
 = 
	`sys_£m_√w
(1);

285 
l‰ì
 = (
mem
 *)
øm
;

287 
	`MEM_STATS_AVAIL
(
avaû
, 
MEM_SIZE_ALIGNED
);

288 
	}
}

297 
	$mem_‰ì
(*
rmem
)

299 
mem
 *mem;

300 
	`LWIP_MEM_FREE_DECL_PROTECT
();

302 i‡(
rmem
 =
NULL
) {

303 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("mem_free(p == NULL) was called.\n"));

306 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

308 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

309 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

311 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

312 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

313 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_free: illegal memory\n"));

315 
	`SYS_ARCH_PROTECT
(
Àv
);

316 
	`MEM_STATS_INC
(
ûÀgÆ
);

317 
	`SYS_ARCH_UNPROTECT
(
Àv
);

321 
	`LWIP_MEM_FREE_PROTECT
();

323 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

325 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

327 
mem
->
u£d
 = 0;

329 i‡(
mem
 < 
l‰ì
) {

331 
l‰ì
 = 
mem
;

334 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

337 
	`∂ug_hﬁes
(
mem
);

338 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


339 
mem_‰ì_cou¡
 = 1;

341 
	`LWIP_MEM_FREE_UNPROTECT
();

342 
	}
}

357 
	$mem_ªÆloc
(*
rmem
, 
mem_size_t
 
√wsize
)

359 
mem_size_t
 
size
;

360 
mem_size_t
 
±r
, 
±r2
;

361 
mem
 *mem, *
mem2
;

363 
	`LWIP_MEM_FREE_DECL_PROTECT
();

367 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

369 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

371 
√wsize
 = 
MIN_SIZE_ALIGNED
;

374 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

375  
NULL
;

378 
	`LWIP_ASSERT
("mem_ªÆloc:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

379 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

381 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

382 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

383 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_realloc: illegal memory\n"));

385 
	`SYS_ARCH_PROTECT
(
Àv
);

386 
	`MEM_STATS_INC
(
ûÀgÆ
);

387 
	`SYS_ARCH_UNPROTECT
(
Àv
);

388  
rmem
;

391 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

393 
±r
 = (
u8_t
 *)
mem
 - 
øm
;

395 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

396 
	`LWIP_ASSERT
("mem_ªÆlo¯ˇ¿⁄ly shrök mem‹y", 
√wsize
 <
size
);

397 i‡(
√wsize
 > 
size
) {

399  
NULL
;

401 i‡(
√wsize
 =
size
) {

403  
rmem
;

407 
	`LWIP_MEM_FREE_PROTECT
();

409 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

411 
mem2
 = (
mem
 *)&
øm
[mem->
√xt
];

412 if(
mem2
->
u£d
 == 0) {

414 
mem_size_t
 
√xt
;

416 
√xt
 = 
mem2
->next;

418 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

419 i‡(
l‰ì
 =
mem2
) {

420 
l‰ì
 = (
mem
 *)&
øm
[
±r2
];

422 
mem2
 = (
mem
 *)&
øm
[
±r2
];

423 
mem2
->
u£d
 = 0;

425 
mem2
->
√xt
 =Çext;

427 
mem2
->
¥ev
 = 
±r
;

429 
mem
->
√xt
 = 
±r2
;

433 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

434 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

437 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

445 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

446 
mem2
 = (
mem
 *)&
øm
[
±r2
];

447 i‡(
mem2
 < 
l‰ì
) {

448 
l‰ì
 = 
mem2
;

450 
mem2
->
u£d
 = 0;

451 
mem2
->
√xt
 = 
mem
->next;

452 
mem2
->
¥ev
 = 
±r
;

453 
mem
->
√xt
 = 
±r2
;

454 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

455 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

465 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


466 
mem_‰ì_cou¡
 = 1;

468 
	`LWIP_MEM_FREE_UNPROTECT
();

469  
rmem
;

470 
	}
}

482 
	$mem_mÆloc
(
mem_size_t
 
size
)

484 
mem_size_t
 
±r
, 
±r2
;

485 
mem
 *mem, *
mem2
;

486 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


487 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

489 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

491 i‡(
size
 == 0) {

492  
NULL
;

497 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

499 if(
size
 < 
MIN_SIZE_ALIGNED
) {

501 
size
 = 
MIN_SIZE_ALIGNED
;

504 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

505  
NULL
;

509 
	`sys_¨ch_£m_waô
(
mem_£m
, 0);

510 
	`LWIP_MEM_ALLOC_PROTECT
();

511 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


514 
loˇl_mem_‰ì_cou¡
 = 0;

520 
±r
 = (
u8_t
 *)
l‰ì
 - 
øm
;Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

521 
±r
 = ((
mem
 *)&
øm
[±r])->
√xt
) {

522 
mem
 = (mem *)&
øm
[
±r
];

523 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


524 
mem_‰ì_cou¡
 = 0;

525 
	`LWIP_MEM_ALLOC_UNPROTECT
();

527 
	`LWIP_MEM_ALLOC_PROTECT
();

528 i‡(
mem_‰ì_cou¡
 != 0) {

529 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

531 
mem_‰ì_cou¡
 = 0;

534 i‡((!
mem
->
u£d
) &&

535 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

539 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

550 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

552 
mem2
 = (
mem
 *)&
øm
[
±r2
];

553 
mem2
->
u£d
 = 0;

554 
mem2
->
√xt
 = 
mem
->next;

555 
mem2
->
¥ev
 = 
±r
;

557 
mem
->
√xt
 = 
±r2
;

558 
mem
->
u£d
 = 1;

560 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

561 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

563 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

572 
mem
->
u£d
 = 1;

573 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

576 i‡(
mem
 =
l‰ì
) {

578 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

579 
	`LWIP_MEM_ALLOC_UNPROTECT
();

581 
	`LWIP_MEM_ALLOC_PROTECT
();

582 
l‰ì
 = (
mem
 *)&
øm
[l‰ì->
√xt
];

584 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

586 
	`LWIP_MEM_ALLOC_UNPROTECT
();

587 
	`sys_£m_sig«l
(
mem_£m
);

588 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

589 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

590 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

591 ((
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

592 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

593 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

595  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

598 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


600 } 
loˇl_mem_‰ì_cou¡
 != 0);

602 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 2, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

603 
	`MEM_STATS_INC
(
îr
);

604 
	`LWIP_MEM_ALLOC_UNPROTECT
();

605 
	`sys_£m_sig«l
(
mem_£m
);

606  
NULL
;

607 
	}
}

620 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

622 *
p
;

625 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

626 i‡(
p
) {

628 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

630  
p
;

631 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/memp.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/memp.h
"

44 
	~"lwù/pbuf.h
"

45 
	~"lwù/udp.h
"

46 
	~"lwù/øw.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/≠i.h
"

50 
	~"lwù/≠i_msg.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"lwù/ù_‰ag.h
"

57 
	~<°rög.h
>

59 #i‡!
MEMP_MEM_MALLOC


61 
	smemp
 {

62 
memp
 *
	m√xt
;

63 #i‡
MEMP_OVERFLOW_CHECK


64 c⁄° *
	mfûe
;

65 
	mlöe
;

69 #i‡
MEMP_OVERFLOW_CHECK


78 #i‚de‡
MEMP_SANITY_REGION_BEFORE


79 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

81 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

82 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

84 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

86 #i‚de‡
MEMP_SANITY_REGION_AFTER


87 
	#MEMP_SANITY_REGION_AFTER
 16

	)

89 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

90 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

92 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

96 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

97 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

105 
	#MEMP_SIZE
 0

	)

106 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

112 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

116 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

121 #i‡!
MEM_USE_POOLS
 && !
MEMP_MEM_MALLOC


124 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

125 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`LWIP_MEM_ALIGN_SIZE
(size),

	)

126 
	~"lwù/memp_°d.h
"

129 #i‡!
MEMP_MEM_MALLOC


132 c⁄° 
u16_t
 
	gmemp_num
[
MEMP_MAX
] = {

133 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

134 
	~"lwù/memp_°d.h
"

138 #ifde‡
LWIP_DEBUG


139 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

140 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

141 
	~"lwù/memp_°d.h
"

146 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

147 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

148 
	~"lwù/memp_°d.h
"

151 #i‡
MEMP_SANITY_CHECK


156 
	$memp_ßnôy
()

158 
s16_t
 
i
, 
c
;

159 
memp
 *
m
, *
n
;

161 
i
 = 0; i < 
MEMP_MAX
; i++) {

162 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

163 
c
 = 1;

164 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

165 i‡(
n
 =
m
 && --
c
 < 0) {

172 
	}
}

174 #i‡
MEMP_OVERFLOW_CHECK


183 
	$memp_ovîÊow_check_ñemít
(
memp
 *
p
, 
u16_t
 
memp_size
)

185 
u16_t
 
k
;

186 
u8_t
 *
m
;

187 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

188 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

189 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

190 i‡(
m
[
k
] != 0xcd) {

191 
	`LWIP_ASSERT
("detected memp underflow!", 0);

195 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

196 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_size
;

197 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

198 i‡(
m
[
k
] != 0xcd) {

199 
	`LWIP_ASSERT
("detected memp overflow!", 0);

203 
	}
}

211 
	$memp_ovîÊow_check_Æl
()

213 
u16_t
 
i
, 
j
;

214 
memp
 *
p
;

216 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

217 
i
 = 0; i < 
MEMP_MAX
; ++i) {

218 
p
 =Ö;

219 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

220 
	`memp_ovîÊow_check_ñemít
(
p
, 
memp_sizes
[
i
]);

221 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

224 
	}
}

230 
	$memp_ovîÊow_öô
()

232 
u16_t
 
i
, 
j
;

233 
memp
 *
p
;

234 
u8_t
 *
m
;

236 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

237 
i
 = 0; i < 
MEMP_MAX
; ++i) {

238 
p
 =Ö;

239 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

240 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

241 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

242 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

244 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

245 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
];

246 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

248 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

251 
	}
}

260 
	$memp_öô
()

262 
memp
 *memp;

263 
u16_t
 
i
, 
j
;

265 
i
 = 0; i < 
MEMP_MAX
; ++i) {

266 
	`MEMP_STATS_AVAIL
(
u£d
, 
i
, 0);

267 
	`MEMP_STATS_AVAIL
(
max
, 
i
, 0);

268 
	`MEMP_STATS_AVAIL
(
îr
, 
i
, 0);

269 
	`MEMP_STATS_AVAIL
(
avaû
, 
i
, 
memp_num
[i]);

272 
memp
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

274 
i
 = 0; i < 
MEMP_MAX
; ++i) {

275 
memp_èb
[
i
] = 
NULL
;

277 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

278 
memp
->
√xt
 = 
memp_èb
[
i
];

279 
memp_èb
[
i
] = 
memp
;

280 
memp
 = (mem∞*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]

281 #i‡
MEMP_OVERFLOW_CHECK


282 + 
MEMP_SANITY_REGION_AFTER_ALIGNED


287 #i‡
MEMP_OVERFLOW_CHECK


288 
	`memp_ovîÊow_öô
();

290 
	`memp_ovîÊow_check_Æl
();

292 
	}
}

306 #i‡!
MEMP_OVERFLOW_CHECK


307 
	$memp_mÆloc
(
memp_t
 
ty≥
)

309 
	$memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
)

312 
memp
 *memp;

313 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

315 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

317 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

318 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

319 
	`memp_ovîÊow_check_Æl
();

322 
memp
 = 
memp_èb
[
ty≥
];

324 i‡(
memp
 !
NULL
) {

325 
memp_èb
[
ty≥
] = 
memp
->
√xt
;

326 #i‡
MEMP_OVERFLOW_CHECK


327 
memp
->
√xt
 = 
NULL
;

328 
memp
->
fûe
 = file;

329 
memp
->
löe
 =Üine;

331 
	`MEMP_STATS_INC_USED
(
u£d
, 
ty≥
);

332 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

333 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

334 
memp
 = (memp*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

336 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 2, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

337 
	`MEMP_STATS_INC
(
îr
, 
ty≥
);

340 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

342  
memp
;

343 
	}
}

352 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
)

354 
memp
 *memp;

355 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

357 i‡(
mem
 =
NULL
) {

360 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

361 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

363 
memp
 = (mem∞*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

365 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

366 #i‡
MEMP_OVERFLOW_CHECK


367 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

368 
	`memp_ovîÊow_check_Æl
();

370 
	`memp_ovîÊow_check_ñemít
(
memp
, 
memp_sizes
[
ty≥
]);

374 
	`MEMP_STATS_DEC
(
u£d
, 
ty≥
);

376 
memp
->
√xt
 = 
memp_èb
[
ty≥
];

377 
memp_èb
[
ty≥
] = 
memp
;

379 #i‡
MEMP_SANITY_CHECK


380 
	`LWIP_ASSERT
("mem∞ßnôy", 
	`memp_ßnôy
());

383 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

384 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/netif.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/t˝.h
"

45 
	~"lwù/¢mp.h
"

46 
	~"lwù/igmp.h
"

47 
	~"√tif/ëh¨p.h
"

48 #i‡
ENABLE_LOOPBACK


49 
	~"lwù/sys.h
"

50 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


51 
	~"lwù/t˝ù.h
"

55 #i‡
LWIP_NETIF_STATUS_CALLBACK


56 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ i‡“->
°©us_ˇŒback
Ë“->°©us_ˇŒback)“); }

	)

58 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ }

	)

61 #i‡
LWIP_NETIF_LINK_CALLBACK


62 
	#NETIF_LINK_CALLBACK
(
n
Ë{ i‡“->
lök_ˇŒback
Ë“->lök_ˇŒback)“); }

	)

64 
	#NETIF_LINK_CALLBACK
(
n
Ë{ }

	)

67 
√tif
 *
	g√tif_li°
;

68 
√tif
 *
	g√tif_deÁu…
;

84 
√tif
 *

85 
	$√tif_add
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

86 
ù_addr
 *
gw
,

87 *
°©e
,

88 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

89 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

91 
u8_t
 
√ti‚um
 = 0;

94 
√tif
->
ù_addr
.
addr
 = 0;

95 
√tif
->
√tmask
.
addr
 = 0;

96 
√tif
->
gw
.
addr
 = 0;

97 
√tif
->
Êags
 = 0;

98 #i‡
LWIP_DHCP


100 
√tif
->
dh˝
 = 
NULL
;

102 #i‡
LWIP_AUTOIP


104 
√tif
->
autoù
 = 
NULL
;

106 #i‡
LWIP_NETIF_STATUS_CALLBACK


107 
√tif
->
°©us_ˇŒback
 = 
NULL
;

109 #i‡
LWIP_NETIF_LINK_CALLBACK


110 
√tif
->
lök_ˇŒback
 = 
NULL
;

112 #i‡
LWIP_IGMP


113 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

115 #i‡
ENABLE_LOOPBACK


116 
√tif
->
lo›_fú°
 = 
NULL
;

117 
√tif
->
lo›_œ°
 = 
NULL
;

121 
√tif
->
°©e
 = state;

122 
√tif
->
num
 = 
√ti‚um
++;

123 
√tif
->
öput
 = input;

124 #i‡
LWIP_NETIF_HWADDRHINT


125 
√tif
->
addr_höt
 = 
NULL
;

127 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


128 
√tif
->
lo›_˙t_cuºít
 = 0;

131 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

134 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

135  
NULL
;

139 
√tif
->
√xt
 = 
√tif_li°
;

140 
√tif_li°
 = 
√tif
;

141 
	`¢mp_öc_iÊi°
();

143 #i‡
LWIP_IGMP


145 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

146 
	`igmp_°¨t
–
√tif
);

150 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

151 
√tif
->
«me
[0],Çetif->name[1]));

152 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

153 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

154 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

155 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

156 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

157 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

158  
√tif
;

159 
	}
}

171 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

172 
ù_addr
 *
gw
)

174 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

175 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

176 
	`√tif_£t_gw
(
√tif
, 
gw
);

177 
	}
}

184 
	$√tif_ªmove
(
√tif
 *Çetif)

186 i‡–
√tif
 =
NULL
 ) ;

188 #i‡
LWIP_IGMP


190 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

191 
	`igmp_°›
–
√tif
);

195 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

198 i‡(
√tif_li°
 =
√tif
) {

199 
√tif_li°
 = 
√tif
->
√xt
;

200 
	`¢mp_dec_iÊi°
();

204 
√tif
 * 
tmpNëif
;

205 
tmpNëif
 = 
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

206 i‡(
tmpNëif
->
√xt
 =
√tif
) {

207 
tmpNëif
->
√xt
 = 
√tif
->next;

208 
	`¢mp_dec_iÊi°
();

212 i‡(
tmpNëif
 =
NULL
)

216 i‡(
√tif_deÁu…
 =
√tif
)

218 
	`√tif_£t_deÁu…
(
NULL
);

219 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

220 
	}
}

228 
√tif
 *

229 
	$√tif_föd
(*
«me
)

231 
√tif
 *netif;

232 
u8_t
 
num
;

234 i‡(
«me
 =
NULL
) {

235  
NULL
;

238 
num
 = 
«me
[2] - '0';

240 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

241 i‡(
num
 =
√tif
->num &&

242 
«me
[0] =
√tif
->name[0] &&

243 
«me
[1] =
√tif
->name[1]) {

244 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

245  
√tif
;

248 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

249  
NULL
;

250 
	}
}

262 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

266 #i‡
LWIP_TCP


267 
t˝_pcb
 *
pcb
;

268 
t˝_pcb_li°í
 *
Õcb
;

271 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0)

274 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("netif_set_ipaddr:Çetifáddress being changed\n"));

275 
pcb
 = 
t˝_a˘ive_pcbs
;

276 
pcb
 !
NULL
) {

278 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

280 
t˝_pcb
 *
√xt
 = 
pcb
->next;

281 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

282 
	`t˝_ab‹t
(
pcb
);

283 
pcb
 = 
√xt
;

285 
pcb
 =Öcb->
√xt
;

288 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

290 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

291 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

294 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

299 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

300 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

302 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

303 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

304 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

306 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

307 
√tif
->
«me
[0],Çetif->name[1],

308 
	`ù4_addr1
(&
√tif
->
ù_addr
),

309 
	`ù4_addr2
(&
√tif
->
ù_addr
),

310 
	`ù4_addr3
(&
√tif
->
ù_addr
),

311 
	`ù4_addr4
(&
√tif
->
ù_addr
)));

312 
	}
}

323 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
)

325 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

326 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

327 
√tif
->
«me
[0],Çetif->name[1],

328 
	`ù4_addr1
(&
√tif
->
gw
),

329 
	`ù4_addr2
(&
√tif
->
gw
),

330 
	`ù4_addr3
(&
√tif
->
gw
),

331 
	`ù4_addr4
(&
√tif
->
gw
)));

332 
	}
}

344 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
)

346 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

348 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

349 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

350 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

351 
√tif
->
«me
[0],Çetif->name[1],

352 
	`ù4_addr1
(&
√tif
->
√tmask
),

353 
	`ù4_addr2
(&
√tif
->
√tmask
),

354 
	`ù4_addr3
(&
√tif
->
√tmask
),

355 
	`ù4_addr4
(&
√tif
->
√tmask
)));

356 
	}
}

365 
	$√tif_£t_deÁu…
(
√tif
 *netif)

367 i‡(
√tif
 =
NULL
)

370 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

375 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

377 
√tif_deÁu…
 = 
√tif
;

378 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

379 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

380 
	}
}

391 
	$√tif_£t_up
(
√tif
 *netif)

393 i‡–!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )) {

394 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

396 #i‡
LWIP_SNMP


397 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

400 
	`NETIF_LINK_CALLBACK
(
√tif
);

401 
	`NETIF_STATUS_CALLBACK
(
√tif
);

403 #i‡
LWIP_ARP


405 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

406 
	`ëh¨p_gøtuôous
(
√tif
);

411 
	}
}

421 
	$√tif_£t_down
(
√tif
 *netif)

423 i‡–
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )

425 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

426 #i‡
LWIP_SNMP


427 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

430 
	`NETIF_LINK_CALLBACK
(
√tif
);

431 
	`NETIF_STATUS_CALLBACK
(
√tif
);

433 
	}
}

438 
u8_t
 
	$√tif_is_up
(
√tif
 *netif)

440  (
√tif
->
Êags
 & 
NETIF_FLAG_UP
)?1:0;

441 
	}
}

443 #i‡
LWIP_NETIF_STATUS_CALLBACK


447 
	$√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif ))

449 i‡–
√tif
 )

450 
√tif
->
°©us_ˇŒback
 = status_callback;

451 
	}
}

454 #i‡
LWIP_NETIF_LINK_CALLBACK


458 
	$√tif_£t_lök_up
(
√tif
 *netif )

460 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

462 #i‡
LWIP_ARP


464 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

465 
	`ëh¨p_gøtuôous
(
√tif
);

469 #i‡
LWIP_IGMP


471 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

472 
	`igmp_ªp‹t_groups
–
√tif
);

476 
	`NETIF_LINK_CALLBACK
(
√tif
);

477 
	}
}

482 
	$√tif_£t_lök_down
(
√tif
 *netif )

484 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

485 
	`NETIF_LINK_CALLBACK
(
√tif
);

486 
	}
}

491 
u8_t
 
	$√tif_is_lök_up
(
√tif
 *netif)

493  (
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) ? 1 : 0;

494 
	}
}

499 
	$√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif ))

501 i‡(
√tif
) {

502 
√tif
->
lök_ˇŒback
 =Üink_callback;

504 
	}
}

507 #i‡
ENABLE_LOOPBACK


522 
îr_t


523 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

524 
ù_addr
 *
ùaddr
)

526 
pbuf
 *
r
;

527 
îr_t
 
îr
;

528 
pbuf
 *
œ°
;

529 #i‡
LWIP_LOOPBACK_MAX_PBUFS


530 
u8_t
 
˛í
 = 0;

532 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

533 
	`LWIP_UNUSED_ARG
(
ùaddr
);

536 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

537 i‡(
r
 =
NULL
) {

538  
ERR_MEM
;

540 #i‡
LWIP_LOOPBACK_MAX_PBUFS


541 
˛í
 = 
	`pbuf_˛í
(
r
);

543 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

544 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

545 
	`pbuf_‰ì
(
r
);

546 
r
 = 
NULL
;

547  
ERR_MEM
;

549 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

553 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

554 
	`pbuf_‰ì
(
r
);

555 
r
 = 
NULL
;

556  
îr
;

563 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

565 
	`SYS_ARCH_PROTECT
(
Àv
);

566 if(
√tif
->
lo›_fú°
 !
NULL
) {

567 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

568 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

569 
√tif
->
lo›_œ°
 = 
œ°
;

571 
√tif
->
lo›_fú°
 = 
r
;

572 
√tif
->
lo›_œ°
 = 
œ°
;

574 
	`SYS_ARCH_UNPROTECT
(
Àv
);

576 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


578 
	`t˝ù_ˇŒback
(((*)(*))(
√tif_pﬁl
), 
√tif
);

581  
ERR_OK
;

582 
	}
}

591 
	$√tif_pﬁl
(
√tif
 *netif)

593 
pbuf
 *
ö
;

594 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

598 
	`SYS_ARCH_PROTECT
(
Àv
);

599 
ö
 = 
√tif
->
lo›_fú°
;

600 if(
ö
 !
NULL
) {

601 
pbuf
 *
ö_íd
 = 
ö
;

602 #i‡
LWIP_LOOPBACK_MAX_PBUFS


603 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

605 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

606 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

607 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

609 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

610 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

611 
ö_íd
 = in_íd->
√xt
;

614 if(
ö_íd
 =
√tif
->
lo›_œ°
) {

616 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

619 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

620 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

623 
ö_íd
->
√xt
 = 
NULL
;

625 
	`SYS_ARCH_UNPROTECT
(
Àv
);

627 if(
ö
 !
NULL
) {

629 if(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

630 
	`pbuf_‰ì
(
ö
);

633 
ö
 = 
NULL
;

636 } 
√tif
->
lo›_fú°
 !
NULL
);

637 
	}
}

639 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


644 
	$√tif_pﬁl_Æl
()

646 
√tif
 *√ti‡
√tif_li°
;

648 
√tif
 !
NULL
) {

649 
	`√tif_pﬁl
(
√tif
);

651 
√tif
 =Çëif->
√xt
;

653 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/pbuf.c

64 
	~"lwù/›t.h
"

66 
	~"lwù/°©s.h
"

67 
	~"lwù/def.h
"

68 
	~"lwù/mem.h
"

69 
	~"lwù/memp.h
"

70 
	~"lwù/pbuf.h
"

71 
	~"lwù/sys.h
"

72 
	~"¨ch/≥rf.h
"

73 #i‡
TCP_QUEUE_OOSEQ


74 
	~"lwù/t˝.h
"

77 
	~<°rög.h
>

79 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

82 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

84 #i‡
TCP_QUEUE_OOSEQ


85 
	#ALLOC_POOL_PBUF
(
p
Ëdÿ{ (pË
	`Æloc_poﬁ_pbuf
(); } 0)

	)

87 
	#ALLOC_POOL_PBUF
(
p
Ëdÿ{ (pË
	`memp_mÆloc
(
MEMP_PBUF_POOL
); } 0)

	)

91 #i‡
TCP_QUEUE_OOSEQ


99 
pbuf
 *

100 
	$Æloc_poﬁ_pbuf
()

102 
t˝_pcb
 *
pcb
;

103 
pbuf
 *
p
;

105 
ªåy
:

106 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

107 i‡(
NULL
 =
p
) {

108 
pcb
=
t˝_a˘ive_pcbs
; 
NULL
 !pcb;Öcb =Öcb->
√xt
) {

109 i‡(
NULL
 !
pcb
->
oo£q
) {

110 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

111 
pcb
->
oo£q
 = 
NULL
;

112 
ªåy
;

116  
p
;

117 
	}
}

151 
pbuf
 *

152 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
)

154 
pbuf
 *
p
, *
q
, *
r
;

155 
u16_t
 
off£t
;

156 
s32_t
 
ªm_Àn
;

157 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

160 
off£t
 = 0;

161 
œyî
) {

162 
PBUF_TRANSPORT
:

164 
off£t
 +
PBUF_TRANSPORT_HLEN
;

166 
PBUF_IP
:

168 
off£t
 +
PBUF_IP_HLEN
;

170 
PBUF_LINK
:

172 
off£t
 +
PBUF_LINK_HLEN
;

174 
PBUF_RAW
:

177 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

178  
NULL
;

181 
ty≥
) {

182 
PBUF_POOL
:

184 
	`ALLOC_POOL_PBUF
(
p
);

185 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

186 i‡(
p
 =
NULL
) {

187  
NULL
;

189 
p
->
ty≥
 =Åype;

190 
p
->
√xt
 = 
NULL
;

193 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

194 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

195 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

197 
p
->
tŸ_Àn
 = 
Àngth
;

199 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

200 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

201 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

202 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

203 
	`LWIP_ASSERT
("PBUF_POOL_BUFSIZE must be biggerÅhan MEM_ALIGNMENT",

204 (
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
)) > 0 );

206 
p
->
ªf
 = 1;

211 
r
 = 
p
;

213 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

215 
ªm_Àn
 > 0) {

216 
	`ALLOC_POOL_PBUF
(
q
);

217 i‡(
q
 =
NULL
) {

219 
	`pbuf_‰ì
(
p
);

221  
NULL
;

223 
q
->
ty≥
 =Åype;

224 
q
->
Êags
 = 0;

225 
q
->
√xt
 = 
NULL
;

227 
r
->
√xt
 = 
q
;

229 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

230 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

232 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

233 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

234 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

235 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

236 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

237 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

238 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

239 
q
->
ªf
 = 1;

241 
ªm_Àn
 -
q
->
Àn
;

243 
r
 = 
q
;

249 
PBUF_RAM
:

251 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

252 i‡(
p
 =
NULL
) {

253  
NULL
;

256 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

257 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

258 
p
->
√xt
 = 
NULL
;

259 
p
->
ty≥
 =Åype;

261 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

262 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

265 
PBUF_ROM
:

267 
PBUF_REF
:

269 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF
);

270 i‡(
p
 =
NULL
) {

271 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_alloc: CouldÇotállocate MEMP_PBUF for PBUF_%s.\n",

272 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

273  
NULL
;

276 
p
->
∑ylﬂd
 = 
NULL
;

277 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

278 
p
->
√xt
 = 
NULL
;

279 
p
->
ty≥
 =Åype;

282 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

283  
NULL
;

286 
p
->
ªf
 = 1;

288 
p
->
Êags
 = 0;

289 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

290  
p
;

291 
	}
}

310 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

312 
pbuf
 *
q
;

313 
u16_t
 
ªm_Àn
;

314 
s32_t
 
grow
;

316 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

317 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

318 
p
->
ty≥
 =
PBUF_ROM
 ||

319 
p
->
ty≥
 =
PBUF_RAM
 ||

320 
p
->
ty≥
 =
PBUF_REF
);

323 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

330 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

333 
ªm_Àn
 = 
√w_Àn
;

334 
q
 = 
p
;

336 
ªm_Àn
 > 
q
->
Àn
) {

338 
ªm_Àn
 -
q
->
Àn
;

340 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

341 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

343 
q
 = q->
√xt
;

344 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

351 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

353 
q
 = 
	`mem_ªÆloc
(q, (
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)q + 
ªm_Àn
);

354 
	`LWIP_ASSERT
("mem_ªÆlo¯givêq =NULL", 
q
 !
NULL
);

357 
q
->
Àn
 = 
ªm_Àn
;

358 
q
->
tŸ_Àn
 = q->
Àn
;

361 i‡(
q
->
√xt
 !
NULL
) {

363 
	`pbuf_‰ì
(
q
->
√xt
);

366 
q
->
√xt
 = 
NULL
;

368 
	}
}

390 
u8_t


391 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

393 
u16_t
 
ty≥
;

394 *
∑ylﬂd
;

395 
u16_t
 
ö¸emít_magnôude
;

397 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

398 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
))

401 i‡(
hódî_size_ö¸emít
 < 0){

402 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

404 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

406 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

411 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

412 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
);

414 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

415 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

419 
ty≥
 = 
p
->type;

421 
∑ylﬂd
 = 
p
->payload;

424 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

426 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

428 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

429 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_header: failedás %p < %p (notÉnough space forÇew header size)\n",

430 (*)
p
->
∑ylﬂd
,

431 (*)(
p
 + 1)));\

433 
p
->
∑ylﬂd
 =Öayload;

438 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

440 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

442 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

451 
	`LWIP_ASSERT
("badÖbufÅype", 0);

455 
p
->
Àn
 +
hódî_size_ö¸emít
;

456 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

458 
	`LWIP_DEBUGF
(
PBUF_DEBUG
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

459 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

462 
	}
}

497 
u8_t


498 
	$pbuf_‰ì
(
pbuf
 *
p
)

500 
u16_t
 
ty≥
;

501 
pbuf
 *
q
;

502 
u8_t
 
cou¡
;

504 i‡(
p
 =
NULL
) {

505 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

507 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_free(p == NULL) was called.\n"));

510 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_‰ì(%p)\n", (*)
p
));

512 
PERF_START
;

514 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

515 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

516 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
);

518 
cou¡
 = 0;

521 
p
 !
NULL
) {

522 
u16_t
 
ªf
;

523 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

527 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

529 
	`LWIP_ASSERT
("pbuf_‰ì:Ö->ª‡> 0", 
p
->
ªf
 > 0);

531 
ªf
 = --(
p
->ref);

532 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

534 i‡(
ªf
 == 0) {

536 
q
 = 
p
->
√xt
;

537 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

538 
ty≥
 = 
p
->type;

540 i‡(
ty≥
 =
PBUF_POOL
) {

541 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
);

543 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

544 
	`memp_‰ì
(
MEMP_PBUF
, 
p
);

547 
	`mem_‰ì
(
p
);

549 
cou¡
++;

551 
p
 = 
q
;

555 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

557 
p
 = 
NULL
;

560 
	`PERF_STOP
("pbuf_free");

562  
cou¡
;

563 
	}
}

572 
u8_t


573 
	$pbuf_˛í
(
pbuf
 *
p
)

575 
u8_t
 
Àn
;

577 
Àn
 = 0;

578 
p
 !
NULL
) {

579 ++
Àn
;

580 
p
 =Ö->
√xt
;

582  
Àn
;

583 
	}
}

592 
	$pbuf_ªf
(
pbuf
 *
p
)

594 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

596 i‡(
p
 !
NULL
) {

597 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

598 ++(
p
->
ªf
);

599 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

601 
	}
}

614 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

616 
pbuf
 *
p
;

618 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

619 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

622 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

624 
p
->
tŸ_Àn
 +
t
->tot_len;

627 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

628 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

630 
p
->
tŸ_Àn
 +
t
->tot_len;

632 
p
->
√xt
 = 
t
;

636 
	}
}

655 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

657 
	`pbuf_ˇt
(
h
, 
t
);

659 
	`pbuf_ªf
(
t
);

660 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_FRESH
 | 2, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

661 
	}
}

671 
pbuf
 *

672 
	$pbuf_dechaö
(
pbuf
 *
p
)

674 
pbuf
 *
q
;

675 
u8_t
 
èû_g⁄e
 = 1;

677 
q
 = 
p
->
√xt
;

679 i‡(
q
 !
NULL
) {

681 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

683 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

685 
p
->
√xt
 = 
NULL
;

687 
p
->
tŸ_Àn
 =Ö->
Àn
;

689 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

690 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
);

691 i‡(
èû_g⁄e
 > 0) {

692 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
,

693 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

698 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

699  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

700 
	}
}

720 
îr_t


721 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

723 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

725 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_copy(%p, %p)\n",

726 (*)
p_to
, (*)
p_‰om
));

729 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

730 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

735 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

737 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

739 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

742 
Àn
 = 
p_to
->À¿- 
off£t_to
;

744 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

745 
off£t_to
 +
Àn
;

746 
off£t_‰om
 +
Àn
;

747 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

748 i‡(
off£t_to
 =
p_to
->
Àn
) {

750 
off£t_to
 = 0;

751 
p_to
 =Ö_to->
√xt
;

753 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

754 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

756 
off£t_‰om
 = 0;

757 
p_‰om
 =Ö_‰om->
√xt
;

760 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

762 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

763 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

765 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

767 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

768 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

770 } 
p_‰om
);

771 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("pbuf_copy:Énd of chainÑeached.\n"));

772  
ERR_OK
;

773 
	}
}

786 
u16_t


787 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

789 
pbuf
 *
p
;

790 
u16_t
 
À·
;

791 
u16_t
 
buf_c›y_Àn
;

792 
u16_t
 
c›õd_tŸÆ
 = 0;

794 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

795 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

797 
À·
 = 0;

799 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

804 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

805 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

807 
off£t
 -
p
->
Àn
;

810 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

811 i‡(
buf_c›y_Àn
 > 
Àn
)

812 
buf_c›y_Àn
 = 
Àn
;

814 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

815 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

816 
À·
 +
buf_c›y_Àn
;

817 
Àn
 -
buf_c›y_Àn
;

818 
off£t
 = 0;

821  
c›õd_tŸÆ
;

822 
	}
}

834 
îr_t


835 
	$pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
)

837 
pbuf
 *
p
;

838 
u16_t
 
buf_c›y_Àn
;

839 
u16_t
 
tŸÆ_c›y_Àn
 = 
Àn
;

840 
u16_t
 
c›õd_tŸÆ
 = 0;

842 
	`LWIP_ERROR
("pbuf_èke: invÆid buf", (
buf
 !
NULL
),  0;);

843 
	`LWIP_ERROR
("pbuf_èke: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

845 i‡((
buf
 =
NULL
Ë|| (
d©≠å
 =NULLË|| (buf->
tŸ_Àn
 < 
Àn
)) {

846  
ERR_ARG
;

850 
p
 = 
buf
; 
tŸÆ_c›y_Àn
 !0;Ö =Ö->
√xt
) {

851 
	`LWIP_ASSERT
("pbuf_èke: invÆidÖbuf", 
p
 !
NULL
);

852 
buf_c›y_Àn
 = 
tŸÆ_c›y_Àn
;

853 i‡(
buf_c›y_Àn
 > 
p
->
Àn
) {

855 
buf_c›y_Àn
 = 
p
->
Àn
;

858 
	`MEMCPY
(
p
->
∑ylﬂd
, &((*)
d©≠å
)[
c›õd_tŸÆ
], 
buf_c›y_Àn
);

859 
tŸÆ_c›y_Àn
 -
buf_c›y_Àn
;

860 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

862 
	`LWIP_ASSERT
("didÇŸ c›yáŒ d©a", 
tŸÆ_c›y_Àn
 =0 && 
c›õd_tŸÆ
 =
Àn
);

863  
ERR_OK
;

864 
	}
}

878 
pbuf
*

879 
	$pbuf_cﬂÀs˚
(
pbuf
 *
p
, 
pbuf_œyî
 
œyî
)

881 
pbuf
 *
q
;

882 
îr_t
 
îr
;

883 i‡(
p
->
√xt
 =
NULL
) {

884  
p
;

886 
q
 = 
	`pbuf_Æloc
(
œyî
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

887 i‡(
q
 =
NULL
) {

889  
p
;

891 
îr
 = 
	`pbuf_c›y
(
q
, 
p
);

892 
	`LWIP_ASSERT
("pbuf_c›y faûed", 
îr
 =
ERR_OK
);

893 
	`pbuf_‰ì
(
p
);

894  
q
;

895 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/raw.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_RAW


45 
	~"lwù/def.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/ù_addr.h
"

49 
	~"lwù/√tif.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

53 
	~"¨ch/≥rf.h
"

55 
	~<°rög.h
>

58 
øw_pcb
 *
	gøw_pcbs
;

77 
u8_t


78 
	$øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
øw_pcb
 *
pcb
, *
¥ev
;

81 
ù_hdr
 *
ùhdr
;

82 
s16_t
 
¥Ÿo
;

83 
u8_t
 
óãn
 = 0;

85 
	`LWIP_UNUSED_ARG
(
öp
);

87 
ùhdr
 = 
p
->
∑ylﬂd
;

88 
¥Ÿo
 = 
	`IPH_PROTO
(
ùhdr
);

90 
¥ev
 = 
NULL
;

91 
pcb
 = 
øw_pcbs
;

94 (
óãn
 =0Ë&& (
pcb
 !
NULL
)) {

95 i‡(
pcb
->
¥Ÿocﬁ
 =
¥Ÿo
) {

96 #i‡
IP_SOF_BROADCAST_RECV


98 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë|| !
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
))

102 i‡(
pcb
->
ªcv
 !
NULL
) {

104 i‡(
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
)) != 0) {

106 
p
 = 
NULL
;

107 
óãn
 = 1;

108 i‡(
¥ev
 !
NULL
) {

111 
¥ev
->
√xt
 = 
pcb
->next;

112 
pcb
->
√xt
 = 
øw_pcbs
;

113 
øw_pcbs
 = 
pcb
;

121 
¥ev
 = 
pcb
;

122 
pcb
 =Öcb->
√xt
;

124  
óãn
;

125 
	}
}

141 
îr_t


142 
	$øw_böd
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

144 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

145  
ERR_OK
;

146 
	}
}

161 
îr_t


162 
	$øw_c⁄√˘
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

164 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

165  
ERR_OK
;

166 
	}
}

183 
	$øw_ªcv
(
øw_pcb
 *
pcb
,

184 
	$u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
upcb
, 
pbuf
 *
p
,

185 
ù_addr
 *
addr
),

186 *
ªcv_¨g
)

189 
pcb
->
ªcv
 =Ñecv;

190 
pcb
->
ªcv_¨g
 =Ñecv_arg;

191 
	}
}

205 
îr_t


206 
	$øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

208 
îr_t
 
îr
;

209 
√tif
 *netif;

210 
ù_addr
 *
§c_ù
;

211 
pbuf
 *
q
;

213 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_sendto\n"));

216 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

218 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 0, 
PBUF_RAM
);

220 i‡(
q
 =
NULL
) {

221 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("raw_sendto: couldÇotállocate header\n"));

222  
ERR_MEM
;

225 
	`pbuf_chaö
(
q
, 
p
);

227 
	`LWIP_DEBUGF
(
RAW_DEBUG
, ("øw_£ndto:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

230 
q
 = 
p
;

231 if(
	`pbuf_hódî
(
q
, -
IP_HLEN
)) {

232 
	`LWIP_ASSERT
("Can'tÑestore header we justÑemoved!", 0);

233  
ERR_MEM
;

237 i‡((
√tif
 = 
	`ù_rouã
(
ùaddr
)Ë=
NULL
) {

238 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: NÿrouãÅÿ0x%"
X32_F
"\n", 
ùaddr
->
addr
));

240 i‡(
q
 !
p
) {

241 
	`pbuf_‰ì
(
q
);

243  
ERR_RTE
;

246 #i‡
IP_SOF_BROADCAST


248 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ) {

249 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

251 i‡(
q
 !
p
) {

252 
	`pbuf_‰ì
(
q
);

254  
ERR_VAL
;

258 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

260 
§c_ù
 = &(
√tif
->
ù_addr
);

263 
§c_ù
 = &(
pcb
->
loˇl_ù
);

266 #i‡
LWIP_NETIF_HWADDRHINT


267 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

269 
îr
 = 
	`ù_ouçut_if
 (
q
, 
§c_ù
, 
ùaddr
, 
pcb
->
âl
,Öcb->
tos
,Öcb->
¥Ÿocﬁ
, 
√tif
);

270 #i‡
LWIP_NETIF_HWADDRHINT


271 
√tif
->
addr_höt
 = 
NULL
;

275 i‡(
q
 !
p
) {

277 
	`pbuf_‰ì
(
q
);

279  
îr
;

280 
	}
}

289 
îr_t


290 
	$øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
)

292  
	`øw_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
);

293 
	}
}

304 
	$øw_ªmove
(
øw_pcb
 *
pcb
)

306 
øw_pcb
 *
pcb2
;

308 i‡(
øw_pcbs
 =
pcb
) {

310 
øw_pcbs
 =Ñaw_pcbs->
√xt
;

313 
pcb2
 = 
øw_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

315 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

317 
pcb2
->
√xt
 = 
pcb
->next;

321 
	`memp_‰ì
(
MEMP_RAW_PCB
, 
pcb
);

322 
	}
}

334 
øw_pcb
 *

335 
	$øw_√w
(
u8_t
 
¥Ÿo
) {

336 
øw_pcb
 *
pcb
;

338 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_new\n"));

340 
pcb
 = 
	`memp_mÆloc
(
MEMP_RAW_PCB
);

342 i‡(
pcb
 !
NULL
) {

344 
	`mem£t
(
pcb
, 0, (
øw_pcb
));

345 
pcb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

346 
pcb
->
âl
 = 
RAW_TTL
;

347 
pcb
->
√xt
 = 
øw_pcbs
;

348 
øw_pcbs
 = 
pcb
;

350  
pcb
;

351 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/asn1_dec.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

51 
îr_t


52 
	$¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
)

54 
u16_t
 
∂í
, 
ba£
;

55 
u8_t
 *
msg_±r
;

57 
∂í
 = 0;

58 
p
 !
NULL
)

60 
ba£
 = 
∂í
;

61 
∂í
 +
p
->
Àn
;

62 i‡(
ofs
 < 
∂í
)

64 
msg_±r
 = 
p
->
∑ylﬂd
;

65 
msg_±r
 +
ofs
 - 
ba£
;

66 *
ty≥
 = *
msg_±r
;

67  
ERR_OK
;

69 
p
 =Ö->
√xt
;

72  
ERR_ARG
;

73 
	}
}

84 
îr_t


85 
	$¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
)

87 
u16_t
 
∂í
, 
ba£
;

88 
u8_t
 *
msg_±r
;

90 
∂í
 = 0;

91 
p
 !
NULL
)

93 
ba£
 = 
∂í
;

94 
∂í
 +
p
->
Àn
;

95 i‡(
ofs
 < 
∂í
)

97 
msg_±r
 = 
p
->
∑ylﬂd
;

98 
msg_±r
 +
ofs
 - 
ba£
;

100 i‡(*
msg_±r
 < 0x80)

103 *
o˘ës_u£d
 = 1;

104 *
Àngth
 = *
msg_±r
;

105  
ERR_OK
;

107 i‡(*
msg_±r
 == 0x80)

110 
u8_t
 
zîos
;

111 
u8_t
 
i
;

113 *
Àngth
 = 0;

114 
zîos
 = 0;

115 
zîos
 != 2)

117 
i
 = 2;

118 
i
 > 0)

120 
i
--;

121 (*
Àngth
) += 1;

122 
ofs
 += 1;

123 i‡(
ofs
 >
∂í
)

126 
p
 =Ö->
√xt
;

127 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

128 
msg_±r
 = 
p
->
∑ylﬂd
;

129 
∂í
 +
p
->
Àn
;

134 
msg_±r
++;

136 i‡(*
msg_±r
 == 0)

138 
zîos
++;

139 i‡(
zîos
 == 2)

142 
i
 = 0;

147 
zîos
 = 0;

151 *
o˘ës_u£d
 = 1;

152  
ERR_OK
;

154 i‡(*
msg_±r
 == 0x81)

157 
ofs
 += 1;

158 i‡(
ofs
 >
∂í
)

161 
p
 =Ö->
√xt
;

162 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

163 
msg_±r
 = 
p
->
∑ylﬂd
;

168 
msg_±r
++;

170 *
Àngth
 = *
msg_±r
;

171 *
o˘ës_u£d
 = 2;

172  
ERR_OK
;

174 i‡(*
msg_±r
 == 0x82)

176 
u8_t
 
i
;

179 
i
 = 2;

180 
i
 > 0)

182 
i
--;

183 
ofs
 += 1;

184 i‡(
ofs
 >
∂í
)

187 
p
 =Ö->
√xt
;

188 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

189 
msg_±r
 = 
p
->
∑ylﬂd
;

190 
∂í
 +
p
->
Àn
;

195 
msg_±r
++;

197 i‡(
i
 == 0)

200 *
Àngth
 |*
msg_±r
;

205 *
Àngth
 = (*
msg_±r
) << 8;

208 *
o˘ës_u£d
 = 3;

209  
ERR_OK
;

215 *
o˘ës_u£d
 = 1 + ((*
msg_±r
) & 0x7f);

216  
ERR_ARG
;

219 
p
 =Ö->
√xt
;

223  
ERR_ARG
;

224 
	}
}

239 
îr_t


240 
	$¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
)

242 
u16_t
 
∂í
, 
ba£
;

243 
u8_t
 *
msg_±r
;

245 
∂í
 = 0;

246 
p
 !
NULL
)

248 
ba£
 = 
∂í
;

249 
∂í
 +
p
->
Àn
;

250 i‡(
ofs
 < 
∂í
)

252 
msg_±r
 = 
p
->
∑ylﬂd
;

253 
msg_±r
 +
ofs
 - 
ba£
;

254 i‡((
Àn
 > 0) && (len < 6))

257 *
vÆue
 = 0;

258 i‡(*
msg_±r
 & 0x80)

261  
ERR_ARG
;

266 i‡((
Àn
 > 1Ë&& (*
msg_±r
 == 0))

269 
Àn
--;

270 
ofs
 += 1;

271 i‡(
ofs
 >
∂í
)

274 
p
 =Ö->
√xt
;

275 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

276 
msg_±r
 = 
p
->
∑ylﬂd
;

277 
∂í
 +
p
->
Àn
;

282 
msg_±r
++;

287 
Àn
 > 1)

289 
Àn
--;

290 *
vÆue
 |*
msg_±r
;

291 *
vÆue
 <<= 8;

292 
ofs
 += 1;

293 i‡(
ofs
 >
∂í
)

296 
p
 =Ö->
√xt
;

297 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

298 
msg_±r
 = 
p
->
∑ylﬂd
;

299 
∂í
 +
p
->
Àn
;

304 
msg_±r
++;

307 *
vÆue
 |*
msg_±r
;

308  
ERR_OK
;

312  
ERR_ARG
;

315 
p
 =Ö->
√xt
;

318  
ERR_ARG
;

319 
	}
}

332 
îr_t


333 
	$¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
)

335 
u16_t
 
∂í
, 
ba£
;

336 
u8_t
 *
msg_±r
;

337 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


338 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
;

340 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


341 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
 + (
s32_t
) - 1;

343 
u8_t
 
sign
;

345 
∂í
 = 0;

346 
p
 !
NULL
)

348 
ba£
 = 
∂í
;

349 
∂í
 +
p
->
Àn
;

350 i‡(
ofs
 < 
∂í
)

352 
msg_±r
 = 
p
->
∑ylﬂd
;

353 
msg_±r
 +
ofs
 - 
ba£
;

354 i‡((
Àn
 > 0) && (len < 5))

356 i‡(*
msg_±r
 & 0x80)

359 *
vÆue
 = -1;

360 
sign
 = 1;

365 *
vÆue
 = 0;

366 
sign
 = 0;

369 
Àn
 > 1)

371 
Àn
--;

372 i‡(
sign
)

374 *
lsb_±r
 &*
msg_±r
;

375 *
vÆue
 <<= 8;

376 *
lsb_±r
 |= 255;

380 *
lsb_±r
 |*
msg_±r
;

381 *
vÆue
 <<= 8;

383 
ofs
 += 1;

384 i‡(
ofs
 >
∂í
)

387 
p
 =Ö->
√xt
;

388 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

389 
msg_±r
 = 
p
->
∑ylﬂd
;

390 
∂í
 +
p
->
Àn
;

395 
msg_±r
++;

398 i‡(
sign
)

400 *
lsb_±r
 &*
msg_±r
;

404 *
lsb_±r
 |*
msg_±r
;

406  
ERR_OK
;

410  
ERR_ARG
;

413 
p
 =Ö->
√xt
;

416  
ERR_ARG
;

417 
	}
}

428 
îr_t


429 
	$¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
)

431 
u16_t
 
∂í
, 
ba£
;

432 
u8_t
 *
msg_±r
;

433 
s32_t
 *
oid_±r
;

435 
∂í
 = 0;

436 
p
 !
NULL
)

438 
ba£
 = 
∂í
;

439 
∂í
 +
p
->
Àn
;

440 i‡(
ofs
 < 
∂í
)

442 
msg_±r
 = 
p
->
∑ylﬂd
;

443 
msg_±r
 +
ofs
 - 
ba£
;

445 
oid
->
Àn
 = 0;

446 
oid_±r
 = &
oid
->
id
[0];

447 i‡(
Àn
 > 0)

450 i‡(*
msg_±r
 == 0x2B)

453 *
oid_±r
 = 1;

454 
oid_±r
++;

455 *
oid_±r
 = 3;

456 
oid_±r
++;

458 i‡(*
msg_±r
 < 40)

460 *
oid_±r
 = 0;

461 
oid_±r
++;

462 *
oid_±r
 = *
msg_±r
;

463 
oid_±r
++;

465 i‡(*
msg_±r
 < 80)

467 *
oid_±r
 = 1;

468 
oid_±r
++;

469 *
oid_±r
 = (*
msg_±r
) - 40;

470 
oid_±r
++;

474 *
oid_±r
 = 2;

475 
oid_±r
++;

476 *
oid_±r
 = (*
msg_±r
) - 80;

477 
oid_±r
++;

479 
oid
->
Àn
 = 2;

485  
ERR_OK
;

487 
Àn
--;

488 i‡(
Àn
 > 0)

490 
ofs
 += 1;

491 i‡(
ofs
 >
∂í
)

494 
p
 =Ö->
√xt
;

495 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

496 
msg_±r
 = 
p
->
∑ylﬂd
;

497 
∂í
 +
p
->
Àn
;

502 
msg_±r
++;

505 (
Àn
 > 0Ë&& (
oid
->À¿< 
LWIP_SNMP_OBJ_ID_LEN
))

508 i‡(*
msg_±r
 & 0x80)

510 
s32_t
 
sub_id
 = 0;

512 (*
msg_±r
 & 0x80Ë&& (
Àn
 > 1))

514 
Àn
--;

515 
sub_id
 = (sub_id << 7Ë+ (*
msg_±r
 & ~0x80);

516 
ofs
 += 1;

517 i‡(
ofs
 >
∂í
)

520 
p
 =Ö->
√xt
;

521 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

522 
msg_±r
 = 
p
->
∑ylﬂd
;

523 
∂í
 +
p
->
Àn
;

528 
msg_±r
++;

531 i‡(!(*
msg_±r
 & 0x80Ë&& (
Àn
 > 0))

534 
Àn
--;

535 
sub_id
 = (sub_id << 7Ë+ *
msg_±r
;

536 *
oid_±r
 = 
sub_id
;

542 
Àn
--;

543 *
oid_±r
 = *
msg_±r
;

545 i‡(
Àn
 > 0)

548 
ofs
 += 1;

549 i‡(
ofs
 >
∂í
)

552 
p
 =Ö->
√xt
;

553 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

554 
msg_±r
 = 
p
->
∑ylﬂd
;

555 
∂í
 +
p
->
Àn
;

560 
msg_±r
++;

563 
oid_±r
++;

564 
oid
->
Àn
++;

566 i‡(
Àn
 == 0)

569  
ERR_OK
;

574  
ERR_ARG
;

578 
p
 =Ö->
√xt
;

581  
ERR_ARG
;

582 
	}
}

595 
îr_t


596 
	$¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

598 
u16_t
 
∂í
, 
ba£
;

599 
u8_t
 *
msg_±r
;

601 i‡(
Àn
 > 0)

603 
∂í
 = 0;

604 
p
 !
NULL
)

606 
ba£
 = 
∂í
;

607 
∂í
 +
p
->
Àn
;

608 i‡(
ofs
 < 
∂í
)

610 
msg_±r
 = 
p
->
∑ylﬂd
;

611 
msg_±r
 +
ofs
 - 
ba£
;

612 i‡(
øw_Àn
 >
Àn
)

614 
Àn
 > 1)

617 
Àn
--;

618 *
øw
 = *
msg_±r
;

619 
øw
++;

620 
ofs
 += 1;

621 i‡(
ofs
 >
∂í
)

624 
p
 =Ö->
√xt
;

625 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

626 
msg_±r
 = 
p
->
∑ylﬂd
;

627 
∂í
 +
p
->
Àn
;

632 
msg_±r
++;

636 *
øw
 = *
msg_±r
;

637  
ERR_OK
;

642  
ERR_ARG
;

645 
p
 =Ö->
√xt
;

648  
ERR_ARG
;

653  
ERR_OK
;

655 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/asn1_enc.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

50 
	$¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
)

52 i‡(
Àngth
 < 0x80U)

54 *
o˘ës_√eded
 = 1;

56 i‡(
Àngth
 < 0x100U)

58 *
o˘ës_√eded
 = 2;

62 *
o˘ës_√eded
 = 3;

64 
	}
}

77 
	$¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

79 i‡(
vÆue
 < 0x80UL)

81 *
o˘ës_√eded
 = 1;

83 i‡(
vÆue
 < 0x8000UL)

85 *
o˘ës_√eded
 = 2;

87 i‡(
vÆue
 < 0x800000UL)

89 *
o˘ës_√eded
 = 3;

91 i‡(
vÆue
 < 0x80000000UL)

93 *
o˘ës_√eded
 = 4;

97 *
o˘ës_√eded
 = 5;

99 
	}
}

110 
	$¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

112 i‡(
vÆue
 < 0)

114 
vÆue
 = ~value;

116 i‡(
vÆue
 < 0x80L)

118 *
o˘ës_√eded
 = 1;

120 i‡(
vÆue
 < 0x8000L)

122 *
o˘ës_√eded
 = 2;

124 i‡(
vÆue
 < 0x800000L)

126 *
o˘ës_√eded
 = 3;

130 *
o˘ës_√eded
 = 4;

132 
	}
}

142 
	$¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
)

144 
s32_t
 
sub_id
;

145 
u8_t
 
˙t
;

147 
˙t
 = 0;

148 i‡(
idít_Àn
 > 1)

151 
˙t
++;

152 
idít_Àn
 -= 2;

153 
idít
 += 2;

155 
idít_Àn
 > 0)

157 
idít_Àn
--;

158 
sub_id
 = *
idít
;

160 
sub_id
 >>= 7;

161 
˙t
++;

162 
sub_id
 > 0)

164 
sub_id
 >>= 7;

165 
˙t
++;

167 
idít
++;

169 *
o˘ës_√eded
 = 
˙t
;

170 
	}
}

180 
îr_t


181 
	$¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
)

183 
u16_t
 
∂í
, 
ba£
;

184 
u8_t
 *
msg_±r
;

186 
∂í
 = 0;

187 
p
 !
NULL
)

189 
ba£
 = 
∂í
;

190 
∂í
 +
p
->
Àn
;

191 i‡(
ofs
 < 
∂í
)

193 
msg_±r
 = 
p
->
∑ylﬂd
;

194 
msg_±r
 +
ofs
 - 
ba£
;

195 *
msg_±r
 = 
ty≥
;

196  
ERR_OK
;

198 
p
 =Ö->
√xt
;

201  
ERR_ARG
;

202 
	}
}

212 
îr_t


213 
	$¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
)

215 
u16_t
 
∂í
, 
ba£
;

216 
u8_t
 *
msg_±r
;

218 
∂í
 = 0;

219 
p
 !
NULL
)

221 
ba£
 = 
∂í
;

222 
∂í
 +
p
->
Àn
;

223 i‡(
ofs
 < 
∂í
)

225 
msg_±r
 = 
p
->
∑ylﬂd
;

226 
msg_±r
 +
ofs
 - 
ba£
;

228 i‡(
Àngth
 < 0x80)

230 *
msg_±r
 = 
Àngth
;

231  
ERR_OK
;

233 i‡(
Àngth
 < 0x100)

235 *
msg_±r
 = 0x81;

236 
ofs
 += 1;

237 i‡(
ofs
 >
∂í
)

240 
p
 =Ö->
√xt
;

241 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

242 
msg_±r
 = 
p
->
∑ylﬂd
;

247 
msg_±r
++;

249 *
msg_±r
 = 
Àngth
;

250  
ERR_OK
;

254 
u8_t
 
i
;

257 *
msg_±r
 = 0x82;

258 
i
 = 2;

259 
i
 > 0)

261 
i
--;

262 
ofs
 += 1;

263 i‡(
ofs
 >
∂í
)

266 
p
 =Ö->
√xt
;

267 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

268 
msg_±r
 = 
p
->
∑ylﬂd
;

269 
∂í
 +
p
->
Àn
;

274 
msg_±r
++;

276 i‡(
i
 == 0)

279 *
msg_±r
 = 
Àngth
;

284 *
msg_±r
 = 
Àngth
 >> 8;

287  
ERR_OK
;

290 
p
 =Ö->
√xt
;

293  
ERR_ARG
;

294 
	}
}

307 
îr_t


308 
	$¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
)

310 
u16_t
 
∂í
, 
ba£
;

311 
u8_t
 *
msg_±r
;

313 
∂í
 = 0;

314 
p
 !
NULL
)

316 
ba£
 = 
∂í
;

317 
∂í
 +
p
->
Àn
;

318 i‡(
ofs
 < 
∂í
)

320 
msg_±r
 = 
p
->
∑ylﬂd
;

321 
msg_±r
 +
ofs
 - 
ba£
;

323 i‡(
o˘ës_√eded
 == 5)

326 
o˘ës_√eded
--;

327 *
msg_±r
 = 0x00;

328 
ofs
 += 1;

329 i‡(
ofs
 >
∂í
)

332 
p
 =Ö->
√xt
;

333 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

334 
msg_±r
 = 
p
->
∑ylﬂd
;

335 
∂í
 +
p
->
Àn
;

340 
msg_±r
++;

343 
o˘ës_√eded
 > 1)

345 
o˘ës_√eded
--;

346 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

347 
ofs
 += 1;

348 i‡(
ofs
 >
∂í
)

351 
p
 =Ö->
√xt
;

352 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

353 
msg_±r
 = 
p
->
∑ylﬂd
;

354 
∂í
 +
p
->
Àn
;

359 
msg_±r
++;

363 *
msg_±r
 = 
vÆue
;

364  
ERR_OK
;

366 
p
 =Ö->
√xt
;

369  
ERR_ARG
;

370 
	}
}

383 
îr_t


384 
	$¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
)

386 
u16_t
 
∂í
, 
ba£
;

387 
u8_t
 *
msg_±r
;

389 
∂í
 = 0;

390 
p
 !
NULL
)

392 
ba£
 = 
∂í
;

393 
∂í
 +
p
->
Àn
;

394 i‡(
ofs
 < 
∂í
)

396 
msg_±r
 = 
p
->
∑ylﬂd
;

397 
msg_±r
 +
ofs
 - 
ba£
;

399 
o˘ës_√eded
 > 1)

401 
o˘ës_√eded
--;

402 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

403 
ofs
 += 1;

404 i‡(
ofs
 >
∂í
)

407 
p
 =Ö->
√xt
;

408 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

409 
msg_±r
 = 
p
->
∑ylﬂd
;

410 
∂í
 +
p
->
Àn
;

415 
msg_±r
++;

419 *
msg_±r
 = 
vÆue
;

420  
ERR_OK
;

422 
p
 =Ö->
√xt
;

425  
ERR_ARG
;

426 
	}
}

437 
îr_t


438 
	$¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

440 
u16_t
 
∂í
, 
ba£
;

441 
u8_t
 *
msg_±r
;

443 
∂í
 = 0;

444 
p
 !
NULL
)

446 
ba£
 = 
∂í
;

447 
∂í
 +
p
->
Àn
;

448 i‡(
ofs
 < 
∂í
)

450 
msg_±r
 = 
p
->
∑ylﬂd
;

451 
msg_±r
 +
ofs
 - 
ba£
;

453 i‡(
idít_Àn
 > 1)

455 i‡((
idít
[0] == 1) && (ident[1] == 3))

458 *
msg_±r
 = 0x2b;

463 *
msg_±r
 = (
idít
[0] * 40) + ident[1];

465 
ofs
 += 1;

466 i‡(
ofs
 >
∂í
)

469 
p
 =Ö->
√xt
;

470 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

471 
msg_±r
 = 
p
->
∑ylﬂd
;

472 
∂í
 +
p
->
Àn
;

477 
msg_±r
++;

479 
idít_Àn
 -= 2;

480 
idít
 += 2;

486  
ERR_ARG
;

488 
idít_Àn
 > 0)

490 
s32_t
 
sub_id
;

491 
u8_t
 
shi·
, 
èû
;

493 
idít_Àn
--;

494 
sub_id
 = *
idít
;

495 
èû
 = 0;

496 
shi·
 = 28;

497 
shi·
 > 0)

499 
u8_t
 
code
;

501 
code
 = 
sub_id
 >> 
shi·
;

502 i‡((
code
 !0Ë|| (
èû
 != 0))

504 
èû
 = 1;

505 *
msg_±r
 = 
code
 | 0x80;

506 
ofs
 += 1;

507 i‡(
ofs
 >
∂í
)

510 
p
 =Ö->
√xt
;

511 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

512 
msg_±r
 = 
p
->
∑ylﬂd
;

513 
∂í
 +
p
->
Àn
;

518 
msg_±r
++;

521 
shi·
 -= 7;

523 *
msg_±r
 = (
u8_t
)
sub_id
 & 0x7F;

524 i‡(
idít_Àn
 > 0)

526 
ofs
 += 1;

527 i‡(
ofs
 >
∂í
)

530 
p
 =Ö->
√xt
;

531 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

532 
msg_±r
 = 
p
->
∑ylﬂd
;

533 
∂í
 +
p
->
Àn
;

538 
msg_±r
++;

542 
idít
++;

544  
ERR_OK
;

546 
p
 =Ö->
√xt
;

549  
ERR_ARG
;

550 
	}
}

561 
îr_t


562 
	$¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
)

564 
u16_t
 
∂í
, 
ba£
;

565 
u8_t
 *
msg_±r
;

567 
∂í
 = 0;

568 
p
 !
NULL
)

570 
ba£
 = 
∂í
;

571 
∂í
 +
p
->
Àn
;

572 i‡(
ofs
 < 
∂í
)

574 
msg_±r
 = 
p
->
∑ylﬂd
;

575 
msg_±r
 +
ofs
 - 
ba£
;

577 
øw_Àn
 > 1)

580 
øw_Àn
--;

581 *
msg_±r
 = *
øw
;

582 
øw
++;

583 
ofs
 += 1;

584 i‡(
ofs
 >
∂í
)

587 
p
 =Ö->
√xt
;

588 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

589 
msg_±r
 = 
p
->
∑ylﬂd
;

590 
∂í
 +
p
->
Àn
;

595 
msg_±r
++;

598 i‡(
øw_Àn
 > 0)

601 *
msg_±r
 = *
øw
;

603  
ERR_OK
;

605 
p
 =Ö->
√xt
;

608  
ERR_ARG
;

609 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/mib2.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/ù.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/t˝.h
"

47 
	~"lwù/udp.h
"

48 
	~"lwù/¢mp_a¢1.h
"

49 
	~"lwù/¢mp_°ru˘s.h
"

50 
	~"√tif/ëh¨p.h
"

65 
	#SNMP_ENTERPRISE_ID
 26381

	)

66 
	#SNMP_SYSOBJID_LEN
 7

	)

67 
	#SNMP_SYSOBJID
 {1, 3, 6, 1, 4, 1, 
SNMP_ENTERPRISE_ID
}

	)

69 #i‚de‡
SNMP_SYSSERVICES


70 
	#SNMP_SYSSERVICES
 ((1 << 6Ë| (1 << 3Ë| ((
IP_FORWARD
Ë<< 2))

	)

73 #i‚de‡
SNMP_GET_SYSUPTIME


74 
	#SNMP_GET_SYSUPTIME
(
sysu±ime
)

	)

77 
sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

78 
sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

79 
u8_t
 
sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

80 
sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

81 
öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

82 
öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

83 
i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

84 
i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

85 #i‡!
SNMP_SAFE_REQUESTS


86 
u8_t
 
i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

87 
i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

89 
©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

90 
©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

91 
ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

92 
ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

93 
u8_t
 
ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

94 
ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

95 
ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

96 
ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

97 
ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

98 
ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

99 
ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

100 
icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

101 
icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

102 #i‡
LWIP_TCP


103 
t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

104 
t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

105 #ifde‡
THIS_SEEMS_UNUSED


106 
t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

107 
t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 
udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

111 
udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 
ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

113 
ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

115 
¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 
u8_t
 
¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

117 
¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

121 c⁄° 
mib_sˇœr_node
 
	g¢mp_sˇœr
 = {

122 &
¢mp_gë_obje˘_def
,

123 &
¢mp_gë_vÆue
,

124 &
¢mp_£t_ã°
,

125 &
¢mp_£t_vÆue
,

126 
MIB_NODE_SC
,

129 c⁄° 
s32_t
 
	g¢mp_ids
[28] = {

133 
mib_node
* c⁄° 
	g¢mp_nodes
[28] = {

134 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

135 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

136 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

137 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

138 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

139 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

140 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

141 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

142 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

143 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

144 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

145 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

146 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

147 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar

149 c⁄° 
mib_¨øy_node
 
	g¢mp
 = {

150 &
nﬁófs_gë_obje˘_def
,

151 &
nﬁófs_gë_vÆue
,

152 &
nﬁófs_£t_ã°
,

153 &
nﬁófs_£t_vÆue
,

154 
MIB_NODE_AR
,

156 
¢mp_ids
,

157 
¢mp_nodes


166 
mib_li°_roŸnode
 
	gudp_roŸ
 = {

167 &
nﬁófs_gë_obje˘_def
,

168 &
nﬁófs_gë_vÆue
,

169 &
nﬁófs_£t_ã°
,

170 &
nﬁófs_£t_vÆue
,

171 
MIB_NODE_LR
,

173 
NULL
,

174 
NULL
,

177 c⁄° 
s32_t
 
	gud≥¡ry_ids
[2] = { 1, 2 };

178 
mib_node
* c⁄° 
	gud≥¡ry_nodes
[2] = {

179 (
mib_node
* c⁄°)&
udp_roŸ
, (mib_node* const)&udp_root,

181 c⁄° 
mib_¨øy_node
 
	gud≥¡ry
 = {

182 &
nﬁófs_gë_obje˘_def
,

183 &
nﬁófs_gë_vÆue
,

184 &
nﬁófs_£t_ã°
,

185 &
nﬁófs_£t_vÆue
,

186 
MIB_NODE_AR
,

188 
ud≥¡ry_ids
,

189 
ud≥¡ry_nodes


192 
s32_t
 
	gud±abÀ_id
 = 1;

193 
mib_node
* 
	gud±abÀ_node
 = (mib_node* c⁄°)&
ud≥¡ry
;

194 
mib_øm_¨øy_node
 
	gud±abÀ
 = {

195 &
nﬁófs_gë_obje˘_def
,

196 &
nﬁófs_gë_vÆue
,

197 &
nﬁófs_£t_ã°
,

198 &
nﬁófs_£t_vÆue
,

199 
MIB_NODE_RA
,

201 &
ud±abÀ_id
,

202 &
ud±abÀ_node


205 c⁄° 
mib_sˇœr_node
 
	gudp_sˇœr
 = {

206 &
udp_gë_obje˘_def
,

207 &
udp_gë_vÆue
,

208 &
nﬁófs_£t_ã°
,

209 &
nﬁófs_£t_vÆue
,

210 
MIB_NODE_SC
,

213 c⁄° 
s32_t
 
	gudp_ids
[5] = { 1, 2, 3, 4, 5 };

214 
mib_node
* c⁄° 
	gudp_nodes
[5] = {

215 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

216 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

217 (
mib_node
* c⁄°)&
ud±abÀ


219 c⁄° 
mib_¨øy_node
 
	gudp
 = {

220 &
nﬁófs_gë_obje˘_def
,

221 &
nﬁófs_gë_vÆue
,

222 &
nﬁófs_£t_ã°
,

223 &
nﬁófs_£t_vÆue
,

224 
MIB_NODE_AR
,

226 
udp_ids
,

227 
udp_nodes


231 #i‡
LWIP_TCP


234 
mib_li°_roŸnode
 
	gt˝c⁄¡ªe_roŸ
 = {

235 &
nﬁófs_gë_obje˘_def
,

236 &
nﬁófs_gë_vÆue
,

237 &
nﬁófs_£t_ã°
,

238 &
nﬁófs_£t_vÆue
,

239 
MIB_NODE_LR
,

241 
NULL
,

242 
NULL
,

245 c⁄° 
s32_t
 
	gt˝c⁄√¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

246 
mib_node
* c⁄° 
	gt˝c⁄√¡ry_nodes
[5] = {

247 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

248 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

249 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ


251 c⁄° 
mib_¨øy_node
 
	gt˝c⁄√¡ry
 = {

252 &
nﬁófs_gë_obje˘_def
,

253 &
nﬁófs_gë_vÆue
,

254 &
nﬁófs_£t_ã°
,

255 &
nﬁófs_£t_vÆue
,

256 
MIB_NODE_AR
,

258 
t˝c⁄√¡ry_ids
,

259 
t˝c⁄√¡ry_nodes


262 
s32_t
 
	gt˝c⁄¡abÀ_id
 = 1;

263 
mib_node
* 
	gt˝c⁄¡abÀ_node
 = (mib_node* c⁄°)&
t˝c⁄√¡ry
;

264 
mib_øm_¨øy_node
 
	gt˝c⁄¡abÀ
 = {

265 &
nﬁófs_gë_obje˘_def
,

266 &
nﬁófs_gë_vÆue
,

267 &
nﬁófs_£t_ã°
,

268 &
nﬁófs_£t_vÆue
,

269 
MIB_NODE_RA
,

273 &
t˝c⁄¡abÀ_id
,

274 &
t˝c⁄¡abÀ_node


277 c⁄° 
mib_sˇœr_node
 
	gt˝_sˇœr
 = {

278 &
t˝_gë_obje˘_def
,

279 &
t˝_gë_vÆue
,

280 &
nﬁófs_£t_ã°
,

281 &
nﬁófs_£t_vÆue
,

282 
MIB_NODE_SC
,

285 c⁄° 
s32_t
 
	gt˝_ids
[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

286 
mib_node
* c⁄° 
	gt˝_nodes
[15] = {

287 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

288 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

289 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

290 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

291 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

292 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

293 (
mib_node
* c⁄°)&
t˝c⁄¡abÀ
, (mib_node* c⁄°)&
t˝_sˇœr
,

294 (
mib_node
* c⁄°)&
t˝_sˇœr


296 c⁄° 
mib_¨øy_node
 
	gt˝
 = {

297 &
nﬁófs_gë_obje˘_def
,

298 &
nﬁófs_gë_vÆue
,

299 &
nﬁófs_£t_ã°
,

300 &
nﬁófs_£t_vÆue
,

301 
MIB_NODE_AR
,

303 
t˝_ids
,

304 
t˝_nodes


309 c⁄° 
mib_sˇœr_node
 
	gicmp_sˇœr
 = {

310 &
icmp_gë_obje˘_def
,

311 &
icmp_gë_vÆue
,

312 &
nﬁófs_£t_ã°
,

313 &
nﬁófs_£t_vÆue
,

314 
MIB_NODE_SC
,

317 c⁄° 
s32_t
 
	gicmp_ids
[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

318 
mib_node
* c⁄° 
	gicmp_nodes
[26] = {

319 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

320 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

321 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

322 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

323 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

324 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

325 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

326 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

327 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

328 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

329 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

330 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

331 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar

333 c⁄° 
mib_¨øy_node
 
	gicmp
 = {

334 &
nﬁófs_gë_obje˘_def
,

335 &
nﬁófs_gë_vÆue
,

336 &
nﬁófs_£t_ã°
,

337 &
nﬁófs_£t_vÆue
,

338 
MIB_NODE_AR
,

340 
icmp_ids
,

341 
icmp_nodes


345 
mib_li°_roŸnode
 
	gù¡omåì_roŸ
 = {

346 &
nﬁófs_gë_obje˘_def
,

347 &
nﬁófs_gë_vÆue
,

348 &
nﬁófs_£t_ã°
,

349 &
nﬁófs_£t_vÆue
,

350 
MIB_NODE_LR
,

352 
NULL
,

353 
NULL
,

356 c⁄° 
s32_t
 
	gù¡omíåy_ids
[4] = { 1, 2, 3, 4 };

357 
mib_node
* c⁄° 
	gù¡omíåy_nodes
[4] = {

358 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root,

359 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root

361 c⁄° 
mib_¨øy_node
 
	gù¡omíåy
 = {

362 &
nﬁófs_gë_obje˘_def
,

363 &
nﬁófs_gë_vÆue
,

364 &
nﬁófs_£t_ã°
,

365 &
nﬁófs_£t_vÆue
,

366 
MIB_NODE_AR
,

368 
ù¡omíåy_ids
,

369 
ù¡omíåy_nodes


372 
s32_t
 
	gù¡omèbÀ_id
 = 1;

373 
mib_node
* 
	gù¡omèbÀ_node
 = (mib_node* c⁄°)&
ù¡omíåy
;

374 
mib_øm_¨øy_node
 
	gù¡omèbÀ
 = {

375 &
nﬁófs_gë_obje˘_def
,

376 &
nﬁófs_gë_vÆue
,

377 &
nﬁófs_£t_ã°
,

378 &
nﬁófs_£t_vÆue
,

379 
MIB_NODE_RA
,

381 &
ù¡omèbÀ_id
,

382 &
ù¡omèbÀ_node


386 
mib_li°_roŸnode
 
	gùπëªe_roŸ
 = {

387 &
nﬁófs_gë_obje˘_def
,

388 &
nﬁófs_gë_vÆue
,

389 &
nﬁófs_£t_ã°
,

390 &
nﬁófs_£t_vÆue
,

391 
MIB_NODE_LR
,

393 
NULL
,

394 
NULL
,

397 c⁄° 
s32_t
 
	gùπì¡ry_ids
[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };

398 
mib_node
* c⁄° 
	gùπì¡ry_nodes
[13] = {

399 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

400 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

401 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

402 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

403 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

404 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

405 (
mib_node
* c⁄°)&
ùπëªe_roŸ


407 c⁄° 
mib_¨øy_node
 
	gùπì¡ry
 = {

408 &
nﬁófs_gë_obje˘_def
,

409 &
nﬁófs_gë_vÆue
,

410 &
nﬁófs_£t_ã°
,

411 &
nﬁófs_£t_vÆue
,

412 
MIB_NODE_AR
,

414 
ùπì¡ry_ids
,

415 
ùπì¡ry_nodes


418 
s32_t
 
	gùπëabÀ_id
 = 1;

419 
mib_node
* 
	gùπëabÀ_node
 = (mib_node* c⁄°)&
ùπì¡ry
;

420 
mib_øm_¨øy_node
 
	gùπëabÀ
 = {

421 &
nﬁófs_gë_obje˘_def
,

422 &
nﬁófs_gë_vÆue
,

423 &
nﬁófs_£t_ã°
,

424 &
nﬁófs_£t_vÆue
,

425 
MIB_NODE_RA
,

427 &
ùπëabÀ_id
,

428 &
ùπëabÀ_node


432 
mib_li°_roŸnode
 
	gùaddπªe_roŸ
 = {

433 &
nﬁófs_gë_obje˘_def
,

434 &
nﬁófs_gë_vÆue
,

435 &
nﬁófs_£t_ã°
,

436 &
nﬁófs_£t_vÆue
,

437 
MIB_NODE_LR
,

439 
NULL
,

440 
NULL
,

443 c⁄° 
s32_t
 
	gùaddª¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

444 
mib_node
* c⁄° 
	gùaddª¡ry_nodes
[5] = {

445 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

446 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

447 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

448 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

449 (
mib_node
* c⁄°)&
ùaddπªe_roŸ


451 c⁄° 
mib_¨øy_node
 
	gùaddª¡ry
 = {

452 &
nﬁófs_gë_obje˘_def
,

453 &
nﬁófs_gë_vÆue
,

454 &
nﬁófs_£t_ã°
,

455 &
nﬁófs_£t_vÆue
,

456 
MIB_NODE_AR
,

458 
ùaddª¡ry_ids
,

459 
ùaddª¡ry_nodes


462 
s32_t
 
	gùaddπabÀ_id
 = 1;

463 
mib_node
* 
	gùaddπabÀ_node
 = (mib_node* c⁄°)&
ùaddª¡ry
;

464 
mib_øm_¨øy_node
 
	gùaddπabÀ
 = {

465 &
nﬁófs_gë_obje˘_def
,

466 &
nﬁófs_gë_vÆue
,

467 &
nﬁófs_£t_ã°
,

468 &
nﬁófs_£t_vÆue
,

469 
MIB_NODE_RA
,

471 &
ùaddπabÀ_id
,

472 &
ùaddπabÀ_node


476 c⁄° 
mib_sˇœr_node
 
	gù_sˇœr
 = {

477 &
ù_gë_obje˘_def
,

478 &
ù_gë_vÆue
,

479 &
ù_£t_ã°
,

480 &
nﬁófs_£t_vÆue
,

481 
MIB_NODE_SC
,

484 c⁄° 
s32_t
 
	gù_ids
[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

485 
mib_node
* c⁄° 
	gù_nodes
[23] = {

486 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

487 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

488 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

489 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

490 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

491 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

492 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

493 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

494 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

495 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* c⁄°)&
ùaddπabÀ
,

496 (
mib_node
* c⁄°)&
ùπëabÀ
, (mib_node* c⁄°)&
ù¡omèbÀ
,

497 (
mib_node
* c⁄°)&
ù_sˇœr


499 c⁄° 
mib_¨øy_node
 
	gmib2_ù
 = {

500 &
nﬁófs_gë_obje˘_def
,

501 &
nﬁófs_gë_vÆue
,

502 &
nﬁófs_£t_ã°
,

503 &
nﬁófs_£t_vÆue
,

504 
MIB_NODE_AR
,

506 
ù_ids
,

507 
ù_nodes


511 
mib_li°_roŸnode
 
	g¨±ªe_roŸ
 = {

512 &
nﬁófs_gë_obje˘_def
,

513 &
nﬁófs_gë_vÆue
,

514 &
nﬁófs_£t_ã°
,

515 &
nﬁófs_£t_vÆue
,

516 
MIB_NODE_LR
,

518 
NULL
,

519 
NULL
,

522 c⁄° 
s32_t
 
	g©íåy_ids
[3] = { 1, 2, 3 };

523 
mib_node
* c⁄° 
	g©íåy_nodes
[3] = {

524 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

525 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

526 (
mib_node
* c⁄°)&
¨±ªe_roŸ


528 c⁄° 
mib_¨øy_node
 
	g©íåy
 = {

529 &
nﬁófs_gë_obje˘_def
,

530 &
nﬁófs_gë_vÆue
,

531 &
nﬁófs_£t_ã°
,

532 &
nﬁófs_£t_vÆue
,

533 
MIB_NODE_AR
,

535 
©íåy_ids
,

536 
©íåy_nodes


539 c⁄° 
s32_t
 
	g©èbÀ_id
 = 1;

540 
mib_node
* c⁄° 
	g©èbÀ_node
 = (mib_node* c⁄°)&
©íåy
;

541 c⁄° 
mib_¨øy_node
 
	g©èbÀ
 = {

542 &
nﬁófs_gë_obje˘_def
,

543 &
nﬁófs_gë_vÆue
,

544 &
nﬁófs_£t_ã°
,

545 &
nﬁófs_£t_vÆue
,

546 
MIB_NODE_AR
,

548 &
©èbÀ_id
,

549 &
©èbÀ_node


553 
s32_t
 
	g©_id
 = 1;

554 
mib_node
* 
	gmib2_©_node
 = (mib_node* c⁄°)&
©èbÀ
;

555 
mib_øm_¨øy_node
 
	g©
 = {

556 &
nﬁófs_gë_obje˘_def
,

557 &
nﬁófs_gë_vÆue
,

558 &
nﬁófs_£t_ã°
,

559 &
nﬁófs_£t_vÆue
,

560 
MIB_NODE_RA
,

562 &
©_id
,

563 &
mib2_©_node


567 
mib_li°_roŸnode
 
	giÊi°_roŸ
 = {

568 &
i„¡ry_gë_obje˘_def
,

569 &
i„¡ry_gë_vÆue
,

570 #i‡
SNMP_SAFE_REQUESTS


571 &
nﬁófs_£t_ã°
,

572 &
nﬁófs_£t_vÆue
,

574 &
i„¡ry_£t_ã°
,

575 &
i„¡ry_£t_vÆue
,

577 
MIB_NODE_LR
,

579 
NULL
,

580 
NULL
,

583 c⁄° 
s32_t
 
	gi„¡ry_ids
[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };

584 
mib_node
* c⁄° 
	gi„¡ry_nodes
[22] = {

585 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

586 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

587 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

588 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

589 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

590 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

591 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

592 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

593 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

594 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

595 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root

597 c⁄° 
mib_¨øy_node
 
	gi„¡ry
 = {

598 &
nﬁófs_gë_obje˘_def
,

599 &
nﬁófs_gë_vÆue
,

600 &
nﬁófs_£t_ã°
,

601 &
nﬁófs_£t_vÆue
,

602 
MIB_NODE_AR
,

604 
i„¡ry_ids
,

605 
i„¡ry_nodes


608 
s32_t
 
	gi·abÀ_id
 = 1;

609 
mib_node
* 
	gi·abÀ_node
 = (mib_node* c⁄°)&
i„¡ry
;

610 
mib_øm_¨øy_node
 
	gi·abÀ
 = {

611 &
nﬁófs_gë_obje˘_def
,

612 &
nﬁófs_gë_vÆue
,

613 &
nﬁófs_£t_ã°
,

614 &
nﬁófs_£t_vÆue
,

615 
MIB_NODE_RA
,

617 &
i·abÀ_id
,

618 &
i·abÀ_node


622 c⁄° 
mib_sˇœr_node
 
	göãrÁ˚s_sˇœr
 = {

623 &
öãrÁ˚s_gë_obje˘_def
,

624 &
öãrÁ˚s_gë_vÆue
,

625 &
nﬁófs_£t_ã°
,

626 &
nﬁófs_£t_vÆue
,

627 
MIB_NODE_SC
,

630 c⁄° 
s32_t
 
	göãrÁ˚s_ids
[2] = { 1, 2 };

631 
mib_node
* c⁄° 
	göãrÁ˚s_nodes
[2] = {

632 (
mib_node
* c⁄°)&
öãrÁ˚s_sˇœr
, (mib_node* c⁄°)&
i·abÀ


634 c⁄° 
mib_¨øy_node
 
	göãrÁ˚s
 = {

635 &
nﬁófs_gë_obje˘_def
,

636 &
nﬁófs_gë_vÆue
,

637 &
nﬁófs_£t_ã°
,

638 &
nﬁófs_£t_vÆue
,

639 
MIB_NODE_AR
,

641 
öãrÁ˚s_ids
,

642 
öãrÁ˚s_nodes


648 c⁄° 
mib_sˇœr_node
 
	gsys_ãm_sˇœr
 = {

649 &
sy°em_gë_obje˘_def
,

650 &
sy°em_gë_vÆue
,

651 &
sy°em_£t_ã°
,

652 &
sy°em_£t_vÆue
,

653 
MIB_NODE_SC
,

656 c⁄° 
s32_t
 
	gsys_ãm_ids
[7] = { 1, 2, 3, 4, 5, 6, 7 };

657 
mib_node
* c⁄° 
	gsys_ãm_nodes
[7] = {

658 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

659 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

660 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

661 (
mib_node
* c⁄°)&
sys_ãm_sˇœr


664 c⁄° 
mib_¨øy_node
 
	gsys_ãm
 = {

665 &
nﬁófs_gë_obje˘_def
,

666 &
nﬁófs_gë_vÆue
,

667 &
nﬁófs_£t_ã°
,

668 &
nﬁófs_£t_vÆue
,

669 
MIB_NODE_AR
,

671 
sys_ãm_ids
,

672 
sys_ãm_nodes


676 #i‡
LWIP_TCP


677 
	#MIB2_GROUPS
 8

	)

679 
	#MIB2_GROUPS
 7

	)

681 c⁄° 
s32_t
 
	gmib2_ids
[
MIB2_GROUPS
] =

688 #i‡
LWIP_TCP


694 
mib_node
* c⁄° 
	gmib2_nodes
[
MIB2_GROUPS
] = {

695 (
mib_node
* c⁄°)&
sys_ãm
,

696 (
mib_node
* c⁄°)&
öãrÁ˚s
,

697 (
mib_node
* c⁄°)&
©
,

698 (
mib_node
* c⁄°)&
mib2_ù
,

699 (
mib_node
* c⁄°)&
icmp
,

700 #i‡
LWIP_TCP


701 (
mib_node
* c⁄°)&
t˝
,

703 (
mib_node
* c⁄°)&
udp
,

704 (
mib_node
* c⁄°)&
¢mp


707 c⁄° 
mib_¨øy_node
 
	gmib2
 = {

708 &
nﬁófs_gë_obje˘_def
,

709 &
nﬁófs_gë_vÆue
,

710 &
nﬁófs_£t_ã°
,

711 &
nﬁófs_£t_vÆue
,

712 
MIB_NODE_AR
,

713 
MIB2_GROUPS
,

714 
mib2_ids
,

715 
mib2_nodes


719 c⁄° 
s32_t
 
	gmgmt_ids
[1] = { 1 };

720 
mib_node
* c⁄° 
	gmgmt_nodes
[1] = { (mib_node* c⁄°)&
mib2
 };

721 c⁄° 
mib_¨øy_node
 
	gmgmt
 = {

722 &
nﬁófs_gë_obje˘_def
,

723 &
nﬁófs_gë_vÆue
,

724 &
nﬁófs_£t_ã°
,

725 &
nﬁófs_£t_vÆue
,

726 
MIB_NODE_AR
,

728 
mgmt_ids
,

729 
mgmt_nodes


733 #i‡
SNMP_PRIVATE_MIB


734 
s32_t
 
	göã∫ë_ids
[2] = { 2, 4 };

735 
mib_node
* c⁄° 
	göã∫ë_nodes
[2] = { (mib_node* c⁄°)&
mgmt
, (mib_node* c⁄°)&
¥iv©e
 };

736 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

737 &
nﬁófs_gë_obje˘_def
,

738 &
nﬁófs_gë_vÆue
,

739 &
nﬁófs_£t_ã°
,

740 &
nﬁófs_£t_vÆue
,

741 
MIB_NODE_AR
,

743 
öã∫ë_ids
,

744 
öã∫ë_nodes


747 c⁄° 
s32_t
 
	göã∫ë_ids
[1] = { 2 };

748 
mib_node
* c⁄° 
	göã∫ë_nodes
[1] = { (mib_node* c⁄°)&
mgmt
 };

749 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

750 &
nﬁófs_gë_obje˘_def
,

751 &
nﬁófs_gë_vÆue
,

752 &
nﬁófs_£t_ã°
,

753 &
nﬁófs_£t_vÆue
,

754 
MIB_NODE_AR
,

756 
öã∫ë_ids
,

757 
öã∫ë_nodes


762 
¢mp_obj_id
 
	gsysobjid
 = {
SNMP_SYSOBJID_LEN
, 
SNMP_SYSOBJID
};

764 
¢mp_obj_id
 
	g¢mpgΩ_id
 = {7,{1,3,6,1,2,1,11}};

766 c⁄° 
s32_t
 
	gsys£rvi˚s
 = 
SNMP_SYSSERVICES
;

769 c⁄° 
u8_t
 
	gsysdes¸_Àn_deÁu…
 = 4;

770 c⁄° 
u8_t
 
	gsysdes¸_deÁu…
[] = "lwIP";

771 
u8_t
* 
	gsysdes¸_Àn_±r
 = (u8_t*)&
sysdes¸_Àn_deÁu…
;

772 
u8_t
* 
	gsysdes¸_±r
 = (u8_t*)&
sysdes¸_deÁu…
[0];

774 c⁄° 
u8_t
 
	gsysc⁄è˘_Àn_deÁu…
 = 0;

775 c⁄° 
u8_t
 
	gsysc⁄è˘_deÁu…
[] = "";

776 
u8_t
* 
	gsysc⁄è˘_Àn_±r
 = (u8_t*)&
sysc⁄è˘_Àn_deÁu…
;

777 
u8_t
* 
	gsysc⁄è˘_±r
 = (u8_t*)&
sysc⁄è˘_deÁu…
[0];

779 c⁄° 
u8_t
 
	gsy¢ame_Àn_deÁu…
 = 8;

780 c⁄° 
u8_t
 
	gsy¢ame_deÁu…
[] = "FQDN-unk";

781 
u8_t
* 
	gsy¢ame_Àn_±r
 = (u8_t*)&
sy¢ame_Àn_deÁu…
;

782 
u8_t
* 
	gsy¢ame_±r
 = (u8_t*)&
sy¢ame_deÁu…
[0];

784 c⁄° 
u8_t
 
	gsy¶oˇti⁄_Àn_deÁu…
 = 0;

785 c⁄° 
u8_t
 
	gsy¶oˇti⁄_deÁu…
[] = "";

786 
u8_t
* 
	gsy¶oˇti⁄_Àn_±r
 = (u8_t*)&
sy¶oˇti⁄_Àn_deÁu…
;

787 
u8_t
* 
	gsy¶oˇti⁄_±r
 = (u8_t*)&
sy¶oˇti⁄_deÁu…
[0];

789 c⁄° 
u8_t
 
	g¢m≥«bÀauthíå≠s_deÁu…
 = 2;

790 
u8_t
* 
	g¢m≥«bÀauthíå≠s_±r
 = (u8_t*)&
¢m≥«bÀauthíå≠s_deÁu…
;

793 c⁄° 
¢mp_obj_id
 
	gif•ecific
 = {2, {0, 0}};

795 c⁄° 
¢mp_obj_id
 
	gùrouãöfo
 = {2, {0, 0}};

800 
u32_t
 
	gsysu±ime
 = 0;

803 
u32_t
 
	gùöª˚ives
 = 0,

804 
	gùöhdªº‹s
 = 0,

805 
	gùöaddªº‹s
 = 0,

806 
	gùf‹wd©agøms
 = 0,

807 
	gùöunknow≈rŸos
 = 0,

808 
	gùödisˇrds
 = 0,

809 
	gùödñivîs
 = 0,

810 
	gùouåeque°s
 = 0,

811 
	gùoutdisˇrds
 = 0,

812 
	gùouä‹ouãs
 = 0,

813 
	gùªasmªqds
 = 0,

814 
	gùªasmoks
 = 0,

815 
	gùªasmÁûs
 = 0,

816 
	gù‰agoks
 = 0,

817 
	gù‰agÁûs
 = 0,

818 
	gù‰ag¸óãs
 = 0,

819 
	gùroutögdisˇrds
 = 0;

821 
u32_t
 
	gicmpömsgs
 = 0,

822 
	gicmpöîr‹s
 = 0,

823 
	gicmpöde°uƒóchs
 = 0,

824 
	gicmpötimìxcds
 = 0,

825 
	gicmpö∑rm¥obs
 = 0,

826 
	gicmpö§cquíchs
 = 0,

827 
	gicmpöªdúe˘s
 = 0,

828 
	gicmpöechos
 = 0,

829 
	gicmpöech‹ïs
 = 0,

830 
	gicmpötime°amps
 = 0,

831 
	gicmpötime°am¥ïs
 = 0,

832 
	gicmpöaddrmasks
 = 0,

833 
	gicmpöaddrmaskªps
 = 0,

834 
	gicmpoutmsgs
 = 0,

835 
	gicmpouãº‹s
 = 0,

836 
	gicmpoutde°uƒóchs
 = 0,

837 
	gicmpouâimìxcds
 = 0,

838 
	gicmpouç¨m¥obs
 = 0,

839 
	gicmpout§cquíchs
 = 0,

840 
	gicmpouåedúe˘s
 = 0,

841 
	gicmpouãchos
 = 0,

842 
	gicmpouãch‹ïs
 = 0,

843 
	gicmpouâime°amps
 = 0,

844 
	gicmpouâime°am¥ïs
 = 0,

845 
	gicmpouèddrmasks
 = 0,

846 
	gicmpouèddrmaskªps
 = 0;

848 
u32_t
 
	gt˝a˘ive›ís
 = 0,

849 
	gt˝∑ssive›ís
 = 0,

850 
	gt˝©ãm±Áûs
 = 0,

851 
	gt˝e°abª£ts
 = 0,

852 
	gt˝ö£gs
 = 0,

853 
	gt˝out£gs
 = 0,

854 
	gt˝ªå™s£gs
 = 0,

855 
	gt˝öîrs
 = 0,

856 
	gt˝ouå°s
 = 0;

858 
u32_t
 
	gudpöd©agøms
 = 0,

859 
	gud≤›‹ts
 = 0,

860 
	gudpöîr‹s
 = 0,

861 
	gudpoutd©agøms
 = 0;

863 
u32_t
 
	g¢mpöpkts
 = 0,

864 
	g¢mpouçkts
 = 0,

865 
	g¢mpöbadvîsi⁄s
 = 0,

866 
	g¢mpöbadcommunôy«mes
 = 0,

867 
	g¢mpöbadcommunôyu£s
 = 0,

868 
	g¢mpöa¢∑r£îrs
 = 0,

869 
	g¢mpötoobigs
 = 0,

870 
	g¢mpönosuch«mes
 = 0,

871 
	g¢mpöbadvÆues
 = 0,

872 
	g¢mpöªad⁄lys
 = 0,

873 
	g¢mpögíîrs
 = 0,

874 
	g¢mpötŸÆªqv¨s
 = 0,

875 
	g¢mpötŸÆ£tv¨s
 = 0,

876 
	g¢mpögëªque°s
 = 0,

877 
	g¢mpögë√xts
 = 0,

878 
	g¢mpö£åeque°s
 = 0,

879 
	g¢mpögëª•⁄£s
 = 0,

880 
	g¢mpöå≠s
 = 0,

881 
	g¢mpouâoobigs
 = 0,

882 
	g¢mpouäosuch«mes
 = 0,

883 
	g¢mpoutbadvÆues
 = 0,

884 
	g¢mpoutgíîrs
 = 0,

885 
	g¢mpoutgëªque°s
 = 0,

886 
	g¢mpoutgë√xts
 = 0,

887 
	g¢mpout£åeque°s
 = 0,

888 
	g¢mpoutgëª•⁄£s
 = 0,

889 
	g¢mpouâøps
 = 0;

901 
	$oc°∫˝y
(
u8_t
 *
d°
, u8_à*
§c
, u8_à
n
)

903 
n
 > 0)

905 
n
--;

906 *
d°
++ = *
§c
++;

908 
	}
}

917 
	$obje˘idn˝y
(
s32_t
 *
d°
, s32_à*
§c
, 
u8_t
 
n
)

919 
n
 > 0)

921 
n
--;

922 *
d°
++ = *
§c
++;

924 
	}
}

932 
	$¢mp_£t_sysde§
(
u8_t
 *
°r
, u8_à*
Àn
)

934 i‡(
°r
 !
NULL
)

936 
sysdes¸_±r
 = 
°r
;

937 
sysdes¸_Àn_±r
 = 
Àn
;

939 
	}
}

941 
	$¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
)

943 *
oid
 = &
sysobjid
;

944 
	}
}

951 
	$¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
)

953 
sysobjid
 = *
oid
;

954 
	}
}

960 
	$¢mp_öc_sysu±ime
()

962 
sysu±ime
++;

963 
	}
}

965 
	$¢mp_add_sysu±ime
(
u32_t
 
vÆue
)

967 
sysu±ime
+=
vÆue
;

968 
	}
}

970 
	$¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
)

972 
	`SNMP_GET_SYSUPTIME
(
sysu±ime
);

973 *
vÆue
 = 
sysu±ime
;

974 
	}
}

983 
	$¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

985 i‡(
oc°r
 !
NULL
)

987 
sysc⁄è˘_±r
 = 
oc°r
;

988 
sysc⁄è˘_Àn_±r
 = 
oc°æí
;

990 
	}
}

999 
	$¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1001 i‡(
oc°r
 !
NULL
)

1003 
sy¢ame_±r
 = 
oc°r
;

1004 
sy¢ame_Àn_±r
 = 
oc°æí
;

1006 
	}
}

1015 
	$¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1017 i‡(
oc°r
 !
NULL
)

1019 
sy¶oˇti⁄_±r
 = 
oc°r
;

1020 
sy¶oˇti⁄_Àn_±r
 = 
oc°æí
;

1022 
	}
}

1025 
	$¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1027 
ni
->
iföo˘ës
 +
vÆue
;

1028 
	}
}

1030 
	$¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
)

1032 (
ni
->
iföuˇ°pkts
)++;

1033 
	}
}

1035 
	$¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
)

1037 (
ni
->
ifönuˇ°pkts
)++;

1038 
	}
}

1040 
	$¢mp_öc_ifödisˇrds
(
√tif
 *
ni
)

1042 (
ni
->
ifödisˇrds
)++;

1043 
	}
}

1045 
	$¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1047 
ni
->
ifouto˘ës
 +
vÆue
;

1048 
	}
}

1050 
	$¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
)

1052 (
ni
->
ifoutuˇ°pkts
)++;

1053 
	}
}

1055 
	$¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
)

1057 (
ni
->
ifouäuˇ°pkts
)++;

1058 
	}
}

1060 
	$¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
)

1062 (
ni
->
ifoutdisˇrds
)++;

1063 
	}
}

1065 
	$¢mp_öc_iÊi°
()

1067 
mib_li°_node
 *
if_node
 = 
NULL
;

1069 
	`¢mp_mib_node_ö£π
(&
iÊi°_roŸ
, iÊi°_roŸ.
cou¡
 + 1, &
if_node
);

1071 
i·abÀ
.
maxÀngth
 = 1;

1072 
	}
}

1074 
	$¢mp_dec_iÊi°
()

1076 
	`¢mp_mib_node_dñëe
(&
iÊi°_roŸ
, iÊi°_roŸ.
èû
);

1078 if(
iÊi°_roŸ
.
cou¡
 =0Ë
i·abÀ
.
maxÀngth
 = 0;

1079 
	}
}

1085 
	$¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1087 
mib_li°_roŸnode
 *
©_∫
;

1088 
mib_li°_node
 *
©_node
;

1089 
ù_addr
 
hù
;

1090 
s32_t
 
¨pidx
[5];

1091 
u8_t
 
Àvñ
, 
åì
;

1093 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1094 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1095 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1096 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1098 
åì
 = 0;Åree < 2;Åree++)

1100 i‡(
åì
 == 0)

1102 
©_∫
 = &
¨±ªe_roŸ
;

1106 
©_∫
 = &
ù¡omåì_roŸ
;

1108 
Àvñ
 = 0;Üevel < 5;Üevel++)

1110 
©_node
 = 
NULL
;

1111 
	`¢mp_mib_node_ö£π
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_node
);

1112 i‡((
Àvñ
 !4Ë&& (
©_node
 !
NULL
))

1114 i‡(
©_node
->
≈å
 =
NULL
)

1116 
©_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1117 
©_node
->
≈å
 = (
mib_node
*)
©_∫
;

1118 i‡(
©_∫
 !
NULL
)

1120 i‡(
Àvñ
 == 3)

1122 i‡(
åì
 == 0)

1124 
©_∫
->
gë_obje˘_def
 = 
©íåy_gë_obje˘_def
;

1125 
©_∫
->
gë_vÆue
 = 
©íåy_gë_vÆue
;

1129 
©_∫
->
gë_obje˘_def
 = 
ù_¡omíåy_gë_obje˘_def
;

1130 
©_∫
->
gë_vÆue
 = 
ù_¡omíåy_gë_vÆue
;

1132 
©_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1133 
©_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1139 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_arpidx_tree() insert failed, mem full"));

1145 
©_∫
 = (
mib_li°_roŸnode
*)
©_node
->
≈å
;

1151 
©
.
maxÀngth
 = 1;

1152 
ù¡omèbÀ
.
maxÀngth
 = 1;

1153 
	}
}

1159 
	$¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1161 
mib_li°_roŸnode
 *
©_∫
, *
√xt
, *
dñ_∫
[5];

1162 
mib_li°_node
 *
©_n
, *
dñ_n
[5];

1163 
ù_addr
 
hù
;

1164 
s32_t
 
¨pidx
[5];

1165 
u8_t
 
fc
, 
åì
, 
Àvñ
, 
dñ_˙t
;

1167 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1168 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1169 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1171 
åì
 = 0;Åree < 2;Åree++)

1174 i‡(
åì
 == 0)

1176 
©_∫
 = &
¨±ªe_roŸ
;

1180 
©_∫
 = &
ù¡omåì_roŸ
;

1182 
Àvñ
 = 0;

1183 
dñ_˙t
 = 0;

1184 (
Àvñ
 < 5Ë&& (
©_∫
 !
NULL
))

1186 
fc
 = 
	`¢mp_mib_node_föd
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_n
);

1187 i‡(
fc
 == 0)

1190 
dñ_˙t
 = 0;

1191 
©_∫
 = 
NULL
;

1193 i‡(
fc
 == 1)

1195 
dñ_∫
[
dñ_˙t
] = 
©_∫
;

1196 
dñ_n
[
dñ_˙t
] = 
©_n
;

1197 
dñ_˙t
++;

1198 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1200 i‡(
fc
 == 2)

1203 
dñ_˙t
 = 0;

1204 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1206 
Àvñ
++;

1209 
dñ_˙t
 > 0)

1211 
dñ_˙t
--;

1213 
©_∫
 = 
dñ_∫
[
dñ_˙t
];

1214 
©_n
 = 
dñ_n
[
dñ_˙t
];

1216 
√xt
 = 
	`¢mp_mib_node_dñëe
(
©_∫
, 
©_n
);

1217 i‡(
√xt
 !
NULL
)

1219 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1220 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1225 if(
¨±ªe_roŸ
.
cou¡
 =0Ë
©
.
maxÀngth
 = 0;

1226 if(
ù¡omåì_roŸ
.
cou¡
 =0Ë
ù¡omèbÀ
.
maxÀngth
 = 0;

1227 
	}
}

1229 
	$¢mp_öc_ùöª˚ives
()

1231 
ùöª˚ives
++;

1232 
	}
}

1234 
	$¢mp_öc_ùöhdªº‹s
()

1236 
ùöhdªº‹s
++;

1237 
	}
}

1239 
	$¢mp_öc_ùöaddªº‹s
()

1241 
ùöaddªº‹s
++;

1242 
	}
}

1244 
	$¢mp_öc_ùf‹wd©agøms
()

1246 
ùf‹wd©agøms
++;

1247 
	}
}

1249 
	$¢mp_öc_ùöunknow≈rŸos
()

1251 
ùöunknow≈rŸos
++;

1252 
	}
}

1254 
	$¢mp_öc_ùödisˇrds
()

1256 
ùödisˇrds
++;

1257 
	}
}

1259 
	$¢mp_öc_ùödñivîs
()

1261 
ùödñivîs
++;

1262 
	}
}

1264 
	$¢mp_öc_ùouåeque°s
()

1266 
ùouåeque°s
++;

1267 
	}
}

1269 
	$¢mp_öc_ùoutdisˇrds
()

1271 
ùoutdisˇrds
++;

1272 
	}
}

1274 
	$¢mp_öc_ùouä‹ouãs
()

1276 
ùouä‹ouãs
++;

1277 
	}
}

1279 
	$¢mp_öc_ùªasmªqds
()

1281 
ùªasmªqds
++;

1282 
	}
}

1284 
	$¢mp_öc_ùªasmoks
()

1286 
ùªasmoks
++;

1287 
	}
}

1289 
	$¢mp_öc_ùªasmÁûs
()

1291 
ùªasmÁûs
++;

1292 
	}
}

1294 
	$¢mp_öc_ù‰agoks
()

1296 
ù‰agoks
++;

1297 
	}
}

1299 
	$¢mp_öc_ù‰agÁûs
()

1301 
ù‰agÁûs
++;

1302 
	}
}

1304 
	$¢mp_öc_ù‰ag¸óãs
()

1306 
ù‰ag¸óãs
++;

1307 
	}
}

1309 
	$¢mp_öc_ùroutögdisˇrds
()

1311 
ùroutögdisˇrds
++;

1312 
	}
}

1318 
	$¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
)

1320 
mib_li°_roŸnode
 *
ùa_∫
;

1321 
mib_li°_node
 *
ùa_node
;

1322 
ù_addr
 
ù
;

1323 
s32_t
 
ùaddridx
[4];

1324 
u8_t
 
Àvñ
;

1326 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1327 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1328 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1330 
Àvñ
 = 0;

1331 
ùa_∫
 = &
ùaddπªe_roŸ
;

1332 
Àvñ
 < 4)

1334 
ùa_node
 = 
NULL
;

1335 
	`¢mp_mib_node_ö£π
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_node
);

1336 i‡((
Àvñ
 !3Ë&& (
ùa_node
 !
NULL
))

1338 i‡(
ùa_node
->
≈å
 =
NULL
)

1340 
ùa_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1341 
ùa_node
->
≈å
 = (
mib_node
*)
ùa_∫
;

1342 i‡(
ùa_∫
 !
NULL
)

1344 i‡(
Àvñ
 == 2)

1346 
ùa_∫
->
gë_obje˘_def
 = 
ù_addª¡ry_gë_obje˘_def
;

1347 
ùa_∫
->
gë_vÆue
 = 
ù_addª¡ry_gë_vÆue
;

1348 
ùa_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1349 
ùa_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1355 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_ipaddridx_tree() insert failed, mem full"));

1361 
ùa_∫
 = (
mib_li°_roŸnode
*)
ùa_node
->
≈å
;

1364 
Àvñ
++;

1367 
ùaddπabÀ
.
maxÀngth
 = 1;

1368 
	}
}

1374 
	$¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
)

1376 
mib_li°_roŸnode
 *
ùa_∫
, *
√xt
, *
dñ_∫
[4];

1377 
mib_li°_node
 *
ùa_n
, *
dñ_n
[4];

1378 
ù_addr
 
ù
;

1379 
s32_t
 
ùaddridx
[4];

1380 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1382 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1383 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1384 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1387 
Àvñ
 = 0;

1388 
dñ_˙t
 = 0;

1389 
ùa_∫
 = &
ùaddπªe_roŸ
;

1390 (
Àvñ
 < 4Ë&& (
ùa_∫
 !
NULL
))

1392 
fc
 = 
	`¢mp_mib_node_föd
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_n
);

1393 i‡(
fc
 == 0)

1396 
dñ_˙t
 = 0;

1397 
ùa_∫
 = 
NULL
;

1399 i‡(
fc
 == 1)

1401 
dñ_∫
[
dñ_˙t
] = 
ùa_∫
;

1402 
dñ_n
[
dñ_˙t
] = 
ùa_n
;

1403 
dñ_˙t
++;

1404 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1406 i‡(
fc
 == 2)

1409 
dñ_˙t
 = 0;

1410 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1412 
Àvñ
++;

1415 
dñ_˙t
 > 0)

1417 
dñ_˙t
--;

1419 
ùa_∫
 = 
dñ_∫
[
dñ_˙t
];

1420 
ùa_n
 = 
dñ_n
[
dñ_˙t
];

1422 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùa_∫
, 
ùa_n
);

1423 i‡(
√xt
 !
NULL
)

1425 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1426 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1430 i‡(
ùaddπªe_roŸ
.
cou¡
 =0Ë
ùaddπabÀ
.
maxÀngth
 = 0;

1431 
	}
}

1443 
	$¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1445 
u8_t
 
ö£π
 = 0;

1446 
ù_addr
 
d°
;

1448 i‡(
dÊt
 != 0)

1451 
d°
.
addr
 = 0;

1452 
ö£π
 = 1;

1457 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1459 i‡(
d°
.
addr
 !0Ë
ö£π
 = 1;

1461 i‡(
ö£π
)

1463 
mib_li°_roŸnode
 *
ùπe_∫
;

1464 
mib_li°_node
 *
ùπe_node
;

1465 
s32_t
 
ùπeidx
[4];

1466 
u8_t
 
Àvñ
;

1468 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1469 
Àvñ
 = 0;

1470 
ùπe_∫
 = &
ùπëªe_roŸ
;

1471 
Àvñ
 < 4)

1473 
ùπe_node
 = 
NULL
;

1474 
	`¢mp_mib_node_ö£π
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_node
);

1475 i‡((
Àvñ
 !3Ë&& (
ùπe_node
 !
NULL
))

1477 i‡(
ùπe_node
->
≈å
 =
NULL
)

1479 
ùπe_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1480 
ùπe_node
->
≈å
 = (
mib_node
*)
ùπe_∫
;

1481 i‡(
ùπe_∫
 !
NULL
)

1483 i‡(
Àvñ
 == 2)

1485 
ùπe_∫
->
gë_obje˘_def
 = 
ù_πì¡ry_gë_obje˘_def
;

1486 
ùπe_∫
->
gë_vÆue
 = 
ù_πì¡ry_gë_vÆue
;

1487 
ùπe_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1488 
ùπe_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1494 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_iprteidx_tree() insert failed, mem full"));

1500 
ùπe_∫
 = (
mib_li°_roŸnode
*)
ùπe_node
->
≈å
;

1503 
Àvñ
++;

1507 
ùπëabÀ
.
maxÀngth
 = 1;

1508 
	}
}

1518 
	$¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1520 
u8_t
 
dñëe
 = 0;

1521 
ù_addr
 
d°
;

1523 i‡(
dÊt
 != 0)

1526 
d°
.
addr
 = 0;

1527 
dñëe
 = 1;

1532 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1534 i‡(
d°
.
addr
 !0Ë
dñëe
 = 1;

1536 i‡(
dñëe
)

1538 
mib_li°_roŸnode
 *
ùπe_∫
, *
√xt
, *
dñ_∫
[4];

1539 
mib_li°_node
 *
ùπe_n
, *
dñ_n
[4];

1540 
s32_t
 
ùπeidx
[4];

1541 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1543 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1545 
Àvñ
 = 0;

1546 
dñ_˙t
 = 0;

1547 
ùπe_∫
 = &
ùπëªe_roŸ
;

1548 (
Àvñ
 < 4Ë&& (
ùπe_∫
 !
NULL
))

1550 
fc
 = 
	`¢mp_mib_node_föd
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_n
);

1551 i‡(
fc
 == 0)

1554 
dñ_˙t
 = 0;

1555 
ùπe_∫
 = 
NULL
;

1557 i‡(
fc
 == 1)

1559 
dñ_∫
[
dñ_˙t
] = 
ùπe_∫
;

1560 
dñ_n
[
dñ_˙t
] = 
ùπe_n
;

1561 
dñ_˙t
++;

1562 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1564 i‡(
fc
 == 2)

1567 
dñ_˙t
 = 0;

1568 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1570 
Àvñ
++;

1573 
dñ_˙t
 > 0)

1575 
dñ_˙t
--;

1577 
ùπe_∫
 = 
dñ_∫
[
dñ_˙t
];

1578 
ùπe_n
 = 
dñ_n
[
dñ_˙t
];

1580 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùπe_∫
, 
ùπe_n
);

1581 i‡(
√xt
 !
NULL
)

1583 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1584 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1589 i‡(
ùπëªe_roŸ
.
cou¡
 =0Ë
ùπëabÀ
.
maxÀngth
 = 0;

1590 
	}
}

1593 
	$¢mp_öc_icmpömsgs
()

1595 
icmpömsgs
++;

1596 
	}
}

1598 
	$¢mp_öc_icmpöîr‹s
()

1600 
icmpöîr‹s
++;

1601 
	}
}

1603 
	$¢mp_öc_icmpöde°uƒóchs
()

1605 
icmpöde°uƒóchs
++;

1606 
	}
}

1608 
	$¢mp_öc_icmpötimìxcds
()

1610 
icmpötimìxcds
++;

1611 
	}
}

1613 
	$¢mp_öc_icmpö∑rm¥obs
()

1615 
icmpö∑rm¥obs
++;

1616 
	}
}

1618 
	$¢mp_öc_icmpö§cquíchs
()

1620 
icmpö§cquíchs
++;

1621 
	}
}

1623 
	$¢mp_öc_icmpöªdúe˘s
()

1625 
icmpöªdúe˘s
++;

1626 
	}
}

1628 
	$¢mp_öc_icmpöechos
()

1630 
icmpöechos
++;

1631 
	}
}

1633 
	$¢mp_öc_icmpöech‹ïs
()

1635 
icmpöech‹ïs
++;

1636 
	}
}

1638 
	$¢mp_öc_icmpötime°amps
()

1640 
icmpötime°amps
++;

1641 
	}
}

1643 
	$¢mp_öc_icmpötime°am¥ïs
()

1645 
icmpötime°am¥ïs
++;

1646 
	}
}

1648 
	$¢mp_öc_icmpöaddrmasks
()

1650 
icmpöaddrmasks
++;

1651 
	}
}

1653 
	$¢mp_öc_icmpöaddrmaskªps
()

1655 
icmpöaddrmaskªps
++;

1656 
	}
}

1658 
	$¢mp_öc_icmpoutmsgs
()

1660 
icmpoutmsgs
++;

1661 
	}
}

1663 
	$¢mp_öc_icmpouãº‹s
()

1665 
icmpouãº‹s
++;

1666 
	}
}

1668 
	$¢mp_öc_icmpoutde°uƒóchs
()

1670 
icmpoutde°uƒóchs
++;

1671 
	}
}

1673 
	$¢mp_öc_icmpouâimìxcds
()

1675 
icmpouâimìxcds
++;

1676 
	}
}

1678 
	$¢mp_öc_icmpouç¨m¥obs
()

1680 
icmpouç¨m¥obs
++;

1681 
	}
}

1683 
	$¢mp_öc_icmpout§cquíchs
()

1685 
icmpout§cquíchs
++;

1686 
	}
}

1688 
	$¢mp_öc_icmpouåedúe˘s
()

1690 
icmpouåedúe˘s
++;

1691 
	}
}

1693 
	$¢mp_öc_icmpouãchos
()

1695 
icmpouãchos
++;

1696 
	}
}

1698 
	$¢mp_öc_icmpouãch‹ïs
()

1700 
icmpouãch‹ïs
++;

1701 
	}
}

1703 
	$¢mp_öc_icmpouâime°amps
()

1705 
icmpouâime°amps
++;

1706 
	}
}

1708 
	$¢mp_öc_icmpouâime°am¥ïs
()

1710 
icmpouâime°am¥ïs
++;

1711 
	}
}

1713 
	$¢mp_öc_icmpouèddrmasks
()

1715 
icmpouèddrmasks
++;

1716 
	}
}

1718 
	$¢mp_öc_icmpouèddrmaskªps
()

1720 
icmpouèddrmaskªps
++;

1721 
	}
}

1723 
	$¢mp_öc_t˝a˘ive›ís
()

1725 
t˝a˘ive›ís
++;

1726 
	}
}

1728 
	$¢mp_öc_t˝∑ssive›ís
()

1730 
t˝∑ssive›ís
++;

1731 
	}
}

1733 
	$¢mp_öc_t˝©ãm±Áûs
()

1735 
t˝©ãm±Áûs
++;

1736 
	}
}

1738 
	$¢mp_öc_t˝e°abª£ts
()

1740 
t˝e°abª£ts
++;

1741 
	}
}

1743 
	$¢mp_öc_t˝ö£gs
()

1745 
t˝ö£gs
++;

1746 
	}
}

1748 
	$¢mp_öc_t˝out£gs
()

1750 
t˝out£gs
++;

1751 
	}
}

1753 
	$¢mp_öc_t˝ªå™s£gs
()

1755 
t˝ªå™s£gs
++;

1756 
	}
}

1758 
	$¢mp_öc_t˝öîrs
()

1760 
t˝öîrs
++;

1761 
	}
}

1763 
	$¢mp_öc_t˝ouå°s
()

1765 
t˝ouå°s
++;

1766 
	}
}

1768 
	$¢mp_öc_udpöd©agøms
()

1770 
udpöd©agøms
++;

1771 
	}
}

1773 
	$¢mp_öc_ud≤›‹ts
()

1775 
ud≤›‹ts
++;

1776 
	}
}

1778 
	$¢mp_öc_udpöîr‹s
()

1780 
udpöîr‹s
++;

1781 
	}
}

1783 
	$¢mp_öc_udpoutd©agøms
()

1785 
udpoutd©agøms
++;

1786 
	}
}

1792 
	$¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
)

1794 
mib_li°_roŸnode
 *
udp_∫
;

1795 
mib_li°_node
 *
udp_node
;

1796 
ù_addr
 
ù
;

1797 
s32_t
 
udpidx
[5];

1798 
u8_t
 
Àvñ
;

1800 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1801 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1802 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1803 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1805 
udp_∫
 = &
udp_roŸ
;

1806 
Àvñ
 = 0;Üevel < 5;Üevel++)

1808 
udp_node
 = 
NULL
;

1809 
	`¢mp_mib_node_ö£π
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_node
);

1810 i‡((
Àvñ
 !4Ë&& (
udp_node
 !
NULL
))

1812 i‡(
udp_node
->
≈å
 =
NULL
)

1814 
udp_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1815 
udp_node
->
≈å
 = (
mib_node
*)
udp_∫
;

1816 i‡(
udp_∫
 !
NULL
)

1818 i‡(
Àvñ
 == 3)

1820 
udp_∫
->
gë_obje˘_def
 = 
ud≥¡ry_gë_obje˘_def
;

1821 
udp_∫
->
gë_vÆue
 = 
ud≥¡ry_gë_vÆue
;

1822 
udp_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1823 
udp_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1829 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_udpidx_tree() insert failed, mem full"));

1835 
udp_∫
 = (
mib_li°_roŸnode
*)
udp_node
->
≈å
;

1839 
ud±abÀ
.
maxÀngth
 = 1;

1840 
	}
}

1846 
	$¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
)

1848 
mib_li°_roŸnode
 *
udp_∫
, *
√xt
, *
dñ_∫
[5];

1849 
mib_li°_node
 *
udp_n
, *
dñ_n
[5];

1850 
ù_addr
 
ù
;

1851 
s32_t
 
udpidx
[5];

1852 
u8_t
 
bödögs
, 
fc
, 
Àvñ
, 
dñ_˙t
;

1854 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1855 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1856 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1857 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1861 
bödögs
 = 0;

1862 
pcb
 = 
udp_pcbs
;

1863 (
pcb
 !
NULL
))

1865 i‡((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

1866 (
pcb
->
loˇl_p‹t
 =
udpidx
[4]))

1868 
bödögs
++;

1870 
pcb
 =Öcb->
√xt
;

1872 i‡(
bödögs
 == 1)

1876 
Àvñ
 = 0;

1877 
dñ_˙t
 = 0;

1878 
udp_∫
 = &
udp_roŸ
;

1879 (
Àvñ
 < 5Ë&& (
udp_∫
 !
NULL
))

1881 
fc
 = 
	`¢mp_mib_node_föd
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_n
);

1882 i‡(
fc
 == 0)

1885 
dñ_˙t
 = 0;

1886 
udp_∫
 = 
NULL
;

1888 i‡(
fc
 == 1)

1890 
dñ_∫
[
dñ_˙t
] = 
udp_∫
;

1891 
dñ_n
[
dñ_˙t
] = 
udp_n
;

1892 
dñ_˙t
++;

1893 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1895 i‡(
fc
 == 2)

1898 
dñ_˙t
 = 0;

1899 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1901 
Àvñ
++;

1904 
dñ_˙t
 > 0)

1906 
dñ_˙t
--;

1908 
udp_∫
 = 
dñ_∫
[
dñ_˙t
];

1909 
udp_n
 = 
dñ_n
[
dñ_˙t
];

1911 
√xt
 = 
	`¢mp_mib_node_dñëe
(
udp_∫
, 
udp_n
);

1912 i‡(
√xt
 !
NULL
)

1914 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1915 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1920 i‡(
udp_roŸ
.
cou¡
 =0Ë
ud±abÀ
.
maxÀngth
 = 0;

1921 
	}
}

1924 
	$¢mp_öc_¢mpöpkts
()

1926 
¢mpöpkts
++;

1927 
	}
}

1929 
	$¢mp_öc_¢mpouçkts
()

1931 
¢mpouçkts
++;

1932 
	}
}

1934 
	$¢mp_öc_¢mpöbadvîsi⁄s
()

1936 
¢mpöbadvîsi⁄s
++;

1937 
	}
}

1939 
	$¢mp_öc_¢mpöbadcommunôy«mes
()

1941 
¢mpöbadcommunôy«mes
++;

1942 
	}
}

1944 
	$¢mp_öc_¢mpöbadcommunôyu£s
()

1946 
¢mpöbadcommunôyu£s
++;

1947 
	}
}

1949 
	$¢mp_öc_¢mpöa¢∑r£îrs
()

1951 
¢mpöa¢∑r£îrs
++;

1952 
	}
}

1954 
	$¢mp_öc_¢mpötoobigs
()

1956 
¢mpötoobigs
++;

1957 
	}
}

1959 
	$¢mp_öc_¢mpönosuch«mes
()

1961 
¢mpönosuch«mes
++;

1962 
	}
}

1964 
	$¢mp_öc_¢mpöbadvÆues
()

1966 
¢mpöbadvÆues
++;

1967 
	}
}

1969 
	$¢mp_öc_¢mpöªad⁄lys
()

1971 
¢mpöªad⁄lys
++;

1972 
	}
}

1974 
	$¢mp_öc_¢mpögíîrs
()

1976 
¢mpögíîrs
++;

1977 
	}
}

1979 
	$¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
)

1981 
¢mpötŸÆªqv¨s
 +
vÆue
;

1982 
	}
}

1984 
	$¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
)

1986 
¢mpötŸÆ£tv¨s
 +
vÆue
;

1987 
	}
}

1989 
	$¢mp_öc_¢mpögëªque°s
()

1991 
¢mpögëªque°s
++;

1992 
	}
}

1994 
	$¢mp_öc_¢mpögë√xts
()

1996 
¢mpögë√xts
++;

1997 
	}
}

1999 
	$¢mp_öc_¢mpö£åeque°s
()

2001 
¢mpö£åeque°s
++;

2002 
	}
}

2004 
	$¢mp_öc_¢mpögëª•⁄£s
()

2006 
¢mpögëª•⁄£s
++;

2007 
	}
}

2009 
	$¢mp_öc_¢mpöå≠s
()

2011 
¢mpöå≠s
++;

2012 
	}
}

2014 
	$¢mp_öc_¢mpouâoobigs
()

2016 
¢mpouâoobigs
++;

2017 
	}
}

2019 
	$¢mp_öc_¢mpouäosuch«mes
()

2021 
¢mpouäosuch«mes
++;

2022 
	}
}

2024 
	$¢mp_öc_¢mpoutbadvÆues
()

2026 
¢mpoutbadvÆues
++;

2027 
	}
}

2029 
	$¢mp_öc_¢mpoutgíîrs
()

2031 
¢mpoutgíîrs
++;

2032 
	}
}

2034 
	$¢mp_öc_¢mpoutgëªque°s
()

2036 
¢mpoutgëªque°s
++;

2037 
	}
}

2039 
	$¢mp_öc_¢mpoutgë√xts
()

2041 
¢mpoutgë√xts
++;

2042 
	}
}

2044 
	$¢mp_öc_¢mpout£åeque°s
()

2046 
¢mpout£åeque°s
++;

2047 
	}
}

2049 
	$¢mp_öc_¢mpoutgëª•⁄£s
()

2051 
¢mpoutgëª•⁄£s
++;

2052 
	}
}

2054 
	$¢mp_öc_¢mpouâøps
()

2056 
¢mpouâøps
++;

2057 
	}
}

2059 
	$¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
)

2061 *
oid
 = &
¢mpgΩ_id
;

2062 
	}
}

2064 
	$¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2066 i‡(
vÆue
 !
NULL
)

2068 
¢m≥«bÀauthíå≠s_±r
 = 
vÆue
;

2070 
	}
}

2072 
	$¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2074 *
vÆue
 = *
¢m≥«bÀauthíå≠s_±r
;

2075 
	}
}

2078 
	$nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2080 i‡(
idít_Àn
){}

2081 i‡(
idít
){}

2082 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2083 
	}
}

2086 
	$nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2088 i‡(
od
){}

2089 i‡(
Àn
){}

2090 i‡(
vÆue
){}

2091 
	}
}

2093 
u8_t


2094 
	$nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2096 i‡(
od
){}

2097 i‡(
Àn
){}

2098 i‡(
vÆue
){}

2101 
	}
}

2104 
	$nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2106 i‡(
od
){}

2107 i‡(
Àn
){}

2108 i‡(
vÆue
){}

2109 
	}
}

2120 
	$sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2122 
u8_t
 
id
;

2125 
idít_Àn
 += 1;

2126 
idít
 -= 1;

2127 i‡(
idít_Àn
 == 2)

2129 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2130 
od
->
id_ö°_±r
 = 
idít
;

2132 
id
 = 
idít
[0];

2133 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡sy°em.%"
U16_F
".0\n",(
u16_t
)
id
));

2134 
id
)

2137 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2138 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2139 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2140 
od
->
v_Àn
 = *
sysdes¸_Àn_±r
;

2143 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2144 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2145 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2146 
od
->
v_Àn
 = 
sysobjid
.
Àn
 * (
s32_t
);

2149 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2150 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2151 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2152 
od
->
v_Àn
 = (
u32_t
);

2155 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2156 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2157 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2158 
od
->
v_Àn
 = *
sysc⁄è˘_Àn_±r
;

2161 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2162 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2163 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2164 
od
->
v_Àn
 = *
sy¢ame_Àn_±r
;

2167 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2168 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2169 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2170 
od
->
v_Àn
 = *
sy¶oˇti⁄_Àn_±r
;

2173 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2174 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2175 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2176 
od
->
v_Àn
 = (
s32_t
);

2179 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço such object\n"));

2180 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2186 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço scalar\n"));

2187 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2189 
	}
}

2200 
	$sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2202 
u8_t
 
id
;

2204 
id
 = 
od
->
id_ö°_±r
[0];

2205 
id
)

2208 
	`oc°∫˝y
(
vÆue
,
sysdes¸_±r
, 
Àn
);

2211 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
sysobjid
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2215 
	`¢mp_gë_sysu±ime
(
vÆue
);

2219 
	`oc°∫˝y
(
vÆue
,
sysc⁄è˘_±r
,
Àn
);

2222 
	`oc°∫˝y
(
vÆue
,
sy¢ame_±r
,
Àn
);

2225 
	`oc°∫˝y
(
vÆue
,
sy¶oˇti⁄_±r
,
Àn
);

2229 
s32_t
 *
söt_±r
 = 
vÆue
;

2230 *
söt_±r
 = 
sys£rvi˚s
;

2234 
	}
}

2236 
u8_t


2237 
	$sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2239 
u8_t
 
id
, 
£t_ok
;

2241 i‡(
vÆue
) {}

2242 
£t_ok
 = 0;

2243 
id
 = 
od
->
id_ö°_±r
[0];

2244 
id
)

2247 i‡((
sysc⁄è˘_±r
 !
sysc⁄è˘_deÁu…
) &&

2248 (
Àn
 <= 255))

2250 
£t_ok
 = 1;

2254 i‡((
sy¢ame_±r
 !
sy¢ame_deÁu…
) &&

2255 (
Àn
 <= 255))

2257 
£t_ok
 = 1;

2261 i‡((
sy¶oˇti⁄_±r
 !
sy¶oˇti⁄_deÁu…
) &&

2262 (
Àn
 <= 255))

2264 
£t_ok
 = 1;

2268  
£t_ok
;

2269 
	}
}

2272 
	$sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2274 
u8_t
 
id
;

2276 
id
 = 
od
->
id_ö°_±r
[0];

2277 
id
)

2280 
	`oc°∫˝y
(
sysc⁄è˘_±r
,
vÆue
,
Àn
);

2281 *
sysc⁄è˘_Àn_±r
 = 
Àn
;

2284 
	`oc°∫˝y
(
sy¢ame_±r
,
vÆue
,
Àn
);

2285 *
sy¢ame_Àn_±r
 = 
Àn
;

2288 
	`oc°∫˝y
(
sy¶oˇti⁄_±r
,
vÆue
,
Àn
);

2289 *
sy¶oˇti⁄_Àn_±r
 = 
Àn
;

2292 
	}
}

2302 
	$öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2305 
idít_Àn
 += 1;

2306 
idít
 -= 1;

2307 i‡(
idít_Àn
 == 2)

2309 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2310 
od
->
id_ö°_±r
 = 
idít
;

2312 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2313 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2314 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2315 
od
->
v_Àn
 = (
s32_t
);

2319 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("interfaces_get_object_def:Ço scalar\n"));

2320 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2322 
	}
}

2333 
	$öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2335 i‡(
Àn
){}

2336 i‡(
od
->
id_ö°_±r
[0] == 1)

2338 
s32_t
 *
söt_±r
 = 
vÆue
;

2339 *
söt_±r
 = 
iÊi°_roŸ
.
cou¡
;

2341 
	}
}

2351 
	$i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2353 
u8_t
 
id
;

2356 
idít_Àn
 += 1;

2357 
idít
 -= 1;

2358 i‡(
idít_Àn
 == 2)

2360 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2361 
od
->
id_ö°_±r
 = 
idít
;

2363 
id
 = 
idít
[0];

2364 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡i„¡ry.%"
U16_F
"\n",(
u16_t
)
id
));

2365 
id
)

2371 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2372 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2373 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2374 
od
->
v_Àn
 = (
s32_t
);

2377 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2378 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2379 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2381 
od
->
v_Àn
 = 2;

2385 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2386 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2387 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

2388 
od
->
v_Àn
 = (
u32_t
);

2392 
√tif
 *netif;

2394 
	`¢mp_ifödext⁄ëif
(
idít
[1], &
√tif
);

2395 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2396 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2397 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2398 
od
->
v_Àn
 = 
√tif
->
hwaddr_Àn
;

2402 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2403 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2404 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2405 
od
->
v_Àn
 = (
s32_t
);

2408 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2409 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2410 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2411 
od
->
v_Àn
 = (
u32_t
);

2424 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2425 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2426 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2427 
od
->
v_Àn
 = (
u32_t
);

2431 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2432 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2433 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2434 
od
->
v_Àn
 = 
if•ecific
.
Àn
 * (
s32_t
);

2437 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço such object\n"));

2438 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2444 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço scalar\n"));

2445 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2447 
	}
}

2458 
	$i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2460 
√tif
 *netif;

2461 
u8_t
 
id
;

2463 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2464 
id
 = 
od
->
id_ö°_±r
[0];

2465 
id
)

2469 
s32_t
 *
söt_±r
 = 
vÆue
;

2470 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2474 
	`oc°∫˝y
(
vÆue
,(
u8_t
*)
√tif
->
«me
,
Àn
);

2478 
s32_t
 *
söt_±r
 = 
vÆue
;

2479 *
söt_±r
 = 
√tif
->
lök_ty≥
;

2484 
s32_t
 *
söt_±r
 = 
vÆue
;

2485 *
söt_±r
 = 
√tif
->
mtu
;

2490 
u32_t
 *
uöt_±r
 = 
vÆue
;

2491 *
uöt_±r
 = 
√tif
->
lök_•ìd
;

2495 
	`oc°∫˝y
(
vÆue
,
√tif
->
hwaddr
,
Àn
);

2498 #i‡
LWIP_NETIF_LINK_CALLBACK


2500 
s32_t
 *
söt_±r
 = 
vÆue
;

2501 i‡(
	`√tif_is_up
(
√tif
))

2503 i‡(
	`√tif_is_lök_up
(
√tif
))

2505 *
söt_±r
 = 1;

2509 *
söt_±r
 = 7;

2514 *
söt_±r
 = 2;

2521 
s32_t
 *
söt_±r
 = 
vÆue
;

2522 i‡(
	`√tif_is_up
(
√tif
))

2524 *
söt_±r
 = 1;

2528 *
söt_±r
 = 2;

2534 
u32_t
 *
uöt_±r
 = 
vÆue
;

2535 *
uöt_±r
 = 
√tif
->
ts
;

2540 
u32_t
 *
uöt_±r
 = 
vÆue
;

2541 *
uöt_±r
 = 
√tif
->
iföo˘ës
;

2546 
u32_t
 *
uöt_±r
 = 
vÆue
;

2547 *
uöt_±r
 = 
√tif
->
iföuˇ°pkts
;

2552 
u32_t
 *
uöt_±r
 = 
vÆue
;

2553 *
uöt_±r
 = 
√tif
->
ifönuˇ°pkts
;

2558 
u32_t
 *
uöt_±r
 = 
vÆue
;

2559 *
uöt_±r
 = 
√tif
->
ifödisˇrds
;

2566 
u32_t
 *
uöt_±r
 = 
vÆue
;

2567 *
uöt_±r
 = 0;

2572 
u32_t
 *
uöt_±r
 = 
vÆue
;

2573 *
uöt_±r
 = 
√tif
->
ifouto˘ës
;

2578 
u32_t
 *
uöt_±r
 = 
vÆue
;

2579 *
uöt_±r
 = 
√tif
->
ifoutuˇ°pkts
;

2584 
u32_t
 *
uöt_±r
 = 
vÆue
;

2585 *
uöt_±r
 = 
√tif
->
ifouäuˇ°pkts
;

2590 
u32_t
 *
uöt_±r
 = 
vÆue
;

2591 *
uöt_±r
 = 
√tif
->
ifoutdisˇrds
;

2597 
u32_t
 *
uöt_±r
 = 
vÆue
;

2598 *
uöt_±r
 = 0;

2604 
u32_t
 *
uöt_±r
 = 
vÆue
;

2605 *
uöt_±r
 = 0;

2609 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
if•ecific
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2612 
	}
}

2614 #i‡!
SNMP_SAFE_REQUESTS


2615 
u8_t


2616 
	$i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2618 
√tif
 *netif;

2619 
u8_t
 
id
, 
£t_ok
;

2621 
£t_ok
 = 0;

2622 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2623 
id
 = 
od
->
id_ö°_±r
[0];

2624 
id
)

2628 
s32_t
 *
söt_±r
 = 
vÆue
;

2629 i‡(*
söt_±r
 == 1 || *sint_ptr == 2)

2630 
£t_ok
 = 1;

2634  
£t_ok
;

2635 
	}
}

2638 
	$i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2640 
√tif
 *netif;

2641 
u8_t
 
id
;

2643 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2644 
id
 = 
od
->
id_ö°_±r
[0];

2645 
id
)

2649 
s32_t
 *
söt_±r
 = 
vÆue
;

2650 i‡(*
söt_±r
 == 1)

2652 
	`√tif_£t_up
(
√tif
);

2654 i‡(*
söt_±r
 == 2)

2656 
	`√tif_£t_down
(
√tif
);

2661 
	}
}

2672 
	$©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2675 
idít_Àn
 += 5;

2676 
idít
 -= 5;

2678 i‡(
idít_Àn
 == 6)

2680 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2681 
od
->
id_ö°_±r
 = 
idít
;

2683 
idít
[0])

2686 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2687 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2688 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2689 
od
->
v_Àn
 = (
s32_t
);

2692 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2693 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2694 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2695 
od
->
v_Àn
 = 6;

2698 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2699 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2700 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

2701 
od
->
v_Àn
 = 4;

2704 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço such object\n"));

2705 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2711 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço scalar\n"));

2712 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2714 
	}
}

2717 
	$©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2719 #i‡
LWIP_ARP


2720 
u8_t
 
id
;

2721 
ëh_addr
* 
ëhaddr_ªt
;

2722 
ù_addr
* 
ùaddr_ªt
;

2724 
ù_addr
 
ù
;

2725 
√tif
 *netif;

2727 i‡(
Àn
) {}

2729 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2730 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

2731 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

2733 #i‡
LWIP_ARP


2734 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

2736 
id
 = 
od
->
id_ö°_±r
[0];

2737 
id
)

2741 
s32_t
 *
söt_±r
 = 
vÆue
;

2742 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2747 
ëh_addr
 *
d°
 = 
vÆue
;

2749 *
d°
 = *
ëhaddr_ªt
;

2754 
ù_addr
 *
d°
 = 
vÆue
;

2756 *
d°
 = *
ùaddr_ªt
;

2762 
	}
}

2765 
	$ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2767 
u8_t
 
id
;

2770 
idít_Àn
 += 1;

2771 
idít
 -= 1;

2772 i‡(
idít_Àn
 == 2)

2774 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2775 
od
->
id_ö°_±r
 = 
idít
;

2777 
id
 = 
idít
[0];

2778 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡ù.%"
U16_F
".0\n",(
u16_t
)
id
));

2779 
id
)

2783 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2784 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2785 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2786 
od
->
v_Àn
 = (
s32_t
);

2805 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2806 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2807 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2808 
od
->
v_Àn
 = (
u32_t
);

2811 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2812 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2813 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2814 
od
->
v_Àn
 = (
s32_t
);

2817 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço such object\n"));

2818 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2824 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço scalar\n"));

2825 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2827 
	}
}

2830 
	$ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2832 
u8_t
 
id
;

2834 i‡(
Àn
) {}

2835 
id
 = 
od
->
id_ö°_±r
[0];

2836 
id
)

2840 
s32_t
 *
söt_±r
 = 
vÆue
;

2841 #i‡
IP_FORWARD


2843 *
söt_±r
 = 1;

2846 *
söt_±r
 = 2;

2852 
s32_t
 *
söt_±r
 = 
vÆue
;

2853 *
söt_±r
 = 
IP_DEFAULT_TTL
;

2858 
u32_t
 *
uöt_±r
 = 
vÆue
;

2859 *
uöt_±r
 = 
ùöª˚ives
;

2864 
u32_t
 *
uöt_±r
 = 
vÆue
;

2865 *
uöt_±r
 = 
ùöhdªº‹s
;

2870 
u32_t
 *
uöt_±r
 = 
vÆue
;

2871 *
uöt_±r
 = 
ùöaddªº‹s
;

2876 
u32_t
 *
uöt_±r
 = 
vÆue
;

2877 *
uöt_±r
 = 
ùf‹wd©agøms
;

2882 
u32_t
 *
uöt_±r
 = 
vÆue
;

2883 *
uöt_±r
 = 
ùöunknow≈rŸos
;

2888 
u32_t
 *
uöt_±r
 = 
vÆue
;

2889 *
uöt_±r
 = 
ùödisˇrds
;

2894 
u32_t
 *
uöt_±r
 = 
vÆue
;

2895 *
uöt_±r
 = 
ùödñivîs
;

2900 
u32_t
 *
uöt_±r
 = 
vÆue
;

2901 *
uöt_±r
 = 
ùouåeque°s
;

2906 
u32_t
 *
uöt_±r
 = 
vÆue
;

2907 *
uöt_±r
 = 
ùoutdisˇrds
;

2912 
u32_t
 *
uöt_±r
 = 
vÆue
;

2913 *
uöt_±r
 = 
ùouä‹ouãs
;

2918 
s32_t
 *
söt_±r
 = 
vÆue
;

2919 #i‡
IP_REASSEMBLY


2920 *
söt_±r
 = 
IP_REASS_MAXAGE
;

2922 *
söt_±r
 = 0;

2928 
u32_t
 *
uöt_±r
 = 
vÆue
;

2929 *
uöt_±r
 = 
ùªasmªqds
;

2934 
u32_t
 *
uöt_±r
 = 
vÆue
;

2935 *
uöt_±r
 = 
ùªasmoks
;

2940 
u32_t
 *
uöt_±r
 = 
vÆue
;

2941 *
uöt_±r
 = 
ùªasmÁûs
;

2946 
u32_t
 *
uöt_±r
 = 
vÆue
;

2947 *
uöt_±r
 = 
ù‰agoks
;

2952 
u32_t
 *
uöt_±r
 = 
vÆue
;

2953 *
uöt_±r
 = 
ù‰agÁûs
;

2958 
u32_t
 *
uöt_±r
 = 
vÆue
;

2959 *
uöt_±r
 = 
ù‰ag¸óãs
;

2965 
u32_t
 *
uöt_±r
 = 
vÆue
;

2966 *
uöt_±r
 = 
ùroutögdisˇrds
;

2970 
	}
}

2982 
u8_t


2983 
	$ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2985 
u8_t
 
id
, 
£t_ok
;

2986 
s32_t
 *
söt_±r
 = 
vÆue
;

2988 i‡(
Àn
) {}

2989 
£t_ok
 = 0;

2990 
id
 = 
od
->
id_ö°_±r
[0];

2991 
id
)

2994 #i‡
IP_FORWARD


2996 i‡(*
söt_±r
 == 1)

2999 i‡(*
söt_±r
 == 2)

3002 
£t_ok
 = 1;

3006 i‡(*
söt_±r
 =
IP_DEFAULT_TTL
)

3008 
£t_ok
 = 1;

3012  
£t_ok
;

3013 
	}
}

3016 
	$ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3019 
idít_Àn
 += 4;

3020 
idít
 -= 4;

3022 i‡(
idít_Àn
 == 5)

3024 
u8_t
 
id
;

3026 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3027 
od
->
id_ö°_±r
 = 
idít
;

3029 
id
 = 
idít
[0];

3030 
id
)

3034 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3035 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3036 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3037 
od
->
v_Àn
 = 4;

3042 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3043 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3044 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3045 
od
->
v_Àn
 = (
s32_t
);

3048 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço such object\n"));

3049 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3055 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço scalar\n"));

3056 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3058 
	}
}

3061 
	$ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3063 
u8_t
 
id
;

3064 
u16_t
 
ifidx
;

3065 
ù_addr
 
ù
;

3066 
√tif
 *√ti‡
√tif_li°
;

3068 i‡(
Àn
) {}

3069 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3070 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3071 
ifidx
 = 0;

3072 (
√tif
 !
NULL
Ë&& !
	`ù_addr_cmp
(&
ù
, &√tif->
ù_addr
))

3074 
√tif
 =Çëif->
√xt
;

3075 
ifidx
++;

3078 i‡(
√tif
 !
NULL
)

3080 
id
 = 
od
->
id_ö°_±r
[0];

3081 
id
)

3085 
ù_addr
 *
d°
 = 
vÆue
;

3086 *
d°
 = 
√tif
->
ù_addr
;

3091 
s32_t
 *
söt_±r
 = 
vÆue
;

3092 *
söt_±r
 = 
ifidx
 + 1;

3097 
ù_addr
 *
d°
 = 
vÆue
;

3098 *
d°
 = 
√tif
->
√tmask
;

3103 
s32_t
 *
söt_±r
 = 
vÆue
;

3107 *
söt_±r
 = 
ù_addr_brﬂdˇ°
.
addr
 & 1;

3112 
s32_t
 *
söt_±r
 = 
vÆue
;

3113 #i‡
IP_REASSEMBLY


3118 *
söt_±r
 = (
IP_HLEN
 + ((
IP_REASS_MAX_PBUFS
/2) *

3119 (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
 - 
IP_HLEN
)));

3123 *
söt_±r
 = 0;

3129 
	}
}

3137 
	$ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3139 
u8_t
 
id
;

3142 
idít_Àn
 += 4;

3143 
idít
 -= 4;

3145 i‡(
idít_Àn
 == 5)

3147 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3148 
od
->
id_ö°_±r
 = 
idít
;

3150 
id
 = 
idít
[0];

3151 
id
)

3156 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3157 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3158 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3159 
od
->
v_Àn
 = 4;

3169 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3170 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3171 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3172 
od
->
v_Àn
 = (
s32_t
);

3175 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3176 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3177 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3178 
od
->
v_Àn
 = (
s32_t
);

3182 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3183 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3184 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

3185 
od
->
v_Àn
 = 
ùrouãöfo
.
Àn
 * (
s32_t
);

3188 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço such object\n"));

3189 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3195 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço scalar\n"));

3196 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3198 
	}
}

3201 
	$ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3203 
√tif
 *netif;

3204 
ù_addr
 
de°
;

3205 
s32_t
 *
idít
;

3206 
u8_t
 
id
;

3208 
idít
 = 
od
->
id_ö°_±r
;

3209 
	`¢mp_oidtoù
(&
idít
[1], &
de°
);

3210 
de°
.
addr
 = 
	`ht⁄l
(dest.addr);

3212 i‡(
de°
.
addr
 == 0)

3215 
√tif
 = 
√tif_deÁu…
;

3220 
√tif
 = 
√tif_li°
;

3221 (
√tif
 !
NULL
) &&

3222 !
	`ù_addr_√tcmp
(&
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) )

3224 
√tif
 =Çëif->
√xt
;

3227 i‡(
√tif
 !
NULL
)

3229 
id
 = 
idít
[0];

3230 
id
)

3234 
ù_addr
 *
d°
 = 
vÆue
;

3236 i‡(
de°
.
addr
 == 0)

3239 
d°
->
addr
 = 0;

3244 
d°
->
addr
 = 
√tif
->
ù_addr
.add∏&Çëif->
√tmask
.addr;

3250 
s32_t
 *
söt_±r
 = 
vÆue
;

3252 
	`¢mp_√ti·oifödex
(
√tif
, 
söt_±r
);

3257 
s32_t
 *
söt_±r
 = 
vÆue
;

3259 i‡(
de°
.
addr
 == 0)

3262 *
söt_±r
 = 1;

3267 *
söt_±r
 = 0;

3276 
s32_t
 *
söt_±r
 = 
vÆue
;

3278 *
söt_±r
 = -1;

3283 
ù_addr
 *
d°
 = 
vÆue
;

3285 i‡(
de°
.
addr
 == 0)

3288 *
d°
 = 
√tif
->
gw
;

3293 *
d°
 = 
√tif
->
ù_addr
;

3299 
s32_t
 *
söt_±r
 = 
vÆue
;

3301 i‡(
de°
.
addr
 == 0)

3304 *
söt_±r
 = 4;

3309 *
söt_±r
 = 3;

3315 
s32_t
 *
söt_±r
 = 
vÆue
;

3317 *
söt_±r
 = 2;

3322 
s32_t
 *
söt_±r
 = 
vÆue
;

3325 *
söt_±r
 = 0;

3330 
ù_addr
 *
d°
 = 
vÆue
;

3332 i‡(
de°
.
addr
 == 0)

3335 
d°
->
addr
 = 0;

3340 *
d°
 = 
√tif
->
√tmask
;

3345 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
ùrouãöfo
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

3349 
	}
}

3352 
	$ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3355 
idít_Àn
 += 5;

3356 
idít
 -= 5;

3358 i‡(
idít_Àn
 == 6)

3360 
u8_t
 
id
;

3362 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3363 
od
->
id_ö°_±r
 = 
idít
;

3365 
id
 = 
idít
[0];

3366 
id
)

3370 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3371 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3372 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3373 
od
->
v_Àn
 = (
s32_t
);

3376 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3377 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3378 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

3379 
od
->
v_Àn
 = 6;

3382 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3383 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3384 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3385 
od
->
v_Àn
 = 4;

3388 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço such object\n"));

3389 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3395 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço scalar\n"));

3396 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3398 
	}
}

3401 
	$ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3403 #i‡
LWIP_ARP


3404 
u8_t
 
id
;

3405 
ëh_addr
* 
ëhaddr_ªt
;

3406 
ù_addr
* 
ùaddr_ªt
;

3408 
ù_addr
 
ù
;

3409 
√tif
 *netif;

3411 i‡(
Àn
) {}

3413 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

3414 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

3415 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3417 #i‡
LWIP_ARP


3418 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

3420 
id
 = 
od
->
id_ö°_±r
[0];

3421 
id
)

3425 
s32_t
 *
söt_±r
 = 
vÆue
;

3426 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

3431 
ëh_addr
 *
d°
 = 
vÆue
;

3433 *
d°
 = *
ëhaddr_ªt
;

3438 
ù_addr
 *
d°
 = 
vÆue
;

3440 *
d°
 = *
ùaddr_ªt
;

3445 
s32_t
 *
söt_±r
 = 
vÆue
;

3447 *
söt_±r
 = 3;

3453 
	}
}

3456 
	$icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3459 
idít_Àn
 += 1;

3460 
idít
 -= 1;

3461 i‡((
idít_Àn
 == 2) &&

3462 (
idít
[0] > 0) && (ident[0] < 27))

3464 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3465 
od
->
id_ö°_±r
 = 
idít
;

3467 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3468 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3469 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3470 
od
->
v_Àn
 = (
u32_t
);

3474 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("icmp_get_object_def:Ço scalar\n"));

3475 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3477 
	}
}

3480 
	$icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3482 
u32_t
 *
uöt_±r
 = 
vÆue
;

3483 
u8_t
 
id
;

3485 i‡(
Àn
){}

3486 
id
 = 
od
->
id_ö°_±r
[0];

3487 
id
)

3490 *
uöt_±r
 = 
icmpömsgs
;

3493 *
uöt_±r
 = 
icmpöîr‹s
;

3496 *
uöt_±r
 = 
icmpöde°uƒóchs
;

3499 *
uöt_±r
 = 
icmpötimìxcds
;

3502 *
uöt_±r
 = 
icmpö∑rm¥obs
;

3505 *
uöt_±r
 = 
icmpö§cquíchs
;

3508 *
uöt_±r
 = 
icmpöªdúe˘s
;

3511 *
uöt_±r
 = 
icmpöechos
;

3514 *
uöt_±r
 = 
icmpöech‹ïs
;

3517 *
uöt_±r
 = 
icmpötime°amps
;

3520 *
uöt_±r
 = 
icmpötime°am¥ïs
;

3523 *
uöt_±r
 = 
icmpöaddrmasks
;

3526 *
uöt_±r
 = 
icmpöaddrmaskªps
;

3529 *
uöt_±r
 = 
icmpoutmsgs
;

3532 *
uöt_±r
 = 
icmpouãº‹s
;

3535 *
uöt_±r
 = 
icmpoutde°uƒóchs
;

3538 *
uöt_±r
 = 
icmpouâimìxcds
;

3541 *
uöt_±r
 = 
icmpouç¨m¥obs
;

3544 *
uöt_±r
 = 
icmpout§cquíchs
;

3547 *
uöt_±r
 = 
icmpouåedúe˘s
;

3550 *
uöt_±r
 = 
icmpouãchos
;

3553 *
uöt_±r
 = 
icmpouãch‹ïs
;

3556 *
uöt_±r
 = 
icmpouâime°amps
;

3559 *
uöt_±r
 = 
icmpouâime°am¥ïs
;

3562 *
uöt_±r
 = 
icmpouèddrmasks
;

3565 *
uöt_±r
 = 
icmpouèddrmaskªps
;

3568 
	}
}

3570 #i‡
LWIP_TCP


3573 
	$t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3575 
u8_t
 
id
;

3578 
idít_Àn
 += 1;

3579 
idít
 -= 1;

3580 i‡(
idít_Àn
 == 2)

3582 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3583 
od
->
id_ö°_±r
 = 
idít
;

3585 
id
 = 
idít
[0];

3586 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3588 
id
)

3594 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3595 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3596 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3597 
od
->
v_Àn
 = (
s32_t
);

3608 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3609 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3610 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3611 
od
->
v_Àn
 = (
u32_t
);

3614 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3615 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3616 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

3617 
od
->
v_Àn
 = (
u32_t
);

3620 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço such object\n"));

3621 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3627 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço scalar\n"));

3628 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3630 
	}
}

3633 
	$t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3635 
u32_t
 *
uöt_±r
 = 
vÆue
;

3636 
s32_t
 *
söt_±r
 = 
vÆue
;

3637 
u8_t
 
id
;

3639 i‡(
Àn
){}

3640 
id
 = 
od
->
id_ö°_±r
[0];

3641 
id
)

3644 *
söt_±r
 = 4;

3649 *
söt_±r
 = 1000;

3654 *
söt_±r
 = 60000;

3657 *
söt_±r
 = 
MEMP_NUM_TCP_PCB
;

3660 *
uöt_±r
 = 
t˝a˘ive›ís
;

3663 *
uöt_±r
 = 
t˝∑ssive›ís
;

3666 *
uöt_±r
 = 
t˝©ãm±Áûs
;

3669 *
uöt_±r
 = 
t˝e°abª£ts
;

3673 
u16_t
 
t˝cuºe°ab
 = 0;

3674 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

3675 
pcb
 !
NULL
)

3677 i‡((
pcb
->
°©e
 =
ESTABLISHED
) ||

3678 (
pcb
->
°©e
 =
CLOSE_WAIT
))

3680 
t˝cuºe°ab
++;

3682 
pcb
 =Öcb->
√xt
;

3684 *
uöt_±r
 = 
t˝cuºe°ab
;

3688 *
uöt_±r
 = 
t˝ö£gs
;

3691 *
uöt_±r
 = 
t˝out£gs
;

3694 *
uöt_±r
 = 
t˝ªå™s£gs
;

3697 *
uöt_±r
 = 
t˝öîrs
;

3700 *
uöt_±r
 = 
t˝ouå°s
;

3703 
	}
}

3704 #ifde‡
THIS_SEEMS_UNUSED


3706 
	$t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3709 
idít_Àn
 += 10;

3710 
idít
 -= 10;

3712 i‡(
idít_Àn
 == 11)

3714 
u8_t
 
id
;

3716 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3717 
od
->
id_ö°_±r
 = 
idít
;

3719 
id
 = 
idít
[0];

3720 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3722 
id
)

3725 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3726 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3727 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3728 
od
->
v_Àn
 = (
s32_t
);

3732 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3733 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3734 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3735 
od
->
v_Àn
 = 4;

3739 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3740 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3741 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3742 
od
->
v_Àn
 = (
s32_t
);

3745 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3746 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3752 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3753 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3755 
	}
}

3758 
	$t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3760 
ù_addr
 
lù
, 
rù
;

3761 
u16_t
 
Õ‹t
, 
Ω‹t
;

3762 
s32_t
 *
idít
;

3764 
idít
 = 
od
->
id_ö°_±r
;

3765 
	`¢mp_oidtoù
(&
idít
[1], &
lù
);

3766 
lù
.
addr
 = 
	`ht⁄l
(lip.addr);

3767 
Õ‹t
 = 
idít
[5];

3768 
	`¢mp_oidtoù
(&
idít
[6], &
rù
);

3769 
rù
.
addr
 = 
	`ht⁄l
(rip.addr);

3770 
Ω‹t
 = 
idít
[10];

3773 
	}
}

3778 
	$udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3781 
idít_Àn
 += 1;

3782 
idít
 -= 1;

3783 i‡((
idít_Àn
 == 2) &&

3784 (
idít
[0] > 0) && (ident[0] < 6))

3786 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3787 
od
->
id_ö°_±r
 = 
idít
;

3789 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3790 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3791 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3792 
od
->
v_Àn
 = (
u32_t
);

3796 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udp_get_object_def:Ço scalar\n"));

3797 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3799 
	}
}

3802 
	$udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3804 
u32_t
 *
uöt_±r
 = 
vÆue
;

3805 
u8_t
 
id
;

3807 i‡(
Àn
){}

3808 
id
 = 
od
->
id_ö°_±r
[0];

3809 
id
)

3812 *
uöt_±r
 = 
udpöd©agøms
;

3815 *
uöt_±r
 = 
ud≤›‹ts
;

3818 *
uöt_±r
 = 
udpöîr‹s
;

3821 *
uöt_±r
 = 
udpoutd©agøms
;

3824 
	}
}

3827 
	$ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3830 
idít_Àn
 += 5;

3831 
idít
 -= 5;

3833 i‡(
idít_Àn
 == 6)

3835 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3836 
od
->
id_ö°_±r
 = 
idít
;

3838 
idít
[0])

3841 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3842 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3843 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3844 
od
->
v_Àn
 = 4;

3847 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3848 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3849 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3850 
od
->
v_Àn
 = (
s32_t
);

3853 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço such object\n"));

3854 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3860 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço scalar\n"));

3861 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3863 
	}
}

3866 
	$ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3868 
u8_t
 
id
;

3869 
udp_pcb
 *
pcb
;

3870 
ù_addr
 
ù
;

3871 
u16_t
 
p‹t
;

3873 i‡(
Àn
){}

3874 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3875 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3876 
p‹t
 = 
od
->
id_ö°_±r
[5];

3878 
pcb
 = 
udp_pcbs
;

3879 (
pcb
 !
NULL
) &&

3880 !((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

3881 (
pcb
->
loˇl_p‹t
 =
p‹t
)))

3883 
pcb
 =Öcb->
√xt
;

3886 i‡(
pcb
 !
NULL
)

3888 
id
 = 
od
->
id_ö°_±r
[0];

3889 
id
)

3893 
ù_addr
 *
d°
 = 
vÆue
;

3894 *
d°
 = 
pcb
->
loˇl_ù
;

3899 
s32_t
 *
söt_±r
 = 
vÆue
;

3900 *
söt_±r
 = 
pcb
->
loˇl_p‹t
;

3905 
	}
}

3908 
	$¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3911 
idít_Àn
 += 1;

3912 
idít
 -= 1;

3913 i‡(
idít_Àn
 == 2)

3915 
u8_t
 
id
;

3917 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3918 
od
->
id_ö°_±r
 = 
idít
;

3920 
id
 = 
idít
[0];

3921 
id
)

3950 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3951 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3952 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3953 
od
->
v_Àn
 = (
u32_t
);

3956 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3957 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3958 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3959 
od
->
v_Àn
 = (
s32_t
);

3962 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço such object\n"));

3963 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço scalar\n"));

3970 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3972 
	}
}

3975 
	$¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3977 
u32_t
 *
uöt_±r
 = 
vÆue
;

3978 
u8_t
 
id
;

3980 i‡(
Àn
){}

3981 
id
 = 
od
->
id_ö°_±r
[0];

3982 
id
)

3985 *
uöt_±r
 = 
¢mpöpkts
;

3988 *
uöt_±r
 = 
¢mpouçkts
;

3991 *
uöt_±r
 = 
¢mpöbadvîsi⁄s
;

3994 *
uöt_±r
 = 
¢mpöbadcommunôy«mes
;

3997 *
uöt_±r
 = 
¢mpöbadcommunôyu£s
;

4000 *
uöt_±r
 = 
¢mpöa¢∑r£îrs
;

4003 *
uöt_±r
 = 
¢mpötoobigs
;

4006 *
uöt_±r
 = 
¢mpönosuch«mes
;

4009 *
uöt_±r
 = 
¢mpöbadvÆues
;

4012 *
uöt_±r
 = 
¢mpöªad⁄lys
;

4015 *
uöt_±r
 = 
¢mpögíîrs
;

4018 *
uöt_±r
 = 
¢mpötŸÆªqv¨s
;

4021 *
uöt_±r
 = 
¢mpötŸÆ£tv¨s
;

4024 *
uöt_±r
 = 
¢mpögëªque°s
;

4027 *
uöt_±r
 = 
¢mpögë√xts
;

4030 *
uöt_±r
 = 
¢mpö£åeque°s
;

4033 *
uöt_±r
 = 
¢mpögëª•⁄£s
;

4036 *
uöt_±r
 = 
¢mpöå≠s
;

4039 *
uöt_±r
 = 
¢mpouâoobigs
;

4042 *
uöt_±r
 = 
¢mpouäosuch«mes
;

4045 *
uöt_±r
 = 
¢mpoutbadvÆues
;

4048 *
uöt_±r
 = 
¢mpoutgíîrs
;

4051 *
uöt_±r
 = 
¢mpoutgëªque°s
;

4054 *
uöt_±r
 = 
¢mpoutgë√xts
;

4057 *
uöt_±r
 = 
¢mpout£åeque°s
;

4060 *
uöt_±r
 = 
¢mpoutgëª•⁄£s
;

4063 *
uöt_±r
 = 
¢mpouâøps
;

4066 *
uöt_±r
 = *
¢m≥«bÀauthíå≠s_±r
;

4069 
	}
}

4078 
u8_t


4079 
	$¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4081 
u8_t
 
id
, 
£t_ok
;

4083 i‡(
Àn
) {}

4084 
£t_ok
 = 0;

4085 
id
 = 
od
->
id_ö°_±r
[0];

4086 i‡(
id
 == 30)

4089 
s32_t
 *
söt_±r
 = 
vÆue
;

4091 i‡(
¢m≥«bÀauthíå≠s_±r
 !&
¢m≥«bÀauthíå≠s_deÁu…
)

4094 i‡((*
söt_±r
 == 1) || (*sint_ptr == 2))

4096 
£t_ok
 = 1;

4102 i‡(*
söt_±r
 =
¢m≥«bÀauthíå≠s_deÁu…
)

4104 
£t_ok
 = 1;

4108  
£t_ok
;

4109 
	}
}

4112 
	$¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4114 
u8_t
 
id
;

4116 i‡(
Àn
) {}

4117 
id
 = 
od
->
id_ö°_±r
[0];

4118 i‡(
id
 == 30)

4121 
s32_t
 *
söt_±r
 = 
vÆue
;

4122 *
¢m≥«bÀauthíå≠s_±r
 = *
söt_±r
;

4124 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/mib_structs.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/¢mp_°ru˘s.h
"

40 
	~"lwù/mem.h
"

43 c⁄° 
s32_t
 
	g¥efix
[4] = {1, 3, 6, 1};

45 
	#NODE_STACK_SIZE
 (
LWIP_SNMP_OBJ_ID_LEN
)

	)

47 
	sn£


50 
mib_node
* 
	mr_±r
;

52 
s32_t
 
	mr_id
;

54 
u8_t
 
	mr_∆
;

56 
u8_t
 
	gnode_°ack_˙t
;

57 
n£
 
	gnode_°ack
[
NODE_STACK_SIZE
];

63 
	$push_node
(
n£
* 
node
)

65 
	`LWIP_ASSERT
("node_°ack_˙à< NODE_STACK_SIZE",
node_°ack_˙t
 < 
NODE_STACK_SIZE
);

66 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("push_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

67 i‡(
node_°ack_˙t
 < 
NODE_STACK_SIZE
)

69 
node_°ack
[
node_°ack_˙t
] = *
node
;

70 
node_°ack_˙t
++;

72 
	}
}

78 
	$p›_node
(
n£
* 
node
)

80 i‡(
node_°ack_˙t
 > 0)

82 
node_°ack_˙t
--;

83 *
node
 = 
node_°ack
[
node_°ack_˙t
];

85 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("p›_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

86 
	}
}

94 
	$¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif)

96 
√tif
 *
nif
 = 
√tif_li°
;

97 
u16_t
 
i
, 
ifidx
;

99 
ifidx
 = 
ifödex
 - 1;

100 
i
 = 0;

101 (
nif
 !
NULL
Ë&& (
i
 < 
ifidx
))

103 
nif
 =Çif->
√xt
;

104 
i
++;

106 *
√tif
 = 
nif
;

107 
	}
}

115 
	$¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
)

117 
√tif
 *
nif
 = 
√tif_li°
;

118 
u16_t
 
i
;

120 
i
 = 0;

121 
nif
 !
√tif
)

123 
nif
 =Çif->
√xt
;

124 
i
++;

126 *
ifidx
 = 
i
+1;

127 
	}
}

135 
	$¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
)

137 
u32_t
 
ùa
;

139 
ùa
 = 
idít
[0];

140 
ùa
 <<= 8;

141 
ùa
 |
idít
[1];

142 
ùa
 <<= 8;

143 
ùa
 |
idít
[2];

144 
ùa
 <<= 8;

145 
ùa
 |
idít
[3];

146 
ù
->
addr
 = 
ùa
;

147 
	}
}

155 
	$¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
)

157 
u32_t
 
ùa
;

159 
ùa
 = 
ù
->
addr
;

160 
idít
[0] = (
ùa
 >> 24) & 0xff;

161 
idít
[1] = (
ùa
 >> 16) & 0xff;

162 
idít
[2] = (
ùa
 >> 8) & 0xff;

163 
idít
[3] = 
ùa
 & 0xff;

164 
	}
}

166 
mib_li°_node
 *

167 
	$¢mp_mib_ _Æloc
(
s32_t
 
id
)

169 
mib_li°_node
 *
 
;

171 
 
 = (
mib_li°_node
 *)
	`mem_mÆloc
((mib_list_node));

172 i‡(
 
 !
NULL
)

174 
 
->
¥ev
 = 
NULL
;

175 
 
->
√xt
 = 
NULL
;

176 
 
->
objid
 = 
id
;

177 
 
->
≈å
 = 
NULL
;

179  
 
;

180 
	}
}

183 
	$¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
)

185 
	`mem_‰ì
(
 
);

186 
	}
}

188 
mib_li°_roŸnode
 *

189 
	$¢mp_mib_Ãn_Æloc
()

191 
mib_li°_roŸnode
 *
Ãn
;

193 
Ãn
 = (
mib_li°_roŸnode
*)
	`mem_mÆloc
((mib_list_rootnode));

194 i‡(
Ãn
 !
NULL
)

196 
Ãn
->
gë_obje˘_def
 = 
nﬁófs_gë_obje˘_def
;

197 
Ãn
->
gë_vÆue
 = 
nﬁófs_gë_vÆue
;

198 
Ãn
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

199 
Ãn
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

200 
Ãn
->
node_ty≥
 = 
MIB_NODE_LR
;

201 
Ãn
->
maxÀngth
 = 0;

202 
Ãn
->
hód
 = 
NULL
;

203 
Ãn
->
èû
 = 
NULL
;

204 
Ãn
->
cou¡
 = 0;

206  
Ãn
;

207 
	}
}

210 
	$¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
)

212 
	`mem_‰ì
(
Ãn
);

213 
	}
}

226 
s8_t


227 
	$¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
)

229 
mib_li°_node
 *
¬
;

230 
s8_t
 
ö£π
;

232 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

235 
ö£π
 = 0;

236 i‡(
∫
->
hód
 =
NULL
)

239 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯em±yÜi° objid==%"
S32_F
"\n",
objid
));

240 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

241 i‡(
¬
 !
NULL
)

243 
∫
->
hód
 = 
¬
;

244 
∫
->
èû
 = 
¬
;

245 *
ö¢
 = 
¬
;

246 
ö£π
 = 1;

250 
ö£π
 = -1;

255 
mib_li°_node
 *
n
;

257 
n
 = 
∫
->
hód
;

258 (
n
 !
NULL
Ë&& (
ö£π
 == 0))

260 i‡(
n
->
objid
 == objid)

263 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("nodêÆªadyÅhîêobjid==%"
S32_F
"\n",
objid
));

264 *
ö¢
 = 
n
;

265 
ö£π
 = 2;

267 i‡(
n
->
objid
 < objid)

269 i‡(
n
->
√xt
 =
NULL
)

272 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†èû objid==%"
S32_F
"\n",
objid
));

273 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

274 i‡(
¬
 !
NULL
)

276 
¬
->
√xt
 = 
NULL
;

277 
¬
->
¥ev
 = 
n
;

278 
n
->
√xt
 = 
¬
;

279 
∫
->
èû
 = 
¬
;

280 *
ö¢
 = 
¬
;

281 
ö£π
 = 1;

286 
ö£π
 = -1;

292 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("traverseÜist\n"));

293 
n
 =Ç->
√xt
;

300 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†n->¥ev, objid==%"
S32_F
",Ç\n",
objid
));

301 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

302 i‡(
¬
 !
NULL
)

304 i‡(
n
->
¥ev
 =
NULL
)

307 
¬
->
√xt
 = 
n
;

308 
¬
->
¥ev
 = 
NULL
;

309 
∫
->
hód
 = 
¬
;

310 
n
->
¥ev
 = 
¬
;

315 
¬
->
√xt
 = 
n
;

316 
¬
->
¥ev
 = 
n
->prev;

317 
n
->
¥ev
->
√xt
 = 
¬
;

318 
n
->
¥ev
 = 
¬
;

320 *
ö¢
 = 
¬
;

321 
ö£π
 = 1;

326 
ö£π
 = -1;

331 i‡(
ö£π
 == 1)

333 
∫
->
cou¡
 += 1;

335 
	`LWIP_ASSERT
("ö£π !0",
ö£π
 != 0);

336  
ö£π
;

337 
	}
}

348 
s8_t


349 
	$¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
)

351 
s8_t
 
fc
;

352 
mib_li°_node
 *
n
;

354 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

355 
n
 = 
∫
->
hód
;

356 (
n
 !
NULL
Ë&& (n->
objid
 != objid))

358 
n
 =Ç->
√xt
;

360 i‡(
n
 =
NULL
)

362 
fc
 = 0;

364 i‡(
n
->
≈å
 =
NULL
)

367 
fc
 = 1;

371 
mib_li°_roŸnode
 *
r
;

373 i‡(
n
->
≈å
->
node_ty≥
 =
MIB_NODE_LR
)

375 
r
 = (
mib_li°_roŸnode
 *)
n
->
≈å
;

376 i‡(
r
->
cou¡
 > 1)

379 
fc
 = 2;

384 
fc
 = 1;

390 
fc
 = 3;

393 *
‚
 = 
n
;

394  
fc
;

395 
	}
}

405 
mib_li°_roŸnode
 *

406 
	$¢mp_mib_node_dñëe
(
mib_li°_roŸnode
 *
∫
, 
mib_li°_node
 *
n
)

408 
mib_li°_roŸnode
 *
√xt
;

410 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

411 
	`LWIP_ASSERT
("¿!NULL",
n
 !
NULL
);

414 
√xt
 = (
mib_li°_roŸnode
*)(
n
->
≈å
);

415 
∫
->
cou¡
 -= 1;

417 i‡(
n
 =
∫
->
hód
)

419 
∫
->
hód
 = 
n
->
√xt
;

420 i‡(
n
->
√xt
 !
NULL
)

423 
n
->
√xt
->
¥ev
 = 
NULL
;

426 i‡(
n
 =
∫
->
èû
)

428 
∫
->
èû
 = 
n
->
¥ev
;

429 i‡(
n
->
¥ev
 !
NULL
)

432 
n
->
¥ev
->
√xt
 = 
NULL
;

438 
n
->
¥ev
->
√xt
 =Ç->next;

439 
n
->
√xt
->
¥ev
 =Ç->prev;

441 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("‰ìÜi° objid==%"
S32_F
"\n",
n
->
objid
));

442 
	`¢mp_mib_ _‰ì
(
n
);

443 i‡(
∫
->
cou¡
 == 0)

445 
∫
->
hód
 = 
NULL
;

446 
∫
->
èû
 = 
NULL
;

448  
√xt
;

449 
	}
}

462 
mib_node
 *

463 
	$¢mp_£¨ch_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
)

465 
u8_t
 
node_ty≥
, 
ext_Àvñ
;

467 
ext_Àvñ
 = 0;

468 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("node==%∞*idít==%"
S32_F
"\n",(*)
node
,*
idít
));

469 
node
 !
NULL
)

471 
node_ty≥
 = 
node
->node_type;

472 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

474 
mib_¨øy_node
 *
™
;

475 
u16_t
 
i
;

477 i‡(
idít_Àn
 > 0)

480 
™
 = (
mib_¨øy_node
 *)
node
;

481 
i
 = 0;

482 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] !*
idít
))

484 
i
++;

486 i‡(
i
 < 
™
->
maxÀngth
)

489 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

490 i‡(
™
->
≈å
[
i
] =
NULL
)

494 
≈
->
idít_Àn
 = ident_len;

495 
≈
->
idít
 = ident;

496  (
mib_node
*)
™
;

501 
idít
++;

502 
idít_Àn
--;

503 
node
 = 
™
->
≈å
[
i
];

509 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™ sórch faûed *idít==%"
S32_F
"\n",*
idít
));

510  
NULL
;

516 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("an search failed, short object identifier\n"));

517  
NULL
;

520 if(
node_ty≥
 =
MIB_NODE_LR
)

522 
mib_li°_roŸnode
 *
Ãn
;

523 
mib_li°_node
 *
 
;

525 i‡(
idít_Àn
 > 0)

528 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

529 
 
 = 
Ãn
->
hód
;

531 (
 
 !
NULL
Ë&& ( ->
objid
 !*
idít
))

533 
 
 =Ün->
√xt
;

535 i‡(
 
 !
NULL
)

538 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

539 i‡(
 
->
≈å
 =
NULL
)

541 
≈
->
idít_Àn
 = ident_len;

542 
≈
->
idít
 = ident;

543  (
mib_node
*)
Ãn
;

548 
idít_Àn
--;

549 
idít
++;

550 
node
 = 
 
->
≈å
;

556 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("  sórch faûed *idít==%"
S32_F
"\n",*
idít
));

557  
NULL
;

563 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ln search failed, short object identifier\n"));

564  
NULL
;

567 if(
node_ty≥
 =
MIB_NODE_EX
)

569 
mib_exã∫Æ_node
 *
í
;

570 
u16_t
 
i
, 
Àn
;

572 i‡(
idít_Àn
 > 0)

575 
í
 = (
mib_exã∫Æ_node
 *)
node
;

577 
i
 = 0;

578 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

579 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) != 0))

581 
i
++;

583 i‡(
i
 < 
Àn
)

585 
s32_t
 
debug_id
;

587 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
debug_id
);

588 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid==%"
S32_F
" *idít==%"S32_F"\n",
debug_id
,*
idít
));

589 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

591 
≈
->
idít_Àn
 = ident_len;

592 
≈
->
idít
 = ident;

593  (
mib_node
*)
í
;

598 
idít_Àn
--;

599 
idít
++;

600 
ext_Àvñ
++;

606 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í sórch faûed *idít==%"
S32_F
"\n",*
idít
));

607  
NULL
;

613 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("en search failed, short object identifier\n"));

614  
NULL
;

617 i‡(
node_ty≥
 =
MIB_NODE_SC
)

619 
mib_sˇœr_node
 *
¢
;

621 
¢
 = (
mib_sˇœr_node
 *)
node
;

622 i‡((
idít_Àn
 =1Ë&& (*
idít
 == 0))

624 
≈
->
idít_Àn
 = ident_len;

625 
≈
->
idít
 = ident;

626  (
mib_node
*)
¢
;

631 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("search failed, invalid object identifierÜength\n"));

632  
NULL
;

638 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

639  
NULL
;

643 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode==%p\n",(*)
node
));

644  
NULL
;

645 
	}
}

650 
u8_t


651 
	$em±y_èbÀ
(
mib_node
 *
node
)

653 
u8_t
 
node_ty≥
;

654 
u8_t
 
em±y
 = 0;

656 i‡(
node
 !
NULL
)

658 
node_ty≥
 = 
node
->node_type;

659 i‡(
node_ty≥
 =
MIB_NODE_LR
)

661 
mib_li°_roŸnode
 *
Ãn
;

662 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

663 i‡((
Ãn
->
cou¡
 =0Ë|| (Ãn->
hód
 =
NULL
))

665 
em±y
 = 1;

668 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

670 
mib_¨øy_node
 *
™
;

671 
™
 = (
mib_¨øy_node
 *)
node
;

672 i‡((
™
->
maxÀngth
 =0Ë|| (™->
≈å
 =
NULL
))

674 
em±y
 = 1;

677 i‡(
node_ty≥
 =
MIB_NODE_EX
)

679 
mib_exã∫Æ_node
 *
í
;

680 
í
 = (
mib_exã∫Æ_node
 *)
node
;

681 i‡(
í
->
åì_Àvñs
 == 0)

683 
em±y
 = 1;

687  
em±y
;

688 
	}
}

693 
mib_node
 *

694 
	$¢mp_ex∑nd_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

696 
u8_t
 
node_ty≥
, 
ext_Àvñ
, 
˛imb_åì
;

698 
ext_Àvñ
 = 0;

700 
node_°ack_˙t
 = 0;

701 
node
 !
NULL
)

703 
˛imb_åì
 = 0;

704 
node_ty≥
 = 
node
->node_type;

705 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

707 
mib_¨øy_node
 *
™
;

708 
u16_t
 
i
;

711 
™
 = (
mib_¨øy_node
 *)
node
;

712 i‡(
idít_Àn
 > 0)

714 
i
 = 0;

715 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] < *
idít
))

717 
i
++;

719 i‡(
i
 < 
™
->
maxÀngth
)

721 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

723 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
];

724 (
oidªt
->
Àn
)++;

726 i‡(
™
->
≈å
[
i
] =
NULL
)

728 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

730 i‡(
™
->
objid
[
i
] > *
idít
)

732  (
mib_node
*)
™
;

734 i‡((
i
 + 1Ë< 
™
->
maxÀngth
)

737 (
oidªt
->
Àn
)--;

738 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
 + 1];

739 (
oidªt
->
Àn
)++;

740  (
mib_node
*)
™
;

745 (
oidªt
->
Àn
)--;

746 
˛imb_åì
 = 1;

751 
u8_t
 
j
;

752 
n£
 
cur_node
;

754 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

756 
j
 = 
i
 + 1;

757 (
j
 < 
™
->
maxÀngth
Ë&& (
	`em±y_èbÀ
◊n->
≈å
[j])))

759 
j
++;

761 i‡(
j
 < 
™
->
maxÀngth
)

763 
cur_node
.
r_±r
 = 
™
->
≈å
[
j
];

764 
cur_node
.
r_id
 = 
™
->
objid
[
j
];

765 
cur_node
.
r_∆
 = 0;

769 
cur_node
.
r_±r
 = 
NULL
;

771 
	`push_node
(&
cur_node
);

772 i‡(
™
->
objid
[
i
] =*
idít
)

774 
idít_Àn
--;

775 
idít
++;

780 
idít_Àn
 = 0;

783 
node
 = 
™
->
≈å
[
i
];

789 
˛imb_åì
 = 1;

794 
u8_t
 
j
;

796 
j
 = 0;

797 (
j
 < 
™
->
maxÀngth
Ë&& 
	`em±y_èbÀ
◊n->
≈å
[j]))

799 
j
++;

801 i‡(
j
 < 
™
->
maxÀngth
)

803 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·án->objid[j]==%"
S32_F
"\n",
™
->
objid
[
j
]));

804 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
j
];

805 (
oidªt
->
Àn
)++;

806 i‡(
™
->
≈å
[
j
] =
NULL
)

809  (
mib_node
*)
™
;

814 
node
 = 
™
->
≈å
[
j
];

820 
˛imb_åì
 = 1;

824 if(
node_ty≥
 =
MIB_NODE_LR
)

826 
mib_li°_roŸnode
 *
Ãn
;

827 
mib_li°_node
 *
 
;

830 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

831 i‡(
idít_Àn
 > 0)

833 
 
 = 
Ãn
->
hód
;

835 (
 
 !
NULL
Ë&& ( ->
objid
 < *
idít
))

837 
 
 =Ün->
√xt
;

839 i‡(
 
 !
NULL
)

841 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

842 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
objid
;

843 (
oidªt
->
Àn
)++;

844 i‡(
 
->
≈å
 =
NULL
)

847 i‡(
 
->
objid
 > *
idít
)

849  (
mib_node
*)
Ãn
;

851 i‡(
 
->
√xt
 !
NULL
)

854 (
oidªt
->
Àn
)--;

855 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
√xt
->
objid
;

856 (
oidªt
->
Àn
)++;

857  (
mib_node
*)
Ãn
;

862 (
oidªt
->
Àn
)--;

863 
˛imb_åì
 = 1;

868 
mib_li°_node
 *
jn
;

869 
n£
 
cur_node
;

872 
jn
 = 
 
->
√xt
;

873 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

875 
jn
 = jn->
√xt
;

877 i‡(
jn
 !
NULL
)

879 
cur_node
.
r_±r
 = 
jn
->
≈å
;

880 
cur_node
.
r_id
 = 
jn
->
objid
;

881 
cur_node
.
r_∆
 = 0;

885 
cur_node
.
r_±r
 = 
NULL
;

887 
	`push_node
(&
cur_node
);

888 i‡(
 
->
objid
 =*
idít
)

890 
idít_Àn
--;

891 
idít
++;

896 
idít_Àn
 = 0;

899 
node
 = 
 
->
≈å
;

906 
˛imb_åì
 = 1;

911 
mib_li°_node
 *
jn
;

913 
jn
 = 
Ãn
->
hód
;

914 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

916 
jn
 = jn->
√xt
;

918 i‡(
jn
 !
NULL
)

920 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À· jn->objid==%"
S32_F
"\n",
jn
->
objid
));

921 
oidªt
->
id
[oidªt->
Àn
] = 
jn
->
objid
;

922 (
oidªt
->
Àn
)++;

923 i‡(
jn
->
≈å
 =
NULL
)

926 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("jn->nptr == NULL\n"));

927  (
mib_node
*)
Ãn
;

932 
node
 = 
jn
->
≈å
;

938 
˛imb_åì
 = 1;

942 if(
node_ty≥
 =
MIB_NODE_EX
)

944 
mib_exã∫Æ_node
 *
í
;

945 
s32_t
 
ex_id
;

948 
í
 = (
mib_exã∫Æ_node
 *)
node
;

949 i‡(
idít_Àn
 > 0)

951 
u16_t
 
i
, 
Àn
;

953 
i
 = 0;

954 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

955 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) < 0))

957 
i
++;

959 i‡(
i
 < 
Àn
)

962 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
ex_id
);

963 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
ex_id
,*
idít
));

964 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

965 (
oidªt
->
Àn
)++;

967 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

971 i‡(
ex_id
 > *
idít
)

973  (
mib_node
*)
í
;

975 i‡((
i
 + 1Ë< 
Àn
)

978 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
 + 1,&
ex_id
);

979 (
oidªt
->
Àn
)--;

980 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

981 (
oidªt
->
Àn
)++;

982  (
mib_node
*)
í
;

987 (
oidªt
->
Àn
)--;

988 
˛imb_åì
 = 1;

993 
u8_t
 
j
;

994 
n£
 
cur_node
;

996 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

998 
j
 = 
i
 + 1;

999 i‡(
j
 < 
Àn
)

1002 
cur_node
.
r_±r
 = 
node
;

1003 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
j
,&
cur_node
.
r_id
);

1004 
cur_node
.
r_∆
 = 
ext_Àvñ
 + 1;

1008 
cur_node
.
r_±r
 = 
NULL
;

1010 
	`push_node
(&
cur_node
);

1011 i‡(
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,
i
,*
idít
) == 0)

1013 
idít_Àn
--;

1014 
idít
++;

1019 
idít_Àn
 = 0;

1022 
ext_Àvñ
++;

1028 
˛imb_åì
 = 1;

1034 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,0,&
ex_id
);

1035 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·Én->objid==%"
S32_F
"\n",
ex_id
));

1036 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

1037 (
oidªt
->
Àn
)++;

1038 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

1041 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("(ext_level + 1) ==Én->tree_levels\n"));

1042  (
mib_node
*)
í
;

1047 
ext_Àvñ
++;

1051 if(
node_ty≥
 =
MIB_NODE_SC
)

1053 
mib_sˇœr_node
 *
¢
;

1056 
¢
 = (
mib_sˇœr_node
 *)
node
;

1057 i‡(
idít_Àn
 > 0)

1060 
˛imb_åì
 = 1;

1065 
oidªt
->
id
[oidªt->
Àn
] = 0;

1066 (
oidªt
->
Àn
)++;

1068 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("completed scalarÜeaf\n"));

1069  (
mib_node
*)
¢
;

1075 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

1076  
NULL
;

1079 i‡(
˛imb_åì
)

1081 
n£
 
chûd
;

1084 
chûd
.
r_±r
 = 
NULL
;

1085 
chûd
.
r_id
 = 0;

1086 
chûd
.
r_∆
 = 0;

1087 (
node_°ack_˙t
 > 0Ë&& (
chûd
.
r_±r
 =
NULL
))

1089 
	`p›_node
(&
chûd
);

1091 (
oidªt
->
Àn
)--;

1093 i‡(
chûd
.
r_±r
 !
NULL
)

1096 
idít_Àn
 = 0;

1097 
oidªt
->
id
[oidªt->
Àn
] = 
chûd
.
r_id
;

1098 
oidªt
->
Àn
++;

1099 
node
 = 
chûd
.
r_±r
;

1100 
ext_Àvñ
 = 
chûd
.
r_∆
;

1105 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("expand failed,ÅreeÉnds here\n"));

1106  
NULL
;

1111 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode==%p\n",(*)
node
));

1112  
NULL
;

1113 
	}
}

1122 
u8_t


1123 
	$¢mp_iso_¥efix_t°
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

1125 i‡((
idít_Àn
 > 3) &&

1126 (
idít
[0] == 1) && (ident[1] == 3) &&

1127 (
idít
[2] == 6) && (ident[3] == 1))

1135 
	}
}

1148 
u8_t


1149 
	$¢mp_iso_¥efix_ex∑nd
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

1151 c⁄° 
s32_t
 *
¥efix_±r
;

1152 
s32_t
 *
ªt_±r
;

1153 
u8_t
 
i
;

1155 
i
 = 0;

1156 
¥efix_±r
 = &
¥efix
[0];

1157 
ªt_±r
 = &
oidªt
->
id
[0];

1158 
idít_Àn
 = ((ident_len < 4)?ident_len:4);

1159 (
i
 < 
idít_Àn
Ë&& ((*
idít
Ë<(*
¥efix_±r
)))

1161 *
ªt_±r
++ = *
¥efix_±r
++;

1162 
idít
++;

1163 
i
++;

1165 i‡(
i
 =
idít_Àn
)

1168 
i
 < 4)

1170 *
ªt_±r
++ = *
¥efix_±r
++;

1171 
i
++;

1173 
oidªt
->
Àn
 = 
i
;

1181 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/msg_in.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/udp.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/¢mp.h
"

44 
	~"lwù/¢mp_a¢1.h
"

45 
	~"lwù/¢mp_msg.h
"

46 
	~"lwù/¢mp_°ru˘s.h
"

48 
	~<°rög.h
>

52 c⁄° 
s32_t
 
	g¢mp_vîsi⁄
 = 0;

54 c⁄° 
	g¢mp_publiccommunôy
[7] = "public";

57 
¢mp_msg_p°©
 
	gmsg_öput_li°
[
SNMP_CONCURRENT_REQUESTS
];

59 
udp_pcb
 *
	g¢mp1_pcb
;

61 
¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

62 
îr_t
 
¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

63 
îr_t
 
¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

71 
	$¢mp_öô
()

73 
¢mp_msg_p°©
 *
msg_ps
;

74 
u8_t
 
i
;

76 
¢mp1_pcb
 = 
	`udp_√w
();

77 i‡(
¢mp1_pcb
 !
NULL
)

79 
	`udp_ªcv
(
¢mp1_pcb
, 
¢mp_ªcv
, (*)
SNMP_IN_PORT
);

80 
	`udp_böd
(
¢mp1_pcb
, 
IP_ADDR_ANY
, 
SNMP_IN_PORT
);

82 
msg_ps
 = &
msg_öput_li°
[0];

83 
i
=0; i<
SNMP_CONCURRENT_REQUESTS
; i++)

85 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

86 
msg_ps
->
îr‹_ödex
 = 0;

87 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

88 
msg_ps
++;

90 
å≠_msg
.
pcb
 = 
¢mp1_pcb
;

93 
	`¢mp_cﬁd°¨t_å≠
();

94 
	}
}

97 
	$¢mp_îr‹_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
, 
u8_t
 
îr‹
)

99 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

100 
msg_ps
->
outvb
 = msg_ps->
övb
;

101 
msg_ps
->
övb
.
hód
 = 
NULL
;

102 
msg_ps
->
övb
.
èû
 = 
NULL
;

103 
msg_ps
->
övb
.
cou¡
 = 0;

104 
msg_ps
->
îr‹_°©us
 = 
îr‹
;

105 
msg_ps
->
îr‹_ödex
 = 1 + msg_ps->
vb_idx
;

106 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

107 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

108 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

109 
	}
}

112 
	$¢mp_ok_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
)

114 
îr_t
 
îr_ªt
;

116 
îr_ªt
 = 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

117 i‡(
îr_ªt
 =
ERR_MEM
)

123 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_evíà%"
S32_F
"\n",
msg_ps
->
îr‹_°©us
));

126 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
övb
);

127 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

128 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

129 
	}
}

138 
	$¢mp_msg_gë_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

140 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

142 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

144 
mib_exã∫Æ_node
 *
í
;

145 
¢mp_«me_±r
 
≈
;

148 
í
 = 
msg_ps
->
ext_mib_node
;

149 
≈
 = 
msg_ps
->
ext_«me_±r
;

152 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

153 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

155 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

156 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

160 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

162 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

165 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

167 
mib_exã∫Æ_node
 *
í
;

168 
¢mp_v¨böd
 *
vb
;

171 
í
 = 
msg_ps
->
ext_mib_node
;

174 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

175 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

176 i‡(
vb
 !
NULL
)

178 
vb
->
√xt
 = 
NULL
;

179 
vb
->
¥ev
 = 
NULL
;

182 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

183 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

185 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

186 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

188 
vb
->
vÆue_ty≥
 = 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
;

189 
vb
->
vÆue_Àn
 = 
msg_ps
->
ext_obje˘_def
.
v_Àn
;

190 i‡(
vb
->
vÆue_Àn
 > 0)

192 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

193 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

194 i‡(
vb
->
vÆue
 !
NULL
)

196 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

197 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

199 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

200 
msg_ps
->
vb_idx
 += 1;

204 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

205 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço variable space\n"));

206 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

207 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

208 
	`mem_‰ì
(
vb
);

209 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

215 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

216 
vb
->
vÆue
 = 
NULL
;

217 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

219 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

220 
msg_ps
->
vb_idx
 += 1;

225 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

226 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço outvb space\n"));

227 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

231 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

232 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

234 
mib_node
 *
mn
;

235 
¢mp_«me_±r
 
≈
;

237 i‡(
msg_ps
->
vb_idx
 == 0)

239 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

243 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

246 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

248 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

249 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

250 i‡(
mn
 !
NULL
)

252 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

255 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

257 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

259 
msg_ps
->
ext_mib_node
 = 
í
;

260 
msg_ps
->
ext_«me_±r
 = 
≈
;

262 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

267 
obj_def
 
obje˘_def
;

269 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

270 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

271 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

273 
mn
 = mn;

278 
mn
 = 
NULL
;

280 i‡(
mn
 !
NULL
)

282 
¢mp_v¨böd
 *
vb
;

284 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

286 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

287 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

288 i‡(
vb
 !
NULL
)

290 
vb
->
√xt
 = 
NULL
;

291 
vb
->
¥ev
 = 
NULL
;

294 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

295 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

297 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

298 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

300 
vb
->
vÆue_ty≥
 = 
obje˘_def
.
a¢_ty≥
;

301 
vb
->
vÆue_Àn
 = 
obje˘_def
.
v_Àn
;

302 i‡(
vb
->
vÆue_Àn
 > 0)

304 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

305 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

306 i‡(
vb
->
vÆue
 !
NULL
)

308 
mn
->
	`gë_vÆue
(&
obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

309 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

310 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

311 
msg_ps
->
vb_idx
 += 1;

315 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate variable space\n"));

316 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

317 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

318 
	`mem_‰ì
(
vb
);

319 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

325 
vb
->
vÆue
 = 
NULL
;

326 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

327 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

328 
msg_ps
->
vb_idx
 += 1;

333 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate outvb space\n"));

334 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

342 
mn
 = 
NULL
;

344 i‡(
mn
 =
NULL
)

347 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

350 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

351 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

353 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

355 
	}
}

364 
	$¢mp_msg_gë√xt_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

366 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë√xt_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

368 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

370 
mib_exã∫Æ_node
 *
í
;

373 
í
 = 
msg_ps
->
ext_mib_node
;

376 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1], &msg_ps->
ext_obje˘_def
);

377 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

379 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

380 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

384 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1]);

386 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

389 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

391 
mib_exã∫Æ_node
 *
í
;

392 
¢mp_v¨böd
 *
vb
;

395 
í
 = 
msg_ps
->
ext_mib_node
;

397 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
msg_ps
->
ext_oid
,

398 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
,

399 
msg_ps
->
ext_obje˘_def
.
v_Àn
);

400 i‡(
vb
 !
NULL
)

402 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

403 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

404 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

405 
msg_ps
->
vb_idx
 += 1;

409 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

410 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_getnext_event: couldn'tállocate outvb space\n"));

411 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

415 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

416 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

418 
mib_node
 *
mn
;

419 
¢mp_obj_id
 
oid
;

421 i‡(
msg_ps
->
vb_idx
 == 0)

423 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

427 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

429 i‡(
	`¢mp_iso_¥efix_ex∑nd
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
, &
oid
))

431 i‡(
msg_ps
->
vb_±r
->
idít_Àn
 > 3)

434 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
,

435 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

436 
msg_ps
->
vb_±r
->
idít
 + 4, &
oid
);

441 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
, 0, 
NULL
, &
oid
);

446 
mn
 = 
NULL
;

448 i‡(
mn
 !
NULL
)

450 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

453 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

455 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

457 
msg_ps
->
ext_mib_node
 = 
í
;

458 
msg_ps
->
ext_oid
 = 
oid
;

460 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 1, &
oid
.
id
[oid.
Àn
 - 1]);

465 
obj_def
 
obje˘_def
;

466 
¢mp_v¨böd
 *
vb
;

468 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

469 
mn
->
	`gë_obje˘_def
(1, &
oid
.
id
[oid.
Àn
 - 1], &
obje˘_def
);

471 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
obje˘_def
.
a¢_ty≥
, obje˘_def.
v_Àn
);

472 i‡(
vb
 !
NULL
)

474 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

475 
mn
->
	`gë_vÆue
(&
obje˘_def
, obje˘_def.
v_Àn
, 
vb
->
vÆue
);

476 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

477 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

478 
msg_ps
->
vb_idx
 += 1;

482 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_recv couldn'tállocate outvb space\n"));

483 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

487 i‡(
mn
 =
NULL
)

490 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

493 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

494 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

496 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

498 
	}
}

507 
	$¢mp_msg_£t_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

509 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_£t_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

511 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

513 
mib_exã∫Æ_node
 *
í
;

514 
¢mp_«me_±r
 
≈
;

517 
í
 = 
msg_ps
->
ext_mib_node
;

518 
≈
 = 
msg_ps
->
ext_«me_±r
;

521 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

522 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

524 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_TEST
;

525 
í
->
	`£t_ã°_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

529 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

531 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

534 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_TEST
)

536 
mib_exã∫Æ_node
 *
í
;

539 
í
 = 
msg_ps
->
ext_mib_node
;

541 i‡(
msg_ps
->
ext_obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

543 i‡((
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
 =msg_ps->
vb_±r
->
vÆue_ty≥
) &&

544 (
í
->
	`£t_ã°_a
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
,

545 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

547 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

548 
msg_ps
->
vb_idx
 += 1;

552 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

554 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

559 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

561 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

564 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
)

566 
mib_exã∫Æ_node
 *
í
;

567 
¢mp_«me_±r
 
≈
;

570 
í
 = 
msg_ps
->
ext_mib_node
;

571 
≈
 = 
msg_ps
->
ext_«me_±r
;

574 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

575 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

577 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_VALUE
;

578 
í
->
	`£t_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

579 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

583 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

585 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_GENERROR
);

588 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_VALUE
)

590 
mib_exã∫Æ_node
 *
í
;

593 
í
 = 
msg_ps
->
ext_mib_node
;

594 
í
->
	`£t_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

595 
msg_ps
->
vb_±r
->
vÆue_Àn
, msg_ps->vb_±r->
vÆue
);

598 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

599 
msg_ps
->
vb_idx
 += 1;

603 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

604 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

606 
mib_node
 *
mn
;

607 
¢mp_«me_±r
 
≈
;

609 i‡(
msg_ps
->
vb_idx
 == 0)

611 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

615 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

618 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

620 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

621 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

622 i‡(
mn
 !
NULL
)

624 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

627 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

629 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

631 
msg_ps
->
ext_mib_node
 = 
í
;

632 
msg_ps
->
ext_«me_±r
 = 
≈
;

634 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

639 
obj_def
 
obje˘_def
;

641 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

642 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

643 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

645 
mn
 = mn;

650 
mn
 = 
NULL
;

652 i‡(
mn
 !
NULL
)

654 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_TEST
;

656 i‡(
obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

658 i‡((
obje˘_def
.
a¢_ty≥
 =
msg_ps
->
vb_±r
->
vÆue_ty≥
) &&

659 (
mn
->
	`£t_ã°
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

661 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

662 
msg_ps
->
vb_idx
 += 1;

667 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

673 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

681 
mn
 = 
NULL
;

683 i‡(
mn
 =
NULL
)

686 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

690 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

691 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

693 
msg_ps
->
vb_idx
 = 0;

694 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

698 (
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

699 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

701 
mib_node
 *
mn
;

702 
¢mp_«me_±r
 
≈
;

704 i‡(
msg_ps
->
vb_idx
 == 0)

706 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

710 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

713 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

714 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

717 i‡(
mn
 !
NULL
)

719 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

722 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

724 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
;

726 
msg_ps
->
ext_mib_node
 = 
í
;

727 
msg_ps
->
ext_«me_±r
 = 
≈
;

729 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

734 
obj_def
 
obje˘_def
;

736 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF_S
;

737 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

738 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

739 
mn
->
	`£t_vÆue
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

740 
msg_ps
->
vb_idx
 += 1;

744 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

745 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

750 
msg_ps
->
outvb
 = msg_ps->
övb
;

751 
msg_ps
->
övb
.
hód
 = 
NULL
;

752 
msg_ps
->
övb
.
èû
 = 
NULL
;

753 
msg_ps
->
övb
.
cou¡
 = 0;

754 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

756 
	}
}

766 
	$¢mp_msg_evít
(
u8_t
 
ªque°_id
)

768 
¢mp_msg_p°©
 *
msg_ps
;

770 i‡(
ªque°_id
 < 
SNMP_CONCURRENT_REQUESTS
)

772 
msg_ps
 = &
msg_öput_li°
[
ªque°_id
];

773 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
)

775 
	`¢mp_msg_gë√xt_evít
(
ªque°_id
, 
msg_ps
);

777 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
)

779 
	`¢mp_msg_gë_evít
(
ªque°_id
, 
msg_ps
);

781 if(
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

783 
	`¢mp_msg_£t_evít
(
ªque°_id
, 
msg_ps
);

786 
	}
}

791 
	$¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

793 
udp_hdr
 *
udphdr
;

796 
	`LWIP_UNUSED_ARG
(
¨g
);

798 if(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)){

799 
	`LWIP_ASSERT
("Can't moveÅo UDP header", 0);

800 
	`pbuf_‰ì
(
p
);

803 
udphdr
 = 
p
->
∑ylﬂd
;

806 i‡((
pcb
 =
¢mp1_pcb
Ë&& (
	`¡ohs
(
udphdr
->
de°
Ë=
SNMP_IN_PORT
))

808 
¢mp_msg_p°©
 *
msg_ps
;

809 
u8_t
 
ªq_idx
;

812 
msg_ps
 = &
msg_öput_li°
[0];

813 
ªq_idx
 = 0;

814 (
ªq_idx
<
SNMP_CONCURRENT_REQUESTS
Ë&& (
msg_ps
->
°©e
 !
SNMP_MSG_EMPTY
))

816 
ªq_idx
++;

817 
msg_ps
++;

819 i‡(
ªq_idx
 !
SNMP_CONCURRENT_REQUESTS
)

821 
îr_t
 
îr_ªt
;

822 
u16_t
 
∑ylﬂd_Àn
;

823 
u16_t
 
∑ylﬂd_ofs
;

824 
u16_t
 
v¨böd_ofs
 = 0;

827 
	`¢mp_öc_¢mpöpkts
();

829 
msg_ps
->
pcb
 =Öcb;

831 
msg_ps
->
sù
 = *
addr
;

833 
msg_ps
->
•
 = 
p‹t
;

835 
∑ylﬂd_Àn
 = 
	`¡ohs
(
udphdr
->
Àn
Ë- 
UDP_HLEN
;

838 
∑ylﬂd_ofs
 = 
UDP_HLEN
;

841 
îr_ªt
 = 
	`¢mp_pdu_hódî_check
(
p
, 
∑ylﬂd_ofs
, 
∑ylﬂd_Àn
, &
v¨böd_ofs
, 
msg_ps
);

842 i‡(((
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
) ||

843 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
) ||

844 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)) &&

845 ((
msg_ps
->
îr‹_°©us
 =
SNMP_ES_NOERROR
) &&

846 (
msg_ps
->
îr‹_ödex
 == 0)) )

849 
îr_ªt
 =Érr_ret;

854 
îr_ªt
 = 
ERR_ARG
;

856 i‡(
îr_ªt
 =
ERR_OK
)

858 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv ok, communôy %s\n", 
msg_ps
->
communôy
));

862 
îr_ªt
 = 
	`¢mp_pdu_dec_v¨bödli°
(
p
, 
v¨böd_ofs
, &v¨böd_ofs, 
msg_ps
);

863 i‡((
îr_ªt
 =
ERR_OK
Ë&& (
msg_ps
->
övb
.
cou¡
 > 0))

866 
	`pbuf_‰ì
(
p
);

868 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

869 
msg_ps
->
îr‹_ödex
 = 0;

871 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

873 
msg_ps
->
vb_idx
 = 0;

875 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv v¨böd c¡=%"
U16_F
"\n",(
u16_t
)
msg_ps
->
övb
.
cou¡
));

878 
	`¢mp_msg_evít
(
ªq_idx
);

885 
	`pbuf_‰ì
(
p
);

886 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_dec_varbindlist() failed\n"));

893 
	`pbuf_‰ì
(
p
);

894 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_header_check() failed\n"));

900 
	`pbuf_‰ì
(
p
);

906 
	`pbuf_‰ì
(
p
);

908 
	}
}

922 
îr_t


923 
	$¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

925 
îr_t
 
dîr
;

926 
u16_t
 
Àn
, 
ofs_ba£
;

927 
u8_t
 
Àn_o˘ës
;

928 
u8_t
 
ty≥
;

929 
s32_t
 
vîsi⁄
;

931 
ofs_ba£
 = 
ofs
;

932 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

933 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

934 i‡((
dîr
 !
ERR_OK
) ||

935 (
pdu_Àn
 !(1 + 
Àn_o˘ës
 + 
Àn
)) ||

936 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

938 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

939  
ERR_ARG
;

941 
ofs
 +(1 + 
Àn_o˘ës
);

942 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

943 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

944 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

947 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

948  
ERR_ARG
;

950 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
vîsi⁄
);

951 i‡(
dîr
 !
ERR_OK
)

954 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

955  
ERR_ARG
;

957 i‡(
vîsi⁄
 != 0)

960 
	`¢mp_öc_¢mpöbadvîsi⁄s
();

961  
ERR_ARG
;

963 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

964 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

965 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

966 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
)))

969 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

970  
ERR_ARG
;

972 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
SNMP_COMMUNITY_STR_LEN
, 
m_°©
->
communôy
);

973 i‡(
dîr
 !
ERR_OK
)

975 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

976  
ERR_ARG
;

979 
Àn
 = (÷í < (
SNMP_COMMUNITY_STR_LEN
))?(len):(SNMP_COMMUNITY_STR_LEN));

980 
m_°©
->
communôy
[
Àn
] = 0;

981 
m_°©
->
com_°æí
 = 
Àn
;

982 i‡(
	`°∫cmp
(
¢mp_publiccommunôy
, (c⁄° *)
m_°©
->
communôy
, 
SNMP_COMMUNITY_STR_LEN
) != 0)

985 
	`¢mp_öc_¢mpöbadcommunôy«mes
();

986 
	`¢mp_authÁû_å≠
();

987  
ERR_ARG
;

989 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

990 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

991 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

992 i‡(
dîr
 !
ERR_OK
)

994 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

995  
ERR_ARG
;

997 
ty≥
)

999 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_REQ
):

1001 
	`¢mp_öc_¢mpögëªque°s
();

1002 
dîr
 = 
ERR_OK
;

1004 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_NEXT_REQ
):

1006 
	`¢mp_öc_¢mpögë√xts
();

1007 
dîr
 = 
ERR_OK
;

1009 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
):

1011 
	`¢mp_öc_¢mpögëª•⁄£s
();

1012 
dîr
 = 
ERR_ARG
;

1014 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_SET_REQ
):

1016 
	`¢mp_öc_¢mpö£åeque°s
();

1017 
dîr
 = 
ERR_OK
;

1019 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
):

1021 
	`¢mp_öc_¢mpöå≠s
();

1022 
dîr
 = 
ERR_ARG
;

1025 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1026 
dîr
 = 
ERR_ARG
;

1029 i‡(
dîr
 !
ERR_OK
)

1032  
ERR_ARG
;

1034 
m_°©
->
π
 = 
ty≥
 & 0x1F;

1035 
ofs
 +(1 + 
Àn_o˘ës
);

1036 i‡(
Àn
 !(
pdu_Àn
 - (
ofs
 - 
ofs_ba£
)))

1039 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1040  
ERR_ARG
;

1042 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1043 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1044 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1047 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1048  
ERR_ARG
;

1050 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
rid
);

1051 i‡(
dîr
 !
ERR_OK
)

1054 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1055  
ERR_ARG
;

1057 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1058 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1059 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1060 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1063 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1064  
ERR_ARG
;

1068 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_°©us
);

1069 i‡(
dîr
 !
ERR_OK
)

1072 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1073  
ERR_ARG
;

1075 
m_°©
->
îr‹_°©us
)

1077 
SNMP_ES_TOOBIG
:

1078 
	`¢mp_öc_¢mpötoobigs
();

1080 
SNMP_ES_NOSUCHNAME
:

1081 
	`¢mp_öc_¢mpönosuch«mes
();

1083 
SNMP_ES_BADVALUE
:

1084 
	`¢mp_öc_¢mpöbadvÆues
();

1086 
SNMP_ES_READONLY
:

1087 
	`¢mp_öc_¢mpöªad⁄lys
();

1089 
SNMP_ES_GENERROR
:

1090 
	`¢mp_öc_¢mpögíîrs
();

1093 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1094 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1095 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1096 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1099 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1100  
ERR_ARG
;

1104 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_ödex
);

1105 i‡(
dîr
 !
ERR_OK
)

1108 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1109  
ERR_ARG
;

1111 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1112 *
ofs_ªt
 = 
ofs
;

1113  
ERR_OK
;

1114 
	}
}

1116 
îr_t


1117 
	$¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

1119 
îr_t
 
dîr
;

1120 
u16_t
 
Àn
, 
vb_Àn
;

1121 
u8_t
 
Àn_o˘ës
;

1122 
u8_t
 
ty≥
;

1125 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1126 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
vb_Àn
);

1127 i‡((
dîr
 !
ERR_OK
) ||

1128 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

1130 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1131  
ERR_ARG
;

1133 
ofs
 +(1 + 
Àn_o˘ës
);

1136 
m_°©
->
övb
.
cou¡
 = 0;

1137 
m_°©
->
övb
.
hód
 = 
NULL
;

1138 
m_°©
->
övb
.
èû
 = 
NULL
;

1140 
vb_Àn
 > 0)

1142 
¢mp_obj_id
 
oid
, 
oid_vÆue
;

1143 
¢mp_v¨böd
 *
vb
;

1145 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1146 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1147 i‡((
dîr
 !
ERR_OK
) ||

1148 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)) ||

1149 (
Àn
 =0Ë|| (À¿> 
vb_Àn
))

1151 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1153 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1154  
ERR_ARG
;

1156 
ofs
 +(1 + 
Àn_o˘ës
);

1157 
vb_Àn
 -(1 + 
Àn_o˘ës
);

1159 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1160 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1161 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
)))

1164 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1166 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1167  
ERR_ARG
;

1169 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid
);

1170 i‡(
dîr
 !
ERR_OK
)

1173 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1175 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1176  
ERR_ARG
;

1178 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1179 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1181 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1182 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1183 i‡(
dîr
 !
ERR_OK
)

1186 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1188 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1189  
ERR_ARG
;

1192 
ty≥
)

1194 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

1195 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
s32_t
));

1196 i‡(
vb
 !
NULL
)

1198 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1200 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1201 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1205 
dîr
 = 
ERR_ARG
;

1208 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

1209 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

1210 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

1211 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u32_t
));

1212 i‡(
vb
 !
NULL
)

1214 
u32_t
 *
v±r
 = 
vb
->
vÆue
;

1216 
dîr
 = 
	`¢mp_a¢1_dec_u32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1217 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1221 
dîr
 = 
ERR_ARG
;

1224 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

1225 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

1226 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
Àn
);

1227 i‡(
vb
 !
NULL
)

1229 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1230 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1234 
dîr
 = 
ERR_ARG
;

1237 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

1238 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 0);

1239 i‡(
vb
 !
NULL
)

1241 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1242 
dîr
 = 
ERR_OK
;

1246 
dîr
 = 
ERR_ARG
;

1249 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

1250 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid_vÆue
);

1251 i‡(
dîr
 =
ERR_OK
)

1253 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
oid_vÆue
.
Àn
 * (
s32_t
));

1254 i‡(
vb
 !
NULL
)

1256 
u8_t
 
i
 = 
oid_vÆue
.
Àn
;

1257 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1259 
i
 > 0)

1261 
i
--;

1262 
v±r
[
i
] = 
oid_vÆue
.
id
[i];

1264 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1265 
dîr
 = 
ERR_OK
;

1269 
dîr
 = 
ERR_ARG
;

1273 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

1274 i‡(
Àn
 == 4)

1277 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 4);

1278 i‡(
vb
 !
NULL
)

1280 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1281 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1285 
dîr
 = 
ERR_ARG
;

1290 
dîr
 = 
ERR_ARG
;

1294 
dîr
 = 
ERR_ARG
;

1297 i‡(
dîr
 !
ERR_OK
)

1299 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1301 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1302  
ERR_ARG
;

1304 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1305 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1308 i‡(
m_°©
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

1310 
	`¢mp_add_¢mpötŸÆ£tv¨s
(
m_°©
->
övb
.
cou¡
);

1314 
	`¢mp_add_¢mpötŸÆªqv¨s
(
m_°©
->
övb
.
cou¡
);

1317 *
ofs_ªt
 = 
ofs
;

1318  
ERR_OK
;

1319 
	}
}

1321 
¢mp_v¨böd
*

1322 
	$¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
)

1324 
¢mp_v¨böd
 *
vb
;

1326 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

1327 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

1328 i‡(
vb
 !
NULL
)

1330 
u8_t
 
i
;

1332 
vb
->
√xt
 = 
NULL
;

1333 
vb
->
¥ev
 = 
NULL
;

1334 
i
 = 
oid
->
Àn
;

1335 
vb
->
idít_Àn
 = 
i
;

1336 i‡(
i
 > 0)

1339 
vb
->
idít
 = (
s32_t
*)
	`mem_mÆloc
((s32_tË* 
i
);

1340 
	`LWIP_ASSERT
("vb->idíà!NULL",
vb
->
idít
 !
NULL
);

1341 i‡(
vb
->
idít
 =
NULL
)

1343 
	`mem_‰ì
(
vb
);

1344  
NULL
;

1346 
i
 > 0)

1348 
i
--;

1349 
vb
->
idít
[
i
] = 
oid
->
id
[i];

1355 
vb
->
idít
 = 
NULL
;

1357 
vb
->
vÆue_ty≥
 = 
ty≥
;

1358 
vb
->
vÆue_Àn
 = 
Àn
;

1359 i‡(
Àn
 > 0)

1362 
vb
->
vÆue
 = 
	`mem_mÆloc
(
Àn
);

1363 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

1364 i‡(
vb
->
vÆue
 =
NULL
)

1366 i‡(
vb
->
idít
 !
NULL
)

1368 
	`mem_‰ì
(
vb
->
idít
);

1370 
	`mem_‰ì
(
vb
);

1371  
NULL
;

1377 
vb
->
vÆue
 = 
NULL
;

1380  
vb
;

1381 
	}
}

1384 
	$¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
)

1386 i‡(
vb
->
vÆue
 !
NULL
 )

1388 
	`mem_‰ì
(
vb
->
vÆue
);

1390 i‡(
vb
->
idít
 !
NULL
 )

1392 
	`mem_‰ì
(
vb
->
idít
);

1394 
	`mem_‰ì
(
vb
);

1395 
	}
}

1398 
	$¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1400 
¢mp_v¨böd
 *
vb
, *
¥ev
;

1402 
vb
 = 
roŸ
->
èû
;

1403  
vb
 !
NULL
 )

1405 
¥ev
 = 
vb
->prev;

1406 
	`¢mp_v¨böd_‰ì
(
vb
);

1407 
vb
 = 
¥ev
;

1409 
roŸ
->
cou¡
 = 0;

1410 
roŸ
->
hód
 = 
NULL
;

1411 
roŸ
->
èû
 = 
NULL
;

1412 
	}
}

1415 
	$¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
)

1417 i‡(
roŸ
->
cou¡
 == 0)

1420 
roŸ
->
hód
 = 
vb
;

1421 
roŸ
->
èû
 = 
vb
;

1426 
roŸ
->
èû
->
√xt
 = 
vb
;

1427 
vb
->
¥ev
 = 
roŸ
->
èû
;

1428 
roŸ
->
èû
 = 
vb
;

1430 
roŸ
->
cou¡
 += 1;

1431 
	}
}

1433 
¢mp_v¨böd
*

1434 
	$¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1436 
¢mp_v¨böd
* 
vb
;

1438 i‡(
roŸ
->
cou¡
 > 0)

1441 
vb
 = 
roŸ
->
èû
;

1442 
roŸ
->
èû
 = 
vb
->
¥ev
;

1443 
vb
->
¥ev
->
√xt
 = 
NULL
;

1444 
roŸ
->
cou¡
 -= 1;

1449 
vb
 = 
NULL
;

1451  
vb
;

1452 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/msg_out.c

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_SNMP


49 
	~"lwù/udp.h
"

50 
	~"lwù/√tif.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/¢mp_a¢1.h
"

53 
	~"lwù/¢mp_msg.h
"

55 
	s¢mp_å≠_d°


58 
ù_addr
 
	mdù
;

60 
u8_t
 
	míabÀ
;

62 
¢mp_å≠_d°
 
	gå≠_d°
[
SNMP_TRAP_DESTINATIONS
];

65 
¢mp_msg_å≠
 
	gå≠_msg
;

67 
u16_t
 
¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, u16_à
vb_Àn
);

68 
u16_t
 
¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, u16_à
vb_Àn
);

69 
u16_t
 
¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
);

71 
u16_t
 
¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
);

72 
u16_t
 
¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
);

73 
u16_t
 
¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, u16_à
ofs
);

81 
	$¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
)

83 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

85 
å≠_d°
[
d°_idx
].
íabÀ
 =Énable;

87 
	}
}

95 
	$¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
)

97 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

99 
å≠_d°
[
d°_idx
].
dù
.
addr
 = 
	`ht⁄l
(
d°
->addr);

101 
	}
}

112 
îr_t


113 
	$¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
)

115 
¢mp_v¨böd_roŸ
 
em±yvb
 = {
NULL
, NULL, 0, 0, 0};

116 
pbuf
 *
p
;

117 
u16_t
 
tŸ_Àn
;

118 
îr_t
 
îr
;

121 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
m_°©
->
outvb
);

122 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

125 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

126 i‡(
p
 =
NULL
)

128 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()ÅooBig\n"));

131 
m_°©
->
îr‹_°©us
 = 
SNMP_ES_TOOBIG
;

132 
m_°©
->
îr‹_ödex
 = 0;

134 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
em±yvb
);

135 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

137 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

139 i‡(
p
 !
NULL
)

142 
u16_t
 
ofs
;

144 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()Ö != NULL\n"));

147 
ofs
 = 
	`¢mp_ª•_hódî_íc
(
m_°©
, 
p
);

148 i‡(
m_°©
->
îr‹_°©us
 =
SNMP_ES_TOOBIG
)

150 
	`¢mp_v¨böd_li°_íc
(&
em±yvb
, 
p
, 
ofs
);

154 
	`¢mp_v¨böd_li°_íc
(&
m_°©
->
outvb
, 
p
, 
ofs
);

157 
m_°©
->
îr‹_°©us
)

159 
SNMP_ES_TOOBIG
:

160 
	`¢mp_öc_¢mpouâoobigs
();

162 
SNMP_ES_NOSUCHNAME
:

163 
	`¢mp_öc_¢mpouäosuch«mes
();

165 
SNMP_ES_BADVALUE
:

166 
	`¢mp_öc_¢mpoutbadvÆues
();

168 
SNMP_ES_GENERROR
:

169 
	`¢mp_öc_¢mpoutgíîrs
();

172 
	`¢mp_öc_¢mpoutgëª•⁄£s
();

173 
	`¢mp_öc_¢mpouçkts
();

177 
	`udp_c⁄√˘
(
m_°©
->
pcb
, &m_°©->
sù
, m_°©->
•
);

178 
îr
 = 
	`udp_£nd
(
m_°©
->
pcb
, 
p
);

179 i‡(
îr
 =
ERR_MEM
)

182 
îr
 = 
ERR_MEM
;

186 
îr
 = 
ERR_OK
;

189 
	`udp_disc⁄√˘
(
m_°©
->
pcb
);

191 
	`pbuf_‰ì
(
p
);

192 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response() done\n"));

193  
îr
;

199  
ERR_MEM
;

201 
	}
}

219 
îr_t


220 
	$¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
)

222 
¢mp_å≠_d°
 *
td
;

223 
√tif
 *
d°_if
;

224 
ù_addr
 
d°_ù
;

225 
pbuf
 *
p
;

226 
u16_t
 
i
,
tŸ_Àn
;

228 
i
=0, 
td
 = &
å≠_d°
[0]; i<
SNMP_TRAP_DESTINATIONS
; i++,Åd++)

230 i‡((
td
->
íabÀ
 !0Ë&& (td->
dù
.
addr
 != 0))

233 
å≠_msg
.
dù
.
addr
 = 
td
->dip.addr;

235 
d°_if
 = 
	`ù_rouã
(&
td
->
dù
);

236 
d°_ù
.
addr
 = 
	`¡ohl
(
d°_if
->
ù_addr
.addr);

237 
å≠_msg
.
sù_øw
[0] = 
d°_ù
.
addr
 >> 24;

238 
å≠_msg
.
sù_øw
[1] = 
d°_ù
.
addr
 >> 16;

239 
å≠_msg
.
sù_øw
[2] = 
d°_ù
.
addr
 >> 8;

240 
å≠_msg
.
sù_øw
[3] = 
d°_ù
.
addr
;

241 
å≠_msg
.
gí_å≠
 = 
gíîic_å≠
;

242 
å≠_msg
.
•c_å≠
 = 
•ecific_å≠
;

243 i‡(
gíîic_å≠
 =
SNMP_GENTRAP_ENTERPRISESPC
)

246 
å≠_msg
.
íãΩri£
 = 
eoid
;

251 
	`¢mp_gë_¢mpgΩid_±r
(&
å≠_msg
.
íãΩri£
);

253 
	`¢mp_gë_sysu±ime
(&
å≠_msg
.
ts
);

256 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
å≠_msg
.
outvb
);

257 
tŸ_Àn
 = 
	`¢mp_å≠_hódî_sum
(&
å≠_msg
,Åot_len);

260 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

261 i‡(
p
 !
NULL
)

263 
u16_t
 
ofs
;

266 
ofs
 = 
	`¢mp_å≠_hódî_íc
(&
å≠_msg
, 
p
);

267 
	`¢mp_v¨böd_li°_íc
(&
å≠_msg
.
outvb
, 
p
, 
ofs
);

269 
	`¢mp_öc_¢mpouâøps
();

270 
	`¢mp_öc_¢mpouçkts
();

273 
	`udp_c⁄√˘
(
å≠_msg
.
pcb
, &å≠_msg.
dù
, 
SNMP_TRAP_PORT
);

274 
	`udp_£nd
(
å≠_msg
.
pcb
, 
p
);

276 
	`udp_disc⁄√˘
(
å≠_msg
.
pcb
);

278 
	`pbuf_‰ì
(
p
);

282  
ERR_MEM
;

286  
ERR_OK
;

287 
	}
}

290 
	$¢mp_cﬁd°¨t_å≠
()

292 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

293 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

294 
å≠_msg
.
outvb
.
cou¡
 = 0;

295 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_COLDSTART
, 
NULL
, 0);

296 
	}
}

299 
	$¢mp_authÁû_å≠
()

301 
u8_t
 
íabÀ
;

302 
	`¢mp_gë_¢m≥«bÀauthíå≠s
(&
íabÀ
);

303 i‡(
íabÀ
 == 1)

305 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

306 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

307 
å≠_msg
.
outvb
.
cou¡
 = 0;

308 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_AUTHFAIL
, 
NULL
, 0);

310 
	}
}

320 
u16_t


321 
	$¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, 
u16_t
 
vb_Àn
)

323 
u16_t
 
tŸ_Àn
;

324 
¢mp_ª•_hódî_Àngths
 *
rhl
;

326 
rhl
 = &
m_°©
->rhl;

327 
tŸ_Àn
 = 
vb_Àn
;

328 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_ödex
, &
rhl
->
îridxÀn
);

329 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îridxÀn
, &rhl->
îridxÀ∆í
);

330 
tŸ_Àn
 +1 + 
rhl
->
îridxÀ∆í
 +Ñhl->
îridxÀn
;

332 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_°©us
, &
rhl
->
îr°©Àn
);

333 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îr°©Àn
, &rhl->
îr°©À∆í
);

334 
tŸ_Àn
 +1 + 
rhl
->
îr°©À∆í
 +Ñhl->
îr°©Àn
;

336 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
rid
, &
rhl
->
ridÀn
);

337 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
ridÀn
, &rhl->
ridÀ∆í
);

338 
tŸ_Àn
 +1 + 
rhl
->
ridÀ∆í
 +Ñhl->
ridÀn
;

340 
rhl
->
pduÀn
 = 
tŸ_Àn
;

341 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
pduÀn
, &rhl->
pduÀ∆í
);

342 
tŸ_Àn
 +1 + 
rhl
->
pduÀ∆í
;

344 
rhl
->
comÀn
 = 
m_°©
->
com_°æí
;

345 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
comÀn
, &rhl->
comÀ∆í
);

346 
tŸ_Àn
 +1 + 
rhl
->
comÀ∆í
 +Ñhl->
comÀn
;

348 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
rhl
->
vîÀn
);

349 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
vîÀn
, &rhl->
vîÀ∆í
);

350 
tŸ_Àn
 +1 + 
rhl
->
vîÀn
 +Ñhl->
vîÀ∆í
;

352 
rhl
->
£qÀn
 = 
tŸ_Àn
;

353 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
£qÀn
, &rhl->
£qÀ∆í
);

354 
tŸ_Àn
 +1 + 
rhl
->
£qÀ∆í
;

356  
tŸ_Àn
;

357 
	}
}

367 
u16_t


368 
	$¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, 
u16_t
 
vb_Àn
)

370 
u16_t
 
tŸ_Àn
;

371 
¢mp_å≠_hódî_Àngths
 *
thl
;

373 
thl
 = &
m_å≠
->thl;

374 
tŸ_Àn
 = 
vb_Àn
;

376 
	`¢mp_a¢1_íc_u32t_˙t
(
m_å≠
->
ts
, &
thl
->
t¶í
);

377 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
t¶í
, &thl->
t¶íÀn
);

378 
tŸ_Àn
 +1 + 
thl
->
t¶í
 +Åhl->
t¶íÀn
;

380 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
•c_å≠
, &
thl
->
°ΩÀn
);

381 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
°ΩÀn
, &thl->
°ΩÀ∆í
);

382 
tŸ_Àn
 +1 + 
thl
->
°ΩÀn
 +Åhl->
°ΩÀ∆í
;

384 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
gí_å≠
, &
thl
->
gå∂í
);

385 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
gå∂í
, &thl->
gå∂íÀn
);

386 
tŸ_Àn
 +1 + 
thl
->
gå∂í
 +Åhl->
gå∂íÀn
;

388 
thl
->
Øddæí
 = 4;

389 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
Øddæí
, &thl->
ØddæíÀn
);

390 
tŸ_Àn
 +1 + 
thl
->
Øddæí
 +Åhl->
ØddæíÀn
;

392 
	`¢mp_a¢1_íc_oid_˙t
(
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0], &
thl
->
eidÀn
);

393 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
eidÀn
, &thl->
eidÀ∆í
);

394 
tŸ_Àn
 +1 + 
thl
->
eidÀn
 +Åhl->
eidÀ∆í
;

396 
thl
->
pduÀn
 = 
tŸ_Àn
;

397 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
pduÀn
, &thl->
pduÀ∆í
);

398 
tŸ_Àn
 +1 + 
thl
->
pduÀ∆í
;

400 
thl
->
comÀn
 = (
¢mp_publiccommunôy
) - 1;

401 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
comÀn
, &thl->
comÀ∆í
);

402 
tŸ_Àn
 +1 + 
thl
->
comÀ∆í
 +Åhl->
comÀn
;

404 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
thl
->
vîÀn
);

405 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
vîÀn
, &thl->
vîÀ∆í
);

406 
tŸ_Àn
 +1 + 
thl
->
vîÀn
 +Åhl->
vîÀ∆í
;

408 
thl
->
£qÀn
 = 
tŸ_Àn
;

409 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
£qÀn
, &thl->
£qÀ∆í
);

410 
tŸ_Àn
 +1 + 
thl
->
£qÀ∆í
;

412  
tŸ_Àn
;

413 
	}
}

422 
u16_t


423 
	$¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
)

425 
¢mp_v¨böd
 *
vb
;

426 
u32_t
 *
uöt_±r
;

427 
s32_t
 *
söt_±r
;

428 
u16_t
 
tŸ_Àn
;

430 
tŸ_Àn
 = 0;

431 
vb
 = 
roŸ
->
èû
;

432  
vb
 !
NULL
 )

435 
vb
->
vÆue_ty≥
)

437 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

438 
söt_±r
 = 
vb
->
vÆue
;

439 
	`¢mp_a¢1_íc_s32t_˙t
(*
söt_±r
, &
vb
->
vÀn
);

441 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

442 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

443 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

444 
uöt_±r
 = 
vb
->
vÆue
;

445 
	`¢mp_a¢1_íc_u32t_˙t
(*
uöt_±r
, &
vb
->
vÀn
);

447 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

448 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

449 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

450 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

451 
vb
->
vÀn
 = vb->
vÆue_Àn
;

453 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

454 
söt_±r
 = 
vb
->
vÆue
;

455 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
, &vb->
vÀn
);

459 
vb
->
vÀn
 = 0;

463 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
vÀn
, &vb->
vÀ∆í
);

464 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
idít_Àn
, vb->
idít
, &vb->
ﬁí
);

465 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
ﬁí
, &vb->
ﬁíÀn
);

467 
vb
->
£qÀn
 = 1 + vb->
vÀ∆í
 + vb->
vÀn
;

468 
vb
->
£qÀn
 +1 + vb->
ﬁíÀn
 + vb->
ﬁí
;

469 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
£qÀn
, &vb->
£qÀ∆í
);

472 
tŸ_Àn
 +1 + 
vb
->
£qÀ∆í
 + vb->
£qÀn
;

474 
vb
 = vb->
¥ev
;

478 
roŸ
->
£qÀn
 = 
tŸ_Àn
;

479 
	`¢mp_a¢1_íc_Àngth_˙t
(
roŸ
->
£qÀn
, &roŸ->
£qÀ∆í
);

480 
tŸ_Àn
 +1 + 
roŸ
->
£qÀ∆í
;

482  
tŸ_Àn
;

483 
	}
}

488 
u16_t


489 
	$¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
)

491 
u16_t
 
ofs
;

493 
ofs
 = 0;

494 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

495 
ofs
 += 1;

496 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
£qÀn
);

497 
ofs
 +
m_°©
->
rhl
.
£qÀ∆í
;

499 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

500 
ofs
 += 1;

501 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
);

502 
ofs
 +
m_°©
->
rhl
.
vîÀ∆í
;

503 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
, 
¢mp_vîsi⁄
);

504 
ofs
 +
m_°©
->
rhl
.
vîÀn
;

506 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

507 
ofs
 += 1;

508 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
);

509 
ofs
 +
m_°©
->
rhl
.
comÀ∆í
;

510 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
, m_°©->
communôy
);

511 
ofs
 +
m_°©
->
rhl
.
comÀn
;

513 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
));

514 
ofs
 += 1;

515 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
pduÀn
);

516 
ofs
 +
m_°©
->
rhl
.
pduÀ∆í
;

518 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

519 
ofs
 += 1;

520 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
);

521 
ofs
 +
m_°©
->
rhl
.
ridÀ∆í
;

522 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
, m_°©->
rid
);

523 
ofs
 +
m_°©
->
rhl
.
ridÀn
;

525 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

526 
ofs
 += 1;

527 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
);

528 
ofs
 +
m_°©
->
rhl
.
îr°©À∆í
;

529 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
, m_°©->
îr‹_°©us
);

530 
ofs
 +
m_°©
->
rhl
.
îr°©Àn
;

532 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

533 
ofs
 += 1;

534 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
);

535 
ofs
 +
m_°©
->
rhl
.
îridxÀ∆í
;

536 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
, m_°©->
îr‹_ödex
);

537 
ofs
 +
m_°©
->
rhl
.
îridxÀn
;

539  
ofs
;

540 
	}
}

545 
u16_t


546 
	$¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
)

548 
u16_t
 
ofs
;

550 
ofs
 = 0;

551 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

552 
ofs
 += 1;

553 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
£qÀn
);

554 
ofs
 +
m_å≠
->
thl
.
£qÀ∆í
;

556 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

557 
ofs
 += 1;

558 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
);

559 
ofs
 +
m_å≠
->
thl
.
vîÀ∆í
;

560 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
, 
¢mp_vîsi⁄
);

561 
ofs
 +
m_å≠
->
thl
.
vîÀn
;

563 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

564 
ofs
 += 1;

565 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
);

566 
ofs
 +
m_å≠
->
thl
.
comÀ∆í
;

567 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
, (
u8_t
 *)&
¢mp_publiccommunôy
[0]);

568 
ofs
 +
m_å≠
->
thl
.
comÀn
;

570 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
));

571 
ofs
 += 1;

572 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
pduÀn
);

573 
ofs
 +
m_å≠
->
thl
.
pduÀ∆í
;

575 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

576 
ofs
 += 1;

577 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
eidÀn
);

578 
ofs
 +
m_å≠
->
thl
.
eidÀ∆í
;

579 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0]);

580 
ofs
 +
m_å≠
->
thl
.
eidÀn
;

582 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
));

583 
ofs
 += 1;

584 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
);

585 
ofs
 +
m_å≠
->
thl
.
ØddæíÀn
;

586 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
, &m_å≠->
sù_øw
[0]);

587 
ofs
 +
m_å≠
->
thl
.
Øddæí
;

589 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

590 
ofs
 += 1;

591 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
);

592 
ofs
 +
m_å≠
->
thl
.
gå∂íÀn
;

593 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
, m_å≠->
gí_å≠
);

594 
ofs
 +
m_å≠
->
thl
.
gå∂í
;

596 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

597 
ofs
 += 1;

598 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
);

599 
ofs
 +
m_å≠
->
thl
.
°ΩÀ∆í
;

600 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
, m_å≠->
•c_å≠
);

601 
ofs
 +
m_å≠
->
thl
.
°ΩÀn
;

603 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
));

604 
ofs
 += 1;

605 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
);

606 
ofs
 +
m_å≠
->
thl
.
t¶íÀn
;

607 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
, m_å≠->
ts
);

608 
ofs
 +
m_å≠
->
thl
.
t¶í
;

610  
ofs
;

611 
	}
}

616 
u16_t


617 
	$¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, 
u16_t
 
ofs
)

619 
¢mp_v¨böd
 *
vb
;

620 
s32_t
 *
söt_±r
;

621 
u32_t
 *
uöt_±r
;

622 
u8_t
 *
øw_±r
;

624 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

625 
ofs
 += 1;

626 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
roŸ
->
£qÀn
);

627 
ofs
 +
roŸ
->
£qÀ∆í
;

629 
vb
 = 
roŸ
->
hód
;

630  
vb
 !
NULL
 )

632 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

633 
ofs
 += 1;

634 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
£qÀn
);

635 
ofs
 +
vb
->
£qÀ∆í
;

637 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

638 
ofs
 += 1;

639 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
ﬁí
);

640 
ofs
 +
vb
->
ﬁíÀn
;

641 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
idít_Àn
, &vb->
idít
[0]);

642 
ofs
 +
vb
->
ﬁí
;

644 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, 
vb
->
vÆue_ty≥
);

645 
ofs
 += 1;

646 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
vÀn
);

647 
ofs
 +
vb
->
vÀ∆í
;

649 
vb
->
vÆue_ty≥
)

651 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

652 
söt_±r
 = 
vb
->
vÆue
;

653 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
söt_±r
);

655 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

656 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

657 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

658 
uöt_±r
 = 
vb
->
vÆue
;

659 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
uöt_±r
);

661 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

662 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

663 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

664 
øw_±r
 = 
vb
->
vÆue
;

665 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
vb
->
vÀn
, 
øw_±r
);

667 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

669 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

670 
söt_±r
 = 
vb
->
vÆue
;

671 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
);

677 
ofs
 +
vb
->
vÀn
;

678 
vb
 = vb->
√xt
;

680  
ofs
;

681 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/stats.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_STATS


43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

47 
	~<°rög.h
>

49 
°©s_
 
	glwù_°©s
;

51 #i‡
LWIP_STATS_DISPLAY


53 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

55 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

56 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

57 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

58 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

59 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

60 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

61 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

62 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

63 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

64 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

65 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

66 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

67 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ˇchehô
));

68 
	}
}

70 #i‡
IGMP_STATS


72 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

74 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

75 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

76 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

77 
	`LWIP_PLATFORM_DIAG
(("v1_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
v1_rxed
));

78 
	`LWIP_PLATFORM_DIAG
(("joö_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
joö_£¡
));

79 
	`LWIP_PLATFORM_DIAG
(("Àave_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
Àave_£¡
));

80 
	`LWIP_PLATFORM_DIAG
(("uniˇ°_quîy: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
uniˇ°_quîy
));

81 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_£¡
));

82 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_rxed
));

83 
	`LWIP_PLATFORM_DIAG
(("group_quîy_rxed: %"
STAT_COUNTER_F
"\n", 
igmp
->
group_quîy_rxed
));

84 
	}
}

87 #i‡
MEM_STATS
 || 
MEMP_STATS


89 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

91 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

92 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

93 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

94 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

95 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

96 
	}
}

98 #i‡
MEMP_STATS


100 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

102 * 
memp_«mes
[] = {

103 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

104 
	~"lwù/memp_°d.h
"

106 if(
ödex
 < 
MEMP_MAX
) {

107 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

109 
	}
}

113 #i‡
SYS_STATS


115 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

117 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

118 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

119 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

120 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

121 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

122 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

123 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

124 
	}
}

128 
	$°©s_di•œy
()

130 
s16_t
 
i
;

132 
	`LINK_STATS_DISPLAY
();

133 
	`ETHARP_STATS_DISPLAY
();

134 
	`IPFRAG_STATS_DISPLAY
();

135 
	`IP_STATS_DISPLAY
();

136 
	`IGMP_STATS_DISPLAY
();

137 
	`ICMP_STATS_DISPLAY
();

138 
	`UDP_STATS_DISPLAY
();

139 
	`TCP_STATS_DISPLAY
();

140 
	`MEM_STATS_DISPLAY
();

141 
i
 = 0; i < 
MEMP_MAX
; i++) {

142 
	`MEMP_STATS_DISPLAY
(
i
);

144 
	`SYS_STATS_DISPLAY
();

145 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/sys.c

39 
	~"lwù/›t.h
"

41 #i‡(
NO_SYS
 == 0)

43 
	~"lwù/sys.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/t˝ù.h
"

52 
	ssswt_cb


54 
s16_t
 
	mtimeÊag
;

55 
sys_£m_t
 *
	mp£m
;

66 
	$sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
)

68 
u32_t
 
time_√eded
;

69 
sys_timeouts
 *
timeouts
;

70 
sys_timeo
 *
tm±imeout
;

71 
sys_timeout_h™dÀr
 
h
;

72 *
¨g
;

74 
agaö
:

75 
timeouts
 = 
	`sys_¨ch_timeouts
();

77 i‡(!
timeouts
 || !timeouts->
√xt
) {

78 
	`UNLOCK_TCPIP_CORE
();

79 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 0);

80 
	`LOCK_TCPIP_CORE
();

82 i‡(
timeouts
->
√xt
->
time
 > 0) {

83 
	`UNLOCK_TCPIP_CORE
();

84 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
timeouts
->
√xt
->
time
);

85 
	`LOCK_TCPIP_CORE
();

87 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

90 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

94 
tm±imeout
 = 
timeouts
->
√xt
;

95 
timeouts
->
√xt
 = 
tm±imeout
->next;

96 
h
 = 
tm±imeout
->h;

97 
¨g
 = 
tm±imeout
->arg;

98 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

99 i‡(
h
 !
NULL
) {

100 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sm‡ˇŒög h=%p(%p)\n", (*)&
h
, 
¨g
));

101 
	`h
(
¨g
);

105 
agaö
;

110 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

111 
timeouts
->
√xt
->
time
 -
time_√eded
;

113 
timeouts
->
√xt
->
time
 = 0;

117 
	}
}

126 
	$sys_£m_waô
(
sys_£m_t
 
£m
)

128 
u32_t
 
time_√eded
;

129 
sys_timeouts
 *
timeouts
;

130 
sys_timeo
 *
tm±imeout
;

131 
sys_timeout_h™dÀr
 
h
;

132 *
¨g
;

134 
agaö
:

136 
timeouts
 = 
	`sys_¨ch_timeouts
();

138 i‡(!
timeouts
 || !timeouts->
√xt
) {

139 
	`sys_¨ch_£m_waô
(
£m
, 0);

141 i‡(
timeouts
->
√xt
->
time
 > 0) {

142 
time_√eded
 = 
	`sys_¨ch_£m_waô
(
£m
, 
timeouts
->
√xt
->
time
);

144 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

147 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

151 
tm±imeout
 = 
timeouts
->
√xt
;

152 
timeouts
->
√xt
 = 
tm±imeout
->next;

153 
h
 = 
tm±imeout
->h;

154 
¨g
 = 
tm±imeout
->arg;

155 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

156 i‡(
h
 !
NULL
) {

157 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("ssw h=%p(%p)\n", (*)&
h
, (*)
¨g
));

158 
	`h
(
¨g
);

162 
agaö
;

167 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

168 
timeouts
->
√xt
->
time
 -
time_√eded
;

170 
timeouts
->
√xt
->
time
 = 0;

174 
	}
}

188 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

190 
sys_timeouts
 *
timeouts
;

191 
sys_timeo
 *
timeout
, *
t
;

193 
timeout
 = 
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
);

194 i‡(
timeout
 =
NULL
) {

195 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL", 
timeout
 !
NULL
);

198 
timeout
->
√xt
 = 
NULL
;

199 
timeout
->
h
 = h;

200 
timeout
->
¨g
 =árg;

201 
timeout
->
time
 = 
m£cs
;

203 
timeouts
 = 
	`sys_¨ch_timeouts
();

205 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" h=%párg=%p\n",

206 (*)
timeout
, 
m£cs
, (*)&
h
, (*)
¨g
));

208 i‡(
timeouts
 =
NULL
) {

209 
	`LWIP_ASSERT
("sys_timeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

213 i‡(
timeouts
->
√xt
 =
NULL
) {

214 
timeouts
->
√xt
 = 
timeout
;

218 i‡(
timeouts
->
√xt
->
time
 > 
m£cs
) {

219 
timeouts
->
√xt
->
time
 -
m£cs
;

220 
timeout
->
√xt
 = 
timeouts
->next;

221 
timeouts
->
√xt
 = 
timeout
;

223 
t
 = 
timeouts
->
√xt
;Å !
NULL
;Å =Å->next) {

224 
timeout
->
time
 -
t
->time;

225 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

226 i‡(
t
->
√xt
 !
NULL
) {

227 
t
->
√xt
->
time
 -
timeout
->time;

229 
timeout
->
√xt
 = 
t
->next;

230 
t
->
√xt
 = 
timeout
;

235 
	}
}

248 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

250 
sys_timeouts
 *
timeouts
;

251 
sys_timeo
 *
¥ev_t
, *
t
;

253 
timeouts
 = 
	`sys_¨ch_timeouts
();

255 i‡(
timeouts
 =
NULL
) {

256 
	`LWIP_ASSERT
("sys_u¡imeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

259 i‡(
timeouts
->
√xt
 =
NULL
) {

263 
t
 = 
timeouts
->
√xt
, 
¥ev_t
 = 
NULL
;Å != NULL;Örev_t =Å,Å =Å->next) {

264 i‡((
t
->
h
 =hË&& (t->
¨g
 ==árg)) {

267 i‡(
¥ev_t
 =
NULL
)

268 
timeouts
->
√xt
 = 
t
->next;

270 
¥ev_t
->
√xt
 = 
t
->next;

272 i‡(
t
->
√xt
 !
NULL
)

273 
t
->
√xt
->
time
 +=Å->time;

274 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
);

279 
	}
}

287 
	$sswt_h™dÀr
(*
¨g
)

289 
sswt_cb
 *sswt_cb = (sswt_cb *Ë
¨g
;

292 
sswt_cb
->
timeÊag
 = 1;

293 
	`sys_£m_sig«l
(*(
sswt_cb
->
p£m
));

294 
	}
}

304 
	$sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
)

306 
sswt_cb
 sswt_cb;

308 
sswt_cb
.
p£m
 = &
£m
;

309 
sswt_cb
.
timeÊag
 = 0;

312 i‡(
timeout
 > 0) {

314 
	`sys_timeout
(
timeout
, 
sswt_h™dÀr
, &
sswt_cb
);

316 
	`sys_£m_waô
(
£m
);

318 i‡(
sswt_cb
.
timeÊag
) {

323 
	`sys_u¡imeout
(
sswt_h™dÀr
, &
sswt_cb
);

326 
	}
}

334 
	$sys_m¶ìp
(
u32_t
 
ms
)

336 
sys_£m_t
 
dñay£m
 = 
	`sys_£m_√w
(0);

338 
	`sys_£m_waô_timeout
(
dñay£m
, 
ms
);

340 
	`sys_£m_‰ì
(
dñay£m
);

341 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/tcp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_TCP


47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/¢mp.h
"

51 
	~"lwù/t˝.h
"

52 
	~"lwù/debug.h
"

54 
	~<°rög.h
>

57 
u32_t
 
	gt˝_ticks
;

58 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

61 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

66 
t˝_pcb
 *
	gt˝_bound_pcbs
;

68 
t˝_li°í_pcbs_t
 
	gt˝_li°í_pcbs
;

71 
t˝_pcb
 *
	gt˝_a˘ive_pcbs
;

73 
t˝_pcb
 *
	gt˝_tw_pcbs
;

75 
t˝_pcb
 *
	gt˝_tmp_pcb
;

77 
u8_t
 
	gt˝_timî
;

78 
u16_t
 
t˝_√w_p‹t
();

85 
	$t˝_tmr
()

88 
	`t˝_Á°tmr
();

90 i‡(++
t˝_timî
 & 1) {

93 
	`t˝_¶owtmr
();

95 
	}
}

111 
îr_t


112 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

114 
îr_t
 
îr
;

116 #i‡
TCP_DEBUG


117 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

118 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

121 
pcb
->
°©e
) {

122 
CLOSED
:

130 
îr
 = 
ERR_OK
;

131 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

132 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

133 
pcb
 = 
NULL
;

135 
LISTEN
:

136 
îr
 = 
ERR_OK
;

137 
	`t˝_pcb_ªmove
((
t˝_pcb
 **)&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

138 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
);

139 
pcb
 = 
NULL
;

141 
SYN_SENT
:

142 
îr
 = 
ERR_OK
;

143 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

144 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

145 
pcb
 = 
NULL
;

146 
	`¢mp_öc_t˝©ãm±Áûs
();

148 
SYN_RCVD
:

149 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

150 i‡(
îr
 =
ERR_OK
) {

151 
	`¢mp_öc_t˝©ãm±Áûs
();

152 
pcb
->
°©e
 = 
FIN_WAIT_1
;

155 
ESTABLISHED
:

156 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

157 i‡(
îr
 =
ERR_OK
) {

158 
	`¢mp_öc_t˝e°abª£ts
();

159 
pcb
->
°©e
 = 
FIN_WAIT_1
;

162 
CLOSE_WAIT
:

163 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

164 i‡(
îr
 =
ERR_OK
) {

165 
	`¢mp_öc_t˝e°abª£ts
();

166 
pcb
->
°©e
 = 
LAST_ACK
;

171 
îr
 = 
ERR_OK
;

172 
pcb
 = 
NULL
;

176 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

184 
	`t˝_ouçut
(
pcb
);

186  
îr
;

187 
	}
}

198 
	$t˝_ab™d⁄
(
t˝_pcb
 *
pcb
, 
ª£t
)

200 
u32_t
 
£qno
, 
ackno
;

201 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

202 
ù_addr
 
ªmŸe_ù
, 
loˇl_ù
;

203 #i‡
LWIP_CALLBACK_API


204 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

206 *
îrf_¨g
;

212 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

213 
	`t˝_pcb_ªmove
(&
t˝_tw_pcbs
, 
pcb
);

214 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

216 
£qno
 = 
pcb
->
¢d_nxt
;

217 
ackno
 = 
pcb
->
rcv_nxt
;

218 
	`ù_addr_£t
(&
loˇl_ù
, &(
pcb
->local_ip));

219 
	`ù_addr_£t
(&
ªmŸe_ù
, &(
pcb
->remote_ip));

220 
loˇl_p‹t
 = 
pcb
->local_port;

221 
ªmŸe_p‹t
 = 
pcb
->remote_port;

222 #i‡
LWIP_CALLBACK_API


223 
îrf
 = 
pcb
->errf;

225 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

226 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

227 i‡(
pcb
->
u«cked
 !
NULL
) {

228 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

230 i‡(
pcb
->
un£¡
 !
NULL
) {

231 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

233 #i‡
TCP_QUEUE_OOSEQ


234 i‡(
pcb
->
oo£q
 !
NULL
) {

235 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

238 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

239 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

240 i‡(
ª£t
) {

241 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abandon: sending RST\n"));

242 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

245 
	}
}

260 
îr_t


261 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

263 
t˝_pcb
 *
˝cb
;

265 
	`LWIP_ERROR
("t˝_böd: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

267 i‡(
p‹t
 == 0) {

268 
p‹t
 = 
	`t˝_√w_p‹t
();

272 
˝cb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;

273 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

274 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

275 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

276 
	`ù_addr_ißny
(
ùaddr
) ||

277 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

278  
ERR_USE
;

283 
˝cb
 = 
t˝_a˘ive_pcbs
;

284 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

285 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

286 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

287 
	`ù_addr_ißny
(
ùaddr
) ||

288 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

289  
ERR_USE
;

294 
˝cb
 = 
t˝_bound_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

295 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

296 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

297 
	`ù_addr_ißny
(
ùaddr
) ||

298 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

299  
ERR_USE
;

305 
˝cb
 = 
t˝_tw_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

306 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

307 i‡(
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

308  
ERR_USE
;

313 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

314 
pcb
->
loˇl_ù
 = *
ùaddr
;

316 
pcb
->
loˇl_p‹t
 = 
p‹t
;

317 
	`TCP_REG
(&
t˝_bound_pcbs
, 
pcb
);

318 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

319  
ERR_OK
;

320 
	}
}

321 #i‡
LWIP_CALLBACK_API


325 
îr_t


326 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

328 
	`LWIP_UNUSED_ARG
(
¨g
);

329 
	`LWIP_UNUSED_ARG
(
pcb
);

330 
	`LWIP_UNUSED_ARG
(
îr
);

332  
ERR_ABRT
;

333 
	}
}

350 
t˝_pcb
 *

351 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

353 
t˝_pcb_li°í
 *
Õcb
;

355 
	`LWIP_UNUSED_ARG
(
backlog
);

356 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

359 i‡(
pcb
->
°©e
 =
LISTEN
) {

360  
pcb
;

362 
Õcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
);

363 i‡(
Õcb
 =
NULL
) {

364  
NULL
;

366 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

367 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

368 
Õcb
->
°©e
 = 
LISTEN
;

369 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

370 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

371 
Õcb
->
âl
 = 
pcb
->ttl;

372 
Õcb
->
tos
 = 
pcb
->tos;

373 
	`ù_addr_£t
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip);

374 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

375 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

376 #i‡
LWIP_CALLBACK_API


377 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

379 #i‡
TCP_LISTEN_BACKLOG


380 
Õcb
->
ac˚±s_≥ndög
 = 0;

381 
Õcb
->
backlog
 = (backlog ? backlog : 1);

383 
	`TCP_REG
(&
t˝_li°í_pcbs
.
li°í_pcbs
, 
Õcb
);

384  (
t˝_pcb
 *)
Õcb
;

385 
	}
}

393 
u32_t
 
	$t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
)

395 
u32_t
 
√w_right_edge
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
;

397 i‡(
	`TCP_SEQ_GEQ
(
√w_right_edge
, 
pcb
->
rcv_™n_right_edge
 +Öcb->
mss
)) {

399 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

400  
√w_right_edge
 - 
pcb
->
rcv_™n_right_edge
;

402 i‡(
	`TCP_SEQ_GT
(
pcb
->
rcv_nxt
,Öcb->
rcv_™n_right_edge
)) {

405 
pcb
->
rcv_™n_wnd
 = 0;

408 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_™n_right_edge
 -Öcb->
rcv_nxt
;

412 
	}
}

423 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

425 
wnd_öÊ©i⁄
;

427 
	`LWIP_ASSERT
("tcp_recved:Üen would wrapÑcv_wnd\n",

428 
Àn
 <0xfff‡- 
pcb
->
rcv_wnd
 );

430 
pcb
->
rcv_wnd
 +
Àn
;

431 i‡(
pcb
->
rcv_wnd
 > 
TCP_WND
)

432 
pcb
->
rcv_wnd
 = 
TCP_WND
;

434 
wnd_öÊ©i⁄
 = 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

440 i‡(
wnd_öÊ©i⁄
 >
TCP_WND_UPDATE_THRESHOLD
)

441 
	`t˝_ack_now
(
pcb
);

443 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

444 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

445 
	}
}

453 
u16_t


454 
	$t˝_√w_p‹t
()

456 
t˝_pcb
 *
pcb
;

457 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


458 
	#TCP_LOCAL_PORT_RANGE_START
 4096

	)

459 
	#TCP_LOCAL_PORT_RANGE_END
 0x7fff

	)

461 
u16_t
 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

463 
agaö
:

464 i‡(++
p‹t
 > 
TCP_LOCAL_PORT_RANGE_END
) {

465 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

468 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

469 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

470 
agaö
;

473 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

474 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

475 
agaö
;

478 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

479 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

480 
agaö
;

483  
p‹t
;

484 
	}
}

498 
îr_t


499 
	$t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
,

500 
	$îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
îr_t
 
îr
))

502 
îr_t
 
ªt
;

503 
u32_t
 
iss
;

505 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ed from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

507 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

508 i‡(
ùaddr
 !
NULL
) {

509 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

511  
ERR_VAL
;

513 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

514 i‡(
pcb
->
loˇl_p‹t
 == 0) {

515 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

517 
iss
 = 
	`t˝_√xt_iss
();

518 
pcb
->
rcv_nxt
 = 0;

519 
pcb
->
¢d_nxt
 = 
iss
;

520 
pcb
->
œ°ack
 = 
iss
 - 1;

521 
pcb
->
¢d_lbb
 = 
iss
 - 1;

522 
pcb
->
rcv_wnd
 = 
TCP_WND
;

523 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

524 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

525 
pcb
->
¢d_wnd
 = 
TCP_WND
;

528 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

529 #i‡
TCP_CALCULATE_EFF_SEND_MSS


530 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

532 
pcb
->
cwnd
 = 1;

533 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

534 
pcb
->
°©e
 = 
SYN_SENT
;

535 #i‡
LWIP_CALLBACK_API


536 
pcb
->
c⁄√˘ed
 = connected;

538 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

539 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

541 
	`¢mp_öc_t˝a˘ive›ís
();

543 
ªt
 = 
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
TCP_SYN
, 0, 
TF_SEG_OPTS_MSS


544 #i‡
LWIP_TCP_TIMESTAMPS


545 | 
TF_SEG_OPTS_TS


548 i‡(
ªt
 =
ERR_OK
) {

549 
	`t˝_ouçut
(
pcb
);

551  
ªt
;

552 
	}
}

562 
	$t˝_¶owtmr
()

564 
t˝_pcb
 *
pcb
, *
pcb2
, *
¥ev
;

565 
u16_t
 
eff_wnd
;

566 
u8_t
 
pcb_ªmove
;

567 
îr_t
 
îr
;

569 
îr
 = 
ERR_OK
;

571 ++
t˝_ticks
;

574 
¥ev
 = 
NULL
;

575 
pcb
 = 
t˝_a˘ive_pcbs
;

576 i‡(
pcb
 =
NULL
) {

577 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

579 
pcb
 !
NULL
) {

580 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

581 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

582 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

583 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

585 
pcb_ªmove
 = 0;

587 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

588 ++
pcb_ªmove
;

589 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

591 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

592 ++
pcb_ªmove
;

593 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

595 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

598 
pcb
->
≥rsi°_˙t
++;

599 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

600 
pcb
->
≥rsi°_˙t
 = 0;

601 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

602 
pcb
->
≥rsi°_backoff
++;

604 
	`t˝_zîo_wödow_¥obe
(
pcb
);

608 if(
pcb
->
πime
 >= 0)

609 ++
pcb
->
πime
;

611 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

613 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


614 "Öcb->πÿ%"
S16_F
"\n",

615 
pcb
->
πime
,Öcb->
πo
));

619 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

620 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

624 
pcb
->
πime
 = 0;

627 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

628 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

629 i‡(
pcb
->
s°hªsh
 <Öcb->
mss
) {

630 
pcb
->
s°hªsh
 =Öcb->
mss
 * 2;

632 
pcb
->
cwnd
 =Öcb->
mss
;

633 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


634 " s°hªsh %"
U16_F
"\n",

635 
pcb
->
cwnd
,Öcb->
s°hªsh
));

639 
	`t˝_ªxmô_πo
(
pcb
);

644 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

645 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

646 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

647 ++
pcb_ªmove
;

648 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

653 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

654 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

655 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

656 #i‡
LWIP_TCP_KEEPALIVE


657 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

658 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

659 / 
TCP_SLOW_INTERVAL
)

661 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

662 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

665 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

666 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

667 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

669 
	`t˝_ab‹t
(
pcb
);

671 #i‡
LWIP_TCP_KEEPALIVE


672 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

673 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

674 / 
TCP_SLOW_INTERVAL
)

676 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

677 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

678 / 
TCP_SLOW_INTERVAL
)

681 
	`t˝_kì∑live
(
pcb
);

682 
pcb
->
kìp_˙t_£¡
++;

689 #i‡
TCP_QUEUE_OOSEQ


690 i‡(
pcb
->
oo£q
 !
NULL
 &&

691 (
u32_t
)
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

692 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

693 
pcb
->
oo£q
 = 
NULL
;

694 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

699 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

700 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

701 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

702 ++
pcb_ªmove
;

703 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

708 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

709 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

710 ++
pcb_ªmove
;

711 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

716 i‡(
pcb_ªmove
) {

717 
	`t˝_pcb_purge
(
pcb
);

719 i‡(
¥ev
 !
NULL
) {

720 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
t˝_a˘ive_pcbs
);

721 
¥ev
->
√xt
 = 
pcb
->next;

724 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
t˝_a˘ive_pcbs
 =
pcb
);

725 
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

728 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

730 
pcb2
 = 
pcb
->
√xt
;

731 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

732 
pcb
 = 
pcb2
;

736 ++
pcb
->
pﬁ…mr
;

737 i‡(
pcb
->
pﬁ…mr
 >pcb->
pﬁlöãrvÆ
) {

738 
pcb
->
pﬁ…mr
 = 0;

739 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

740 
	`TCP_EVENT_POLL
(
pcb
, 
îr
);

741 i‡(
îr
 =
ERR_OK
) {

742 
	`t˝_ouçut
(
pcb
);

746 
¥ev
 = 
pcb
;

747 
pcb
 =Öcb->
√xt
;

753 
¥ev
 = 
NULL
;

754 
pcb
 = 
t˝_tw_pcbs
;

755 
pcb
 !
NULL
) {

756 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

757 
pcb_ªmove
 = 0;

760 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

761 ++
pcb_ªmove
;

767 i‡(
pcb_ªmove
) {

768 
	`t˝_pcb_purge
(
pcb
);

770 i‡(
¥ev
 !
NULL
) {

771 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
t˝_tw_pcbs
);

772 
¥ev
->
√xt
 = 
pcb
->next;

775 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
t˝_tw_pcbs
 =
pcb
);

776 
t˝_tw_pcbs
 = 
pcb
->
√xt
;

778 
pcb2
 = 
pcb
->
√xt
;

779 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

780 
pcb
 = 
pcb2
;

782 
¥ev
 = 
pcb
;

783 
pcb
 =Öcb->
√xt
;

786 
	}
}

795 
	$t˝_Á°tmr
()

797 
t˝_pcb
 *
pcb
;

799 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

801 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

803 
îr_t
 
îr
;

804 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

805 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

806 i‡(
îr
 =
ERR_OK
) {

807 
pcb
->
ªfu£d_d©a
 = 
NULL
;

812 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

813 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

814 
	`t˝_ack_now
(
pcb
);

815 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

818 
	}
}

826 
u8_t


827 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

829 
u8_t
 
cou¡
 = 0;

830 
t˝_£g
 *
√xt
;

831 
£g
 !
NULL
) {

832 
√xt
 = 
£g
->next;

833 
cou¡
 +
	`t˝_£g_‰ì
(
£g
);

834 
£g
 = 
√xt
;

836  
cou¡
;

837 
	}
}

845 
u8_t


846 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

848 
u8_t
 
cou¡
 = 0;

850 i‡(
£g
 !
NULL
) {

851 i‡(
£g
->
p
 !
NULL
) {

852 
cou¡
 = 
	`pbuf_‰ì
(
£g
->
p
);

853 #i‡
TCP_DEBUG


854 
£g
->
p
 = 
NULL
;

857 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
);

859  
cou¡
;

860 
	}
}

869 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

871 
pcb
->
¥io
 =Örio;

872 
	}
}

873 #i‡
TCP_QUEUE_OOSEQ


882 
t˝_£g
 *

883 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

885 
t˝_£g
 *
c£g
;

887 
c£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

888 i‡(
c£g
 =
NULL
) {

889  
NULL
;

891 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

892 
	`pbuf_ªf
(
c£g
->
p
);

893  
c£g
;

894 
	}
}

897 #i‡
LWIP_CALLBACK_API


902 
îr_t


903 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

905 
¨g
 =árg;

906 i‡(
p
 !
NULL
) {

907 
	`pbuf_‰ì
(
p
);

908 } i‡(
îr
 =
ERR_OK
) {

909  
	`t˝_˛o£
(
pcb
);

911  
ERR_OK
;

912 
	}
}

921 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

923 
t˝_pcb
 *
pcb
, *
öa˘ive
;

924 
u32_t
 
öa˘ivôy
;

925 
u8_t
 
m¥io
;

928 
m¥io
 = 
TCP_PRIO_MAX
;

931 
öa˘ivôy
 = 0;

932 
öa˘ive
 = 
NULL
;

933 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

934 i‡(
pcb
->
¥io
 <=Örio &&

935 
pcb
->
¥io
 <
m¥io
 &&

936 (
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

937 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

938 
öa˘ive
 = 
pcb
;

939 
m¥io
 = 
pcb
->
¥io
;

942 i‡(
öa˘ive
 !
NULL
) {

943 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

944 (*)
öa˘ive
, 
öa˘ivôy
));

945 
	`t˝_ab‹t
(
öa˘ive
);

947 
	}
}

954 
	$t˝_kûl_timewaô
()

956 
t˝_pcb
 *
pcb
, *
öa˘ive
;

957 
u32_t
 
öa˘ivôy
;

959 
öa˘ivôy
 = 0;

960 
öa˘ive
 = 
NULL
;

962 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

963 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

964 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

965 
öa˘ive
 = 
pcb
;

968 i‡(
öa˘ive
 !
NULL
) {

969 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

970 (*)
öa˘ive
, 
öa˘ivôy
));

971 
	`t˝_ab‹t
(
öa˘ive
);

973 
	}
}

981 
t˝_pcb
 *

982 
	$t˝_Æloc
(
u8_t
 
¥io
)

984 
t˝_pcb
 *
pcb
;

985 
u32_t
 
iss
;

987 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

988 i‡(
pcb
 =
NULL
) {

990 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

991 
	`t˝_kûl_timewaô
();

993 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

994 i‡(
pcb
 =
NULL
) {

996 
	`t˝_kûl_¥io
(
¥io
);

998 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

1001 i‡(
pcb
 !
NULL
) {

1002 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

1003 
pcb
->
¥io
 = 
TCP_PRIO_NORMAL
;

1004 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

1005 
pcb
->
¢d_queuñí
 = 0;

1006 
pcb
->
rcv_wnd
 = 
TCP_WND
;

1007 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

1008 
pcb
->
tos
 = 0;

1009 
pcb
->
âl
 = 
TCP_TTL
;

1012 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

1013 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

1014 
pcb
->
ß
 = 0;

1015 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1016 
pcb
->
πime
 = -1;

1017 
pcb
->
cwnd
 = 1;

1018 
iss
 = 
	`t˝_√xt_iss
();

1019 
pcb
->
¢d_wl2
 = 
iss
;

1020 
pcb
->
¢d_nxt
 = 
iss
;

1021 
pcb
->
œ°ack
 = 
iss
;

1022 
pcb
->
¢d_lbb
 = 
iss
;

1023 
pcb
->
tmr
 = 
t˝_ticks
;

1025 
pcb
->
pﬁ…mr
 = 0;

1027 #i‡
LWIP_CALLBACK_API


1028 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1032 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1034 #i‡
LWIP_TCP_KEEPALIVE


1035 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1036 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1039 
pcb
->
kìp_˙t_£¡
 = 0;

1041  
pcb
;

1042 
	}
}

1056 
t˝_pcb
 *

1057 
	$t˝_√w
()

1059  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1060 
	}
}

1070 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1072 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1073 
	}
}

1074 #i‡
LWIP_CALLBACK_API


1084 
	$t˝_ªcv
(
t˝_pcb
 *
pcb
,

1085 
	$îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
pbuf
 *
p
, 
îr_t
 
îr
))

1087 
pcb
->
ªcv
 =Ñecv;

1088 
	}
}

1098 
	$t˝_£¡
(
t˝_pcb
 *
pcb
,

1099 
	$îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
u16_t
 
Àn
))

1101 
pcb
->
£¡
 = sent;

1102 
	}
}

1113 
	$t˝_îr
(
t˝_pcb
 *
pcb
,

1114 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
))

1116 
pcb
->
îrf
 =Érrf;

1117 
	}
}

1128 
	$t˝_ac˚±
(
t˝_pcb
 *
pcb
,

1129 
	$îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
))

1131 
pcb
->
ac˚±
 =áccept;

1132 
	}
}

1143 
	$t˝_pﬁl
(
t˝_pcb
 *
pcb
,

1144 
	$îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
), 
u8_t
 
öãrvÆ
)

1146 #i‡
LWIP_CALLBACK_API


1147 
pcb
->
pﬁl
 =Öoll;

1149 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1150 
	}
}

1159 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1161 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1162 
pcb
->
°©e
 !
TIME_WAIT
 &&

1163 
pcb
->
°©e
 !
LISTEN
) {

1165 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1167 #i‡
TCP_LISTEN_BACKLOG


1168 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

1170 
t˝_pcb_li°í
 *
Õcb
;

1171 
	`LWIP_ASSERT
("tcp_pcb_purge:Öcb->state == SYN_RCVD butÅcp_listen_pcbs is NULL",

1172 
t˝_li°í_pcbs
.
li°í_pcbs
 !
NULL
);

1173 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

1174 i‡((
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) &&

1175 (
	`ù_addr_ißny
(&
Õcb
->
loˇl_ù
) ||

1176 
	`ù_addr_cmp
(&
pcb
->
loˇl_ù
, &
Õcb
->local_ip))) {

1178 
	`LWIP_ASSERT
("tcp_pcb_purge:ÜistenÖcb doesÇot haveácceptsÖending",

1179 
Õcb
->
ac˚±s_≥ndög
 > 0);

1180 
Õcb
->
ac˚±s_≥ndög
--;

1188 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1189 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1190 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

1191 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1193 i‡(
pcb
->
un£¡
 !
NULL
) {

1194 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1196 i‡(
pcb
->
u«cked
 !
NULL
) {

1197 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1199 #i‡
TCP_QUEUE_OOSEQ


1200 i‡(
pcb
->
oo£q
 !
NULL
) {

1201 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1206 
pcb
->
πime
 = -1;

1208 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1209 
pcb
->
oo£q
 = 
NULL
;

1211 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1212 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1213 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1215 
	}
}

1224 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1226 
	`TCP_RMV
(
pcbli°
, 
pcb
);

1228 
	`t˝_pcb_purge
(
pcb
);

1231 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1232 
pcb
->
°©e
 !
LISTEN
 &&

1233 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1234 
pcb
->
Êags
 |
TF_ACK_NOW
;

1235 
	`t˝_ouçut
(
pcb
);

1238 i‡(
pcb
->
°©e
 !
LISTEN
) {

1239 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1240 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1241 #i‡
TCP_QUEUE_OOSEQ


1242 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1246 
pcb
->
°©e
 = 
CLOSED
;

1248 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1249 
	}
}

1256 
u32_t


1257 
	$t˝_√xt_iss
()

1259 
u32_t
 
iss
 = 6510;

1261 
iss
 +
t˝_ticks
;

1262  
iss
;

1263 
	}
}

1265 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1271 
u16_t


1272 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr
 *
addr
)

1274 
u16_t
 
mss_s
;

1275 
√tif
 *
outif
;

1277 
outif
 = 
	`ù_rouã
(
addr
);

1278 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1279 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1285 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1287  
£ndmss
;

1288 
	}
}

1291 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1298 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1300 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1301 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1302 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1303 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1304 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1305 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1306 
	`¡ohl
(
t˝hdr
->
£qno
)));

1307 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1308 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1309 
	`¡ohl
(
t˝hdr
->
ackno
)));

1310 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1311 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1312 
	`TCPH_HDRLEN
(
t˝hdr
),

1313 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1314 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1315 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1316 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1317 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1318 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1319 
	`¡ohs
(
t˝hdr
->
wnd
)));

1320 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1321 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1322 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1323 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1324 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1325 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1326 
	}
}

1334 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1336 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("State: "));

1337 
s
) {

1338 
CLOSED
:

1339 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSED\n"));

1341 
LISTEN
:

1342 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LISTEN\n"));

1344 
SYN_SENT
:

1345 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_SENT\n"));

1347 
SYN_RCVD
:

1348 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_RCVD\n"));

1350 
ESTABLISHED
:

1351 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ESTABLISHED\n"));

1353 
FIN_WAIT_1
:

1354 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_1\n"));

1356 
FIN_WAIT_2
:

1357 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_2\n"));

1359 
CLOSE_WAIT
:

1360 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSE_WAIT\n"));

1362 
CLOSING
:

1363 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSING\n"));

1365 
LAST_ACK
:

1366 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LAST_ACK\n"));

1368 
TIME_WAIT
:

1369 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME_WAIT\n"));

1372 
	}
}

1380 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1382 i‡(
Êags
 & 
TCP_FIN
) {

1383 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1385 i‡(
Êags
 & 
TCP_SYN
) {

1386 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1388 i‡(
Êags
 & 
TCP_RST
) {

1389 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1391 i‡(
Êags
 & 
TCP_PSH
) {

1392 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1394 i‡(
Êags
 & 
TCP_ACK
) {

1395 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1397 i‡(
Êags
 & 
TCP_URG
) {

1398 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1400 i‡(
Êags
 & 
TCP_ECE
) {

1401 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1403 i‡(
Êags
 & 
TCP_CWR
) {

1404 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1406 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("\n"));

1407 
	}
}

1413 
	$t˝_debug_¥öt_pcbs
()

1415 
t˝_pcb
 *
pcb
;

1416 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1417 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1418 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1419 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1420 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1421 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1423 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1424 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1425 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1426 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1427 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1428 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1430 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1431 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1432 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1433 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1434 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1435 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1437 
	}
}

1442 
s16_t


1443 
	$t˝_pcbs_ß√
()

1445 
t˝_pcb
 *
pcb
;

1446 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1447 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1448 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1449 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1451 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1452 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1455 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/tcp_in.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/t˝.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/memp.h
"

54 
	~"lwù/öë.h
"

55 
	~"lwù/öë_chksum.h
"

56 
	~"lwù/°©s.h
"

57 
	~"lwù/¢mp.h
"

58 
	~"¨ch/≥rf.h
"

63 
t˝_£g
 
	gö£g
;

64 
t˝_hdr
 *
	gt˝hdr
;

65 
ù_hdr
 *
	gùhdr
;

66 
u32_t
 
	g£qno
, 
	gackno
;

67 
u8_t
 
	gÊags
;

68 
u16_t
 
	gt˝Àn
;

70 
u8_t
 
	gªcv_Êags
;

71 
pbuf
 *
	gªcv_d©a
;

73 
t˝_pcb
 *
	gt˝_öput_pcb
;

76 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
);

77 
u8_t
 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
);

78 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
);

80 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
);

81 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
);

93 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

95 
t˝_pcb
 *
pcb
, *
¥ev
;

96 
t˝_pcb_li°í
 *
Õcb
;

97 
u8_t
 
hdæí
;

98 
îr_t
 
îr
;

100 
PERF_START
;

102 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

103 
	`¢mp_öc_t˝ö£gs
();

105 
ùhdr
 = 
p
->
∑ylﬂd
;

106 
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(
ùhdr
) * 4);

108 #i‡
TCP_INPUT_DEBUG


109 
	`t˝_debug_¥öt
(
t˝hdr
);

113 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

115 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

116 
	`TCP_STATS_INC
(
t˝
.
À√º
);

117 
	`TCP_STATS_INC
(
t˝
.
dr›
);

118 
	`¢mp_öc_t˝öîrs
();

119 
	`pbuf_‰ì
(
p
);

124 i‡(
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) ||

125 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

126 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

127 
	`TCP_STATS_INC
(
t˝
.
dr›
);

128 
	`¢mp_öc_t˝öîrs
();

129 
	`pbuf_‰ì
(
p
);

133 #i‡
CHECKSUM_CHECK_TCP


135 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

136 (
ù_addr
 *)&(
ùhdr
->
de°
),

137 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

138 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

139 
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
), (ù_add∏*)&(ùhdr->
de°
),

140 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

141 #i‡
TCP_DEBUG


142 
	`t˝_debug_¥öt
(
t˝hdr
);

144 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

145 
	`TCP_STATS_INC
(
t˝
.
dr›
);

146 
	`¢mp_öc_t˝öîrs
();

147 
	`pbuf_‰ì
(
p
);

154 
hdæí
 = 
	`TCPH_HDRLEN
(
t˝hdr
);

155 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

157 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

158 
	`TCP_STATS_INC
(
t˝
.
À√º
);

159 
	`TCP_STATS_INC
(
t˝
.
dr›
);

160 
	`¢mp_öc_t˝öîrs
();

161 
	`pbuf_‰ì
(
p
);

166 
t˝hdr
->
§c
 = 
	`¡ohs
(tcphdr->src);

167 
t˝hdr
->
de°
 = 
	`¡ohs
(tcphdr->dest);

168 
£qno
 = 
t˝hdr
->£qnÿ
	`¡ohl
(tcphdr->seqno);

169 
ackno
 = 
t˝hdr
->acknÿ
	`¡ohl
(tcphdr->ackno);

170 
t˝hdr
->
wnd
 = 
	`¡ohs
(tcphdr->wnd);

172 
Êags
 = 
	`TCPH_FLAGS
(
t˝hdr
);

173 
t˝Àn
 = 
p
->
tŸ_Àn
 + ((
Êags
 & (
TCP_FIN
 | 
TCP_SYN
)) ? 1 : 0);

177 
¥ev
 = 
NULL
;

180 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

181 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

182 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

183 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

184 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

185 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

186 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

187 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

192 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

193 i‡(
¥ev
 !
NULL
) {

194 
¥ev
->
√xt
 = 
pcb
->next;

195 
pcb
->
√xt
 = 
t˝_a˘ive_pcbs
;

196 
t˝_a˘ive_pcbs
 = 
pcb
;

198 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

201 
¥ev
 = 
pcb
;

204 i‡(
pcb
 =
NULL
) {

207 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

208 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

209 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

210 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

211 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

212 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

216 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

217 
	`t˝_timewaô_öput
(
pcb
);

218 
	`pbuf_‰ì
(
p
);

225 
¥ev
 = 
NULL
;

226 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

227 i‡((
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)) ||

228 
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) &&

229 
Õcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
) {

233 i‡(
¥ev
 !
NULL
) {

234 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

236 
Õcb
->
√xt
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;

238 
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

241 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

242 
	`t˝_li°í_öput
(
Õcb
);

243 
	`pbuf_‰ì
(
p
);

246 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

250 #i‡
TCP_INPUT_DEBUG


251 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

252 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

253 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

257 i‡(
pcb
 !
NULL
) {

259 #i‡
TCP_INPUT_DEBUG


260 #i‡
TCP_DEBUG


261 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

266 
ö£g
.
√xt
 = 
NULL
;

267 
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

268 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

269 
ö£g
.
p
 =Ö;

270 
ö£g
.
t˝hdr
 =Åcphdr;

272 
ªcv_d©a
 = 
NULL
;

273 
ªcv_Êags
 = 0;

276 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

278 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

279 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

280 i‡(
îr
 =
ERR_OK
) {

281 
pcb
->
ªfu£d_d©a
 = 
NULL
;

284 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

285 
	`TCP_STATS_INC
(
t˝
.
dr›
);

286 
	`¢mp_öc_t˝öîrs
();

287 
	`pbuf_‰ì
(
p
);

292 
t˝_öput_pcb
 = 
pcb
;

293 
îr
 = 
	`t˝_¥o˚ss
(
pcb
);

294 
t˝_öput_pcb
 = 
NULL
;

297 i‡(
îr
 !
ERR_ABRT
) {

298 i‡(
ªcv_Êags
 & 
TF_RESET
) {

303 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

304 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

305 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

306 } i‡(
ªcv_Êags
 & 
TF_CLOSED
) {

309 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

310 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

312 
îr
 = 
ERR_OK
;

316 i‡(
pcb
->
acked
 > 0) {

317 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

320 i‡(
ªcv_d©a
 !
NULL
) {

321 if(
Êags
 & 
TCP_PSH
) {

322 
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

326 
	`TCP_EVENT_RECV
(
pcb
, 
ªcv_d©a
, 
ERR_OK
, 
îr
);

329 i‡(
îr
 !
ERR_OK
) {

330 
pcb
->
ªfu£d_d©a
 = 
ªcv_d©a
;

331 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

337 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

338 
	`TCP_EVENT_RECV
(
pcb
, 
NULL
, 
ERR_OK
, 
îr
);

342 i‡(
îr
 =
ERR_OK
) {

343 
	`t˝_ouçut
(
pcb
);

350 i‡(
ö£g
.
p
 !
NULL
)

352 
	`pbuf_‰ì
(
ö£g
.
p
);

353 
ö£g
.
p
 = 
NULL
;

355 #i‡
TCP_INPUT_DEBUG


356 #i‡
TCP_DEBUG


357 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

365 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

366 i‡(!(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
)) {

367 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

368 
	`TCP_STATS_INC
(
t˝
.
dr›
);

369 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
,

370 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

371 
t˝hdr
->
de°
,Å˝hdr->
§c
);

373 
	`pbuf_‰ì
(
p
);

376 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

377 
	`PERF_STOP
("tcp_input");

378 
	}
}

392 
îr_t


393 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
)

395 
t˝_pcb
 *
≈cb
;

396 
îr_t
 
rc
;

400 i‡(
Êags
 & 
TCP_ACK
) {

403 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

404 
	`t˝_r°
(
ackno
 + 1, 
£qno
 + 
t˝Àn
,

405 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

406 
t˝hdr
->
de°
,Å˝hdr->
§c
);

407 } i‡(
Êags
 & 
TCP_SYN
) {

408 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
t˝hdr
->
§c
,Å˝hdr->
de°
));

409 #i‡
TCP_LISTEN_BACKLOG


410 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

411 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_li°í_öput:Üi°í backlogÉx˚eded f‹Ö‹à%"
U16_F
"\n", 
t˝hdr
->
de°
));

412  
ERR_ABRT
;

415 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

419 i‡(
≈cb
 =
NULL
) {

420 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

421 
	`TCP_STATS_INC
(
t˝
.
memîr
);

422  
ERR_MEM
;

424 #i‡
TCP_LISTEN_BACKLOG


425 
pcb
->
ac˚±s_≥ndög
++;

428 
	`ù_addr_£t
(&(
≈cb
->
loˇl_ù
), &(
ùhdr
->
de°
));

429 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

430 
	`ù_addr_£t
(&(
≈cb
->
ªmŸe_ù
), &(
ùhdr
->
§c
));

431 
≈cb
->
ªmŸe_p‹t
 = 
t˝hdr
->
§c
;

432 
≈cb
->
°©e
 = 
SYN_RCVD
;

433 
≈cb
->
rcv_nxt
 = 
£qno
 + 1;

434 
≈cb
->
rcv_™n_right_edge
 =Çpcb->
rcv_nxt
;

435 
≈cb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

436 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

437 
≈cb
->
¢d_wl1
 = 
£qno
 - 1;

438 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

439 #i‡
LWIP_CALLBACK_API


440 
≈cb
->
ac˚±
 = 
pcb
->accept;

443 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& (
SOF_DEBUG
|
SOF_DONTROUTE
|
SOF_KEEPALIVE
|
SOF_OOBINLINE
|
SOF_LINGER
);

446 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
);

449 
	`t˝_∑r£›t
(
≈cb
);

450 #i‡
TCP_CALCULATE_EFF_SEND_MSS


451 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

454 
	`¢mp_öc_t˝∑ssive›ís
();

457 
rc
 = 
	`t˝_íqueue
(
≈cb
, 
NULL
, 0, 
TCP_SYN
 | 
TCP_ACK
, 0, 
TF_SEG_OPTS_MSS


458 #i‡
LWIP_TCP_TIMESTAMPS


460 | (
≈cb
->
Êags
 & 
TF_TIMESTAMP
 ? 
TF_SEG_OPTS_TS
 : 0)

463 i‡(
rc
 !
ERR_OK
) {

464 
	`t˝_ab™d⁄
(
≈cb
, 0);

465  
rc
;

467  
	`t˝_ouçut
(
≈cb
);

469  
ERR_OK
;

470 
	}
}

481 
îr_t


482 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
)

484 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
t˝Àn
, 
pcb
->
rcv_nxt
)) {

485 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

487 i‡(
t˝Àn
 > 0) {

488 
	`t˝_ack_now
(
pcb
);

490  
	`t˝_ouçut
(
pcb
);

491 
	}
}

504 
îr_t


505 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
)

507 
t˝_£g
 *
r£g
;

508 
u8_t
 
ac˚±abÀ
 = 0;

509 
îr_t
 
îr
;

511 
îr
 = 
ERR_OK
;

514 i‡(
Êags
 & 
TCP_RST
) {

516 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

517 i‡(
ackno
 =
pcb
->
¢d_nxt
) {

518 
ac˚±abÀ
 = 1;

521 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

522 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

523 
ac˚±abÀ
 = 1;

527 i‡(
ac˚±abÀ
) {

528 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

529 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

530 
ªcv_Êags
 |
TF_RESET
;

531 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

532  
ERR_RST
;

534 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

535 
£qno
, 
pcb
->
rcv_nxt
));

536 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

537 
£qno
, 
pcb
->
rcv_nxt
));

538  
ERR_OK
;

542 i‡((
Êags
 & 
TCP_SYN
Ë&& (
pcb
->
°©e
 !
SYN_SENT
 &&Öcb->°©ê!
SYN_RCVD
)) {

544 
	`t˝_ack_now
(
pcb
);

545  
ERR_OK
;

549 
pcb
->
tmr
 = 
t˝_ticks
;

550 
pcb
->
kìp_˙t_£¡
 = 0;

552 
	`t˝_∑r£›t
(
pcb
);

555 
pcb
->
°©e
) {

556 
SYN_SENT
:

557 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ackno
,

558 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

560 i‡((
Êags
 & 
TCP_ACK
Ë&& (Êag†& 
TCP_SYN
)

561 && 
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

562 
pcb
->
¢d_buf
++;

563 
pcb
->
rcv_nxt
 = 
£qno
 + 1;

564 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

565 
pcb
->
œ°ack
 = 
ackno
;

566 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

567 
pcb
->
¢d_wl1
 = 
£qno
 - 1;

568 
pcb
->
°©e
 = 
ESTABLISHED
;

570 #i‡
TCP_CALCULATE_EFF_SEND_MSS


571 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

576 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

578 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

579 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

580 --
pcb
->
¢d_queuñí
;

581 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

582 
r£g
 = 
pcb
->
u«cked
;

583 
pcb
->
u«cked
 = 
r£g
->
√xt
;

587 if(
pcb
->
u«cked
 =
NULL
)

588 
pcb
->
πime
 = -1;

590 
pcb
->
πime
 = 0;

591 
pcb
->
ƒtx
 = 0;

594 
	`t˝_£g_‰ì
(
r£g
);

598 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

599 
	`t˝_ack_now
(
pcb
);

602 i‡(
Êags
 & 
TCP_ACK
) {

604 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

605 
t˝hdr
->
de°
,Å˝hdr->
§c
);

608 
SYN_RCVD
:

609 i‡(
Êags
 & 
TCP_ACK
) {

611 i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

612 
u16_t
 
ﬁd_cwnd
;

613 
pcb
->
°©e
 = 
ESTABLISHED
;

614 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

615 #i‡
LWIP_CALLBACK_API


616 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

619 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

620 i‡(
îr
 !
ERR_OK
) {

623 
	`t˝_ab‹t
(
pcb
);

624  
ERR_ABRT
;

626 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

629 
	`t˝_ª˚ive
(
pcb
);

631 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

633 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

634 
	`t˝_ack_now
(
pcb
);

635 
pcb
->
°©e
 = 
CLOSE_WAIT
;

641 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

642 
t˝hdr
->
de°
,Å˝hdr->
§c
);

644 } i‡((
Êags
 & 
TCP_SYN
Ë&& (
£qno
 =
pcb
->
rcv_nxt
 - 1)) {

646 
	`t˝_ªxmô
(
pcb
);

649 
CLOSE_WAIT
:

651 
ESTABLISHED
:

652 
	`t˝_ª˚ive
(
pcb
);

653 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

654 
	`t˝_ack_now
(
pcb
);

655 
pcb
->
°©e
 = 
CLOSE_WAIT
;

658 
FIN_WAIT_1
:

659 
	`t˝_ª˚ive
(
pcb
);

660 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

661 i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

662 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

663 ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

664 
	`t˝_ack_now
(
pcb
);

665 
	`t˝_pcb_purge
(
pcb
);

666 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

667 
pcb
->
°©e
 = 
TIME_WAIT
;

668 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

670 
	`t˝_ack_now
(
pcb
);

671 
pcb
->
°©e
 = 
CLOSING
;

673 } i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

674 
pcb
->
°©e
 = 
FIN_WAIT_2
;

677 
FIN_WAIT_2
:

678 
	`t˝_ª˚ive
(
pcb
);

679 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

680 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

681 
	`t˝_ack_now
(
pcb
);

682 
	`t˝_pcb_purge
(
pcb
);

683 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

684 
pcb
->
°©e
 = 
TIME_WAIT
;

685 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

688 
CLOSING
:

689 
	`t˝_ª˚ive
(
pcb
);

690 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

691 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

692 
	`t˝_pcb_purge
(
pcb
);

693 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

694 
pcb
->
°©e
 = 
TIME_WAIT
;

695 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

698 
LAST_ACK
:

699 
	`t˝_ª˚ive
(
pcb
);

700 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

701 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

703 
ªcv_Êags
 |
TF_CLOSED
;

709  
ERR_OK
;

710 
	}
}

726 
u8_t


727 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
)

729 
t˝_£g
 *
√xt
;

730 #i‡
TCP_QUEUE_OOSEQ


731 
t˝_£g
 *
¥ev
, *
c£g
;

733 
pbuf
 *
p
;

734 
s32_t
 
off
;

735 
s16_t
 
m
;

736 
u32_t
 
right_wnd_edge
;

737 
u16_t
 
√w_tŸ_Àn
;

738 
u8_t
 
ac˚±ed_ö£q
 = 0;

740 i‡(
Êags
 & 
TCP_ACK
) {

741 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl2
;

744 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
£qno
) ||

745 (
pcb
->
¢d_wl1
 =
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, 
ackno
)) ||

746 (
pcb
->
¢d_wl2
 =
ackno
 && 
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

747 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

748 
pcb
->
¢d_wl1
 = 
£qno
;

749 
pcb
->
¢d_wl2
 = 
ackno
;

750 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

751 
pcb
->
≥rsi°_backoff
 = 0;

753 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

754 #i‡
TCP_WND_DEBUG


756 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

757 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
,

758 ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
"áckno %"

759 
U32_F
" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

760 
pcb
->
œ°ack
, 
ackno
,Öcb->
¢d_wl1
, 
£qno
,Öcb->
¢d_wl2
));

765 i‡(
pcb
->
œ°ack
 =
ackno
) {

766 
pcb
->
acked
 = 0;

768 i‡(
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

769 ++
pcb
->
du∑cks
;

770 i‡(
pcb
->
du∑cks
 >3 &&Öcb->
u«cked
 !
NULL
) {

771 i‡(!(
pcb
->
Êags
 & 
TF_INFR
)) {

773 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F
"), fastÑetransmit %"U32_F"\n",

774 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

775 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

776 
	`t˝_ªxmô
(
pcb
);

782 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
)

783 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

785 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

788 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

789 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F
" should bêmö 2 ms†%"U16_F"...\n", 
pcb
->
s°hªsh
, 2*pcb->
mss
));

790 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

793 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

794 
pcb
->
Êags
 |
TF_INFR
;

798 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

799 
pcb
->
cwnd
 +pcb->
mss
;

804 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ckávîãd %"
U32_F
" %"U32_F"\n",

805 
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
, 
right_wnd_edge
));

807 } i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)){

813 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

814 
pcb
->
Êags
 &~
TF_INFR
;

815 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

819 
pcb
->
ƒtx
 = 0;

822 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

825 
pcb
->
acked
 = (
u16_t
)(
ackno
 -Öcb->
œ°ack
);

827 
pcb
->
¢d_buf
 +pcb->
acked
;

830 
pcb
->
du∑cks
 = 0;

831 
pcb
->
œ°ack
 = 
ackno
;

835 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

836 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

837 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

838 
pcb
->
cwnd
 +pcb->
mss
;

840 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

842 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

843 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

844 
pcb
->
cwnd
 = 
√w_cwnd
;

846 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

849 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

850 
ackno
,

851 
pcb
->
u«cked
 !
NULL
?

852 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

853 
pcb
->
u«cked
 !
NULL
?

854 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

858 
pcb
->
u«cked
 !
NULL
 &&

859 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

860 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ackno
)) {

861 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

862 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

863 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

864 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

866 
√xt
 = 
pcb
->
u«cked
;

867 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

869 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

870 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

871 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

872 
	`t˝_£g_‰ì
(
√xt
);

874 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

875 i‡(
pcb
->
¢d_queuñí
 != 0) {

876 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

877 
pcb
->
un£¡
 !
NULL
);

883 if(
pcb
->
u«cked
 =
NULL
)

884 
pcb
->
πime
 = -1;

886 
pcb
->
πime
 = 0;

888 
pcb
->
pﬁ…mr
 = 0;

891 
pcb
->
acked
 = 0;

900 
pcb
->
un£¡
 !
NULL
 &&

901 
	`TCP_SEQ_BETWEEN
(
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
) +

902 
	`TCP_TCPLEN
(
pcb
->
un£¡
),Öcb->
¢d_nxt
)) {

903 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

904 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

905 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

907 
√xt
 = 
pcb
->
un£¡
;

908 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

909 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

910 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

911 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

912 
	`t˝_£g_‰ì
(
√xt
);

913 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

914 i‡(
pcb
->
¢d_queuñí
 != 0) {

915 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

916 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

921 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

922 
pcb
->
πã°
,Öcb->
π£q
, 
ackno
));

927 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ackno
)) {

930 
m
 = (
s16_t
)(
t˝_ticks
 - 
pcb
->
πã°
);

932 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

933 
m
, m * 
TCP_SLOW_INTERVAL
));

936 
m
 = m - (
pcb
->
ß
 >> 3);

937 
pcb
->
ß
 +
m
;

938 i‡(
m
 < 0) {

939 
m
 = -m;

941 
m
 = m - (
pcb
->
sv
 >> 2);

942 
pcb
->
sv
 +
m
;

943 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

945 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

946 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

948 
pcb
->
πã°
 = 0;

954 i‡(
t˝Àn
 > 0) {

985 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
£qno
 + 1, seqnÿ+ 
t˝Àn
 - 1)){

1006 
off
 = 
pcb
->
rcv_nxt
 - 
£qno
;

1007 
p
 = 
ö£g
.p;

1008 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö£g
.
p
);

1009 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

1010 i‡(
ö£g
.
p
->
Àn
 < 
off
) {

1011 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1012 
√w_tŸ_Àn
 = (
u16_t
)(
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1013 
p
->
Àn
 < 
off
) {

1014 
off
 -
p
->
Àn
;

1018 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1019 
p
->
Àn
 = 0;

1020 
p
 =Ö->
√xt
;

1022 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1024 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1027 if(
	`pbuf_hódî
(
ö£g
.
p
, (
s16_t
)-
off
)) {

1029 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1034 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

1035 
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - 
£qno
);

1036 
ö£g
.
t˝hdr
->
£qno
 = seqnÿ
pcb
->
rcv_nxt
;

1039 i‡(
	`TCP_SEQ_LT
(
£qno
, 
pcb
->
rcv_nxt
)){

1043 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
£qno
));

1044 
	`t˝_ack_now
(
pcb
);

1051 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

1052 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1053 i‡(
pcb
->
rcv_nxt
 =
£qno
) {

1054 
ac˚±ed_ö£q
 = 1;

1058 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1060 i‡(
t˝Àn
 > 
pcb
->
rcv_wnd
) {

1061 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1063 "£qnÿ%"
U32_F
"Üen %"U32_F"ÑightÉdge %"U32_F"\n",

1064 
£qno
, 
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1065 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1068 
	`TCPH_FLAGS_SET
(
ö£g
.
t˝hdr
, 
	`TCPH_FLAGS
(ö£g.t˝hdrË&~ 
TCP_FIN
);

1071 
ö£g
.
Àn
 = 
pcb
->
rcv_wnd
;

1072 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1073 
ö£g
.
Àn
 -= 1;

1075 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1076 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1077 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1078 (
£qno
 + 
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1080 #i‡
TCP_QUEUE_OOSEQ


1081 i‡(
pcb
->
oo£q
 !
NULL
) {

1082 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1083 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1088 
pcb
->
oo£q
 !
NULL
) {

1089 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1090 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1091 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1093 } i‡(
	`TCP_SEQ_LEQ
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqnÿ+ 
t˝Àn
)) {

1094 i‡(
pcb
->
oo£q
->
Àn
 > 0) {

1096 
	`LWIP_ASSERT
("tcp_receive:Årimmed segment would have zeroÜength\n",

1097 
	`TCP_SEQ_GT
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqno));

1099 
ö£g
.
Àn
 = (
u16_t
)(
pcb
->
oo£q
->
t˝hdr
->
£qno
 - seqno);

1100 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1101 
ö£g
.
Àn
 -= 1;

1103 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1104 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1105 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅo ooseq queue\n",

1106 (
£qno
 + 
t˝Àn
Ë=
pcb
->
oo£q
->
t˝hdr
->seqno);

1109 i‡((
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
)) ==

1110 (
	`TCPH_FLAGS
(
pcb
->
oo£q
->
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
))) {

1111 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1112 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1113 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1120 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

1123 
	`LWIP_ASSERT
("t˝_ª˚ive:Å˝À¿>Ñcv_wnd\n", 
pcb
->
rcv_wnd
 >
t˝Àn
);

1124 
pcb
->
rcv_wnd
 -
t˝Àn
;

1126 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1137 i‡(
ö£g
.
p
->
tŸ_Àn
 > 0) {

1138 
ªcv_d©a
 = 
ö£g
.
p
;

1142 
ö£g
.
p
 = 
NULL
;

1144 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1145 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1146 
ªcv_Êags
 |
TF_GOT_FIN
;

1149 #i‡
TCP_QUEUE_OOSEQ


1152 
pcb
->
oo£q
 !
NULL
 &&

1153 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1155 
c£g
 = 
pcb
->
oo£q
;

1156 
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1158 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1159 
	`LWIP_ASSERT
("tcp_receive: ooseqÅcplen >Ñcv_wnd\n",

1160 
pcb
->
rcv_wnd
 >
	`TCP_TCPLEN
(
c£g
));

1161 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1163 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1165 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1168 i‡(
ªcv_d©a
) {

1169 
	`pbuf_ˇt
(
ªcv_d©a
, 
c£g
->
p
);

1171 
ªcv_d©a
 = 
c£g
->
p
;

1173 
c£g
->
p
 = 
NULL
;

1175 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1176 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1177 
ªcv_Êags
 |
TF_GOT_FIN
;

1178 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1179 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1184 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1185 
	`t˝_£g_‰ì
(
c£g
);

1191 
	`t˝_ack
(
pcb
);

1195 
	`t˝_ack_now
(
pcb
);

1196 #i‡
TCP_QUEUE_OOSEQ


1198 i‡(
pcb
->
oo£q
 =
NULL
) {

1199 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö£g
);

1213 
¥ev
 = 
NULL
;

1214 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1215 i‡(
£qno
 =
√xt
->
t˝hdr
->seqno) {

1220 i‡(
ö£g
.
Àn
 > 
√xt
->len) {

1224 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1225 i‡(
c£g
 !
NULL
) {

1226 
c£g
->
√xt
 =Çext->next;

1227 i‡(
¥ev
 !
NULL
) {

1228 
¥ev
->
√xt
 = 
c£g
;

1230 
pcb
->
oo£q
 = 
c£g
;

1232 
	`t˝_£g_‰ì
(
√xt
);

1233 i‡(
c£g
->
√xt
 !
NULL
) {

1234 
√xt
 = 
c£g
->next;

1235 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1237 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1238 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

1250 i‡(
¥ev
 =
NULL
) {

1251 i‡(
	`TCP_SEQ_LT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1257 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1259 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1260 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1262 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1263 i‡(
c£g
 !
NULL
) {

1264 
c£g
->
√xt
 =Çext;

1265 
pcb
->
oo£q
 = 
c£g
;

1272 if(
	`TCP_SEQ_BETWEEN
(
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)){

1278 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1280 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1281 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1284 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1285 i‡(
c£g
 !
NULL
) {

1286 
c£g
->
√xt
 =Çext;

1287 
¥ev
->
√xt
 = 
c£g
;

1288 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, seqno)) {

1290 
¥ev
->
Àn
 = (
u16_t
)(
£qno
 -Öªv->
t˝hdr
->seqno);

1291 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1299 i‡(
√xt
->√xà=
NULL
 &&

1300 
	`TCP_SEQ_GT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1301 
√xt
->√xà
	`t˝_£g_c›y
(&
ö£g
);

1302 i‡(
√xt
->√xà!
NULL
) {

1303 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, seqno)) {

1305 
√xt
->
Àn
 = (
u16_t
)(
£qno
 -Çext->
t˝hdr
->seqno);

1306 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1312 
¥ev
 = 
√xt
;

1319 
	`t˝_ack_now
(
pcb
);

1326 if(!
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1327 
	`t˝_ack_now
(
pcb
);

1330  
ac˚±ed_ö£q
;

1331 
	}
}

1342 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
)

1344 
u16_t
 
c
, 
max_c
;

1345 
u16_t
 
mss
;

1346 
u8_t
 *
›ts
, 
›t
;

1347 #i‡
LWIP_TCP_TIMESTAMPS


1348 
u32_t
 
tsvÆ
;

1351 
›ts
 = (
u8_t
 *)
t˝hdr
 + 
TCP_HLEN
;

1354 if(
	`TCPH_HDRLEN
(
t˝hdr
) > 0x5) {

1355 
max_c
 = (
	`TCPH_HDRLEN
(
t˝hdr
) - 5) << 2;

1356 
c
 = 0; c < 
max_c
; ) {

1357 
›t
 = 
›ts
[
c
];

1358 
›t
) {

1361 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: EOL\n"));

1365 ++
c
;

1366 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: NOP\n"));

1369 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: MSS\n"));

1370 i‡(
›ts
[
c
 + 1] !0x04 || c + 0x04 > 
max_c
) {

1372 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1376 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1378 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1380 
c
 += 0x04;

1382 #i‡
LWIP_TCP_TIMESTAMPS


1384 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: TS\n"));

1385 i‡(
›ts
[
c
 + 1] !0x0A || c + 0x0A > 
max_c
) {

1387 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1391 
tsvÆ
 = (
›ts
[
c
+2]) | (opts[c+3] << 8) |

1392 (
›ts
[
c
+4] << 16) | (opts[c+5] << 24);

1393 i‡(
Êags
 & 
TCP_SYN
) {

1394 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1395 
pcb
->
Êags
 |
TF_TIMESTAMP
;

1396 } i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
ts_œ°ack£¡
, 
£qno
, seqno+
t˝Àn
)) {

1397 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1400 
c
 += 0x0A;

1404 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: other\n"));

1405 i‡(
›ts
[
c
 + 1] == 0) {

1406 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1413 
c
 +
›ts
[c + 1];

1417 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/tcp_out.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/t˝.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/öë.h
"

53 
	~"lwù/öë_chksum.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/¢mp.h
"

57 
	~<°rög.h
>

60 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

62 
t˝_hdr
 *

63 
	$t˝_ouçut_£t_hódî
(
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
›éí
,

64 
u32_t
 
£qno_be
 )

66 
t˝_hdr
 *
t˝hdr
 = 
p
->
∑ylﬂd
;

67 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

68 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

69 
t˝hdr
->
£qno
 = 
£qno_be
;

70 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

71 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
);

72 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

73 
t˝hdr
->
urgp
 = 0;

74 
	`TCPH_HDRLEN_SET
(
t˝hdr
, (5 + 
›éí
 / 4));

75 
t˝hdr
->
chksum
 = 0;

78 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

80  
t˝hdr
;

81 
	}
}

90 
îr_t


91 
	$t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

94  
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
Êags
, 
TCP_WRITE_FLAG_COPY
, 0);

95 
	}
}

115 
îr_t


116 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
d©a
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

118 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiÊags=%"U16_F")\n", (*)
pcb
,

119 
d©a
, 
Àn
, (
u16_t
)
≠iÊags
));

121 i‡(
pcb
->
°©e
 =
ESTABLISHED
 ||

122 
pcb
->
°©e
 =
CLOSE_WAIT
 ||

123 
pcb
->
°©e
 =
SYN_SENT
 ||

124 
pcb
->
°©e
 =
SYN_RCVD
) {

125 i‡(
Àn
 > 0) {

126 #i‡
LWIP_TCP_TIMESTAMPS


127  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
,

128 
pcb
->
Êags
 & 
TF_TIMESTAMP
 ? 
TF_SEG_OPTS_TS
 : 0);

130  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
, 0);

133  
ERR_OK
;

135 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 3, ("tcp_write() called in invalid state\n"));

136  
ERR_CONN
;

138 
	}
}

154 
îr_t


155 
	$t˝_íqueue
(
t˝_pcb
 *
pcb
, *
¨g
, 
u16_t
 
Àn
,

156 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
)

158 
pbuf
 *
p
;

159 
t˝_£g
 *
£g
, *
u£g
, *
queue
;

160 
u32_t
 
£qno
;

161 
u16_t
 
À·
, 
£gÀn
;

162 *
±r
;

163 
u16_t
 
queuñí
;

164 
u8_t
 
›éí
;

166 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

167 ("t˝_íqueue’cb=%p,árg=%p,Üí=%"
U16_F
", fœgs=%"
X16_F
",ápiflags=%"U16_F")\n",

168 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
Êags
, (u16_t)
≠iÊags
));

169 
	`LWIP_ERROR
("tcp_enqueue:ÖacketÇeedsÖayload, options, or SYN/FIN (programmer violates API)",

170 ((
Àn
 !0Ë|| (
›tÊags
 !0Ë|| ((
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) != 0)),

171  
ERR_ARG
;);

172 
	`LWIP_ERROR
("tcp_enqueue:Üen != 0 ||árg == NULL (programmer violates API)",

173 ((
Àn
 !0Ë|| (
¨g
 =
NULL
)),  
ERR_ARG
;);

176 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

177 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n", 
Àn
, 
pcb
->
¢d_buf
));

178 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

179  
ERR_MEM
;

181 
À·
 = 
Àn
;

182 
±r
 = 
¨g
;

184 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

188 
£qno
 = 
pcb
->
¢d_lbb
;

190 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

194 
queuñí
 = 
pcb
->
¢d_queuñí
;

196 i‡((
queuñí
 >
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

197 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

198 
	`TCP_STATS_INC
(
t˝
.
memîr
);

199 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

200  
ERR_MEM
;

202 i‡(
queuñí
 != 0) {

203 
	`LWIP_ASSERT
("tcp_enqueue:Öbufs on queue =>átÜeast one queueÇon-empty",

204 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

206 
	`LWIP_ASSERT
("tcp_enqueue:ÇoÖbufs on queue => both queuesÉmpty",

207 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

212 
u£g
 = 
queue
 = 
£g
 = 
NULL
;

213 
£gÀn
 = 0;

214 
queue
 =
NULL
 || 
À·
 > 0) {

216 
£gÀn
 = 
À·
 > (
pcb
->
mss
 - 
›éí
) ? (pcb->mss - optlen) :Üeft;

219 
£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

220 i‡(
£g
 =
NULL
) {

221 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

223 
memîr
;

225 
£g
->
√xt
 = 
NULL
;

226 
£g
->
p
 = 
NULL
;

229 i‡(
queue
 =
NULL
) {

230 
queue
 = 
£g
;

235 
	`LWIP_ASSERT
("u£g !NULL", 
u£g
 !
NULL
);

236 
u£g
->
√xt
 = 
£g
;

239 
u£g
 = 
£g
;

244 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

245 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
 + 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

246 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

247 ("t˝_íqueuê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

248 
memîr
;

250 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can holdÅhe complete seglen",

251 (
£g
->
p
->
Àn
 >
£gÀn
 + 
›éí
));

252 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

253 i‡(
¨g
 !
NULL
) {

254 
	`MEMCPY
((*)
£g
->
p
->
∑ylﬂd
 + 
›éí
, 
±r
, 
£gÀn
);

256 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

261 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

262 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

264 
memîr
;

266 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

273 i‡(
À·
 > 0) {

274 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

276 
	`pbuf_‰ì
(
£g
->
p
);

277 
£g
->
p
 = 
NULL
;

278 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

280 
memîr
;

282 ++
queuñí
;

284 
p
->
∑ylﬂd
 = 
±r
;

285 
£g
->
d©≠å
 = 
±r
;

288 
	`pbuf_ˇt
(
£g
->
p
 ,Ö );

289 
p
 = 
NULL
;

295 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

296 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueue: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

297 
memîr
;

300 
£g
->
Àn
 = 
£gÀn
;

303 i‡(
	`pbuf_hódî
(
£g
->
p
, 
TCP_HLEN
)) {

304 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue:ÇoÑoom for TCP header inÖbuf.\n"));

305 
	`TCP_STATS_INC
(
t˝
.
îr
);

306 
memîr
;

308 
£g
->
t˝hdr
 = seg->
p
->
∑ylﬂd
;

309 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

310 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

311 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

312 
£g
->
t˝hdr
->
urgp
 = 0;

313 
	`TCPH_FLAGS_SET
(
£g
->
t˝hdr
, 
Êags
);

316 
£g
->
Êags
 = 
›tÊags
;

319 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4));

320 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_íqueue: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

321 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

322 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

323 (
u16_t
)
Êags
));

325 
À·
 -
£gÀn
;

326 
£qno
 +
£gÀn
;

327 
±r
 = (*)((
u8_t
 *Ìå + 
£gÀn
);

333 i‡(
pcb
->
un£¡
 =
NULL
) {

334 
u£g
 = 
NULL
;

337 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

343 i‡(
u£g
 !
NULL
 &&

344 
	`TCP_TCPLEN
(
u£g
) != 0 &&

345 !(
	`TCPH_FLAGS
(
u£g
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
)) &&

346 !(
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) &&

348 (
u£g
->
Àn
 + 
queue
->À¿<
pcb
->
mss
) &&

350 (
u£g
->
Êags
 =
queue
->flags)) {

352 if(
	`pbuf_hódî
(
queue
->
p
, -(
TCP_HLEN
 + 
›éí
))) {

354 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

355 
	`TCP_STATS_INC
(
t˝
.
îr
);

356 
memîr
;

358 i‡(
queue
->
p
->
Àn
 == 0) {

360 
pbuf
 *
ﬁd_q
 = 
queue
->
p
;

361 
queue
->
p
 = queue->p->
√xt
;

362 
ﬁd_q
->
√xt
 = 
NULL
;

363 
queuñí
--;

364 
	`pbuf_‰ì
(
ﬁd_q
);

366 
	`LWIP_ASSERT
("zîo-ÀngthÖbuf", (
queue
->
p
 !
NULL
Ë&& (queue->p->
Àn
 > 0));

367 
	`pbuf_ˇt
(
u£g
->
p
, 
queue
->p);

368 
u£g
->
Àn
 +
queue
->len;

369 
u£g
->
√xt
 = 
queue
->next;

371 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: chaöög segmíts,ÇewÜí %"
U16_F
"\n", 
u£g
->
Àn
));

372 i‡(
£g
 =
queue
) {

373 
£g
 = 
u£g
;

374 
£gÀn
 = 
u£g
->
Àn
;

376 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
queue
);

380 i‡(
u£g
 =
NULL
) {

382 
pcb
->
un£¡
 = 
queue
;

386 
u£g
->
√xt
 = 
queue
;

389 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

390 ++
Àn
;

392 i‡(
Êags
 & 
TCP_FIN
) {

393 
pcb
->
Êags
 |
TF_FIN
;

395 
pcb
->
¢d_lbb
 +
Àn
;

397 
pcb
->
¢d_buf
 -
Àn
;

400 
pcb
->
¢d_queuñí
 = 
queuñí
;

401 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

402 i‡(
pcb
->
¢d_queuñí
 != 0) {

403 
	`LWIP_ASSERT
("tcp_enqueue: valid queueÜength",

404 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

409 i‡(
£g
 !
NULL
 && 
£gÀn
 > 0 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

410 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

413  
ERR_OK
;

414 
memîr
:

415 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

416 
	`TCP_STATS_INC
(
t˝
.
memîr
);

418 i‡(
queue
 !
NULL
) {

419 
	`t˝_£gs_‰ì
(
queue
);

421 i‡(
pcb
->
¢d_queuñí
 != 0) {

422 
	`LWIP_ASSERT
("t˝_íqueue: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

423 
pcb
->
un£¡
 !
NULL
);

425 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

426  
ERR_MEM
;

427 
	}
}

430 #i‡
LWIP_TCP_TIMESTAMPS


437 
	$t˝_buûd_time°amp_›ti⁄
(
t˝_pcb
 *
pcb
, 
u32_t
 *
›ts
)

440 
›ts
[0] = 
	`ht⁄l
(0x0101080A);

441 
›ts
[1] = 
	`ht⁄l
(
	`sys_now
());

442 
›ts
[2] = 
	`ht⁄l
(
pcb
->
ts_ª˚¡
);

443 
	}
}

454 
îr_t


455 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

457 
pbuf
 *
p
;

458 
t˝_hdr
 *
t˝hdr
;

459 
t˝_£g
 *
£g
, *
u£g
;

460 
u32_t
 
wnd
, 
¢d_nxt
;

461 #i‡
TCP_CWND_DEBUG


462 
s16_t
 
i
 = 0;

464 
u8_t
 
›éí
 = 0;

470 i‡(
t˝_öput_pcb
 =
pcb
) {

471  
ERR_OK
;

474 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

476 
£g
 = 
pcb
->
un£¡
;

479 
u£g
 = 
pcb
->
u«cked
;

480 i‡(
u£g
 !
NULL
) {

481 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

490 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

491 (
£g
 =
NULL
 ||

492 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

493 #i‡
LWIP_TCP_TIMESTAMPS


494 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
)

495 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

497 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 
›éí
, 
PBUF_RAM
);

498 i‡(
p
 =
NULL
) {

499 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

500  
ERR_BUF
;

502 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

503 ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

505 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

507 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 
›éí
, 
	`ht⁄l
’cb->
¢d_nxt
));

510 #i‡
LWIP_TCP_TIMESTAMPS


511 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

513 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
)

514 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, (
u32_t
 *)(
t˝hdr
 + 1));

517 #i‡
CHECKSUM_GEN_TCP


518 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

519 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

521 #i‡
LWIP_NETIF_HWADDRHINT


522 
	`ù_ouçut_höãd
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

523 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

525 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

526 
IP_PROTO_TCP
);

528 
	`pbuf_‰ì
(
p
);

530  
ERR_OK
;

533 #i‡
TCP_OUTPUT_DEBUG


534 i‡(
£g
 =
NULL
) {

535 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

536 (*)
pcb
->
un£¡
));

539 #i‡
TCP_CWND_DEBUG


540 i‡(
£g
 =
NULL
) {

541 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


542 ", cwnd %"
U16_F
", wnd %"
U32_F


543 ", seg =NULL,áck %"
U32_F
"\n",

544 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

546 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

547 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


548 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

549 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

550 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

551 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

555 
£g
 !
NULL
 &&

556 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

557 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

558 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

566 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

567 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

570 #i‡
TCP_CWND_DEBUG


571 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

572 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

573 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

574 
pcb
->
œ°ack
,

575 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

576 ++
i
;

579 
pcb
->
un£¡
 = 
£g
->
√xt
;

581 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

582 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

583 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

586 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

587 
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

588 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_nxt
, snd_nxt)) {

589 
pcb
->
¢d_nxt
 = snd_nxt;

592 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

593 
£g
->
√xt
 = 
NULL
;

595 i‡(
pcb
->
u«cked
 =
NULL
) {

596 
pcb
->
u«cked
 = 
£g
;

597 
u£g
 = 
£g
;

603 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))){

605 
t˝_£g
 **
cur_£g
 = &(
pcb
->
u«cked
);

606 *
cur_£g
 &&

607 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

608 
cur_£g
 = &((*cur_£g)->
√xt
 );

610 
£g
->
√xt
 = (*
cur_£g
);

611 (*
cur_£g
Ë
£g
;

614 
u£g
->
√xt
 = 
£g
;

615 
u£g
 = u£g->
√xt
;

620 
	`t˝_£g_‰ì
(
£g
);

622 
£g
 = 
pcb
->
un£¡
;

625 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

626 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

628 
pcb
->
≥rsi°_˙t
 = 0;

629 
pcb
->
≥rsi°_backoff
 = 1;

632 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

633  
ERR_OK
;

634 
	}
}

643 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

645 
u16_t
 
Àn
;

646 
√tif
 *netif;

647 
u32_t
 *
›ts
;

650 
	`¢mp_öc_t˝out£gs
();

654 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

657 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

659 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

663 
›ts
 = (
u32_t
 *)(
£g
->
t˝hdr
 + 1);

664 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_MSS
) {

665 
	`TCP_BUILD_MSS_OPTION
(*
›ts
);

666 
›ts
 += 1;

668 #i‡
LWIP_TCP_TIMESTAMPS


669 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

671 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_TS
) {

672 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, 
›ts
);

673 
›ts
 += 3;

679 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

680 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

681 i‡(
√tif
 =
NULL
) {

684 
	`ù_addr_£t
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
));

688 if(
pcb
->
πime
 == -1)

689 
pcb
->
πime
 = 0;

691 i‡(
pcb
->
πã°
 == 0) {

692 
pcb
->
πã°
 = 
t˝_ticks
;

693 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

695 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

697 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

698 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

699 
£g
->
Àn
));

701 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

703 
£g
->
p
->
Àn
 -=Üen;

704 
£g
->
p
->
tŸ_Àn
 -
Àn
;

706 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

708 
£g
->
t˝hdr
->
chksum
 = 0;

709 #i‡
CHECKSUM_GEN_TCP


710 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
,

711 &(
pcb
->
loˇl_ù
),

712 &(
pcb
->
ªmŸe_ù
),

713 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

715 
	`TCP_STATS_INC
(
t˝
.
xmô
);

717 #i‡
LWIP_NETIF_HWADDRHINT


718 
	`ù_ouçut_höãd
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

719 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

721 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

722 
IP_PROTO_TCP
);

724 
	}
}

747 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

748 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

749 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

751 
pbuf
 *
p
;

752 
t˝_hdr
 *
t˝hdr
;

753 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

754 i‡(
p
 =
NULL
) {

755 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

758 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

759 (
p
->
Àn
 >(
t˝_hdr
)));

761 
t˝hdr
 = 
p
->
∑ylﬂd
;

762 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

763 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

764 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

765 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

766 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_RST
 | 
TCP_ACK
);

767 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
TCP_WND
);

768 
t˝hdr
->
urgp
 = 0;

769 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

771 
t˝hdr
->
chksum
 = 0;

772 #i‡
CHECKSUM_GEN_TCP


773 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

774 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

776 
	`TCP_STATS_INC
(
t˝
.
xmô
);

777 
	`¢mp_öc_t˝ouå°s
();

779 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

780 
	`pbuf_‰ì
(
p
);

781 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

782 
	}
}

792 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

794 
t˝_£g
 *
£g
;

796 i‡(
pcb
->
u«cked
 =
NULL
) {

801 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

803 
£g
->
√xt
 = 
pcb
->
un£¡
;

805 
pcb
->
un£¡
 =Öcb->
u«cked
;

807 
pcb
->
u«cked
 = 
NULL
;

810 ++
pcb
->
ƒtx
;

813 
pcb
->
πã°
 = 0;

816 
	`t˝_ouçut
(
pcb
);

817 
	}
}

827 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

829 
t˝_£g
 *
£g
;

830 
t˝_£g
 **
cur_£g
;

832 i‡(
pcb
->
u«cked
 =
NULL
) {

838 
£g
 = 
pcb
->
u«cked
;

839 
pcb
->
u«cked
 = 
£g
->
√xt
;

841 
cur_£g
 = &(
pcb
->
un£¡
);

842 *
cur_£g
 &&

843 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

844 
cur_£g
 = &((*cur_£g)->
√xt
 );

846 
£g
->
√xt
 = *
cur_£g
;

847 *
cur_£g
 = 
£g
;

849 ++
pcb
->
ƒtx
;

852 
pcb
->
πã°
 = 0;

855 
	`¢mp_öc_t˝ªå™s£gs
();

856 
	`t˝_ouçut
(
pcb
);

857 
	}
}

868 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

870 
pbuf
 *
p
;

871 
t˝_hdr
 *
t˝hdr
;

873 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

874 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

875 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

877 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

878 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

880 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

882 if(
p
 =
NULL
) {

883 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

887 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

888 (
p
->
Àn
 >(
t˝_hdr
)));

890 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 0, 
	`ht⁄l
’cb->
¢d_nxt
 - 1));

892 #i‡
CHECKSUM_GEN_TCP


893 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

894 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

896 
	`TCP_STATS_INC
(
t˝
.
xmô
);

899 #i‡
LWIP_NETIF_HWADDRHINT


900 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

901 &(
pcb
->
addr_höt
));

903 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

906 
	`pbuf_‰ì
(
p
);

908 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

909 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

910 
	}
}

922 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

924 
pbuf
 *
p
;

925 
t˝_hdr
 *
t˝hdr
;

926 
t˝_£g
 *
£g
;

928 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

930 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

931 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

932 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

934 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

935 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


936 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

937 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

939 
£g
 = 
pcb
->
u«cked
;

941 if(
£g
 =
NULL
)

942 
£g
 = 
pcb
->
un£¡
;

944 if(
£g
 =
NULL
)

947 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 1, 
PBUF_RAM
);

949 if(
p
 =
NULL
) {

950 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

953 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

954 (
p
->
Àn
 >(
t˝_hdr
)));

956 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 0, 
£g
->t˝hdr->
£qno
);

959 *((*)
p
->
∑ylﬂd
 + (
t˝_hdr
)Ë*(*)
£g
->
d©≠å
;

961 #i‡
CHECKSUM_GEN_TCP


962 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

963 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

965 
	`TCP_STATS_INC
(
t˝
.
xmô
);

968 #i‡
LWIP_NETIF_HWADDRHINT


969 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

970 &(
pcb
->
addr_höt
));

972 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

975 
	`pbuf_‰ì
(
p
);

977 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


978 "ácknÿ%"
U32_F
".\n",

979 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

980 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/core/udp.c

49 
	~"lwù/›t.h
"

51 #i‡
LWIP_UDP


53 
	~"lwù/udp.h
"

54 
	~"lwù/def.h
"

55 
	~"lwù/memp.h
"

56 
	~"lwù/öë.h
"

57 
	~"lwù/öë_chksum.h
"

58 
	~"lwù/ù_addr.h
"

59 
	~"lwù/√tif.h
"

60 
	~"lwù/icmp.h
"

61 
	~"lwù/°©s.h
"

62 
	~"lwù/¢mp.h
"

63 
	~"¨ch/≥rf.h
"

64 
	~"lwù/dh˝.h
"

66 
	~<°rög.h
>

70 
udp_pcb
 *
	gudp_pcbs
;

85 
	$udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

87 
udp_hdr
 *
udphdr
;

88 
udp_pcb
 *
pcb
, *
¥ev
;

89 
udp_pcb
 *
unc⁄_pcb
;

90 
ù_hdr
 *
ùhdr
;

91 
u16_t
 
§c
, 
de°
;

92 
u8_t
 
loˇl_m©ch
;

93 
u8_t
 
brﬂdˇ°
;

95 
PERF_START
;

97 
	`UDP_STATS_INC
(
udp
.
ªcv
);

99 
ùhdr
 = 
p
->
∑ylﬂd
;

103 i‡(
p
->
tŸ_Àn
 < (
	`IPH_HL
(
ùhdr
Ë* 4 + 
UDP_HLEN
Ë|| 
	`pbuf_hódî
’, -(
s16_t
)(IPH_HL(iphdr) * 4))) {

105 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

106 ("udp_öput: sh‹àUDP d©agøm (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

107 
	`UDP_STATS_INC
(
udp
.
À√º
);

108 
	`UDP_STATS_INC
(
udp
.
dr›
);

109 
	`¢mp_öc_udpöîr‹s
();

110 
	`pbuf_‰ì
(
p
);

111 
íd
;

114 
udphdr
 = (
udp_hdr
 *)
p
->
∑ylﬂd
;

117 
brﬂdˇ°
 = 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
);

119 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_öput:Ñe˚ived d©agøm o‡Àngth %"
U16_F
"\n", 
p
->
tŸ_Àn
));

122 
§c
 = 
	`¡ohs
(
udphdr
->src);

123 
de°
 = 
	`¡ohs
(
udphdr
->dest);

125 
	`udp_debug_¥öt
(
udphdr
);

128 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

129 ("ud∞(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "

130 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

131 
	`ù4_addr1
(&
ùhdr
->
de°
), 
	`ù4_addr2
(&iphdr->dest),

132 
	`ù4_addr3
(&
ùhdr
->
de°
), 
	`ù4_addr4
(&ùhdr->de°), 
	`¡ohs
(
udphdr
->dest),

133 
	`ù4_addr1
(&
ùhdr
->
§c
), 
	`ù4_addr2
(&iphdr->src),

134 
	`ù4_addr3
(&
ùhdr
->
§c
), 
	`ù4_addr4
(&ùhdr->§c), 
	`¡ohs
(
udphdr
->src)));

136 #i‡
LWIP_DHCP


137 
pcb
 = 
NULL
;

140 i‡(
de°
 =
DHCP_CLIENT_PORT
) {

142 i‡(
§c
 =
DHCP_SERVER_PORT
) {

143 i‡((
öp
->
dh˝
 !
NULL
Ë&& (öp->dh˝->
pcb
 != NULL)) {

147 i‡((
	`ù_addr_ißny
(&
öp
->
dh˝
->
pcb
->
ªmŸe_ù
) ||

148 
	`ù_addr_cmp
(&(
öp
->
dh˝
->
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

149 
pcb
 = 
öp
->
dh˝
->pcb;

156 
¥ev
 = 
NULL
;

157 
loˇl_m©ch
 = 0;

158 
unc⁄_pcb
 = 
NULL
;

163 
pcb
 = 
udp_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

164 
loˇl_m©ch
 = 0;

166 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

167 ("pcb (%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "

168 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

169 
	`ù4_addr1
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2
(&pcb->local_ip),

170 
	`ù4_addr3
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4
(&pcb->loˇl_ù),Öcb->
loˇl_p‹t
,

171 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

172 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->ªmŸe_ù),Öcb->
ªmŸe_p‹t
));

175 i‡((
pcb
->
loˇl_p‹t
 =
de°
) &&

176 ((!
brﬂdˇ°
 && 
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) ||

177 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
)) ||

178 #i‡
LWIP_IGMP


179 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
)) ||

181 #i‡
IP_SOF_BROADCAST_RECV


182 (
brﬂdˇ°
 && (
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
)))) {

184 (
brﬂdˇ°
))) {

186 
loˇl_m©ch
 = 1;

187 i‡((
unc⁄_pcb
 =
NULL
) &&

188 ((
pcb
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0)) {

190 
unc⁄_pcb
 = 
pcb
;

194 i‡((
loˇl_m©ch
 != 0) &&

195 (
pcb
->
ªmŸe_p‹t
 =
§c
) &&

196 (
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
) ||

197 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

199 i‡(
¥ev
 !
NULL
) {

202 
¥ev
->
√xt
 = 
pcb
->next;

203 
pcb
->
√xt
 = 
udp_pcbs
;

204 
udp_pcbs
 = 
pcb
;

206 
	`UDP_STATS_INC
(
udp
.
ˇchehô
);

210 
¥ev
 = 
pcb
;

213 i‡(
pcb
 =
NULL
) {

214 
pcb
 = 
unc⁄_pcb
;

219 i‡(
pcb
 !
NULL
 || 
	`ù_addr_cmp
(&
öp
->
ù_addr
, &
ùhdr
->
de°
)) {

220 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input: calculating checksum\n"));

221 #i‡
LWIP_UDPLITE


222 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDPLITE
) {

224 #i‡
CHECKSUM_CHECK_UDP


225 
u16_t
 
chkÀn
 = 
	`¡ohs
(
udphdr
->
Àn
);

226 i‡(
chkÀn
 < (
udp_hdr
)) {

227 i‡(
chkÀn
 == 0) {

230 
chkÀn
 = 
p
->
tŸ_Àn
;

234 
	`UDP_STATS_INC
(
udp
.
chkîr
);

235 
	`UDP_STATS_INC
(
udp
.
dr›
);

236 
	`¢mp_öc_udpöîr‹s
();

237 
	`pbuf_‰ì
(
p
);

238 
íd
;

241 i‡(
	`öë_chksum_p£udo_∑πül
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

242 (
ù_addr
 *)&(
ùhdr
->
de°
),

243 
IP_PROTO_UDPLITE
, 
p
->
tŸ_Àn
, 
chkÀn
) != 0) {

244 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

246 
	`UDP_STATS_INC
(
udp
.
chkîr
);

247 
	`UDP_STATS_INC
(
udp
.
dr›
);

248 
	`¢mp_öc_udpöîr‹s
();

249 
	`pbuf_‰ì
(
p
);

250 
íd
;

256 #i‡
CHECKSUM_CHECK_UDP


257 i‡(
udphdr
->
chksum
 != 0) {

258 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

259 (
ù_addr
 *)&(
ùhdr
->
de°
),

260 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

261 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

263 
	`UDP_STATS_INC
(
udp
.
chkîr
);

264 
	`UDP_STATS_INC
(
udp
.
dr›
);

265 
	`¢mp_öc_udpöîr‹s
();

266 
	`pbuf_‰ì
(
p
);

267 
íd
;

272 if(
	`pbuf_hódî
(
p
, -
UDP_HLEN
)) {

274 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

275 
	`UDP_STATS_INC
(
udp
.
dr›
);

276 
	`¢mp_öc_udpöîr‹s
();

277 
	`pbuf_‰ì
(
p
);

278 
íd
;

280 i‡(
pcb
 !
NULL
) {

281 
	`¢mp_öc_udpöd©agøms
();

283 i‡(
pcb
->
ªcv
 !
NULL
) {

285 
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
), src);

288 
	`pbuf_‰ì
(
p
);

289 
íd
;

292 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input:Çot for us.\n"));

294 #i‡
LWIP_ICMP


297 i‡(!
brﬂdˇ°
 &&

298 !
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

300 
	`pbuf_hódî
(
p
, (
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
);

301 
	`LWIP_ASSERT
("p->∑ylﬂd =ùhdr", (
p
->
∑ylﬂd
 =
ùhdr
));

302 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PORT
);

305 
	`UDP_STATS_INC
(
udp
.
¥Ÿîr
);

306 
	`UDP_STATS_INC
(
udp
.
dr›
);

307 
	`¢mp_öc_ud≤›‹ts
();

308 
	`pbuf_‰ì
(
p
);

311 
	`pbuf_‰ì
(
p
);

313 
íd
:

314 
	`PERF_STOP
("udp_input");

315 
	}
}

335 
îr_t


336 
	$udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
)

339  
	`udp_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
);

340 
	}
}

359 
îr_t


360 
	$udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

361 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
)

363 
√tif
 *netif;

365 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_send\n"));

368 #i‡
LWIP_IGMP


369 
√tif
 = 
	`ù_rouã
((
	`ù_addr_ismu…iˇ°
(
d°_ù
))?(&(
pcb
->
mu…iˇ°_ù
)):(dst_ip));

371 
√tif
 = 
	`ù_rouã
(
d°_ù
);

375 i‡(
√tif
 =
NULL
) {

376 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£nd: NÿrouãÅÿ0x%"
X32_F
"\n", 
d°_ù
->
addr
));

377 
	`UDP_STATS_INC
(
udp
.
πîr
);

378  
ERR_RTE
;

380  
	`udp_£ndto_if
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
);

381 
	}
}

402 
îr_t


403 
	$udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

404 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif)

406 
udp_hdr
 *
udphdr
;

407 
ù_addr
 *
§c_ù
;

408 
îr_t
 
îr
;

409 
pbuf
 *
q
;

411 #i‡
IP_SOF_BROADCAST


413 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
d°_ù
, 
√tif
) ) {

414 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£ndto_if: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

415  
ERR_VAL
;

420 i‡(
pcb
->
loˇl_p‹t
 == 0) {

421 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send:Çot yet boundÅoáÖort, bindingÇow\n"));

422 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

423 i‡(
îr
 !
ERR_OK
) {

424 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: forcedÖort bind failed\n"));

425  
îr
;

430 i‡(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)) {

432 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
UDP_HLEN
, 
PBUF_RAM
);

434 i‡(
q
 =
NULL
) {

435 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: couldÇotállocate header\n"));

436  
ERR_MEM
;

439 
	`pbuf_chaö
(
q
, 
p
);

441 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

442 ("udp_£nd:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

446 
q
 = 
p
;

447 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd:ádded hódî i¿givíÖbu‡%p\n", (*)
p
));

449 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct udp_hdr",

450 (
q
->
Àn
 >(
udp_hdr
)));

452 
udphdr
 = 
q
->
∑ylﬂd
;

453 
udphdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

454 
udphdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

456 
udphdr
->
chksum
 = 0x0000;

459 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

461 
§c_ù
 = &(
√tif
->
ù_addr
);

465 i‡(!
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

467 i‡(
q
 !
p
) {

469 
	`pbuf_‰ì
(
q
);

470 
q
 = 
NULL
;

473  
ERR_VAL
;

476 
§c_ù
 = &(
pcb
->
loˇl_ù
);

479 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: sídög d©agøm o‡Àngth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

481 #i‡
LWIP_UDPLITE


483 i‡(
pcb
->
Êags
 & 
UDP_FLAGS_UDPLITE
) {

484 
u16_t
 
chkÀn
, 
chkÀn_hdr
;

485 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

487 
chkÀn_hdr
 = 
chkÀn
 = 
pcb
->
chksum_Àn_tx
;

488 i‡((
chkÀn
 < (
udp_hdr
)Ë|| (chkÀ¿> 
q
->
tŸ_Àn
)) {

489 i‡(
chkÀn
 != 0) {

490 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖcb->chksum_À¿i†ûÀgÆ: %"
U16_F
"\n", 
chkÀn
));

498 
chkÀn_hdr
 = 0;

499 
chkÀn
 = 
q
->
tŸ_Àn
;

501 
udphdr
->
Àn
 = 
	`ht⁄s
(
chkÀn_hdr
);

503 #i‡
CHECKSUM_GEN_UDP


504 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
,

505 
IP_PROTO_UDPLITE
, 
q
->
tŸ_Àn
, 
chkÀn
);

507 i‡(
udphdr
->
chksum
 == 0x0000)

508 
udphdr
->
chksum
 = 0xffff;

511 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));

512 #i‡
LWIP_NETIF_HWADDRHINT


513 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

515 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDPLITE
, 
√tif
);

516 #i‡
LWIP_NETIF_HWADDRHINT


517 
√tif
->
addr_höt
 = 
NULL
;

522 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDPÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

523 
udphdr
->
Àn
 = 
	`ht⁄s
(
q
->
tŸ_Àn
);

525 #i‡
CHECKSUM_GEN_UDP


526 i‡((
pcb
->
Êags
 & 
UDP_FLAGS_NOCHKSUM
) == 0) {

527 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
, q->
tŸ_Àn
);

529 i‡(
udphdr
->
chksum
 == 0x0000) udphdr->chksum = 0xffff;

532 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP checksum 0x%04"
X16_F
"\n", 
udphdr
->
chksum
));

533 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));

535 #i‡
LWIP_NETIF_HWADDRHINT


536 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

538 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDP
, 
√tif
);

539 #i‡
LWIP_NETIF_HWADDRHINT


540 
√tif
->
addr_höt
 = 
NULL
;

544 
	`¢mp_öc_udpoutd©agøms
();

547 i‡(
q
 !
p
) {

549 
	`pbuf_‰ì
(
q
);

550 
q
 = 
NULL
;

554 
	`UDP_STATS_INC
(
udp
.
xmô
);

555  
îr
;

556 
	}
}

577 
îr_t


578 
	$udp_böd
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

580 
udp_pcb
 *
ùcb
;

581 
u8_t
 
ªböd
;

583 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_bind(ipaddr = "));

584 
	`ù_addr_debug_¥öt
(
UDP_DEBUG
, 
ùaddr
);

585 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, (",Ö‹à%"
U16_F
")\n", 
p‹t
));

587 
ªböd
 = 0;

589 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

591 i‡(
pcb
 =
ùcb
) {

593 
	`LWIP_ASSERT
("ªböd =0", 
ªböd
 == 0);

595 
ªböd
 = 1;

602 #ifde‡
LWIP_UDP_TODO


605 i‡((
ùcb
->
loˇl_p‹t
 =
p‹t
) &&

607 (
	`ù_addr_ißny
(&(
ùcb
->
loˇl_ù
)) ||

608 
	`ù_addr_ißny
(
ùaddr
) ||

609 
	`ù_addr_cmp
(&(
ùcb
->
loˇl_ù
), 
ùaddr
))) {

611 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

612 ("udp_böd:Üoˇ»p‹à%"
U16_F
"áÃódy bound byánŸhîÖcb\n", 
p‹t
));

613  
ERR_USE
;

618 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

621 i‡(
p‹t
 == 0) {

622 #i‚de‡
UDP_LOCAL_PORT_RANGE_START


623 
	#UDP_LOCAL_PORT_RANGE_START
 4096

	)

624 
	#UDP_LOCAL_PORT_RANGE_END
 0x7fff

	)

626 
p‹t
 = 
UDP_LOCAL_PORT_RANGE_START
;

627 
ùcb
 = 
udp_pcbs
;

628 (
ùcb
 !
NULL
Ë&& (
p‹t
 !
UDP_LOCAL_PORT_RANGE_END
)) {

629 i‡(
ùcb
->
loˇl_p‹t
 =
p‹t
) {

631 
p‹t
++;

633 
ùcb
 = 
udp_pcbs
;

636 
ùcb
 = ipcb->
√xt
;

638 i‡(
ùcb
 !
NULL
) {

640 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_bind: out of free UDPÖorts\n"));

641  
ERR_USE
;

644 
pcb
->
loˇl_p‹t
 = 
p‹t
;

645 
	`¢mp_ö£π_udpidx_åì
(
pcb
);

647 i‡(
ªböd
 == 0) {

649 
pcb
->
√xt
 = 
udp_pcbs
;

650 
udp_pcbs
 = 
pcb
;

652 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

653 ("udp_böd: boundÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",Öort %"U16_F"\n",

654 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 24) & 0xff),

655 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 16) & 0xff),

656 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 8) & 0xff),

657 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
Ë& 0xff),Öcb->
loˇl_p‹t
));

658  
ERR_OK
;

659 
	}
}

677 
îr_t


678 
	$udp_c⁄√˘
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

680 
udp_pcb
 *
ùcb
;

682 i‡(
pcb
->
loˇl_p‹t
 == 0) {

683 
îr_t
 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

684 i‡(
îr
 !
ERR_OK
)

685  
îr
;

688 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

689 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

690 
pcb
->
Êags
 |
UDP_FLAGS_CONNECTED
;

692 #ifde‡
LWIP_UDP_TODO


694 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
Ë&& !ù_addr_ißny(&pcb->
ªmŸe_ù
)) {

695 
√tif
 *netif;

697 i‡((
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
))Ë=
NULL
) {

698 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_c⁄√˘: NÿrouãÅÿ0x%lx\n", 
pcb
->
ªmŸe_ù
.
addr
));

699 
	`UDP_STATS_INC
(
udp
.
πîr
);

700  
ERR_RTE
;

705 
pcb
->
loˇl_ù
 = 
√tif
->
ù_addr
;

706 } i‡(
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
)) {

707 
pcb
->
loˇl_ù
.
addr
 = 0;

710 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

711 ("udp_c⁄√˘: c⁄√˘edÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",

712 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 24) & 0xff),

713 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 16) & 0xff),

714 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 8) & 0xff),

715 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
Ë& 0xff),Öcb->
ªmŸe_p‹t
));

718 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

719 i‡(
pcb
 =
ùcb
) {

721  
ERR_OK
;

725 
pcb
->
√xt
 = 
udp_pcbs
;

726 
udp_pcbs
 = 
pcb
;

727  
ERR_OK
;

728 
	}
}

736 
	$udp_disc⁄√˘
(
udp_pcb
 *
pcb
)

739 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
IP_ADDR_ANY
);

740 
pcb
->
ªmŸe_p‹t
 = 0;

742 
pcb
->
Êags
 &~
UDP_FLAGS_CONNECTED
;

743 
	}
}

755 
	$udp_ªcv
(
udp_pcb
 *
pcb
,

756 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
, 
pbuf
 *
p
,

757 
ù_addr
 *
addr
, 
u16_t
 
p‹t
),

758 *
ªcv_¨g
)

761 
pcb
->
ªcv
 =Ñecv;

762 
pcb
->
ªcv_¨g
 =Ñecv_arg;

763 
	}
}

774 
	$udp_ªmove
(
udp_pcb
 *
pcb
)

776 
udp_pcb
 *
pcb2
;

778 
	`¢mp_dñëe_udpidx_åì
(
pcb
);

780 i‡(
udp_pcbs
 =
pcb
) {

782 
udp_pcbs
 = udp_pcbs->
√xt
;

785 
pcb2
 = 
udp_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

787 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

789 
pcb2
->
√xt
 = 
pcb
->next;

792 
	`memp_‰ì
(
MEMP_UDP_PCB
, 
pcb
);

793 
	}
}

803 
udp_pcb
 *

804 
	$udp_√w
()

806 
udp_pcb
 *
pcb
;

807 
pcb
 = 
	`memp_mÆloc
(
MEMP_UDP_PCB
);

809 i‡(
pcb
 !
NULL
) {

814 
	`mem£t
(
pcb
, 0, (
udp_pcb
));

815 
pcb
->
âl
 = 
UDP_TTL
;

817  
pcb
;

818 
	}
}

820 #i‡
UDP_DEBUG


827 
	$udp_debug_¥öt
(
udp_hdr
 *
udphdr
)

829 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("UDP header:\n"));

830 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

831 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

832 
	`¡ohs
(
udphdr
->
§c
),Çtohs(udphdr->
de°
)));

833 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

834 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | 0x%04"
X16_F
" | (len, chksum)\n",

835 
	`¡ohs
(
udphdr
->
Àn
),Çtohs(udphdr->
chksum
)));

836 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

837 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

56 
	#AUTOIP_TMR_INTERVAL
 100

	)

57 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

60 
	#PROBE_WAIT
 1

	)

61 
	#PROBE_MIN
 1

	)

62 
	#PROBE_MAX
 2

	)

63 
	#PROBE_NUM
 3

	)

64 
	#ANNOUNCE_NUM
 2

	)

65 
	#ANNOUNCE_INTERVAL
 2

	)

66 
	#ANNOUNCE_WAIT
 2

	)

67 
	#MAX_CONFLICTS
 10

	)

68 
	#RATE_LIMIT_INTERVAL
 60

	)

69 
	#DEFEND_INTERVAL
 10

	)

72 
	#AUTOIP_STATE_OFF
 0

	)

73 
	#AUTOIP_STATE_PROBING
 1

	)

74 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

75 
	#AUTOIP_STATE_BOUND
 3

	)

77 
	sautoù


79 
ù_addr
 
	mŒùaddr
;

80 
u8_t
 
	m°©e
;

81 
u8_t
 
	m£¡_num
;

82 
u16_t
 
	mâw
;

83 
u8_t
 
	mœ°c⁄Êi˘
;

84 
u8_t
 
	måõd_Œùaddr
;

89 
autoù_öô
();

92 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

95 
îr_t
 
autoù_°›
(
√tif
 *netif);

98 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

101 
autoù_tmr
();

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


47 
	#ICMP_ER
 0

	)

48 
	#ICMP_DUR
 3

	)

49 
	#ICMP_SQ
 4

	)

50 
	#ICMP_RD
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TE
 11

	)

53 
	#ICMP_PP
 12

	)

54 
	#ICMP_TS
 13

	)

55 
	#ICMP_TSR
 14

	)

56 
	#ICMP_IRQ
 15

	)

57 
	#ICMP_IR
 16

	)

59 
	eicmp_dur_ty≥
 {

60 
ICMP_DUR_NET
 = 0,

61 
ICMP_DUR_HOST
 = 1,

62 
ICMP_DUR_PROTO
 = 2,

63 
ICMP_DUR_PORT
 = 3,

64 
ICMP_DUR_FRAG
 = 4,

65 
ICMP_DUR_SR
 = 5

68 
	eicmp_ã_ty≥
 {

69 
ICMP_TE_TTL
 = 0,

70 
ICMP_TE_FRAG
 = 1

73 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

75 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

76 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

78 #ifde‡
PACK_STRUCT_USE_INCLUDES


79 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sicmp_echo_hdr
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

91 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

93 } 
PACK_STRUCT_STRUCT
;

94 
PACK_STRUCT_END


95 #ifde‡
PACK_STRUCT_USE_INCLUDES


96 
	~"¨ch/ï°ru˘.h
"

99 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

100 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

103 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

104 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

106 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


52 
	#IP_PROTO_IGMP
 2

	)

53 
	#IGMP_TTL
 1

	)

54 
	#IGMP_MINLEN
 8

	)

55 
	#ROUTER_ALERT
 0x9404

	)

56 
	#ROUTER_ALERTLEN
 4

	)

61 
	#IGMP_MEMB_QUERY
 0x11

	)

62 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

63 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

64 
	#IGMP_LEAVE_GROUP
 0x17

	)

67 
	#IGMP_TMR_INTERVAL
 100

	)

68 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

69 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

72 
	#IGMP_DEL_MAC_FILTER
 0

	)

73 
	#IGMP_ADD_MAC_FILTER
 1

	)

76 
	#IGMP_GROUP_NON_MEMBER
 0

	)

77 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

78 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

83 #ifde‡
PACK_STRUCT_USE_INCLUDES


84 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sigmp_msg
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
igmp_group_addªss
);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

110 
	sigmp_group
 {

111 
igmp_group
 *
√xt
;

112 
√tif
 *
öãrÁ˚
;

113 
ù_addr
 
group_addªss
;

114 
u8_t
 
œ°_ªp‹ãr_Êag
;

115 
u8_t
 
group_°©e
;

116 
u16_t
 
timî
;

117 
u8_t
 
u£
;

122 
igmp_öô
();

124 
îr_t
 
igmp_°¨t
–
√tif
 *netif);

126 
îr_t
 
igmp_°›
–
√tif
 *netif);

128 
igmp_ªp‹t_groups
–
√tif
 *netif);

130 
igmp_group
 *
igmp_lookf‹_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

132 
igmp_group
 *
igmp_lookup_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

134 
îr_t
 
igmp_ªmove_group
–
igmp_group
 *
group
);

136 
igmp_öput
–
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
);

138 
îr_t
 
igmp_joögroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

140 
îr_t
 
igmp_Àavegroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

142 
igmp_tmr
();

144 
igmp_timeout
–
igmp_group
 *
group
);

146 
igmp_°¨t_timî
–
igmp_group
 *
group
, 
u8_t
 
max_time
);

148 
igmp_°›_timî
–
igmp_group
 *
group
);

150 
igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
);

152 
îr_t
 
igmp_ù_ouçut_if
–
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
, 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif);

154 
igmp_£nd
–
igmp_group
 *
group
, 
u8_t
 
ty≥
);

156 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	sö_addr
 {

43 
u32_t
 
s_addr
;

46 
	#INADDR_NONE
 ((
u32_t
)0xffffffffULË

	)

47 
	#INADDR_LOOPBACK
 ((
u32_t
)0x7f000001ULË

	)

48 
	#INADDR_ANY
 ((
u32_t
)0x00000000ULË

	)

49 
	#INADDR_BROADCAST
 ((
u32_t
)0xffffffffULË

	)

51 
u32_t
 
öë_addr
(c⁄° *
˝
);

52 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

53 *
öë_¡ﬂ
(
ö_addr
 
addr
);

55 #ifde‡
ht⁄s


56 #unde‡
ht⁄s


58 #ifde‡
ht⁄l


59 #unde‡
ht⁄l


61 #ifde‡
¡ohs


62 #unde‡
¡ohs


64 #ifde‡
¡ohl


65 #unde‡
¡ohl


68 #i‚de‡
LWIP_PLATFORM_BYTESWAP


69 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

72 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


73 
	#ht⁄s
(
x
Ë(x)

	)

74 
	#¡ohs
(
x
Ë(x)

	)

75 
	#ht⁄l
(
x
Ë(x)

	)

76 
	#¡ohl
(
x
Ë(x)

	)

78 #ifde‡
LWIP_PREFIX_BYTEORDER_FUNCS


80 
	#ht⁄s
 
lwù_ht⁄s


	)

81 
	#¡ohs
 
lwù_¡ohs


	)

82 
	#ht⁄l
 
lwù_ht⁄l


	)

83 
	#¡ohl
 
lwù_¡ohl


	)

85 #i‡
LWIP_PLATFORM_BYTESWAP


86 
	#ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

87 
	#¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

88 
	#ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

89 
	#¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

91 
u16_t
 
ht⁄s
(u16_à
x
);

92 
u16_t
 
¡ohs
(u16_à
x
);

93 
u32_t
 
ht⁄l
(u32_à
x
);

94 
u32_t
 
¡ohl
(u32_à
x
);

99 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


44 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

45 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

46 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

47 
ù_addr
 *
§c
, ù_add∏*
de°
,

48 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

49 #i‡
LWIP_UDPLITE


50 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

51 
ù_addr
 *
§c
, ù_add∏*
de°
,

52 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

55 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


48 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

50 
	#IP_HLEN
 20

	)

52 
	#IP_PROTO_ICMP
 1

	)

53 
	#IP_PROTO_UDP
 17

	)

54 
	#IP_PROTO_UDPLITE
 136

	)

55 
	#IP_PROTO_TCP
 6

	)

60 #ifde‡
IP_HDRINCL


61 #unde‡
IP_HDRINCL


63 
	#IP_HDRINCL
 
NULL


	)

65 #i‡
LWIP_NETIF_HWADDRHINT


66 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

68 
	#IP_PCB_ADDRHINT


	)

75 
	#IP_PCB
 \

77 
ù_addr
 
loˇl_ù
; \

78 
ù_addr
 
ªmŸe_ù
; \

80 
u16_t
 
so_›ti⁄s
; \

82 
u8_t
 
tos
; \

84 
u8_t
 
âl
 \

86 
IP_PCB_ADDRHINT


	)

88 
	sù_pcb
 {

90 
IP_PCB
;

96 
	#SOF_DEBUG
 (
u16_t
)0x0001U

	)

97 
	#SOF_ACCEPTCONN
 (
u16_t
)0x0002U

	)

98 
	#SOF_REUSEADDR
 (
u16_t
)0x0004U

	)

99 
	#SOF_KEEPALIVE
 (
u16_t
)0x0008U

	)

100 
	#SOF_DONTROUTE
 (
u16_t
)0x0010U

	)

101 
	#SOF_BROADCAST
 (
u16_t
)0x0020U

	)

102 
	#SOF_USELOOPBACK
 (
u16_t
)0x0040U

	)

103 
	#SOF_LINGER
 (
u16_t
)0x0080U

	)

104 
	#SOF_OOBINLINE
 (
u16_t
)0x0100U

	)

105 
	#SOF_REUSEPORT
 (
u16_t
)0x0200U

	)

108 #ifde‡
PACK_STRUCT_USE_INCLUDES


109 
	~"¨ch/bp°ru˘.h
"

111 
PACK_STRUCT_BEGIN


112 
	sù_hdr
 {

114 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

116 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

118 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

126 
PACK_STRUCT_FIELD
(
u16_t
 
_âl_¥Ÿo
);

128 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

130 
PACK_STRUCT_FIELD
(
ù_addr
 
§c
);

131 
PACK_STRUCT_FIELD
(
ù_addr
 
de°
);

132 } 
PACK_STRUCT_STRUCT
;

133 
PACK_STRUCT_END


134 #ifde‡
PACK_STRUCT_USE_INCLUDES


135 
	~"¨ch/ï°ru˘.h
"

138 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

139 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

140 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

141 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

142 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

143 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

144 
	#IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

145 
	#IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

146 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

148 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

149 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

150 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

151 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

152 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

153 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`IPH_TTL
(hdrË<< 8)))

	)

154 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

156 
	#ù_öô
(Ë

	)

157 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

158 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

159 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

160 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

161 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

162 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

163 
√tif
 *netif);

164 #i‡
LWIP_NETIF_HWADDRHINT


165 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

166 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

168 #i‡
IP_OPTIONS_SEND


169 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

170 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

171 
u16_t
 
›éí
);

173 
√tif
 *
ù_cuºít_√tif
();

174 c⁄° 
ù_hdr
 *
ù_cuºít_hódî
();

175 #i‡
IP_DEBUG


176 
ù_debug_¥öt
(
pbuf
 *
p
);

178 
	#ù_debug_¥öt
(
p
)

	)

181 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/öë.h
"

39 #ifde‡
__˝lu•lus


43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
√tif
;

73 c⁄° 
ù_addr
 
ù_addr_™y
;

74 c⁄° 
ù_addr
 
ù_addr_brﬂdˇ°
;

79 
	#IP_ADDR_ANY
 ((
ù_addr
 *)&
ù_addr_™y
)

	)

80 
	#IP_ADDR_BROADCAST
 ((
ù_addr
 *)&
ù_addr_brﬂdˇ°
)

	)

87 
	#IN_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

88 
	#IN_CLASSA_NET
 0xff000000

	)

89 
	#IN_CLASSA_NSHIFT
 24

	)

90 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

91 
	#IN_CLASSA_MAX
 128

	)

93 
	#IN_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

94 
	#IN_CLASSB_NET
 0xffff0000

	)

95 
	#IN_CLASSB_NSHIFT
 16

	)

96 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

97 
	#IN_CLASSB_MAX
 65536

	)

99 
	#IN_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

100 
	#IN_CLASSC_NET
 0xffffff00

	)

101 
	#IN_CLASSC_NSHIFT
 8

	)

102 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

104 
	#IN_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

105 
	#IN_CLASSD_NET
 0xf0000000

	)

106 
	#IN_CLASSD_NSHIFT
 28

	)

107 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

108 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

110 
	#IN_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

111 
	#IN_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

113 
	#IN_LOOPBACKNET
 127

	)

115 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

116 (
ùaddr
)->
addr
 = 
	`ht⁄l
(((
u32_t
)((
a
) & 0xff) << 24) | \

117 ((
u32_t
)((
b
) & 0xff) << 16) | \

118 ((
u32_t
)((
c
) & 0xff) << 8) | \

119 (
u32_t
)((
d
Ë& 0xff))

	)

121 
	#ù_addr_£t
(
de°
, 
§c
Ë(de°)->
addr
 = \

122 ((
§c
Ë=
NULL
? 0:\

123 (
§c
)->
addr
)

	)

132 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

133 (
mask
)->
addr
) == \

134 ((
addr2
)->
addr
 & \

135 (
mask
)->
addr
))

	)

136 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

138 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =0)

	)

140 
u8_t
 
ù_addr_isbrﬂdˇ°
(
ù_addr
 *, 
√tif
 *);

142 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xf0000000UL)Ë=¡ohl(0xe0000000UL))

	)

144 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xffff0000UL)Ë=¡ohl(0xa9„0000UL))

	)

146 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

147 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

148 
ùaddr
 !
NULL
 ? \

149 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 24) & 0xff : 0, \

150 
ùaddr
 !
NULL
 ? \

151 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 16) & 0xff : 0, \

152 
ùaddr
 !
NULL
 ? \

153 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 8) & 0xff : 0, \

154 
ùaddr
 !
NULL
 ? \

155 (
u16_t
)
	`¡ohl
((
ùaddr
)->
addr
Ë& 0xf‡: 0))

	)

159 
	#ù4_addr1
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 24Ë& 0xff)

	)

160 
	#ù4_addr2
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 16Ë& 0xff)

	)

161 
	#ù4_addr3
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 8Ë& 0xff)

	)

162 
	#ù4_addr4
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
)Ë& 0xff)

	)

164 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
);

72 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP6_DUR
 1

	)

47 
	#ICMP6_TE
 3

	)

48 
	#ICMP6_ECHO
 128

	)

49 
	#ICMP6_ER
 129

	)

52 
	eicmp_dur_ty≥
 {

53 
ICMP_DUR_NET
 = 0,

54 
ICMP_DUR_HOST
 = 1,

55 
ICMP_DUR_PROTO
 = 2,

56 
ICMP_DUR_PORT
 = 3,

57 
ICMP_DUR_FRAG
 = 4,

58 
ICMP_DUR_SR
 = 5

61 
	eicmp_ã_ty≥
 {

62 
ICMP_TE_TTL
 = 0,

63 
ICMP_TE_FRAG
 = 1

66 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

68 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

69 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

71 
	sicmp_echo_hdr
 {

72 
u8_t
 
ty≥
;

73 
u8_t
 
icode
;

74 
u16_t
 
chksum
;

75 
u16_t
 
id
;

76 
u16_t
 
£qno
;

79 
	sicmp_dur_hdr
 {

80 
u8_t
 
ty≥
;

81 
u8_t
 
icode
;

82 
u16_t
 
chksum
;

83 
u32_t
 
unu£d
;

86 
	sicmp_ã_hdr
 {

87 
u8_t
 
ty≥
;

88 
u8_t
 
icode
;

89 
u16_t
 
chksum
;

90 
u32_t
 
unu£d
;

93 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


43 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

44 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

45 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

46 
ù_addr
 *
§c
, ù_add∏*
de°
,

47 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 #i‚de‡
_MACHINE_ENDIAN_H_


53 #i‚de‡
_NETINET_IN_H


54 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


55 
u16_t
 
ht⁄s
(u16_à
n
);

56 
u16_t
 
¡ohs
(u16_à
n
);

57 
u32_t
 
ht⁄l
(u32_à
n
);

58 
u32_t
 
¡ohl
(u32_à
n
);

63 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#IP_HLEN
 40

	)

48 
	#IP_PROTO_ICMP
 58

	)

49 
	#IP_PROTO_UDP
 17

	)

50 
	#IP_PROTO_UDPLITE
 136

	)

51 
	#IP_PROTO_TCP
 6

	)

56 #ifde‡
IP_HDRINCL


57 #unde‡
IP_HDRINCL


59 
	#IP_HDRINCL
 
NULL


	)

61 #i‡
LWIP_NETIF_HWADDRHINT


62 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

64 
	#IP_PCB_ADDRHINT


	)

71 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

72 
ù_addr
 
ªmŸe_ù
; \

74 
u16_t
 
so_›ti⁄s
; \

76 
u8_t
 
tos
; \

78 
u8_t
 
âl
; \

80 
IP_PCB_ADDRHINT


	)

84 
	sù_hdr
 {

85 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


86 
u8_t
 
t˛ass1
:4, 
v
:4;

87 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

89 
u8_t
 
v
:4, 
t˛ass1
:4;

90 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

92 
u16_t
 
Êow2
;

93 
u16_t
 
Àn
;

94 
u8_t
 
√xthdr
;

95 
u8_t
 
h›lim
;

96 
ù_addr
 
§c
, 
de°
;

99 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

101 
ù_öô
();

103 
	~"lwù/√tif.h
"

105 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

107 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

110 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

111 
u8_t
 
âl
, u8_à
¥Ÿo
);

113 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

114 
u8_t
 
âl
, u8_à
¥Ÿo
,

115 
√tif
 *netif);

117 
	#ù_cuºít_√tif
(Ë
NULL


	)

118 
	#ù_cuºít_hódî
(Ë
NULL


	)

120 #i‡
IP_DEBUG


121 
ù_debug_¥öt
(
pbuf
 *
p
);

124 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 
	#IP_ADDR_ANY
 0

	)

43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

72 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

73 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

74 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

76 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

77 
ù_addr
 *
mask
);

78 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

79 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

80 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

82 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

83 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

84 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

85 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

86 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

87 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

88 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

89 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

90 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

91 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

93 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

61 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

62 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

64 
	e√tc⁄n_ty≥
 {

65 
NETCONN_INVALID
 = 0,

67 
NETCONN_TCP
 = 0x10,

69 
NETCONN_UDP
 = 0x20,

70 
NETCONN_UDPLITE
 = 0x21,

71 
NETCONN_UDPNOCHKSUM
= 0x22,

73 
NETCONN_RAW
 = 0x40

76 
	e√tc⁄n_°©e
 {

77 
NETCONN_NONE
,

78 
NETCONN_WRITE
,

79 
NETCONN_LISTEN
,

80 
NETCONN_CONNECT
,

81 
NETCONN_CLOSE


84 
	e√tc⁄n_evt
 {

85 
NETCONN_EVT_RCVPLUS
,

86 
NETCONN_EVT_RCVMINUS
,

87 
NETCONN_EVT_SENDPLUS
,

88 
NETCONN_EVT_SENDMINUS


91 #i‡
LWIP_IGMP


92 
	e√tc⁄n_igmp
 {

93 
NETCONN_JOIN
,

94 
NETCONN_LEAVE


99 
ù_pcb
;

100 
t˝_pcb
;

101 
udp_pcb
;

102 
øw_pcb
;

103 
√tc⁄n
;

106 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

109 
	s√tc⁄n
 {

111 
√tc⁄n_ty≥
 
ty≥
;

113 
√tc⁄n_°©e
 
°©e
;

116 
ù_pcb
 *
ù
;

117 
t˝_pcb
 *
t˝
;

118 
udp_pcb
 *
udp
;

119 
øw_pcb
 *
øw
;

120 } 
pcb
;

122 
îr_t
 
îr
;

124 
sys_£m_t
 
›_com∂ëed
;

127 
sys_mbox_t
 
ªcvmbox
;

130 
sys_mbox_t
 
ac˚±mbox
;

132 
sockë
;

133 #i‡
LWIP_SO_RCVTIMEO


136 
ªcv_timeout
;

138 #i‡
LWIP_SO_RCVBUF


140 
ªcv_bufsize
;

142 
s16_t
 
ªcv_avaû
;

143 #i‡
LWIP_TCP


146 
≠i_msg_msg
 *
wrôe_msg
;

149 
size_t
 
wrôe_off£t
;

150 #i‡
LWIP_TCPIP_CORE_LOCKING


154 
u8_t
 
wrôe_dñayed
;

158 
√tc⁄n_ˇŒback
 
ˇŒback
;

162 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

163 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

164 }

	)

167 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

168 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

170 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

171 
√tc⁄n_ˇŒback
 
ˇŒback
);

172 
îr_t
 
√tc⁄n_dñëe
 (
√tc⁄n
 *
c⁄n
);

174 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

176 
îr_t
 
√tc⁄n_gëaddr
 (
√tc⁄n
 *
c⁄n
,

177 
ù_addr
 *
addr
,

178 
u16_t
 *
p‹t
,

179 
u8_t
 
loˇl
);

180 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

181 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

183 
îr_t
 
√tc⁄n_böd
 (
√tc⁄n
 *
c⁄n
,

184 
ù_addr
 *
addr
,

185 
u16_t
 
p‹t
);

186 
îr_t
 
√tc⁄n_c⁄√˘
 (
√tc⁄n
 *
c⁄n
,

187 
ù_addr
 *
addr
,

188 
u16_t
 
p‹t
);

189 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

190 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

191 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

192 
√tc⁄n
 * 
√tc⁄n_ac˚±
 (√tc⁄¿*
c⁄n
);

193 
√tbuf
 * 
√tc⁄n_ªcv
 (
√tc⁄n
 *
c⁄n
);

194 
îr_t
 
√tc⁄n_£ndto
 (
√tc⁄n
 *
c⁄n
,

195 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

196 
îr_t
 
√tc⁄n_£nd
 (
√tc⁄n
 *
c⁄n
,

197 
√tbuf
 *
buf
);

198 
îr_t
 
√tc⁄n_wrôe
 (
√tc⁄n
 *
c⁄n
,

199 c⁄° *
d©≠å
, 
size_t
 
size
,

200 
u8_t
 
≠iÊags
);

201 
îr_t
 
√tc⁄n_˛o£
 (
√tc⁄n
 *
c⁄n
);

203 #i‡
LWIP_IGMP


204 
îr_t
 
√tc⁄n_joö_Àave_group
 (
√tc⁄n
 *
c⁄n
,

205 
ù_addr
 *
mu…üddr
,

206 
ù_addr
 *
öãrÁ˚
,

207 
√tc⁄n_igmp
 
joö_‹_Àave
);

209 #i‡
LWIP_DNS


210 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
);

213 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
îr
)

	)

214 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

216 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


57 
	s≠i_msg_msg
 {

60 
√tc⁄n
 *
c⁄n
;

64 
√tbuf
 *
b
;

67 
u8_t
 
¥Ÿo
;

68 } 
n
;

71 
ù_addr
 *
ùaddr
;

72 
u16_t
 
p‹t
;

73 } 
bc
;

76 
ù_addr
 *
ùaddr
;

77 
u16_t
 *
p‹t
;

78 
u8_t
 
loˇl
;

79 } 
ad
;

82 c⁄° *
d©≠å
;

83 
size_t
 
Àn
;

84 
u8_t
 
≠iÊags
;

85 } 
w
;

88 
u16_t
 
Àn
;

89 } 
r
;

90 #i‡
LWIP_IGMP


93 
ù_addr
 *
mu…üddr
;

94 
ù_addr
 *
öãrÁ˚
;

95 
√tc⁄n_igmp
 
joö_‹_Àave
;

96 } 
jl
;

98 #i‡
TCP_LISTEN_BACKLOG


100 
u8_t
 
backlog
;

101 } 
lb
;

103 } 
msg
;

109 
	s≠i_msg
 {

111 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

113 
≠i_msg_msg
 
msg
;

116 #i‡
LWIP_DNS


121 
	sdns_≠i_msg
 {

123 c⁄° *
«me
;

125 
ù_addr
 *
addr
;

128 
sys_£m_t
 
£m
;

130 
îr_t
 *
îr
;

134 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

135 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

136 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

137 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

138 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

139 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

140 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

141 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

142 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

143 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

144 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

145 #i‡
LWIP_IGMP


146 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

149 #i‡
LWIP_DNS


150 
do_gëho°by«me
(*
¨g
);

153 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

154 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

156 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

50 #ifde‡
__˝lu•lus


54 #i‚de‡
PACK_STRUCT_BEGIN


55 
	#PACK_STRUCT_BEGIN


	)

58 #i‚de‡
PACK_STRUCT_END


59 
	#PACK_STRUCT_END


	)

62 #i‚de‡
PACK_STRUCT_FIELD


63 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

67 #i‚de‡
LWIP_UNUSED_ARG


68 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

72 #ifde‡
LWIP_PROVIDE_ERRNO


74 
	#EPERM
 1

	)

75 
	#ENOENT
 2

	)

76 
	#ESRCH
 3

	)

77 
	#EINTR
 4

	)

78 
	#EIO
 5

	)

79 
	#ENXIO
 6

	)

80 
	#E2BIG
 7

	)

81 
	#ENOEXEC
 8

	)

82 
	#EBADF
 9

	)

83 
	#ECHILD
 10

	)

84 
	#EAGAIN
 11

	)

85 
	#ENOMEM
 12

	)

86 
	#EACCES
 13

	)

87 
	#EFAULT
 14

	)

88 
	#ENOTBLK
 15

	)

89 
	#EBUSY
 16

	)

90 
	#EEXIST
 17

	)

91 
	#EXDEV
 18

	)

92 
	#ENODEV
 19

	)

93 
	#ENOTDIR
 20

	)

94 
	#EISDIR
 21

	)

95 
	#EINVAL
 22

	)

96 
	#ENFILE
 23

	)

97 
	#EMFILE
 24

	)

98 
	#ENOTTY
 25

	)

99 
	#ETXTBSY
 26

	)

100 
	#EFBIG
 27

	)

101 
	#ENOSPC
 28

	)

102 
	#ESPIPE
 29

	)

103 
	#EROFS
 30

	)

104 
	#EMLINK
 31

	)

105 
	#EPIPE
 32

	)

106 
	#EDOM
 33

	)

107 
	#ERANGE
 34

	)

108 
	#EDEADLK
 35

	)

109 
	#ENAMETOOLONG
 36

	)

110 
	#ENOLCK
 37

	)

111 
	#ENOSYS
 38

	)

112 
	#ENOTEMPTY
 39

	)

113 
	#ELOOP
 40

	)

114 
	#EWOULDBLOCK
 
EAGAIN


	)

115 
	#ENOMSG
 42

	)

116 
	#EIDRM
 43

	)

117 
	#ECHRNG
 44

	)

118 
	#EL2NSYNC
 45

	)

119 
	#EL3HLT
 46

	)

120 
	#EL3RST
 47

	)

121 
	#ELNRNG
 48

	)

122 
	#EUNATCH
 49

	)

123 
	#ENOCSI
 50

	)

124 
	#EL2HLT
 51

	)

125 
	#EBADE
 52

	)

126 
	#EBADR
 53

	)

127 
	#EXFULL
 54

	)

128 
	#ENOANO
 55

	)

129 
	#EBADRQC
 56

	)

130 
	#EBADSLT
 57

	)

132 
	#EDEADLOCK
 
EDEADLK


	)

134 
	#EBFONT
 59

	)

135 
	#ENOSTR
 60

	)

136 
	#ENODATA
 61

	)

137 
	#ETIME
 62

	)

138 
	#ENOSR
 63

	)

139 
	#ENONET
 64

	)

140 
	#ENOPKG
 65

	)

141 
	#EREMOTE
 66

	)

142 
	#ENOLINK
 67

	)

143 
	#EADV
 68

	)

144 
	#ESRMNT
 69

	)

145 
	#ECOMM
 70

	)

146 
	#EPROTO
 71

	)

147 
	#EMULTIHOP
 72

	)

148 
	#EDOTDOT
 73

	)

149 
	#EBADMSG
 74

	)

150 
	#EOVERFLOW
 75

	)

151 
	#ENOTUNIQ
 76

	)

152 
	#EBADFD
 77

	)

153 
	#EREMCHG
 78

	)

154 
	#ELIBACC
 79

	)

155 
	#ELIBBAD
 80

	)

156 
	#ELIBSCN
 81

	)

157 
	#ELIBMAX
 82

	)

158 
	#ELIBEXEC
 83

	)

159 
	#EILSEQ
 84

	)

160 
	#ERESTART
 85

	)

161 
	#ESTRPIPE
 86

	)

162 
	#EUSERS
 87

	)

163 
	#ENOTSOCK
 88

	)

164 
	#EDESTADDRREQ
 89

	)

165 
	#EMSGSIZE
 90

	)

166 
	#EPROTOTYPE
 91

	)

167 
	#ENOPROTOOPT
 92

	)

168 
	#EPROTONOSUPPORT
 93

	)

169 
	#ESOCKTNOSUPPORT
 94

	)

170 
	#EOPNOTSUPP
 95

	)

171 
	#EPFNOSUPPORT
 96

	)

172 
	#EAFNOSUPPORT
 97

	)

173 
	#EADDRINUSE
 98

	)

174 
	#EADDRNOTAVAIL
 99

	)

175 
	#ENETDOWN
 100

	)

176 
	#ENETUNREACH
 101

	)

177 
	#ENETRESET
 102

	)

178 
	#ECONNABORTED
 103

	)

179 
	#ECONNRESET
 104

	)

180 
	#ENOBUFS
 105

	)

181 
	#EISCONN
 106

	)

182 
	#ENOTCONN
 107

	)

183 
	#ESHUTDOWN
 108

	)

184 
	#ETOOMANYREFS
 109

	)

185 
	#ETIMEDOUT
 110

	)

186 
	#ECONNREFUSED
 111

	)

187 
	#EHOSTDOWN
 112

	)

188 
	#EHOSTUNREACH
 113

	)

189 
	#EALREADY
 114

	)

190 
	#EINPROGRESS
 115

	)

191 
	#ESTALE
 116

	)

192 
	#EUCLEAN
 117

	)

193 
	#ENOTNAM
 118

	)

194 
	#ENAVAIL
 119

	)

195 
	#EISNAM
 120

	)

196 
	#EREMOTEIO
 121

	)

197 
	#EDQUOT
 122

	)

199 
	#ENOMEDIUM
 123

	)

200 
	#EMEDIUMTYPE
 124

	)

203 
	#ENSROK
 0

	)

204 
	#ENSRNODATA
 160

	)

205 
	#ENSRFORMERR
 161

	)

206 
	#ENSRSERVFAIL
 162

	)

207 
	#ENSRNOTFOUND
 163

	)

208 
	#ENSRNOTIMP
 164

	)

209 
	#ENSRREFUSED
 165

	)

210 
	#ENSRBADQUERY
 166

	)

211 
	#ENSRBADNAME
 167

	)

212 
	#ENSRBADFAMILY
 168

	)

213 
	#ENSRBADRESP
 169

	)

214 
	#ENSRCONNREFUSED
 170

	)

215 
	#ENSRTIMEOUT
 171

	)

216 
	#ENSROF
 172

	)

217 
	#ENSRFILE
 173

	)

218 
	#ENSRNOMEM
 174

	)

219 
	#ENSRDESTRUCTION
 175

	)

220 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

221 
	#ENSRCNAMELOOP
 177

	)

223 #i‚de‡
î∫o


224 
î∫o
;

229 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_OFF
 0x00

	)

44 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

45 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

46 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

47 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

50 
	#LWIP_DBG_ON
 0x80U

	)

52 
	#LWIP_DBG_OFF
 0x00U

	)

55 
	#LWIP_DBG_TRACE
 0x40U

	)

57 
	#LWIP_DBG_STATE
 0x20U

	)

59 
	#LWIP_DBG_FRESH
 0x10U

	)

61 
	#LWIP_DBG_HALT
 0x08U

	)

63 #i‚de‡
LWIP_NOASSERT


64 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

65 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

67 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

71 #i‚de‡
LWIP_ERROR


72 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

73 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

76 #ifde‡
LWIP_DEBUG


80 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

82 ((
debug
Ë& 
LWIP_DBG_ON
) && \

83 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

84 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

85 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

86 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

90 } 0)

	)

93 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

38 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

39 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

41 #i‚de‡
NULL


42 
	#NULL
 ((*)0)

	)

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	sdh˝


28 
u8_t
 
°©e
;

30 
u8_t
 
åõs
;

32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
pbuf
 *
p
;

38 
dh˝_msg
 *
msg_ö
;

40 
dh˝_msg
 *
›ti⁄s_ö
;

42 
u16_t
 
›ti⁄s_ö_Àn
;

44 
pbuf
 *
p_out
;

45 
dh˝_msg
 *
msg_out
;

46 
u16_t
 
›ti⁄s_out_Àn
;

47 
u16_t
 
ªque°_timeout
;

48 
u16_t
 
t1_timeout
;

49 
u16_t
 
t2_timeout
;

50 
ù_addr
 
£rvî_ù_addr
;

51 
ù_addr
 
of„ªd_ù_addr
;

52 
ù_addr
 
of„ªd_¢_mask
;

53 
ù_addr
 
of„ªd_gw_addr
;

54 
ù_addr
 
of„ªd_bc_addr
;

55 
	#DHCP_MAX_DNS
 2

	)

56 
u32_t
 
dns_cou¡
;

57 
ù_addr
 
of„ªd_dns_addr
[
DHCP_MAX_DNS
];

59 
u32_t
 
of„ªd_t0_Àa£
;

60 
u32_t
 
of„ªd_t1_ª√w
;

61 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_AUTOIP_COOP


63 
u8_t
 
autoù_co›_°©e
;

69 
ù_addr
 
of„ªd_si_addr
;

70 
u8_t
 *
boŸ_fûe_«me
;

75 #ifde‡
PACK_STRUCT_USE_INCLUDES


76 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


80 
	sdh˝_msg


82 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

86 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

88 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

89 
PACK_STRUCT_FIELD
(
ù_addr
 
cüddr
);

90 
PACK_STRUCT_FIELD
(
ù_addr
 
yüddr
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
süddr
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
güddr
);

93 
	#DHCP_CHADDR_LEN
 16U

	)

94 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

95 
	#DHCP_SNAME_LEN
 64U

	)

96 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

97 
	#DHCP_FILE_LEN
 128U

	)

98 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

99 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

100 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

102 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

103 #unde‡
DHCP_OPTIONS_LEN


106 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

108 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

110 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

111 } 
PACK_STRUCT_STRUCT
;

112 
PACK_STRUCT_END


113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/ï°ru˘.h
"

118 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

120 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

122 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

124 
dh˝_°›
(
√tif
 *netif);

126 
dh˝_öf‹m
(
√tif
 *netif);

129 #i‡
DHCP_DOES_ARP_CHECK


130 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
);

134 
dh˝_cﬂr£_tmr
();

136 
dh˝_föe_tmr
();

139 
	#DHCP_MSG_OFS
 (
UDP_DATA_OFS
)

	)

140 
	#DHCP_OP_OFS
 (
DHCP_MSG_OFS
 + 0)

	)

141 
	#DHCP_HTYPE_OFS
 (
DHCP_MSG_OFS
 + 1)

	)

142 
	#DHCP_HLEN_OFS
 (
DHCP_MSG_OFS
 + 2)

	)

143 
	#DHCP_HOPS_OFS
 (
DHCP_MSG_OFS
 + 3)

	)

144 
	#DHCP_XID_OFS
 (
DHCP_MSG_OFS
 + 4)

	)

145 
	#DHCP_SECS_OFS
 (
DHCP_MSG_OFS
 + 8)

	)

146 
	#DHCP_FLAGS_OFS
 (
DHCP_MSG_OFS
 + 10)

	)

147 
	#DHCP_CIADDR_OFS
 (
DHCP_MSG_OFS
 + 12)

	)

148 
	#DHCP_YIADDR_OFS
 (
DHCP_MSG_OFS
 + 16)

	)

149 
	#DHCP_SIADDR_OFS
 (
DHCP_MSG_OFS
 + 20)

	)

150 
	#DHCP_GIADDR_OFS
 (
DHCP_MSG_OFS
 + 24)

	)

151 
	#DHCP_CHADDR_OFS
 (
DHCP_MSG_OFS
 + 28)

	)

152 
	#DHCP_SNAME_OFS
 (
DHCP_MSG_OFS
 + 44)

	)

153 
	#DHCP_FILE_OFS
 (
DHCP_MSG_OFS
 + 108)

	)

154 
	#DHCP_MSG_LEN
 236

	)

156 
	#DHCP_COOKIE_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
)

	)

157 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
 + 4)

	)

159 
	#DHCP_CLIENT_PORT
 68

	)

160 
	#DHCP_SERVER_PORT
 67

	)

163 
	#DHCP_REQUESTING
 1

	)

164 
	#DHCP_INIT
 2

	)

165 
	#DHCP_REBOOTING
 3

	)

166 
	#DHCP_REBINDING
 4

	)

167 
	#DHCP_RENEWING
 5

	)

168 
	#DHCP_SELECTING
 6

	)

169 
	#DHCP_INFORMING
 7

	)

170 
	#DHCP_CHECKING
 8

	)

171 
	#DHCP_PERMANENT
 9

	)

172 
	#DHCP_BOUND
 10

	)

174 
	#DHCP_BACKING_OFF
 12

	)

175 
	#DHCP_OFF
 13

	)

178 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

179 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

181 
	#DHCP_BOOTREQUEST
 1

	)

182 
	#DHCP_BOOTREPLY
 2

	)

184 
	#DHCP_DISCOVER
 1

	)

185 
	#DHCP_OFFER
 2

	)

186 
	#DHCP_REQUEST
 3

	)

187 
	#DHCP_DECLINE
 4

	)

188 
	#DHCP_ACK
 5

	)

189 
	#DHCP_NAK
 6

	)

190 
	#DHCP_RELEASE
 7

	)

191 
	#DHCP_INFORM
 8

	)

193 
	#DHCP_HTYPE_ETH
 1

	)

195 
	#DHCP_HLEN_ETH
 6

	)

197 
	#DHCP_BROADCAST_FLAG
 15

	)

198 
	#DHCP_BROADCAST_MASK
 (1 << 
DHCP_FLAG_BROADCAST
)

	)

201 
	#DHCP_OPTION_PAD
 0

	)

202 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

203 
	#DHCP_OPTION_ROUTER
 3

	)

204 
	#DHCP_OPTION_DNS_SERVER
 6

	)

205 
	#DHCP_OPTION_HOSTNAME
 12

	)

206 
	#DHCP_OPTION_IP_TTL
 23

	)

207 
	#DHCP_OPTION_MTU
 26

	)

208 
	#DHCP_OPTION_BROADCAST
 28

	)

209 
	#DHCP_OPTION_TCP_TTL
 37

	)

210 
	#DHCP_OPTION_END
 255

	)

213 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

214 
	#DHCP_OPTION_LEASE_TIME
 51

	)

215 
	#DHCP_OPTION_OVERLOAD
 52

	)

217 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

218 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

221 
	#DHCP_OPTION_SERVER_ID
 54

	)

222 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

224 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

225 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

227 
	#DHCP_OPTION_T1
 58

	)

228 
	#DHCP_OPTION_T2
 59

	)

229 
	#DHCP_OPTION_US
 60

	)

230 
	#DHCP_OPTION_CLIENT_ID
 61

	)

231 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

232 
	#DHCP_OPTION_BOOTFILE
 67

	)

235 
	#DHCP_OVERLOAD_NONE
 0

	)

236 
	#DHCP_OVERLOAD_FILE
 1

	)

237 
	#DHCP_OVERLOAD_SNAME
 2

	)

238 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

240 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


42 
	#DNS_TMR_INTERVAL
 1000

	)

45 
	#DNS_RRTYPE_A
 1

	)

46 
	#DNS_RRTYPE_NS
 2

	)

47 
	#DNS_RRTYPE_MD
 3

	)

48 
	#DNS_RRTYPE_MF
 4

	)

49 
	#DNS_RRTYPE_CNAME
 5

	)

50 
	#DNS_RRTYPE_SOA
 6

	)

51 
	#DNS_RRTYPE_MB
 7

	)

52 
	#DNS_RRTYPE_MG
 8

	)

53 
	#DNS_RRTYPE_MR
 9

	)

54 
	#DNS_RRTYPE_NULL
 10

	)

55 
	#DNS_RRTYPE_WKS
 11

	)

56 
	#DNS_RRTYPE_PTR
 12

	)

57 
	#DNS_RRTYPE_HINFO
 13

	)

58 
	#DNS_RRTYPE_MINFO
 14

	)

59 
	#DNS_RRTYPE_MX
 15

	)

60 
	#DNS_RRTYPE_TXT
 16

	)

63 
	#DNS_RRCLASS_IN
 1

	)

64 
	#DNS_RRCLASS_CS
 2

	)

65 
	#DNS_RRCLASS_CH
 3

	)

66 
	#DNS_RRCLASS_HS
 4

	)

67 
	#DNS_RRCLASS_FLUSH
 0x800

	)

76 (*
	tdns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr
 *
	tùaddr
, *
	tˇŒback_¨g
);

79 
	`dns_öô
();

81 
	`dns_tmr
();

83 
	`dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
);

85 
ù_addr
 
	`dns_gë£rvî
(
u8_t
 
numdns
);

87 
îr_t
 
	`dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
,

88 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

90 #i‡
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


91 
	`dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

92 
îr_t
 
	`dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

58 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_RTE
)

	)

60 
	#ERR_ABRT
 -5

	)

61 
	#ERR_RST
 -6

	)

62 
	#ERR_CLSD
 -7

	)

63 
	#ERR_CONN
 -8

	)

65 
	#ERR_VAL
 -9

	)

67 
	#ERR_ARG
 -10

	)

69 
	#ERR_USE
 -11

	)

71 
	#ERR_IF
 -12

	)

72 
	#ERR_ISCONN
 -13

	)

74 
	#ERR_INPROGRESS
 -14

	)

77 #ifde‡
LWIP_DEBUG


78 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

80 
	#lwù_°ªº
(
x
Ë""

	)

83 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 3U

	)

46 
	#LWIP_VERSION_REVISION
 1U

	)

50 
	#LWIP_VERSION_RC
 255U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

61 #i‚de‡
mem_ªÆloc


62 *
	$mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
)

64 
	`LWIP_UNUSED_ARG
(
size
);

65  
mem
;

66 
	}
}

73 #i‡
MEM_SIZE
 > 64000l

74 
u32_t
 
	tmem_size_t
;

76 
u16_t
 
	tmem_size_t
;

79 #i‡
MEM_USE_POOLS


81 
	#mem_öô
()

	)

84 
	#mem_ªÆloc
(
mem
, 
size
Ë(mem)

	)

87 
mem_öô
();

88 *
mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
);

90 *
mem_mÆloc
(
mem_size_t
 
size
);

91 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

92 
mem_‰ì
(*
mem
);

95 #i‚de‡
LWIP_MEM_ALIGN_SIZE


96 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

99 #i‚de‡
LWIP_MEM_ALIGN


100 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

103 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


79 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

82 #i‡
MEMP_MEM_MALLOC


84 
	~"mem.h
"

86 
	#memp_öô
()

	)

87 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

88 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

92 #i‡
MEM_USE_POOLS


94 
	smemp_mÆloc_hñ≥r


96 
memp_t
 
	gpoﬁƒ
;

100 
memp_öô
();

102 #i‡
MEMP_OVERFLOW_CHECK


103 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

104 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

106 *
memp_mÆloc
(
memp_t
 
ty≥
);

108 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

112 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

51 #i‡
LWIP_NETCONN


52 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

53 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

56 #i‡
NO_SYS
==0

57 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

58 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

61 #i‡
ARP_QUEUEING


62 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

65 #i‡
LWIP_IGMP


66 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

69 #i‡
NO_SYS
==0

70 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

82 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

83 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

90 #i‡
MEMP_USE_CUSTOM_POOLS


91 
	~"lwùpoﬁs.h
"

98 #unde‡
LWIP_MEMPOOL


99 #unde‡
LWIP_MALLOC_MEMPOOL


100 #unde‡
LWIP_MALLOC_MEMPOOL_START


101 #unde‡
LWIP_MALLOC_MEMPOOL_END


102 #unde‡
LWIP_PBUF_MEMPOOL


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

38 #ifde‡
__˝lu•lus


42 
	s√tbuf
 {

43 
pbuf
 *
p
, *
±r
;

44 
ù_addr
 *
addr
;

45 
u16_t
 
p‹t
;

49 
√tbuf
 * 
√tbuf_√w
 ();

50 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

51 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

52 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

53 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

54 c⁄° *
d©≠å
, 
u16_t
 
size
);

55 
√tbuf_chaö
 (
√tbuf
 *
hód
,

56 
√tbuf
 *
èû
);

58 
u16_t
 
√tbuf_Àn
 (
√tbuf
 *
buf
);

59 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

60 **
d©≠å
, 
u16_t
 *
Àn
);

61 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

62 
√tbuf_fú°
 (
√tbuf
 *
buf
);

65 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

66 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

67 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

68 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

69 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

70 
	#√tbuf_‰omaddr
(
buf
Ë((buf)->
addr
)

	)

71 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

73 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netdb.h

30 
	~"lwù/›t.h
"

32 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


34 
	~<°ddef.h
>

36 
	~"lwù/sockës.h
"

39 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


40 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

43 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


44 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

47 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


48 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

51 #i‡
LWIP_DNS_API_DEFINE_ERRORS


53 
	#EAI_NONAME
 200

	)

54 
	#EAI_SERVICE
 201

	)

55 
	#EAI_FAIL
 202

	)

56 
	#EAI_MEMORY
 203

	)

58 
	#HOST_NOT_FOUND
 210

	)

59 
	#NO_DATA
 211

	)

60 
	#NO_RECOVERY
 212

	)

61 
	#TRY_AGAIN
 213

	)

64 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


65 
	sho°ít
 {

66 *
	mh_«me
;

67 **
	mh_Æü£s
;

69 
	mh_addπy≥
;

70 
	mh_Àngth
;

71 **
	mh_addr_li°
;

73 
	#h_addr
 
h_addr_li°
[0]

	)

76 
	saddröfo
 {

77 
	mai_Êags
;

78 
	mai_Ámûy
;

79 
	mai_sockty≥
;

80 
	mai_¥Ÿocﬁ
;

81 
sockÀn_t
 
	mai_addæí
;

82 
sockaddr
 *
	mai_addr
;

83 *
	mai_ˇn⁄«me
;

84 
addröfo
 *
	mai_√xt
;

88 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


90 
h_î∫o
;

93 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

94 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

95 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

96 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

97 
lwù_gëaddröfo
(c⁄° *
nodíame
,

98 c⁄° *
£rv«me
,

99 c⁄° 
addröfo
 *
höts
,

100 
addröfo
 **
ªs
);

102 #i‡
LWIP_COMPAT_SOCKETS


103 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

104 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

105 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

106 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
(
a
)

	)

107 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

108 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/öë.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

71 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

73 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

75 
	#NETIF_FLAG_DHCP
 0x08U

	)

78 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

80 
	#NETIF_FLAG_ETHARP
 0x20U

	)

82 
	#NETIF_FLAG_IGMP
 0x40U

	)

88 
	s√tif
 {

90 
√tif
 *
√xt
;

93 
ù_addr
 ip_addr;

94 
ù_addr
 
√tmask
;

95 
ù_addr
 
gw
;

99 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *
öp
);

103 
îr_t
 (* 
ouçut
)(
√tif
 *√tif, 
pbuf
 *
p
,

104 
ù_addr
 *
ùaddr
);

108 
îr_t
 (* 
lökouçut
)(
√tif
 *√tif, 
pbuf
 *
p
);

109 #i‡
LWIP_NETIF_STATUS_CALLBACK


112 (* 
°©us_ˇŒback
)(
√tif
 *netif);

114 #i‡
LWIP_NETIF_LINK_CALLBACK


117 (* 
lök_ˇŒback
)(
√tif
 *netif);

121 *
°©e
;

122 #i‡
LWIP_DHCP


124 
dh˝
 *dhcp;

126 #i‡
LWIP_AUTOIP


128 
autoù
 *autoip;

130 #i‡
LWIP_NETIF_HOSTNAME


132 * 
ho°«me
;

135 
u8_t
 
hwaddr_Àn
;

137 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

139 
u16_t
 
mtu
;

141 
u8_t
 
Êags
;

143 
«me
[2];

145 
u8_t
 
num
;

146 #i‡
LWIP_SNMP


148 
u8_t
 
lök_ty≥
;

150 
u32_t
 
lök_•ìd
;

152 
u32_t
 
ts
;

154 
u32_t
 
iföo˘ës
;

155 
u32_t
 
iföuˇ°pkts
;

156 
u32_t
 
ifönuˇ°pkts
;

157 
u32_t
 
ifödisˇrds
;

158 
u32_t
 
ifouto˘ës
;

159 
u32_t
 
ifoutuˇ°pkts
;

160 
u32_t
 
ifouäuˇ°pkts
;

161 
u32_t
 
ifoutdisˇrds
;

163 #i‡
LWIP_IGMP


165 
îr_t
 (*
igmp_mac_fûãr
)–
√tif
 *√tif, 
ù_addr
 *
group
, 
u8_t
 
a˘i⁄
);

167 #i‡
LWIP_NETIF_HWADDRHINT


168 
u8_t
 *
addr_höt
;

170 #i‡
ENABLE_LOOPBACK


172 
pbuf
 *
lo›_fú°
;

173 
pbuf
 *
lo›_œ°
;

174 #i‡
LWIP_LOOPBACK_MAX_PBUFS


175 
u16_t
 
lo›_˙t_cuºít
;

180 #i‡
LWIP_SNMP


181 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

183 
√tif
->
lök_ty≥
 = 
ty≥
; \

185 
√tif
->
lök_•ìd
 = 
•ìd
; \

186 
√tif
->
ts
 = 0; \

187 
√tif
->
iföo˘ës
 = 0; \

188 
√tif
->
iföuˇ°pkts
 = 0; \

189 
√tif
->
ifönuˇ°pkts
 = 0; \

190 
√tif
->
ifödisˇrds
 = 0; \

191 
√tif
->
ifouto˘ës
 = 0; \

192 
√tif
->
ifoutuˇ°pkts
 = 0; \

193 
√tif
->
ifouäuˇ°pkts
 = 0; \

194 
√tif
->
ifoutdisˇrds
 = 0

	)

196 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

201 
√tif
 *
√tif_li°
;

203 
√tif
 *
√tif_deÁu…
;

205 
	#√tif_öô
(Ë

	)

207 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

208 
ù_addr
 *
gw
,

209 *
°©e
,

210 
îr_t
 (* 
öô
)(
√tif
 *netif),

211 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif));

214 
√tif_£t_addr
(
√tif
 *√tif,
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

215 
ù_addr
 *
gw
);

216 
√tif_ªmove
(
√tif
 *Çetif);

222 
√tif
 *
√tif_föd
(*
«me
);

224 
√tif_£t_deÁu…
(
√tif
 *netif);

226 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

227 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
);

228 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
);

230 
√tif_£t_up
(
√tif
 *netif);

231 
√tif_£t_down
(
√tif
 *netif);

232 
u8_t
 
√tif_is_up
(
√tif
 *netif);

234 #i‡
LWIP_NETIF_STATUS_CALLBACK


238 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif));

241 #i‡
LWIP_NETIF_LINK_CALLBACK


242 
√tif_£t_lök_up
(
√tif
 *netif);

243 
√tif_£t_lök_down
(
√tif
 *netif);

244 
u8_t
 
√tif_is_lök_up
(
√tif
 *netif);

248 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif));

251 #ifde‡
__˝lu•lus


255 #i‡
ENABLE_LOOPBACK


256 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
de°_ù
);

257 
√tif_pﬁl
(
√tif
 *netif);

258 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


259 
√tif_pﬁl_Æl
();

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 
	s√tiÁpi_msg_msg
 {

45 #i‡!
LWIP_TCPIP_CORE_LOCKING


46 
sys_£m_t
 
£m
;

48 
îr_t
 
îr
;

49 
√tif
 *netif;

52 
ù_addr
 *
ùaddr
;

53 
ù_addr
 *
√tmask
;

54 
ù_addr
 *
gw
;

55 *
°©e
;

56 
îr_t
 (* 
öô
Ë(
√tif
 *netif);

57 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif);

58 } 
add
;

60 (* 
voidfunc
)(
√tif
 *netif);

61 
îr_t
 (* 
îπfunc
)(
√tif
 *netif);

62 } 
comm⁄
;

63 } 
msg
;

66 
	s√tiÁpi_msg
 {

67 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

68 
√tiÁpi_msg_msg
 
msg
;

73 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

74 
ù_addr
 *
ùaddr
,

75 
ù_addr
 *
√tmask
,

76 
ù_addr
 *
gw
,

77 *
°©e
,

78 
îr_t
 (* 
öô
)(
√tif
 *netif),

79 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif) );

81 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

82 (* 
voidfunc
)(
√tif
 *netif),

83 
îr_t
 (* 
îπfunc
)(
√tif
 *netif) );

85 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

86 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

87 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

88 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

89 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

90 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

91 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

92 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

94 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
MEMCPY


76 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

83 #i‚de‡
SMEMCPY


84 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

97 #i‚de‡
MEM_LIBC_MALLOC


98 
	#MEM_LIBC_MALLOC
 0

	)

106 #i‚de‡
MEMP_MEM_MALLOC


107 
	#MEMP_MEM_MALLOC
 0

	)

115 #i‚de‡
MEM_ALIGNMENT


116 
	#MEM_ALIGNMENT
 1

	)

123 #i‚de‡
MEM_SIZE


124 
	#MEM_SIZE
 1600

	)

136 #i‚de‡
MEMP_OVERFLOW_CHECK


137 
	#MEMP_OVERFLOW_CHECK
 0

	)

144 #i‚de‡
MEMP_SANITY_CHECK


145 
	#MEMP_SANITY_CHECK
 0

	)

154 #i‚de‡
MEM_USE_POOLS


155 
	#MEM_USE_POOLS
 0

	)

162 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


163 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

172 #i‚de‡
MEMP_USE_CUSTOM_POOLS


173 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

194 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


195 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

208 #i‚de‡
MEMP_NUM_PBUF


209 
	#MEMP_NUM_PBUF
 16

	)

216 #i‚de‡
MEMP_NUM_RAW_PCB


217 
	#MEMP_NUM_RAW_PCB
 4

	)

225 #i‚de‡
MEMP_NUM_UDP_PCB


226 
	#MEMP_NUM_UDP_PCB
 4

	)

233 #i‚de‡
MEMP_NUM_TCP_PCB


234 
	#MEMP_NUM_TCP_PCB
 5

	)

241 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


242 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

249 #i‚de‡
MEMP_NUM_TCP_SEG


250 
	#MEMP_NUM_TCP_SEG
 16

	)

257 #i‚de‡
MEMP_NUM_REASSDATA


258 
	#MEMP_NUM_REASSDATA
 5

	)

267 #i‚de‡
MEMP_NUM_ARP_QUEUE


268 
	#MEMP_NUM_ARP_QUEUE
 30

	)

277 #i‚de‡
MEMP_NUM_IGMP_GROUP


278 
	#MEMP_NUM_IGMP_GROUP
 8

	)

285 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


286 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

293 #i‚de‡
MEMP_NUM_NETBUF


294 
	#MEMP_NUM_NETBUF
 2

	)

301 #i‚de‡
MEMP_NUM_NETCONN


302 
	#MEMP_NUM_NETCONN
 4

	)

310 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


311 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

319 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


320 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

326 #i‚de‡
PBUF_POOL_SIZE


327 
	#PBUF_POOL_SIZE
 16

	)

338 #i‚de‡
LWIP_ARP


339 
	#LWIP_ARP
 1

	)

345 #i‚de‡
ARP_TABLE_SIZE


346 
	#ARP_TABLE_SIZE
 10

	)

353 #i‚de‡
ARP_QUEUEING


354 
	#ARP_QUEUEING
 1

	)

365 #i‚de‡
ETHARP_TRUST_IP_MAC


366 
	#ETHARP_TRUST_IP_MAC
 1

	)

379 #i‚de‡
IP_FORWARD


380 
	#IP_FORWARD
 0

	)

388 #i‚de‡
IP_OPTIONS_ALLOWED


389 
	#IP_OPTIONS_ALLOWED
 1

	)

397 #i‚de‡
IP_REASSEMBLY


398 
	#IP_REASSEMBLY
 1

	)

406 #i‚de‡
IP_FRAG


407 
	#IP_FRAG
 1

	)

415 #i‚de‡
IP_REASS_MAXAGE


416 
	#IP_REASS_MAXAGE
 3

	)

425 #i‚de‡
IP_REASS_MAX_PBUFS


426 
	#IP_REASS_MAX_PBUFS
 10

	)

434 #i‚de‡
IP_FRAG_USES_STATIC_BUF


435 
	#IP_FRAG_USES_STATIC_BUF
 1

	)

442 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

443 
	#IP_FRAG_MAX_MTU
 1500

	)

449 #i‚de‡
IP_DEFAULT_TTL


450 
	#IP_DEFAULT_TTL
 255

	)

458 #i‚de‡
IP_SOF_BROADCAST


459 
	#IP_SOF_BROADCAST
 0

	)

466 #i‚de‡
IP_SOF_BROADCAST_RECV


467 
	#IP_SOF_BROADCAST_RECV
 0

	)

479 #i‚de‡
LWIP_ICMP


480 
	#LWIP_ICMP
 1

	)

486 #i‚de‡
ICMP_TTL


487 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

493 #i‚de‡
LWIP_BROADCAST_PING


494 
	#LWIP_BROADCAST_PING
 0

	)

500 #i‚de‡
LWIP_MULTICAST_PING


501 
	#LWIP_MULTICAST_PING
 0

	)

512 #i‚de‡
LWIP_RAW


513 
	#LWIP_RAW
 1

	)

519 #i‚de‡
RAW_TTL


520 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

531 #i‚de‡
LWIP_DHCP


532 
	#LWIP_DHCP
 0

	)

538 #i‚de‡
DHCP_DOES_ARP_CHECK


539 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

550 #i‚de‡
LWIP_AUTOIP


551 
	#LWIP_AUTOIP
 0

	)

558 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


559 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

569 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


570 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

582 #i‚de‡
LWIP_SNMP


583 
	#LWIP_SNMP
 0

	)

590 #i‚de‡
SNMP_CONCURRENT_REQUESTS


591 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

598 #i‚de‡
SNMP_TRAP_DESTINATIONS


599 
	#SNMP_TRAP_DESTINATIONS
 1

	)

605 #i‚de‡
SNMP_PRIVATE_MIB


606 
	#SNMP_PRIVATE_MIB
 0

	)

614 #i‚de‡
SNMP_SAFE_REQUESTS


615 
	#SNMP_SAFE_REQUESTS
 1

	)

626 #i‚de‡
LWIP_IGMP


627 
	#LWIP_IGMP
 0

	)

639 #i‚de‡
LWIP_DNS


640 
	#LWIP_DNS
 0

	)

644 #i‚de‡
DNS_TABLE_SIZE


645 
	#DNS_TABLE_SIZE
 4

	)

649 #i‚de‡
DNS_MAX_NAME_LENGTH


650 
	#DNS_MAX_NAME_LENGTH
 256

	)

654 #i‚de‡
DNS_MAX_SERVERS


655 
	#DNS_MAX_SERVERS
 2

	)

659 #i‚de‡
DNS_DOES_NAME_CHECK


660 
	#DNS_DOES_NAME_CHECK
 1

	)

666 #i‚de‡
DNS_USES_STATIC_BUF


667 
	#DNS_USES_STATIC_BUF
 1

	)

671 #i‚de‡
DNS_MSG_SIZE


672 
	#DNS_MSG_SIZE
 512

	)

685 #i‚de‡
DNS_LOCAL_HOSTLIST


686 
	#DNS_LOCAL_HOSTLIST
 0

	)

691 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


692 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

703 #i‚de‡
LWIP_UDP


704 
	#LWIP_UDP
 1

	)

710 #i‚de‡
LWIP_UDPLITE


711 
	#LWIP_UDPLITE
 0

	)

717 #i‚de‡
UDP_TTL


718 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

729 #i‚de‡
LWIP_TCP


730 
	#LWIP_TCP
 1

	)

736 #i‚de‡
TCP_TTL


737 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

744 #i‚de‡
TCP_WND


745 
	#TCP_WND
 2048

	)

751 #i‚de‡
TCP_MAXRTX


752 
	#TCP_MAXRTX
 12

	)

758 #i‚de‡
TCP_SYNMAXRTX


759 
	#TCP_SYNMAXRTX
 6

	)

766 #i‚de‡
TCP_QUEUE_OOSEQ


767 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

777 #i‚de‡
TCP_MSS


778 
	#TCP_MSS
 128

	)

789 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


790 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

797 #i‚de‡
TCP_SND_BUF


798 
	#TCP_SND_BUF
 256

	)

805 #i‚de‡
TCP_SND_QUEUELEN


806 
	#TCP_SND_QUEUELEN
 (4 * (
TCP_SND_BUF
/
TCP_MSS
))

	)

814 #i‚de‡
TCP_SNDLOWAT


815 
	#TCP_SNDLOWAT
 (
TCP_SND_BUF
/2)

	)

821 #i‚de‡
TCP_LISTEN_BACKLOG


822 
	#TCP_LISTEN_BACKLOG
 0

	)

830 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


831 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

837 #i‚de‡
LWIP_TCP_TIMESTAMPS


838 
	#LWIP_TCP_TIMESTAMPS
 0

	)

845 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


846 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

856 #i‚de‡
LWIP_EVENT_API


857 
	#LWIP_EVENT_API
 0

	)

858 
	#LWIP_CALLBACK_API
 1

	)

860 
	#LWIP_EVENT_API
 1

	)

861 
	#LWIP_CALLBACK_API
 0

	)

875 #i‚de‡
PBUF_LINK_HLEN


876 
	#PBUF_LINK_HLEN
 14

	)

884 #i‚de‡
PBUF_POOL_BUFSIZE


885 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

897 #i‚de‡
LWIP_NETIF_HOSTNAME


898 
	#LWIP_NETIF_HOSTNAME
 0

	)

904 #i‚de‡
LWIP_NETIF_API


905 
	#LWIP_NETIF_API
 0

	)

912 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


913 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

920 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


921 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

931 #i‚de‡
LWIP_NETIF_HWADDRHINT


932 
	#LWIP_NETIF_HWADDRHINT
 0

	)

939 #i‚de‡
LWIP_NETIF_LOOPBACK


940 
	#LWIP_NETIF_LOOPBACK
 0

	)

947 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


948 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

964 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


965 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

977 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


978 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

989 #i‚de‡
LWIP_HAVE_LOOPIF


990 
	#LWIP_HAVE_LOOPIF
 0

	)

1001 #i‚de‡
LWIP_HAVE_SLIPIF


1002 
	#LWIP_HAVE_SLIPIF
 0

	)

1013 #i‚de‡
TCPIP_THREAD_NAME


1014 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1022 #i‚de‡
TCPIP_THREAD_STACKSIZE


1023 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1031 #i‚de‡
TCPIP_THREAD_PRIO


1032 
	#TCPIP_THREAD_PRIO
 1

	)

1040 #i‚de‡
TCPIP_MBOX_SIZE


1041 
	#TCPIP_MBOX_SIZE
 0

	)

1047 #i‚de‡
SLIPIF_THREAD_NAME


1048 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1056 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1057 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1065 #i‚de‡
SLIPIF_THREAD_PRIO


1066 
	#SLIPIF_THREAD_PRIO
 1

	)

1072 #i‚de‡
PPP_THREAD_NAME


1073 
	#PPP_THREAD_NAME
 "µpMaö"

	)

1081 #i‚de‡
PPP_THREAD_STACKSIZE


1082 
	#PPP_THREAD_STACKSIZE
 0

	)

1090 #i‚de‡
PPP_THREAD_PRIO


1091 
	#PPP_THREAD_PRIO
 1

	)

1097 #i‚de‡
DEFAULT_THREAD_NAME


1098 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1106 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1107 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1115 #i‚de‡
DEFAULT_THREAD_PRIO


1116 
	#DEFAULT_THREAD_PRIO
 1

	)

1124 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1125 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1133 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1134 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1142 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1143 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1151 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1152 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1164 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1165 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1171 #i‚de‡
LWIP_NETCONN


1172 
	#LWIP_NETCONN
 1

	)

1183 #i‚de‡
LWIP_SOCKET


1184 
	#LWIP_SOCKET
 1

	)

1191 #i‚de‡
LWIP_COMPAT_SOCKETS


1192 
	#LWIP_COMPAT_SOCKETS
 1

	)

1200 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1201 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1209 #i‚de‡
LWIP_TCP_KEEPALIVE


1210 
	#LWIP_TCP_KEEPALIVE
 0

	)

1216 #i‚de‡
LWIP_SO_RCVTIMEO


1217 
	#LWIP_SO_RCVTIMEO
 0

	)

1223 #i‚de‡
LWIP_SO_RCVBUF


1224 
	#LWIP_SO_RCVBUF
 0

	)

1230 #i‚de‡
RECV_BUFSIZE_DEFAULT


1231 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1237 #i‚de‡
SO_REUSE


1238 
	#SO_REUSE
 0

	)

1249 #i‚de‡
LWIP_STATS


1250 
	#LWIP_STATS
 1

	)

1253 #i‡
LWIP_STATS


1258 #i‚de‡
LWIP_STATS_DISPLAY


1259 
	#LWIP_STATS_DISPLAY
 0

	)

1265 #i‚de‡
LINK_STATS


1266 
	#LINK_STATS
 1

	)

1272 #i‚de‡
ETHARP_STATS


1273 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1279 #i‚de‡
IP_STATS


1280 
	#IP_STATS
 1

	)

1287 #i‚de‡
IPFRAG_STATS


1288 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1294 #i‚de‡
ICMP_STATS


1295 
	#ICMP_STATS
 1

	)

1301 #i‚de‡
IGMP_STATS


1302 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1309 #i‚de‡
UDP_STATS


1310 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1317 #i‚de‡
TCP_STATS


1318 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1324 #i‚de‡
MEM_STATS


1325 
	#MEM_STATS
 1

	)

1331 #i‚de‡
MEMP_STATS


1332 
	#MEMP_STATS
 1

	)

1338 #i‚de‡
SYS_STATS


1339 
	#SYS_STATS
 1

	)

1344 
	#LINK_STATS
 0

	)

1345 
	#IP_STATS
 0

	)

1346 
	#IPFRAG_STATS
 0

	)

1347 
	#ICMP_STATS
 0

	)

1348 
	#IGMP_STATS
 0

	)

1349 
	#UDP_STATS
 0

	)

1350 
	#TCP_STATS
 0

	)

1351 
	#MEM_STATS
 0

	)

1352 
	#MEMP_STATS
 0

	)

1353 
	#SYS_STATS
 0

	)

1354 
	#LWIP_STATS_DISPLAY
 0

	)

1366 #i‚de‡
PPP_SUPPORT


1367 
	#PPP_SUPPORT
 0

	)

1373 #i‚de‡
PPPOE_SUPPORT


1374 
	#PPPOE_SUPPORT
 0

	)

1380 #i‚de‡
PPPOS_SUPPORT


1381 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1384 #i‡
PPP_SUPPORT


1389 #i‚de‡
NUM_PPP


1390 
	#NUM_PPP
 1

	)

1396 #i‚de‡
PAP_SUPPORT


1397 
	#PAP_SUPPORT
 0

	)

1403 #i‚de‡
CHAP_SUPPORT


1404 
	#CHAP_SUPPORT
 0

	)

1410 #i‚de‡
MSCHAP_SUPPORT


1411 
	#MSCHAP_SUPPORT
 0

	)

1417 #i‚de‡
CBCP_SUPPORT


1418 
	#CBCP_SUPPORT
 0

	)

1424 #i‚de‡
CCP_SUPPORT


1425 
	#CCP_SUPPORT
 0

	)

1431 #i‚de‡
VJ_SUPPORT


1432 
	#VJ_SUPPORT
 0

	)

1438 #i‚de‡
MD5_SUPPORT


1439 
	#MD5_SUPPORT
 0

	)

1445 #i‚de‡
FSM_DEFTIMEOUT


1446 
	#FSM_DEFTIMEOUT
 6

	)

1449 #i‚de‡
FSM_DEFMAXTERMREQS


1450 
	#FSM_DEFMAXTERMREQS
 2

	)

1453 #i‚de‡
FSM_DEFMAXCONFREQS


1454 
	#FSM_DEFMAXCONFREQS
 10

	)

1457 #i‚de‡
FSM_DEFMAXNAKLOOPS


1458 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1461 #i‚de‡
UPAP_DEFTIMEOUT


1462 
	#UPAP_DEFTIMEOUT
 6

	)

1465 #i‚de‡
UPAP_DEFREQTIME


1466 
	#UPAP_DEFREQTIME
 30

	)

1469 #i‚de‡
CHAP_DEFTIMEOUT


1470 
	#CHAP_DEFTIMEOUT
 6

	)

1473 #i‚de‡
CHAP_DEFTRANSMITS


1474 
	#CHAP_DEFTRANSMITS
 10

	)

1478 #i‚de‡
LCP_ECHOINTERVAL


1479 
	#LCP_ECHOINTERVAL
 0

	)

1483 #i‚de‡
LCP_MAXECHOFAILS


1484 
	#LCP_MAXECHOFAILS
 3

	)

1488 #i‚de‡
PPP_MAXIDLEFLAG


1489 
	#PPP_MAXIDLEFLAG
 100

	)

1500 
	#PPP_MTU
 1500

	)

1501 #i‚de‡
PPP_MAXMTU


1503 
	#PPP_MAXMTU
 1500

	)

1505 
	#PPP_MINMTU
 64

	)

1506 
	#PPP_MRU
 1500

	)

1507 
	#PPP_MAXMRU
 1500

	)

1508 #i‚de‡
PPP_DEFMRU


1509 
	#PPP_DEFMRU
 296

	)

1511 
	#PPP_MINMRU
 128

	)

1514 
	#MAXNAMELEN
 256

	)

1515 
	#MAXSECRETLEN
 256

	)

1527 #i‚de‡
CHECKSUM_GEN_IP


1528 
	#CHECKSUM_GEN_IP
 1

	)

1534 #i‚de‡
CHECKSUM_GEN_UDP


1535 
	#CHECKSUM_GEN_UDP
 1

	)

1541 #i‚de‡
CHECKSUM_GEN_TCP


1542 
	#CHECKSUM_GEN_TCP
 1

	)

1548 #i‚de‡
CHECKSUM_CHECK_IP


1549 
	#CHECKSUM_CHECK_IP
 1

	)

1555 #i‚de‡
CHECKSUM_CHECK_UDP


1556 
	#CHECKSUM_CHECK_UDP
 1

	)

1562 #i‚de‡
CHECKSUM_CHECK_TCP


1563 
	#CHECKSUM_CHECK_TCP
 1

	)

1576 #i‚de‡
LWIP_DBG_MIN_LEVEL


1577 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_OFF


	)

1584 #i‚de‡
LWIP_DBG_TYPES_ON


1585 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1591 #i‚de‡
ETHARP_DEBUG


1592 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1598 #i‚de‡
NETIF_DEBUG


1599 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1605 #i‚de‡
PBUF_DEBUG


1606 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1612 #i‚de‡
API_LIB_DEBUG


1613 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1619 #i‚de‡
API_MSG_DEBUG


1620 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1626 #i‚de‡
SOCKETS_DEBUG


1627 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1633 #i‚de‡
ICMP_DEBUG


1634 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1640 #i‚de‡
IGMP_DEBUG


1641 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1647 #i‚de‡
INET_DEBUG


1648 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1654 #i‚de‡
IP_DEBUG


1655 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1661 #i‚de‡
IP_REASS_DEBUG


1662 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1668 #i‚de‡
RAW_DEBUG


1669 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1675 #i‚de‡
MEM_DEBUG


1676 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1682 #i‚de‡
MEMP_DEBUG


1683 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1689 #i‚de‡
SYS_DEBUG


1690 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1696 #i‚de‡
TCP_DEBUG


1697 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1703 #i‚de‡
TCP_INPUT_DEBUG


1704 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1710 #i‚de‡
TCP_FR_DEBUG


1711 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1718 #i‚de‡
TCP_RTO_DEBUG


1719 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1725 #i‚de‡
TCP_CWND_DEBUG


1726 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1732 #i‚de‡
TCP_WND_DEBUG


1733 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1739 #i‚de‡
TCP_OUTPUT_DEBUG


1740 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1746 #i‚de‡
TCP_RST_DEBUG


1747 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1753 #i‚de‡
TCP_QLEN_DEBUG


1754 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1760 #i‚de‡
UDP_DEBUG


1761 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1767 #i‚de‡
TCPIP_DEBUG


1768 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1774 #i‚de‡
PPP_DEBUG


1775 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

1781 #i‚de‡
SLIP_DEBUG


1782 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

1788 #i‚de‡
DHCP_DEBUG


1789 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

1795 #i‚de‡
AUTOIP_DEBUG


1796 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

1802 #i‚de‡
SNMP_MSG_DEBUG


1803 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1809 #i‚de‡
SNMP_MIB_DEBUG


1810 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

1816 #i‚de‡
DNS_DEBUG


1817 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 
	#PBUF_TRANSPORT_HLEN
 20

	)

44 
	#PBUF_IP_HLEN
 20

	)

47 
PBUF_TRANSPORT
,

48 
PBUF_IP
,

49 
PBUF_LINK
,

50 
PBUF_RAW


51 } 
	tpbuf_œyî
;

54 
PBUF_RAM
,

55 
PBUF_ROM
,

56 
PBUF_REF
,

57 
PBUF_POOL


58 } 
	tpbuf_ty≥
;

62 
	#PBUF_FLAG_PUSH
 0x01U

	)

64 
	spbuf
 {

66 
pbuf
 *
√xt
;

69 *
∑ylﬂd
;

78 
u16_t
 
tŸ_Àn
;

81 
u16_t
 
Àn
;

84 
u8_t
 
ty≥
;

87 
u8_t
 
Êags
;

94 
u16_t
 
ªf
;

99 
	#pbuf_öô
()

	)

101 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
size
, 
pbuf_ty≥
 
ty≥
);

102 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

103 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

104 
pbuf_ªf
(
pbuf
 *
p
);

105 
pbuf_ªf_chaö
(
pbuf
 *
p
);

106 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

107 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

108 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

109 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

110 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

111 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

112 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

113 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

114 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

116 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/öë.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
	søw_pcb
 {

50 
IP_PCB
;

52 
øw_pcb
 *
√xt
;

54 
u8_t
 
¥Ÿocﬁ
;

66 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

67 
ù_addr
 *
addr
);

69 *
ªcv_¨g
;

74 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

75 
øw_ªmove
 (
øw_pcb
 *
pcb
);

76 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

77 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

79 
øw_ªcv
 (
øw_pcb
 *
pcb
,

80 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
,

81 
pbuf
 *
p
,

82 
ù_addr
 *
addr
),

83 *
ªcv_¨g
);

84 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
);

85 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

88 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

89 
	#øw_öô
(Ë

	)

91 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


54 
sio_fd_t
 
sio_›í
(
u8_t
);

57 #i‚de‡
sio_£nd


58 
sio_£nd
(
u8_t
, 
sio_fd_t
);

61 #i‚de‡
sio_ªcv


62 
u8_t
 
sio_ªcv
(
sio_fd_t
);

65 #i‚de‡
sio_ªad


66 
u32_t
 
sio_ªad
(
sio_fd_t
, 
u8_t
 *, u32_t);

69 #i‚de‡
sio_wrôe


70 
u32_t
 
sio_wrôe
(
sio_fd_t
, 
u8_t
 *, u32_t);

73 #i‚de‡
sio_ªad_ab‹t


74 
sio_ªad_ab‹t
(
sio_fd_t
);

77 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/udp.h
"

40 #ifde‡
__˝lu•lus


47 
	e¢mp_ifTy≥
 {

48 
¢mp_ifTy≥_Ÿhî
=1,

49 
¢mp_ifTy≥_ªguœr1822
,

50 
¢mp_ifTy≥_hdh1822
,

51 
¢mp_ifTy≥_ddn_x25
,

52 
¢mp_ifTy≥_rfc877_x25
,

53 
¢mp_ifTy≥_ëhî√t_csmacd
,

54 
¢mp_ifTy≥_iso88023_csmacd
,

55 
¢mp_ifTy≥_iso88024_tokíBus
,

56 
¢mp_ifTy≥_iso88025_tokíRög
,

57 
¢mp_ifTy≥_iso88026_m™
,

58 
¢mp_ifTy≥_°¨L™
,

59 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

60 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

61 
¢mp_ifTy≥_hy≥rch™√l
,

62 
¢mp_ifTy≥_fddi
,

63 
¢mp_ifTy≥_œpb
,

64 
¢mp_ifTy≥_sdlc
,

65 
¢mp_ifTy≥_ds1
,

66 
¢mp_ifTy≥_e1
,

67 
¢mp_ifTy≥_basicISDN
,

68 
¢mp_ifTy≥_¥im¨yISDN
,

69 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

70 
¢mp_ifTy≥_µp
,

71 
¢mp_ifTy≥_so·w¨eLo›back
,

72 
¢mp_ifTy≥_e⁄
,

73 
¢mp_ifTy≥_ëhî√t_3Mbô
,

74 
¢mp_ifTy≥_nsù
,

75 
¢mp_ifTy≥_¶ù
,

76 
¢mp_ifTy≥_u…ø
,

77 
¢mp_ifTy≥_ds3
,

78 
¢mp_ifTy≥_sù
,

79 
¢mp_ifTy≥_‰ame_ªœy


82 #i‡
LWIP_SNMP


85 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

88 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

91 
	s¢mp_obj_id


93 
u8_t
 
Àn
;

94 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

98 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

99 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

100 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

101 
¢mp_öc_sysu±ime
();

102 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

103 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

104 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

105 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

106 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

110 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

111 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

112 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

113 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

114 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

116 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

117 
¢mp_öc_iÊi°
();

118 
¢mp_dec_iÊi°
();

121 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

122 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

125 
¢mp_öc_ùöª˚ives
();

126 
¢mp_öc_ùöhdªº‹s
();

127 
¢mp_öc_ùöaddªº‹s
();

128 
¢mp_öc_ùf‹wd©agøms
();

129 
¢mp_öc_ùöunknow≈rŸos
();

130 
¢mp_öc_ùödisˇrds
();

131 
¢mp_öc_ùödñivîs
();

132 
¢mp_öc_ùouåeque°s
();

133 
¢mp_öc_ùoutdisˇrds
();

134 
¢mp_öc_ùouä‹ouãs
();

135 
¢mp_öc_ùªasmªqds
();

136 
¢mp_öc_ùªasmoks
();

137 
¢mp_öc_ùªasmÁûs
();

138 
¢mp_öc_ù‰agoks
();

139 
¢mp_öc_ù‰agÁûs
();

140 
¢mp_öc_ù‰ag¸óãs
();

141 
¢mp_öc_ùroutögdisˇrds
();

142 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

143 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

144 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

145 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_öc_icmpömsgs
();

149 
¢mp_öc_icmpöîr‹s
();

150 
¢mp_öc_icmpöde°uƒóchs
();

151 
¢mp_öc_icmpötimìxcds
();

152 
¢mp_öc_icmpö∑rm¥obs
();

153 
¢mp_öc_icmpö§cquíchs
();

154 
¢mp_öc_icmpöªdúe˘s
();

155 
¢mp_öc_icmpöechos
();

156 
¢mp_öc_icmpöech‹ïs
();

157 
¢mp_öc_icmpötime°amps
();

158 
¢mp_öc_icmpötime°am¥ïs
();

159 
¢mp_öc_icmpöaddrmasks
();

160 
¢mp_öc_icmpöaddrmaskªps
();

161 
¢mp_öc_icmpoutmsgs
();

162 
¢mp_öc_icmpouãº‹s
();

163 
¢mp_öc_icmpoutde°uƒóchs
();

164 
¢mp_öc_icmpouâimìxcds
();

165 
¢mp_öc_icmpouç¨m¥obs
();

166 
¢mp_öc_icmpout§cquíchs
();

167 
¢mp_öc_icmpouåedúe˘s
();

168 
¢mp_öc_icmpouãchos
();

169 
¢mp_öc_icmpouãch‹ïs
();

170 
¢mp_öc_icmpouâime°amps
();

171 
¢mp_öc_icmpouâime°am¥ïs
();

172 
¢mp_öc_icmpouèddrmasks
();

173 
¢mp_öc_icmpouèddrmaskªps
();

176 
¢mp_öc_t˝a˘ive›ís
();

177 
¢mp_öc_t˝∑ssive›ís
();

178 
¢mp_öc_t˝©ãm±Áûs
();

179 
¢mp_öc_t˝e°abª£ts
();

180 
¢mp_öc_t˝ö£gs
();

181 
¢mp_öc_t˝out£gs
();

182 
¢mp_öc_t˝ªå™s£gs
();

183 
¢mp_öc_t˝öîrs
();

184 
¢mp_öc_t˝ouå°s
();

187 
¢mp_öc_udpöd©agøms
();

188 
¢mp_öc_ud≤›‹ts
();

189 
¢mp_öc_udpöîr‹s
();

190 
¢mp_öc_udpoutd©agøms
();

191 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

192 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_öc_¢mpöpkts
();

196 
¢mp_öc_¢mpouçkts
();

197 
¢mp_öc_¢mpöbadvîsi⁄s
();

198 
¢mp_öc_¢mpöbadcommunôy«mes
();

199 
¢mp_öc_¢mpöbadcommunôyu£s
();

200 
¢mp_öc_¢mpöa¢∑r£îrs
();

201 
¢mp_öc_¢mpötoobigs
();

202 
¢mp_öc_¢mpönosuch«mes
();

203 
¢mp_öc_¢mpöbadvÆues
();

204 
¢mp_öc_¢mpöªad⁄lys
();

205 
¢mp_öc_¢mpögíîrs
();

206 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

207 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

208 
¢mp_öc_¢mpögëªque°s
();

209 
¢mp_öc_¢mpögë√xts
();

210 
¢mp_öc_¢mpö£åeque°s
();

211 
¢mp_öc_¢mpögëª•⁄£s
();

212 
¢mp_öc_¢mpöå≠s
();

213 
¢mp_öc_¢mpouâoobigs
();

214 
¢mp_öc_¢mpouäosuch«mes
();

215 
¢mp_öc_¢mpoutbadvÆues
();

216 
¢mp_öc_¢mpoutgíîrs
();

217 
¢mp_öc_¢mpoutgëªque°s
();

218 
¢mp_öc_¢mpoutgë√xts
();

219 
¢mp_öc_¢mpout£åeque°s
();

220 
¢mp_öc_¢mpoutgëª•⁄£s
();

221 
¢mp_öc_¢mpouâøps
();

222 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

223 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

224 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

231 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

232 
	#¢mp_£t_sysobjid
(
oid
);

	)

233 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

234 
	#¢mp_öc_sysu±ime
()

	)

235 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

236 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

237 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

238 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

239 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

243 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

244 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

245 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

246 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

247 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

249 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

250 
	#¢mp_öc_iÊi°
()

	)

251 
	#¢mp_dec_iÊi°
()

	)

254 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

255 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_öc_ùöª˚ives
()

	)

259 
	#¢mp_öc_ùöhdªº‹s
()

	)

260 
	#¢mp_öc_ùöaddªº‹s
()

	)

261 
	#¢mp_öc_ùf‹wd©agøms
()

	)

262 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

263 
	#¢mp_öc_ùödisˇrds
()

	)

264 
	#¢mp_öc_ùödñivîs
()

	)

265 
	#¢mp_öc_ùouåeque°s
()

	)

266 
	#¢mp_öc_ùoutdisˇrds
()

	)

267 
	#¢mp_öc_ùouä‹ouãs
()

	)

268 
	#¢mp_öc_ùªasmªqds
()

	)

269 
	#¢mp_öc_ùªasmoks
()

	)

270 
	#¢mp_öc_ùªasmÁûs
()

	)

271 
	#¢mp_öc_ù‰agoks
()

	)

272 
	#¢mp_öc_ù‰agÁûs
()

	)

273 
	#¢mp_öc_ù‰ag¸óãs
()

	)

274 
	#¢mp_öc_ùroutögdisˇrds
()

	)

275 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

276 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

277 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

278 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_öc_icmpömsgs
()

	)

282 
	#¢mp_öc_icmpöîr‹s
()

	)

283 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

284 
	#¢mp_öc_icmpötimìxcds
()

	)

285 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

286 
	#¢mp_öc_icmpö§cquíchs
()

	)

287 
	#¢mp_öc_icmpöªdúe˘s
()

	)

288 
	#¢mp_öc_icmpöechos
()

	)

289 
	#¢mp_öc_icmpöech‹ïs
()

	)

290 
	#¢mp_öc_icmpötime°amps
()

	)

291 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

292 
	#¢mp_öc_icmpöaddrmasks
()

	)

293 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

294 
	#¢mp_öc_icmpoutmsgs
()

	)

295 
	#¢mp_öc_icmpouãº‹s
()

	)

296 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

297 
	#¢mp_öc_icmpouâimìxcds
()

	)

298 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

299 
	#¢mp_öc_icmpout§cquíchs
()

	)

300 
	#¢mp_öc_icmpouåedúe˘s
()

	)

301 
	#¢mp_öc_icmpouãchos
()

	)

302 
	#¢mp_öc_icmpouãch‹ïs
()

	)

303 
	#¢mp_öc_icmpouâime°amps
()

	)

304 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

305 
	#¢mp_öc_icmpouèddrmasks
()

	)

306 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

308 
	#¢mp_öc_t˝a˘ive›ís
()

	)

309 
	#¢mp_öc_t˝∑ssive›ís
()

	)

310 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

311 
	#¢mp_öc_t˝e°abª£ts
()

	)

312 
	#¢mp_öc_t˝ö£gs
()

	)

313 
	#¢mp_öc_t˝out£gs
()

	)

314 
	#¢mp_öc_t˝ªå™s£gs
()

	)

315 
	#¢mp_öc_t˝öîrs
()

	)

316 
	#¢mp_öc_t˝ouå°s
()

	)

319 
	#¢mp_öc_udpöd©agøms
()

	)

320 
	#¢mp_öc_ud≤›‹ts
()

	)

321 
	#¢mp_öc_udpöîr‹s
()

	)

322 
	#¢mp_öc_udpoutd©agøms
()

	)

323 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

324 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_öc_¢mpöpkts
()

	)

328 
	#¢mp_öc_¢mpouçkts
()

	)

329 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

330 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

331 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

332 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

333 
	#¢mp_öc_¢mpötoobigs
()

	)

334 
	#¢mp_öc_¢mpönosuch«mes
()

	)

335 
	#¢mp_öc_¢mpöbadvÆues
()

	)

336 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

337 
	#¢mp_öc_¢mpögíîrs
()

	)

338 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

339 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

340 
	#¢mp_öc_¢mpögëªque°s
()

	)

341 
	#¢mp_öc_¢mpögë√xts
()

	)

342 
	#¢mp_öc_¢mpö£åeque°s
()

	)

343 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

344 
	#¢mp_öc_¢mpöå≠s
()

	)

345 
	#¢mp_öc_¢mpouâoobigs
()

	)

346 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

347 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

348 
	#¢mp_öc_¢mpoutgíîrs
()

	)

349 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

350 
	#¢mp_öc_¢mpoutgë√xts
()

	)

351 
	#¢mp_öc_¢mpout£åeque°s
()

	)

352 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

353 
	#¢mp_öc_¢mpouâøps
()

	)

354 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

355 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

356 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

360 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (!0x80 | !0x40)

	)

50 
	#SNMP_ASN1_APPLIC
 (!0x80 | 0x40)

	)

51 
	#SNMP_ASN1_CONTXT
 ( 0x80 | !0x40)

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20)

	)

54 
	#SNMP_ASN1_PRIMIT
 (!0x20)

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
);

95 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

42 #i‡
LWIP_SNMP


44 #i‡
SNMP_PRIVATE_MIB


45 
	~"¥iv©e_mib.h
"

48 #ifde‡
__˝lu•lus


54 #i‚de‡
SNMP_IN_PORT


55 
	#SNMP_IN_PORT
 161

	)

59 #i‚de‡
SNMP_TRAP_PORT


60 
	#SNMP_TRAP_PORT
 162

	)

63 
	#SNMP_ES_NOERROR
 0

	)

64 
	#SNMP_ES_TOOBIG
 1

	)

65 
	#SNMP_ES_NOSUCHNAME
 2

	)

66 
	#SNMP_ES_BADVALUE
 3

	)

67 
	#SNMP_ES_READONLY
 4

	)

68 
	#SNMP_ES_GENERROR
 5

	)

70 
	#SNMP_GENTRAP_COLDSTART
 0

	)

71 
	#SNMP_GENTRAP_WARMSTART
 1

	)

72 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

73 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

75 
	s¢mp_v¨böd


78 
¢mp_v¨böd
 *
√xt
;

80 
¢mp_v¨böd
 *
¥ev
;

83 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

88 
u8_t
 
vÆue_ty≥
;

90 
u8_t
 
vÆue_Àn
;

92 *
vÆue
;

95 
u8_t
 
£qÀ∆í
;

97 
u8_t
 
ﬁíÀn
;

99 
u8_t
 
vÀ∆í
;

101 
u16_t
 
£qÀn
;

103 
u16_t
 
ﬁí
;

105 
u16_t
 
vÀn
;

108 
	s¢mp_v¨böd_roŸ


110 
¢mp_v¨böd
 *
hód
;

111 
¢mp_v¨böd
 *
èû
;

113 
u8_t
 
cou¡
;

115 
u8_t
 
£qÀ∆í
;

117 
u16_t
 
£qÀn
;

121 
	s¢mp_ª•_hódî_Àngths


124 
u8_t
 
îridxÀ∆í
;

126 
u8_t
 
îr°©À∆í
;

128 
u8_t
 
ridÀ∆í
;

130 
u8_t
 
pduÀ∆í
;

132 
u8_t
 
comÀ∆í
;

134 
u8_t
 
vîÀ∆í
;

136 
u8_t
 
£qÀ∆í
;

139 
u16_t
 
îridxÀn
;

141 
u16_t
 
îr°©Àn
;

143 
u16_t
 
ridÀn
;

145 
u16_t
 
pduÀn
;

147 
u16_t
 
comÀn
;

149 
u16_t
 
vîÀn
;

151 
u16_t
 
£qÀn
;

155 
	s¢mp_å≠_hódî_Àngths


158 
u8_t
 
t¶íÀn
;

160 
u8_t
 
°ΩÀ∆í
;

162 
u8_t
 
gå∂íÀn
;

164 
u8_t
 
ØddæíÀn
;

166 
u8_t
 
eidÀ∆í
;

168 
u8_t
 
pduÀ∆í
;

170 
u8_t
 
comÀ∆í
;

172 
u8_t
 
vîÀ∆í
;

174 
u8_t
 
£qÀ∆í
;

177 
u16_t
 
t¶í
;

179 
u16_t
 
°ΩÀn
;

181 
u16_t
 
gå∂í
;

183 
u16_t
 
Øddæí
;

185 
u16_t
 
eidÀn
;

187 
u16_t
 
pduÀn
;

189 
u16_t
 
comÀn
;

191 
u16_t
 
vîÀn
;

193 
u16_t
 
£qÀn
;

197 
	#SNMP_MSG_EMPTY
 0

	)

199 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

202 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

203 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

204 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

205 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

206 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

210 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

211 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

212 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

213 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

214 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

216 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

217 
	s¢mp_msg_p°©


220 
udp_pcb
 *
pcb
;

222 
ù_addr
 
sù
;

224 
u16_t
 
•
;

226 
u8_t
 
π
;

228 
s32_t
 
rid
;

230 
s32_t
 
îr‹_°©us
;

232 
s32_t
 
îr‹_ödex
;

234 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

236 
u8_t
 
com_°æí
;

238 
u8_t
 
°©e
;

240 
mib_exã∫Æ_node
 *
ext_mib_node
;

241 
¢mp_«me_±r
 
ext_«me_±r
;

242 
obj_def
 
ext_obje˘_def
;

243 
¢mp_obj_id
 
ext_oid
;

245 
u8_t
 
vb_idx
;

247 
¢mp_v¨böd
 *
vb_±r
;

249 
¢mp_v¨böd_roŸ
 
övb
;

251 
¢mp_v¨böd_roŸ
 
outvb
;

253 
¢mp_ª•_hódî_Àngths
 
rhl
;

256 
	s¢mp_msg_å≠


259 
udp_pcb
 *
pcb
;

261 
ù_addr
 
dù
;

264 
¢mp_obj_id
 *
íãΩri£
;

266 
u8_t
 
sù_øw
[4];

268 
u32_t
 
gí_å≠
;

270 
u32_t
 
•c_å≠
;

272 
u32_t
 
ts
;

274 
¢mp_v¨böd_roŸ
 
outvb
;

276 
¢mp_å≠_hódî_Àngths
 
thl
;

280 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

282 c⁄° 
¢mp_publiccommunôy
[7];

284 
¢mp_msg_å≠
 
å≠_msg
;

287 
¢mp_öô
();

288 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

289 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
);

292 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

293 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

294 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

295 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

300 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

301 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

302 
¢mp_cﬁd°¨t_å≠
();

303 
¢mp_authÁû_å≠
();

305 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


47 
	~"¥iv©e_mib.h
"

50 #ifde‡
__˝lu•lus


55 
	#MIB_OBJECT_NONE
 0

	)

56 
	#MIB_OBJECT_SCALAR
 1

	)

57 
	#MIB_OBJECT_TAB
 2

	)

60 
	#MIB_OBJECT_READ_ONLY
 0

	)

61 
	#MIB_OBJECT_READ_WRITE
 1

	)

62 
	#MIB_OBJECT_WRITE_ONLY
 2

	)

63 
	#MIB_OBJECT_NOT_ACCESSIBLE
 3

	)

66 
	sobj_def


69 
u8_t
 
ö°™˚
;

71 
u8_t
 
ac˚ss
;

73 
u8_t
 
a¢_ty≥
;

75 
u16_t
 
v_Àn
;

77 
u8_t
 
id_ö°_Àn
;

79 
s32_t
 *
id_ö°_±r
;

82 
	s¢mp_«me_±r


84 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

89 
	#MIB_NODE_SC
 0x01

	)

91 
	#MIB_NODE_AR
 0x02

	)

93 
	#MIB_NODE_RA
 0x03

	)

95 
	#MIB_NODE_LR
 0x04

	)

97 
	#MIB_NODE_EX
 0x05

	)

100 
	smib_node


103 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

106 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

108 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 c⁄° 
u8_t
 
node_ty≥
;

114 c⁄° 
u16_t
 
maxÀngth
;

118 
mib_node
 
	tmib_sˇœr_node
;

122 
	smib_¨øy_node


125 (* c⁄° 
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

126 (* c⁄° 
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

127 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

128 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

130 c⁄° 
u8_t
 
node_ty≥
;

131 c⁄° 
u16_t
 
maxÀngth
;

134 c⁄° 
s32_t
 *
objid
;

135 
mib_node
* c⁄° *
≈å
;

140 
	smib_øm_¨øy_node


143 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

144 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

145 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

146 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

148 
u8_t
 
node_ty≥
;

149 
u16_t
 
maxÀngth
;

152 
s32_t
 *
objid
;

153 
mib_node
 **
≈å
;

156 
	smib_li°_node


158 
mib_li°_node
 *
¥ev
;

159 
mib_li°_node
 *
√xt
;

160 
s32_t
 
objid
;

161 
mib_node
 *
≈å
;

166 
	smib_li°_roŸnode


169 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

170 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

171 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

172 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

174 
u8_t
 
node_ty≥
;

175 
u16_t
 
maxÀngth
;

178 
mib_li°_node
 *
hód
;

179 
mib_li°_node
 *
èû
;

181 
u16_t
 
cou¡
;

186 
	smib_exã∫Æ_node


189 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

190 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

191 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

192 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

194 
u8_t
 
node_ty≥
;

195 
u16_t
 
maxÀngth
;

200 * 
addr_öf
;

202 
u8_t
 
åì_Àvñs
;

204 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

207 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

208 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

211 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

212 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

213 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

214 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

216 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

217 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

218 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

219 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

223 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

224 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

225 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

229 c⁄° 
mib_¨øy_node
 
öã∫ë
;

232 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

233 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

234 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

235 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

237 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
);

238 
¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
);

239 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

240 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

242 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

243 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

244 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

245 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

247 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

248 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

249 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

251 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

252 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

253 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

254 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

256 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

65 #i‚de‡
sockÀn_t


66 
	#sockÀn_t
 
u32_t


	)

70 
	#SOCK_STREAM
 1

	)

71 
	#SOCK_DGRAM
 2

	)

72 
	#SOCK_RAW
 3

	)

77 
	#SO_DEBUG
 0x0001

	)

78 
	#SO_ACCEPTCONN
 0x0002

	)

79 
	#SO_REUSEADDR
 0x0004

	)

80 
	#SO_KEEPALIVE
 0x0008

	)

81 
	#SO_DONTROUTE
 0x0010

	)

82 
	#SO_BROADCAST
 0x0020

	)

83 
	#SO_USELOOPBACK
 0x0040

	)

84 
	#SO_LINGER
 0x0080

	)

85 
	#SO_OOBINLINE
 0x0100

	)

86 
	#SO_REUSEPORT
 0x0200

	)

88 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

93 
	#SO_SNDBUF
 0x1001

	)

94 
	#SO_RCVBUF
 0x1002

	)

95 
	#SO_SNDLOWAT
 0x1003

	)

96 
	#SO_RCVLOWAT
 0x1004

	)

97 
	#SO_SNDTIMEO
 0x1005

	)

98 
	#SO_RCVTIMEO
 0x1006

	)

99 
	#SO_ERROR
 0x1007

	)

100 
	#SO_TYPE
 0x1008

	)

101 
	#SO_CONTIMEO
 0x1009

	)

102 
	#SO_NO_CHECK
 0x100®

	)

108 
	slögî
 {

109 
l_⁄off
;

110 
l_lögî
;

116 
	#SOL_SOCKET
 0xff‡

	)

119 
	#AF_UNSPEC
 0

	)

120 
	#AF_INET
 2

	)

121 
	#PF_INET
 
AF_INET


	)

122 
	#PF_UNSPEC
 
AF_UNSPEC


	)

124 
	#IPPROTO_IP
 0

	)

125 
	#IPPROTO_TCP
 6

	)

126 
	#IPPROTO_UDP
 17

	)

127 
	#IPPROTO_UDPLITE
 136

	)

130 
	#MSG_PEEK
 0x01

	)

131 
	#MSG_WAITALL
 0x02

	)

132 
	#MSG_OOB
 0x04

	)

133 
	#MSG_DONTWAIT
 0x08

	)

134 
	#MSG_MORE
 0x10

	)

140 
	#IP_TOS
 1

	)

141 
	#IP_TTL
 2

	)

143 #i‡
LWIP_TCP


147 
	#TCP_NODELAY
 0x01

	)

148 
	#TCP_KEEPALIVE
 0x02

	)

149 
	#TCP_KEEPIDLE
 0x03

	)

150 
	#TCP_KEEPINTVL
 0x04

	)

151 
	#TCP_KEEPCNT
 0x05

	)

154 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


158 
	#UDPLITE_SEND_CSCOV
 0x01

	)

159 
	#UDPLITE_RECV_CSCOV
 0x02

	)

163 #i‡
LWIP_IGMP


167 
	#IP_ADD_MEMBERSHIP
 3

	)

168 
	#IP_DROP_MEMBERSHIP
 4

	)

169 
	#IP_MULTICAST_TTL
 5

	)

170 
	#IP_MULTICAST_IF
 6

	)

171 
	#IP_MULTICAST_LOOP
 7

	)

173 
	sù_mªq
 {

174 
ö_addr
 
imr_mu…üddr
;

175 
ö_addr
 
imr_öãrÁ˚
;

176 } 
	tù_mªq
;

195 
	#IPTOS_TOS_MASK
 0x1E

	)

196 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

197 
	#IPTOS_LOWDELAY
 0x10

	)

198 
	#IPTOS_THROUGHPUT
 0x08

	)

199 
	#IPTOS_RELIABILITY
 0x04

	)

200 
	#IPTOS_LOWCOST
 0x02

	)

201 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

212 
	#IPTOS_PREC_MASK
 0xe0

	)

213 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

214 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

215 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

216 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

217 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

218 
	#IPTOS_PREC_FLASH
 0x60

	)

219 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

220 
	#IPTOS_PREC_PRIORITY
 0x20

	)

221 
	#IPTOS_PREC_ROUTINE
 0x00

	)

234 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

235 
	#IOCPARM_MASK
 0x7fU

	)

236 
	#IOC_VOID
 0x20000000UL

	)

237 
	#IOC_OUT
 0x40000000UL

	)

238 
	#IOC_IN
 0x80000000UL

	)

239 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

242 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

244 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

246 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

249 #i‚de‡
FIONREAD


250 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

252 #i‚de‡
FIONBIO


253 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

257 #i‚de‡
SIOCSHIWAT


258 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

259 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

260 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

261 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

262 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

266 #i‚de‡
O_NONBLOCK


267 
	#O_NONBLOCK
 04000U

	)

271 #i‚de‡
FD_SET


272 #unde‡
FD_SETSIZE


274 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

275 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

276 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

277 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

278 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

280 
	sfd_£t
 {

281 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

282 } 
	tfd_£t
;

288 #i‚de‡
LWIP_TIMEVAL_PRIVATE


289 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

292 #i‡
LWIP_TIMEVAL_PRIVATE


293 
	stimevÆ
 {

294 
tv_£c
;

295 
tv_u£c
;

299 
lwù_sockë_öô
();

301 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

302 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

303 
lwù_shutdown
(
s
, 
how
);

304 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

305 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

306 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

307 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

308 
lwù_˛o£
(
s
);

309 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

310 
lwù_li°í
(
s
, 
backlog
);

311 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

312 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

313 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

314 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

315 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

316 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

317 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

318 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

319 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

320 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

321 
timevÆ
 *
timeout
);

322 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

324 #i‡
LWIP_COMPAT_SOCKETS


325 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

326 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

327 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

328 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

329 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

330 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

331 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

332 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

333 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

334 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

335 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

336 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

337 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

338 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

339 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

340 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

341 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

343 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


344 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

345 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

346 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

351 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mÀ√º
;

75 
STAT_COUNTER
 
	mchkîr
;

76 
STAT_COUNTER
 
	mv1_rxed
;

77 
STAT_COUNTER
 
	mjoö_£¡
;

78 
STAT_COUNTER
 
	mÀave_£¡
;

79 
STAT_COUNTER
 
	muniˇ°_quîy
;

80 
STAT_COUNTER
 
	mªp‹t_£¡
;

81 
STAT_COUNTER
 
	mªp‹t_rxed
;

82 
STAT_COUNTER
 
	mgroup_quîy_rxed
;

85 
	s°©s_mem
 {

86 
mem_size_t
 
	mavaû
;

87 
mem_size_t
 
	mu£d
;

88 
mem_size_t
 
	mmax
;

89 
STAT_COUNTER
 
	mîr
;

90 
STAT_COUNTER
 
	mûÀgÆ
;

93 
	s°©s_sy£Àm
 {

94 
STAT_COUNTER
 
	mu£d
;

95 
STAT_COUNTER
 
	mmax
;

96 
STAT_COUNTER
 
	mîr
;

99 
	s°©s_sys
 {

100 
°©s_sy£Àm
 
	m£m
;

101 
°©s_sy£Àm
 
	mmbox
;

104 
	s°©s_
 {

105 #i‡
LINK_STATS


106 
°©s_¥Ÿo
 
	mlök
;

108 #i‡
ETHARP_STATS


109 
°©s_¥Ÿo
 
	mëh¨p
;

111 #i‡
IPFRAG_STATS


112 
°©s_¥Ÿo
 
	mù_‰ag
;

114 #i‡
IP_STATS


115 
°©s_¥Ÿo
 
	mù
;

117 #i‡
ICMP_STATS


118 
°©s_¥Ÿo
 
	micmp
;

120 #i‡
IGMP_STATS


121 
°©s_igmp
 
	migmp
;

123 #i‡
UDP_STATS


124 
°©s_¥Ÿo
 
	mudp
;

126 #i‡
TCP_STATS


127 
°©s_¥Ÿo
 
	mt˝
;

129 #i‡
MEM_STATS


130 
°©s_mem
 
	mmem
;

132 #i‡
MEMP_STATS


133 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

135 #i‡
SYS_STATS


136 
°©s_sys
 
	msys
;

140 
°©s_
 
lwù_°©s
;

142 
	#°©s_öô
(Ë

	)

144 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

145 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

147 
	#°©s_öô
()

	)

148 
	#STATS_INC
(
x
)

	)

149 
	#STATS_DEC
(
x
)

	)

152 #i‡
TCP_STATS


153 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

154 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

156 
	#TCP_STATS_INC
(
x
)

	)

157 
	#TCP_STATS_DISPLAY
()

	)

160 #i‡
UDP_STATS


161 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

162 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

164 
	#UDP_STATS_INC
(
x
)

	)

165 
	#UDP_STATS_DISPLAY
()

	)

168 #i‡
ICMP_STATS


169 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

170 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

172 
	#ICMP_STATS_INC
(
x
)

	)

173 
	#ICMP_STATS_DISPLAY
()

	)

176 #i‡
IGMP_STATS


177 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

178 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

180 
	#IGMP_STATS_INC
(
x
)

	)

181 
	#IGMP_STATS_DISPLAY
()

	)

184 #i‡
IP_STATS


185 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

186 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

188 
	#IP_STATS_INC
(
x
)

	)

189 
	#IP_STATS_DISPLAY
()

	)

192 #i‡
IPFRAG_STATS


193 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

194 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

196 
	#IPFRAG_STATS_INC
(
x
)

	)

197 
	#IPFRAG_STATS_DISPLAY
()

	)

200 #i‡
ETHARP_STATS


201 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

202 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

204 
	#ETHARP_STATS_INC
(
x
)

	)

205 
	#ETHARP_STATS_DISPLAY
()

	)

208 #i‡
LINK_STATS


209 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

210 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

212 
	#LINK_STATS_INC
(
x
)

	)

213 
	#LINK_STATS_DISPLAY
()

	)

216 #i‡
MEM_STATS


217 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

218 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

219 
	#MEM_STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.
mem
.
u£d
 += y; \

220 i‡(
lwù_°©s
.
mem
.
max
 <Üwù_°©s.mem.
u£d
) { \

221 
lwù_°©s
.
mem
.
max
 =Üwù_°©s.mem.
u£d
; \

223 } 0)

	)

224 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

225 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

227 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

228 
	#MEM_STATS_INC
(
x
)

	)

229 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

230 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

231 
	#MEM_STATS_DISPLAY
()

	)

234 #i‡
MEMP_STATS


235 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

236 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

237 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

238 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ëdÿ{ ++
lwù_°©s
.
memp
[i].
u£d
; \

239 i‡(
lwù_°©s
.
memp
[
i
].
max
 <Üwù_°©s.memp[i].
u£d
) { \

240 
lwù_°©s
.
memp
[
i
].
max
 =Üwù_°©s.memp[i].
u£d
; \

242 } 0)

	)

243 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

245 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

246 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

247 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

248 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

249 
	#MEMP_STATS_DISPLAY
(
i
)

	)

252 #i‡
SYS_STATS


253 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

254 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

255 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

257 
	#SYS_STATS_INC
(
x
)

	)

258 
	#SYS_STATS_DEC
(
x
)

	)

259 
	#SYS_STATS_DISPLAY
()

	)

263 #i‡
LWIP_STATS_DISPLAY


264 
°©s_di•œy
();

265 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

266 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

267 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

268 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

269 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

271 
	#°©s_di•œy
()

	)

272 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

273 
	#°©s_di•œy_igmp
(
igmp
)

	)

274 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

275 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

276 
	#°©s_di•œy_sys
(
sys
)

	)

279 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_mbox_t
;

47 
	ssys_timeo
 {
u8_t
 
	mdummy
;};

49 
	#sys_öô
()

	)

50 
	#sys_timeout
(
m
,
h
,
a
)

	)

51 
	#sys_u¡imeout
(
m
,
a
)

	)

52 
	#sys_£m_√w
(
c
Ë
	)
c

53 
	#sys_£m_sig«l
(
s
)

	)

54 
	#sys_£m_waô
(
s
)

	)

55 
	#sys_£m_waô_timeout
(
s
,
t
)

	)

56 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

57 
	#sys_£m_‰ì
(
s
)

	)

58 
	#sys_mbox_√w
(
s
Ë0

	)

59 
	#sys_mbox_„tch
(
m
,
d
)

	)

60 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

61 
	#sys_mbox_po°
(
m
,
d
)

	)

62 
	#sys_mbox_åypo°
(
m
,
d
)

	)

63 
	#sys_mbox_‰ì
(
m
)

	)

65 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

70 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

75 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

77 
	~"lwù/îr.h
"

78 
	~"¨ch/sys_¨ch.h
"

80 (* 
	tsys_timeout_h™dÀr
)(*
	t¨g
);

82 
	ssys_timeo
 {

83 
sys_timeo
 *
√xt
;

84 
u32_t
 
time
;

85 
sys_timeout_h™dÀr
 
h
;

86 *
¨g
;

89 
	ssys_timeouts
 {

90 
sys_timeo
 *
√xt
;

94 
	`sys_öô
();

105 
	`sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

106 
	`sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

107 
sys_timeouts
 *
	`sys_¨ch_timeouts
();

110 
sys_£m_t
 
	`sys_£m_√w
(
u8_t
 
cou¡
);

111 
	`sys_£m_sig«l
(
sys_£m_t
 
£m
);

112 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, u32_à
timeout
);

113 
	`sys_£m_‰ì
(
sys_£m_t
 
£m
);

114 
	`sys_£m_waô
(
sys_£m_t
 
£m
);

115 
	`sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
);

118 #i‚de‡
sys_m¶ìp


119 
	`sys_m¶ìp
(
u32_t
 
ms
);

121 #i‚de‡
sys_jiffõs


122 
u32_t
 
	`sys_jiffõs
();

126 
sys_mbox_t
 
	`sys_mbox_√w
(
size
);

127 
	`sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
);

128 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
);

129 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, u32_à
timeout
);

130 #i‚de‡
sys_¨ch_mbox_åy„tch


131 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
);

134 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

135 
	`sys_mbox_‰ì
(
sys_mbox_t
 
mbox
);

136 
	`sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
);

139 
sys_thªad_t
 
	`sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *¨g, 
°acksize
, 
¥io
);

144 
u32_t
 
	`sys_now
();

151 #i‚de‡
SYS_ARCH_PROTECT


157 #i‡
SYS_LIGHTWEIGHT_PROT


164 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

174 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

183 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

184 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

185 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

189 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

190 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

191 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

202 #i‚de‡
SYS_ARCH_INC


203 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

204 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

205 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

206 
v¨
 +
vÆ
; \

207 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

208 } 0)

	)

211 #i‚de‡
SYS_ARCH_DEC


212 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

213 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

214 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

215 
v¨
 -
vÆ
; \

216 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

217 } 0)

	)

220 #i‚de‡
SYS_ARCH_GET


221 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

222 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

223 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

224 
ªt
 = 
v¨
; \

225 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

226 } 0)

	)

229 #i‚de‡
SYS_ARCH_SET


230 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

231 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

232 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

233 
v¨
 = 
vÆ
; \

234 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

235 } 0)

	)

239 #ifde‡
__˝lu•lus


240 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


50 
t˝_pcb
;

55 
	#t˝_öô
(Ë

	)

56 
t˝_tmr
 ();

60 
t˝_pcb
 * 
t˝_√w
 ();

61 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

63 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

64 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
,

65 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,

66 
îr_t
 
îr
));

67 
t˝_ªcv
 (
t˝_pcb
 *
pcb
,

68 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
,

69 
pbuf
 *
p
, 
îr_t
 
îr
));

70 
t˝_£¡
 (
t˝_pcb
 *
pcb
,

71 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
,

72 
u16_t
 
Àn
));

73 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
,

74 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
),

75 
u8_t
 
öãrvÆ
);

76 
t˝_îr
 (
t˝_pcb
 *
pcb
,

77 (* 
îr
)(*
¨g
, 
îr_t
Érr));

79 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

80 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

82 #i‡
TCP_LISTEN_BACKLOG


83 
	#t˝_ac˚±ed
(
pcb
Ë(((
t˝_pcb_li°í
 *)’cb))->
ac˚±s_≥ndög
--)

	)

85 
	#t˝_ac˚±ed
(
pcb
)

	)

88 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

89 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

90 
u16_t
 
p‹t
);

91 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

92 
u16_t
 
p‹t
, 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
,

93 
t˝_pcb
 *
çcb
,

94 
îr_t
 
îr
));

96 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

97 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

99 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

100 
	#t˝_ab‹t
(
pcb
Ë
	`t˝_ab™d⁄
(’cb), 1)

	)

101 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

104 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

105 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

107 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

108 
u8_t
 
≠iÊags
);

110 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

112 
	#TCP_PRIO_MIN
 1

	)

113 
	#TCP_PRIO_NORMAL
 64

	)

114 
	#TCP_PRIO_MAX
 127

	)

118 
t˝_¶owtmr
 ();

119 
t˝_Á°tmr
 ();

123 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

125 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

126 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

127 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

128 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

138 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

139 ((
çcb
)->
Êags
 & 
TF_NODELAY
) || \

140 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

141 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) \

142 Ë? 1 : 0)

	)

143 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

146 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

147 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

148 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

149 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

152 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

154 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

155 
	#TCP_FIN
 0x01U

	)

156 
	#TCP_SYN
 0x02U

	)

157 
	#TCP_RST
 0x04U

	)

158 
	#TCP_PSH
 0x08U

	)

159 
	#TCP_ACK
 0x10U

	)

160 
	#TCP_URG
 0x20U

	)

161 
	#TCP_ECE
 0x40U

	)

162 
	#TCP_CWR
 0x80U

	)

164 
	#TCP_FLAGS
 0x3fU

	)

167 
	#TCP_HLEN
 20

	)

169 #i‚de‡
TCP_TMR_INTERVAL


170 
	#TCP_TMR_INTERVAL
 250

	)

173 #i‚de‡
TCP_FAST_INTERVAL


174 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

177 #i‚de‡
TCP_SLOW_INTERVAL


178 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

181 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

182 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

184 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

186 #i‚de‡
TCP_MSL


187 
	#TCP_MSL
 60000UL

	)

191 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


192 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

195 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


196 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

199 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


200 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

203 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

208 #ifde‡
PACK_STRUCT_USE_INCLUDES


209 
	~"¨ch/bp°ru˘.h
"

211 
PACK_STRUCT_BEGIN


212 
	st˝_hdr
 {

213 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

214 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

215 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

216 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

217 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

218 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

219 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

220 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

221 } 
PACK_STRUCT_STRUCT
;

222 
PACK_STRUCT_END


223 #ifde‡
PACK_STRUCT_USE_INCLUDES


224 
	~"¨ch/ï°ru˘.h
"

227 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

228 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

229 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

231 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

232 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

233 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË& ~
TCP_FLAGS
Ë| (Êags))

	)

234 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (Êags))

	)

235 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

237 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& 
TCP_FIN
 || \

238 
	`TCPH_FLAGS
((
£g
)->
t˝hdr
Ë& 
TCP_SYN
)? 1: 0))

	)

240 
	et˝_°©e
 {

241 
CLOSED
 = 0,

242 
LISTEN
 = 1,

243 
SYN_SENT
 = 2,

244 
SYN_RCVD
 = 3,

245 
ESTABLISHED
 = 4,

246 
FIN_WAIT_1
 = 5,

247 
FIN_WAIT_2
 = 6,

248 
CLOSE_WAIT
 = 7,

249 
CLOSING
 = 8,

250 
LAST_ACK
 = 9,

251 
TIME_WAIT
 = 10

256 
	#TF_RESET
 (
u8_t
)0x08U

	)

257 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

258 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

261 #i‡
LWIP_CALLBACK_API


269 
	#DEF_ACCEPT_CALLBACK
 
	`îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

	)

271 
	#DEF_ACCEPT_CALLBACK


	)

277 
	#TCP_PCB_COMMON
(
ty≥
) \

278 
ty≥
 *
√xt
; \

279 
t˝_°©e
 
°©e
; \

280 
u8_t
 
¥io
; \

281 *
ˇŒback_¨g
; \

283 
u16_t
 
loˇl_p‹t
; \

285 
DEF_ACCEPT_CALLBACK


	)

289 
	st˝_pcb
 {

291 
IP_PCB
;

293 
TCP_PCB_COMMON
(
t˝_pcb
);

296 
u16_t
 
ªmŸe_p‹t
;

298 
u8_t
 
Êags
;

299 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

300 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

301 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

302 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

303 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

304 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

305 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

310 
u32_t
 
rcv_nxt
;

311 
u16_t
 
rcv_wnd
;

312 
u16_t
 
rcv_™n_wnd
;

313 
u32_t
 
rcv_™n_right_edge
;

316 
u32_t
 
tmr
;

317 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

320 
s16_t
 
πime
;

322 
u16_t
 
mss
;

325 
u32_t
 
πã°
;

326 
u32_t
 
π£q
;

327 
s16_t
 
ß
, 
sv
;

329 
s16_t
 
πo
;

330 
u8_t
 
ƒtx
;

333 
u32_t
 
œ°ack
;

334 
u8_t
 
du∑cks
;

337 
u16_t
 
cwnd
;

338 
u16_t
 
s°hªsh
;

341 
u32_t
 
¢d_nxt
;

342 
u16_t
 
¢d_wnd
;

343 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

345 
u32_t
 
¢d_lbb
;

347 
u16_t
 
acked
;

349 
u16_t
 
¢d_buf
;

350 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffff-3)

	)

351 
u16_t
 
¢d_queuñí
;

355 
t˝_£g
 *
un£¡
;

356 
t˝_£g
 *
u«cked
;

357 #i‡
TCP_QUEUE_OOSEQ


358 
t˝_£g
 *
oo£q
;

361 
pbuf
 *
ªfu£d_d©a
;

363 #i‡
LWIP_CALLBACK_API


370 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
•a˚
);

379 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

387 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
pcb
,Éº_à
îr
);

396 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
pcb
);

406 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

409 #i‡
LWIP_TCP_TIMESTAMPS


410 
u32_t
 
ts_œ°ack£¡
;

411 
u32_t
 
ts_ª˚¡
;

415 
u32_t
 
kìp_idÀ
;

416 #i‡
LWIP_TCP_KEEPALIVE


417 
u32_t
 
kìp_ötvl
;

418 
u32_t
 
kìp_˙t
;

422 
u32_t
 
≥rsi°_˙t
;

424 
u8_t
 
≥rsi°_backoff
;

427 
u8_t
 
kìp_˙t_£¡
;

430 
	st˝_pcb_li°í
 {

432 
IP_PCB
;

434 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

436 #i‡
TCP_LISTEN_BACKLOG


437 
u8_t
 
backlog
;

438 
u8_t
 
ac˚±s_≥ndög
;

442 #i‡
LWIP_EVENT_API


444 
	elwù_evít
 {

445 
LWIP_EVENT_ACCEPT
,

446 
LWIP_EVENT_SENT
,

447 
LWIP_EVENT_RECV
,

448 
LWIP_EVENT_CONNECTED
,

449 
LWIP_EVENT_POLL
,

450 
LWIP_EVENT_ERR


453 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

454 
lwù_evít
,

455 
pbuf
 *
p
,

456 
u16_t
 
size
,

457 
îr_t
 
îr
);

459 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

460 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

461 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

462 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

463 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

464 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

465 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

466 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

467 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

468 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

469 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

470 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

473 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

475 if((
pcb
)->
ac˚±
 !
NULL
) \

476 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

477 (
ªt
Ë
ERR_OK
; \

478 } 0)

	)

480 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

482 if((
pcb
)->
£¡
 !
NULL
) \

483 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

484 (
ªt
Ë
ERR_OK
; \

485 } 0)

	)

487 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

489 if((
pcb
)->
ªcv
 !
NULL
) { \

490 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
)); \

492 (
ªt
Ë
ERR_OK
; \

493 i‡(
p
 !
NULL
) \

494 
	`pbuf_‰ì
(
p
); \

496 } 0)

	)

498 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

500 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

501 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

502 (
ªt
Ë
ERR_OK
; \

503 } 0)

	)

505 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

507 if((
pcb
)->
pﬁl
 !
NULL
) \

508 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

509 (
ªt
Ë
ERR_OK
; \

510 } 0)

	)

512 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

514 if((
îrf
Ë!
NULL
) \

515 (
îrf
)((
¨g
),(
îr
)); \

516 } 0)

	)

521 
	st˝_£g
 {

522 
t˝_£g
 *
√xt
;

523 
pbuf
 *
p
;

524 *
d©≠å
;

525 
u16_t
 
Àn
;

526 
u8_t
 
Êags
;

527 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

528 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

529 
t˝_hdr
 *
t˝hdr
;

532 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

533 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

534 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

537 
	#TCP_BUILD_MSS_OPTION
(
x
Ë(xË
	`ht⁄l
(((
u32_t
)2 << 24) | \

538 ((
u32_t
)4 << 16) | \

539 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

540 (
TCP_MSS
 & 255))

	)

543 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

544 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

545 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

547 
u8_t
 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

548 
u8_t
 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

549 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

551 
	#t˝_ack
(
pcb
) \

553 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

554 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

555 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

556 
	`t˝_ouçut
(
pcb
); \

559 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

561 } 0)

	)

563 
	#t˝_ack_now
(
pcb
) \

565 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

566 
	`t˝_ouçut
(
pcb
); \

567 } 0)

	)

569 
îr_t
 
t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

570 
îr_t
 
t˝_íqueue
(
t˝_pcb
 *
pcb
, *
d©≠å
, 
u16_t
 
Àn
,

571 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
);

573 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

575 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

576 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

577 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

579 
u32_t
 
t˝_√xt_iss
();

581 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

582 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

584 #i‡
TCP_CALCULATE_EFF_SEND_MSS


585 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr
 *
addr
);

588 
t˝_pcb
 *
t˝_öput_pcb
;

589 
u32_t
 
t˝_ticks
;

591 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


592 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

593 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

594 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

595 
t˝_debug_¥öt_pcbs
();

596 
s16_t
 
t˝_pcbs_ß√
();

598 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

599 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

600 
	#t˝_debug_¥öt_°©e
(
s
)

	)

601 
	#t˝_debug_¥öt_pcbs
()

	)

602 
	#t˝_pcbs_ß√
(Ë1

	)

605 #i‡
NO_SYS


606 
	#t˝_timî_√eded
()

	)

608 
t˝_timî_√eded
();

612 
	ut˝_li°í_pcbs_t
 {

613 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

614 
t˝_pcb
 *
	gpcbs
;

616 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

617 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

620 
t˝_pcb
 *
t˝_tw_pcbs
;

622 
t˝_pcb
 *
t˝_tmp_pcb
;

634 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

635 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", 
≈cb
,Çpcb->
loˇl_p‹t
)); \

636 
t˝_tmp_pcb
 = *
pcbs
; \

637 
t˝_tmp_pcb
 !
NULL
; \

638 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

639 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !
≈cb
); \

641 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", 
≈cb
->
°©e
 !
CLOSED
); \

642 
≈cb
->
√xt
 = *
pcbs
; \

643 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", 
≈cb
->
√xt
 !=Çpcb); \

644 *(
pcbs
Ë
≈cb
; \

645 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

646 
	`t˝_timî_√eded
(); \

647 } 0)

	)

648 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

649 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *
pcbs
 !
NULL
); \

650 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

651 if(*
pcbs
 =
≈cb
) { \

652 *
pcbs
 = (*pcbs)->
√xt
; \

653 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

654 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

655 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

659 
≈cb
->
√xt
 = 
NULL
; \

660 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

661 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

662 } 0)

	)

666 
	#TCP_REG
(
pcbs
, 
≈cb
) \

668 
≈cb
->
√xt
 = *
pcbs
; \

669 *(
pcbs
Ë
≈cb
; \

670 
	`t˝_timî_√eded
(); \

671 } 0)

	)

673 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

675 if(*(
pcbs
Ë=
≈cb
) { \

676 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

679 
t˝_tmp_pcb
 = *
pcbs
; \

680 
t˝_tmp_pcb
 !
NULL
; \

681 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

682 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

683 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

688 
≈cb
->
√xt
 = 
NULL
; \

689 } 0)

	)

693 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/√tif.h
"

46 #ifde‡
__˝lu•lus


50 #i‡
LWIP_TCPIP_CORE_LOCKING


52 
sys_£m_t
 
lock_t˝ù_c‹e
;

53 
	#LOCK_TCPIP_CORE
(Ë
	`sys_£m_waô
(
lock_t˝ù_c‹e
)

	)

54 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_£m_sig«l
(
lock_t˝ù_c‹e
)

	)

55 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

56 
	#TCPIP_APIMSG_ACK
(
m
)

	)

57 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

58 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

60 
	#LOCK_TCPIP_CORE
()

	)

61 
	#UNLOCK_TCPIP_CORE
()

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
c⁄n
->
›_com∂ëed
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
£m
)

	)

68 
t˝ù_öô
((* 
t˝ù_öô_d⁄e
)(*), *
¨g
);

70 #i‡
LWIP_NETCONN


71 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

72 #i‡
LWIP_TCPIP_CORE_LOCKING


73 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

77 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

79 #i‡
LWIP_NETIF_API


80 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

81 #i‡
LWIP_TCPIP_CORE_LOCKING


82 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

86 
îr_t
 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
);

87 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

90 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

91 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

93 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

94 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

96 
	et˝ù_msg_ty≥
 {

97 #i‡
LWIP_NETCONN


98 
	gTCPIP_MSG_API
,

100 
	gTCPIP_MSG_INPKT
,

101 #i‡
LWIP_NETIF_API


102 
	gTCPIP_MSG_NETIFAPI
,

104 
	gTCPIP_MSG_CALLBACK
,

105 
	gTCPIP_MSG_TIMEOUT
,

106 
	gTCPIP_MSG_UNTIMEOUT


109 
	st˝ù_msg
 {

110 
t˝ù_msg_ty≥
 
	gty≥
;

111 
sys_£m_t
 *
	g£m
;

113 #i‡
LWIP_NETCONN


114 
≠i_msg
 *
	g≠imsg
;

116 #i‡
LWIP_NETIF_API


117 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

120 
pbuf
 *
	gp
;

121 
√tif
 *
	g√tif
;

122 } 
	göp
;

124 (*
	gf
)(*
	g˘x
);

125 *
	g˘x
;

126 } 
	gcb
;

128 
u32_t
 
	gm£cs
;

129 
sys_timeout_h™dÀr
 
	gh
;

130 *
	g¨g
;

131 } 
	gtmo
;

132 } 
	gmsg
;

135 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

70 
	sudp_pcb
 {

72 
IP_PCB
;

76 
udp_pcb
 *
√xt
;

78 
u8_t
 
Êags
;

80 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

82 #i‡
LWIP_IGMP


84 
ù_addr
 
mu…iˇ°_ù
;

87 #i‡
LWIP_UDPLITE


89 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

103 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

104 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

106 *
ªcv_¨g
;

109 
udp_pcb
 *
udp_pcbs
;

113 
udp_pcb
 * 
udp_√w
 ();

114 
udp_ªmove
 (
udp_pcb
 *
pcb
);

115 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

116 
u16_t
 
p‹t
);

117 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

118 
u16_t
 
p‹t
);

119 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

120 
udp_ªcv
 (
udp_pcb
 *
pcb
,

121 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
,

122 
pbuf
 *
p
,

123 
ù_addr
 *
addr
,

124 
u16_t
 
p‹t
),

125 *
ªcv_¨g
);

126 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif);

127 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

128 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

130 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

131 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

134 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

136 
	#udp_öô
(Ë

	)

138 #i‡
UDP_DEBUG


139 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

141 
	#udp_debug_¥öt
(
udphdr
)

	)

144 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
ETH_PAD_SIZE


52 
	#ETH_PAD_SIZE
 0

	)

55 #i‚de‡
ETHARP_HWADDR_LEN


56 
	#ETHARP_HWADDR_LEN
 6

	)

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sëh_addr
 {

64 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sëh_hdr
 {

76 #i‡
ETH_PAD_SIZE


77 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

79 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

80 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

82 } 
PACK_STRUCT_STRUCT
;

83 
PACK_STRUCT_END


84 #ifde‡
PACK_STRUCT_USE_INCLUDES


85 
	~"¨ch/ï°ru˘.h
"

88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/bp°ru˘.h
"

91 
PACK_STRUCT_BEGIN


93 
	sëh¨p_hdr
 {

94 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëhhdr
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

96 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

97 
PACK_STRUCT_FIELD
(
u16_t
 
_hwÀn_¥Ÿﬁí
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

99 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

100 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

101 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

102 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

103 } 
PACK_STRUCT_STRUCT
;

104 
PACK_STRUCT_END


105 #ifde‡
PACK_STRUCT_USE_INCLUDES


106 
	~"¨ch/ï°ru˘.h
"

109 #ifde‡
PACK_STRUCT_USE_INCLUDES


110 
	~"¨ch/bp°ru˘.h
"

112 
PACK_STRUCT_BEGIN


113 
	sëhù_hdr
 {

114 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëh
);

115 
PACK_STRUCT_FIELD
(
ù_hdr
 
ù
);

116 } 
PACK_STRUCT_STRUCT
;

117 
PACK_STRUCT_END


118 #ifde‡
PACK_STRUCT_USE_INCLUDES


119 
	~"¨ch/ï°ru˘.h
"

123 
	#ARP_TMR_INTERVAL
 5000

	)

125 
	#ETHTYPE_ARP
 0x0806

	)

126 
	#ETHTYPE_IP
 0x0800

	)

127 
	#ETHTYPE_PPPOEDISC
 0x8863

	)

128 
	#ETHTYPE_PPPOE
 0x8864

	)

131 
	#ARP_REQUEST
 1

	)

132 
	#ARP_REPLY
 2

	)

134 #i‡
ARP_QUEUEING


138 
	sëh¨p_q_íåy
 {

139 
ëh¨p_q_íåy
 *
√xt
;

140 
pbuf
 *
p
;

144 
	#ëh¨p_öô
(Ë

	)

145 
ëh¨p_tmr
();

146 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

147 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
);

148 
ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

149 
ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
,

150 
pbuf
 *
p
);

151 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
);

152 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
);

153 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

158 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), &“ëif)->
ù_addr
)

	)

160 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

162 #i‡
LWIP_AUTOIP


163 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

164 c⁄° 
ëh_addr
 *
ëhd°_addr
,

165 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

166 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

167 c⁄° 
u16_t
 
›code
);

170 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

172 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

174 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/loopif.h

32 #i‚de‡
__NETIF_LOOPIF_H__


33 
	#__NETIF_LOOPIF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


44 
	#lo›if_pﬁl
 
√tif_pﬁl


	)

47 
îr_t
 
lo›if_öô
(
√tif
 *netif);

49 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/ppp_oe.h

70 #i‚de‡
PPP_OE_H


71 
	#PPP_OE_H


	)

73 
	~"lwù/›t.h
"

75 #i‡
PPPOE_SUPPORT
 > 0

77 #ifde‡
PACK_STRUCT_USE_INCLUDES


78 
	~"¨ch/bp°ru˘.h
"

80 
PACK_STRUCT_BEGIN


81 
	sµp€hdr
 {

82 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

86 } 
	gPACK_STRUCT_STRUCT
;

87 
	gPACK_STRUCT_END


88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/ï°ru˘.h
"

92 #ifde‡
PACK_STRUCT_USE_INCLUDES


93 
	~"¨ch/bp°ru˘.h
"

95 
PACK_STRUCT_BEGIN


96 
	sµp€èg
 {

97 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

99 } 
	gPACK_STRUCT_STRUCT
;

100 
	gPACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

106 
	#PPPOE_STATE_INITIAL
 0

	)

107 
	#PPPOE_STATE_PADI_SENT
 1

	)

108 
	#PPPOE_STATE_PADR_SENT
 2

	)

109 
	#PPPOE_STATE_SESSION
 3

	)

110 
	#PPPOE_STATE_CLOSING
 4

	)

112 
	#PPPOE_STATE_PADO_SENT
 1

	)

114 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

115 
	#PPPOE_VERTYPE
 0x11

	)

117 
	#PPPOE_TAG_EOL
 0x0000

	)

118 
	#PPPOE_TAG_SNAME
 0x0101

	)

119 
	#PPPOE_TAG_ACNAME
 0x0102

	)

120 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

121 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

122 
	#PPPOE_TAG_VENDOR
 0x0105

	)

123 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

124 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

125 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

126 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

128 
	#PPPOE_CODE_PADI
 0x09

	)

129 
	#PPPOE_CODE_PADO
 0x07

	)

130 
	#PPPOE_CODE_PADR
 0x19

	)

131 
	#PPPOE_CODE_PADS
 0x65

	)

132 
	#PPPOE_CODE_PADT
 0xA7

	)

134 #i‚de‡
ETHERMTU


135 
	#ETHERMTU
 1500

	)

139 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

141 
	gµp€_so·c
;

144 
µp€_öô
();

146 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

147 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

149 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

150 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

152 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

153 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

155 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

157 
µp€_hdæí
;

	@firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/slipif.h

34 #i‚de‡
__NETIF_SLIPIF_H__


35 
	#__NETIF_SLIPIF_H__


	)

37 
	~"lwù/√tif.h
"

39 #ifde‡
__˝lu•lus


43 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

45 #ifde‡
__˝lu•lus


	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/etharp.c

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_ARP


50 
	~"lwù/öë.h
"

51 
	~"lwù/ù.h
"

52 
	~"lwù/°©s.h
"

53 
	~"lwù/¢mp.h
"

54 
	~"lwù/dh˝.h
"

55 
	~"lwù/autoù.h
"

56 
	~"√tif/ëh¨p.h
"

58 #i‡
PPPOE_SUPPORT


59 
	~"√tif/µp_€.h
"

62 
	~<°rög.h
>

68 
	#ARP_MAXAGE
 240

	)

76 
	#ARP_MAXPENDING
 2

	)

78 
	#HWTYPE_ETHERNET
 1

	)

80 
	#ARPH_HWLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë>> 8)

	)

81 
	#ARPH_PROTOLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë& 0xff)

	)

83 
	#ARPH_HWLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(
	`ARPH_PROTOLEN
(hdrË| (÷íË<< 8))

	)

84 
	#ARPH_PROTOLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(÷íË| (
	`ARPH_HWLEN
(hdrË<< 8))

	)

86 
	eëh¨p_°©e
 {

87 
	mETHARP_STATE_EMPTY
 = 0,

88 
	mETHARP_STATE_PENDING
,

89 
	mETHARP_STATE_STABLE


92 
	sëh¨p_íåy
 {

93 #i‡
ARP_QUEUEING


97 
ëh¨p_q_íåy
 *
	mq
;

99 
ù_addr
 
	mùaddr
;

100 
ëh_addr
 
	mëhaddr
;

101 
ëh¨p_°©e
 
	m°©e
;

102 
u8_t
 
	m˘ime
;

103 
√tif
 *
	m√tif
;

106 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

107 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

108 
ëh¨p_íåy
 
	g¨p_èbÀ
[
ARP_TABLE_SIZE
];

109 #i‡!
LWIP_NETIF_HWADDRHINT


110 
u8_t
 
	gëh¨p_ˇched_íåy
;

116 
	#ETHARP_TRY_HARD
 1

	)

117 
	#ETHARP_FIND_ONLY
 2

	)

119 #i‡
LWIP_NETIF_HWADDRHINT


120 
	#NETIF_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

121 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

122 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif);

124 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
);

127 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

131 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

136 #i‡
ARP_QUEUEING


143 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

145 
ëh¨p_q_íåy
 *
r
;

146 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

147 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

148 
q
) {

149 
r
 = 
q
;

150 
q
 = q->
√xt
;

151 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

152 
	`pbuf_‰ì
(
r
->
p
);

153 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
);

155 
	}
}

165 
	$ëh¨p_tmr
()

167 
u8_t
 
i
;

169 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

171 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

172 
¨p_èbÀ
[
i
].
˘ime
++;

173 i‡(((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) &&

174 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
)) ||

175 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

176 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

178 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

179 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

182 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

183 #i‡
ARP_QUEUEING


185 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

187 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

188 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

189 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

193 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

195 #i‡
ARP_QUEUEING


197 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

202 
	}
}

226 
	gs8_t


227 #i‡
LWIP_NETIF_HWADDRHINT


228 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif)

230 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
)

233 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

234 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

235 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

236 #i‡
ARP_QUEUEING


238 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

240 
u8_t
 
age_queue
 = 0;

245 i‡(
ùaddr
) {

247 #i‡
LWIP_NETIF_HWADDRHINT


248 i‡((
√tif
 !
NULL
Ë&& (√tif->
addr_höt
 != NULL)) {

250 
u8_t
 
≥r_pcb_ˇche
 = *(
√tif
->
addr_höt
);

251 i‡((
≥r_pcb_ˇche
 < 
ARP_TABLE_SIZE
Ë&& 
¨p_èbÀ
[≥r_pcb_ˇche].
°©e
 =
ETHARP_STATE_STABLE
) {

253 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
≥r_pcb_ˇche
].ipaddr)) {

255 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

256  
≥r_pcb_ˇche
;

261 i‡(
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) {

263 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr)) {

265 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

266  
ëh¨p_ˇched_íåy
;

287 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

289 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
)) {

290 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

292 
em±y
 = 
i
;

295 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

297 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

298 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÖídögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

300 #i‡
LWIP_NETIF_HWADDRHINT


301 
	`NETIF_SET_HINT
(
√tif
, 
i
);

303 
ëh¨p_ˇched_íåy
 = 
i
;

305  
i
;

306 #i‡
ARP_QUEUEING


308 } i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

309 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

310 
ﬁd_queue
 = 
i
;

311 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

316 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

317 
ﬁd_≥ndög
 = 
i
;

318 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

323 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

325 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

326 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chög sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

328 #i‡
LWIP_NETIF_HWADDRHINT


329 
	`NETIF_SET_HINT
(
√tif
, 
i
);

331 
ëh¨p_ˇched_íåy
 = 
i
;

333  
i
;

335 } i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

336 
ﬁd_°abÀ
 = 
i
;

337 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

344 i‡(((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_TRY_HARD
) == 0))

346 || ((
Êags
 & 
ETHARP_FIND_ONLY
) != 0)) {

347 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

348  (
s8_t
)
ERR_MEM
;

361 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

362 
i
 = 
em±y
;

363 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

366 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

368 
i
 = 
ﬁd_°abÀ
;

369 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

370 #i‡
ARP_QUEUEING


372 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

375 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

377 
i
 = 
ﬁd_≥ndög
;

378 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

379 #i‡
ARP_QUEUEING


381 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

383 
i
 = 
ﬁd_queue
;

384 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

385 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

386 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

390  (
s8_t
)
ERR_MEM
;

394 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

396 i‡(
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_EMPTY
)

398 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

401 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

404 i‡(
ùaddr
 !
NULL
) {

406 
	`ù_addr_£t
(&
¨p_èbÀ
[
i
].
ùaddr
, ipaddr);

408 
¨p_èbÀ
[
i
].
˘ime
 = 0;

409 #i‡
LWIP_NETIF_HWADDRHINT


410 
	`NETIF_SET_HINT
(
√tif
, 
i
);

412 
ëh¨p_ˇched_íåy
 = 
i
;

414  (
îr_t
)
i
;

415 
	}
}

427 
îr_t


428 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

430 
ëh_hdr
 *
ëhhdr
 = 
p
->
∑ylﬂd
;

431 
u8_t
 
k
;

433 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

434 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

435 
k
 = 
ETHARP_HWADDR_LEN
;

436 
k
 > 0) {

437 
k
--;

438 
ëhhdr
->
de°
.
addr
[
k
] = 
d°
->addr[k];

439 
ëhhdr
->
§c
.
addr
[
k
] = src->addr[k];

441 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_IP
);

442 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

444  
√tif
->
	`lökouçut
“ëif, 
p
);

445 
	}
}

466 
îr_t


467 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

469 
s8_t
 
i
;

470 
u8_t
 
k
;

471 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("update_arp_entry()\n"));

472 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

473 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

474 
	`ù4_addr1
(
ùaddr
), 
	`ù4_addr2
(ùaddr), 
	`ù4_addr3
(ùaddr), 
	`ù4_addr4
(ipaddr),

475 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

476 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

478 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

479 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

480 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

481 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

482  
ERR_ARG
;

485 #i‡
LWIP_NETIF_HWADDRHINT


486 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
, 
√tif
);

488 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
);

491 i‡(
i
 < 0)

492  (
îr_t
)
i
;

495 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

497 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

500 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

502 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

504 
k
 = 
ETHARP_HWADDR_LEN
;

505 
k
 > 0) {

506 
k
--;

507 
¨p_èbÀ
[
i
].
ëhaddr
.
addr
[
k
] =Éthaddr->addr[k];

510 
¨p_èbÀ
[
i
].
˘ime
 = 0;

511 #i‡
ARP_QUEUEING


513 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

514 
pbuf
 *
p
;

516 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

518 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

520 
p
 = 
q
->p;

522 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
);

524 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

526 
	`pbuf_‰ì
(
p
);

529  
ERR_OK
;

530 
	}
}

543 
s8_t


544 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

545 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
)

547 
s8_t
 
i
;

549 
	`LWIP_UNUSED_ARG
(
√tif
);

551 #i‡
LWIP_NETIF_HWADDRHINT


552 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
, 
NULL
);

554 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
);

556 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

557 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

558 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

559  
i
;

562 
	}
}

580 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

582 
ëhù_hdr
 *
hdr
;

583 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

586 
hdr
 = 
p
->
∑ylﬂd
;

588 i‡(!
	`ù_addr_√tcmp
(&(
hdr
->
ù
.
§c
), &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

593 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

597 
	`upd©e_¨p_íåy
(
√tif
, &(
hdr
->
ù
.
§c
), &(hdr->
ëh
.src), 0);

598 
	}
}

617 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

619 
ëh¨p_hdr
 *
hdr
;

621 
ù_addr
 
sùaddr
, 
dùaddr
;

622 
u8_t
 
i
;

623 
u8_t
 
f‹_us
;

624 #i‡
LWIP_AUTOIP


625 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

628 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

632 i‡(
p
->
Àn
 < (
ëh¨p_hdr
)) {

633 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
, (
s16_t
)(
ëh¨p_hdr
)));

634 
	`ETHARP_STATS_INC
(
ëh¨p
.
À√º
);

635 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

636 
	`pbuf_‰ì
(
p
);

640 
hdr
 = 
p
->
∑ylﬂd
;

643 i‡((
hdr
->
hwty≥
 !
	`ht⁄s
(
HWTYPE_ETHERNET
)) ||

644 (
hdr
->
_hwÀn_¥Ÿﬁí
 !
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
))) ||

645 (
hdr
->
¥Ÿo
 !
	`ht⁄s
(
ETHTYPE_IP
)) ||

646 (
hdr
->
ëhhdr
.
ty≥
 !
	`ht⁄s
(
ETHTYPE_ARP
))) {

647 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1,

648 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",

649 
hdr
->
hwty≥
, 
	`ARPH_HWLEN
(hdr), hdr->
¥Ÿo
, 
	`ARPH_PROTOLEN
(hdr), hdr->
ëhhdr
.
ty≥
));

650 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

651 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

652 
	`pbuf_‰ì
(
p
);

655 
	`ETHARP_STATS_INC
(
ëh¨p
.
ªcv
);

657 #i‡
LWIP_AUTOIP


661 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

666 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

667 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

670 i‡(
√tif
->
ù_addr
.
addr
 == 0) {

671 
f‹_us
 = 0;

674 
f‹_us
 = 
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

678 i‡(
f‹_us
) {

681 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 
ETHARP_TRY_HARD
);

685 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 0);

689 
	`ht⁄s
(
hdr
->
›code
)) {

691 
ARP_REQUEST
:

696 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

698 i‡(
f‹_us
) {

700 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

704 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

706 
hdr
->
dùaddr
 = hdr->
sùaddr
;

707 
	`SMEMCPY
(&
hdr
->
sùaddr
, &
√tif
->
ù_addr
, (hdr->sipaddr));

709 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

710 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

711 
i
 = 
ETHARP_HWADDR_LEN
;

712 #i‡
LWIP_AUTOIP


715 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

718 
i
 > 0) {

719 
i
--;

720 
hdr
->
dhwaddr
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

721 #i‡
LWIP_AUTOIP


722 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = 
ëhd°_hwaddr
[i];

724 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

726 
hdr
->
shwaddr
.
addr
[
i
] = 
ëhaddr
->addr[i];

727 
hdr
->
ëhhdr
.
§c
.
addr
[
i
] = 
ëhaddr
->addr[i];

734 
√tif
->
	`lökouçut
“ëif, 
p
);

736 } i‡(
√tif
->
ù_addr
.
addr
 == 0) {

738 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

742 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

745 
ARP_REPLY
:

747 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

748 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

753 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

757 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

758 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

762 
	`pbuf_‰ì
(
p
);

763 
	}
}

783 
îr_t


784 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
)

786 
ëh_addr
 *
de°
, 
mˇ°addr
;

789 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

791 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_output: couldÇotállocateÑoom for header.\n"));

792 
	`LINK_STATS_INC
(
lök
.
À√º
);

793  
ERR_BUF
;

797 
de°
 = 
NULL
;

802 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

804 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

806 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

808 
mˇ°addr
.
addr
[0] = 0x01;

809 
mˇ°addr
.
addr
[1] = 0x00;

810 
mˇ°addr
.
addr
[2] = 0x5e;

811 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

812 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

813 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

815 
de°
 = &
mˇ°addr
;

819 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

821 i‡(
√tif
->
gw
.
addr
 != 0) {

823 
ùaddr
 = &(
√tif
->
gw
);

827  
ERR_RTE
;

831  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

837  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

838 
	}
}

873 
îr_t


874 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
)

876 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

877 
îr_t
 
ªsu…
 = 
ERR_MEM
;

878 
s8_t
 
i
;

881 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

882 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

883 
	`ù_addr_ißny
(
ùaddr
)) {

884 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

885  
ERR_ARG
;

889 #i‡
LWIP_NETIF_HWADDRHINT


890 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
, 
√tif
);

892 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
);

896 i‡(
i
 < 0) {

897 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

898 i‡(
q
) {

899 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

900 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

902  (
îr_t
)
i
;

906 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

907 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

911 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

912 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

913 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

916 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

918 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

919 i‡(
ªsu…
 !
ERR_OK
) {

928 i‡(
q
 !
NULL
) {

930 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

933 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

935 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

936 #i‡
ARP_QUEUEING


937 
pbuf
 *
p
;

938 
c›y_√eded
 = 0;

942 
p
 = 
q
;

943 
p
) {

944 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

945 if(
p
->
ty≥
 !
PBUF_ROM
) {

946 
c›y_√eded
 = 1;

949 
p
 =Ö->
√xt
;

951 if(
c›y_√eded
) {

953 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_RAM
);

954 if(
p
 !
NULL
) {

955 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

956 
	`pbuf_‰ì
(
p
);

957 
p
 = 
NULL
;

962 
p
 = 
q
;

963 
	`pbuf_ªf
(
p
);

966 i‡(
p
 !
NULL
) {

968 
ëh¨p_q_íåy
 *
√w_íåy
;

970 
√w_íåy
 = 
	`memp_mÆloc
(
MEMP_ARP_QUEUE
);

971 i‡(
√w_íåy
 !
NULL
) {

972 
√w_íåy
->
√xt
 = 0;

973 
√w_íåy
->
p
 =Ö;

974 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

976 
ëh¨p_q_íåy
 *
r
;

977 
r
 = 
¨p_èbÀ
[
i
].
q
;

978 
r
->
√xt
 !
NULL
) {

979 
r
 =Ñ->
√xt
;

981 
r
->
√xt
 = 
√w_íåy
;

984 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

986 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

987 
ªsu…
 = 
ERR_OK
;

990 
	`pbuf_‰ì
(
p
);

991 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

995 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

996 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1002 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: Ethî√àde°ö©i⁄áddªs†unknown, queueög dißbÀd,Öackë %∞dr›≥d\n", (*)
q
));

1006  
ªsu…
;

1007 
	}
}

1024 #i‡!
LWIP_AUTOIP


1027 
îr_t


1028 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1029 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1030 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

1031 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

1032 c⁄° 
u16_t
 
›code
)

1034 
pbuf
 *
p
;

1035 
îr_t
 
ªsu…
 = 
ERR_OK
;

1036 
u8_t
 
k
;

1037 
ëh¨p_hdr
 *
hdr
;

1038 #i‡
LWIP_AUTOIP


1039 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1043 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, (
ëh¨p_hdr
), 
PBUF_RAM
);

1045 i‡(
p
 =
NULL
) {

1046 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_raw: couldÇotállocateÖbuf for ARPÑequest.\n"));

1047 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1048  
ERR_MEM
;

1050 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1051 (
p
->
Àn
 >(
ëh¨p_hdr
)));

1053 
hdr
 = 
p
->
∑ylﬂd
;

1054 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1055 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1057 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1058 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1059 
k
 = 
ETHARP_HWADDR_LEN
;

1060 #i‡
LWIP_AUTOIP


1063 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1066 
k
 > 0) {

1067 
k
--;

1069 
hdr
->
shwaddr
.
addr
[
k
] = 
hw§c_addr
->addr[k];

1070 
hdr
->
dhwaddr
.
addr
[
k
] = 
hwd°_addr
->addr[k];

1072 #i‡
LWIP_AUTOIP


1073 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_hwaddr
[k];

1075 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_addr
->addr[k];

1077 
hdr
->
ëhhdr
.
§c
.
addr
[
k
] = 
ëh§c_addr
->addr[k];

1079 
hdr
->
sùaddr
 = *(
ù_addr2
 *)
ù§c_addr
;

1080 
hdr
->
dùaddr
 = *(
ù_addr2
 *)
ùd°_addr
;

1082 
hdr
->
hwty≥
 = 
	`ht⁄s
(
HWTYPE_ETHERNET
);

1083 
hdr
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

1085 
hdr
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
));

1087 
hdr
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

1089 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1090 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1092 
	`pbuf_‰ì
(
p
);

1093 
p
 = 
NULL
;

1096  
ªsu…
;

1097 
	}
}

1108 
îr_t


1109 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

1111 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1112  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1113 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1114 
ùaddr
, 
ARP_REQUEST
);

1115 
	}
}

1125 
îr_t


1126 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1128 
ëh_hdr
* 
ëhhdr
;

1131 
ëhhdr
 = 
p
->
∑ylﬂd
;

1132 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1134 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1135 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1136 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1137 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1138 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1140 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

1142 
ETHTYPE_IP
:

1143 #i‡
ETHARP_TRUST_IP_MAC


1145 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1148 if(
	`pbuf_hódî
(
p
, -(
s16_t
)(
ëh_hdr
))) {

1149 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

1150 
	`pbuf_‰ì
(
p
);

1151 
p
 = 
NULL
;

1154 
	`ù_öput
(
p
, 
√tif
);

1158 
ETHTYPE_ARP
:

1160 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1163 #i‡
PPPOE_SUPPORT


1164 
ETHTYPE_PPPOEDISC
:

1165 
	`µp€_disc_öput
(
√tif
, 
p
);

1168 
ETHTYPE_PPPOE
:

1169 
	`µp€_d©a_öput
(
√tif
, 
p
);

1174 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1175 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1176 
	`pbuf_‰ì
(
p
);

1177 
p
 = 
NULL
;

1183  
ERR_OK
;

1184 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ethernetif.c

46 
	~"lwù/›t.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/mem.h
"

52 
	~"lwù/pbuf.h
"

53 
	~"lwù/sys.h
"

54 
	~<lwù/°©s.h
>

55 
	~<lwù/¢mp.h
>

56 
	~"√tif/ëh¨p.h
"

57 
	~"√tif/µp_€.h
"

60 
	#IFNAME0
 'e'

	)

61 
	#IFNAME1
 'n'

	)

69 
	sëhî√tif
 {

70 
ëh_addr
 *
	mëhaddr
;

75 
ëhî√tif_öput
(
√tif
 *netif);

85 
	$low_Àvñ_öô
(
√tif
 *netif)

87 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

90 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

93 
√tif
->
hwaddr
[0] = ;

95 
√tif
->
hwaddr
[5] = ;

98 
√tif
->
mtu
 = 1500;

102 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

105 
	}
}

123 
îr_t


124 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

126 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

127 
pbuf
 *
q
;

129 
öôüã
 
	`å™s„r
();

131 #i‡
ETH_PAD_SIZE


132 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

135 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

139 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

142 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

144 #i‡
ETH_PAD_SIZE


145 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

148 
	`LINK_STATS_INC
(
lök
.
xmô
);

150  
ERR_OK
;

151 
	}
}

161 
pbuf
 *

162 
	$low_Àvñ_öput
(
√tif
 *netif)

164 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

165 
pbuf
 *
p
, *
q
;

166 
u16_t
 
Àn
;

170 
Àn
 = ;

172 #i‡
ETH_PAD_SIZE


173 
Àn
 +
ETH_PAD_SIZE
;

177 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

179 i‡(
p
 !
NULL
) {

181 #i‡
ETH_PAD_SIZE


182 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

187 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

191 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

193 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

195 #i‡
ETH_PAD_SIZE


196 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

199 
	`LINK_STATS_INC
(
lök
.
ªcv
);

201 
dr›
 
	`∑ckë
();

202 
	`LINK_STATS_INC
(
lök
.
memîr
);

203 
	`LINK_STATS_INC
(
lök
.
dr›
);

206  
p
;

207 
	}
}

219 
	$ëhî√tif_öput
(
√tif
 *netif)

221 
ëhî√tif
 *ethernetif;

222 
ëh_hdr
 *
ëhhdr
;

223 
pbuf
 *
p
;

225 
ëhî√tif
 = 
√tif
->
°©e
;

228 
p
 = 
	`low_Àvñ_öput
(
√tif
);

230 i‡(
p
 =
NULL
) ;

232 
ëhhdr
 = 
p
->
∑ylﬂd
;

234 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

236 
ETHTYPE_IP
:

237 
ETHTYPE_ARP
:

238 #i‡
PPPOE_SUPPORT


240 
ETHTYPE_PPPOEDISC
:

241 
ETHTYPE_PPPOE
:

244 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

245 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

246 
	`pbuf_‰ì
(
p
);

247 
p
 = 
NULL
;

252 
	`pbuf_‰ì
(
p
);

253 
p
 = 
NULL
;

256 
	}
}

270 
îr_t


271 
	$ëhî√tif_öô
(
√tif
 *netif)

273 
ëhî√tif
 *ethernetif;

275 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

277 
ëhî√tif
 = 
	`mem_mÆloc
((ethernetif));

278 i‡(
ëhî√tif
 =
NULL
) {

279 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_init: out of memory\n"));

280  
ERR_MEM
;

283 #i‡
LWIP_NETIF_HOSTNAME


285 
√tif
->
ho°«me
 = "lwip";

293 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

295 
√tif
->
°©e
 = 
ëhî√tif
;

296 
√tif
->
«me
[0] = 
IFNAME0
;

297 
√tif
->
«me
[1] = 
IFNAME1
;

302 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

303 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

305 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

308 
	`low_Àvñ_öô
(
√tif
);

310  
ERR_OK
;

311 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/loopif.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_HAVE_LOOPIF


42 
	~"√tif/lo›if.h
"

43 
	~"lwù/¢mp.h
"

52 
îr_t


53 
	$lo›if_öô
(
√tif
 *netif)

58 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

60 
√tif
->
«me
[0] = 'l';

61 
√tif
->
«me
[1] = 'o';

62 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

63  
ERR_OK
;

64 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/auth.c

67 
	~"lwù/›t.h
"

69 #i‡
PPP_SUPPORT


71 
	~"µp.h
"

72 
	~"µpdebug.h
"

74 
	~"fsm.h
"

75 
	~"l˝.h
"

76 
	~"∑p.h
"

77 
	~"ch≠.h
"

78 
	~"auth.h
"

79 
	~"ù˝.h
"

81 #i‡
CBCP_SUPPORT


82 
	~"cb˝.h
"

90 
	#PAP_WITHPEER
 1

	)

91 
	#PAP_PEER
 2

	)

92 
	#CHAP_WITHPEER
 4

	)

93 
	#CHAP_PEER
 8

	)

100 
	sw‹dli°
 {

101 
w‹dli°
 *
	m√xt
;

102 
	mw‹d
[1];

109 *
¸y±
 (const *, const *);

113 
√tw‹k_pha£
 ();

114 
check_idÀ
 (*);

115 
c⁄√˘_time_expúed
 (*);

117 
logö
 (*, *, **, *);

119 
logout
 ();

120 
nuŒ_logö
 ();

121 
gë_∑p_∑sswd
 (, *, *);

122 
have_∑p_£¸ë
 ();

123 
have_ch≠_£¸ë
 (*, *, 
u32_t
);

124 
ù_addr_check
 (
u32_t
, 
w‹dli°
 *);

126 
£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
);

127 
‰ì_w‹dli°
 (
w‹dli°
 *);

129 #i‡
CBCP_SUPPORT


130 
ˇŒback_pha£
 ();

142 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


144 
	g≥î_auth«me
[
MAXNAMELEN
];

148 
	gauth_≥ndög
[
NUM_PPP
];

151 
	glogged_ö
;

154 
	gdid_authup
;

157 
w‹dli°
 *
	gaddªs£s
[
NUM_PPP
];

160 
	gnum_≈_›í
;

163 
	gnum_≈_up
;

165 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


167 
	g∑sswd_‰om_fûe
;

179 
	$lök_ªquúed
(
unô
)

181 
	`LWIP_UNUSED_ARG
(
unô
);

183 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ªquúed: %d\n", 
unô
));

184 
	}
}

191 
	$lök_ãrmö©ed
(
unô
)

193 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ãrmö©ed: %d\n", 
unô
));

194 i‡(
l˝_pha£
[
unô
] =
PHASE_DEAD
) {

197 i‡(
logged_ö
) {

198 
	`logout
();

200 
l˝_pha£
[
unô
] = 
PHASE_DEAD
;

201 
	`AUTHDEBUG
((
LOG_NOTICE
, "ConnectionÅerminated.\n"));

202 
	`µpLökTîmö©ed
(
unô
);

203 
	}
}

209 
	$lök_down
(
unô
)

211 
i
;

212 
¥Ÿít
 *
¥Ÿp
;

214 
	`AUTHDEBUG
((
LOG_INFO
, "lök_down: %d\n", 
unô
));

215 i‡(
did_authup
) {

217 
did_authup
 = 0;

219 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

220 i‡(!
¥Ÿp
->
íabÀd_Êag
) {

223 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
) {

224 (*
¥Ÿp
->
lowîdown
)(
unô
);

226 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
) {

227 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

230 
num_≈_›í
 = 0;

231 
num_≈_up
 = 0;

232 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

233 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

235 
	`µpLökDown
(
unô
);

236 
	}
}

243 
	$lök_e°ablished
(
unô
)

245 
auth
;

246 
i
;

247 
¥Ÿít
 *
¥Ÿp
;

248 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

249 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

250 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


251 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

254 
	`AUTHDEBUG
((
LOG_INFO
, "lök_e°ablished: %d\n", 
unô
));

258 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

259 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
lowîup
 !
NULL
) {

260 (*
¥Ÿp
->
lowîup
)(
unô
);

263 i‡(
µp_£âögs
.
auth_ªquúed
 && !(
go
->
√g_ch≠
 || go->
√g_u∑p
)) {

269 i‡(!
wo
->
√g_u∑p
 || !
	`nuŒ_logö
(
unô
)) {

270 
	`AUTHDEBUG
((
LOG_WARNING
, "peerÑefusedÅoáuthenticate\n"));

271 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

276 
l˝_pha£
[
unô
] = 
PHASE_AUTHENTICATE
;

277 
auth
 = 0;

278 #i‡
CHAP_SUPPORT


279 i‡(
go
->
√g_ch≠
) {

280 
	`Ch≠AuthPìr
(
unô
, 
µp_£âögs
.
our_«me
, 
go
->
ch≠_mdty≥
);

281 
auth
 |
CHAP_PEER
;

284 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


287 #i‡
PAP_SUPPORT


288 i‡(
go
->
√g_u∑p
) {

289 
	`u∑p_auth≥î
(
unô
);

290 
auth
 |
PAP_PEER
;

293 #i‡
CHAP_SUPPORT


294 i‡(
ho
->
√g_ch≠
) {

295 
	`Ch≠AuthWôhPìr
(
unô
, 
µp_£âögs
.
u£r
, 
ho
->
ch≠_mdty≥
);

296 
auth
 |
CHAP_WITHPEER
;

299 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


302 #i‡
PAP_SUPPORT


303 i‡(
ho
->
√g_u∑p
) {

304 i‡(
µp_£âögs
.
∑sswd
[0] == 0) {

305 
∑sswd_‰om_fûe
 = 1;

306 i‡(!
	`gë_∑p_∑sswd
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
)) {

307 
	`AUTHDEBUG
((
LOG_ERR
, "No secret found for PAPÜogin\n"));

310 
	`u∑p_authwôh≥î
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
);

311 
auth
 |
PAP_WITHPEER
;

314 
auth_≥ndög
[
unô
] = 
auth
;

316 i‡(!
auth
) {

317 
	`√tw‹k_pha£
(
unô
);

319 
	}
}

325 
	$auth_≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

327 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

329 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

333 
	`l˝_˛o£
(
unô
, "Authentication failed");

334 
	}
}

337 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


342 
	$auth_≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
, *
«me
, 
«mñí
)

344 
pbô
;

346 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

347 
¥Ÿocﬁ
) {

348 
PPP_CHAP
:

349 
pbô
 = 
CHAP_PEER
;

351 
PPP_PAP
:

352 
pbô
 = 
PAP_PEER
;

355 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

362 i‡(
«mñí
 > (
≥î_auth«me
) - 1) {

363 
«mñí
 = (
≥î_auth«me
) - 1;

365 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

366 
≥î_auth«me
[
«mñí
] = 0;

372 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

373 
	`√tw‹k_pha£
(
unô
);

375 
	}
}

381 
	$auth_wôh≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

383 
îrCode
 = 
PPPERR_AUTHFAIL
;

385 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

387 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

388 i‡(
∑sswd_‰om_fûe
) {

389 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

396 
	`µpIOCé
(
unô
, 
PPPCTLS_ERRCODE
, &
îrCode
);

403 
	}
}

409 
	$auth_wôh≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

411 
pbô
;

413 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

414 
¥Ÿocﬁ
) {

415 
PPP_CHAP
:

416 
pbô
 = 
CHAP_WITHPEER
;

418 
PPP_PAP
:

419 i‡(
∑sswd_‰om_fûe
) {

420 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

422 
pbô
 = 
PAP_WITHPEER
;

425 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

426 
pbô
 = 0;

433 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

434 
	`√tw‹k_pha£
(
unô
);

436 
	}
}

444 
	$≈_up
(
unô
, 
u16_t
 
¥Ÿo
)

446 
	`LWIP_UNUSED_ARG
(
unô
);

447 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

449 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

450 i‡(
num_≈_up
 == 0) {

451 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: maxc⁄√˘=%d idÀ_time_limô=%d\n",
µp_£âögs
.
maxc⁄√˘
,µp_£âögs.
idÀ_time_limô
));

455 i‡(
µp_£âögs
.
idÀ_time_limô
 > 0) {

456 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
);

463 i‡(
µp_£âögs
.
maxc⁄√˘
 > 0) {

464 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
µp_£âögs
.
maxc⁄√˘
);

467 ++
num_≈_up
;

468 
	}
}

474 
	$≈_down
(
unô
, 
u16_t
 
¥Ÿo
)

476 
	`LWIP_UNUSED_ARG
(
unô
);

477 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

479 
	`AUTHDEBUG
((
LOG_INFO
, "≈_down: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

480 i‡(--
num_≈_up
 =0 && 
µp_£âögs
.
idÀ_time_limô
 > 0) {

481 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

483 
	}
}

489 
	$≈_föished
(
unô
, 
u16_t
 
¥Ÿo
)

491 
	`LWIP_UNUSED_ARG
(
unô
);

492 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

494 
	`AUTHDEBUG
((
LOG_INFO
, "≈_föished: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

495 i‡(--
num_≈_›í
 <= 0) {

497 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

499 
	}
}

507 
	$auth_ª£t
(
unô
)

509 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

510 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

511 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

512 
u32_t
 
ªmŸe
;

514 
	`AUTHDEBUG
((
LOG_INFO
, "auth_ª£t: %d\n", 
unô
));

515 
ao
->
√g_u∑p
 = !
µp_£âögs
.
ªfu£_∑p
 && (µp_£âögs.
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
unô
, 
NULL
, NULL));

516 
ao
->
√g_ch≠
 = !
µp_£âögs
.
ªfu£_ch≠
 &&Öµ_£âögs.
∑sswd
[0] != 0 ;

518 i‡(
go
->
√g_u∑p
 && !
	`have_∑p_£¸ë
()) {

519 
go
->
√g_u∑p
 = 0;

521 i‡(
go
->
√g_ch≠
) {

522 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

523 i‡(!
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
)) {

524 
go
->
√g_ch≠
 = 0;

527 
	}
}

529 #i‡
PAP_SUPPORT


541 
	$check_∑sswd
–
unô
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, **
msg
, *
msgÀn
)

544 
	`LWIP_UNUSED_ARG
(
unô
);

545 
	`LWIP_UNUSED_ARG
(
au£r
);

546 
	`LWIP_UNUSED_ARG
(
u£æí
);

547 
	`LWIP_UNUSED_ARG
(
≠asswd
);

548 
	`LWIP_UNUSED_ARG
(
∑sswdÀn
);

549 
	`LWIP_UNUSED_ARG
(
msgÀn
);

550 *
msg
 = (*) 0;

551  
UPAP_AUTHACK
;

553 
ªt
 = 0;

554 
w‹dli°
 *
addrs
 = 
NULL
;

555 
∑sswd
[256], 
u£r
[256];

556 
£¸ë
[
MAXWORDLEN
];

557 
u_sh‹t
 
©ãm±s
 = 0;

562 
	`BCOPY
(
≠asswd
, 
∑sswd
, 
∑sswdÀn
);

563 
∑sswd
[
∑sswdÀn
] = '\0';

564 
	`BCOPY
(
au£r
, 
u£r
, 
u£æí
);

565 
u£r
[
u£æí
] = '\0';

566 *
msg
 = (*) 0;

569 
ªt
 = 
UPAP_AUTHACK
;

571 i‡(
ªt
 =
UPAP_AUTHNAK
) {

572 i‡(*
msg
 == (*) 0) {

573 *
msg
 = "Login incorrect";

575 *
msgÀn
 = 
	`°æí
(*
msg
);

581 i‡(
©ãm±s
++ >= 10) {

582 
	`AUTHDEBUG
((
LOG_WARNING
, "%d LOGIN FAILURES BY %s\n", 
©ãm±s
, 
u£r
));

585 i‡(
©ãm±s
 > 3) {

586 
	`sys_m¶ìp
((
©ãm±s
 - 3) * 5);

588 i‡(
addrs
 !
NULL
) {

589 
	`‰ì_w‹dli°
(
addrs
);

592 
©ãm±s
 = 0;

593 i‡(*
msg
 == (*) 0) {

594 *
msg
 = "Login ok";

596 *
msgÀn
 = 
	`°æí
(*
msg
);

597 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

600 
	`BZERO
(
∑sswd
, (passwd));

601 
	`BZERO
(
£¸ë
, (secret));

603  
ªt
;

605 
	}
}

614 
	$auth_ù_addr
(
unô
, 
u32_t
 
addr
)

616  
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

617 
	}
}

625 
	$bad_ù_adrs
(
u32_t
 
addr
)

627 
addr
 = 
	`¡ohl
(addr);

628  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


629 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

630 
	}
}

633 #i‡
CHAP_SUPPORT


639 
	$gë_£¸ë
–
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
ßve_addrs
)

642 
Àn
;

643 
w‹dli°
 *
addrs
;

645 
	`LWIP_UNUSED_ARG
(
unô
);

646 
	`LWIP_UNUSED_ARG
(
£rvî
);

647 
	`LWIP_UNUSED_ARG
(
ßve_addrs
);

649 
addrs
 = 
NULL
;

651 if(!
˛õ¡
 || !˛õ¡[0] || 
	`°rcmp
(˛õ¡, 
µp_£âögs
.
u£r
)) {

655 
Àn
 = 
	`°æí
(
µp_£âögs
.
∑sswd
);

656 i‡(
Àn
 > 
MAXSECRETLEN
) {

657 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

658 
Àn
 = 
MAXSECRETLEN
;

661 
	`BCOPY
(
µp_£âögs
.
∑sswd
, 
£¸ë
, 
Àn
);

662 *
£¸ë_Àn
 = 
Àn
;

666 
ªt
 = 0, 
Àn
;

667 
w‹dli°
 *
addrs
;

668 
£cbuf
[
MAXWORDLEN
];

670 
addrs
 = 
NULL
;

671 
£cbuf
[0] = 0;

674 i‡(
ªt
 < 0) {

678 i‡(
ßve_addrs
) {

679 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

682 
Àn
 = 
	`°æí
(
£cbuf
);

683 i‡(
Àn
 > 
MAXSECRETLEN
) {

684 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

685 
Àn
 = 
MAXSECRETLEN
;

688 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

689 
	`BZERO
(
£cbuf
, (secbuf));

690 *
£¸ë_Àn
 = 
Àn
;

694 
	}
}

703 
	$auth_check_›ti⁄s
()

705 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

706 
ˇn_auth
;

707 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

708 
u32_t
 
ªmŸe
;

711 i‡(
µp_£âögs
.
our_«me
[0] =0 ||Öµ_£âögs.
u£ho°«me
) {

712 
	`°r˝y
(
µp_£âögs
.
our_«me
,Öµ_£âögs.
ho°«me
);

715 i‡(
µp_£âögs
.
u£r
[0] == 0) {

716 
	`°r˝y
(
µp_£âögs
.
u£r
,Öµ_£âögs.
our_«me
);

720 i‡(
µp_£âögs
.
auth_ªquúed
 && !
wo
->
√g_ch≠
 && !wo->
√g_u∑p
) {

721 
wo
->
√g_ch≠
 = 1;

722 
wo
->
√g_u∑p
 = 1;

729 
ˇn_auth
 = 
wo
->
√g_u∑p
 && 
	`have_∑p_£¸ë
();

730 i‡(!
ˇn_auth
 && 
wo
->
√g_ch≠
) {

731 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

732 
ˇn_auth
 = 
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
);

735 i‡(
µp_£âögs
.
auth_ªquúed
 && !
ˇn_auth
) {

736 
	`µp_∑nic
("Noáuth secret");

738 
	}
}

749 
	$√tw‹k_pha£
(
unô
)

751 
i
;

752 
¥Ÿít
 *
¥Ÿp
;

753 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

758 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
Ë&& !
did_authup
) {

760 
did_authup
 = 1;

763 #i‡
CBCP_SUPPORT


767 i‡(
go
->
√g_cb˝
) {

768 
l˝_pha£
[
unô
] = 
PHASE_CALLBACK
;

769 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

774 
l˝_pha£
[
unô
] = 
PHASE_NETWORK
;

775 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

776 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

777 (*
¥Ÿp
->
›í
)(
unô
);

778 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
) {

779 ++
num_≈_›í
;

784 i‡(
num_≈_›í
 == 0) {

786 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

788 
	}
}

795 
	$check_idÀ
(*
¨g
)

797 
µp_idÀ
 
idÀ
;

798 
u_sh‹t
 
ôime
;

800 
	`LWIP_UNUSED_ARG
(
¨g
);

801 i‡(!
	`gë_idÀ_time
(0, &
idÀ
)) {

804 
ôime
 = 
	`LWIP_MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

805 i‡(
ôime
 >
µp_£âögs
.
idÀ_time_limô
) {

807 
	`AUTHDEBUG
((
LOG_INFO
, "Terminating connection dueÅoÜack ofáctivity.\n"));

808 
	`l˝_˛o£
(0, "Link inactive");

810 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
 - 
ôime
);

812 
	}
}

818 
	$c⁄√˘_time_expúed
(*
¨g
)

820 
	`LWIP_UNUSED_ARG
(
¨g
);

822 
	`AUTHDEBUG
((
LOG_INFO
, "ConnectÅimeÉxpired\n"));

823 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

824 
	}
}

837 
	$logö
(*
u£r
, *
∑sswd
, **
msg
, *
msgÀn
)

840  (
UPAP_AUTHNAK
);

841 
	}
}

848 
	$logout
()

850 
logged_ö
 = 0;

851 
	}
}

859 
	$nuŒ_logö
(
unô
)

861 
	`LWIP_UNUSED_ARG
(
unô
);

864 
	}
}

872 
	$gë_∑p_∑sswd
(
unô
, *
u£r
, *
∑sswd
)

874 
	`LWIP_UNUSED_ARG
(
unô
);

880 if(
u£r
) {

881 
	`°r˝y
(
u£r
, "none");

883 if(
∑sswd
) {

884 
	`°r˝y
(
∑sswd
, "none");

887 
	}
}

894 
	$have_∑p_£¸ë
()

898 
	}
}

907 
	$have_ch≠_£¸ë
(*
˛õ¡
, *
£rvî
, 
u32_t
 
ªmŸe
)

909 
	`LWIP_UNUSED_ARG
(
˛õ¡
);

910 
	`LWIP_UNUSED_ARG
(
£rvî
);

911 
	`LWIP_UNUSED_ARG
(
ªmŸe
);

914 
	}
}

921 
	$£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
)

923 i‡(
addªs£s
[
unô
] !
NULL
) {

924 
	`‰ì_w‹dli°
(
addªs£s
[
unô
]);

926 
addªs£s
[
unô
] = 
addrs
;

933 i‡(
addrs
 !
NULL
 &&áddrs->
√xt
 == NULL) {

934 *
p
 = 
addrs
->
w‹d
;

935 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

936 
u32_t
 
a
;

937 
ho°ít
 *
hp
;

939 i‡(
wo
->
hißddr
 =0 && *
p
 !'!' && *∞!'-' && 
	`°rchr
’, '/'Ë=
NULL
) {

940 
hp
 = 
	`gëho°by«me
(
p
);

941 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

942 
a
 = *(
u32_t
 *)
hp
->
h_addr
;

944 
a
 = 
	`öë_addr
(
p
);

946 i‡(
a
 !(
u32_t
) -1) {

947 
wo
->
hißddr
 = 
a
;

952 
	}
}

956 
	$ù_addr_check
(
u32_t
 
addr
, 
w‹dli°
 *
addrs
)

959 i‡(
	`bad_ù_adrs
(
addr
)) {

963 i‡(
addrs
 =
NULL
) {

964  !
µp_£âögs
.
auth_ªquúed
;

969 
	}
}

976 
	$‰ì_w‹dli°
(
w‹dli°
 *
wp
)

978 
w‹dli°
 *
√xt
;

980 
wp
 !
NULL
) {

981 
√xt
 = 
wp
->next;

982 
	`‰ì
(
wp
);

983 
wp
 = 
√xt
;

985 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/auth.h

53 #i‚de‡
AUTH_H


54 
	#AUTH_H


	)

61 
lök_ªquúed
 ();

64 
lök_ãrmö©ed
 ();

67 
lök_down
 ();

70 
lök_e°ablished
 ();

73 
≈_up
 (, 
u16_t
);

76 
≈_down
 (, 
u16_t
);

79 
≈_föished
 (, 
u16_t
);

82 
auth_≥î_Áû
 (, 
u16_t
);

85 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

88 
auth_wôh≥î_Áû
 (, 
u16_t
);

91 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

94 
auth_check_›ti⁄s
 ();

97 
auth_ª£t
 ();

100 
check_∑sswd
 (, *, , *, , **, *);

103 
gë_£¸ë
 (, *, *, *, *, );

106 
auth_ù_addr
 (, 
u32_t
);

109 
bad_ù_adrs
 (
u32_t
);

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chap.c

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
CHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"magic.h
"

79 
	~"øndm.h
"

80 
	~"auth.h
"

81 
	~"md5.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

102 
Ch≠Inô
 ();

103 
Ch≠LowîUp
 ();

104 
Ch≠LowîDown
 ();

105 
Ch≠I≈ut
 (, 
u_ch¨
 *, );

106 
Ch≠PrŸocﬁReje˘
 ();

108 
Ch≠PrötPkt
 (
u_ch¨
 *, , (*) (*, *, ...), *);

111 
	`Ch≠ChÆÀngeTimeout
 (*);

112 
	`Ch≠Re•⁄£Timeout
 (*);

113 
	`Ch≠Re˚iveChÆÀnge
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

114 
	`Ch≠RechÆÀnge
 (*);

115 
	`Ch≠Re˚iveRe•⁄£
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

116 
	`Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

117 
	`Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

118 
	`Ch≠SídSètus
 (
ch≠_°©e
 *, );

119 
	`Ch≠SídChÆÀnge
 (
ch≠_°©e
 *);

120 
	`Ch≠SídRe•⁄£
 (
ch≠_°©e
 *);

121 
	`Ch≠GíChÆÀnge
 (
ch≠_°©e
 *);

127 
ch≠_°©e
 
ch≠
[
NUM_PPP
];

129 
¥Ÿít
 
ch≠_¥Ÿít
 = {

130 
PPP_CHAP
,

131 
Ch≠Inô
,

132 
Ch≠I≈ut
,

133 
Ch≠PrŸocﬁReje˘
,

134 
Ch≠LowîUp
,

135 
Ch≠LowîDown
,

136 
NULL
,

137 
NULL
,

139 
Ch≠PrötPkt
,

140 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL


149 
	}
};

160 
	$Ch≠AuthWôhPìr
(
unô
, *
our_«me
, 
dige°
)

162 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

164 
c°©e
->
ª•_«me
 = 
our_«me
;

165 
c°©e
->
ª•_ty≥
 = 
dige°
;

167 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
 ||

168 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

170 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_PENDING
;

179 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

180 
	}
}

187 
	$Ch≠AuthPìr
(
unô
, *
our_«me
, 
dige°
)

189 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

191 
c°©e
->
chÆ_«me
 = 
our_«me
;

192 
c°©e
->
chÆ_ty≥
 = 
dige°
;

194 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
 ||

195 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

197 
c°©e
->
£rvî°©e
 = 
CHAPSS_PENDING
;

201 
	`Ch≠GíChÆÀnge
(
c°©e
);

202 
	`Ch≠SídChÆÀnge
(
c°©e
);

203 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

204 
	}
}

214 
	$Ch≠Inô
(
unô
)

216 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

218 
	`BZERO
(
c°©e
, (*cstate));

219 
c°©e
->
unô
 = unit;

220 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

221 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

222 
c°©e
->
timeouâime
 = 
CHAP_DEFTIMEOUT
;

223 
c°©e
->
max_å™smôs
 = 
CHAP_DEFTRANSMITS
;

225 
	}
}

232 
	$Ch≠ChÆÀngeTimeout
(*
¨g
)

234 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

238 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL_CHAL
 &&

239 
c°©e
->
£rvî°©e
 !
CHAPSS_RECHALLENGE
) {

243 i‡(
c°©e
->
chÆ_å™smôs
 >c°©e->
max_å™smôs
) {

245 
	`CHAPDEBUG
((
LOG_ERR
, "Peer failedÅoÑespondÅo CHAP challenge\n"));

246 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

247 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

251 
	`Ch≠SídChÆÀnge
(
c°©e
);

252 
	}
}

259 
	$Ch≠Re•⁄£Timeout
(*
¨g
)

261 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

264 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

268 
	`Ch≠SídRe•⁄£
(
c°©e
);

269 
	}
}

276 
	$Ch≠RechÆÀnge
(*
¨g
)

278 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

281 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_OPEN
) {

285 
	`Ch≠GíChÆÀnge
(
c°©e
);

286 
	`Ch≠SídChÆÀnge
(
c°©e
);

287 
c°©e
->
£rvî°©e
 = 
CHAPSS_RECHALLENGE
;

288 
	}
}

297 
	$Ch≠LowîUp
(
unô
)

299 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

301 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
) {

302 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_CLOSED
;

303 } i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

304 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

307 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
) {

308 
c°©e
->
£rvî°©e
 = 
CHAPSS_CLOSED
;

309 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

310 
	`Ch≠GíChÆÀnge
(
c°©e
);

311 
	`Ch≠SídChÆÀnge
(
c°©e
);

312 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

314 
	}
}

323 
	$Ch≠LowîDown
(
unô
)

325 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

328 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL_CHAL
 ||

329 
c°©e
->
£rvî°©e
 =
CHAPSS_RECHALLENGE
) {

330 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

331 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN


332 && 
c°©e
->
chÆ_öãrvÆ
 != 0) {

333 
	`UNTIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
);

335 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

336 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

338 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

339 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

340 
	}
}

347 
	$Ch≠PrŸocﬁReje˘
(
unô
)

349 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

351 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL
 &&

352 
c°©e
->
£rvî°©e
 !
CHAPSS_CLOSED
) {

353 
	`auth_≥î_Áû
(
unô
, 
PPP_CHAP
);

355 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_INITIAL
 &&

356 
c°©e
->
˛õ¡°©e
 !
CHAPCS_CLOSED
) {

357 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_CHAP
);

359 
	`Ch≠LowîDown
(
unô
);

360 
	}
}

367 
	$Ch≠I≈ut
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
∑ckë_Àn
)

369 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

370 
u_ch¨
 *
öp
;

371 
u_ch¨
 
code
, 
id
;

372 
Àn
;

378 
öp
 = 
ö∑ckë
;

379 i‡(
∑ckë_Àn
 < 
CHAP_HEADERLEN
) {

380 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd short header.\n"));

383 
	`GETCHAR
(
code
, 
öp
);

384 
	`GETCHAR
(
id
, 
öp
);

385 
	`GETSHORT
(
Àn
, 
öp
);

386 i‡(
Àn
 < 
CHAP_HEADERLEN
) {

387 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd illegalÜength.\n"));

390 i‡(
Àn
 > 
∑ckë_Àn
) {

391 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd shortÖacket.\n"));

394 
Àn
 -
CHAP_HEADERLEN
;

399 
code
) {

400 
CHAP_CHALLENGE
:

401 
	`Ch≠Re˚iveChÆÀnge
(
c°©e
, 
öp
, 
id
, 
Àn
);

404 
CHAP_RESPONSE
:

405 
	`Ch≠Re˚iveRe•⁄£
(
c°©e
, 
öp
, 
id
, 
Àn
);

408 
CHAP_FAILURE
:

409 
	`Ch≠Re˚iveFaûuª
(
c°©e
, 
öp
, 
id
, 
Àn
);

412 
CHAP_SUCCESS
:

413 
	`Ch≠Re˚iveSuc˚ss
(
c°©e
, 
öp
, 
id
, 
Àn
);

417 
	`CHAPDEBUG
((
LOG_WARNING
, "Unknow¿CHAP codê(%dËª˚ived.\n", 
code
));

420 
	}
}

427 
	$Ch≠Re˚iveChÆÀnge
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

429 
rchÆÀnge_Àn
;

430 
u_ch¨
 *
rchÆÀnge
;

431 
£¸ë_Àn
;

432 
£¸ë
[
MAXSECRETLEN
];

433 
rho°«me
[256];

434 
MD5_CTX
 
mdC⁄ãxt
;

435 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

437 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: Rcvd id %d.\n", 
id
));

438 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_CLOSED
 ||

439 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

440 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge: in state %d\n",

441 
c°©e
->
˛õ¡°©e
));

445 i‡(
Àn
 < 2) {

446 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

450 
	`GETCHAR
(
rchÆÀnge_Àn
, 
öp
);

451 
Àn
 - (
u_ch¨
Ë+ 
rchÆÀnge_Àn
;

452 i‡(
Àn
 < 0) {

453 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

456 
rchÆÀnge
 = 
öp
;

457 
	`INCPTR
(
rchÆÀnge_Àn
, 
öp
);

459 i‡(
Àn
 >(
rho°«me
)) {

460 
Àn
 = (
rho°«me
) - 1;

462 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

463 
rho°«me
[
Àn
] = '\000';

465 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge:Ñe˚ivedÇamêfõld '%s'\n", 
rho°«me
));

468 i‡(
µp_£âögs
.
ªmŸe_«me
[0] !0 && (µp_£âögs.
ex∂icô_ªmŸe
 || 
rho°«me
[0] == 0)) {

469 
	`°∫˝y
(
rho°«me
, 
µp_£âögs
.
ªmŸe_«me
, (rhostname));

470 
rho°«me
[(rhostname) - 1] = 0;

471 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: usög '%s'á†ªmŸê«me\n", 
rho°«me
));

475 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, c°©e->
ª•_«me
, 
rho°«me
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

476 
£¸ë_Àn
 = 0;

477 
	`CHAPDEBUG
((
LOG_WARNING
, "NÿCHAP se¸ë found f‹áuthítiˇtög u†tÿ%s\n", 
rho°«me
));

481 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

482 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

485 
c°©e
->
ª•_id
 = 
id
;

486 
c°©e
->
ª•_å™smôs
 = 0;

489 
c°©e
->
ª•_ty≥
) {

491 
CHAP_DIGEST_MD5
:

492 
	`MD5Inô
(&
mdC⁄ãxt
);

493 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
ª•_id
, 1);

494 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

495 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
rchÆÀnge
, 
rchÆÀnge_Àn
);

496 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

497 
	`BCOPY
(
hash
, 
c°©e
->
ª•⁄£
, 
MD5_SIGNATURE_SIZE
);

498 
c°©e
->
ª•_Àngth
 = 
MD5_SIGNATURE_SIZE
;

501 #ifde‡
CHAPMS


502 
CHAP_MICROSOFT
:

503 
	`Ch≠MS
(
c°©e
, 
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
);

508 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
ª•_ty≥
));

512 
	`BZERO
(
£¸ë
, (secret));

513 
	`Ch≠SídRe•⁄£
(
c°©e
);

514 
	}
}

521 
	$Ch≠Re˚iveRe•⁄£
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

523 
u_ch¨
 *
ªmmd
, 
ªmmd_Àn
;

524 
£¸ë_Àn
, 
ﬁd_°©e
;

525 
code
;

526 
rho°«me
[256];

527 
MD5_CTX
 
mdC⁄ãxt
;

528 
£¸ë
[
MAXSECRETLEN
];

529 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

531 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£: Rcvd id %d.\n", 
id
));

533 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_CLOSED
 ||

534 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

535 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse: in state %d\n",

536 
c°©e
->
£rvî°©e
));

540 i‡(
id
 !
c°©e
->
chÆ_id
) {

549 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN
) {

550 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_SUCCESS
);

553 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_BADAUTH
) {

554 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_FAILURE
);

558 i‡(
Àn
 < 2) {

559 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

562 
	`GETCHAR
(
ªmmd_Àn
, 
öp
);

563 
ªmmd
 = 
öp
;

564 
	`INCPTR
(
ªmmd_Àn
, 
öp
);

566 
Àn
 - (
u_ch¨
Ë+ 
ªmmd_Àn
;

567 i‡(
Àn
 < 0) {

568 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

572 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

574 i‡(
Àn
 >(
rho°«me
)) {

575 
Àn
 = (
rho°«me
) - 1;

577 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

578 
rho°«me
[
Àn
] = '\000';

580 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£:Ñe˚ivedÇamêfõld: %s\n", 
rho°«me
));

586 
code
 = 
CHAP_FAILURE
;

587 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, 
rho°«me
, c°©e->
chÆ_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

589 
	`CHAPDEBUG
((
LOG_WARNING
, "No CHAP secret found foráuthenticating %s\n",

590 
rho°«me
));

593 
c°©e
->
chÆ_ty≥
) {

595 
CHAP_DIGEST_MD5
:

596 i‡(
ªmmd_Àn
 !
MD5_SIGNATURE_SIZE
) {

599 
	`MD5Inô
(&
mdC⁄ãxt
);

600 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
chÆ_id
, 1);

601 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

602 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
c°©e
->
chÆÀnge
, c°©e->
chÆ_Àn
);

603 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

606 i‡(
	`memcmp
 (
hash
, 
ªmmd
, 
MD5_SIGNATURE_SIZE
) == 0) {

607 
code
 = 
CHAP_SUCCESS
;

612 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
chÆ_ty≥
));

616 
	`BZERO
(
£¸ë
, (secret));

617 
	`Ch≠SídSètus
(
c°©e
, 
code
);

619 i‡(
code
 =
CHAP_SUCCESS
) {

620 
ﬁd_°©e
 = 
c°©e
->
£rvî°©e
;

621 
c°©e
->
£rvî°©e
 = 
CHAPSS_OPEN
;

622 i‡(
ﬁd_°©e
 =
CHAPSS_INITIAL_CHAL
) {

623 
	`auth_≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
, 
rho°«me
, 
Àn
);

625 i‡(
c°©e
->
chÆ_öãrvÆ
 != 0) {

626 
	`TIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
, c°©e->
chÆ_öãrvÆ
);

629 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPÖeeráuthentication failed\n"));

630 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

631 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

633 
	}
}

639 
	$Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

641 
	`LWIP_UNUSED_ARG
(
id
);

642 
	`LWIP_UNUSED_ARG
(
öp
);

644 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: Rcvd id %d.\n", 
id
));

646 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_OPEN
) {

651 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

653 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

657 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

662 i‡(
Àn
 > 0) {

663 
	`PRINTMSG
(
öp
, 
Àn
);

666 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_OPEN
;

668 
	`auth_wôh≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
);

669 
	}
}

676 
	$Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

678 
	`LWIP_UNUSED_ARG
(
id
);

679 
	`LWIP_UNUSED_ARG
(
öp
);

681 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: Rcvd id %d.\n", 
id
));

683 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

685 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

689 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

694 i‡(
Àn
 > 0) {

695 
	`PRINTMSG
(
öp
, 
Àn
);

698 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPáuthentication failed\n"));

699 
	`auth_wôh≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

700 
	}
}

707 
	$Ch≠SídChÆÀnge
(
ch≠_°©e
 *
c°©e
)

709 
u_ch¨
 *
ouç
;

710 
chÆ_Àn
, 
«me_Àn
;

711 
ouéí
;

713 
chÆ_Àn
 = 
c°©e
->chal_len;

714 
«me_Àn
 = 
	`°æí
(
c°©e
->
chÆ_«me
);

715 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
chÆ_Àn
 + 
«me_Àn
;

716 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

718 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

720 
	`PUTCHAR
(
CHAP_CHALLENGE
, 
ouç
);

721 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

722 
	`PUTSHORT
(
ouéí
, 
ouç
);

724 
	`PUTCHAR
(
chÆ_Àn
, 
ouç
);

725 
	`BCOPY
(
c°©e
->
chÆÀnge
, 
ouç
, 
chÆ_Àn
);

726 
	`INCPTR
(
chÆ_Àn
, 
ouç
);

728 
	`BCOPY
(
c°©e
->
chÆ_«me
, 
ouç
, 
«me_Àn
);

730 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

732 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídChÆÀnge: Síàid %d.\n", 
c°©e
->
chÆ_id
));

734 
	`TIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
, c°©e->
timeouâime
);

735 ++
c°©e
->
chÆ_å™smôs
;

736 
	}
}

743 
	$Ch≠SídSètus
(
ch≠_°©e
 *
c°©e
, 
code
)

745 
u_ch¨
 *
ouç
;

746 
ouéí
, 
msgÀn
;

747 
msg
[256];

749 i‡(
code
 =
CHAP_SUCCESS
) {

750 
	`°r˝y
(
msg
, "Welcome!");

752 
	`°r˝y
(
msg
, "I don'tÜike you. Go 'way.");

754 
msgÀn
 = 
	`°æí
(
msg
);

756 
ouéí
 = 
CHAP_HEADERLEN
 + 
msgÀn
;

757 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

759 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

761 
	`PUTCHAR
(
code
, 
ouç
);

762 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

763 
	`PUTSHORT
(
ouéí
, 
ouç
);

764 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

765 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

767 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídSètus: Síàcodê%d, id %d.\n", 
code
, 
c°©e
->
chÆ_id
));

768 
	}
}

778 
	$Ch≠GíChÆÀnge
(
ch≠_°©e
 *
c°©e
)

780 
chÆ_Àn
;

781 
u_ch¨
 *
±r
 = 
c°©e
->
chÆÀnge
;

782 
i
;

786 
chÆ_Àn
 = ()

787 ((((
	`magic
() >> 16) *

788 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) >> 16)

789 + 
MIN_CHALLENGE_LENGTH
);

790 
c°©e
->
chÆ_Àn
 = chal_len;

791 
c°©e
->
chÆ_id
 = ++c°©e->
id
;

792 
c°©e
->
chÆ_å™smôs
 = 0;

795 
i
 = 0; i < 
chÆ_Àn
; i++ ) {

796 *
±r
++ = (Ë(
	`magic
() & 0xff);

798 
	}
}

806 
	$Ch≠SídRe•⁄£
(
ch≠_°©e
 *
c°©e
)

808 
u_ch¨
 *
ouç
;

809 
ouéí
, 
md_Àn
, 
«me_Àn
;

811 
md_Àn
 = 
c°©e
->
ª•_Àngth
;

812 
«me_Àn
 = 
	`°æí
(
c°©e
->
ª•_«me
);

813 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
md_Àn
 + 
«me_Àn
;

814 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

816 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

818 
	`PUTCHAR
(
CHAP_RESPONSE
, 
ouç
);

819 
	`PUTCHAR
(
c°©e
->
ª•_id
, 
ouç
);

820 
	`PUTSHORT
(
ouéí
, 
ouç
);

822 
	`PUTCHAR
(
md_Àn
, 
ouç
);

823 
	`BCOPY
(
c°©e
->
ª•⁄£
, 
ouç
, 
md_Àn
);

824 
	`INCPTR
(
md_Àn
, 
ouç
);

826 
	`BCOPY
(
c°©e
->
ª•_«me
, 
ouç
, 
«me_Àn
);

829 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

831 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_RESPONSE
;

832 
	`TIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
, c°©e->
timeouâime
);

833 ++
c°©e
->
ª•_å™smôs
;

834 
	}
}

837 *
	gCh≠Codíames
[] = {

844 
	$Ch≠PrötPkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

846 
code
, 
id
, 
Àn
;

847 
˛í
, 
∆í
;

848 
u_ch¨
 
x
;

850 i‡(
∂í
 < 
CHAP_HEADERLEN
) {

853 
	`GETCHAR
(
code
, 
p
);

854 
	`GETCHAR
(
id
, 
p
);

855 
	`GETSHORT
(
Àn
, 
p
);

856 i‡(
Àn
 < 
CHAP_HEADERLEN
 ||Üí > 
∂í
) {

859 i‡(
code
 >1 && codê<(
Ch≠Codíames
) / (*)) {

860 
	`¥öãr
(
¨g
, " %s", 
Ch≠Codíames
[
code
-1]);

862 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

864 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

865 
Àn
 -
CHAP_HEADERLEN
;

866 
code
) {

867 
CHAP_CHALLENGE
:

868 
CHAP_RESPONSE
:

869 i‡(
Àn
 < 1) {

872 
˛í
 = 
p
[0];

873 i‡(
Àn
 < 
˛í
 + 1) {

876 ++
p
;

877 
∆í
 = 
Àn
 - 
˛í
 - 1;

878 
	`¥öãr
(
¨g
, " <");

879 ; 
˛í
 > 0; --clen) {

880 
	`GETCHAR
(
x
, 
p
);

881 
	`¥öãr
(
¨g
, "%.2x", 
x
);

883 
	`¥öãr
(
¨g
, ">,Çamê%.*Z", 
∆í
, 
p
);

885 
CHAP_FAILURE
:

886 
CHAP_SUCCESS
:

887 
	`¥öãr
(
¨g
, " %.*Z", 
Àn
, 
p
);

890 
˛í
 = 
Àn
; clen > 0; --clen) {

891 
	`GETCHAR
(
x
, 
p
);

892 
	`¥öãr
(
¨g
, " %.2x", 
x
);

896  
Àn
 + 
CHAP_HEADERLEN
;

897 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chap.h

68 #i‚de‡
CHAP_H


69 
	#CHAP_H


	)

76 
	#CHAP_HEADERLEN
 4

	)

82 
	#CHAP_DIGEST_MD5
 5

	)

83 
	#MD5_SIGNATURE_SIZE
 16

	)

84 
	#CHAP_MICROSOFT
 0x80

	)

85 
	#MS_CHAP_RESPONSE_LEN
 49

	)

87 
	#CHAP_CHALLENGE
 1

	)

88 
	#CHAP_RESPONSE
 2

	)

89 
	#CHAP_SUCCESS
 3

	)

90 
	#CHAP_FAILURE
 4

	)

95 
	#MIN_CHALLENGE_LENGTH
 32

	)

96 
	#MAX_CHALLENGE_LENGTH
 64

	)

97 
	#MAX_RESPONSE_LENGTH
 64

	)

102 
	#CHAPCS_INITIAL
 0

	)

103 
	#CHAPCS_CLOSED
 1

	)

104 
	#CHAPCS_PENDING
 2

	)

105 
	#CHAPCS_LISTEN
 3

	)

106 
	#CHAPCS_RESPONSE
 4

	)

107 
	#CHAPCS_OPEN
 5

	)

112 
	#CHAPSS_INITIAL
 0

	)

113 
	#CHAPSS_CLOSED
 1

	)

114 
	#CHAPSS_PENDING
 2

	)

115 
	#CHAPSS_INITIAL_CHAL
 3

	)

116 
	#CHAPSS_OPEN
 4

	)

117 
	#CHAPSS_RECHALLENGE
 5

	)

118 
	#CHAPSS_BADAUTH
 6

	)

128 
	sch≠_°©e
 {

129 
	munô
;

130 
	m˛õ¡°©e
;

131 
	m£rvî°©e
;

132 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

133 
u_ch¨
 
	mchÆ_Àn
;

134 
u_ch¨
 
	mchÆ_id
;

135 
u_ch¨
 
	mchÆ_ty≥
;

136 
u_ch¨
 
	mid
;

137 *
	mchÆ_«me
;

138 
	mchÆ_öãrvÆ
;

139 
	mtimeouâime
;

140 
	mmax_å™smôs
;

141 
	mchÆ_å™smôs
;

142 
	mª•_å™smôs
;

143 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

144 
u_ch¨
 
	mª•_Àngth
;

145 
u_ch¨
 
	mª•_id
;

146 
u_ch¨
 
	mª•_ty≥
;

147 *
	mª•_«me
;

148 } 
	tch≠_°©e
;

154 
ch≠_°©e
 
ch≠
[];

156 
¥Ÿít
 
ch≠_¥Ÿít
;

163 
Ch≠AuthWôhPìr
 (, *, );

164 
Ch≠AuthPìr
 (, *, );

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chpms.c

67 
	#USE_CRYPT


	)

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
MSCHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"md4.h
"

79 #i‚de‡
USE_CRYPT


80 
	~"des.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

95 
u_ch¨
 
	mLANM™Re•
[24];

96 
u_ch¨
 
	mNTRe•
[24];

97 
u_ch¨
 
	mU£NT
;

98 } 
	tMS_Ch≠Re•⁄£
;

109 
£tkey
(const *);

110 
í¸y±
(*, );

112 
DesEn¸y±
 (
u_ch¨
 *, u_char *, u_char *);

113 
MakeKey
 (
u_ch¨
 *, u_char *);

115 #ifde‡
USE_CRYPT


116 
Ex∑nd
 (
u_ch¨
 *, u_char *);

117 
Cﬁœp£
 (
u_ch¨
 *, u_char *);

120 
ChÆÀngeRe•⁄£
(

121 
u_ch¨
 *
chÆÀnge
,

122 
u_ch¨
 *
pwHash
,

123 
u_ch¨
 *
ª•⁄£


125 
Ch≠MS_NT
(

126 *
rchÆÀnge
,

127 
rchÆÀnge_Àn
,

128 *
£¸ë
,

129 
£¸ë_Àn
,

130 
MS_Ch≠Re•⁄£
 *
ª•⁄£


132 
u_ch¨
 
Gë7Bôs
(

133 
u_ch¨
 *
öput
,

134 
°¨tBô


142 
	$Ch≠MS
–
ch≠_°©e
 *
c°©e
, *
rchÆÀnge
, 
rchÆÀnge_Àn
, *
£¸ë
, 
£¸ë_Àn
)

144 
MS_Ch≠Re•⁄£
 
ª•⁄£
;

145 #ifde‡
MSLANMAN


146 
ms_œnm™
;

150 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠MS: se¸ë i†'%.*s'\n", 
£¸ë_Àn
, 
£¸ë
));

152 
	`BZERO
(&
ª•⁄£
, (response));

155 
	`Ch≠MS_NT
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

157 #ifde‡
MSLANMAN


158 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

161 
ª•⁄£
.
U£NT
 = !
ms_œnm™
;

163 
ª•⁄£
.
U£NT
 = 1;

166 
	`BCOPY
(&
ª•⁄£
, 
c°©e
->ª•⁄£, 
MS_CHAP_RESPONSE_LEN
);

167 
c°©e
->
ª•_Àngth
 = 
MS_CHAP_RESPONSE_LEN
;

168 
	}
}

175 
	$ChÆÀngeRe•⁄£
–
u_ch¨
 *
chÆÀnge
,

176 
u_ch¨
 *
pwHash
,

177 
u_ch¨
 *
ª•⁄£
 )

179 
ZPassw‹dHash
[21];

181 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

182 
	`BCOPY
(
pwHash
, 
ZPassw‹dHash
, 16);

185 
	`log_∑ckë
(
ZPassw‹dHash
, (ZPassw‹dHash), "ChÆÀngeRe•⁄£ - ZPassw‹dHash", 
LOG_DEBUG
);

188 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 0, 
ª•⁄£
 + 0);

189 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 7, 
ª•⁄£
 + 8);

190 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 14, 
ª•⁄£
 + 16);

193 
	`log_∑ckë
(
ª•⁄£
, 24, "ChÆÀngeRe•⁄£ -Ñe•⁄£", 
LOG_DEBUG
);

195 
	}
}

198 #ifde‡
USE_CRYPT


200 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

201 
u_ch¨
 *
key
,

202 
u_ch¨
 *
cùhî
 )

204 
u_ch¨
 
des_key
[8];

205 
u_ch¨
 
¸y±_key
[66];

206 
u_ch¨
 
des_öput
[66];

208 
	`MakeKey
(
key
, 
des_key
);

210 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

211 
	`£tkey
(
¸y±_key
);

214 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

215 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

218 
	`Ex∑nd
(
˛ór
, 
des_öput
);

219 
	`í¸y±
(
des_öput
, 0);

220 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

223 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

224 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

226 
	}
}

231 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

232 
u_ch¨
 *
key
,

233 
u_ch¨
 *
cùhî
 )

235 
des_cblock
 
des_key
;

236 
des_key_scheduÀ
 
key_scheduÀ
;

238 
	`MakeKey
(
key
, 
des_key
);

240 
	`des_£t_key
(&
des_key
, 
key_scheduÀ
);

243 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

244 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

247 
	`des_ecb_í¸y±
((
des_cblock
 *)
˛ór
, (des_cblock *)
cùhî
, 
key_scheduÀ
, 1);

250 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

251 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

253 
	}
}

258 
u_ch¨


259 
	$Gë7Bôs
–
u_ch¨
 *
öput
, 
°¨tBô
)

261 
w‹d
;

263 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

264 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

266 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

268  
w‹d
 & 0xFE;

269 
	}
}

271 #ifde‡
USE_CRYPT


278 
	$Ex∑nd
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

280 
j
, 
c
;

281 
i
;

283 
i
 = 0; i < 64; 
ö
++){

284 
c
 = *
ö
;

285 
j
 = 7; j >= 0; j--) {

286 *
out
++ = (
c
 >> 
j
) & 01;

288 
i
 += 8;

290 
	}
}

295 
	$Cﬁœp£
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

297 
j
;

298 
i
;

299 
c
;

301 
i
 = 0; i < 64; i +8, 
out
++) {

302 
c
 = 0;

303 
j
 = 7; j >0; j--, 
ö
++) {

304 
c
 |*
ö
 << 
j
;

306 *
out
 = 
c
 & 0xff;

308 
	}
}

312 
	$MakeKey
–
u_ch¨
 *
key
,

313 
u_ch¨
 *
des_key
 )

315 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

316 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

317 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

318 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

319 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

320 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

321 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

322 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

324 #i‚de‡
USE_CRYPT


325 
	`des_£t_odd_∑rôy
((
des_cblock
 *)
des_key
);

329 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",

330 
key
[0], key[1], key[2], key[3], key[4], key[5], key[6]));

331 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

332 
des_key
[0], des_key[1], des_key[2], des_key[3], des_key[4], des_key[5], des_key[6], des_key[7]));

334 
	}
}

337 
	$Ch≠MS_NT
–*
rchÆÀnge
,

338 
rchÆÀnge_Àn
,

339 *
£¸ë
,

340 
£¸ë_Àn
,

341 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

343 
i
;

344 
MD°ru˘
 
md4C⁄ãxt
;

345 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

346 
low_byã_fú°
 = -1;

350 
	`BZERO
(
unicodePassw‹d
, (unicodePassword));

351 
i
 = 0; i < 
£¸ë_Àn
; i++) {

352 
unicodePassw‹d
[
i
 * 2] = (
u_ch¨
)
£¸ë
[i];

354 
	`MDbegö
(&
md4C⁄ãxt
);

355 
	`MDupd©e
(&
md4C⁄ãxt
, 
unicodePassw‹d
, 
£¸ë_Àn
 * 2 * 8);

357 i‡(
low_byã_fú°
 == -1) {

358 
low_byã_fú°
 = (
	`ht⁄s
(()1) != 1);

360 i‡(
low_byã_fú°
 == 0) {

361 
	`MDªvî£
((
u_l⁄g
 *)&
md4C⁄ãxt
);

364 
	`MDupd©e
(&
md4C⁄ãxt
, 
NULL
, 0);

366 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, (*)
md4C⁄ãxt
.
buf„r
, 
ª•⁄£
->
NTRe•
);

367 
	}
}

369 #ifde‡
MSLANMAN


370 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

373 
	$Ch≠MS_LANM™
–*
rchÆÀnge
,

374 
rchÆÀnge_Àn
,

375 *
£¸ë
,

376 
£¸ë_Àn
,

377 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

379 
i
;

380 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

381 
u_ch¨
 
Passw‹dHash
[16];

384 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

385 
i
 = 0; i < 
£¸ë_Àn
; i++) {

386 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

388 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 0, 
Passw‹dHash
 + 0 );

389 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 7, 
Passw‹dHash
 + 8 );

390 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
ª•⁄£
->
LANM™Re•
);

391 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chpms.h

57 #i‚de‡
CHPMS_H


58 
	#CHPMS_H


	)

60 
	#MAX_NT_PASSWORD
 256

	)

62 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/fsm.c

58 
	~"lwù/›t.h
"

60 #i‡
PPP_SUPPORT


62 
	~"µp.h
"

63 
	~"µpdebug.h
"

65 
	~"fsm.h
"

72 #i‡
PPP_DEBUG


74 c⁄° *
	gµ≥º_°ªº
[] = {

97 
fsm_timeout
 (*);

98 
fsm_rc⁄‰eq
 (
fsm
 *, 
u_ch¨
, u_char *, );

99 
fsm_rc⁄Áck
 (
fsm
 *, , 
u_ch¨
 *, );

100 
fsm_rc⁄‚akªj
 (
fsm
 *, , , 
u_ch¨
 *, );

101 
fsm_πîmªq
 (
fsm
 *, , 
u_ch¨
 *, );

102 
fsm_πîmack
 (
fsm
 *);

103 
fsm_rcodîej
 (
fsm
 *, 
u_ch¨
 *, );

104 
fsm_sc⁄‰eq
 (
fsm
 *, );

106 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

117 
	g≥î_mru
[
NUM_PPP
];

130 
	$fsm_öô
(
fsm
 *
f
)

132 
f
->
°©e
 = 
LS_INITIAL
;

133 
f
->
Êags
 = 0;

134 
f
->
id
 = 0;

135 
f
->
timeouâime
 = 
FSM_DEFTIMEOUT
;

136 
f
->
maxc⁄‰eqå™smôs
 = 
FSM_DEFMAXCONFREQS
;

137 
f
->
maxãrmå™smôs
 = 
FSM_DEFMAXTERMREQS
;

138 
f
->
max«klo›s
 = 
FSM_DEFMAXNAKLOOPS
;

139 
f
->
ãrm_ªas⁄_Àn
 = 0;

140 
	}
}

147 
	$fsm_lowîup
(
fsm
 *
f
)

149 
ﬁdSèã
 = 
f
->
°©e
;

151 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

153  
f
->
°©e
 ) {

154 
LS_INITIAL
:

155 
f
->
°©e
 = 
LS_CLOSED
;

158 
LS_STARTING
:

159 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

160 
f
->
°©e
 = 
LS_STOPPED
;

163 
	`fsm_sc⁄‰eq
(
f
, 0);

164 
f
->
°©e
 = 
LS_REQSENT
;

169 
	`FSMDEBUG
((
LOG_INFO
, "%s: UpÉvent in state %d (%s)!\n",

170 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

173 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerup state %d (%s) -> %d (%s)\n",

174 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

175 
	}
}

184 
	$fsm_lowîdown
(
fsm
 *
f
)

186 
ﬁdSèã
 = 
f
->
°©e
;

188 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

190  
f
->
°©e
 ) {

191 
LS_CLOSED
:

192 
f
->
°©e
 = 
LS_INITIAL
;

195 
LS_STOPPED
:

196 
f
->
°©e
 = 
LS_STARTING
;

197 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

198 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

202 
LS_CLOSING
:

203 
f
->
°©e
 = 
LS_INITIAL
;

204 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

207 
LS_STOPPING
:

208 
LS_REQSENT
:

209 
LS_ACKRCVD
:

210 
LS_ACKSENT
:

211 
f
->
°©e
 = 
LS_STARTING
;

212 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

215 
LS_OPENED
:

216 if–
f
->
ˇŒbacks
->
down
 ) {

217 (*
f
->
ˇŒbacks
->
down
)(f);

219 
f
->
°©e
 = 
LS_STARTING
;

223 
	`FSMDEBUG
((
LOG_INFO
, "%s: DownÉvent in state %d (%s)!\n",

224 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

227 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerdown state %d (%s) -> %d (%s)\n",

228 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

229 
	}
}

236 
	$fsm_›í
(
fsm
 *
f
)

238 
ﬁdSèã
 = 
f
->
°©e
;

240 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

242  
f
->
°©e
 ) {

243 
LS_INITIAL
:

244 
f
->
°©e
 = 
LS_STARTING
;

245 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

246 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

250 
LS_CLOSED
:

251 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

252 
f
->
°©e
 = 
LS_STOPPED
;

255 
	`fsm_sc⁄‰eq
(
f
, 0);

256 
f
->
°©e
 = 
LS_REQSENT
;

260 
LS_CLOSING
:

261 
f
->
°©e
 = 
LS_STOPPING
;

263 
LS_STOPPED
:

264 
LS_OPENED
:

265 if–
f
->
Êags
 & 
OPT_RESTART
 ) {

266 
	`fsm_lowîdown
(
f
);

267 
	`fsm_lowîup
(
f
);

272 
	`FSMDEBUG
((
LOG_INFO
, "%s: open state %d (%s) -> %d (%s)\n",

273 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

274 
	}
}

284 
	$fsm_˛o£
(
fsm
 *
f
, *
ªas⁄
)

286 
ﬁdSèã
 = 
f
->
°©e
;

288 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

290 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

291 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
? 0: 
	`°æí
(reason));

292  
f
->
°©e
 ) {

293 
LS_STARTING
:

294 
f
->
°©e
 = 
LS_INITIAL
;

296 
LS_STOPPED
:

297 
f
->
°©e
 = 
LS_CLOSED
;

299 
LS_STOPPING
:

300 
f
->
°©e
 = 
LS_CLOSING
;

303 
LS_REQSENT
:

304 
LS_ACKRCVD
:

305 
LS_ACKSENT
:

306 
LS_OPENED
:

307 if–
f
->
°©e
 !
LS_OPENED
 ) {

308 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

309 } if–
f
->
ˇŒbacks
->
down
 ) {

310 (*
f
->
ˇŒbacks
->
down
)(f);

313 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

314 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

315 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

316 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

317 --
f
->
ªå™smôs
;

319 
f
->
°©e
 = 
LS_CLOSING
;

323 
	`FSMDEBUG
((
LOG_INFO
, "%s: closeÑeason=%s state %d (%s) -> %d (%s)\n",

324 
	`PROTO_NAME
(
f
), 
ªas⁄
, 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

325 
	}
}

334 
	$fsm_sd©a
–
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, u_ch¨ *
d©a
, 
d©Æí
)

336 
u_ch¨
 *
ouç
;

337 
ouéí
;

340 
ouç
 = 
ouçackë_buf
[
f
->
unô
];

341 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
) {

342 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

344 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
) {

345 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

347 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

348 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

349 
	`PUTCHAR
(
code
, 
ouç
);

350 
	`PUTCHAR
(
id
, 
ouç
);

351 
	`PUTSHORT
(
ouéí
, 
ouç
);

352 
	`µpWrôe
(
f
->
unô
, 
ouçackë_buf
[f->unô], 
ouéí
 + 
PPP_HDRLEN
);

353 
	`FSMDEBUG
((
LOG_INFO
, "fsm_sdata(%s): Sent code %d,%d,%d.\n",

354 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
ouéí
));

355 
	}
}

362 
	$fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
)

364 
u_ch¨
 *
öp
 = 
ö∑ckë
;

365 
u_ch¨
 
code
, 
id
;

366 
Àn
;

372 i‡(
l
 < 
HEADERLEN
) {

373 
	`FSMDEBUG
((
LOG_WARNING
, "fsm_input(%x): Rcvd short header.\n",

374 
f
->
¥Ÿocﬁ
));

377 
	`GETCHAR
(
code
, 
öp
);

378 
	`GETCHAR
(
id
, 
öp
);

379 
	`GETSHORT
(
Àn
, 
öp
);

380 i‡(
Àn
 < 
HEADERLEN
) {

381 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd illegalÜength.\n",

382 
f
->
¥Ÿocﬁ
));

385 i‡(
Àn
 > 
l
) {

386 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd shortÖacket.\n",

387 
f
->
¥Ÿocﬁ
));

390 
Àn
 -
HEADERLEN
;

392 if–
f
->
°©e
 =
LS_INITIAL
 || f->°©ê=
LS_STARTING
 ) {

393 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): RcvdÖacket in state %d (%s).\n",

394 
f
->
¥Ÿocﬁ
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

397 
	`FSMDEBUG
((
LOG_INFO
, "fsm_öput(%s):%d,%d,%d\n", 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
l
));

401 
code
) {

402 
CONFREQ
:

403 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

406 
CONFACK
:

407 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

410 
CONFNAK
:

411 
CONFREJ
:

412 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

415 
TERMREQ
:

416 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

419 
TERMACK
:

420 
	`fsm_πîmack
(
f
);

423 
CODEREJ
:

424 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

428 if–!
f
->
ˇŒbacks
->
extcode
 ||

429 !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) ) {

430 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

434 
	}
}

443 
	$fsm_¥Ÿªje˘
(
fsm
 *
f
)

445  
f
->
°©e
 ) {

446 
LS_CLOSING
:

447 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

449 
LS_CLOSED
:

450 
f
->
°©e
 = 
LS_CLOSED
;

451 if–
f
->
ˇŒbacks
->
föished
 ) {

452 (*
f
->
ˇŒbacks
->
föished
)(f);

456 
LS_STOPPING
:

457 
LS_REQSENT
:

458 
LS_ACKRCVD
:

459 
LS_ACKSENT
:

460 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

462 
LS_STOPPED
:

463 
f
->
°©e
 = 
LS_STOPPED
;

464 if–
f
->
ˇŒbacks
->
föished
 ) {

465 (*
f
->
ˇŒbacks
->
föished
)(f);

469 
LS_OPENED
:

470 if–
f
->
ˇŒbacks
->
down
 ) {

471 (*
f
->
ˇŒbacks
->
down
)(f);

474 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

475 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

476 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

477 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

478 --
f
->
ªå™smôs
;

480 
f
->
°©e
 = 
LS_STOPPING
;

484 
	`FSMDEBUG
((
LOG_INFO
, "%s: Protocol-rejectÉvent in state %d (%s)!\n",

485 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

487 
	}
}

501 
	$fsm_timeout
(*
¨g
)

503 
fsm
 *
f
 = (fsm *Ë
¨g
;

505 
f
->
°©e
) {

506 
LS_CLOSING
:

507 
LS_STOPPING
:

508 if–
f
->
ªå™smôs
 <= 0 ) {

509 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Terminate-Request state=%d (%s)\n",

510 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

514 
f
->
°©e
 = (f->°©ê=
LS_CLOSING
)? 
LS_CLOSED
: 
LS_STOPPED
;

515 if–
f
->
ˇŒbacks
->
föished
 ) {

516 (*
f
->
ˇŒbacks
->
föished
)(f);

519 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Terminate-Requests state=%d (%s)\n",

520 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

522 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

523 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

524 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

525 --
f
->
ªå™smôs
;

529 
LS_REQSENT
:

530 
LS_ACKRCVD
:

531 
LS_ACKSENT
:

532 i‡(
f
->
ªå™smôs
 <= 0) {

533 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Config-Requests state=%d (%s)\n",

534 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

535 
f
->
°©e
 = 
LS_STOPPED
;

536 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 ) {

537 (*
f
->
ˇŒbacks
->
föished
)(f);

540 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Config-Request state=%d (%s)\n",

541 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

543 i‡(
f
->
ˇŒbacks
->
ªå™smô
) {

544 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

546 
	`fsm_sc⁄‰eq
(
f
, 1);

547 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

548 
f
->
°©e
 = 
LS_REQSENT
;

554 
	`FSMDEBUG
((
LOG_INFO
, "%s: TimeoutÉvent in state %d (%s)!\n",

555 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

557 
	}
}

564 
	$fsm_rc⁄‰eq
(
fsm
 *
f
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

566 
code
, 
ªje˘_if_dißgªe
;

568 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n",

569 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

570  
f
->
°©e
 ) {

571 
LS_CLOSED
:

573 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

575 
LS_CLOSING
:

576 
LS_STOPPING
:

579 
LS_OPENED
:

581 if–
f
->
ˇŒbacks
->
down
 ) {

582 (*
f
->
ˇŒbacks
->
down
)(f);

584 
	`fsm_sc⁄‰eq
(
f
, 0);

587 
LS_STOPPED
:

589 
	`fsm_sc⁄‰eq
(
f
, 0);

590 
f
->
°©e
 = 
LS_REQSENT
;

598 i‡(
f
->
ˇŒbacks
->
ªqci
) {

599 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

600 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

601 } i‡(
Àn
) {

602 
code
 = 
CONFREJ
;

604 
code
 = 
CONFACK
;

608 
	`fsm_sd©a
(
f
, (
u_ch¨
)
code
, 
id
, 
öp
, 
Àn
);

610 i‡(
code
 =
CONFACK
) {

611 i‡(
f
->
°©e
 =
LS_ACKRCVD
) {

612 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

613 
f
->
°©e
 = 
LS_OPENED
;

614 i‡(
f
->
ˇŒbacks
->
up
) {

615 (*
f
->
ˇŒbacks
->
up
)(f);

618 
f
->
°©e
 = 
LS_ACKSENT
;

620 
f
->
«klo›s
 = 0;

623 i‡(
f
->
°©e
 !
LS_ACKRCVD
) {

624 
f
->
°©e
 = 
LS_REQSENT
;

626 if–
code
 =
CONFNAK
 ) {

627 ++
f
->
«klo›s
;

630 
	}
}

637 
	$fsm_rc⁄Áck
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

639 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",

640 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

642 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

645 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
): (len == 0)) ) {

647 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad Ack (length %d)\n",

648 
	`PROTO_NAME
(
f
), 
Àn
));

651 
f
->
£í_ack
 = 1;

653 
f
->
°©e
) {

654 
LS_CLOSED
:

655 
LS_STOPPED
:

656 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

659 
LS_REQSENT
:

660 
f
->
°©e
 = 
LS_ACKRCVD
;

661 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

664 
LS_ACKRCVD
:

666 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

667 
	`fsm_sc⁄‰eq
(
f
, 0);

668 
f
->
°©e
 = 
LS_REQSENT
;

671 
LS_ACKSENT
:

672 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

673 
f
->
°©e
 = 
LS_OPENED
;

674 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

675 i‡(
f
->
ˇŒbacks
->
up
) {

676 (*
f
->
ˇŒbacks
->
up
)(f);

680 
LS_OPENED
:

682 i‡(
f
->
ˇŒbacks
->
down
) {

683 (*
f
->
ˇŒbacks
->
down
)(f);

685 
	`fsm_sc⁄‰eq
(
f
, 0);

686 
f
->
°©e
 = 
LS_REQSENT
;

689 
	}
}

696 
	$fsm_rc⁄‚akªj
(
fsm
 *
f
, 
code
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

698 (*
¥oc
Ë(
fsm
 *, 
u_ch¨
 *, );

699 
ªt
;

701 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",

702 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

704 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

707 
¥oc
 = (
code
 =
CONFNAK
)? 
f
->
ˇŒbacks
->
«kci
: f->ˇŒbacks->
ªjci
;

708 i‡(!
¥oc
 || !((
ªt
 = 
	`¥oc
(
f
, 
öp
, 
Àn
)))) {

710 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad %s (length %d)\n",

711 
	`PROTO_NAME
(
f
), (
code
==
CONFNAK
? "Nak": "ªje˘"), 
Àn
));

714 
f
->
£í_ack
 = 1;

716 
f
->
°©e
) {

717 
LS_CLOSED
:

718 
LS_STOPPED
:

719 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

722 
LS_REQSENT
:

723 
LS_ACKSENT
:

725 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

726 i‡(
ªt
 < 0) {

727 
f
->
°©e
 = 
LS_STOPPED
;

729 
	`fsm_sc⁄‰eq
(
f
, 0);

733 
LS_ACKRCVD
:

735 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

736 
	`fsm_sc⁄‰eq
(
f
, 0);

737 
f
->
°©e
 = 
LS_REQSENT
;

740 
LS_OPENED
:

742 i‡(
f
->
ˇŒbacks
->
down
) {

743 (*
f
->
ˇŒbacks
->
down
)(f);

745 
	`fsm_sc⁄‰eq
(
f
, 0);

746 
f
->
°©e
 = 
LS_REQSENT
;

749 
	}
}

756 
	$fsm_πîmªq
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
p
, 
Àn
)

758 
	`LWIP_UNUSED_ARG
(
p
);

760 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",

761 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

763 
f
->
°©e
) {

764 
LS_ACKRCVD
:

765 
LS_ACKSENT
:

766 
f
->
°©e
 = 
LS_REQSENT
;

769 
LS_OPENED
:

770 i‡(
Àn
 > 0) {

771 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖì∏(%x)\n", 
	`PROTO_NAME
(
f
), 
p
));

773 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖìr\n", 
	`PROTO_NAME
(
f
)));

775 i‡(
f
->
ˇŒbacks
->
down
) {

776 (*
f
->
ˇŒbacks
->
down
)(f);

778 
f
->
ªå™smôs
 = 0;

779 
f
->
°©e
 = 
LS_STOPPING
;

780 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

784 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

785 
	}
}

792 
	$fsm_πîmack
(
fsm
 *
f
)

794 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermack(%s): state=%d (%s)\n",

795 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

797 
f
->
°©e
) {

798 
LS_CLOSING
:

799 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

800 
f
->
°©e
 = 
LS_CLOSED
;

801 if–
f
->
ˇŒbacks
->
föished
 ) {

802 (*
f
->
ˇŒbacks
->
föished
)(f);

806 
LS_STOPPING
:

807 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

808 
f
->
°©e
 = 
LS_STOPPED
;

809 if–
f
->
ˇŒbacks
->
föished
 ) {

810 (*
f
->
ˇŒbacks
->
föished
)(f);

814 
LS_ACKRCVD
:

815 
f
->
°©e
 = 
LS_REQSENT
;

818 
LS_OPENED
:

819 i‡(
f
->
ˇŒbacks
->
down
) {

820 (*
f
->
ˇŒbacks
->
down
)(f);

822 
	`fsm_sc⁄‰eq
(
f
, 0);

825 
	}
}

832 
	$fsm_rcodîej
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

834 
u_ch¨
 
code
, 
id
;

836 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej(%s): state=%d (%s)\n",

837 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

839 i‡(
Àn
 < 
HEADERLEN
) {

840 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej: Rcvd short Code-RejectÖacket!\n"));

843 
	`GETCHAR
(
code
, 
öp
);

844 
	`GETCHAR
(
id
, 
öp
);

845 
	`FSMDEBUG
((
LOG_WARNING
, "%s: Rcvd Code-Reject for code %d, id %d\n",

846 
	`PROTO_NAME
(
f
), 
code
, 
id
));

848 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

849 
f
->
°©e
 = 
LS_REQSENT
;

851 
	}
}

858 
	$fsm_sc⁄‰eq
(
fsm
 *
f
, 
ªå™smô
)

860 
u_ch¨
 *
ouç
;

861 
cûí
;

863 if–
f
->
°©e
 !
LS_REQSENT
 && f->°©ê!
LS_ACKRCVD
 && f->°©ê!
LS_ACKSENT
 ) {

865 if–
f
->
ˇŒbacks
->
ª£tci
 ) {

866 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

868 
f
->
«klo›s
 = 0;

871 if–!
ªå™smô
 ) {

873 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

874 
f
->
ªqid
 = ++f->
id
;

877 
f
->
£í_ack
 = 0;

882 
ouç
 = 
ouçackë_buf
[
f
->
unô
] + 
PPP_HDRLEN
 + 
HEADERLEN
;

883 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ) {

884 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

885 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
 ) {

886 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

888 i‡(
f
->
ˇŒbacks
->
addci
) {

889 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

892 
cûí
 = 0;

896 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

899 --
f
->
ªå™smôs
;

900 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

902 
	`FSMDEBUG
((
LOG_INFO
, "%s: sending Configure-Request, id %d\n",

903 
	`PROTO_NAME
(
f
), f->
ªqid
));

904 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/fsm.h

54 #i‚de‡
FSM_H


55 
	#FSM_H


	)

63 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#CONFREQ
 1

	)

70 
	#CONFACK
 2

	)

71 
	#CONFNAK
 3

	)

72 
	#CONFREJ
 4

	)

73 
	#TERMREQ
 5

	)

74 
	#TERMACK
 6

	)

75 
	#CODEREJ
 7

	)

80 
	#LS_INITIAL
 0

	)

81 
	#LS_STARTING
 1

	)

82 
	#LS_CLOSED
 2

	)

83 
	#LS_STOPPED
 3

	)

84 
	#LS_CLOSING
 4

	)

85 
	#LS_STOPPING
 5

	)

86 
	#LS_REQSENT
 6

	)

87 
	#LS_ACKRCVD
 7

	)

88 
	#LS_ACKSENT
 8

	)

89 
	#LS_OPENED
 9

	)

94 
	#OPT_PASSIVE
 1

	)

95 
	#OPT_RESTART
 2

	)

96 
	#OPT_SILENT
 4

	)

105 
	sfsm
 {

106 
	munô
;

107 
u_sh‹t
 
	m¥Ÿocﬁ
;

108 
	m°©e
;

109 
	mÊags
;

110 
u_ch¨
 
	mid
;

111 
u_ch¨
 
	mªqid
;

112 
u_ch¨
 
	m£í_ack
;

113 
	mtimeouâime
;

114 
	mmaxc⁄‰eqå™smôs
;

115 
	mªå™smôs
;

116 
	mmaxãrmå™smôs
;

117 
	m«klo›s
;

118 
	mmax«klo›s
;

119 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

120 * 
	mãrm_ªas⁄
;

121 
	mãrm_ªas⁄_Àn
;

122 } 
	tfsm
;

125 
	sfsm_ˇŒbacks
 {

126 (*
	mª£tci
)(
	mfsm
*);

127 (*
	mcûí
)(
	mfsm
*);

128 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

129 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

130 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

131 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

132 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

133 (*
	mup
)(
	mfsm
*);

134 (*
	mdown
)(
	mfsm
*);

135 (*
	m°¨tög
)(
	mfsm
*);

136 (*
	mföished
)(
	mfsm
*);

137 (*
	m¥Ÿªje˘
)();

138 (*
	mªå™smô
)(
	mfsm
*);

139 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

140 *
	m¥Ÿo_«me
;

141 } 
	tfsm_ˇŒbacks
;

150 
≥î_mru
[];

160 
fsm_öô
 (
fsm
*);

161 
fsm_lowîup
 (
fsm
*);

162 
fsm_lowîdown
 (
fsm
*);

163 
fsm_›í
 (
fsm
*);

164 
fsm_˛o£
 (
fsm
*, *);

165 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

166 
fsm_¥Ÿªje˘
 (
fsm
*);

167 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ipcp.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"µpdebug.h
"

59 
	~"auth.h
"

60 
	~"fsm.h
"

61 
	~"vj.h
"

62 
	~"ù˝.h
"

64 
	~<°rög.h
>

74 
	#CILEN_VOID
 2

	)

75 
	#CILEN_COMPRESS
 4

	)

76 
	#CILEN_VJ
 6

	)

77 
	#CILEN_ADDR
 6

	)

78 
	#CILEN_ADDRS
 10

	)

88 
ù˝_ª£tci
 (
fsm
 *);

89 
ù˝_cûí
 (
fsm
 *);

90 
ù˝_addci
 (
fsm
 *, 
u_ch¨
 *, *);

91 
ù˝_ackci
 (
fsm
 *, 
u_ch¨
 *, );

92 
ù˝_«kci
 (
fsm
 *, 
u_ch¨
 *, );

93 
ù˝_ªjci
 (
fsm
 *, 
u_ch¨
 *, );

94 
ù˝_ªqci
 (
fsm
 *, 
u_ch¨
 *, *, );

95 
ù˝_up
 (
fsm
 *);

96 
ù˝_down
 (
fsm
 *);

98 
ù˝_s¸ùt
 (
fsm
 *, *);

100 
ù˝_föished
 (
fsm
 *);

105 
ù˝_öô
 ();

106 
ù˝_›í
 ();

107 
ù˝_˛o£
 (, *);

108 
ù˝_lowîup
 ();

109 
ù˝_lowîdown
 ();

110 
ù˝_öput
 (, 
u_ch¨
 *, );

111 
ù˝_¥Ÿªj
 ();

113 
ù˝_˛ór_addrs
 ();

115 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

116 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

124 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

125 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

126 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

127 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

129 
fsm
 
	gù˝_fsm
[
NUM_PPP
];

131 
¥Ÿít
 
	gù˝_¥Ÿít
 = {

132 
PPP_IPCP
,

133 
ù˝_öô
,

134 
ù˝_öput
,

135 
ù˝_¥Ÿªj
,

136 
ù˝_lowîup
,

137 
ù˝_lowîdown
,

138 
ù˝_›í
,

139 
ù˝_˛o£
,

141 
ù˝_¥öçkt
,

142 
NULL
,

147 
ù_check_›ti⁄s
,

148 
NULL
,

149 
ù_a˘ive_pkt


159 
	gcis_ª˚ived
[
NUM_PPP
];

160 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

162 
fsm_ˇŒbacks
 
	gù˝_ˇŒbacks
 = {

163 
ù˝_ª£tci
,

164 
ù˝_cûí
,

165 
ù˝_addci
,

166 
ù˝_ackci
,

167 
ù˝_«kci
,

168 
ù˝_ªjci
,

169 
ù˝_ªqci
,

170 
ù˝_up
,

171 
ù˝_down
,

172 
NULL
,

173 
ù˝_föished
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

192 
	$_öë_¡ﬂ
(
u32_t
 
n
)

194 
ö_addr
 
ü
;

195 
ü
.
s_addr
 = 
n
;

196  
	`öë_¡ﬂ
(
ü
);

197 
	}
}

199 
	#öë_¡ﬂ
 
_öë_¡ﬂ


	)

205 
	$ù˝_öô
(
unô
)

207 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

208 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

209 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

211 
f
->
unô
 = unit;

212 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

213 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

214 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

216 
	`mem£t
(
wo
, 0, (*wo));

217 
	`mem£t
(
ao
, 0, (*ao));

219 
wo
->
√g_addr
 = 1;

220 
wo
->
ouøddr
 = 0;

221 #i‡
VJ_SUPPORT


222 
wo
->
√g_vj
 = 1;

224 
wo
->
√g_vj
 = 0;

226 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

227 
wo
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

228 
wo
->
cÊag
 = 0;

229 
wo
->
deÁu…_rouã
 = 1;

231 
ao
->
√g_addr
 = 1;

232 #i‡
VJ_SUPPORT


233 
ao
->
√g_vj
 = 1;

235 
ao
->
√g_vj
 = 0;

237 
ao
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

238 
ao
->
cÊag
 = 1;

239 
ao
->
deÁu…_rouã
 = 1;

240 
	}
}

247 
	$ù˝_›í
(
unô
)

249 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

250 
	}
}

257 
	$ù˝_˛o£
(
unô
, *
ªas⁄
)

259 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

260 
	}
}

267 
	$ù˝_lowîup
(
unô
)

269 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

270 
	}
}

277 
	$ù˝_lowîdown
(
unô
)

279 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

280 
	}
}

287 
	$ù˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

289 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

290 
	}
}

299 
	$ù˝_¥Ÿªj
(
unô
)

301 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

302 
	}
}

309 
	$ù˝_ª£tci
(
fsm
 *
f
)

311 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

313 
wo
->
ªq_addr
 = wo->
√g_addr
 && 
ù˝_Ælow›ti⁄s
[
f
->
unô
].neg_addr;

314 i‡(
wo
->
ouøddr
 == 0) {

315 
wo
->
ac˚±_loˇl
 = 1;

317 i‡(
wo
->
hißddr
 == 0) {

318 
wo
->
ac˚±_ªmŸe
 = 1;

321 
wo
->
ªq_dns1
 = 
µp_£âögs
.
u£≥îdns
;

322 
wo
->
ªq_dns2
 = 
µp_£âögs
.
u£≥îdns
;

323 
ù˝_gŸ›ti⁄s
[
f
->
unô
] = *
wo
;

324 
cis_ª˚ived
[
f
->
unô
] = 0;

325 
	}
}

332 
	$ù˝_cûí
(
fsm
 *
f
)

334 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

335 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

336 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

338 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

339 
	#LENCIADDR
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_ADDRS
 : 
CILEN_ADDR
Ë: 0)

	)

340 
	#LENCIDNS
(
√g
Ë“eg ? (
CILEN_ADDR
Ë: 0)

	)

346 i‡(
wo
->
√g_addr
 && !
go
->√g_add∏&& !go->
ﬁd_addrs
) {

348 
go
->
√g_addr
 = 1;

349 
go
->
ﬁd_addrs
 = 1;

351 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

353 i‡(
cis_ª˚ived
[
f
->
unô
] == 0) {

355 
go
->
√g_vj
 = 1;

358 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

359 
go
->
√g_vj
 = 1;

360 
go
->
ﬁd_vj
 = 1;

361 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

366  (
	`LENCIADDR
(
go
->
√g_addr
, go->
ﬁd_addrs
) +

367 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

368 
	`LENCIDNS
(
go
->
ªq_dns1
) +

369 
	`LENCIDNS
(
go
->
ªq_dns2
));

370 
	}
}

377 
	$ù˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

379 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

380 
Àn
 = *
À≈
;

382 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

383 i‡(
√g
) { \

384 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

385 i‡(
Àn
 >
vjÀn
) { \

386 
	`PUTCHAR
(
›t
, 
u˝
); \

387 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

388 
	`PUTSHORT
(
vÆ
, 
u˝
); \

389 i‡(!
ﬁd
) { \

390 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

391 
	`PUTCHAR
(
cÊag
, 
u˝
); \

393 
Àn
 -
vjÀn
; \

395 
√g
 = 0; \

397 }

	)

399 
	#ADDCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

400 i‡(
√g
) { \

401 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

402 i‡(
Àn
 >
addæí
) { \

403 
u32_t
 
l
; \

404 
	`PUTCHAR
(
›t
, 
u˝
); \

405 
	`PUTCHAR
(
addæí
, 
u˝
); \

406 
l
 = 
	`¡ohl
(
vÆ1
); \

407 
	`PUTLONG
(
l
, 
u˝
); \

408 i‡(
ﬁd
) { \

409 
l
 = 
	`¡ohl
(
vÆ2
); \

410 
	`PUTLONG
(
l
, 
u˝
); \

412 
Àn
 -
addæí
; \

414 
√g
 = 0; \

416 }

	)

418 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

419 i‡(
√g
) { \

420 i‡(
Àn
 >
CILEN_ADDR
) { \

421 
u32_t
 
l
; \

422 
	`PUTCHAR
(
›t
, 
u˝
); \

423 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

424 
l
 = 
	`¡ohl
(
addr
); \

425 
	`PUTLONG
(
l
, 
u˝
); \

426 
Àn
 -
CILEN_ADDR
; \

428 
√g
 = 0; \

430 }

	)

432 
	`ADDCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

433 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

435 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

436 
go
->
max¶Ÿödex
, go->
cÊag
);

438 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

440 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

442 *
À≈
 -
Àn
;

443 
	}
}

454 
	$ù˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

456 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

457 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

458 
u32_t
 
cû⁄g
;

459 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

467 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

468 i‡(
√g
) { \

469 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

470 i‡((
Àn
 -
vjÀn
) < 0) { \

471 
bad
; \

473 
	`GETCHAR
(
côy≥
, 
p
); \

474 
	`GETCHAR
(
cûí
, 
p
); \

475 i‡(
cûí
 !
vjÀn
 || \

476 
côy≥
 !
›t
) { \

477 
bad
; \

479 
	`GETSHORT
(
cish‹t
, 
p
); \

480 i‡(
cish‹t
 !
vÆ
) { \

481 
bad
; \

483 i‡(!
ﬁd
) { \

484 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

485 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) { \

486 
bad
; \

488 
	`GETCHAR
(
cicÊag
, 
p
); \

489 i‡(
cicÊag
 !
cÊag
) { \

490 
bad
; \

493 }

	)

495 
	#ACKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

496 i‡(
√g
) { \

497 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

498 
u32_t
 
l
; \

499 i‡((
Àn
 -
addæí
) < 0) { \

500 
bad
; \

502 
	`GETCHAR
(
côy≥
, 
p
); \

503 
	`GETCHAR
(
cûí
, 
p
); \

504 i‡(
cûí
 !
addæí
 || \

505 
côy≥
 !
›t
) { \

506 
bad
; \

508 
	`GETLONG
(
l
, 
p
); \

509 
cû⁄g
 = 
	`ht⁄l
(
l
); \

510 i‡(
vÆ1
 !
cû⁄g
) { \

511 
bad
; \

513 i‡(
ﬁd
) { \

514 
	`GETLONG
(
l
, 
p
); \

515 
cû⁄g
 = 
	`ht⁄l
(
l
); \

516 i‡(
vÆ2
 !
cû⁄g
) { \

517 
bad
; \

520 }

	)

522 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

523 i‡(
√g
) { \

524 
u32_t
 
l
; \

525 i‡((
Àn
 -
CILEN_ADDR
) < 0) { \

526 
bad
; \

528 
	`GETCHAR
(
côy≥
, 
p
); \

529 
	`GETCHAR
(
cûí
, 
p
); \

530 i‡(
cûí
 !
CILEN_ADDR
 || \

531 
côy≥
 !
›t
) { \

532 
bad
; \

534 
	`GETLONG
(
l
, 
p
); \

535 
cû⁄g
 = 
	`ht⁄l
(
l
); \

536 i‡(
addr
 !
cû⁄g
) { \

537 
bad
; \

539 }

	)

541 
	`ACKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

542 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

544 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

545 
go
->
max¶Ÿödex
, go->
cÊag
);

547 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

549 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

554 i‡(
Àn
 != 0) {

555 
bad
;

559 
bad
:

560 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_ackci:Ñeceived bad Ack!\n"));

562 
	}
}

574 
	$ù˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

576 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

577 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

578 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

579 
u_sh‹t
 
cish‹t
;

580 
u32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

581 
ù˝_›ti⁄s
 
no
;

582 
ù˝_›ti⁄s
 
åy
;

584 
	`BZERO
(&
no
, (no));

585 
åy
 = *
go
;

592 
	#NAKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
code
) \

593 i‡(
go
->
√g
 && \

594 
Àn
 >(
cûí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
)) && \

595 
p
[1] =
cûí
 && \

596 
p
[0] =
›t
) { \

597 
Àn
 -
cûí
; \

598 
	`INCPTR
(2, 
p
); \

599 
	`GETLONG
(
l
, 
p
); \

600 
cüddr1
 = 
	`ht⁄l
(
l
); \

601 i‡(
ﬁd
) { \

602 
	`GETLONG
(
l
, 
p
); \

603 
cüddr2
 = 
	`ht⁄l
(
l
); \

604 
no
.
ﬁd_addrs
 = 1; \

606 
cüddr2
 = 0; \

608 
no
.
√g
 = 1; \

609 
code
 \

610 }

	)

612 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

613 i‡(
go
->
√g
 && \

614 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

615 
Àn
 >
cûí
 && \

616 
p
[0] =
›t
) { \

617 
Àn
 -
cûí
; \

618 
	`INCPTR
(2, 
p
); \

619 
	`GETSHORT
(
cish‹t
, 
p
); \

620 
no
.
√g
 = 1; \

621 
code
 \

622 }

	)

624 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

625 i‡(
go
->
√g
 && \

626 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

627 
Àn
 >
cûí
 && \

628 
p
[0] =
›t
) { \

629 
Àn
 -
cûí
; \

630 
	`INCPTR
(2, 
p
); \

631 
	`GETLONG
(
l
, 
p
); \

632 
cidnßddr
 = 
	`ht⁄l
(
l
); \

633 
no
.
√g
 = 1; \

634 
code
 \

635 }

	)

641 
	`NAKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
, go->old_addrs,

642 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

643 
åy
.
ouøddr
 = 
cüddr1
;

644 
	`IPCPDEBUG
((
LOG_INFO
, "local IPáddress %s\n",

645 
	`öë_¡ﬂ
(
cüddr1
)));

647 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

648 
åy
.
hißddr
 = 
cüddr2
;

649 
	`IPCPDEBUG
((
LOG_INFO
, "remote IPáddress %s\n",

650 
	`öë_¡ﬂ
(
cüddr2
)));

660 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

661 i‡(
cûí
 =
CILEN_VJ
) {

662 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

663 
	`GETCHAR
(
cicÊag
, 
p
);

664 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

665 
åy
.
ﬁd_vj
 = 0;

666 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
) {

667 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

669 i‡(!
cicÊag
) {

670 
åy
.
cÊag
 = 0;

673 
åy
.
√g_vj
 = 0;

676 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

677 
åy
.
ﬁd_vj
 = 1;

678 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

680 
åy
.
√g_vj
 = 0;

685 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

686 
åy
.
dnßddr
[0] = 
cidnßddr
;

687 
	`IPCPDEBUG
((
LOG_INFO
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

690 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

691 
åy
.
dnßddr
[1] = 
cidnßddr
;

692 
	`IPCPDEBUG
((
LOG_INFO
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

701 
Àn
 > 
CILEN_VOID
) {

702 
	`GETCHAR
(
côy≥
, 
p
);

703 
	`GETCHAR
(
cûí
, 
p
);

704 if–(
Àn
 -
cûí
) < 0 ) {

705 
bad
;

707 
√xt
 = 
p
 + 
cûí
 - 2;

709 
côy≥
) {

710 
CI_COMPRESSTYPE
:

711 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

712 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

713 
bad
;

715 
no
.
√g_vj
 = 1;

717 
CI_ADDRS
:

718 i‡((
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

719 || 
cûí
 !
CILEN_ADDRS
) {

720 
bad
;

722 
åy
.
√g_addr
 = 1;

723 
åy
.
ﬁd_addrs
 = 1;

724 
	`GETLONG
(
l
, 
p
);

725 
cüddr1
 = 
	`ht⁄l
(
l
);

726 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

727 
åy
.
ouøddr
 = 
cüddr1
;

729 
	`GETLONG
(
l
, 
p
);

730 
cüddr2
 = 
	`ht⁄l
(
l
);

731 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
) {

732 
åy
.
hißddr
 = 
cüddr2
;

734 
no
.
ﬁd_addrs
 = 1;

736 
CI_ADDR
:

737 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
) {

738 
bad
;

740 
åy
.
ﬁd_addrs
 = 0;

741 
	`GETLONG
(
l
, 
p
);

742 
cüddr1
 = 
	`ht⁄l
(
l
);

743 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

744 
åy
.
ouøddr
 = 
cüddr1
;

746 i‡(
åy
.
ouøddr
 != 0) {

747 
åy
.
√g_addr
 = 1;

749 
no
.
√g_addr
 = 1;

752 
p
 = 
√xt
;

756 i‡(
Àn
 != 0) {

757 
bad
;

763 i‡(
f
->
°©e
 !
LS_OPENED
) {

764 *
go
 = 
åy
;

769 
bad
:

770 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_nakci:Ñeceived bad Nak!\n"));

772 
	}
}

779 
	$ù˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

781 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

782 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

783 
u_sh‹t
 
cish‹t
;

784 
u32_t
 
cû⁄g
;

785 
ù˝_›ti⁄s
 
åy
;

787 
åy
 = *
go
;

793 
	#REJCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

794 i‡(
go
->
√g
 && \

795 
Àn
 >(
cûí
 = 
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
) && \

796 
p
[1] =
cûí
 && \

797 
p
[0] =
›t
) { \

798 
u32_t
 
l
; \

799 
Àn
 -
cûí
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
l
, 
p
); \

802 
cû⁄g
 = 
	`ht⁄l
(
l
); \

804 i‡(
cû⁄g
 !
vÆ1
) { \

805 
bad
; \

807 i‡(
ﬁd
) { \

808 
	`GETLONG
(
l
, 
p
); \

809 
cû⁄g
 = 
	`ht⁄l
(
l
); \

811 i‡(
cû⁄g
 !
vÆ2
) { \

812 
bad
; \

815 
åy
.
√g
 = 0; \

816 }

	)

818 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

819 i‡(
go
->
√g
 && \

820 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

821 
Àn
 >
p
[1] && \

822 
p
[0] =
›t
) { \

823 
Àn
 -
p
[1]; \

824 
	`INCPTR
(2, 
p
); \

825 
	`GETSHORT
(
cish‹t
, 
p
); \

827 i‡(
cish‹t
 !
vÆ
) { \

828 
bad
; \

830 i‡(!
ﬁd
) { \

831 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

832 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) { \

833 
bad
; \

835 
	`GETCHAR
(
ciÊag
, 
p
); \

836 i‡(
ciÊag
 !
cÊag
) { \

837 
bad
; \

840 
åy
.
√g
 = 0; \

841 }

	)

843 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

844 i‡(
go
->
√g
 && \

845 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

846 
Àn
 >
cûí
 && \

847 
p
[0] =
›t
) { \

848 
u32_t
 
l
; \

849 
Àn
 -
cûí
; \

850 
	`INCPTR
(2, 
p
); \

851 
	`GETLONG
(
l
, 
p
); \

852 
cû⁄g
 = 
	`ht⁄l
(
l
); \

854 i‡(
cû⁄g
 !
dnßddr
) { \

855 
bad
; \

857 
åy
.
√g
 = 0; \

858 }

	)

860 
	`REJCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
,

861 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

863 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

864 
go
->
max¶Ÿödex
, go->
cÊag
);

866 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

868 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

873 i‡(
Àn
 != 0) {

874 
bad
;

879 i‡(
f
->
°©e
 !
LS_OPENED
) {

880 *
go
 = 
åy
;

884 
bad
:

885 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_rejci:Ñeceived bad Reject!\n"));

887 
	}
}

898 
	$ù˝_ªqci
(
fsm
 *
f
, 
u_ch¨
 *
öp
 ,*
Àn
 ,
ªje˘_if_dißgªe
)

900 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

901 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

902 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

903 #ifde‡
OLD_CI_ADDRS


904 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

906 
u_ch¨
 *
cù
, *
√xt
;

907 
u_sh‹t
 
cûí
, 
côy≥
;

908 
u_sh‹t
 
cish‹t
;

909 
u32_t
 
é
, 
cüddr1
;

910 #ifde‡
OLD_CI_ADDRS


911 
u32_t
 
cüddr2
;

913 
rc
 = 
CONFACK
;

914 
‹c
;

915 
u_ch¨
 *
p
;

916 
u_ch¨
 *
u˝
 = 
öp
;

917 
l
 = *
Àn
;

918 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

919 
d
;

921 
cis_ª˚ived
[
f
->
unô
] = 1;

926 
	`BZERO
(
ho
, (*ho));

931 
√xt
 = 
öp
;

932 
l
) {

933 
‹c
 = 
CONFACK
;

934 
cù
 = 
p
 = 
√xt
;

935 i‡(
l
 < 2 ||

936 
p
[1] < 2 ||

937 
p
[1] > 
l
) {

938 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: bad CIÜength!\n"));

939 
‹c
 = 
CONFREJ
;

940 
cûí
 = 
l
;

941 
l
 = 0;

942 
ídswôch
;

944 
	`GETCHAR
(
côy≥
, 
p
);

945 
	`GETCHAR
(
cûí
, 
p
);

946 
l
 -
cûí
;

947 
√xt
 +
cûí
;

949 
côy≥
) {

950 #ifde‡
OLD_CI_ADDRS


951 
CI_ADDRS
:

952 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci:Ñeceived ADDRS\n"));

953 i‡(!
ao
->
√g_addr
 ||

954 
cûí
 !
CILEN_ADDRS
) {

955 
‹c
 = 
CONFREJ
;

965 
	`GETLONG
(
é
, 
p
);

966 
cüddr1
 = 
	`ht⁄l
(
é
);

967 
	`IPCPDEBUG
((
LOG_INFO
, "hi†add∏%s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

968 i‡(
cüddr1
 !
wo
->
hißddr


969 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

970 
‹c
 = 
CONFNAK
;

971 i‡(!
ªje˘_if_dißgªe
) {

972 
	`DECPTR
((
u32_t
), 
p
);

973 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

974 
	`PUTLONG
(
é
, 
p
);

976 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

980 
‹c
 = 
CONFREJ
;

981 
wo
->
ªq_addr
 = 0;

989 
	`GETLONG
(
é
, 
p
);

990 
cüddr2
 = 
	`ht⁄l
(
é
);

991 
	`IPCPDEBUG
((
LOG_INFO
, "ou∏add∏%s\n", 
	`öë_¡ﬂ
(
cüddr2
)));

992 i‡(
cüddr2
 !
wo
->
ouøddr
) {

993 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

994 
‹c
 = 
CONFNAK
;

995 i‡(!
ªje˘_if_dißgªe
) {

996 
	`DECPTR
((
u32_t
), 
p
);

997 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

998 
	`PUTLONG
(
é
, 
p
);

1001 
go
->
ouøddr
 = 
cüddr2
;

1005 
ho
->
√g_addr
 = 1;

1006 
ho
->
ﬁd_addrs
 = 1;

1007 
ho
->
hißddr
 = 
cüddr1
;

1008 
ho
->
ouøddr
 = 
cüddr2
;

1012 
CI_ADDR
:

1013 i‡(!
ao
->
√g_addr
) {

1014 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDRÇotállowed\n"));

1015 
‹c
 = 
CONFREJ
;

1017 } i‡(
cûí
 !
CILEN_ADDR
) {

1018 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDR badÜen\n"));

1019 
‹c
 = 
CONFREJ
;

1029 
	`GETLONG
(
é
, 
p
);

1030 
cüddr1
 = 
	`ht⁄l
(
é
);

1031 i‡(
cüddr1
 !
wo
->
hißddr


1032 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1033 
‹c
 = 
CONFNAK
;

1034 i‡(!
ªje˘_if_dißgªe
) {

1035 
	`DECPTR
((
u32_t
), 
p
);

1036 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1037 
	`PUTLONG
(
é
, 
p
);

1039 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nak ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1040 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1044 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1045 
‹c
 = 
CONFREJ
;

1046 
wo
->
ªq_addr
 = 0;

1050 
ho
->
√g_addr
 = 1;

1051 
ho
->
hißddr
 = 
cüddr1
;

1052 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1055 
CI_MS_DNS1
:

1056 
CI_MS_DNS2
:

1058 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1061 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1062 
cûí
 !
CILEN_ADDR
) {

1063 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög DNS%d Reque°\n", 
d
+1));

1064 
‹c
 = 
CONFREJ
;

1067 
	`GETLONG
(
é
, 
p
);

1068 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1069 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Naking DNS%d Request %d\n",

1070 
d
+1, 
	`öë_¡ﬂ
(
é
)));

1071 
	`DECPTR
((
u32_t
), 
p
);

1072 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1073 
	`PUTLONG
(
é
, 
p
);

1074 
‹c
 = 
CONFNAK
;

1076 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived DNS%d Reque°\n", 
d
+1));

1079 
CI_MS_WINS1
:

1080 
CI_MS_WINS2
:

1082 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1083 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived WINS%d Reque°\n", 
d
+1));

1086 i‡(
ao
->
wößddr
[
d
] == 0 ||

1087 
cûí
 !
CILEN_ADDR
) {

1088 
‹c
 = 
CONFREJ
;

1091 
	`GETLONG
(
é
, 
p
);

1092 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1093 
	`DECPTR
((
u32_t
), 
p
);

1094 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1095 
	`PUTLONG
(
é
, 
p
);

1096 
‹c
 = 
CONFNAK
;

1100 
CI_COMPRESSTYPE
:

1101 i‡(!
ao
->
√g_vj
) {

1102 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Rejecting COMPRESSTYPEÇotállowed\n"));

1103 
‹c
 = 
CONFREJ
;

1105 } i‡(
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
) {

1106 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPEÜí=%d\n", 
cûí
));

1107 
‹c
 = 
CONFREJ
;

1110 
	`GETSHORT
(
cish‹t
, 
p
);

1112 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1113 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1114 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPE %d\n", 
cish‹t
));

1115 
‹c
 = 
CONFREJ
;

1119 
ho
->
√g_vj
 = 1;

1120 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1121 i‡(
cûí
 =
CILEN_VJ
) {

1122 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1123 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1124 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ max slŸ %d\n", 
max¶Ÿödex
));

1125 
‹c
 = 
CONFNAK
;

1126 i‡(!
ªje˘_if_dißgªe
) {

1127 
	`DECPTR
(1, 
p
);

1128 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1131 
	`GETCHAR
(
cÊag
, 
p
);

1132 i‡(
cÊag
 && !
ao
->cflag) {

1133 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ cÊag %d\n", 
cÊag
));

1134 
‹c
 = 
CONFNAK
;

1135 i‡(!
ªje˘_if_dißgªe
) {

1136 
	`DECPTR
(1, 
p
);

1137 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1140 
ho
->
max¶Ÿödex
 = maxslotindex;

1141 
ho
->
cÊag
 = cflag;

1143 
ho
->
ﬁd_vj
 = 1;

1144 
ho
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

1145 
ho
->
cÊag
 = 1;

1147 
	`IPCPDEBUG
((
LOG_INFO
,

1149 
ho
->
vj_¥Ÿocﬁ
, ho->
ﬁd_vj
, ho->
max¶Ÿödex
, ho->
cÊag
));

1153 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög unknow¿CIÅy≥ %d\n", 
côy≥
));

1154 
‹c
 = 
CONFREJ
;

1158 
ídswôch
:

1159 i‡(
‹c
 =
CONFACK
 &&

1160 
rc
 !
CONFACK
) {

1164 i‡(
‹c
 =
CONFNAK
) {

1165 i‡(
ªje˘_if_dißgªe
) {

1166 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RejectingÅoo manyÇaks\n"));

1167 
‹c
 = 
CONFREJ
;

1169 i‡(
rc
 =
CONFREJ
) {

1172 i‡(
rc
 =
CONFACK
) {

1173 
rc
 = 
CONFNAK
;

1174 
u˝
 = 
öp
;

1179 i‡(
‹c
 =
CONFREJ
 &&

1180 
rc
 !
CONFREJ
) {

1181 
rc
 = 
CONFREJ
;

1182 
u˝
 = 
öp
;

1186 i‡(
u˝
 !
cù
) {

1187 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1191 
	`INCPTR
(
cûí
, 
u˝
);

1201 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 &&

1202 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
) {

1203 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RequestingÖeeráddress\n"));

1204 i‡(
rc
 =
CONFACK
) {

1205 
rc
 = 
CONFNAK
;

1206 
u˝
 = 
öp
;

1207 
wo
->
ªq_addr
 = 0;

1209 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1210 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1211 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1212 
	`PUTLONG
(
é
, 
u˝
);

1215 *
Àn
 = ()(
u˝
 - 
öp
);

1216 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñëu∫ög C⁄figuª-%s\n", 
	`CODENAME
(
rc
)));

1217  (
rc
);

1218 
	}
}

1227 
	$ù_check_›ti⁄s
(
u_l⁄g
 
loˇlAddr
)

1229 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1235 i‡(
wo
->
ouøddr
 =0 && !
µp_£âögs
.
dißbÀ_deÁu…ù
) {

1236 
wo
->
ac˚±_loˇl
 = 1;

1237 
wo
->
ouøddr
 = 
	`ht⁄l
(
loˇlAddr
);

1239 
	}
}

1249 
	$ù˝_up
(
fsm
 *
f
)

1251 
u32_t
 
mask
;

1252 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1253 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1254 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1256 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1257 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: up\n"));

1262 i‡(!
ho
->
√g_addr
) {

1263 
ho
->
hißddr
 = 
wo
->hisaddr;

1266 i‡(
ho
->
hißddr
 == 0) {

1267 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÑemote IPáddress\n"));

1268 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote IPáddress");

1271 i‡(
go
->
ouøddr
 == 0) {

1272 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÜocal IPáddress\n"));

1273 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1277 i‡(
µp_£âögs
.
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1284 i‡(!
	`auth_ù_addr
(
f
->
unô
, 
ho
->
hißddr
)) {

1285 
	`IPCPDEBUG
((
LOG_ERR
, "Peer isÇotáuthorizedÅo useÑemoteáddress %s\n",

1286 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1287 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1292 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1297 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1299 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
, go->
dnßddr
[0], go->dnsaddr[1])) {

1300 
	`IPCPDEBUG
((
LOG_WARNING
, "sifaddr failed\n"));

1301 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1306 i‡(!
	`sifup
(
f
->
unô
)) {

1307 
	`IPCPDEBUG
((
LOG_WARNING
, "sifup failed\n"));

1308 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1312 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1315 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
) {

1316 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
)) {

1317 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1321 
	`IPCPDEBUG
((
LOG_NOTICE
, "loˇ» IPáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
ouøddr
)));

1322 
	`IPCPDEBUG
((
LOG_NOTICE
, "ªmŸêIPáddªs†%s\n", 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1323 i‡(
go
->
dnßddr
[0]) {

1324 
	`IPCPDEBUG
((
LOG_NOTICE
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[0])));

1326 i‡(
go
->
dnßddr
[1]) {

1327 
	`IPCPDEBUG
((
LOG_NOTICE
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[1])));

1329 
	}
}

1339 
	$ù˝_down
(
fsm
 *
f
)

1341 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: down\n"));

1342 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1343 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1345 
	`sifdown
(
f
->
unô
);

1346 
	`ù˝_˛ór_addrs
(
f
->
unô
);

1347 
	}
}

1354 
	$ù˝_˛ór_addrs
(
unô
)

1356 
u32_t
 
ouøddr
, 
hißddr
;

1358 
ouøddr
 = 
ù˝_gŸ›ti⁄s
[
unô
].ouraddr;

1359 
hißddr
 = 
ù˝_his›ti⁄s
[
unô
].hisaddr;

1360 i‡(
deÁu…_rouã_£t
[
unô
]) {

1361 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

1362 
deÁu…_rouã_£t
[
unô
] = 0;

1364 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

1365 
	}
}

1372 
	$ù˝_föished
(
fsm
 *
f
)

1374 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

1375 
	}
}

1379 
	$ù˝_¥öçkt
(
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1381 
	`LWIP_UNUSED_ARG
(
p
);

1382 
	`LWIP_UNUSED_ARG
(
∂í
);

1383 
	`LWIP_UNUSED_ARG
(
¥öãr
);

1384 
	`LWIP_UNUSED_ARG
(
¨g
);

1386 
	}
}

1393 
	#IP_HDRLEN
 20

	)

1394 
	#IP_OFFMASK
 0x1fff

	)

1395 
	#IPPROTO_TCP
 6

	)

1396 
	#TCP_HDRLEN
 20

	)

1397 
	#TH_FIN
 0x01

	)

1404 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

1405 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

1406 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

1407 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

1408 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1409 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1412 
	$ù_a˘ive_pkt
(
u_ch¨
 *
pkt
, 
Àn
)

1414 
u_ch¨
 *
t˝
;

1415 
hÀn
;

1417 
Àn
 -
PPP_HDRLEN
;

1418 
pkt
 +
PPP_HDRLEN
;

1419 i‡(
Àn
 < 
IP_HDRLEN
) {

1422 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0) {

1425 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
) {

1428 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

1429 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
) {

1432 
t˝
 = 
pkt
 + 
hÀn
;

1433 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4) {

1437 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ipcp.h

54 #i‚de‡
IPCP_H


55 
	#IPCP_H


	)

63 
	#CI_ADDRS
 1

	)

64 
	#CI_COMPRESSTYPE
 2

	)

65 
	#CI_ADDR
 3

	)

67 
	#CI_MS_WINS1
 128

	)

68 
	#CI_MS_DNS1
 129

	)

69 
	#CI_MS_WINS2
 130

	)

70 
	#CI_MS_DNS2
 131

	)

72 
	#IPCP_VJMODE_OLD
 1

	)

73 
	#IPCP_VJMODE_RFC1172
 2

	)

74 
	#IPCP_VJMODE_RFC1332
 3

	)

77 
	#IPCP_VJ_COMP
 0x002d

	)

78 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

86 
	sù˝_›ti⁄s
 {

87 
u_öt
 
	m√g_addr
 : 1;

88 
u_öt
 
	mﬁd_addrs
 : 1;

89 
u_öt
 
	mªq_addr
 : 1;

90 
u_öt
 
	mdeÁu…_rouã
 : 1;

91 
u_öt
 
	m¥oxy_¨p
 : 1;

92 
u_öt
 
	m√g_vj
 : 1;

93 
u_öt
 
	mﬁd_vj
 : 1;

94 
u_öt
 
	mac˚±_loˇl
 : 1;

95 
u_öt
 
	mac˚±_ªmŸe
 : 1;

96 
u_öt
 
	mªq_dns1
 : 1;

97 
u_öt
 
	mªq_dns2
 : 1;

98 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

99 
u_ch¨
 
	mmax¶Ÿödex
;

100 
u_ch¨
 
	mcÊag
;

101 
u32_t
 
	mouøddr
, 
	mhißddr
;

102 
u32_t
 
	mdnßddr
[2];

103 
u32_t
 
	mwößddr
[2];

104 } 
	tù˝_›ti⁄s
;

111 
fsm
 
ù˝_fsm
[];

112 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

113 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

114 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

115 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

117 
¥Ÿít
 
ù˝_¥Ÿít
;

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/lcp.c

54 
	~"lwù/›t.h
"

56 #i‡
PPP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"fsm.h
"

62 
	~"ch≠.h
"

63 
	~"magic.h
"

64 
	~"auth.h
"

65 
	~"l˝.h
"

67 
	~<°rög.h
>

69 #i‡
PPPOE_SUPPORT


70 
	~"√tif/µp_€.h
"

72 
	#PPPOE_MAXMTU
 
PPP_MAXMRU


	)

82 
	#CILEN_VOID
 2

	)

83 
	#CILEN_CHAR
 3

	)

84 
	#CILEN_SHORT
 4

	)

85 
	#CILEN_CHAP
 5

	)

86 
	#CILEN_LONG
 6

	)

87 
	#CILEN_LQR
 8

	)

88 
	#CILEN_CBCP
 3

	)

97 
l˝_ª£tci
 (
fsm
*);

98 
l˝_cûí
 (
fsm
*);

99 
l˝_addci
 (
fsm
*, 
u_ch¨
*, *);

100 
l˝_ackci
 (
fsm
*, 
u_ch¨
*, );

101 
l˝_«kci
 (
fsm
*, 
u_ch¨
*, );

102 
l˝_ªjci
 (
fsm
*, 
u_ch¨
*, );

103 
l˝_ªqci
 (
fsm
*, 
u_ch¨
*, *, );

104 
l˝_up
 (
fsm
*);

105 
l˝_down
 (
fsm
*);

106 
l˝_°¨tög
 (
fsm
*);

107 
l˝_föished
 (
fsm
*);

108 
l˝_extcode
 (
fsm
*, , 
u_ch¨
, u_char*, );

110 
l˝_ΩrŸªj
 (
fsm
*, 
u_ch¨
*, );

115 
l˝_echo_lowîup
 ();

116 
l˝_echo_lowîdown
 ();

117 
L˝EchoTimeout
 (*);

118 
l˝_ª˚ived_echo_ª∂y
 (
fsm
*, , 
u_ch¨
*, );

119 
L˝SídEchoReque°
 (
fsm
*);

120 
L˝LökFaûuª
 (
fsm
*);

121 
L˝EchoCheck
 (
fsm
*);

127 
l˝_öput
 (, 
u_ch¨
 *, );

128 
l˝_¥Ÿªj
 ();

130 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : (xË=
CONFNAK
 ? "NAK" : "REJ")

	)

137 
LökPha£
 
	gl˝_pha£
[
NUM_PPP
];

138 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

139 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

140 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

141 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

142 
ext_accm
 
	gxmô_accm
[
NUM_PPP
];

149 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

150 
u_öt
 
	gl˝_echo_öãrvÆ
 = 
LCP_ECHOINTERVAL
;

151 
u_öt
 
	gl˝_echo_Áûs
 = 
LCP_MAXECHOFAILS
;

152 
u32_t
 
	gl˝_echos_≥ndög
 = 0;

153 
u32_t
 
	gl˝_echo_numbî
 = 0;

154 
u32_t
 
	gl˝_echo_timî_ru¬ög
 = 0;

156 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

158 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

159 
l˝_ª£tci
,

160 
l˝_cûí
,

161 
l˝_addci
,

162 
l˝_ackci
,

163 
l˝_«kci
,

164 
l˝_ªjci
,

165 
l˝_ªqci
,

166 
l˝_up
,

167 
l˝_down
,

168 
l˝_°¨tög
,

169 
l˝_föished
,

170 
NULL
,

171 
NULL
,

172 
l˝_extcode
,

176 
¥Ÿít
 
	gl˝_¥Ÿít
 = {

177 
PPP_LCP
,

178 
l˝_öô
,

179 
l˝_öput
,

180 
l˝_¥Ÿªj
,

181 
l˝_lowîup
,

182 
l˝_lowîdown
,

183 
l˝_›í
,

184 
l˝_˛o£
,

186 
l˝_¥öçkt
,

187 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL


198 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

209 
	$l˝_öô
(
unô
)

211 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

212 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

213 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

215 
f
->
unô
 = unit;

216 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

217 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

219 
	`fsm_öô
(
f
);

221 
wo
->
∑ssive
 = 0;

222 
wo
->
sûít
 = 0;

223 
wo
->
ª°¨t
 = 0;

224 
wo
->
√g_mru
 = 1;

225 
wo
->
mru
 = 
PPP_DEFMRU
;

226 
wo
->
√g_asyncm≠
 = 1;

227 
wo
->
asyncm≠
 = 0x00000000l;

228 
wo
->
√g_ch≠
 = 0;

229 
wo
->
√g_u∑p
 = 0;

230 
wo
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

231 
wo
->
√g_magi˙umbî
 = 1;

232 
wo
->
√g_pcom¥essi⁄
 = 1;

233 
wo
->
√g_accom¥essi⁄
 = 1;

234 
wo
->
√g_lqr
 = 0;

235 
wo
->
√g_cb˝
 = 0;

237 
ao
->
√g_mru
 = 1;

238 
ao
->
mru
 = 
PPP_MAXMRU
;

239 
ao
->
√g_asyncm≠
 = 1;

240 
ao
->
asyncm≠
 = 0x00000000l;

241 
ao
->
√g_ch≠
 = (
CHAP_SUPPORT
 != 0);

242 
ao
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

243 
ao
->
√g_u∑p
 = (
PAP_SUPPORT
 != 0);

244 
ao
->
√g_magi˙umbî
 = 1;

245 
ao
->
√g_pcom¥essi⁄
 = 1;

246 
ao
->
√g_accom¥essi⁄
 = 1;

247 
ao
->
√g_lqr
 = 0;

248 
ao
->
√g_cb˝
 = (
CBCP_SUPPORT
 != 0);

254 
	`mem£t
(
xmô_accm
[
unô
], 0, (xmit_accm[0]));

255 
xmô_accm
[
unô
][15] = 0x60;

256 
xmô_accm
[
unô
][0] = (
u_ch¨
)((
ao
->
asyncm≠
 & 0xFF));

257 
xmô_accm
[
unô
][1] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 8) & 0xFF);

258 
xmô_accm
[
unô
][2] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 16) & 0xFF);

259 
xmô_accm
[
unô
][3] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 24) & 0xFF);

260 
	`LCPDEBUG
((
LOG_INFO
, "lcp_init: xmit_accm=%X %X %X %X\n",

261 
xmô_accm
[
unô
][0],

262 
xmô_accm
[
unô
][1],

263 
xmô_accm
[
unô
][2],

264 
xmô_accm
[
unô
][3]));

266 
l˝_pha£
[
unô
] = 
PHASE_INITIALIZE
;

267 
	}
}

274 
	$l˝_›í
(
unô
)

276 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

277 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

279 
f
->
Êags
 = 0;

280 i‡(
wo
->
∑ssive
) {

281 
f
->
Êags
 |
OPT_PASSIVE
;

283 i‡(
wo
->
sûít
) {

284 
f
->
Êags
 |
OPT_SILENT
;

286 
	`fsm_›í
(
f
);

288 
l˝_pha£
[
unô
] = 
PHASE_ESTABLISH
;

289 
	}
}

296 
	$l˝_˛o£
(
unô
, *
ªas⁄
)

298 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

300 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

301 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

303 i‡(
f
->
°©e
 =
LS_STOPPED
 && f->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
)) {

310 
f
->
°©e
 = 
LS_CLOSED
;

311 
	`l˝_föished
(
f
);

313 
	`fsm_˛o£
(&
l˝_fsm
[
unô
], 
ªas⁄
);

315 
	}
}

322 
	$l˝_lowîup
(
unô
)

324 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

331 
	`µp_£t_xaccm
(
unô
, &
xmô_accm
[unit]);

332 
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

333 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, 0x00000000l,

334 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
);

335 
≥î_mru
[
unô
] = 
PPP_MRU
;

336 
l˝_Ælow›ti⁄s
[
unô
].
asyncm≠
 = (
u_l⁄g
)
xmô_accm
[unit][0]

337 | ((
u_l⁄g
)
xmô_accm
[
unô
][1] << 8)

338 | ((
u_l⁄g
)
xmô_accm
[
unô
][2] << 16)

339 | ((
u_l⁄g
)
xmô_accm
[
unô
][3] << 24);

340 
	`LCPDEBUG
((
LOG_INFO
, "lcp_lowerup:ásyncmap=%X %X %X %X\n",

341 
xmô_accm
[
unô
][3],

342 
xmô_accm
[
unô
][2],

343 
xmô_accm
[
unô
][1],

344 
xmô_accm
[
unô
][0]));

346 
	`fsm_lowîup
(&
l˝_fsm
[
unô
]);

347 
	}
}

354 
	$l˝_lowîdown
(
unô
)

356 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

357 
	}
}

363 
	$l˝_•rŸªj
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

370 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
, 
p
, 
Àn
);

371 
	}
}

382 
	$l˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

384 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

386 
	`fsm_öput
(
f
, 
p
, 
Àn
);

387 
	}
}

394 
	$l˝_extcode
(
fsm
 *
f
, 
code
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

396 
u_ch¨
 *
magp
;

398  
code
 ){

399 
PROTREJ
:

400 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

403 
ECHOREQ
:

404 i‡(
f
->
°©e
 !
LS_OPENED
) {

407 
	`LCPDEBUG
((
LOG_INFO
, "l˝: Echo-Reque°, Rcvd id %d\n", 
id
));

408 
magp
 = 
öp
;

409 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

410 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

413 
ECHOREP
:

414 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

417 
DISCREQ
:

424 
	}
}

433 
	$l˝_ΩrŸªj
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

435 
i
;

436 
¥Ÿít
 *
¥Ÿp
;

437 
u_sh‹t
 
¥Ÿ
;

439 i‡(
Àn
 <  (
u_sh‹t
)) {

440 
	`LCPDEBUG
((
LOG_INFO
, "lcp_rprotrej: Rcvd short Protocol-RejectÖacket!\n"));

444 
	`GETSHORT
(
¥Ÿ
, 
öp
);

446 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ΩrŸªj: Rcvd PrŸocﬁ-Reje˘Öackë f‹ %x!\n", 
¥Ÿ
));

452 if–
f
->
°©e
 !
LS_OPENED
 ) {

453 
	`LCPDEBUG
((
LOG_INFO
, "PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d\n", 
f
->
°©e
));

460 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

461 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

462 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

467 
	`LCPDEBUG
((
LOG_WARNING
, "PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x\n", 
¥Ÿ
));

468 
	}
}

475 
	$l˝_¥Ÿªj
(
unô
)

477 
	`LWIP_UNUSED_ARG
(
unô
);

481 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_protrej: Received Protocol-Reject for LCP!\n"));

482 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

483 
	}
}

490 
	$l˝_ª£tci
(
fsm
 *
f
)

492 
l˝_w™t›ti⁄s
[
f
->
unô
].
magi˙umbî
 = 
	`magic
();

493 
l˝_w™t›ti⁄s
[
f
->
unô
].
numlo›s
 = 0;

494 
l˝_gŸ›ti⁄s
[
f
->
unô
] = 
l˝_w™t›ti⁄s
[f->unit];

495 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

496 
	`auth_ª£t
(
f
->
unô
);

497 
	}
}

503 
	$l˝_cûí
(
fsm
 *
f
)

505 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

507 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

508 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

509 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

510 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

511 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

512 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

517  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) +

518 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) +

519 
	`LENCICHAP
(
go
->
√g_ch≠
) +

520 
	`LENCISHORT
(!
go
->
√g_ch≠
 && go->
√g_u∑p
) +

521 
	`LENCILQR
(
go
->
√g_lqr
) +

522 
	`LENCICBCP
(
go
->
√g_cb˝
) +

523 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

524 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

525 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
));

526 
	}
}

533 
	$l˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

535 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

536 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

538 
	#ADDCIVOID
(
›t
, 
√g
) \

539 i‡(
√g
) { \

540 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: o±=%d\n", 
›t
)); \

541 
	`PUTCHAR
(
›t
, 
u˝
); \

542 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

543 }

	)

544 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

545 i‡(
√g
) { \

546 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: INT o±=%d %X\n", 
›t
, 
vÆ
)); \

547 
	`PUTCHAR
(
›t
, 
u˝
); \

548 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

549 
	`PUTSHORT
(
vÆ
, 
u˝
); \

550 }

	)

551 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

552 i‡(
√g
) { \

553 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAP o±=%d %X\n", 
›t
, 
vÆ
)); \

554 
	`PUTCHAR
(
›t
, 
u˝
); \

555 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

556 
	`PUTSHORT
(
vÆ
, 
u˝
); \

557 
	`PUTCHAR
(
dige°
, 
u˝
); \

558 }

	)

559 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

560 i‡(
√g
) { \

561 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: L o±=%d %lX\n", 
›t
, 
vÆ
)); \

562 
	`PUTCHAR
(
›t
, 
u˝
); \

563 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

564 
	`PUTLONG
(
vÆ
, 
u˝
); \

565 }

	)

566 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

567 i‡(
√g
) { \

568 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: LQR o±=%d %lX\n", 
›t
, 
vÆ
)); \

569 
	`PUTCHAR
(
›t
, 
u˝
); \

570 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

571 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

572 
	`PUTLONG
(
vÆ
, 
u˝
); \

573 }

	)

574 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

575 i‡(
√g
) { \

576 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAR o±=%d %X '%z'\n", 
›t
, 
vÆ
, val)); \

577 
	`PUTCHAR
(
›t
, 
u˝
); \

578 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

579 
	`PUTCHAR
(
vÆ
, 
u˝
); \

580 }

	)

582 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

583 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

584 
	`ADDCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

585 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

586 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

587 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

588 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

589 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

590 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

592 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

594 
	`LCPDEBUG
((
LOG_ERR
, "Bug inÜcp_addci: wrongÜength\n"));

596 
	}
}

608 
	$l˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

610 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

611 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

612 
u_sh‹t
 
cish‹t
;

613 
u32_t
 
cû⁄g
;

620 
	#ACKCIVOID
(
›t
, 
√g
) \

621 i‡(
√g
) { \

622 i‡((
Àn
 -
CILEN_VOID
) < 0) \

623 
bad
; \

624 
	`GETCHAR
(
côy≥
, 
p
); \

625 
	`GETCHAR
(
cûí
, 
p
); \

626 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

627 
bad
; \

628 }

	)

629 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

630 i‡(
√g
) { \

631 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

632 
bad
; \

633 
	`GETCHAR
(
côy≥
, 
p
); \

634 
	`GETCHAR
(
cûí
, 
p
); \

635 i‡(
cûí
 !
CILEN_SHORT
 || 
côy≥
 !
›t
) \

636 
bad
; \

637 
	`GETSHORT
(
cish‹t
, 
p
); \

638 i‡(
cish‹t
 !
vÆ
) \

639 
bad
; \

640 }

	)

641 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

642 i‡(
√g
) { \

643 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

644 
bad
; \

645 
	`GETCHAR
(
côy≥
, 
p
); \

646 
	`GETCHAR
(
cûí
, 
p
); \

647 i‡(
cûí
 !
CILEN_CHAR
 || 
côy≥
 !
›t
) \

648 
bad
; \

649 
	`GETCHAR
(
cich¨
, 
p
); \

650 i‡(
cich¨
 !
vÆ
) \

651 
bad
; \

652 }

	)

653 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

654 i‡(
√g
) { \

655 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

656 
bad
; \

657 
	`GETCHAR
(
côy≥
, 
p
); \

658 
	`GETCHAR
(
cûí
, 
p
); \

659 i‡(
cûí
 !
CILEN_CHAP
 || 
côy≥
 !
›t
) \

660 
bad
; \

661 
	`GETSHORT
(
cish‹t
, 
p
); \

662 i‡(
cish‹t
 !
vÆ
) \

663 
bad
; \

664 
	`GETCHAR
(
cich¨
, 
p
); \

665 i‡(
cich¨
 !
dige°
) \

666 
bad
; \

667 }

	)

668 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

669 i‡(
√g
) { \

670 i‡((
Àn
 -
CILEN_LONG
) < 0) \

671 
bad
; \

672 
	`GETCHAR
(
côy≥
, 
p
); \

673 
	`GETCHAR
(
cûí
, 
p
); \

674 i‡(
cûí
 !
CILEN_LONG
 || 
côy≥
 !
›t
) \

675 
bad
; \

676 
	`GETLONG
(
cû⁄g
, 
p
); \

677 i‡(
cû⁄g
 !
vÆ
) \

678 
bad
; \

679 }

	)

680 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

681 i‡(
√g
) { \

682 i‡((
Àn
 -
CILEN_LQR
) < 0) \

683 
bad
; \

684 
	`GETCHAR
(
côy≥
, 
p
); \

685 
	`GETCHAR
(
cûí
, 
p
); \

686 i‡(
cûí
 !
CILEN_LQR
 || 
côy≥
 !
›t
) \

687 
bad
; \

688 
	`GETSHORT
(
cish‹t
, 
p
); \

689 i‡(
cish‹t
 !
PPP_LQR
) \

690 
bad
; \

691 
	`GETLONG
(
cû⁄g
, 
p
); \

692 i‡(
cû⁄g
 !
vÆ
) \

693 
bad
; \

694 }

	)

696 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

697 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

698 
	`ACKCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

699 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

700 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

701 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

702 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

703 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

704 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

709 i‡(
Àn
 != 0) {

710 
bad
;

712 
	`LCPDEBUG
((
LOG_INFO
, "lcp_acki: Ack\n"));

714 
bad
:

715 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_acki:Ñeceived bad Ack!\n"));

717 
	}
}

730 
	$l˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

732 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

733 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

734 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

735 
u_sh‹t
 
cish‹t
;

736 
u32_t
 
cû⁄g
;

737 
l˝_›ti⁄s
 
no
;

738 
l˝_›ti⁄s
 
åy
;

739 
lo›ed_back
 = 0;

740 
cûí
;

742 
	`BZERO
(&
no
, (no));

743 
åy
 = *
go
;

750 
	#NAKCIVOID
(
›t
, 
√g
, 
code
) \

751 i‡(
go
->
√g
 && \

752 
Àn
 >
CILEN_VOID
 && \

753 
p
[1] =
CILEN_VOID
 && \

754 
p
[0] =
›t
) { \

755 
Àn
 -
CILEN_VOID
; \

756 
	`INCPTR
(
CILEN_VOID
, 
p
); \

757 
no
.
√g
 = 1; \

758 
code
 \

759 }

	)

760 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

761 i‡(
go
->
√g
 && \

762 
Àn
 >
CILEN_CHAP
 && \

763 
p
[1] =
CILEN_CHAP
 && \

764 
p
[0] =
›t
) { \

765 
Àn
 -
CILEN_CHAP
; \

766 
	`INCPTR
(2, 
p
); \

767 
	`GETSHORT
(
cish‹t
, 
p
); \

768 
	`GETCHAR
(
cich¨
, 
p
); \

769 
no
.
√g
 = 1; \

770 
code
 \

771 }

	)

772 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

773 i‡(
go
->
√g
 && \

774 
Àn
 >
CILEN_CHAR
 && \

775 
p
[1] =
CILEN_CHAR
 && \

776 
p
[0] =
›t
) { \

777 
Àn
 -
CILEN_CHAR
; \

778 
	`INCPTR
(2, 
p
); \

779 
	`GETCHAR
(
cich¨
, 
p
); \

780 
no
.
√g
 = 1; \

781 
code
 \

782 }

	)

783 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

784 i‡(
go
->
√g
 && \

785 
Àn
 >
CILEN_SHORT
 && \

786 
p
[1] =
CILEN_SHORT
 && \

787 
p
[0] =
›t
) { \

788 
Àn
 -
CILEN_SHORT
; \

789 
	`INCPTR
(2, 
p
); \

790 
	`GETSHORT
(
cish‹t
, 
p
); \

791 
no
.
√g
 = 1; \

792 
code
 \

793 }

	)

794 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

795 i‡(
go
->
√g
 && \

796 
Àn
 >
CILEN_LONG
 && \

797 
p
[1] =
CILEN_LONG
 && \

798 
p
[0] =
›t
) { \

799 
Àn
 -
CILEN_LONG
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
cû⁄g
, 
p
); \

802 
no
.
√g
 = 1; \

803 
code
 \

804 }

	)

805 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

806 i‡(
go
->
√g
 && \

807 
Àn
 >
CILEN_LQR
 && \

808 
p
[1] =
CILEN_LQR
 && \

809 
p
[0] =
›t
) { \

810 
Àn
 -
CILEN_LQR
; \

811 
	`INCPTR
(2, 
p
); \

812 
	`GETSHORT
(
cish‹t
, 
p
); \

813 
	`GETLONG
(
cû⁄g
, 
p
); \

814 
no
.
√g
 = 1; \

815 
code
 \

816 }

	)

825 i‡(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) {

826 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

827 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à< 
PPP_DEFMRU
) {

828 
åy
.
mru
 = 
cish‹t
;

836 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) {

837 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

838 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

847 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
)

848 && 
Àn
 >
CILEN_SHORT


849 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

850 
cûí
 = 
p
[1];

851 
Àn
 -
cûí
;

852 
no
.
√g_ch≠
 = 
go
->neg_chap;

853 
no
.
√g_u∑p
 = 
go
->neg_upap;

854 
	`INCPTR
(2, 
p
);

855 
	`GETSHORT
(
cish‹t
, 
p
);

856 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

862 i‡(!
go
->
√g_ch≠
) {

863 
bad
;

865 
åy
.
√g_ch≠
 = 0;

867 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

868 
	`GETCHAR
(
cich¨
, 
p
);

869 i‡(
go
->
√g_ch≠
) {

875 i‡(
cich¨
 !
go
->
ch≠_mdty≥
) {

876 
åy
.
√g_ch≠
 = 0;

882 
åy
.
√g_u∑p
 = 0;

890 i‡(
go
->
√g_ch≠
) {

891 
åy
.
√g_ch≠
 = 0;

893 
åy
.
√g_u∑p
 = 0;

895 
p
 +
cûí
 - 
CILEN_SHORT
;

904 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

905 i‡(
cish‹t
 !
PPP_LQR
) {

906 
åy
.
√g_lqr
 = 0;

908 
åy
.
lqr_≥riod
 = 
cû⁄g
;

915 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

916 
åy
.
√g_cb˝
 = 0;

922 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

923 
åy
.
magi˙umbî
 = 
	`magic
();

924 
lo›ed_back
 = 1;

932 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
,

933 
åy
.
√g_pcom¥essi⁄
 = 0;

935 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
,

936 
åy
.
√g_accom¥essi⁄
 = 0;

955 
Àn
 > 
CILEN_VOID
) {

956 
	`GETCHAR
(
côy≥
, 
p
);

957 
	`GETCHAR
(
cûí
, 
p
);

958 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0) {

959 
bad
;

961 
√xt
 = 
p
 + 
cûí
 - 2;

963 
côy≥
) {

964 
CI_MRU
:

965 i‡((
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
)

966 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
) {

967 
bad
;

969 
	`GETSHORT
(
cish‹t
, 
p
);

970 i‡(
cish‹t
 < 
PPP_DEFMRU
) {

971 
åy
.
mru
 = 
cish‹t
;

974 
CI_ASYNCMAP
:

975 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl)

976 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
) {

977 
bad
;

980 
CI_AUTHTYPE
:

981 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap) {

982 
bad
;

985 
CI_MAGICNUMBER
:

986 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

987 
cûí
 !
CILEN_LONG
) {

988 
bad
;

991 
CI_PCOMPRESSION
:

992 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

993 || 
cûí
 !
CILEN_VOID
) {

994 
bad
;

997 
CI_ACCOMPRESSION
:

998 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

999 || 
cûí
 !
CILEN_VOID
) {

1000 
bad
;

1003 
CI_QUALITY
:

1004 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
) {

1005 
bad
;

1009 
p
 = 
√xt
;

1013 i‡(
Àn
 != 0) {

1014 
bad
;

1020 i‡(
f
->
°©e
 !
LS_OPENED
) {

1021 i‡(
lo›ed_back
) {

1022 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1023 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜine isÜooped back.\n"));

1024 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1027 
åy
.
numlo›s
 = 0;

1029 *
go
 = 
åy
;

1034 
bad
:

1035 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_nakci:Ñeceived bad Nak!\n"));

1037 
	}
}

1050 
	$l˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

1052 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1053 
u_ch¨
 
cich¨
;

1054 
u_sh‹t
 
cish‹t
;

1055 
u32_t
 
cû⁄g
;

1056 
l˝_›ti⁄s
 
åy
;

1058 
åy
 = *
go
;

1065 
	#REJCIVOID
(
›t
, 
√g
) \

1066 i‡(
go
->
√g
 && \

1067 
Àn
 >
CILEN_VOID
 && \

1068 
p
[1] =
CILEN_VOID
 && \

1069 
p
[0] =
›t
) { \

1070 
Àn
 -
CILEN_VOID
; \

1071 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1072 
åy
.
√g
 = 0; \

1073 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªjci: void o± %dÑeje˘ed\n", 
›t
)); \

1074 }

	)

1075 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1076 i‡(
go
->
√g
 && \

1077 
Àn
 >
CILEN_SHORT
 && \

1078 
p
[1] =
CILEN_SHORT
 && \

1079 
p
[0] =
›t
) { \

1080 
Àn
 -
CILEN_SHORT
; \

1081 
	`INCPTR
(2, 
p
); \

1082 
	`GETSHORT
(
cish‹t
, 
p
); \

1084 i‡(
cish‹t
 !
vÆ
) { \

1085 
bad
; \

1087 
åy
.
√g
 = 0; \

1088 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: sh‹à›à%dÑeje˘ed\n", 
›t
)); \

1089 }

	)

1090 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

1091 i‡(
go
->
√g
 && \

1092 
Àn
 >
CILEN_CHAP
 && \

1093 
p
[1] =
CILEN_CHAP
 && \

1094 
p
[0] =
›t
) { \

1095 
Àn
 -
CILEN_CHAP
; \

1096 
	`INCPTR
(2, 
p
); \

1097 
	`GETSHORT
(
cish‹t
, 
p
); \

1098 
	`GETCHAR
(
cich¨
, 
p
); \

1100 i‡(
cish‹t
 !
vÆ
 || 
cich¨
 !
dige°
) { \

1101 
bad
; \

1103 
åy
.
√g
 = 0; \

1104 
åy
.
√g_u∑p
 = 0; \

1105 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: ch≠ o± %dÑeje˘ed\n", 
›t
)); \

1106 }

	)

1107 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1108 i‡(
go
->
√g
 && \

1109 
Àn
 >
CILEN_LONG
 && \

1110 
p
[1] =
CILEN_LONG
 && \

1111 
p
[0] =
›t
) { \

1112 
Àn
 -
CILEN_LONG
; \

1113 
	`INCPTR
(2, 
p
); \

1114 
	`GETLONG
(
cû⁄g
, 
p
); \

1116 i‡(
cû⁄g
 !
vÆ
) { \

1117 
bad
; \

1119 
åy
.
√g
 = 0; \

1120 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci:Ü⁄g o± %dÑeje˘ed\n", 
›t
)); \

1121 }

	)

1122 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1123 i‡(
go
->
√g
 && \

1124 
Àn
 >
CILEN_LQR
 && \

1125 
p
[1] =
CILEN_LQR
 && \

1126 
p
[0] =
›t
) { \

1127 
Àn
 -
CILEN_LQR
; \

1128 
	`INCPTR
(2, 
p
); \

1129 
	`GETSHORT
(
cish‹t
, 
p
); \

1130 
	`GETLONG
(
cû⁄g
, 
p
); \

1132 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) { \

1133 
bad
; \

1135 
åy
.
√g
 = 0; \

1136 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: LQR o± %dÑeje˘ed\n", 
›t
)); \

1137 }

	)

1138 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1139 i‡(
go
->
√g
 && \

1140 
Àn
 >
CILEN_CBCP
 && \

1141 
p
[1] =
CILEN_CBCP
 && \

1142 
p
[0] =
›t
) { \

1143 
Àn
 -
CILEN_CBCP
; \

1144 
	`INCPTR
(2, 
p
); \

1145 
	`GETCHAR
(
cich¨
, 
p
); \

1147 i‡(
cich¨
 !
vÆ
) { \

1148 
bad
; \

1150 
åy
.
√g
 = 0; \

1151 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: CÆlback o± %dÑeje˘ed\n", 
›t
)); \

1152 }

	)

1154 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1155 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1156 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
PPP_CHAP
, 
go
->
ch≠_mdty≥
);

1157 i‡(!
go
->
√g_ch≠
) {

1158 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1160 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1161 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1162 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1163 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1164 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1169 i‡(
Àn
 != 0) {

1170 
bad
;

1175 i‡(
f
->
°©e
 !
LS_OPENED
) {

1176 *
go
 = 
åy
;

1180 
bad
:

1181 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_rejci:Ñeceived bad Reject!\n"));

1183 
	}
}

1194 
	$l˝_ªqci
(
fsm
 *
f
,

1195 
u_ch¨
 *
öp
,

1196 *
À≈
,

1197 
ªje˘_if_dißgªe
)

1199 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1200 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1201 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1202 
u_ch¨
 *
cù
, *
√xt
;

1203 
cûí
, 
côy≥
, 
cich¨
;

1204 
u_sh‹t
 
cish‹t
;

1205 
u32_t
 
cû⁄g
;

1206 
rc
 = 
CONFACK
;

1207 
‹c
;

1208 
u_ch¨
 *
p
;

1209 
u_ch¨
 *
ªjp
;

1210 
u_ch¨
 *
«kp
;

1211 
l
 = *
À≈
;

1212 #i‡
TRACELCP
 > 0

1213 
åa˚Buf
[80];

1214 
åa˚Ndx
 = 0;

1220 
	`BZERO
(
ho
, (*ho));

1225 
√xt
 = 
öp
;

1226 
«kp
 = 
«k_buf„r
;

1227 
ªjp
 = 
öp
;

1228 
l
) {

1229 
‹c
 = 
CONFACK
;

1230 
cù
 = 
p
 = 
√xt
;

1231 i‡(
l
 < 2 ||

1232 
p
[1] < 2 ||

1233 
p
[1] > 
l
) {

1234 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: bad CIÜength!\n"));

1235 
‹c
 = 
CONFREJ
;

1236 
cûí
 = 
l
;

1237 
l
 = 0;

1238 
côy≥
 = 0;

1239 
ídswôch
;

1241 
	`GETCHAR
(
côy≥
, 
p
);

1242 
	`GETCHAR
(
cûí
, 
p
);

1243 
l
 -
cûí
;

1244 
√xt
 +
cûí
;

1246 
côy≥
) {

1247 
CI_MRU
:

1248 i‡(!
ao
->
√g_mru
) {

1249 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU -Çotállowed\n"));

1250 
‹c
 = 
CONFREJ
;

1252 } i‡(
cûí
 !
CILEN_SHORT
) {

1253 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU - badÜength\n"));

1254 
‹c
 = 
CONFREJ
;

1257 
	`GETSHORT
(
cish‹t
, 
p
);

1264 i‡(
cish‹t
 < 
PPP_MINMRU
) {

1265 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak - MRUÅoo small\n"));

1266 
‹c
 = 
CONFNAK
;

1267 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1268 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1269 
	`PUTSHORT
(
PPP_MINMRU
, 
«kp
);

1272 
ho
->
√g_mru
 = 1;

1273 
ho
->
mru
 = 
cish‹t
;

1274 #i‡
TRACELCP
 > 0

1275 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MRU %d", 
cish‹t
);

1276 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1280 
CI_ASYNCMAP
:

1281 i‡(!
ao
->
√g_asyncm≠
) {

1282 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAPÇotállowed\n"));

1283 
‹c
 = 
CONFREJ
;

1285 } i‡(
cûí
 !
CILEN_LONG
) {

1286 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAP badÜength\n"));

1287 
‹c
 = 
CONFREJ
;

1290 
	`GETLONG
(
cû⁄g
, 
p
);

1296 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1297 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak ASYNCMAP %lX missing %lX\n",

1298 
cû⁄g
, 
ao
->
asyncm≠
));

1299 
‹c
 = 
CONFNAK
;

1300 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1301 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1302 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1305 
ho
->
√g_asyncm≠
 = 1;

1306 
ho
->
asyncm≠
 = 
cû⁄g
;

1307 #i‡
TRACELCP
 > 0

1308 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " ASYNCMAP=%lX", 
cû⁄g
);

1309 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1313 
CI_AUTHTYPE
:

1314 i‡(
cûí
 < 
CILEN_SHORT
) {

1315 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPE missingárg\n"));

1316 
‹c
 = 
CONFREJ
;

1318 } i‡(!(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
)) {

1322 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPEÇotállowed\n"));

1323 
‹c
 = 
CONFREJ
;

1326 
	`GETSHORT
(
cish‹t
, 
p
);

1339 i‡(
cish‹t
 =
PPP_PAP
) {

1340 i‡(
ho
->
√g_ch≠
) {

1341 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAPálreadyáccepted\n"));

1342 
‹c
 = 
CONFREJ
;

1344 } i‡(
cûí
 !
CILEN_SHORT
) {

1345 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAP badÜen\n"));

1346 
‹c
 = 
CONFREJ
;

1349 i‡(!
ao
->
√g_u∑p
) {

1350 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE PAPÇotállowed\n"));

1351 
‹c
 = 
CONFNAK
;

1352 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1353 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1354 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1355 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1358 
ho
->
√g_u∑p
 = 1;

1359 #i‡
TRACELCP
 > 0

1360 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " PAP (%X)", 
cish‹t
);

1361 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1365 i‡(
cish‹t
 =
PPP_CHAP
) {

1366 i‡(
ho
->
√g_u∑p
) {

1367 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAPáccepted PAP\n"));

1368 
‹c
 = 
CONFREJ
;

1370 } i‡(
cûí
 !
CILEN_CHAP
) {

1371 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAP badÜen\n"));

1372 
‹c
 = 
CONFREJ
;

1375 i‡(!
ao
->
√g_ch≠
) {

1376 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE CHAPÇotállowed\n"));

1377 
‹c
 = 
CONFNAK
;

1378 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1379 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1380 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1383 
	`GETCHAR
(
cich¨
, 
p
);

1384 i‡(
cich¨
 !
CHAP_DIGEST_MD5


1385 #ifde‡
CHAPMS


1386 && 
cich¨
 !
CHAP_MICROSOFT


1389 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE CHAP dige°=%d\n", 
cich¨
));

1390 
‹c
 = 
CONFNAK
;

1391 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1392 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1393 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1394 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1397 #i‡
TRACELCP
 > 0

1398 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " CHAP %X,%d", 
cish‹t
, 
cich¨
);

1399 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1401 
ho
->
ch≠_mdty≥
 = 
cich¨
;

1402 
ho
->
√g_ch≠
 = 1;

1411 
‹c
 = 
CONFNAK
;

1412 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1413 i‡(
ao
->
√g_ch≠
) {

1414 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq CHAP\n", 
cish‹t
));

1415 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1416 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1417 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1419 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq PAP\n", 
cish‹t
));

1420 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1421 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1425 
CI_QUALITY
:

1426 
	`GETSHORT
(
cish‹t
, 
p
);

1427 
	`GETLONG
(
cû⁄g
, 
p
);

1428 #i‡
TRACELCP
 > 0

1429 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " QUALITY (%x %x)", 
cish‹t
, (Ë
cû⁄g
);

1430 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1433 i‡(!
ao
->
√g_lqr
 ||

1434 
cûí
 !
CILEN_LQR
) {

1435 
‹c
 = 
CONFREJ
;

1443 i‡(
cish‹t
 !
PPP_LQR
) {

1444 
‹c
 = 
CONFNAK
;

1445 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1446 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1447 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1448 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1453 
CI_MAGICNUMBER
:

1454 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1455 
cûí
 !
CILEN_LONG
) {

1456 
‹c
 = 
CONFREJ
;

1459 
	`GETLONG
(
cû⁄g
, 
p
);

1460 #i‡
TRACELCP
 > 0

1461 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MAGICNUMBER (%lX)", 
cû⁄g
);

1462 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1468 i‡(
go
->
√g_magi˙umbî
 &&

1469 
cû⁄g
 =
go
->
magi˙umbî
) {

1470 
cû⁄g
 = 
	`magic
();

1471 
‹c
 = 
CONFNAK
;

1472 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1473 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1474 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1477 
ho
->
√g_magi˙umbî
 = 1;

1478 
ho
->
magi˙umbî
 = 
cû⁄g
;

1482 
CI_PCOMPRESSION
:

1483 #i‡
TRACELCP
 > 0

1484 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " PCOMPRESSION");

1485 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1487 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1488 
cûí
 !
CILEN_VOID
) {

1489 
‹c
 = 
CONFREJ
;

1492 
ho
->
√g_pcom¥essi⁄
 = 1;

1495 
CI_ACCOMPRESSION
:

1496 #i‡
TRACELCP
 > 0

1497 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " ACCOMPRESSION");

1498 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1500 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1501 
cûí
 !
CILEN_VOID
) {

1502 
‹c
 = 
CONFREJ
;

1505 
ho
->
√g_accom¥essi⁄
 = 1;

1508 
CI_MRRU
:

1509 #i‡
TRACELCP
 > 0

1510 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_MRRU");

1511 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1513 
‹c
 = 
CONFREJ
;

1516 
CI_SSNHF
:

1517 #i‡
TRACELCP
 > 0

1518 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_SSNHF");

1519 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1521 
‹c
 = 
CONFREJ
;

1524 
CI_EPDISC
:

1525 #i‡
TRACELCP
 > 0

1526 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_EPDISC");

1527 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1529 
‹c
 = 
CONFREJ
;

1533 #i‡
TRACELCP


1534 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " unknow¿%d", 
côy≥
);

1535 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1537 
‹c
 = 
CONFREJ
;

1541 
ídswôch
:

1542 #i‡
TRACELCP


1543 i‡(
åa˚Ndx
 >= 80 - 32) {

1544 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñcvd%s\n", 
åa˚Buf
));

1545 
åa˚Ndx
 = 0;

1548 i‡(
‹c
 =
CONFACK
 &&

1549 
rc
 !
CONFACK
) {

1553 i‡(
‹c
 =
CONFNAK
) {

1554 i‡(
ªje˘_if_dißgªe


1555 && 
côy≥
 !
CI_MAGICNUMBER
) {

1556 
‹c
 = 
CONFREJ
;

1558 i‡(
rc
 =
CONFREJ
) {

1561 
rc
 = 
CONFNAK
;

1564 i‡(
‹c
 =
CONFREJ
) {

1565 
rc
 = 
CONFREJ
;

1566 i‡(
cù
 !
ªjp
) {

1567 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1569 
	`INCPTR
(
cûí
, 
ªjp
);

1580 
rc
) {

1581 
CONFACK
:

1582 *
À≈
 = ()(
√xt
 - 
öp
);

1584 
CONFNAK
:

1588 *
À≈
 = ()(
«kp
 - 
«k_buf„r
);

1589 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1591 
CONFREJ
:

1592 *
À≈
 = ()(
ªjp
 - 
öp
);

1596 #i‡
TRACELCP
 > 0

1597 i‡(
åa˚Ndx
 > 0) {

1598 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci: %s\n", 
åa˚Buf
));

1601 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñëu∫ög CONF%s.\n", 
	`CODENAME
(
rc
)));

1602  (
rc
);

1603 
	}
}

1610 
	$l˝_up
(
fsm
 *
f
)

1612 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1613 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1614 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1615 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1617 i‡(!
go
->
√g_magi˙umbî
) {

1618 
go
->
magi˙umbî
 = 0;

1620 i‡(!
ho
->
√g_magi˙umbî
) {

1621 
ho
->
magi˙umbî
 = 0;

1630 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
	`LWIP_MIN
(
ao
->
mru
, (
ho
->
√g_mru
? ho->mru: 
PPP_MRU
)),

1631 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffffl),

1632 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1638 
	`µp_ªcv_c⁄fig
(
f
->
unô
, (
go
->
√g_mru
? 
	`LWIP_MAX
(
wo
->
mru
, go->mru): 
PPP_MRU
),

1639 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1640 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1642 i‡(
ho
->
√g_mru
) {

1643 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1646 
	`l˝_echo_lowîup
(
f
->
unô
);

1648 
	`lök_e°ablished
(
f
->
unô
);

1649 
	}
}

1658 
	$l˝_down
(
fsm
 *
f
)

1660 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1662 
	`l˝_echo_lowîdown
(
f
->
unô
);

1664 
	`lök_down
(
f
->
unô
);

1666 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

1667 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1668 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1669 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1670 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1671 
	}
}

1678 
	$l˝_°¨tög
(
fsm
 *
f
)

1680 
	`lök_ªquúed
(
f
->
unô
);

1681 
	}
}

1688 
	$l˝_föished
(
fsm
 *
f
)

1690 
	`lök_ãrmö©ed
(
f
->
unô
);

1691 
	}
}

1700 
	$¥öt_°rög
–*
p
, 
Àn
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1702 
c
;

1704 
	`¥öãr
(
¨g
, "\"");

1705 ; 
Àn
 > 0; --len) {

1706 
c
 = *
p
++;

1707 i‡(' ' <
c
 && c <= '~') {

1708 i‡(
c
 == '\\' || c == '"') {

1709 
	`¥öãr
(
¨g
, "\\");

1711 
	`¥öãr
(
¨g
, "%c", 
c
);

1713 
c
) {

1715 
	`¥öãr
(
¨g
, "\\n");

1718 
	`¥öãr
(
¨g
, "\\r");

1721 
	`¥öãr
(
¨g
, "\\t");

1724 
	`¥öãr
(
¨g
, "\\%.3o", 
c
);

1728 
	`¥öãr
(
¨g
, "\"");

1729 
	}
}

1735 *
	gl˝_codíames
[] = {

1742 
	$l˝_¥öçkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1744 
code
, 
id
, 
Àn
, 
ﬁí
;

1745 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1746 
u_sh‹t
 
cish‹t
;

1747 
u32_t
 
cû⁄g
;

1749 i‡(
∂í
 < 
HEADERLEN
) {

1752 
p°¨t
 = 
p
;

1753 
	`GETCHAR
(
code
, 
p
);

1754 
	`GETCHAR
(
id
, 
p
);

1755 
	`GETSHORT
(
Àn
, 
p
);

1756 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
) {

1760 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*)) {

1761 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

1763 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1765 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1766 
Àn
 -
HEADERLEN
;

1767 
code
) {

1768 
CONFREQ
:

1769 
CONFACK
:

1770 
CONFNAK
:

1771 
CONFREJ
:

1773 
Àn
 >= 2) {

1774 
	`GETCHAR
(
code
, 
p
);

1775 
	`GETCHAR
(
ﬁí
, 
p
);

1776 
p
 -= 2;

1777 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1780 
	`¥öãr
(
¨g
, " <");

1781 
Àn
 -
ﬁí
;

1782 
›ãnd
 = 
p
 + 
ﬁí
;

1783 
code
) {

1784 
CI_MRU
:

1785 i‡(
ﬁí
 =
CILEN_SHORT
) {

1786 
p
 += 2;

1787 
	`GETSHORT
(
cish‹t
, 
p
);

1788 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

1791 
CI_ASYNCMAP
:

1792 i‡(
ﬁí
 =
CILEN_LONG
) {

1793 
p
 += 2;

1794 
	`GETLONG
(
cû⁄g
, 
p
);

1795 
	`¥öãr
(
¨g
, "asyncm≠ 0x%lx", 
cû⁄g
);

1798 
CI_AUTHTYPE
:

1799 i‡(
ﬁí
 >
CILEN_SHORT
) {

1800 
p
 += 2;

1801 
	`¥öãr
(
¨g
, "auth ");

1802 
	`GETSHORT
(
cish‹t
, 
p
);

1803 
cish‹t
) {

1804 
PPP_PAP
:

1805 
	`¥öãr
(
¨g
, "pap");

1807 
PPP_CHAP
:

1808 
	`¥öãr
(
¨g
, "chap");

1811 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1815 
CI_QUALITY
:

1816 i‡(
ﬁí
 >
CILEN_SHORT
) {

1817 
p
 += 2;

1818 
	`¥öãr
(
¨g
, "quality ");

1819 
	`GETSHORT
(
cish‹t
, 
p
);

1820 
cish‹t
) {

1821 
PPP_LQR
:

1822 
	`¥öãr
(
¨g
, "lqr");

1825 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1829 
CI_CALLBACK
:

1830 i‡(
ﬁí
 >
CILEN_CHAR
) {

1831 
p
 += 2;

1832 
	`¥öãr
(
¨g
, "callback ");

1833 
	`GETSHORT
(
cish‹t
, 
p
);

1834 
cish‹t
) {

1835 
CBCP_OPT
:

1836 
	`¥öãr
(
¨g
, "CBCP");

1839 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1843 
CI_MAGICNUMBER
:

1844 i‡(
ﬁí
 =
CILEN_LONG
) {

1845 
p
 += 2;

1846 
	`GETLONG
(
cû⁄g
, 
p
);

1847 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

1850 
CI_PCOMPRESSION
:

1851 i‡(
ﬁí
 =
CILEN_VOID
) {

1852 
p
 += 2;

1853 
	`¥öãr
(
¨g
, "pcomp");

1856 
CI_ACCOMPRESSION
:

1857 i‡(
ﬁí
 =
CILEN_VOID
) {

1858 
p
 += 2;

1859 
	`¥öãr
(
¨g
, "accomp");

1863 
p
 < 
›ãnd
) {

1864 
	`GETCHAR
(
code
, 
p
);

1865 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1867 
	`¥öãr
(
¨g
, ">");

1871 
TERMACK
:

1872 
TERMREQ
:

1873 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1874 
	`¥öãr
(
¨g
, " ");

1875 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1876 
p
 +
Àn
;

1877 
Àn
 = 0;

1881 
ECHOREQ
:

1882 
ECHOREP
:

1883 
DISCREQ
:

1884 i‡(
Àn
 >= 4) {

1885 
	`GETLONG
(
cû⁄g
, 
p
);

1886 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

1887 
p
 += 4;

1888 
Àn
 -= 4;

1894 ; 
Àn
 > 0; --len) {

1895 
	`GETCHAR
(
code
, 
p
);

1896 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1899  ()(
p
 - 
p°¨t
);

1900 
	}
}

1907 
	$L˝LökFaûuª
 (
fsm
 *
f
)

1909 i‡(
f
->
°©e
 =
LS_OPENED
) {

1910 
	`LCPDEBUG
((
LOG_INFO
, "Nÿª•⁄£Åÿ%dÉcho-ªque°s\n", 
l˝_echos_≥ndög
));

1911 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜinkáppearsÅo be disconnected.\n"));

1912 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

1914 
	}
}

1920 
	$L˝EchoCheck
 (
fsm
 *
f
)

1922 
	`L˝SídEchoReque°
 (
f
);

1927 
	`LWIP_ASSERT
("l˝_echo_timî_ru¬ög =0", 
l˝_echo_timî_ru¬ög
 == 0);

1929 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

1930 
l˝_echo_timî_ru¬ög
 = 1;

1931 
	}
}

1937 
	$L˝EchoTimeout
 (*
¨g
)

1939 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

1940 
l˝_echo_timî_ru¬ög
 = 0;

1941 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

1943 
	}
}

1949 
	$l˝_ª˚ived_echo_ª∂y
 (
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

1951 
u32_t
 
magic
;

1953 
	`LWIP_UNUSED_ARG
(
id
);

1956 i‡(
Àn
 < 4) {

1957 
	`LCPDEBUG
((
LOG_WARNING
, "l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d\n", 
Àn
));

1960 
	`GETLONG
(
magic
, 
öp
);

1961 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî
 && 
magic
 =l˝_gŸ›ti⁄s[f->unô].
magi˙umbî
) {

1962 
	`LCPDEBUG
((
LOG_WARNING
, "appearÅo haveÑeceived our ownÉcho-reply!\n"));

1967 
l˝_echos_≥ndög
 = 0;

1968 
	}
}

1974 
	$L˝SídEchoReque°
 (
fsm
 *
f
)

1976 
u32_t
 
l˝_magic
;

1977 
u_ch¨
 
pkt
[4], *
pkç
;

1982 i‡(
l˝_echo_Áûs
 != 0) {

1983 i‡(
l˝_echos_≥ndög
++ >
l˝_echo_Áûs
) {

1984 
	`L˝LökFaûuª
(
f
);

1985 
l˝_echos_≥ndög
 = 0;

1992 i‡(
f
->
°©e
 =
LS_OPENED
) {

1993 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

1994 
pkç
 = 
pkt
;

1995 
	`PUTLONG
(
l˝_magic
, 
pkç
);

1996 
	`fsm_sd©a
(
f
, 
ECHOREQ
, (
u_ch¨
)(
l˝_echo_numbî
++ & 0xFF), 
pkt
, ()(
pkç
 -Ökt));

1998 
	}
}

2005 
	$l˝_echo_lowîup
 (
unô
)

2007 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2010 
l˝_echos_≥ndög
 = 0;

2011 
l˝_echo_numbî
 = 0;

2012 
l˝_echo_timî_ru¬ög
 = 0;

2015 i‡(
l˝_echo_öãrvÆ
 != 0) {

2016 
	`L˝EchoCheck
 (
f
);

2018 
	}
}

2025 
	$l˝_echo_lowîdown
 (
unô
)

2027 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2029 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2030 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2031 
l˝_echo_timî_ru¬ög
 = 0;

2033 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/lcp.h

54 #i‚de‡
LCP_H


55 
	#LCP_H


	)

63 
	#CI_MRU
 1

	)

64 
	#CI_ASYNCMAP
 2

	)

65 
	#CI_AUTHTYPE
 3

	)

66 
	#CI_QUALITY
 4

	)

67 
	#CI_MAGICNUMBER
 5

	)

68 
	#CI_PCOMPRESSION
 7

	)

69 
	#CI_ACCOMPRESSION
 8

	)

70 
	#CI_CALLBACK
 13

	)

71 
	#CI_MRRU
 17

	)

72 
	#CI_SSNHF
 18

	)

73 
	#CI_EPDISC
 19

	)

78 
	#PROTREJ
 8

	)

79 
	#ECHOREQ
 9

	)

80 
	#ECHOREP
 10

	)

81 
	#DISCREQ
 11

	)

82 
	#CBCP_OPT
 6

	)

92 
	sl˝_›ti⁄s
 {

93 
u_öt
 
	m∑ssive
 : 1;

94 
u_öt
 
	msûít
 : 1;

95 
u_öt
 
	mª°¨t
 : 1;

96 
u_öt
 
	m√g_mru
 : 1;

97 
u_öt
 
	m√g_asyncm≠
 : 1;

98 
u_öt
 
	m√g_u∑p
 : 1;

99 
u_öt
 
	m√g_ch≠
 : 1;

100 
u_öt
 
	m√g_magi˙umbî
 : 1;

101 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

102 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

103 
u_öt
 
	m√g_lqr
 : 1;

104 
u_öt
 
	m√g_cb˝
 : 1;

105 #ifde‡
PPP_MULTILINK


106 
u_öt
 
	m√g_mºu
 : 1;

107 
u_öt
 
	m√g_s¢hf
 : 1;

108 
u_öt
 
	m√g_ídpoöt
 : 1;

110 
u_sh‹t
 
	mmru
;

111 #ifde‡
PPP_MULTILINK


112 
u_sh‹t
 
	mmºu
;

114 
u_ch¨
 
	mch≠_mdty≥
;

115 
u32_t
 
	masyncm≠
;

116 
u32_t
 
	mmagi˙umbî
;

117 
	mnumlo›s
;

118 
u32_t
 
	mlqr_≥riod
;

119 #ifde‡
PPP_MULTILINK


120 
ïdisc
 
	mídpoöt
;

122 } 
	tl˝_›ti⁄s
;

128 
	mPHASE_DEAD
 = 0,

129 
	mPHASE_INITIALIZE
,

130 
	mPHASE_ESTABLISH
,

131 
	mPHASE_AUTHENTICATE
,

132 
	mPHASE_CALLBACK
,

133 
	mPHASE_NETWORK
,

134 
	mPHASE_TERMINATE


135 } 
	tLökPha£
;

142 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

143 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

144 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

145 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

146 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

147 
ext_accm
 
xmô_accm
[];

154 
l˝_öô
 ();

155 
l˝_›í
 ();

156 
l˝_˛o£
 (, *);

157 
l˝_lowîup
 ();

158 
l˝_lowîdown
();

159 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

161 
¥Ÿít
 
l˝_¥Ÿít
;

165 
	#DEFLOOPBACKFAIL
 10

	)

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/magic.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"øndm.h
"

58 
	~"magic.h
"

69 
	$magicInô
()

72 
	}
}

77 
u32_t
 
	$magic
()

79  
	`avR™dom
();

80 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/magic.h

54 #i‚de‡
MAGIC_H


55 
	#MAGIC_H


	)

62 
magicInô
();

65 
u32_t
 
magic
();

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/md5.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 #i‡
CHAP_SUPPORT
 || 
MD5_SUPPORT


40 
	~"µp.h
"

41 
	~"µpdebug.h
"

43 
	~"md5.h
"

57 
Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
);

59 
	gPADDING
[64] = {

71 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

72 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

73 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

74 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

77 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

81 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

82 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

83 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

84 (
a
Ë+(
b
); \

85 }

	)

86 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

87 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

88 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

89 (
a
Ë+(
b
); \

90 }

	)

91 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

92 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

93 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

94 (
a
Ë+(
b
); \

95 }

	)

96 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

97 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

98 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

99 (
a
Ë+(
b
); \

100 }

	)

102 #ifde‡
__STDC__


103 
	#UL
(
x
Ëx##
UL


	)

105 #ifde‡
WIN32


106 
	#UL
(
x
Ëx##
UL


	)

108 
	#UL
(
x
Ë
	)
x

116 
	$MD5Inô
 (
MD5_CTX
 *
mdC⁄ãxt
)

118 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
u32_t
)0;

121 
mdC⁄ãxt
->
buf
[0] = (
u32_t
)0x67452301UL;

122 
mdC⁄ãxt
->
buf
[1] = (
u32_t
)0xefcdab89UL;

123 
mdC⁄ãxt
->
buf
[2] = (
u32_t
)0x98badcfeUL;

124 
mdC⁄ãxt
->
buf
[3] = (
u32_t
)0x10325476UL;

125 
	}
}

132 
	$MD5Upd©e
(
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
)

134 
u32_t
 
ö
[16];

135 
mdi
;

136 
i
, 
ii
;

139 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%.*H\n", 
öLí
, 
	`MIN
(öLí, 20Ë* 2, 
öBuf
);

140 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%s\n", 
öLí
, 
öBuf
);

144 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

147 i‡((
mdC⁄ãxt
->
i
[0] + ((
u32_t
)
öLí
 << 3)) < mdContext->i[0]) {

148 
mdC⁄ãxt
->
i
[1]++;

150 
mdC⁄ãxt
->
i
[0] +((
u32_t
)
öLí
 << 3);

151 
mdC⁄ãxt
->
i
[1] +((
u32_t
)
öLí
 >> 29);

153 
öLí
--) {

155 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

158 i‡(
mdi
 == 0x40) {

159 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4) {

160 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

161 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

162 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

163 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

165 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

166 
mdi
 = 0;

169 
	}
}

175 
	$MD5FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
)

177 
u32_t
 
ö
[16];

178 
mdi
;

179 
i
, 
ii
;

180 
∑dLí
;

183 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

184 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

187 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

190 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

191 
	`MD5Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

194 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4) {

195 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

196 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

197 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

198 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

200 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

203 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

204 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

205 
mdC⁄ãxt
->
dige°
[
ii
+1] =

206 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

207 
mdC⁄ãxt
->
dige°
[
ii
+2] =

208 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

209 
mdC⁄ãxt
->
dige°
[
ii
+3] =

210 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

212 
	`SMEMCPY
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

213 
	}
}

218 
	$Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
)

220 
u32_t
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

223 
	#S11
 7

	)

224 
	#S12
 12

	)

225 
	#S13
 17

	)

226 
	#S14
 22

	)

227 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

228 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

229 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

230 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

231 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

232 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

233 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

234 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

235 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

236 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

237 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

238 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

239 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

240 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

241 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

242 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

245 
	#S21
 5

	)

246 
	#S22
 9

	)

247 
	#S23
 14

	)

248 
	#S24
 20

	)

249 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

250 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

251 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

252 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

253 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

254 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

255 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

256 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

257 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

258 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

259 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

260 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

261 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

262 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

263 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

264 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

267 
	#S31
 4

	)

268 
	#S32
 11

	)

269 
	#S33
 16

	)

270 
	#S34
 23

	)

271 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

272 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

273 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

274 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

275 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

276 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

277 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

278 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

279 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

280 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

281 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

282 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

283 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

284 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

285 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

286 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

289 
	#S41
 6

	)

290 
	#S42
 10

	)

291 
	#S43
 15

	)

292 
	#S44
 21

	)

293 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

294 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

295 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

296 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

297 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

298 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

299 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

300 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

301 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

302 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

303 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

304 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

305 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

306 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

307 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

308 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

310 
buf
[0] +
a
;

311 
buf
[1] +
b
;

312 
buf
[2] +
c
;

313 
buf
[3] +
d
;

314 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/md5.h

40 #i‚de‡
MD5_H


41 
	#MD5_H


	)

45 
u32_t
 
	mi
[2];

46 
u32_t
 
	mbuf
[4];

47 
	mö
[64];

48 
	mdige°
[16];

49 } 
	tMD5_CTX
;

51 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

52 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

53 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/pap.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 #i‡
PAP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"auth.h
"

62 
	~"∑p.h
"

70 
u∑p_öô
 ();

71 
u∑p_lowîup
 ();

72 
u∑p_lowîdown
 ();

73 
u∑p_öput
 (, 
u_ch¨
 *, );

74 
u∑p_¥Ÿªj
 ();

76 
u∑p_timeout
 (*);

77 
u∑p_ªqtimeout
(*);

78 
u∑p_øuthªq
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

79 
u∑p_øuthack
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

80 
u∑p_øuth«k
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

81 
u∑p_ßuthªq
 (
u∑p_°©e
 *);

82 
u∑p_§e•
 (
u∑p_°©e
 *, 
u_ch¨
, u_char, *, );

88 
¥Ÿít
 
	g∑p_¥Ÿít
 = {

89 
PPP_PAP
,

90 
u∑p_öô
,

91 
u∑p_öput
,

92 
u∑p_¥Ÿªj
,

93 
u∑p_lowîup
,

94 
u∑p_lowîdown
,

95 
NULL
,

96 
NULL
,

98 
u∑p_¥öçkt
,

99 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL


110 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

121 
	$u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
)

123 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

126 
u
->
us_u£r
 = 
lu£r
;

127 
u
->
us_u£æí
 = 
	`°æí
(
lu£r
);

128 
u
->
us_∑sswd
 = 
Õassw‹d
;

129 
u
->
us_∑sswdÀn
 = 
	`°æí
(
Õassw‹d
);

130 
	}
}

139 
	$u∑p_authwôh≥î
(
unô
, *
u£r
, *
∑ssw‹d
)

141 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

143 
	`UPAPDEBUG
((
LOG_INFO
, "upap_authwithpeer: %d user=%sÖassword=%s s=%d\n",

144 
unô
, 
u£r
, 
∑ssw‹d
, 
u
->
us_˛õ¡°©e
));

146 
	`u∑p_£éogö∑sswd
(
unô
, 
u£r
, 
∑ssw‹d
);

148 
u
->
us_å™smôs
 = 0;

151 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

152 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

153 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

157 
	`u∑p_ßuthªq
(
u
);

158 
	}
}

167 
	$u∑p_auth≥î
(
unô
)

169 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

172 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

173 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

174 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

178 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

179 i‡(
u
->
us_ªqtimeout
 > 0) {

180 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

182 
	}
}

193 
	$u∑p_öô
(
unô
)

195 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

197 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_öô: %d\n", 
unô
));

198 
u
->
us_unô
 = 
unô
;

199 
u
->
us_u£r
 = 
NULL
;

200 
u
->
us_u£æí
 = 0;

201 
u
->
us_∑sswd
 = 
NULL
;

202 
u
->
us_∑sswdÀn
 = 0;

203 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

204 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

205 
u
->
us_id
 = 0;

206 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

207 
u
->
us_maxå™smôs
 = 10;

208 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

209 
	}
}

215 
	$u∑p_timeout
(*
¨g
)

217 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

219 
	`UPAPDEBUG
((
LOG_INFO
, "upap_timeout: %dÅimeout %dÉxpired s=%d\n",

220 
u
->
us_unô
, u->
us_timeouâime
, u->
us_˛õ¡°©e
));

222 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

226 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

228 
	`UPAPDEBUG
((
LOG_ERR
, "NoÑesponseÅo PAPáuthenticate-requests\n"));

229 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

230 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

234 
	`u∑p_ßuthªq
(
u
);

235 
	}
}

242 
	$u∑p_ªqtimeout
(*
¨g
)

244 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

246 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
) {

250 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

251 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

252 
	}
}

261 
	$u∑p_lowîup
(
unô
)

263 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

265 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîup: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

267 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
) {

268 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

269 } i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

270 
	`u∑p_ßuthªq
(
u
);

273 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
) {

274 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

275 } i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

276 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

277 i‡(
u
->
us_ªqtimeout
 > 0) {

278 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

281 
	}
}

290 
	$u∑p_lowîdown
(
unô
)

292 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

294 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîdown: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

296 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

297 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

299 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0) {

300 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

303 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

304 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

305 
	}
}

314 
	$u∑p_¥Ÿªj
(
unô
)

316 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

318 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

319 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed dueÅoÖrotocol-reject\n"));

320 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

322 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

323 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication ofÖeer failed (protocol-reject)\n"));

324 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

326 
	`u∑p_lowîdown
(
unô
);

327 
	}
}

334 
	$u∑p_öput
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
l
)

336 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

337 
u_ch¨
 *
öp
;

338 
u_ch¨
 
code
, 
id
;

339 
Àn
;

345 
öp
 = 
ö∑ckë
;

346 i‡(
l
 < 
UPAP_HEADERLEN
) {

347 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd short header.\n"));

350 
	`GETCHAR
(
code
, 
öp
);

351 
	`GETCHAR
(
id
, 
öp
);

352 
	`GETSHORT
(
Àn
, 
öp
);

353 i‡(
Àn
 < 
UPAP_HEADERLEN
) {

354 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd illegalÜength.\n"));

357 i‡(
Àn
 > 
l
) {

358 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd shortÖacket.\n"));

361 
Àn
 -
UPAP_HEADERLEN
;

366 
code
) {

367 
UPAP_AUTHREQ
:

368 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

371 
UPAP_AUTHACK
:

372 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

375 
UPAP_AUTHNAK
:

376 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

382 
	}
}

389 
	$u∑p_øuthªq
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

391 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

392 *
ru£r
, *
Ωasswd
;

393 
ªtcode
;

394 *
msg
;

395 
msgÀn
;

397 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth: Rcvd id %d.\n", 
id
));

399 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
) {

407 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

408 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

411 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

412 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

419 i‡(
Àn
 <  (
u_ch¨
)) {

420 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

423 
	`GETCHAR
(
ru£æí
, 
öp
);

424 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

425 i‡(
Àn
 < 0) {

426 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

429 
ru£r
 = (*Ë
öp
;

430 
	`INCPTR
(
ru£æí
, 
öp
);

431 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

432 i‡(
Àn
 < 
ΩasswdÀn
) {

433 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

436 
Ωasswd
 = (*Ë
öp
;

441 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
, 
ΩasswdÀn
, &
msg
, &
msgÀn
);

442 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

444 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

446 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

447 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

448 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 
ru£r
, 
ru£æí
);

450 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

451 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

454 i‡(
u
->
us_ªqtimeout
 > 0) {

455 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

457 
	}
}

464 
	$u∑p_øuthack
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

466 
u_ch¨
 
msgÀn
;

467 *
msg
;

469 
	`LWIP_UNUSED_ARG
(
id
);

471 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuthack: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

473 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

480 i‡(
Àn
 <  (
u_ch¨
)) {

481 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

484 
	`GETCHAR
(
msgÀn
, 
öp
);

485 
Àn
 - (
u_ch¨
);

486 i‡(
Àn
 < 
msgÀn
) {

487 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

490 
msg
 = (*Ë
öp
;

491 
	`PRINTMSG
(
msg
, 
msgÀn
);

493 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

495 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
);

496 
	}
}

503 
	$u∑p_øuth«k
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

505 
u_ch¨
 
msgÀn
;

506 *
msg
;

508 
	`LWIP_UNUSED_ARG
(
id
);

510 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth«k: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

512 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

519 i‡(
Àn
 <  (
u_ch¨
)) {

520 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

522 
	`GETCHAR
(
msgÀn
, 
öp
);

523 if(
msgÀn
 > 0) {

524 
Àn
 - (
u_ch¨
);

525 i‡(
Àn
 < 
msgÀn
) {

526 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

529 
msg
 = (*Ë
öp
;

530 
	`PRINTMSG
(
msg
, 
msgÀn
);

534 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

536 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed\n"));

537 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

538 
	}
}

545 
	$u∑p_ßuthªq
(
u∑p_°©e
 *
u
)

547 
u_ch¨
 *
ouç
;

548 
ouéí
;

550 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
)

551 + 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

552 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

554 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

556 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

557 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

558 
	`PUTSHORT
(
ouéí
, 
ouç
);

559 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

560 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

561 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

562 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

563 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

565 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

567 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_ßuth: Síàid %d\n", 
u
->
us_id
));

569 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

570 ++
u
->
us_å™smôs
;

571 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

572 
	}
}

579 
	$u∑p_§e•
(
u∑p_°©e
 *
u
, 
u_ch¨
 
code
, u_ch¨ 
id
, *
msg
, 
msgÀn
)

581 
u_ch¨
 *
ouç
;

582 
ouéí
;

584 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

585 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

586 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

588 
	`PUTCHAR
(
code
, 
ouç
);

589 
	`PUTCHAR
(
id
, 
ouç
);

590 
	`PUTSHORT
(
ouéí
, 
ouç
);

591 
	`PUTCHAR
(
msgÀn
, 
ouç
);

592 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

593 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

595 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_§e•: Síàcodê%d, id %d s=%d\n", 
code
, 
id
, 
u
->
us_˛õ¡°©e
));

596 
	}
}

602 
	$u∑p_¥öçkt
(

603 
u_ch¨
 *
p
,

604 
∂í
,

605 (*
¥öãr
) (*, *, ...),

606 *
¨g


609 
	`LWIP_UNUSED_ARG
(
p
);

610 
	`LWIP_UNUSED_ARG
(
∂í
);

611 
	`LWIP_UNUSED_ARG
(
¥öãr
);

612 
	`LWIP_UNUSED_ARG
(
¨g
);

614 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/pap.h

52 #i‚de‡
PAP_H


53 
	#PAP_H


	)

55 #i‡
PAP_SUPPORT


63 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#UPAP_AUTHREQ
 1

	)

70 
	#UPAP_AUTHACK
 2

	)

71 
	#UPAP_AUTHNAK
 3

	)

76 
	#UPAPCS_INITIAL
 0

	)

77 
	#UPAPCS_CLOSED
 1

	)

78 
	#UPAPCS_PENDING
 2

	)

79 
	#UPAPCS_AUTHREQ
 3

	)

80 
	#UPAPCS_OPEN
 4

	)

81 
	#UPAPCS_BADAUTH
 5

	)

86 
	#UPAPSS_INITIAL
 0

	)

87 
	#UPAPSS_CLOSED
 1

	)

88 
	#UPAPSS_PENDING
 2

	)

89 
	#UPAPSS_LISTEN
 3

	)

90 
	#UPAPSS_OPEN
 4

	)

91 
	#UPAPSS_BADAUTH
 5

	)

101 
	su∑p_°©e
 {

102 
	mus_unô
;

103 c⁄° *
	mus_u£r
;

104 
	mus_u£æí
;

105 c⁄° *
	mus_∑sswd
;

106 
	mus_∑sswdÀn
;

107 
	mus_˛õ¡°©e
;

108 
	mus_£rvî°©e
;

109 
u_ch¨
 
	mus_id
;

110 
	mus_timeouâime
;

111 
	mus_å™smôs
;

112 
	mus_maxå™smôs
;

113 
	mus_ªqtimeout
;

114 } 
	tu∑p_°©e
;

121 
u∑p_°©e
 
u∑p
[];

123 
u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
);

124 
u∑p_authwôh≥î
 (, *, *);

125 
u∑p_auth≥î
 ();

127 
¥Ÿít
 
∑p_¥Ÿít
;

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ppp.c

82 
	~"lwù/›t.h
"

84 #i‡
PPP_SUPPORT


86 
	~"lwù/ù.h
"

88 
	~"µp.h
"

89 
	~"µpdebug.h
"

91 
	~"øndm.h
"

92 
	~"fsm.h
"

93 #i‡
PAP_SUPPORT


94 
	~"∑p.h
"

96 #i‡
CHAP_SUPPORT


97 
	~"ch≠.h
"

99 
	~"ù˝.h
"

100 
	~"l˝.h
"

101 
	~"magic.h
"

102 
	~"auth.h
"

103 #i‡
VJ_SUPPORT


104 
	~"vj.h
"

106 #i‡
PPPOE_SUPPORT


107 
	~"√tif/µp_€.h
"

110 
	~<°rög.h
>

119 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

120 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

121 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

126 
	mPDIDLE
 = 0,

127 
	mPDSTART
,

128 
	mPDADDRESS
,

129 
	mPDCONTROL
,

130 
	mPDPROTOCOL1
,

131 
	mPDPROTOCOL2
,

132 
	mPDDATA


133 } 
	tPPPDevSèãs
;

135 
	#ESCAPE_P
(
accm
, 
c
Ë(◊ccm)[(cË>> 3] & 
µpACCMMask
[¯& 0x07])

	)

143 
	sPPPC⁄åﬁ_s
 {

144 
	m›íFœg
;

145 #i‡
PPPOE_SUPPORT


146 
√tif
 *
	mëhif
;

147 
µp€_so·c
 *
	mµp€_sc
;

149 
	mif_up
;

150 
	mîrCode
;

151 #i‡
PPPOS_SUPPORT


152 
sio_fd_t
 
	mfd
;

153 
	mkûl_lök
;

154 
	msig_hup
;

155 
pbuf
 *
	möHód
, *
	möTaû
;

156 
PPPDevSèãs
 
	möSèã
;

157 
	möEsˇ≥d
;

158 
u16_t
 
	möPrŸocﬁ
;

159 
u16_t
 
	möFCS
;

161 
	mmtu
;

162 
	mpcomp
;

163 
	maccomp
;

164 
u_l⁄g
 
	mœ°XMô
;

165 
ext_accm
 
	möACCM
;

166 
ext_accm
 
	moutACCM
;

167 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


168 
	mvjE«bÀd
;

169 
vjcom¥ess
 
	mvjComp
;

172 
√tif
 
	m√tif
;

174 
µp_addrs
 
	maddrs
;

176 (*
	mlökSètusCB
)(*
	m˘x
, 
	mîrCode
, *
	m¨g
);

177 *
	mlökSètusCtx
;

179 } 
	tPPPC⁄åﬁ
;

186 
	s≈io˘l
 {

187 
	m¥Ÿocﬁ
;

188 
NPmode
 
	mmode
;

196 #i‡
PPPOS_SUPPORT


197 
µpMaö
(*
pd
);

198 
µpDr›
(
PPPC⁄åﬁ
 *
pc
);

199 
µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
);

206 
u_l⁄g
 
	gsub√tMask
;

208 
PPPC⁄åﬁ
 
	gµpC⁄åﬁ
[
NUM_PPP
];

215 
¥Ÿít
 *
	gµp_¥Ÿocﬁs
[] = {

216 &
l˝_¥Ÿít
,

217 #i‡
PAP_SUPPORT


218 &
∑p_¥Ÿít
,

220 #i‡
CHAP_SUPPORT


221 &
ch≠_¥Ÿít
,

223 #i‡
CBCP_SUPPORT


224 &
cb˝_¥Ÿít
,

226 &
ù˝_¥Ÿít
,

227 #i‡
CCP_SUPPORT


228 &
c˝_¥Ÿít
,

230 
NULL


238 
u_ch¨
 *
	gouçackë_buf
[
NUM_PPP
];

245 #i‡
PPPOS_SUPPORT


249 c⁄° 
u_sh‹t
 
	gfc°ab
[256] = {

286 
u_ch¨
 
	gµpACCMMask
[] = {

299 
	$µpMaöWakeup
(
pd
)

301 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaöWakeup: unô %d\n", 
pd
));

302 
	`sio_ªad_ab‹t
(
µpC⁄åﬁ
[
pd
].
fd
);

303 
	}
}

307 
	$µpLökTîmö©ed
(
pd
)

309 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

311 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökTîmö©ed: unô %d\n", 
pd
));

313 #i‡
PPPOE_SUPPORT


314 if(
pc
->
ëhif
) {

315 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

319 #i‡
PPPOS_SUPPORT


320 
	`µpMaöWakeup
(
pd
);

323 
	}
}

326 
	$µpLökDown
(
pd
)

328 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

330 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökDown: unô %d\n", 
pd
));

332 #i‡
PPPOE_SUPPORT


333 if(
pc
->
ëhif
) {

334 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

338 #i‡
PPPOS_SUPPORT


339 
	`µpMaöWakeup
(
pd
);

342 
	}
}

351 
	$µpSèπCB
(*
¨g
)

353 
pd
 = ()
¨g
;

355 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSèπCB: unô %d\n", 
pd
));

356 
	`l˝_lowîup
(
pd
);

357 
	`l˝_›í
(
pd
);

358 
	}
}

361 
	$µpSt›CB
(*
¨g
)

363 
pd
 = ()
¨g
;

365 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSt›CB: unô %d\n", 
pd
));

366 
	`l˝_˛o£
(
pd
, "UserÑequest");

367 
	}
}

370 
	$µpHupCB
(*
¨g
)

372 
pd
 = ()
¨g
;

374 
	`PPPDEBUG
((
LOG_DEBUG
, "µpHupCB: unô %d\n", 
pd
));

375 
	`l˝_lowîdown
(
pd
);

376 
	`lök_ãrmö©ed
(
pd
);

377 
	}
}

384 
µp_£âögs
 
	gµp_£âögs
;

386 
îr_t


387 
	$µpInô
()

389 
¥Ÿít
 *
¥Ÿp
;

390 
i
, 
j
;

392 
	`mem£t
(&
µp_£âögs
, 0, (ppp_settings));

393 
µp_£âögs
.
u£≥îdns
 = 1;

394 
	`µpSëAuth
(
PPPAUTHTYPE_NONE
, 
NULL
, NULL);

396 
	`magicInô
();

398 
i
 = 0; i < 
NUM_PPP
; i++) {

399 
µpC⁄åﬁ
[
i
].
›íFœg
 = 0;

401 
sub√tMask
 = 
	`ht⁄l
(0xffffff00);

403 
ouçackë_buf
[
i
] = (
u_ch¨
 *)
	`mem_mÆloc
(
PPP_MRU
+
PPP_HDRLEN
);

404 if(!
ouçackë_buf
[
i
]) {

405  
ERR_MEM
;

411 
j
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[j]Ë!
NULL
; ++j) {

412 (*
¥Ÿp
->
öô
)(
i
);

416 #i‡
LINK_STATS


419 
	`mem£t
(&
lwù_°©s
.
lök
, 0, (lwip_stats.link));

422 #i‡
PPPOE_SUPPORT


423 
	`µp€_öô
();

426  
ERR_OK
;

427 
	}
}

430 
	$µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
)

432 
authTy≥
) {

433 
PPPAUTHTYPE_NONE
:

435 #ifde‡
LWIP_PPP_STRICT_PAP_REJECT


436 
µp_£âögs
.
ªfu£_∑p
 = 1;

439 
µp_£âögs
.
ªfu£_∑p
 = 0;

441 
µp_£âögs
.
ªfu£_ch≠
 = 1;

444 
PPPAUTHTYPE_ANY
:

464 
µp_£âögs
.
ªfu£_∑p
 = 0;

465 
µp_£âögs
.
ªfu£_ch≠
 = 0;

468 
PPPAUTHTYPE_PAP
:

469 
µp_£âögs
.
ªfu£_∑p
 = 0;

470 
µp_£âögs
.
ªfu£_ch≠
 = 1;

473 
PPPAUTHTYPE_CHAP
:

474 
µp_£âögs
.
ªfu£_∑p
 = 1;

475 
µp_£âögs
.
ªfu£_ch≠
 = 0;

479 if(
u£r
) {

480 
	`°∫˝y
(
µp_£âögs
.
u£r
, user, (ppp_settings.user)-1);

481 
µp_£âögs
.
u£r
[(ppp_settings.user)-1] = '\0';

483 
µp_£âögs
.
u£r
[0] = '\0';

486 if(
∑sswd
) {

487 
	`°∫˝y
(
µp_£âögs
.
∑sswd
,Öasswd, (ppp_settings.passwd)-1);

488 
µp_£âögs
.
∑sswd
[(ppp_settings.passwd)-1] = '\0';

490 
µp_£âögs
.
∑sswd
[0] = '\0';

492 
	}
}

494 #i‡
PPPOS_SUPPORT


503 
	$µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

505 
PPPC⁄åﬁ
 *
pc
;

506 
pd
;

509 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

511 i‡(
pd
 >
NUM_PPP
) {

512 
pd
 = 
PPPERR_OPEN
;

514 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

518 i‡(
pd
 >= 0) {

519 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

521 
	`l˝_öô
(
pd
);

522 
pc
 = &
µpC⁄åﬁ
[
pd
];

523 
pc
->
fd
 = fd;

524 #i‡
PPPOE_SUPPORT


525 
pc
->
ëhif

NULL
;

527 
pc
->
kûl_lök
 = 0;

528 
pc
->
sig_hup
 = 0;

529 
pc
->
if_up
 = 0;

530 
pc
->
îrCode
 = 0;

531 
pc
->
öSèã
 = 
PDIDLE
;

532 
pc
->
öHód
 = 
NULL
;

533 
pc
->
öTaû
 = 
NULL
;

534 
pc
->
öEsˇ≥d
 = 0;

535 
pc
->
œ°XMô
 = 0;

537 #i‡
VJ_SUPPORT


538 
pc
->
vjE«bÀd
 = 0;

539 
	`vj_com¥ess_öô
(&
pc
->
vjComp
);

546 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

547 
pc
->
öACCM
[15] = 0x60;

548 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

549 
pc
->
outACCM
[15] = 0x60;

551 
pc
->
lökSètusCB
 =ÜinkStatusCB;

552 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

554 
	`sys_thªad_√w
(
PPP_THREAD_NAME
, 
µpMaö
, (*)
pd
, 
PPP_THREAD_STACKSIZE
, 
PPP_THREAD_PRIO
);

555 if(!
lökSètusCB
) {

556 
pd
 >0 && !
pc
->
if_up
) {

557 
	`sys_m¶ìp
(500);

558 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

559 
	`µpClo£
(
pd
);

560 i‡(
pc
->
îrCode
) {

561 
pd
 = 
pc
->
îrCode
;

563 
pd
 = 
PPPERR_CONNECT
;

570  
pd
;

571 
	}
}

574 #i‡
PPPOE_SUPPORT


575 
µpOvîEthî√tLökSètusCB
(
pd
, 
up
);

578 
	$µpOvîEthî√tClo£
(
pd
)

580 
PPPC⁄åﬁ
* 
pc
 = &
µpC⁄åﬁ
[
pd
];

583 
	`l˝_˛o£
(
pd
, 
NULL
);

585 
	`µp€_de°roy
(&
pc
->
√tif
);

586 
	}
}

588 
	$µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

590 
PPPC⁄åﬁ
 *
pc
;

591 
pd
;

593 
	`LWIP_UNUSED_ARG
(
£rvi˚_«me
);

594 
	`LWIP_UNUSED_ARG
(
c⁄˚¡øt‹_«me
);

597 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

598 i‡(
pd
 >
NUM_PPP
) {

599 
pd
 = 
PPPERR_OPEN
;

601 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

605 i‡(
pd
 >= 0) {

607 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

609 
	`l˝_öô
(
pd
);

611 
l˝_w™t›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

612 
l˝_w™t›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

613 
l˝_w™t›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

614 
l˝_w™t›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

616 
l˝_Ælow›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

617 
l˝_Ælow›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

618 
l˝_Ælow›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

619 
l˝_Ælow›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

621 
pc
 = &
µpC⁄åﬁ
[
pd
];

622 
pc
->
if_up
 = 0;

623 
pc
->
îrCode
 = 0;

624 
pc
->
œ°XMô
 = 0;

625 #i‡
PPPOS_SUPPORT


626 
pc
->
kûl_lök
 = 0;

627 
pc
->
sig_hup
 = 0;

628 
pc
->
öSèã
 = 
PDIDLE
;

629 
pc
->
öHód
 = 
NULL
;

630 
pc
->
öTaû
 = 
NULL
;

631 
pc
->
öEsˇ≥d
 = 0;

632 #i‡
VJ_SUPPORT


633 
pc
->
vjE«bÀd
 = 0;

636 
pc
->
ëhif
=Éthif;

638 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

639 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

641 
pc
->
lökSètusCB
 =ÜinkStatusCB;

642 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

644 if(
	`µp€_¸óã
(
ëhif
, 
pd
, 
µpOvîEthî√tLökSètusCB
, &
pc
->
µp€_sc
Ë!
ERR_OK
) {

645 
pc
->
›íFœg
 = 0;

646  
PPPERR_OPEN
;

649 
	`µp€_c⁄√˘
(
pc
->
µp€_sc
);

651 if(!
lökSètusCB
) {

652 
pd
 >0 && !
pc
->
if_up
) {

653 
	`sys_m¶ìp
(500);

654 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

655 
	`µpClo£
(
pd
);

656 i‡(
pc
->
îrCode
) {

657 
pd
 = 
pc
->
îrCode
;

659 
pd
 = 
PPPERR_CONNECT
;

666  
pd
;

667 
	}
}

675 
	$µpClo£
(
pd
)

677 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

678 
°
 = 0;

681 #i‡
PPPOE_SUPPORT


682 if(
pc
->
ëhif
) {

683 
	`PPPDEBUG
((
LOG_DEBUG
, "µpClo£: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

684 
pc
->
îrCode
 = 
PPPERR_USER
;

686 
	`t˝ù_ˇŒback
(
µpSt›CB
, (*)
pd
);

690 #i‡
PPPOS_SUPPORT


691 
pc
->
kûl_lök
 = !0;

692 
	`µpMaöWakeup
(
pd
);

696 if(!
pc
->
lökSètusCB
) {

697 
°
 >0 && 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

698 
	`sys_m¶ìp
(500);

703  
°
;

704 
	}
}

708 
	$µpSigHUP
(
pd
)

710 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

712 #i‡
PPPOE_SUPPORT


713 if(
pc
->
ëhif
) {

714 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSigHUP: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

715 
	`t˝ù_ˇŒback
(
µpHupCB
, (*)
pd
);

719 #i‡
PPPOS_SUPPORT


720 
pc
->
sig_hup
 = 1;

721 
	`µpMaöWakeup
(
pd
);

724 
	}
}

726 #i‡
PPPOS_SUPPORT


728 
	$nPut
(
PPPC⁄åﬁ
 *
pc
, 
pbuf
 *
nb
)

730 
pbuf
 *
b
;

731 
c
;

733 
b
 = 
nb
; b !
NULL
; b = b->
√xt
) {

734 if((
c
 = 
	`sio_wrôe
(
pc
->
fd
, 
b
->
∑ylﬂd
, b->
Àn
)) != b->len) {

735 
	`PPPDEBUG
((
LOG_WARNING
,

736 "PPPÇPut: incom∂ëêsio_wrôe(%d,, %uË%d\n", 
pc
->
fd
, 
b
->
Àn
, 
c
));

737 
	`LINK_STATS_INC
(
lök
.
îr
);

738 
pc
->
œ°XMô
 = 0;

743 
	`pbuf_‰ì
(
nb
);

744 
	`LINK_STATS_INC
(
lök
.
xmô
);

745 
	}
}

753 
pbuf
 *

754 
	$µpAµíd
(
u_ch¨
 
c
, 
pbuf
 *
nb
, 
ext_accm
 *
outACCM
)

756 
pbuf
 *
tb
 = 
nb
;

762 i‡(
nb
 && (
PBUF_POOL_BUFSIZE
 -Çb->
Àn
) < 2) {

763 
tb
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

764 i‡(
tb
) {

765 
nb
->
√xt
 = 
tb
;

767 
	`LINK_STATS_INC
(
lök
.
memîr
);

769 
nb
 = 
tb
;

772 i‡(
nb
) {

773 i‡(
outACCM
 && 
	`ESCAPE_P
(*outACCM, 
c
)) {

774 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
PPP_ESCAPE
;

775 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
 ^ 
PPP_TRANS
;

777 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
;

781  
tb
;

782 
	}
}

785 #i‡
PPPOE_SUPPORT


786 
îr_t


787 
	$µpifOuçutOvîEthî√t
(
pd
, 
pbuf
 *
p
)

789 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

790 
pbuf
 *
pb
;

791 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

792 
i
=0;

794 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + (
¥Ÿocﬁ
), 
PBUF_RAM
);

795 if(!
pb
) {

796 
	`LINK_STATS_INC
(
lök
.
memîr
);

797 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

798  
ERR_MEM
;

801 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

803 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

805 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

806 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
++Ë(
¥Ÿocﬁ
 >> 8) & 0xFF;

808 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
Ë
¥Ÿocﬁ
 & 0xFF;

810 
	`pbuf_chaö
(
pb
, 
p
);

812 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

813 
	`LINK_STATS_INC
(
lök
.
îr
);

814  
PPPERR_DEVICE
;

817 
	`LINK_STATS_INC
(
lök
.
xmô
);

818  
ERR_OK
;

819 
	}
}

823 
îr_t


824 
	$µpifOuçut
(
√tif
 *√tif, 
pbuf
 *
pb
, 
ù_addr
 *
ùaddr
)

826 
pd
 = ()
√tif
->
°©e
;

827 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

828 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

829 #i‡
PPPOS_SUPPORT


830 
u_öt
 
fcsOut
 = 
PPP_INITFCS
;

831 
pbuf
 *
hódMB
 = 
NULL
, *
èûMB
 = NULL, *
p
;

832 
u_ch¨
 
c
;

835 
	`LWIP_UNUSED_ARG
(
ùaddr
);

840 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
 || !
pb
) {

841 
	`PPPDEBUG
((
LOG_WARNING
, "pppifOutput[%d]: badÖarmsÖrot=%dÖb=%p\n",

842 
pd
, 
¥Ÿocﬁ
, 
pb
));

843 
	`LINK_STATS_INC
(
lök
.
›ãº
);

844 
	`LINK_STATS_INC
(
lök
.
dr›
);

845  
ERR_ARG
;

849 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

850 
	`PPPDEBUG
((
LOG_ERR
, "µpifOuçut[%d]:ÜökÇŸ up\n", 
pd
));

851 
	`LINK_STATS_INC
(
lök
.
πîr
);

852 
	`LINK_STATS_INC
(
lök
.
dr›
);

853  
ERR_RTE
;

856 #i‡
PPPOE_SUPPORT


857 if(
pc
->
ëhif
) {

858  
	`µpifOuçutOvîEthî√t
(
pd
, 
pb
);

862 #i‡
PPPOS_SUPPORT


864 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

865 i‡(
hódMB
 =
NULL
) {

866 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: fú°áŒo¯Áû\n", 
pd
));

867 
	`LINK_STATS_INC
(
lök
.
memîr
);

868 
	`LINK_STATS_INC
(
lök
.
dr›
);

869  
ERR_MEM
;

872 #i‡
VJ_SUPPORT


877 i‡(
¥Ÿocﬁ
 =
PPP_IP
 && 
pc
->
vjE«bÀd
) {

878 
	`vj_com¥ess_t˝
(&
pc
->
vjComp
, 
pb
)) {

879 
TYPE_IP
:

883 
TYPE_COMPRESSED_TCP
:

884 
¥Ÿocﬁ
 = 
PPP_VJC_COMP
;

886 
TYPE_UNCOMPRESSED_TCP
:

887 
¥Ÿocﬁ
 = 
PPP_VJC_UNCOMP
;

890 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: bad IPÖackë\n", 
pd
));

891 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

892 
	`LINK_STATS_INC
(
lök
.
dr›
);

893 
	`pbuf_‰ì
(
hódMB
);

894  
ERR_VAL
;

899 
èûMB
 = 
hódMB
;

902 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

903 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

906 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

907 i‡(!
pc
->
accomp
) {

908 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_ALLSTATIONS
);

909 
èûMB
 = 
	`µpAµíd
(
PPP_ALLSTATIONS
,ÅaûMB, &
pc
->
outACCM
);

910 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_UI
);

911 
èûMB
 = 
	`µpAµíd
(
PPP_UI
,ÅaûMB, &
pc
->
outACCM
);

913 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

914 
c
 = (
¥Ÿocﬁ
 >> 8) & 0xFF;

915 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

916 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

918 
c
 = 
¥Ÿocﬁ
 & 0xFF;

919 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

920 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

923 
p
 = 
pb
;Ö;Ö =Ö->
√xt
) {

924 
n
;

925 
u_ch¨
 *
sPå
;

927 
sPå
 = (
u_ch¨
*)
p
->
∑ylﬂd
;

928 
n
 = 
p
->
Àn
;

929 
n
-- > 0) {

930 
c
 = *
sPå
++;

933 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

936 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

941 
c
 = ~
fcsOut
 & 0xFF;

942 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

943 
c
 = (~
fcsOut
 >> 8) & 0xFF;

944 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

945 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

948 i‡(!
èûMB
) {

949 
	`PPPDEBUG
((
LOG_WARNING
,

951 
pd
, 
¥Ÿocﬁ
));

952 
	`pbuf_‰ì
(
hódMB
);

953 
	`LINK_STATS_INC
(
lök
.
memîr
);

954 
	`LINK_STATS_INC
(
lök
.
dr›
);

955  
ERR_MEM
;

959 
	`PPPDEBUG
((
LOG_INFO
, "µpifOuçut[%d]:ÖrŸo=0x%04X\n", 
pd
, 
¥Ÿocﬁ
));

961 
	`nPut
(
pc
, 
hódMB
);

964  
ERR_OK
;

965 
	}
}

970 
	$µpIOCé
(
pd
, 
cmd
, *
¨g
)

972 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

973 
°
 = 0;

975 i‡(
pd
 < 0 ||Öd >
NUM_PPP
) {

976 
°
 = 
PPPERR_PARAM
;

978 
cmd
) {

979 
PPPCTLG_UPSTATUS
:

980 i‡(
¨g
) {

981 *(*)
¨g
 = ()(
pc
->
if_up
);

983 
°
 = 
PPPERR_PARAM
;

986 
PPPCTLS_ERRCODE
:

987 i‡(
¨g
) {

988 
pc
->
îrCode
 = *(*)
¨g
;

990 
°
 = 
PPPERR_PARAM
;

993 
PPPCTLG_ERRCODE
:

994 i‡(
¨g
) {

995 *(*)
¨g
 = ()(
pc
->
îrCode
);

997 
°
 = 
PPPERR_PARAM
;

1000 #i‡
PPPOS_SUPPORT


1001 
PPPCTLG_FD
:

1002 i‡(
¨g
) {

1003 *(
sio_fd_t
 *)
¨g
 = 
pc
->
fd
;

1005 
°
 = 
PPPERR_PARAM
;

1010 
°
 = 
PPPERR_PARAM
;

1015  
°
;

1016 
	}
}

1021 
u_öt


1022 
	$µpMTU
(
pd
)

1024 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1025 
u_öt
 
°
;

1028 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1029 
°
 = 0;

1031 
°
 = 
pc
->
mtu
;

1034  
°
;

1035 
	}
}

1037 #i‡
PPPOE_SUPPORT


1039 
	$µpWrôeOvîEthî√t
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1041 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1042 
pbuf
 *
pb
;

1045 
s
 += 2;

1046 
n
 -= 2;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + 
n
, 
PBUF_RAM
);

1049 if(!
pb
) {

1050 
	`LINK_STATS_INC
(
lök
.
memîr
);

1051 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1052  
PPPERR_ALLOC
;

1055 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

1057 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1059 
	`MEMCPY
(
pb
->
∑ylﬂd
, 
s
, 
n
);

1061 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

1062 
	`LINK_STATS_INC
(
lök
.
îr
);

1063  
PPPERR_DEVICE
;

1066 
	`LINK_STATS_INC
(
lök
.
xmô
);

1067  
PPPERR_NONE
;

1068 
	}
}

1077 
	$µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1079 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1080 #i‡
PPPOS_SUPPORT


1081 
u_ch¨
 
c
;

1082 
u_öt
 
fcsOut
;

1083 
pbuf
 *
hódMB
, *
èûMB
;

1086 #i‡
PPPOE_SUPPORT


1087 if(
pc
->
ëhif
) {

1088  
	`µpWrôeOvîEthî√t
(
pd
, 
s
, 
n
);

1092 #i‡
PPPOS_SUPPORT


1093 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1094 i‡(
hódMB
 =
NULL
) {

1095 
	`LINK_STATS_INC
(
lök
.
memîr
);

1096 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1097  
PPPERR_ALLOC
;

1100 
èûMB
 = 
hódMB
;

1104 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

1105 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1107 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1109 
fcsOut
 = 
PPP_INITFCS
;

1111 
n
-- > 0) {

1112 
c
 = *
s
++;

1115 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

1118 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1122 
c
 = ~
fcsOut
 & 0xFF;

1123 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1124 
c
 = (~
fcsOut
 >> 8) & 0xFF;

1125 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1126 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1130 i‡(!
èûMB
) {

1131 
	`PPPDEBUG
((
LOG_WARNING
,

1132 "µpWrôe[%d]: AŒo¯î∏- dr›pögÖbu‡Àn=%d\n", 
pd
, 
hódMB
->
Àn
));

1134 
	`pbuf_‰ì
(
hódMB
);

1135 
	`LINK_STATS_INC
(
lök
.
memîr
);

1136 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1137  
PPPERR_ALLOC
;

1140 
	`PPPDEBUG
((
LOG_INFO
, "µpWrôe[%d]:Üí=%d\n", 
pd
, 
hódMB
->
Àn
));

1142 
	`nPut
(
pc
, 
hódMB
);

1145  
PPPERR_NONE
;

1146 
	}
}

1153 
	$µp_£nd_c⁄fig
–
unô
, 
mtu
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1155 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1156 
i
;

1158 
pc
->
mtu
 = mtu;

1159 
pc
->
pcomp
 =Öcomp;

1160 
pc
->
accomp
 =áccomp;

1163 
i
 = 0; i < 32/8; i++) {

1164 
pc
->
outACCM
[
i
] = (
u_ch¨
)((
asyncm≠
 >> (8 * i)) & 0xFF);

1166 
	`PPPDEBUG
((
LOG_INFO
, "ppp_send_config[%d]: outACCM=%X %X %X %X\n",

1167 
unô
,

1168 
pc
->
outACCM
[0],Öc->outACCM[1],Öc->outACCM[2],Öc->outACCM[3]));

1169 
	}
}

1176 
	$µp_£t_xaccm
(
unô
, 
ext_accm
 *
accm
)

1178 
	`SMEMCPY
(
µpC⁄åﬁ
[
unô
].
outACCM
, 
accm
, (
ext_accm
));

1179 
	`PPPDEBUG
((
LOG_INFO
, "ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",

1180 
unô
,

1181 
µpC⁄åﬁ
[
unô
].
outACCM
[0],

1182 
µpC⁄åﬁ
[
unô
].
outACCM
[1],

1183 
µpC⁄åﬁ
[
unô
].
outACCM
[2],

1184 
µpC⁄åﬁ
[
unô
].
outACCM
[3]));

1185 
	}
}

1193 
	$µp_ªcv_c⁄fig
–
unô
, 
mru
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1195 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1196 
i
;

1198 
	`LWIP_UNUSED_ARG
(
accomp
);

1199 
	`LWIP_UNUSED_ARG
(
pcomp
);

1200 
	`LWIP_UNUSED_ARG
(
mru
);

1203 
i
 = 0; i < 32 / 8; i++) {

1204 
pc
->
öACCM
[
i
] = (
u_ch¨
)(
asyncm≠
 >> (i * 8));

1206 
	`PPPDEBUG
((
LOG_INFO
, "ppp_recv_config[%d]: inACCM=%X %X %X %X\n",

1207 
unô
,

1208 
pc
->
öACCM
[0],Öc->inACCM[1],Öc->inACCM[2],Öc->inACCM[3]));

1209 
	}
}

1219 
	$c˝_ã°
–
unô
, 
›t_Àn
, 
f‹_å™smô
, 
u_ch¨
 *
›t_±r
)

1222 
	}
}

1228 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1231 
	}
}

1239 
	$c˝_Áèl_îr‹
(
unô
)

1243 
	}
}

1250 
	$gë_idÀ_time
(
u
, 
µp_idÀ
 *
ù
)

1253 
	`LWIP_UNUSED_ARG
(
u
);

1254 
	`LWIP_UNUSED_ARG
(
ù
);

1257 
	}
}

1268 
u32_t


1269 
	$GëMask
(
u32_t
 
addr
)

1271 
u32_t
 
mask
, 
nmask
;

1273 
	`ht⁄l
(
addr
);

1274 i‡(
	`IN_CLASSA
(
addr
)) {

1275 
nmask
 = 
IN_CLASSA_NET
;

1276 } i‡(
	`IN_CLASSB
(
addr
)) {

1277 
nmask
 = 
IN_CLASSB_NET
;

1279 
nmask
 = 
IN_CLASSC_NET
;

1283 
mask
 = 
sub√tMask
 | 
	`ht⁄l
(
nmask
);

1290  
mask
;

1291 
	}
}

1297 
	$sifvjcomp
–
pd
, 
vjcomp
, 
cidcomp
, 
maxcid
)

1299 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1300 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1302 
pc
->
vjE«bÀd
 = 
vjcomp
;

1303 
pc
->
vjComp
.
com¥essSlŸ
 = 
cidcomp
;

1304 
pc
->
vjComp
.
maxSlŸIndex
 = 
maxcid
;

1305 
	`PPPDEBUG
((
LOG_INFO
, "sifvjcomp: VJ compressÉnable=%d slot=%d max slot=%d\n",

1306 
vjcomp
, 
cidcomp
, 
maxcid
));

1310 
	}
}

1315 
îr_t


1316 
	$µpifNëifInô
(
√tif
 *netif)

1318 
√tif
->
«me
[0] = 'p';

1319 
√tif
->
«me
[1] = 'p';

1320 
√tif
->
ouçut
 = 
µpifOuçut
;

1321 
√tif
->
mtu
 = 
	`µpMTU
((Íëif->
°©e
);

1322  
ERR_OK
;

1323 
	}
}

1330 
	$sifup
(
pd
)

1332 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1333 
°
 = 1;

1335 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1336 
°
 = 0;

1337 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1339 
	`√tif_ªmove
(&
pc
->
√tif
);

1340 i‡(
	`√tif_add
(&
pc
->
√tif
, &pc->
addrs
.
our_ùaddr
, &pc->addrs.
√tmask
, &pc->addrs.
his_ùaddr
, (*)
pd
, 
µpifNëifInô
, 
ù_öput
)) {

1341 
	`√tif_£t_up
(&
pc
->
√tif
);

1342 
pc
->
if_up
 = 1;

1343 
pc
->
îrCode
 = 
PPPERR_NONE
;

1345 
	`PPPDEBUG
((
LOG_DEBUG
, "sifup: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1346 if(
pc
->
lökSètusCB
) {

1347 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
, &pc->
addrs
);

1350 
°
 = 0;

1351 
	`PPPDEBUG
((
LOG_ERR
, "sifup[%d]:Çëif_add faûed\n", 
pd
));

1355  
°
;

1356 
	}
}

1362 
	$si‚pmode
(
u
, 
¥Ÿo
, 
NPmode
 
mode
)

1364 
	`LWIP_UNUSED_ARG
(
u
);

1365 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

1366 
	`LWIP_UNUSED_ARG
(
mode
);

1368 
	}
}

1374 
	$sifdown
(
pd
)

1376 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1377 
°
 = 1;

1379 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1380 
°
 = 0;

1381 
	`PPPDEBUG
((
LOG_WARNING
, "sifdown[%d]: badÖ¨ms\n", 
pd
));

1383 
pc
->
if_up
 = 0;

1384 
	`√tif_ªmove
(&
pc
->
√tif
);

1385 
	`PPPDEBUG
((
LOG_DEBUG
, "sifdown: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1386 if(
pc
->
lökSètusCB
) {

1387 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
, 
PPPERR_CONNECT
, 
NULL
);

1390  
°
;

1391 
	}
}

1403 
	$siÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
, u32_à
m
, u32_à
ns1
, u32_à
ns2
)

1405 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1406 
°
 = 1;

1408 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1409 
°
 = 0;

1410 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1412 
	`SMEMCPY
(&
pc
->
addrs
.
our_ùaddr
, &
o
, (o));

1413 
	`SMEMCPY
(&
pc
->
addrs
.
his_ùaddr
, &
h
, (h));

1414 
	`SMEMCPY
(&
pc
->
addrs
.
√tmask
, &
m
, (m));

1415 
	`SMEMCPY
(&
pc
->
addrs
.
dns1
, &
ns1
, (ns1));

1416 
	`SMEMCPY
(&
pc
->
addrs
.
dns2
, &
ns2
, (ns2));

1418  
°
;

1419 
	}
}

1429 
	$ciÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
)

1431 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1432 
°
 = 1;

1434 
	`LWIP_UNUSED_ARG
(
o
);

1435 
	`LWIP_UNUSED_ARG
(
h
);

1436 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1437 
°
 = 0;

1438 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1440 
	`IP4_ADDR
(&
pc
->
addrs
.
our_ùaddr
, 0,0,0,0);

1441 
	`IP4_ADDR
(&
pc
->
addrs
.
his_ùaddr
, 0,0,0,0);

1442 
	`IP4_ADDR
(&
pc
->
addrs
.
√tmask
, 255,255,255,0);

1443 
	`IP4_ADDR
(&
pc
->
addrs
.
dns1
, 0,0,0,0);

1444 
	`IP4_ADDR
(&
pc
->
addrs
.
dns2
, 0,0,0,0);

1446  
°
;

1447 
	}
}

1453 
	$sifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1455 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1456 
°
 = 1;

1458 
	`LWIP_UNUSED_ARG
(
l
);

1459 
	`LWIP_UNUSED_ARG
(
g
);

1461 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1462 
°
 = 0;

1463 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1465 
	`√tif_£t_deÁu…
(&
pc
->
√tif
);

1470  
°
;

1471 
	}
}

1477 
	$cifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1479 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1480 
°
 = 1;

1482 
	`LWIP_UNUSED_ARG
(
l
);

1483 
	`LWIP_UNUSED_ARG
(
g
);

1485 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1486 
°
 = 0;

1487 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1489 
	`√tif_£t_deÁu…
(
NULL
);

1492  
°
;

1493 
	}
}

1499 #i‡
PPPOS_SUPPORT


1503 
	$µpMaö
(*
¨g
)

1505 
pd
 = ()
¨g
;

1506 
pbuf
 *
p
;

1507 
PPPC⁄åﬁ
* 
pc
;

1508 
c
;

1510 
pc
 = &
µpC⁄åﬁ
[
pd
];

1512 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
PPP_MRU
+
PPP_HDRLEN
, 
PBUF_RAM
);

1513 i‡(!
p
) {

1514 
	`LWIP_ASSERT
("∞!NULL", 
p
);

1515 
pc
->
îrCode
 = 
PPPERR_ALLOC
;

1516 
out
;

1522 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1523 
	`t˝ù_ˇŒback
(
µpSèπCB
, 
¨g
);

1524 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

1525 i‡(
pc
->
kûl_lök
) {

1526 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

1527 
pc
->
îrCode
 = 
PPPERR_USER
;

1529 
	`t˝ù_ˇŒback
(
µpSt›CB
, 
¨g
);

1530 
pc
->
kûl_lök
 = 0;

1531 } i‡(
pc
->
sig_hup
) {

1532 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

1533 
pc
->
sig_hup
 = 0;

1534 
	`t˝ù_ˇŒback
(
µpHupCB
, 
¨g
);

1536 
c
 = 
	`sio_ªad
(
pc
->
fd
, 
p
->
∑ylﬂd
,Ö->
Àn
);

1537 if(
c
 > 0) {

1538 
	`µpInProc
(
pd
, 
p
->
∑ylﬂd
, 
c
);

1540 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sio_ªadÜí=%dÑëu∫ed %d\n", 
pd
, 
p
->
Àn
, 
c
));

1541 
	`sys_m¶ìp
(1);

1545 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: PHASE_DEAD\n", 
pd
));

1546 
	`µpDr›
(
pc
);

1547 
	`pbuf_‰ì
(
p
);

1549 
out
:

1550 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1551 if(
pc
->
lökSètusCB
) {

1552 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1555 
pc
->
›íFœg
 = 0;

1556 
	}
}

1559 #i‡
PPPOE_SUPPORT


1562 
	$µpOvîEthî√tInôFaûed
(* 
¨g
)

1564 
PPPC⁄åﬁ
* 
pc
;

1565 
pd
 = ()
¨g
;

1567 
	`µpHupCB
(
¨g
);

1568 
	`µpSt›CB
(
¨g
);

1570 
pc
 = &
µpC⁄åﬁ
[
pd
];

1571 
	`µp€_de°roy
(&
pc
->
√tif
);

1572 
pc
->
›íFœg
 = 0;

1574 if(
pc
->
lökSètusCB
) {

1575 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1577 
	}
}

1580 
	$µpOvîEthî√tLökSètusCB
(
pd
, 
up
)

1582 if(
up
) {

1583 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1584 
	`t˝ù_ˇŒback
(
µpSèπCB
, (*)
pd
);

1586 
PPPC⁄åﬁ
* 
pc
;

1587 
pc
 = &
µpC⁄åﬁ
[
pd
];

1588 
	`t˝ù_ˇŒback
(
µpOvîEthî√tInôFaûed
, (*)
pd
);

1590 
	}
}

1593 
pbuf
 *

1594 
	$µpSögÀBuf
(
pbuf
 *
p
)

1596 
pbuf
 *
q
, *
b
;

1597 
u_ch¨
 *
∂
;

1599 if(
p
->
tŸ_Àn
 =p->
Àn
) {

1600  
p
;

1603 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

1604 if(!
q
) {

1605 
	`PPPDEBUG
((
LOG_ERR
,

1606 "µpSögÀBuf: u«bÀÅÿÆlo¯√w bu‡(%d)\n", 
p
->
tŸ_Àn
));

1607  
p
;

1610 
b
 = 
p
, 
∂
 = 
q
->
∑ylﬂd
; b !
NULL
; b = b->
√xt
) {

1611 
	`MEMCPY
(
∂
, 
b
->
∑ylﬂd
, b->
Àn
);

1612 
∂
 +
b
->
Àn
;

1615 
	`pbuf_‰ì
(
p
);

1617  
q
;

1618 
	}
}

1620 
	sµpI≈utHódî
 {

1621 
	munô
;

1622 
u16_t
 
	m¥Ÿo
;

1630 
	$µpI≈ut
(*
¨g
)

1632 
pbuf
 *
nb
 = (pbu‡*)
¨g
;

1633 
u16_t
 
¥Ÿocﬁ
;

1634 
pd
;

1636 
pd
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
unô
;

1637 
¥Ÿocﬁ
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
¥Ÿo
;

1639 if(
	`pbuf_hódî
(
nb
, -()(
µpI≈utHódî
))) {

1640 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1641 
dr›
;

1644 
	`LINK_STATS_INC
(
lök
.
ªcv
);

1651 if((
l˝_pha£
[
pd
] <
PHASE_AUTHENTICATE
Ë&& (
¥Ÿocﬁ
 !
PPP_LCP
)) {

1652 if(!((
¥Ÿocﬁ
 =
PPP_LQR
Ë|| (¥Ÿocﬁ =
PPP_PAP
Ë|| (¥Ÿocﬁ =
PPP_CHAP
)) ||

1653 (
l˝_pha£
[
pd
] !
PHASE_AUTHENTICATE
)) {

1654 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut: disˇrdögÖrŸÿ0x%04X i¿pha£ %d\n", 
¥Ÿocﬁ
, 
l˝_pha£
[
pd
]));

1655 
dr›
;

1659 
¥Ÿocﬁ
) {

1660 
PPP_VJC_COMP
:

1661 #i‡
VJ_SUPPORT


1662 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_com∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1667 i‡((
	`vj_uncom¥ess_t˝
(&
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&& (µpC⁄åﬁ[pd].
√tif
.
öput
)) {

1668 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1672 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ com¥es£d\n", 
pd
));

1675 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: dr› VJ Com∞ö %d:%s\n", 
pd
, 
nb
->
Àn
,Çb->
∑ylﬂd
));

1679 
PPP_VJC_UNCOMP
:

1680 #i‡
VJ_SUPPORT


1681 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_u¿öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1686 i‡((
	`vj_uncom¥ess_uncomp
(
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&&ÖµC⁄åﬁ[pd].
√tif
.
öput
) {

1687 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1691 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ uncom¥es£d\n", 
pd
));

1694 
	`PPPDEBUG
((
LOG_INFO
,

1696 
pd
, 
nb
->
Àn
, 
	`LWIP_MIN
“b->À¿* 2, 40),Çb->
∑ylﬂd
));

1700 
PPP_IP
:

1701 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: i∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1702 i‡(
µpC⁄åﬁ
[
pd
].
√tif
.
öput
) {

1703 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1709 
¥Ÿít
 *
¥Ÿp
;

1710 
i
;

1715 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1716 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1717 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: %†Àn=%d\n", 
pd
, 
¥Ÿp
->
«me
, 
nb
->
Àn
));

1718 
nb
 = 
	`µpSögÀBuf
(nb);

1719 (*
¥Ÿp
->
öput
)(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1720 
out
;

1725 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]:Ñeje˘ög unsuµ‹ãdÖrŸÿ0x%04XÜí=%d\n", 
pd
, 
¥Ÿocﬁ
, 
nb
->
Àn
));

1726 i‡(
	`pbuf_hódî
(
nb
, (
¥Ÿocﬁ
))) {

1727 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1728 
dr›
;

1730 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1731 
¥Ÿocﬁ
 = 
	`ht⁄s
(protocol);

1732 
	`SMEMCPY
(
nb
->
∑ylﬂd
, &
¥Ÿocﬁ
, (protocol));

1734 
	`l˝_•rŸªj
(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1739 
dr›
:

1740 
	`LINK_STATS_INC
(
lök
.
dr›
);

1742 
out
:

1743 
	`pbuf_‰ì
(
nb
);

1745 
	}
}

1747 #i‡
PPPOS_SUPPORT


1752 
	$µpDr›
(
PPPC⁄åﬁ
 *
pc
)

1754 i‡(
pc
->
öHód
 !
NULL
) {

1756 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›: %d:%.*H\n", 
pc
->
öHód
->
Àn
, 
	`mö
(60,Öc->öHód->À¿* 2),Öc->öHód->
∑ylﬂd
));

1758 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›:Öbu‡Àn=%d\n", 
pc
->
öHód
->
Àn
));

1759 i‡(
pc
->
öTaû
 && (pc->öTaû !pc->
öHód
)) {

1760 
	`pbuf_‰ì
(
pc
->
öTaû
);

1762 
	`pbuf_‰ì
(
pc
->
öHód
);

1763 
pc
->
öHód
 = 
NULL
;

1764 
pc
->
öTaû
 = 
NULL
;

1766 #i‡
VJ_SUPPORT


1767 
	`vj_uncom¥ess_îr
(&
pc
->
vjComp
);

1770 
	`LINK_STATS_INC
(
lök
.
dr›
);

1771 
	}
}

1777 
	$µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
)

1779 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1780 
pbuf
 *
√xtNBuf
;

1781 
u_ch¨
 
curCh¨
;

1783 
	`PPPDEBUG
((
LOG_DEBUG
, "µpInProc[%d]: gŸ %d byãs\n", 
pd
, 
l
));

1784 
l
-- > 0) {

1785 
curCh¨
 = *
s
++;

1788 i‡(
	`ESCAPE_P
(
pc
->
öACCM
, 
curCh¨
)) {

1794 i‡(
curCh¨
 =
PPP_ESCAPE
) {

1795 
pc
->
öEsˇ≥d
 = 1;

1797 } i‡(
curCh¨
 =
PPP_FLAG
) {

1799 i‡(
pc
->
öSèã
 <
PDADDRESS
) {

1802 } i‡(
pc
->
öSèã
 < 
PDDATA
) {

1803 
	`PPPDEBUG
((
LOG_WARNING
,

1805 
pd
, 
pc
->
öSèã
));

1806 
	`LINK_STATS_INC
(
lök
.
À√º
);

1807 
	`µpDr›
(
pc
);

1809 } i‡(
pc
->
öFCS
 !
PPP_GOODFCS
) {

1810 
	`PPPDEBUG
((
LOG_INFO
,

1812 
pd
, 
pc
->
öFCS
,Öc->
öPrŸocﬁ
));

1813 
	`LINK_STATS_INC
(
lök
.
chkîr
);

1814 
	`µpDr›
(
pc
);

1818 if(
pc
->
öTaû
->
Àn
 >= 2) {

1819 
pc
->
öTaû
->
Àn
 -= 2;

1821 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1822 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1823 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1826 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1827 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1828 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1831 
	`pbuf_ªÆloc
(
pc
->
öHód
,Öc->öHód->
tŸ_Àn
 - 2);

1835 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pc
->
öHód
Ë!
ERR_OK
) {

1836 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1837 
	`pbuf_‰ì
(
pc
->
öHód
);

1838 
	`LINK_STATS_INC
(
lök
.
dr›
);

1840 
pc
->
öHód
 = 
NULL
;

1841 
pc
->
öTaû
 = 
NULL
;

1845 
pc
->
öFCS
 = 
PPP_INITFCS
;

1846 
pc
->
öSèã
 = 
PDADDRESS
;

1847 
pc
->
öEsˇ≥d
 = 0;

1851 
	`PPPDEBUG
((
LOG_WARNING
,

1852 "µpInProc[%d]: Dr›pög ACCM ch¨ <%d>\n", 
pd
, 
curCh¨
));

1857 i‡(
pc
->
öEsˇ≥d
) {

1858 
pc
->
öEsˇ≥d
 = 0;

1859 
curCh¨
 ^
PPP_TRANS
;

1863 
pc
->
öSèã
) {

1864 
PDIDLE
:

1867 i‡(
curCh¨
 !
PPP_ALLSTATIONS
) {

1872 
PDSTART
:

1874 
pc
->
öFCS
 = 
PPP_INITFCS
;

1877 
PDADDRESS
:

1878 i‡(
curCh¨
 =
PPP_ALLSTATIONS
) {

1879 
pc
->
öSèã
 = 
PDCONTROL
;

1884 
PDCONTROL
:

1886 i‡(
curCh¨
 =
PPP_UI
) {

1887 
pc
->
öSèã
 = 
PDPROTOCOL1
;

1892 
	`PPPDEBUG
((
LOG_WARNING
,

1893 "µpInProc[%d]: InvÆid c⁄åﬁ <%d>\n", 
pd
, 
curCh¨
));

1894 
pc
->
öSèã
 = 
PDSTART
;

1897 
PDPROTOCOL1
:

1900 i‡(
curCh¨
 & 1) {

1901 
pc
->
öPrŸocﬁ
 = 
curCh¨
;

1902 
pc
->
öSèã
 = 
PDDATA
;

1904 
pc
->
öPrŸocﬁ
 = (
u_öt
)
curCh¨
 << 8;

1905 
pc
->
öSèã
 = 
PDPROTOCOL2
;

1908 
PDPROTOCOL2
:

1909 
pc
->
öPrŸocﬁ
 |
curCh¨
;

1910 
pc
->
öSèã
 = 
PDDATA
;

1912 
PDDATA
:

1914 i‡(
pc
->
öTaû
 =
NULL
 ||Öc->öTaû->
Àn
 =
PBUF_POOL_BUFSIZE
) {

1915 if(
pc
->
öTaû
) {

1916 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1917 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1918 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1922 
√xtNBuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1923 i‡(
√xtNBuf
 =
NULL
) {

1927 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]: NO FREE MBUFS!\n", 
pd
));

1928 
	`LINK_STATS_INC
(
lök
.
memîr
);

1929 
	`µpDr›
(
pc
);

1930 
pc
->
öSèã
 = 
PDSTART
;

1933 i‡(
pc
->
öHód
 =
NULL
) {

1934 
µpI≈utHódî
 *
pih
 = 
√xtNBuf
->
∑ylﬂd
;

1936 
pih
->
unô
 = 
pd
;

1937 
pih
->
¥Ÿo
 = 
pc
->
öPrŸocﬁ
;

1939 
√xtNBuf
->
Àn
 +(*
pih
);

1941 
pc
->
öHód
 = 
√xtNBuf
;

1943 
pc
->
öTaû
 = 
√xtNBuf
;

1946 ((
u_ch¨
*)
pc
->
öTaû
->
∑ylﬂd
)[pc->öTaû->
Àn
++] = 
curCh¨
;

1951 
pc
->
öFCS
 = 
	`PPP_FCS
’c->öFCS, 
curCh¨
);

1955 
	`avR™domize
();

1956 
	}
}

1959 #i‡
PPPOE_SUPPORT


1961 
	$µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
)

1963 
µpI≈utHódî
 *
pih
;

1964 
u16_t
 
öPrŸocﬁ
;

1966 if(
pb
->
Àn
 < (
öPrŸocﬁ
)) {

1967 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet:Åoo small forÖrotocol field\n"));

1968 
dr›
;

1971 
öPrŸocﬁ
 = (((
u8_t
 *)
pb
->
∑ylﬂd
)[0] << 8) | ((u8_t*)pb->payload)[1];

1974 i‡(
	`pbuf_hódî
(
pb
, (*
pih
Ë- (
öPrŸocﬁ
)) != 0) {

1975 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet: couldÇotállocateÑoom for header\n"));

1976 
dr›
;

1979 
pih
 = 
pb
->
∑ylﬂd
;

1981 
pih
->
unô
 = 
pd
;

1982 
pih
->
¥Ÿo
 = 
öPrŸocﬁ
;

1985 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pb
Ë!
ERR_OK
) {

1986 
	`PPPDEBUG
((
LOG_ERR
, "µpInProcOvîEthî√t[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1987 
dr›
;

1992 
dr›
:

1993 
	`LINK_STATS_INC
(
lök
.
dr›
);

1994 
	`pbuf_‰ì
(
pb
);

1996 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ppp.h

34 #i‚de‡
PPP_H


35 
	#PPP_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"lwù/def.h
"

42 
	~"lwù/sio.h
"

43 
	~"lwù/≠i.h
"

44 
	~"lwù/sockës.h
"

45 
	~"lwù/°©s.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/√tif.h
"

96 
	#TIMEOUT
(
f
, 
a
, 
t
Ë
	`sys_u¡imeout
((f), (a)), 
	`sys_timeout
(—)*1000, (f), (a))

	)

97 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

100 #i‚de‡
__u_ch¨_deföed


103 
	tu_l⁄g
;

104 
	tu_öt
;

105 
	tu_sh‹t
;

106 
	tu_ch¨
;

118 
	#PPP_HDRLEN
 4

	)

119 
	#PPP_FCSLEN
 2

	)

125 
	#PPP_ALLSTATIONS
 0xf‡

	)

126 
	#PPP_UI
 0x03

	)

127 
	#PPP_FLAG
 0x7ê

	)

128 
	#PPP_ESCAPE
 0x7d

	)

129 
	#PPP_TRANS
 0x20

	)

134 
	#PPP_IP
 0x21

	)

135 
	#PPP_AT
 0x29

	)

136 
	#PPP_VJC_COMP
 0x2d

	)

137 
	#PPP_VJC_UNCOMP
 0x2‡

	)

138 
	#PPP_COMP
 0xfd

	)

139 
	#PPP_IPCP
 0x8021

	)

140 
	#PPP_ATCP
 0x8029

	)

141 
	#PPP_CCP
 0x80fd

	)

142 
	#PPP_LCP
 0xc021

	)

143 
	#PPP_PAP
 0xc023

	)

144 
	#PPP_LQR
 0xc025

	)

145 
	#PPP_CHAP
 0xc223

	)

146 
	#PPP_CBCP
 0xc029

	)

151 
	#PPP_INITFCS
 0xfff‡

	)

152 
	#PPP_GOODFCS
 0xf0b8

	)

153 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

158 
u_ch¨
 
	text_accm
[32];

163 
	eNPmode
 {

164 
	mNPMODE_PASS
,

165 
	mNPMODE_DROP
,

166 
	mNPMODE_ERROR
,

167 
	mNPMODE_QUEUE


176 
	#GETCHAR
(
c
, 
˝
) { \

177 (
c
Ë*(
˝
)++; \

178 }

	)

179 
	#PUTCHAR
(
c
, 
˝
) { \

180 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

181 }

	)

184 
	#GETSHORT
(
s
, 
˝
) { \

185 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

186 (
s
Ë|*(
˝
); (cp)++; \

187 }

	)

188 
	#PUTSHORT
(
s
, 
˝
) { \

189 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

190 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

191 }

	)

193 
	#GETLONG
(
l
, 
˝
) { \

194 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

195 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

196 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

197 (
l
Ë|*(
˝
); (cp)++; \

198 }

	)

199 
	#PUTLONG
(
l
, 
˝
) { \

200 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

201 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

202 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

203 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

204 }

	)

207 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

208 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

210 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

211 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

212 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

214 #i‡
PPP_DEBUG


215 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`µp_åa˚
(
LOG_INFO
, "RemŸêmesßge: %s\n", m); }

	)

217 
	#PRINTMSG
(
m
, 
l
)

	)

223 
	#MAKEHEADER
(
p
, 
t
) { \

224 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

225 
	`PUTCHAR
(
PPP_UI
, 
p
); \

226 
	`PUTSHORT
(
t
, 
p
); }

	)

233 
	#PPPERR_NONE
 0

	)

234 
	#PPPERR_PARAM
 -1

	)

235 
	#PPPERR_OPEN
 -2

	)

236 
	#PPPERR_DEVICE
 -3

	)

237 
	#PPPERR_ALLOC
 -4

	)

238 
	#PPPERR_USER
 -5

	)

239 
	#PPPERR_CONNECT
 -6

	)

240 
	#PPPERR_AUTHFAIL
 -7

	)

241 
	#PPPERR_PROTOCOL
 -8

	)

250 
	#PPPCTLG_UPSTATUS
 100

	)

251 
	#PPPCTLS_ERRCODE
 101

	)

252 
	#PPPCTLG_ERRCODE
 102

	)

253 
	#PPPCTLG_FD
 103

	)

263 
	s¥Ÿít
 {

264 
u_sh‹t
 
	m¥Ÿocﬁ
;

266 (*
	möô
Ë(
	munô
);

268 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

270 (*
	m¥Ÿªj
Ë(
	munô
);

272 (*
	mlowîup
Ë(
	munô
);

274 (*
	mlowîdown
Ë(
	munô
);

276 (*
	m›í
Ë(
	munô
);

278 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

281 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

282 (*
	m¥öãr
) (*, *, ...),

283 *
	m¨g
);

285 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

287 
	míabÀd_Êag
;

288 *
	m«me
;

291 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

293 (*
	mdem™d_c⁄f
Ë(
	munô
);

295 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

303 
	sµp_idÀ
 {

304 
u_sh‹t
 
	mxmô_idÀ
;

305 
u_sh‹t
 
	mªcv_idÀ
;

308 
	sµp_£âögs
 {

310 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

311 
u_öt
 
	mauth_ªquúed
 : 1;

312 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

313 
u_öt
 
	mªfu£_∑p
 : 1;

314 
u_öt
 
	mªfu£_ch≠
 : 1;

315 
u_öt
 
	mu£ho°«me
 : 1;

316 
u_öt
 
	mu£≥îdns
 : 1;

318 
u_sh‹t
 
	midÀ_time_limô
;

319 
	mmaxc⁄√˘
;

321 
	mu£r
 [
MAXNAMELEN
 + 1];

322 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

323 
	mour_«me
 [
MAXNAMELEN
 + 1];

324 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

327 
	sµp_addrs
 {

328 
ù_addr
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

336 
u_ch¨
 *
ouçackë_buf
[
NUM_PPP
];

338 
µp_£âögs
Öpp_settings;

340 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

348 
îr_t
 
µpInô
();

369 
	eµpAuthTy≥
 {

370 
	mPPPAUTHTYPE_NONE
,

371 
	mPPPAUTHTYPE_ANY
,

372 
	mPPPAUTHTYPE_PAP
,

373 
	mPPPAUTHTYPE_CHAP


376 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

385 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

390 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

393 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

400 
	`µpClo£
(
pd
);

405 
	`µpSigHUP
(
pd
);

411 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

416 
u_öt
 
	`µpMTU
(
pd
);

422 
	`µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

424 
	`µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

426 
pbuf
 *
	`µpSögÀBuf
(pbu‡*
p
);

428 
	`µpLökTîmö©ed
(
pd
);

430 
	`µpLökDown
(
pd
);

432 
	`µpMaöWakeup
(
pd
);

435 
	`µp_£nd_c⁄fig
 (, , 
u32_t
, , );

437 
	`µp_£t_xaccm
 (, 
ext_accm
 *);

439 
	`µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

441 
	`gë_idÀ_time
 (, 
µp_idÀ
 *);

444 
	`sifvjcomp
 (, , , );

446 
	`sifup
 ();

448 
	`si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

450 
	`sifdown
 ();

452 
	`siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

454 
	`ciÁddr
 (, 
u32_t
, u32_t);

456 
	`sifdeÁu…rouã
 (, 
u32_t
, u32_t);

458 
	`cifdeÁu…rouã
 (, 
u32_t
, u32_t);

461 
u32_t
 
	`GëMask
 (u32_t);

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ppp_oe.c

71 
	~"lwù/›t.h
"

73 #i‡
PPPOE_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"lwù/sys.h
"

80 
	~"√tif/µp_€.h
"

81 
	~"√tif/ëh¨p.h
"

83 
	~<°rög.h
>

84 
	~<°dio.h
>

87 #i‚de‡
_SYS_QUEUE_H_


88 
	#_SYS_QUEUE_H_


	)

104 
	#LIST_HEAD
(
«me
, 
ty≥
) \

105 
	s«me
 { \

106 
ty≥
 *
lh_fú°
; \

107 }

	)

109 
	#LIST_HEAD_INITIALIZER
(
hód
) \

110 { 
NULL
 }

	)

112 
	#LIST_ENTRY
(
ty≥
) \

114 
ty≥
 *
À_√xt
; \

115 
ty≥
 **
À_¥ev
; \

116 }

	)

122 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

124 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

126 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

127 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

128 (
v¨
); \

129 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

131 
	#LIST_INIT
(
hód
) do { \

132 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

133 } 0)

	)

135 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

136 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
) \

137 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

138 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

139 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

140 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

141 } 0)

	)

143 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

144 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

145 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

146 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

147 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

148 } 0)

	)

150 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

151 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

152 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

153 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

154 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

155 } 0)

	)

157 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

159 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

160 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

161 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

162 (
ñm
)->
fõld
.
À_¥ev
; \

163 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

164 } 0)

	)

170 
	#PPPOE_ADD_16
(
PTR
, 
VAL
) \

171 *(
PTR
)++ = (
VAL
) / 256; \

172 *(
PTR
)++ = (
VAL
Ë% 256

	)

175 
	#PPPOE_ADD_HEADER
(
PTR
, 
CODE
, 
SESS
, 
LEN
) \

176 *(
PTR
)++ = 
PPPOE_VERTYPE
; \

177 *(
PTR
)++ = (
CODE
); \

178 
	`PPPOE_ADD_16
(
PTR
, 
SESS
); \

179 
	`PPPOE_ADD_16
(
PTR
, 
LEN
)

	)

181 
	#PPPOE_DISC_TIMEOUT
 (5*1000Ë

	)

182 
	#PPPOE_SLOW_RETRY
 (60*1000Ë

	)

183 
	#PPPOE_DISC_MAXPADI
 4

	)

184 
	#PPPOE_DISC_MAXPADR
 2

	)

186 #ifde‡
PPPOE_SERVER


188 
	#IFF_PASSIVE
 
IFF_LINK0


	)

191 
	sµp€_so·c
 {

192 
LIST_ENTRY
(
µp€_so·c
Ë
	msc_li°
;

193 
√tif
 *
	msc_ëhif
;

194 
	msc_pd
;

195 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

197 
	msc_°©e
;

198 
ëh_addr
 
	msc_de°
;

199 
u16_t
 
	msc_£ssi⁄
;

201 *
	msc_£rvi˚_«me
;

202 *
	msc_c⁄˚¡øt‹_«me
;

203 
u8_t
 *
	msc_ac_cookõ
;

204 
size_t
 
	msc_ac_cookõ_Àn
;

205 #ifde‡
PPPOE_SERVER


206 
u8_t
 *
	msc_hunique
;

207 
size_t
 
	msc_hunique_Àn
;

209 
	msc_∑di_ªåõd
;

210 
	msc_∑dr_ªåõd
;

214 
µp€_di•©ch_disc_pkt
(
√tif
 *, 
pbuf
 *);

217 
µp€_do_disc⁄√˘
(
µp€_so·c
 *);

218 
µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *);

219 
µp€_˛ór_so·c
(
µp€_so·c
 *, const *);

222 
µp€_timeout
(*);

225 
îr_t
 
µp€_£nd_∑di
(
µp€_so·c
 *);

226 
îr_t
 
µp€_£nd_∑dr
(
µp€_so·c
 *);

227 #ifde‡
PPPOE_SERVER


228 
îr_t
 
µp€_£nd_∑do
(
µp€_so·c
 *);

229 
îr_t
 
µp€_£nd_∑ds
(
µp€_so·c
 *);

231 
îr_t
 
µp€_£nd_∑dt
(
√tif
 *, 
u_öt
, c⁄° 
u8_t
 *);

234 
µp€_so·c
 * 
µp€_föd_so·c_by_£ssi⁄
(
u_öt
, 
√tif
 *);

235 
µp€_so·c
 * 
µp€_föd_so·c_by_hunique
(
u8_t
 *, 
size_t
, 
√tif
 *);

237 
	$LIST_HEAD
(
µp€_so·c_hód
, 
µp€_so·c
Ë
µp€_so·c_li°
;

239 
µp€_hdæí
;

242 
	$µp€_öô
()

244 
µp€_hdæí
 = (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
;

245 
	`LIST_INIT
(&
µp€_so·c_li°
);

246 
	}
}

248 
îr_t


249 
	$µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
)

251 
µp€_so·c
 *
sc
;

253 
sc
 = 
	`mem_mÆloc
((
µp€_so·c
));

254 if(!
sc
) {

255 *
s˝å
 = 
NULL
;

256  
ERR_MEM
;

258 
	`mem£t
(
sc
, 0, (
µp€_so·c
));

261 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

263 
sc
->
sc_pd
 = 
pd
;

264 
sc
->
sc_lökSètusCB
 = 
lökSètusCB
;

265 
sc
->
sc_ëhif
 = 
ëhif
;

267 
	`LIST_INSERT_HEAD
(&
µp€_so·c_li°
, 
sc
, 
sc_li°
);

269 *
s˝å
 = 
sc
;

271  
ERR_OK
;

272 
	}
}

274 
îr_t


275 
	$µp€_de°roy
(
√tif
 *
iÂ
)

277 
µp€_so·c
 * 
sc
;

279 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

280 i‡(
sc
->
sc_ëhif
 =
iÂ
) {

285 if(!(
sc
 && (sc->
sc_ëhif
 =
iÂ
))) {

286  
ERR_IF
;

289 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

290 
	`LIST_REMOVE
(
sc
, 
sc_li°
);

292 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
) {

293 
	`mem_‰ì
(
sc
->
sc_c⁄˚¡øt‹_«me
);

295 i‡(
sc
->
sc_£rvi˚_«me
) {

296 
	`mem_‰ì
(
sc
->
sc_£rvi˚_«me
);

298 i‡(
sc
->
sc_ac_cookõ
) {

299 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

301 
	`mem_‰ì
(
sc
);

303  
ERR_OK
;

304 
	}
}

312 
µp€_so·c
 *

313 
	$µp€_föd_so·c_by_£ssi⁄
(
u_öt
 
£ssi⁄
, 
√tif
 *
rcvif
)

315 
µp€_so·c
 *
sc
;

317 i‡(
£ssi⁄
 == 0) {

318  
NULL
;

321 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

322 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION


323 && 
sc
->
sc_£ssi⁄
 =
£ssi⁄
) {

324 i‡(
sc
->
sc_ëhif
 =
rcvif
) {

325  
sc
;

327  
NULL
;

331  
NULL
;

332 
	}
}

336 
µp€_so·c
 *

337 
	$µp€_föd_so·c_by_hunique
(
u8_t
 *
tokí
, 
size_t
 
Àn
, 
√tif
 *
rcvif
)

339 
µp€_so·c
 *
sc
, *
t
;

341 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

342  
NULL
;

345 i‡(
Àn
 ! 
sc
) {

346  
NULL
;

348 
	`MEMCPY
(&
t
, 
tokí
, 
Àn
);

350 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

351 i‡(
sc
 =
t
) {

356 i‡(
sc
 =
NULL
) {

357 
	`PPPDEBUG
((
LOG_DEBUG
, "pppoe:álien host uniqueÅag,Ço session found\n"));

358  
NULL
;

362 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_PADI_SENT
 || sc->sc_°©ê>
PPPOE_STATE_SESSION
) {

363 
	`¥ötf
("%c%c%"
U16_F
": host uniqueÅag found, but it belongsÅoá connection in state %d\n",

364 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_°©e
);

365  
NULL
;

367 i‡(
sc
->
sc_ëhif
 !
rcvif
) {

368 
	`¥ötf
("%c%c%"
U16_F
": wrong interface,Çotáccepting host unique\n",

369 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

370  
NULL
;

372  
sc
;

373 
	}
}

376 
	$µp€_lök°©us_up
(*
¨g
)

378 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

380 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 1);

381 
	}
}

385 
	$µp€_di•©ch_disc_pkt
(
√tif
 *√tif, 
pbuf
 *
pb
)

387 
u16_t
 
èg
, 
Àn
;

388 
u16_t
 
£ssi⁄
, 
∂í
;

389 
µp€_so·c
 *
sc
;

390 c⁄° *
îr_msg
;

391 
dev«me
[6];

392 *
îr‹
;

393 
u8_t
 *
ac_cookõ
;

394 
size_t
 
ac_cookõ_Àn
;

395 #ifde‡
PPPOE_SERVER


396 
u8_t
 *
hunique
;

397 
size_t
 
hunique_Àn
;

399 
µp€hdr
 *
ph
;

400 
µp€èg
 
±
;

401 
off
 = 0, 
îr
, 
îr‹èg
;

402 
ëh_hdr
 *
ëhhdr
;

404 
pb
 = 
	`µpSögÀBuf
(pb);

406 
	`°r˝y
(
dev«me
, "pppoe");

407 
îr_msg
 = 
NULL
;

408 
îr‹èg
 = 0;

409 i‡(
pb
->
Àn
 < (*
ëhhdr
)) {

410 
d⁄e
;

412 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

413 
off
 +(*
ëhhdr
);

415 
ac_cookõ
 = 
NULL
;

416 
ac_cookõ_Àn
 = 0;

417 #ifde‡
PPPOE_SERVER


418 
hunique
 = 
NULL
;

419 
hunique_Àn
 = 0;

421 
£ssi⁄
 = 0;

422 i‡(
pb
->
Àn
 - 
off
 <
PPPOE_HEADERLEN
) {

423 
	`¥ötf
("µp€:ÖackëÅoÿsh‹t: %d\n", 
pb
->
Àn
);

424 
d⁄e
;

427 
ph
 = (
µp€hdr
 *Ë(
ëhhdr
 + 1);

428 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

429 
	`¥ötf
("µp€: unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

430 
d⁄e
;

432 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

433 
∂í
 = 
	`¡ohs
(
ph
->plen);

434 
off
 +(*
ph
);

436 i‡(
∂í
 + 
off
 > 
pb
->
Àn
) {

437 
	`¥ötf
("pppoe:Öacket content doesÇot fit: dataávailable = %d,Öacket size = %u\n",

438 
pb
->
Àn
 - 
off
, 
∂í
);

439 
d⁄e
;

441 if(
pb
->
tŸ_Àn
 =pb->
Àn
) {

442 
pb
->
tŸ_Àn
 =Öb->
Àn
 = 
off
 + 
∂í
;

444 
èg
 = 0;

445 
Àn
 = 0;

446 
sc
 = 
NULL
;

447 
off
 + (
±
Ë<
pb
->
Àn
) {

448 
	`MEMCPY
(&
±
, (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
, (pt));

449 
èg
 = 
	`¡ohs
(
±
.tag);

450 
Àn
 = 
	`¡ohs
(
±
.len);

451 i‡(
off
 + (
±
Ë+ 
Àn
 > 
pb
->len) {

452 
	`¥ötf
("µp€:Åag 0x%xÜí 0x%x i†toÿl⁄g\n", 
èg
, 
Àn
);

453 
d⁄e
;

455 
èg
) {

456 
PPPOE_TAG_EOL
:

457 
bªakbªak
;

458 
PPPOE_TAG_SNAME
:

460 
PPPOE_TAG_ACNAME
:

462 
PPPOE_TAG_HUNIQUE
:

463 i‡(
sc
 !
NULL
) {

466 #ifde‡
PPPOE_SERVER


467 
hunique
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

468 
hunique_Àn
 = 
Àn
;

470 
sc
 = 
	`µp€_föd_so·c_by_hunique
((
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
, 
√tif
);

471 i‡(
sc
 !
NULL
) {

472 
	`¢¥ötf
(
dev«me
, (dev«me), "%c%c%"
U16_F
, 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

475 
PPPOE_TAG_ACCOOKIE
:

476 i‡(
ac_cookõ
 =
NULL
) {

477 
ac_cookõ
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

478 
ac_cookõ_Àn
 = 
Àn
;

481 
PPPOE_TAG_SNAME_ERR
:

482 
îr_msg
 = "SERVICE NAME ERROR";

483 
îr‹èg
 = 1;

485 
PPPOE_TAG_ACSYS_ERR
:

486 
îr_msg
 = "AC SYSTEM ERROR";

487 
îr‹èg
 = 1;

489 
PPPOE_TAG_GENERIC_ERR
:

490 
îr_msg
 = "GENERIC ERROR";

491 
îr‹èg
 = 1;

494 i‡(
îr_msg
) {

495 
îr‹
 = 
NULL
;

496 i‡(
îr‹èg
 && 
Àn
) {

497 
îr‹
 = 
	`mem_mÆloc
(
Àn
+1);

498 i‡(
îr‹
) {

499 
	`°∫˝y
(
îr‹
, (*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
);

500 
îr‹
[
Àn
-1] = '\0';

503 i‡(
îr‹
) {

504 
	`¥ötf
("%s: %s: %s\n", 
dev«me
, 
îr_msg
, 
îr‹
);

505 
	`mem_‰ì
(
îr‹
);

507 
	`¥ötf
("%s: %s\n", 
dev«me
, 
îr_msg
);

509 i‡(
îr‹èg
) {

510 
d⁄e
;

513 
off
 +(
±
Ë+ 
Àn
;

516 
bªakbªak
:;

517 
ph
->
code
) {

518 
PPPOE_CODE_PADI
:

519 #ifde‡
PPPOE_SERVER


524 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

525 
d⁄e
;

527 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

528 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
)) {

531 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

534 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_INITIAL
) {

538 i‡(
sc
 =
NULL
) {

540 
d⁄e
;

542 i‡(
hunique
) {

543 i‡(
sc
->
sc_hunique
) {

544 
	`mem_‰ì
(
sc
->
sc_hunique
);

546 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

547 i‡(
sc
->
sc_hunique
 =
NULL
) {

548 
d⁄e
;

550 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

551 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

553 
	`MEMCPY
(&
sc
->
sc_de°
, 
eh
->
ëhî_sho°
,  sc->sc_dest);

554 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADO_SENT
;

555 
	`µp€_£nd_∑do
(
sc
);

558 
PPPOE_CODE_PADR
:

559 #ifde‡
PPPOE_SERVER


563 i‡(
ac_cookõ
 =
NULL
) {

565 
	`¥ötf
("pppoe:Ñeceived PADR butÇot includesác_cookie\n");

566 
d⁄e
;

568 
sc
 = 
	`µp€_föd_so·c_by_hunique
(
ac_cookõ
, 
ac_cookõ_Àn
, 
√tif
);

569 i‡(
sc
 =
NULL
) {

571 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

572 
	`¥ötf
("pppoe:Ñeceived PADR but couldÇot findÑequest for it\n");

574 
d⁄e
;

576 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

577 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADR\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

578 
d⁄e
;

580 i‡(
hunique
) {

581 i‡(
sc
->
sc_hunique
) {

582 
	`mem_‰ì
(
sc
->
sc_hunique
);

584 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

585 i‡(
sc
->
sc_hunique
 =
NULL
) {

586 
d⁄e
;

588 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

589 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

591 
	`µp€_£nd_∑ds
(
sc
);

592 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

593 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

597 
d⁄e
;

599 
PPPOE_CODE_PADO
:

600 i‡(
sc
 =
NULL
) {

602 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

603 
	`¥ötf
("pppoe:Ñeceived PADO but couldÇot findÑequest for it\n");

605 
d⁄e
;

607 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADI_SENT
) {

608 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADO\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

609 
d⁄e
;

611 i‡(
ac_cookõ
) {

612 i‡(
sc
->
sc_ac_cookõ
) {

613 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

615 
sc
->
sc_ac_cookõ
 = 
	`mem_mÆloc
(
ac_cookõ_Àn
);

616 i‡(
sc
->
sc_ac_cookõ
 =
NULL
) {

617 
d⁄e
;

619 
sc
->
sc_ac_cookõ_Àn
 = 
ac_cookõ_Àn
;

620 
	`MEMCPY
(
sc
->
sc_ac_cookõ
, 
ac_cookõ
, 
ac_cookõ_Àn
);

622 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhhdr
->
§c
.
addr
, (sc->sc_dest.addr));

623 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

624 
sc
->
sc_∑dr_ªåõd
 = 0;

625 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADR_SENT
;

626 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

627 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

629 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

631 
PPPOE_CODE_PADS
:

632 i‡(
sc
 =
NULL
) {

633 
d⁄e
;

635 
sc
->
sc_£ssi⁄
 = 
£ssi⁄
;

636 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

637 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%x c⁄√˘ed\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
£ssi⁄
));

638 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

639 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

641 
PPPOE_CODE_PADT
:

642 i‡(
sc
 =
NULL
) {

643 
d⁄e
;

645 
	`µp€_˛ór_so·c
(
sc
, "received PADT");

648 if(
sc
) {

649 
	`¥ötf
("%c%c%"
U16_F
": unknown code (0x%04x) session = 0x%04x\n",

650 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

651 
ph
->
code
, 
£ssi⁄
);

653 
	`¥ötf
("µp€: unknow¿codê(0x%04xË£ssi⁄ = 0x%04x\n", 
ph
->
code
, 
£ssi⁄
);

658 
d⁄e
:

659 
	`pbuf_‰ì
(
pb
);

661 
	}
}

664 
	$µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

667 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

668 
	`µp€_di•©ch_disc_pkt
(
√tif
, 
p
);

670 
	`pbuf_‰ì
(
p
);

672 
	}
}

675 
	$µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
pb
)

677 
u16_t
 
£ssi⁄
, 
∂í
;

678 
µp€_so·c
 *
sc
;

679 
µp€hdr
 *
ph
;

680 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


681 
u8_t
 
sho°
[
ETHER_ADDR_LEN
];

684 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


685 
	`MEMCPY
(
sho°
, ((
ëh_hdr
 *)
pb
->
∑ylﬂd
)->
§c
.
addr
, (shost));

687 i‡(
	`pbuf_hódî
(
pb
, -()(
ëh_hdr
)) != 0) {

689 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header failed\n"));

690 
	`LINK_STATS_INC
(
lök
.
À√º
);

691 
dr›
;

694 
pb
 = 
	`µpSögÀBuf
 (pb);

696 i‡(
pb
->
Àn
 <
PPPOE_HEADERLEN
) {

697 
	`¥ötf
("µp€ (d©a): dr›pögÅoÿsh‹à∑ckë: %d byãs\n", 
pb
->
Àn
);

698 
dr›
;

701 i‡(
pb
->
Àn
 < (*
ph
)) {

702 
	`¥ötf
("pppoe_data_input: couldÇot get PPPoE header\n");

703 
dr›
;

705 
ph
 = (
µp€hdr
 *)
pb
->
∑ylﬂd
;

707 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

708 
	`¥ötf
("µp€ (d©a): unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

709 
dr›
;

711 i‡(
ph
->
code
 != 0) {

712 
dr›
;

715 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

716 
sc
 = 
	`µp€_föd_so·c_by_£ssi⁄
(
£ssi⁄
, 
√tif
);

717 i‡(
sc
 =
NULL
) {

718 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


719 
	`¥ötf
("µp€: i≈uàf‹ unknow¿£ssi⁄ 0x%x, sídög PADT\n", 
£ssi⁄
);

720 
	`µp€_£nd_∑dt
(
√tif
, 
£ssi⁄
, 
sho°
);

722 
dr›
;

725 
∂í
 = 
	`¡ohs
(
ph
->plen);

727 i‡(
	`pbuf_hódî
(
pb
, -()(
PPPOE_HEADERLEN
)) != 0) {

729 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header PPPOE_HEADERLEN failed\n"));

730 
	`LINK_STATS_INC
(
lök
.
À√º
);

731 
dr›
;

734 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€_d©a_öput: %c%c%"
U16_F
":Ökthdr.len=%d,Öppoe.len=%d\n",

735 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

736 
pb
->
Àn
, 
∂í
));

738 i‡(
pb
->
Àn
 < 
∂í
) {

739 
dr›
;

742 
	`µpInProcOvîEthî√t
(
sc
->
sc_pd
, 
pb
);

746 
dr›
:

747 
	`pbuf_‰ì
(
pb
);

748 
	}
}

750 
îr_t


751 
	$µp€_ouçut
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

753 
ëh_hdr
 *
ëhhdr
;

754 
u16_t
 
ëy≥
;

755 
îr_t
 
ªs
;

757 i‡(!
sc
->
sc_ëhif
) {

758 
	`pbuf_‰ì
(
pb
);

759  
ERR_IF
;

762 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

763 
ëy≥
 = 
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION
 ? 
ETHTYPE_PPPOE
 : 
ETHTYPE_PPPOEDISC
;

764 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëy≥
);

765 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, 
sc
->
sc_de°
.addr, (ethhdr->dest.addr));

766 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
sc
->
sc_ëhif
->
hwaddr
)->addr, (ethhdr->src.addr));

768 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
" (%xË°©e=%d, sessi⁄=0x%x ouçuà-> %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F",Üen=%d\n",

769 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
ëy≥
,

770 
sc
->
sc_°©e
, sc->
sc_£ssi⁄
,

771 
sc
->
sc_de°
.
addr
[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],

772 
pb
->
tŸ_Àn
));

774 
ªs
 = 
sc
->
sc_ëhif
->
	`lökouçut
(sc->sc_ëhif, 
pb
);

776 
	`pbuf_‰ì
(
pb
);

778  
ªs
;

779 
	}
}

781 
îr_t


782 
	$µp€_£nd_∑di
(
µp€_so·c
 *
sc
)

784 
pbuf
 *
pb
;

785 
u8_t
 *
p
;

786 
Àn
, 
l1
 = 0, 
l2
 = 0;

788 i‡(
sc
->
sc_°©e
 >
PPPOE_STATE_PADI_SENT
) {

789 
	`PPPDEBUG
((
LOG_ERR
, "ERROR:Öµ€_£nd_∑dòö sèã %d", 
sc
->
sc_°©e
));

793 
Àn
 = 2 + 2 + 2 + 2 +  
sc
;

794 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

795 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

796 
Àn
 +
l1
;

798 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

799 
l2
 = 
	`°æí
(
sc
->
sc_c⁄˚¡øt‹_«me
);

800 
Àn
 +2 + 2 + 
l2
;

804 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

805 i‡(!
pb
) {

806  
ERR_MEM
;

809 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

811 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADI
, 0, 
Àn
);

812 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

813 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

814 
	`PPPOE_ADD_16
(
p
, 
l1
);

815 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

816 
p
 +
l1
;

818 
	`PPPOE_ADD_16
(
p
, 0);

820 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

821 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACNAME
);

822 
	`PPPOE_ADD_16
(
p
, 
l2
);

823 
	`MEMCPY
(
p
, 
sc
->
sc_c⁄˚¡øt‹_«me
, 
l2
);

824 
p
 +
l2
;

826 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

827 
	`PPPOE_ADD_16
(
p
, (
sc
));

828 
	`MEMCPY
(
p
, &
sc
,  sc);

831  
	`µp€_ouçut
(
sc
, 
pb
);

832 
	}
}

835 
	$µp€_timeout
(*
¨g
)

837 
ªåy_waô
, 
îr
;

838 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

840 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
":Åimeout\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

842 
sc
->
sc_°©e
) {

843 
PPPOE_STATE_PADI_SENT
:

855 
ªåy_waô
 = 
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
);

857 
sc
->
sc_∑di_ªåõd
++;

858 i‡(
sc
->
sc_∑di_ªåõd
 >
PPPOE_DISC_MAXPADI
) {

860 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_LINK1
) == 0) {

862 
ªåy_waô
 = 
PPPOE_SLOW_RETRY
;

866 
	`µp€_ab‹t_c⁄√˘
(
sc
);

870 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

871 
sc
->
sc_∑di_ªåõd
--;

872 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿå™smô PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

874 
	`t˝ù_timeout
(
ªåy_waô
, 
µp€_timeout
, 
sc
);

877 
PPPOE_STATE_PADR_SENT
:

878 
sc
->
sc_∑dr_ªåõd
++;

879 i‡(
sc
->
sc_∑dr_ªåõd
 >
PPPOE_DISC_MAXPADR
) {

880 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

881 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

882 
sc
->
sc_∑dr_ªåõd
 = 0;

883 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

884 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

886 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
), 
µp€_timeout
, sc);

889 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

890 
sc
->
sc_∑dr_ªåõd
--;

891 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

893 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

895 
PPPOE_STATE_CLOSING
:

896 
	`µp€_do_disc⁄√˘
(
sc
);

901 
	}
}

905 
	$µp€_c⁄√˘
(
µp€_so·c
 *
sc
)

907 
îr
;

909 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_INITIAL
) {

910  
EBUSY
;

913 #ifde‡
PPPOE_SERVER


915 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

920 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

921 
sc
->
sc_∑dr_ªåõd
 = 0;

922 
îr
 = 
	`µp€_£nd_∑di
(
sc
);

923 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

924 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
, 
µp€_timeout
, 
sc
);

925  
îr
;

926 
	}
}

930 
	$µp€_disc⁄√˘
(
µp€_so·c
 *
sc
)

932 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

940 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

941 
	`t˝ù_timeout
(20, 
µp€_timeout
, 
sc
);

942 
	}
}

945 
	$µp€_do_disc⁄√˘
(
µp€_so·c
 *
sc
)

947 
îr
;

949 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

950 
îr
 = 
EBUSY
;

952 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": disc⁄√˘ög\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

953 
îr
 = 
	`µp€_£nd_∑dt
(
sc
->
sc_ëhif
, sc->
sc_£ssi⁄
, (c⁄° 
u8_t
 *)&sc->
sc_de°
);

957 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

958 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

959 i‡(
sc
->
sc_ac_cookõ
) {

960 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

961 
sc
->
sc_ac_cookõ
 = 
NULL
;

963 
sc
->
sc_ac_cookõ_Àn
 = 0;

964 #ifde‡
PPPOE_SERVER


965 i‡(
sc
->
sc_hunique
) {

966 
	`mem_‰ì
(
sc
->
sc_hunique
);

967 
sc
->
sc_hunique
 = 
NULL
;

969 
sc
->
sc_hunique_Àn
 = 0;

971 
sc
->
sc_£ssi⁄
 = 0;

973 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

975  
îr
;

976 
	}
}

980 
	$µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *
sc
)

982 
	`¥ötf
("%c%c%"
U16_F
": couldÇŸÉ°ablish c⁄√˘i⁄\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

983 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

985 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

988 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

989 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

990 
	}
}

993 
îr_t


994 
	$µp€_£nd_∑dr
(
µp€_so·c
 *
sc
)

996 
pbuf
 *
pb
;

997 
u8_t
 *
p
;

998 
size_t
 
Àn
, 
l1
 = 0;

1000 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADR_SENT
) {

1001  
ERR_CONN
;

1004 
Àn
 = 2 + 2 + 2 + 2 + (
sc
);

1005 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1006 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1007 
Àn
 +
l1
;

1009 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1010 
Àn
 +2 + 2 + 
sc
->
sc_ac_cookõ_Àn
;

1012 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1013 i‡(!
pb
) {

1014  
ERR_MEM
;

1016 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1017 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADR
, 0, 
Àn
);

1018 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1019 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1020 
	`PPPOE_ADD_16
(
p
, 
l1
);

1021 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1022 
p
 +
l1
;

1024 
	`PPPOE_ADD_16
(
p
, 0);

1026 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1027 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1028 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_ac_cookõ_Àn
);

1029 
	`MEMCPY
(
p
, 
sc
->
sc_ac_cookõ
, sc->
sc_ac_cookõ_Àn
);

1030 
p
 +
sc
->
sc_ac_cookõ_Àn
;

1032 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1033 
	`PPPOE_ADD_16
(
p
, (
sc
));

1034 
	`MEMCPY
(
p
, &
sc
,  sc);

1036  
	`µp€_ouçut
(
sc
, 
pb
);

1037 
	}
}

1040 
îr_t


1041 
	$µp€_£nd_∑dt
(
√tif
 *
outgoög_if
, 
u_öt
 
£ssi⁄
, c⁄° 
u8_t
 *
de°
)

1043 
pbuf
 *
pb
;

1044 
ëh_hdr
 *
ëhhdr
;

1045 
îr_t
 
ªs
;

1046 
u8_t
 *
p
;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
, 
PBUF_RAM
);

1049 i‡(!
pb
) {

1050  
ERR_MEM
;

1053 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

1054 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_PPPOEDISC
);

1055 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, dest, (ethhdr->dest.addr));

1056 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
outgoög_if
->
hwaddr
)->addr, (ethhdr->src.addr));

1058 
p
 = (
u8_t
*)(
ëhhdr
 + 1);

1059 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADT
, 
£ssi⁄
, 0);

1061 
ªs
 = 
outgoög_if
->
	`lökouçut
(outgoög_if, 
pb
);

1063 
	`pbuf_‰ì
(
pb
);

1065  
ªs
;

1066 
	}
}

1068 #ifde‡
PPPOE_SERVER


1069 
îr_t


1070 
	$µp€_£nd_∑do
(
µp€_so·c
 *
sc
)

1072 
pbuf
 *
pb
;

1073 
u8_t
 *
p
;

1074 
size_t
 
Àn
;

1076 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1077  
ERR_CONN
;

1081 
Àn
 = 0;

1083 
Àn
 +2 + 2 + (
sc
);

1085 
Àn
 +2 + 2 + 
sc
->
sc_hunique_Àn
;

1086 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1087 i‡(!
pb
) {

1088  
ERR_MEM
;

1090 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1091 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADO
, 0, 
Àn
);

1092 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1093 
	`PPPOE_ADD_16
(
p
, (
sc
));

1094 
	`MEMCPY
(
p
, &
sc
, (sc));

1095 
p
 +(
sc
);

1096 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1097 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1098 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1099  
	`µp€_ouçut
(
sc
, 
pb
);

1100 
	}
}

1102 
îr_t


1103 
	$µp€_£nd_∑ds
(
µp€_so·c
 *
sc
)

1105 
pbuf
 *
pb
;

1106 
u8_t
 *
p
;

1107 
size_t
 
Àn
, 
l1
 = 0;

1109 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1110  
ERR_CONN
;

1113 
sc
->
sc_£ssi⁄
 = 
m⁄o_time
.
tv_£c
 % 0xff + 1;

1115 
Àn
 = 0;

1117 
Àn
 +2 + 2 + 2 + 2 + 
sc
->
sc_hunique_Àn
;

1118 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1119 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1120 
Àn
 +
l1
;

1122 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1123 i‡(!
pb
) {

1124  
ERR_MEM
;

1126 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1127 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADS
, 
sc
->
sc_£ssi⁄
, 
Àn
);

1128 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1129 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1130 
	`PPPOE_ADD_16
(
p
, 
l1
);

1131 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1132 
p
 +
l1
;

1134 
	`PPPOE_ADD_16
(
p
, 0);

1136 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1137 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1138 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1139  
	`µp€_ouçut
(
sc
, 
pb
);

1140 
	}
}

1143 
îr_t


1144 
	$µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

1146 
u8_t
 *
p
;

1147 
size_t
 
Àn
;

1150 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

1152 
	`pbuf_‰ì
(
pb
);

1153  
ERR_CONN
;

1156 
Àn
 = 
pb
->
tŸ_Àn
;

1159 i‡(
	`pbuf_hódî
(
pb
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
) != 0) {

1161 
	`PPPDEBUG
((
LOG_ERR
, "µp€: %c%c%"
U16_F
":Öµ€_xmô: couldÇŸáŒoˇãÑoom f‹ hódî\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

1162 
	`LINK_STATS_INC
(
lök
.
À√º
);

1163 
	`pbuf_‰ì
(
pb
);

1164  
ERR_BUF
;

1167 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 + (
ëh_hdr
);

1168 
	`PPPOE_ADD_HEADER
(
p
, 0, 
sc
->
sc_£ssi⁄
, 
Àn
);

1170  
	`µp€_ouçut
(
sc
, 
pb
);

1171 
	}
}

1175 
	$µp€_iÁâach_hook
(*
¨g
, 
pbuf
 **
mp
, 
√tif
 *
iÂ
, 
dú
)

1177 
µp€_so·c
 *
sc
;

1178 
s
;

1180 i‡(
mp
 !(
pbuf
 **)
PFIL_IFNET_DETACH
) {

1184 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

1185 i‡(
sc
->
sc_ëhif
 !
iÂ
) {

1188 i‡(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
) {

1189 
sc
->
sc_•µ
.
µ_if
.
if_Êags
 &~(
IFF_UP
|
IFF_RUNNING
);

1190 
	`¥ötf
("%c%c%"
U16_F
":Éthernet interface detached, going down\n",

1191 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

1193 
sc
->
sc_ëhif
 = 
NULL
;

1194 
	`µp€_˛ór_so·c
(
sc
, "ethernet interface detached");

1198 
	}
}

1202 
	$µp€_˛ór_so·c
(
µp€_so·c
 *
sc
, c⁄° *
mesßge
)

1204 
	`LWIP_UNUSED_ARG
(
mesßge
);

1207 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

1208 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%xÅîmö©ed, %s\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_£ssi⁄
, 
mesßge
));

1211 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

1214 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

1217 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

1218 i‡(
sc
->
sc_ac_cookõ
) {

1219 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

1220 
sc
->
sc_ac_cookõ
 = 
NULL
;

1222 
sc
->
sc_ac_cookõ_Àn
 = 0;

1223 
sc
->
sc_£ssi⁄
 = 0;

1224 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/pppdebug.h

36 #i‚de‡
PPPDEBUG_H


37 
	#PPPDEBUG_H


	)

44 
	mLOG_CRITICAL
 = 0,

45 
	mLOG_ERR
 = 1,

46 
	mLOG_NOTICE
 = 2,

47 
	mLOG_WARNING
 = 3,

48 
	mLOG_INFO
 = 5,

49 
	mLOG_DETAIL
 = 6,

50 
	mLOG_DEBUG
 = 7

51 } 
	tLogCodes
;

60 
µp_åa˚
(
Àvñ
, c⁄° *
f‹m©
,...);

62 
	#TRACELCP
 
PPP_DEBUG


	)

64 #i‡
PPP_DEBUG


66 
	#AUTHDEBUG
(
a
Ë
µp_åa˚
 
	)
a

67 
	#IPCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

68 
	#UPAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

69 
	#LCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

70 
	#FSMDEBUG
(
a
Ë
µp_åa˚
 
	)
a

71 
	#CHAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

72 
	#PPPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

76 
	#AUTHDEBUG
(
a
)

	)

77 
	#IPCPDEBUG
(
a
)

	)

78 
	#UPAPDEBUG
(
a
)

	)

79 
	#LCPDEBUG
(
a
)

	)

80 
	#FSMDEBUG
(
a
)

	)

81 
	#CHAPDEBUG
(
a
)

	)

82 
	#PPPDEBUG
(
a
)

	)

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/randm.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 
	~"md5.h
"

39 
	~"øndm.h
"

41 
	~"µp.h
"

42 
	~"µpdebug.h
"

45 #i‡
MD5_SUPPORT


46 
	#RANDPOOLSZ
 16

	)

51 
	gøndPoﬁ
[
RANDPOOLSZ
];

52 
	gøndCou¡
 = 0;

67 
	$avR™domInô
()

69 
	`avChu∫R™d
(
NULL
, 0);

70 
	}
}

83 
	$avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
)

85 
MD5_CTX
 
md5
;

88 
	`MD5Inô
(&
md5
);

89 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

90 i‡(
øndD©a
) {

91 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndD©a
, 
øndLí
);

95 
foob¨
;

96 } 
sysD©a
;

99 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
sysD©a
, (sysData));

101 
	`MD5FöÆ
((
u_ch¨
 *)
øndPoﬁ
, &
md5
);

103 
	}
}

122 
	$avGíR™d
(*
buf
, 
u32_t
 
bufLí
)

124 
MD5_CTX
 
md5
;

125 
u_ch¨
 
tmp
[16];

126 
u32_t
 
n
;

128 
bufLí
 > 0) {

129 
n
 = 
	`LWIP_MIN
(
bufLí
, 
RANDPOOLSZ
);

130 
	`MD5Inô
(&
md5
);

131 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

132 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
øndCou¡
, (randCount));

133 
	`MD5FöÆ
(
tmp
, &
md5
);

134 
øndCou¡
++;

135 
	`MEMCPY
(
buf
, 
tmp
, 
n
);

136 
buf
 +
n
;

137 
bufLí
 -
n
;

139 
	}
}

144 
u32_t


145 
	$avR™dom
()

147 
u32_t
 
√wR™d
;

149 
	`avGíR™d
((*)&
√wR™d
, (newRand));

151  
√wR™d
;

152 
	}
}

159 
	gavR™domized
 = 0;

160 
u32_t
 
	gavR™domSìd
 = 0;

181 
	$avR™domInô
()

185 
u32_t
 *
Õå1
 = (u32_à*)((*)&
˛ockBuf
[3]);

197 
	`ªadClk
();

198 
avR™domSìd
 +*(
u32_t
 *)
˛ockBuf
 + *
Õå1
 + 
OSIdÀCå


199 + 
	`µp_mtime
(Ë+ ((
u32_t
)
TM1
 << 16) + TM1;

201 
avR™domSìd
 +
	`sys_jiffõs
();

205 
	`§™d
(()
avR™domSìd
);

206 
	}
}

216 
	$avR™domize
()

218 
u32_t
 
œ°_jiffõs
;

220 i‡(!
avR™domized
) {

221 
avR™domized
 = !0;

222 
	`avR™domInô
();

226 
avR™domSìd
 +(
	`sys_jiffõs
(Ë- 
œ°_jiffõs
);

228 
œ°_jiffõs
 = 
	`sys_jiffõs
();

229 
	}
}

240 
u32_t


241 
	$avR™dom
()

243  ((((
u32_t
)
	`ønd
(Ë<< 16Ë+Ñ™d()Ë+ 
avR™domSìd
);

244 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/randm.h

34 #i‚de‡
RANDM_H


35 
	#RANDM_H


	)

43 
avR™domInô
();

53 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

59 #i‡
MD5_SUPPORT


60 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

62 
avR™domize
();

73 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

78 
u32_t
 
avR™dom
();

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/vj.c

31 
	~"lwù/›t.h
"

33 #i‡
PPP_SUPPORT


35 
	~"µp.h
"

36 
	~"µpdebug.h
"

38 
	~"vj.h
"

40 
	~<°rög.h
>

42 #i‡
VJ_SUPPORT


44 #i‡
LINK_STATS


45 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
counter

47 
	#INCR
(
cou¡î
)

	)

50 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

51 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl_v
&0xf)

	)

52 
	#gëth_off
(
ba£
Ë(((ba£).
th_x2_off
&0xf0)>>4)

	)

54 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl
)

	)

55 
	#gëth_off
(
ba£
Ë((ba£).
th_off
)

	)

59 
	$vj_com¥ess_öô
(
vjcom¥ess
 *
comp
)

61 
u_öt
 
i
;

62 
c°©e
 *
t°©e
 = 
comp
->tstate;

64 #i‡
MAX_SLOTS
 == 0

65 
	`mem£t
((*)
comp
, 0, (*comp));

67 
comp
->
maxSlŸIndex
 = 
MAX_SLOTS
 - 1;

68 
comp
->
com¥essSlŸ
 = 0;

69 
i
 = 
MAX_SLOTS
 - 1; i > 0; --i) {

70 
t°©e
[
i
].
cs_id
 = i;

71 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

73 
t°©e
[0].
cs_√xt
 = &t°©e[
MAX_SLOTS
 - 1];

74 
t°©e
[0].
cs_id
 = 0;

75 
comp
->
œ°_cs
 = &
t°©e
[0];

76 
comp
->
œ°_ªcv
 = 255;

77 
comp
->
œ°_xmô
 = 255;

78 
comp
->
Êags
 = 
VJF_TOSS
;

79 
	}
}

86 
	#ENCODE
(
n
) { \

87 i‡((
u_sh‹t
)(
n
) >= 256) { \

88 *
˝
++ = 0; \

89 
˝
[1] = (
n
); \

90 
˝
[0] = (
n
) >> 8; \

91 
˝
 += 2; \

93 *
˝
++ = (
n
); \

95 }

	)

96 
	#ENCODEZ
(
n
) { \

97 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

98 *
˝
++ = 0; \

99 
˝
[1] = (
n
); \

100 
˝
[0] = (
n
) >> 8; \

101 
˝
 += 2; \

103 *
˝
++ = (
n
); \

105 }

	)

107 
	#DECODEL
(
f
) { \

108 i‡(*
˝
 == 0) {\

109 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

110 (
f
Ë
	`ht⁄l
(
tmp
); \

111 
˝
 += 3; \

113 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u32_t)*
˝
++; \

114 (
f
Ë
	`ht⁄l
(
tmp
); \

116 }

	)

118 
	#DECODES
(
f
) { \

119 i‡(*
˝
 == 0) {\

120 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (((u_sh‹t)
˝
[1] << 8) | cp[2]); \

121 (
f
Ë
	`ht⁄s
(
tmp
); \

122 
˝
 += 3; \

124 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (u_sh‹t)*
˝
++; \

125 (
f
Ë
	`ht⁄s
(
tmp
); \

127 }

	)

129 
	#DECODEU
(
f
) { \

130 i‡(*
˝
 == 0) {\

131 (
f
Ë
	`ht⁄s
(((
u_sh‹t
)
˝
[1] << 8) | cp[2]); \

132 
˝
 += 3; \

134 (
f
Ë
	`ht⁄s
((
u_sh‹t
)*
˝
++); \

136 }

	)

145 
u_öt


146 
	$vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
)

148 
ù
 *ù = (ù *)
pb
->
∑ylﬂd
;

149 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

150 
u_sh‹t
 
hÀn
 = 
	`gëù_hl
(*
ù
);

151 
t˝hdr
 *
Ÿh
;

152 
t˝hdr
 *
th
;

153 
u_sh‹t
 
dñèS
, 
dñèA
;

154 
u_l⁄g
 
dñèL
;

155 
u_öt
 
ch™ges
 = 0;

156 
u_ch¨
 
√w_£q
[16];

157 
u_ch¨
 *
˝
 = 
√w_£q
;

162 i‡(
ù
->
ù_p
 !
IPPROTO_TCP
) {

163  (
TYPE_IP
);

171 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(0x3fff)Ë|| 
pb
->
tŸ_Àn
 < 40) {

172  (
TYPE_IP
);

174 
th
 = (
t˝hdr
 *)&((*)
ù
)[
hÀn
];

175 i‡((
th
->
th_Êags
 & (
TCP_SYN
|
TCP_FIN
|
TCP_RST
|
TCP_ACK
)) != TCP_ACK) {

176  (
TYPE_IP
);

185 
	`INCR
(
vjs_∑ckës
);

186 i‡(
ù
->
ù_§c
.
s_addr
 !
cs
->
cs_ù
.ip_src.s_addr

187 || 
ù
->
ù_d°
.
s_addr
 !
cs
->
cs_ù
.ip_dst.s_addr

188 || *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

201 
c°©e
 *
lcs
;

202 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

205 
lcs
 = 
cs
; c†cs->
cs_√xt
;

206 
	`INCR
(
vjs_£¨ches
);

207 i‡(
ù
->
ù_§c
.
s_addr
 =
cs
->
cs_ù
.ip_src.s_addr

208 && 
ù
->
ù_d°
.
s_addr
 =
cs
->
cs_ù
.ip_dst.s_addr

209 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

210 
found
;

212 } 
cs
 !
œ°cs
);

222 
	`INCR
(
vjs_mis£s
);

223 
comp
->
œ°_cs
 = 
lcs
;

224 
hÀn
 +
	`gëth_off
(*
th
);

225 
hÀn
 <<= 2;

227 i‡(
hÀn
 > 
pb
->
Àn
) {

228  (
TYPE_IP
);

230 
uncom¥es£d
;

232 
found
:

236 i‡(
cs
 =
œ°cs
) {

237 
comp
->
œ°_cs
 = 
lcs
;

239 
lcs
->
cs_√xt
 = 
cs
->cs_next;

240 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

241 
œ°cs
->
cs_√xt
 = 
cs
;

245 
Ÿh
 = (
t˝hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

246 
dñèS
 = 
hÀn
;

247 
hÀn
 +
	`gëth_off
(*
th
);

248 
hÀn
 <<= 2;

250 i‡(
hÀn
 > 
pb
->
Àn
) {

251 
	`PPPDEBUG
((
LOG_INFO
, "vj_com¥ess_t˝: hódîÜí %d s∑n†buf„rs\n", 
hÀn
));

252  (
TYPE_IP
);

266 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0]

267 || ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3]

268 || ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4]

269 || 
	`gëth_off
(*
th
Ë!gëth_off(*
Ÿh
)

270 || (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2))

271 || (
	`gëth_off
(*
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (getth_off(*th) - 5) << 2))) {

272 
uncom¥es£d
;

281 i‡(
th
->
th_Êags
 & 
TCP_URG
) {

282 
dñèS
 = 
	`¡ohs
(
th
->
th_uΩ
);

283 
	`ENCODEZ
(
dñèS
);

284 
ch™ges
 |
NEW_U
;

285 } i‡(
th
->
th_uΩ
 !
Ÿh
->th_urp) {

290 
uncom¥es£d
;

293 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
th_wö
Ë-Çtohs(
Ÿh
->th_win))) != 0) {

294 
	`ENCODE
(
dñèS
);

295 
ch™ges
 |
NEW_W
;

298 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_ack
Ë-Çtohl(
Ÿh
->th_ack)) != 0) {

299 i‡(
dñèL
 > 0xffff) {

300 
uncom¥es£d
;

302 
dñèA
 = (
u_sh‹t
)
dñèL
;

303 
	`ENCODE
(
dñèA
);

304 
ch™ges
 |
NEW_A
;

307 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_£q
Ë-Çtohl(
Ÿh
->th_seq)) != 0) {

308 i‡(
dñèL
 > 0xffff) {

309 
uncom¥es£d
;

311 
dñèS
 = (
u_sh‹t
)
dñèL
;

312 
	`ENCODE
(
dñèS
);

313 
ch™ges
 |
NEW_S
;

316 
ch™ges
) {

326 i‡(
ù
->
ù_Àn
 !
cs
->
cs_ù
.ip_len &&

327 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë=
hÀn
) {

333 
SPECIAL_I
:

334 
SPECIAL_D
:

339 
uncom¥es£d
;

341 
NEW_S
|
NEW_A
:

342 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

344 
ch™ges
 = 
SPECIAL_I
;

345 
˝
 = 
√w_£q
;

349 
NEW_S
:

350 i‡(
dñèS
 =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

352 
ch™ges
 = 
SPECIAL_D
;

353 
˝
 = 
√w_£q
;

358 
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
ù
->
ù_id
Ë-Çtohs(
cs
->
cs_ù
.ip_id));

359 i‡(
dñèS
 != 1) {

360 
	`ENCODEZ
(
dñèS
);

361 
ch™ges
 |
NEW_I
;

363 i‡(
th
->
th_Êags
 & 
TCP_PSH
) {

364 
ch™ges
 |
TCP_PUSH_BIT
;

370 
dñèA
 = 
	`¡ohs
(
th
->
th_sum
);

371 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

382 
dñèS
 = (
u_sh‹t
)(
˝
 - 
√w_£q
);

383 i‡(!
comp
->
com¥essSlŸ
 || comp->
œ°_xmô
 !
cs
->
cs_id
) {

384 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

385 
hÀn
 -
dñèS
 + 4;

386 if(
	`pbuf_hódî
(
pb
, -
hÀn
)){

388 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

390 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

391 *
˝
++ = 
ch™ges
 | 
NEW_C
;

392 *
˝
++ = 
cs
->
cs_id
;

394 
hÀn
 -
dñèS
 + 3;

395 if(
	`pbuf_hódî
(
pb
, -
hÀn
)) {

397 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

399 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

400 *
˝
++ = 
ch™ges
;

402 *
˝
++ = 
dñèA
 >> 8;

403 *
˝
++ = 
dñèA
;

404 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

405 
	`INCR
(
vjs_com¥es£d
);

406  (
TYPE_COMPRESSED_TCP
);

413 
uncom¥es£d
:

414 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

415 
ù
->
ù_p
 = 
cs
->
cs_id
;

416 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

417  (
TYPE_UNCOMPRESSED_TCP
);

418 
	}
}

424 
	$vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
)

426 
comp
->
Êags
 |
VJF_TOSS
;

427 
	`INCR
(
vjs_îr‹ö
);

428 
	}
}

435 
	$vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
)

437 
u_öt
 
hÀn
;

438 
c°©e
 *
cs
;

439 
ù
 *ip;

441 
ù
 = (ù *)
nb
->
∑ylﬂd
;

442 
hÀn
 = 
	`gëù_hl
(*
ù
) << 2;

443 i‡(
ù
->
ù_p
 >
MAX_SLOTS


444 || 
hÀn
 + (
t˝hdr
Ë> 
nb
->
Àn


445 || (
hÀn
 +
	`gëth_off
(*((
t˝hdr
 *)&((*)
ù
)[hlen])) << 2)

446 > 
nb
->
Àn


447 || 
hÀn
 > 
MAX_HDR
) {

448 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",

449 
ù
->
ù_p
, 
hÀn
, 
nb
->
Àn
));

450 
comp
->
Êags
 |
VJF_TOSS
;

451 
	`INCR
(
vjs_îr‹ö
);

454 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
ù
->
ù_p
];

455 
comp
->
Êags
 &=~ 
VJF_TOSS
;

456 
ù
->
ù_p
 = 
IPPROTO_TCP
;

457 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

458 
cs
->
cs_hÀn
 = 
hÀn
;

459 
	`INCR
(
vjs_uncom¥es£dö
);

461 
	}
}

472 
	$vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
)

474 
u_ch¨
 *
˝
;

475 
t˝hdr
 *
th
;

476 
c°©e
 *
cs
;

477 
u_sh‹t
 *
bp
;

478 
pbuf
 *
n0
 = *
nb
;

479 
u32_t
 
tmp
;

480 
u_öt
 
vjÀn
, 
hÀn
, 
ch™ges
;

482 
	`INCR
(
vjs_com¥es£dö
);

483 
˝
 = (
u_ch¨
 *)
n0
->
∑ylﬂd
;

484 
ch™ges
 = *
˝
++;

485 i‡(
ch™ges
 & 
NEW_C
) {

490 i‡(*
˝
 >
MAX_SLOTS
) {

491 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncom¥ess_t˝: bad cid=%d\n", *
˝
));

492 
bad
;

495 
comp
->
Êags
 &=~ 
VJF_TOSS
;

496 
comp
->
œ°_ªcv
 = *
˝
++;

503 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

504 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp:Åossing\n"));

505 
	`INCR
(
vjs_tos£d
);

509 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

510 
hÀn
 = 
	`gëù_hl
(
cs
->
cs_ù
) << 2;

511 
th
 = (
t˝hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

512 
th
->
th_sum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

513 
˝
 += 2;

514 i‡(
ch™ges
 & 
TCP_PUSH_BIT
) {

515 
th
->
th_Êags
 |
TCP_PSH
;

517 
th
->
th_Êags
 &=~ 
TCP_PSH
;

520 
ch™ges
 & 
SPECIALS_MASK
) {

521 
SPECIAL_I
:

523 
u32_t
 
i
 = 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

525 
tmp
 = 
	`¡ohl
(
th
->
th_ack
Ë+ 
i
;

526 
th
->
th_ack
 = 
	`ht⁄l
(
tmp
);

527 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
i
;

528 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

532 
SPECIAL_D
:

534 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

535 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

539 i‡(
ch™ges
 & 
NEW_U
) {

540 
th
->
th_Êags
 |
TCP_URG
;

541 
	`DECODEU
(
th
->
th_uΩ
);

543 
th
->
th_Êags
 &=~ 
TCP_URG
;

545 i‡(
ch™ges
 & 
NEW_W
) {

546 
	`DECODES
(
th
->
th_wö
);

548 i‡(
ch™ges
 & 
NEW_A
) {

549 
	`DECODEL
(
th
->
th_ack
);

551 i‡(
ch™ges
 & 
NEW_S
) {

552 
	`DECODEL
(
th
->
th_£q
);

556 i‡(
ch™ges
 & 
NEW_I
) {

557 
	`DECODES
(
cs
->
cs_ù
.
ù_id
);

559 
cs
->
cs_ù
.
ù_id
 = 
	`¡ohs
(cs->cs_ip.ip_id) + 1;

560 
cs
->
cs_ù
.
ù_id
 = 
	`ht⁄s
(cs->cs_ip.ip_id);

568 
vjÀn
 = (
u_sh‹t
)(
˝
 - (
u_ch¨
*)
n0
->
∑ylﬂd
);

569 i‡(
n0
->
Àn
 < 
vjÀn
) {

574 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp: head buffer %dÅoo short %d\n",

575 
n0
->
Àn
, 
vjÀn
));

576 
bad
;

579 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


580 
tmp
 = 
n0
->
tŸ_Àn
 - 
vjÀn
 + 
cs
->
cs_hÀn
;

581 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
tmp
);

583 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
n0
->
tŸ_Àn
 - 
vjÀn
 + cs->
cs_hÀn
);

587 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

588 
cs
->
cs_ù
.
ù_sum
 = 0;

589 
tmp
 = 0; 
hÀn
 > 0; hlen -= 2) {

590 
tmp
 +*
bp
++;

592 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

593 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

594 
cs
->
cs_ù
.
ù_sum
 = (
u_sh‹t
)(~
tmp
);

597 if(
	`pbuf_hódî
(
n0
, -((
s16_t
)(
vjÀn
)))) {

599 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

600 
bad
;

603 if(
	`LWIP_MEM_ALIGN
(
n0
->
∑ylﬂd
) !=Ç0->payload) {

604 
pbuf
 *
≈
, *
q
;

605 
u8_t
 *
buÂå
;

607 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
n0
->
Àn
 + 
cs
->
cs_hÀn
, 
PBUF_POOL
);

608 if(!
≈
) {

609 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Ñealign failed\n"));

610 
bad
;

613 if(
	`pbuf_hódî
(
≈
, -
cs
->
cs_hÀn
)) {

615 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

616 
bad
;

619 
buÂå
 = 
n0
->
∑ylﬂd
;

620 
q
 = 
≈
; q !
NULL
; q = q->
√xt
) {

621 
	`MEMCPY
(
q
->
∑ylﬂd
, 
buÂå
, q->
Àn
);

622 
buÂå
 +
q
->
Àn
;

625 if(
n0
->
√xt
) {

626 
	`pbuf_chaö
(
≈
, 
n0
->
√xt
);

627 
	`pbuf_dechaö
(
n0
);

629 
	`pbuf_‰ì
(
n0
);

630 
n0
 = 
≈
;

633 if(
	`pbuf_hódî
(
n0
, 
cs
->
cs_hÀn
)) {

634 
pbuf
 *
≈
;

636 
	`LWIP_ASSERT
("vj_uncom¥ess_t˝: cs->cs_hÀ¿<PBUF_POOL_BUFSIZE", 
cs
->
cs_hÀn
 <
PBUF_POOL_BUFSIZE
);

637 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
cs
->
cs_hÀn
, 
PBUF_POOL
);

638 if(!
≈
) {

639 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Örepend failed\n"));

640 
bad
;

642 
	`pbuf_ˇt
(
≈
, 
n0
);

643 
n0
 = 
≈
;

645 
	`LWIP_ASSERT
("n0->À¿>cs->cs_hÀn", 
n0
->
Àn
 >
cs
->
cs_hÀn
);

646 
	`MEMCPY
(
n0
->
∑ylﬂd
, &
cs
->
cs_ù
, cs->
cs_hÀn
);

648 *
nb
 = 
n0
;

650  
vjÀn
;

652 
bad
:

653 
comp
->
Êags
 |
VJF_TOSS
;

654 
	`INCR
(
vjs_îr‹ö
);

656 
	}
}

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/vj.h

25 #i‚de‡
VJ_H


26 
	#VJ_H


	)

28 
	~"vjbsdhdr.h
"

30 
	#MAX_SLOTS
 16

	)

31 
	#MAX_HDR
 128

	)

77 
	#TYPE_IP
 0x40

	)

78 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

79 
	#TYPE_COMPRESSED_TCP
 0x80

	)

80 
	#TYPE_ERROR
 0x00

	)

83 
	#NEW_C
 0x40

	)

84 
	#NEW_I
 0x20

	)

85 
	#NEW_S
 0x08

	)

86 
	#NEW_A
 0x04

	)

87 
	#NEW_W
 0x02

	)

88 
	#NEW_U
 0x01

	)

91 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

92 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

95 
	#TCP_PUSH_BIT
 0x10

	)

104 
	sc°©e
 {

105 
c°©e
 *
	mcs_√xt
;

106 
u_sh‹t
 
	mcs_hÀn
;

107 
u_ch¨
 
	mcs_id
;

108 
u_ch¨
 
	mcs_fûÀr
;

110 
	mcsu_hdr
[
MAX_HDR
];

111 
ù
 
	mcsu_ù
;

112 } 
	mvjcs_u
;

114 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

115 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

118 
	svj°©
 {

119 
	mvjs_∑ckës
;

120 
	mvjs_com¥es£d
;

121 
	mvjs_£¨ches
;

122 
	mvjs_mis£s
;

123 
	mvjs_uncom¥es£dö
;

124 
	mvjs_com¥es£dö
;

125 
	mvjs_îr‹ö
;

126 
	mvjs_tos£d
;

132 
	svjcom¥ess
 {

133 
c°©e
 *
	mœ°_cs
;

134 
u_ch¨
 
	mœ°_ªcv
;

135 
u_ch¨
 
	mœ°_xmô
;

136 
u_sh‹t
 
	mÊags
;

137 
u_ch¨
 
	mmaxSlŸIndex
;

138 
u_ch¨
 
	mcom¥essSlŸ
;

139 #i‡
LINK_STATS


140 
vj°©
 
	m°©s
;

142 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

143 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

147 
	#VJF_TOSS
 1U

	)

149 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

150 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

151 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

152 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/vjbsdhdr.h

1 #i‚de‡
VJBSDHDR_H


2 
	#VJBSDHDR_H


	)

4 
	~"lwù/t˝.h
"

13 
PACK_STRUCT_BEGIN


14 
	sù


16 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

17 
u_ch¨
 
	mù_hl_v
;

19 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


20 
	mù_hl
:4,

21 
	mù_v
 :4;

22 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


23 
	mù_v
 :4,

24 
	mù_hl
:4;

26 
	mCOMPLAIN
 - 
NO
 
BYTE
 
ORDER
 
	mSELECTED
!

29 
u_ch¨
 
	mù_tos
;

30 
u_sh‹t
 
	mù_Àn
;

31 
u_sh‹t
 
	mù_id
;

32 
u_sh‹t
 
	mù_off
;

33 
	#IP_DF
 0x4000

	)

34 
	#IP_MF
 0x2000

	)

35 
	#IP_OFFMASK
 0x1ff‡

	)

36 
u_ch¨
 
	mù_âl
;

37 
u_ch¨
 
	mù_p
;

38 
u_sh‹t
 
	mù_sum
;

39 
ö_addr
 
	mù_§c
,
	mù_d°
;

41 
PACK_STRUCT_END


43 
u32_t
 
	tt˝_£q
;

49 
PACK_STRUCT_BEGIN


50 
	st˝hdr


52 
u_sh‹t
 
	mth_•‹t
;

53 
u_sh‹t
 
	mth_dp‹t
;

54 
t˝_£q
 
	mth_£q
;

55 
t˝_£q
 
	mth_ack
;

56 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

57 
u_ch¨
 
	mth_x2_off
;

59 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


60 
	mth_x2
 :4,

61 
	mth_off
:4;

63 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


64 
	mth_off
:4,

65 
	mth_x2
 :4;

68 
u_ch¨
 
	mth_Êags
;

69 
u_sh‹t
 
	mth_wö
;

70 
u_sh‹t
 
	mth_sum
;

71 
u_sh‹t
 
	mth_uΩ
;

73 
	gPACK_STRUCT_END


	@firmware/usrp2/lwip/lwip-1.3.1/src/netif/slipif.c

45 
	~"√tif/¶ùif.h
"

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_HAVE_SLIPIF


50 
	~"lwù/def.h
"

51 
	~"lwù/pbuf.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/sio.h
"

57 
	#SLIP_END
 0300

	)

58 
	#SLIP_ESC
 0333

	)

59 
	#SLIP_ESC_END
 0334

	)

60 
	#SLIP_ESC_ESC
 0335

	)

62 
	#MAX_SIZE
 1500

	)

74 
îr_t


75 
	$¶ùif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

77 
pbuf
 *
q
;

78 
u16_t
 
i
;

79 
u8_t
 
c
;

81 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

82 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

83 
	`LWIP_ASSERT
("∞!NULL", (
p
 !
NULL
));

85 
	`LWIP_UNUSED_ARG
(
ùaddr
);

88 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
i
 = 0; i < 
q
->
Àn
; i++) {

92 
c
 = ((
u8_t
 *)
q
->
∑ylﬂd
)[
i
];

93 
c
) {

94 
SLIP_END
:

95 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

96 
	`sio_£nd
(
SLIP_ESC_END
, 
√tif
->
°©e
);

98 
SLIP_ESC
:

99 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

100 
	`sio_£nd
(
SLIP_ESC_ESC
, 
√tif
->
°©e
);

103 
	`sio_£nd
(
c
, 
√tif
->
°©e
);

108 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

109  
ERR_OK
;

110 
	}
}

120 
pbuf
 *

121 
	$¶ùif_öput
(
√tif
 *netif)

123 
u8_t
 
c
;

125 
pbuf
 *
p
, *
q
;

126 
u16_t
 
ªcved
;

127 
u16_t
 
i
;

129 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

130 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

132 
q
 = 
p
 = 
NULL
;

133 
ªcved
 = 
i
 = 0;

134 
c
 = 0;

137 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

138 
c
) {

139 
SLIP_END
:

140 i‡(
ªcved
 > 0) {

143 
	`pbuf_ªÆloc
(
q
, 
ªcved
);

145 
	`LINK_STATS_INC
(
lök
.
ªcv
);

147 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif: GotÖacket\n"));

148  
q
;

152 
SLIP_ESC
:

153 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

154 
c
) {

155 
SLIP_ESC_END
:

156 
c
 = 
SLIP_END
;

158 
SLIP_ESC_ESC
:

159 
c
 = 
SLIP_ESC
;

166 i‡(
p
 =
NULL
) {

168 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:álloc\n"));

169 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
PBUF_POOL_BUFSIZE
, 
PBUF_POOL
);

171 i‡(
p
 =
NULL
) {

172 
	`LINK_STATS_INC
(
lök
.
dr›
);

173 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:ÇoÇewÖbuf! (DROP)\n"));

178 i‡(
q
 !
NULL
) {

180 
	`pbuf_ˇt
(
q
, 
p
);

183 
q
 = 
p
;

188 i‡((
p
 !
NULL
Ë&& (
ªcved
 <
MAX_SIZE
)) {

189 ((
u8_t
 *)
p
->
∑ylﬂd
)[
i
] = 
c
;

190 
ªcved
++;

191 
i
++;

192 i‡(
i
 >
p
->
Àn
) {

194 
i
 = 0;

195 i‡(
p
->
√xt
 !
NULL
 &&Ö->√xt->
Àn
 > 0) {

197 
p
 =Ö->
√xt
;

201 
p
 = 
NULL
;

208  
NULL
;

209 
	}
}

211 #i‡!
NO_SYS


220 
	$¶ùif_lo›
(*
nf
)

222 
pbuf
 *
p
;

223 
√tif
 *√ti‡(√ti‡*)
nf
;

226 
p
 = 
	`¶ùif_öput
(
√tif
);

227 i‡(
p
 !
NULL
) {

228 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

229 
	`pbuf_‰ì
(
p
);

230 
p
 = 
NULL
;

234 
	}
}

250 
îr_t


251 
	$¶ùif_öô
(
√tif
 *netif)

254 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("¶ùif_öô:Çëif->num=%"
U16_F
"\n", (
u16_t
)
√tif
->
num
));

256 
√tif
->
«me
[0] = 's';

257 
√tif
->
«me
[1] = 'l';

258 
√tif
->
ouçut
 = 
¶ùif_ouçut
;

259 
√tif
->
mtu
 = 
MAX_SIZE
;

260 
√tif
->
Êags
 = 
NETIF_FLAG_POINTTOPOINT
;

263 
√tif
->
°©e
 = 
	`sio_›í
“ëif->
num
);

264 i‡(!
√tif
->
°©e
) {

266  
ERR_IF
;

273 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_¶ù
, 0);

276 
	`sys_thªad_√w
(
SLIPIF_THREAD_NAME
, 
¶ùif_lo›
, 
√tif
, 
SLIPIF_THREAD_STACKSIZE
, 
SLIPIF_THREAD_PRIO
);

277  
ERR_OK
;

278 
	}
}

	@firmware/usrp2/lwip/lwipopts.h

26 
	#NO_SYS
 1

	)

35 
	#MEM_ALIGNMENT
 4

	)

41 
	#MEM_SIZE
 256

	)

48 
	#MEM_USE_POOLS
 0

	)

56 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

64 
	#MEMP_NUM_PBUF
 8

	)

71 
	#MEMP_NUM_UDP_PCB
 4

	)

78 
	#PBUF_LINK_HLEN
 16

	)

79 
	#ETH_PAD_SIZE
 2

	)

84 
	#PBUF_POOL_SIZE
 8

	)

92 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(128+28+
PBUF_LINK_HLEN
)

	)

99 
	#ARP_TABLE_SIZE
 5

	)

105 
	#ARP_QUEUEING
 0

	)

113 
	#MEMP_NUM_ARP_QUEUE
 5

	)

121 
	#IP_OPTIONS_ALLOWED
 0

	)

128 
	#IP_REASSEMBLY
 0

	)

135 
	#IP_FRAG
 0

	)

140 
	#LWIP_DHCP
 0

	)

145 
	#LWIP_IGMP
 0

	)

150 
	#LWIP_UDP
 1

	)

155 
	#LWIP_TCP
 0

	)

160 
	#LWIP_NETCONN
 0

	)

165 
	#LWIP_SOCKET
 0

	)

170 
	#LWIP_STATS
 0

	)

175 
	#CHECKSUM_GEN_IP
 0

	)

180 
	#CHECKSUM_GEN_UDP
 0

	)

185 
	#CHECKSUM_CHECK_IP
 0

	)

190 
	#CHECKSUM_CHECK_UDP
 0

	)

196 
	#LWIP_NETIF_LINK_CALLBACK
 1

	)

	@firmware/usrp2/lwip/lwippools.h

1 #i‚de‡
INCLUDED_LWIPPOOLS_H


2 
	#INCLUDED_LWIPPOOLS_H


	)

20 
LWIP_MALLOC_MEMPOOL_START


21 
	$LWIP_MALLOC_MEMPOOL
(2, 256)

22 
LWIP_MALLOC_MEMPOOL_END


	@firmware/usrp2/lwip_port/arch/cc.h

1 #i‚de‡
INCLUDED_ARCH_CC_H


2 
	#INCLUDED_ARCH_CC_H


	)

4 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

8 
	~<°döt.h
>

10 
uöt8_t
 
	tu8_t
;

11 
öt8_t
 
	ts8_t
;

12 
uöt16_t
 
	tu16_t
;

13 
öt16_t
 
	ts16_t
;

14 
uöt32_t
 
	tu32_t
;

15 
öt32_t
 
	ts32_t
;

19 
	tu8_t
;

20 sig√d 
	ts8_t
;

21 
	tu16_t
;

22 sig√d 
	ts16_t
;

23 
	tu32_t
;

24 sig√d 
	ts32_t
;

27 
u32_t
 
	tmem_±r_t
;

30 
	#U16_F
 "u"

	)

31 
	#S16_F
 "d"

	)

32 
	#X16_F
 "x"

	)

33 
	#U32_F
 "u"

	)

34 
	#S32_F
 "d"

	)

35 
	#X32_F
 "x"

	)

39 
	#U16_F
 "hu"

	)

40 
	#S16_F
 "hd"

	)

41 
	#X16_F
 "hx"

	)

42 
	#U32_F
 "lu"

	)

43 
	#S32_F
 "ld"

	)

44 
	#X32_F
 "lx"

	)

48 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

49 
	#PACK_STRUCT_STRUCT


	)

50 
	#PACK_STRUCT_BEGIN


	)

51 
	#PACK_STRUCT_END


	)

53 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

54 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

55 
	#PACK_STRUCT_BEGIN


	)

56 
	#PACK_STRUCT_END


	)

60 
ab‹t
();

61 
	#LWIP_PLATFORM_ASSERT
(
msg
Ë
	`ab‹t
()

	)

	@firmware/usrp2/lwip_port/arch/perf.h

1 
	#PERF_START
 ((Ë0)

	)

2 
	#PERF_STOP
(
msg
Ë((Ë0)

	)

	@firmware/usrp2/lwip_port/netif/eth_driver.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/mem.h
"

43 
	~"lwù/pbuf.h
"

44 
	~"lwù/sys.h
"

45 
	~<lwù/°©s.h
>

46 
	~<lwù/¢mp.h
>

47 
	~"√tif/ëh¨p.h
"

48 
	~"√tif/µp_€.h
"

49 
	~"ëh_drivî.h
"

54 
	#IFNAME0
 'e'

	)

55 
	#IFNAME1
 'n'

	)

60 
	squadødioif
 {

61 
	mëhno
;

65 
quadødioif_öput
(
√tif
 *netif);

75 
	$low_Àvñ_öô
(
√tif
 *netif)

77 
quadødioif
 *quadødioi‡
√tif
->
°©e
;

80 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

83 
√tif
->
hwaddr
[0] = ;

85 
√tif
->
hwaddr
[5] = ;

88 
√tif
->
mtu
 = 1500;

92 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

95 
	}
}

113 
îr_t


114 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

116 
quadødioif
 *quadødioi‡
√tif
->
°©e
;

117 
pbuf
 *
q
;

119 
öôüã
 
	`å™s„r
();

121 #i‡
ETH_PAD_SIZE


122 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

125 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

129 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

132 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

134 #i‡
ETH_PAD_SIZE


135 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

138 
	`LINK_STATS_INC
(
lök
.
xmô
);

140  
ERR_OK
;

141 
	}
}

151 
pbuf
 *

152 
	$low_Àvñ_öput
(
√tif
 *netif)

154 
quadødioif
 *quadødioi‡
√tif
->
°©e
;

155 
pbuf
 *
p
, *
q
;

156 
u16_t
 
Àn
;

160 
Àn
 = ;

162 #i‡
ETH_PAD_SIZE


163 
Àn
 +
ETH_PAD_SIZE
;

167 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

169 i‡(
p
 !
NULL
) {

171 #i‡
ETH_PAD_SIZE


172 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

177 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

181 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

183 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

185 #i‡
ETH_PAD_SIZE


186 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

189 
	`LINK_STATS_INC
(
lök
.
ªcv
);

191 
dr›
 
	`∑ckë
();

192 
	`LINK_STATS_INC
(
lök
.
memîr
);

193 
	`LINK_STATS_INC
(
lök
.
dr›
);

196  
p
;

197 
	}
}

209 
	$quadødioif_öput
(
√tif
 *netif)

211 
quadødioif
 *quadradioif;

212 
ëh_hdr
 *
ëhhdr
;

213 
pbuf
 *
p
;

215 
quadødioif
 = 
√tif
->
°©e
;

218 
p
 = 
	`low_Àvñ_öput
(
√tif
);

220 i‡(
p
 =
NULL
) ;

222 
ëhhdr
 = 
p
->
∑ylﬂd
;

224 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

226 
ETHTYPE_IP
:

227 
ETHTYPE_ARP
:

228 #i‡
PPPOE_SUPPORT


230 
ETHTYPE_PPPOEDISC
:

231 
ETHTYPE_PPPOE
:

234 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

235 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("quadradioif_input: IP inputÉrror\n"));

236 
	`pbuf_‰ì
(
p
);

237 
p
 = 
NULL
;

242 
	`pbuf_‰ì
(
p
);

243 
p
 = 
NULL
;

246 
	}
}

260 
îr_t


261 
	$quadødioif_öô
(
√tif
 *netif)

263 
quadødioif
 *quadradioif;

265 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

267 
quadødioif
 = 
	`mem_mÆloc
((quadradioif));

268 i‡(
quadødioif
 =
NULL
) {

269 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("quadradioif_init: out of memory\n"));

270  
ERR_MEM
;

273 #i‡
LWIP_NETIF_HOSTNAME


275 
√tif
->
ho°«me
 = "lwip";

283 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

285 
√tif
->
°©e
 = 
quadødioif
;

286 
√tif
->
«me
[0] = 
IFNAME0
;

287 
√tif
->
«me
[1] = 
IFNAME1
;

292 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

293 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

295 
quadødioif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

298 
	`low_Àvñ_öô
(
√tif
);

300  
ERR_OK
;

301 
	}
}

	@firmware/usrp2/lwip_port/netif/eth_driver.h

19 
	~"q≤_p‹t.h
"

21 
ëh_drivî_öô
(
QA˘ive
 *);

22 
ëh_drivî_h™dÀ_öput
(
ëhno
, 
bu‚o
, 
size_t
 
nbyãs
);

23 
ëh_drivî_buf„r_sig
(
bu‚o
);

	@firmware/usrp2/usrp2/eth_phy.h

22 #i‚de‡
INCLUDED_ETH_PHY_H


23 
	#INCLUDED_ETH_PHY_H


	)

28 
	#PHY_CTRL
 0x00

	)

29 
	#PHY_STATUS
 0x01

	)

30 
	#PHY_ID1
 0x02

	)

31 
	#PHY_ID2
 0x03

	)

32 
	#PHY_AUTONEG_ADV
 0x04

	)

33 
	#PHY_LP_ABILITY
 0x05

	)

34 
	#PHY_AUTONEG_EXP
 0x06

	)

35 
	#PHY_NEXT_PAGE_TX
 0x07

	)

36 
	#PHY_LP_NEXT_PAGE
 0x08

	)

37 
	#PHY_1000T_CTRL
 0x09

	)

38 
	#PHY_1000T_STATUS
 0x0A

	)

39 
	#PHY_EXT_STATUS
 0x0F

	)

44 
	#PHY_LINK_AN
 0x11

	)

45 
	#PHY_INT_STATUS
 0x14

	)

46 
	#PHY_INT_MASK
 0x15

	)

47 
	#PHY_INT_CLEAR
 0x17

	)

53 
	#MII_CR_SPEED_SELECT_MSB
 0x0040

	)

54 
	#MII_CR_COLL_TEST_ENABLE
 0x0080

	)

55 
	#MII_CR_FULL_DUPLEX
 0x0100

	)

56 
	#MII_CR_RESTART_AUTO_NEG
 0x0200

	)

57 
	#MII_CR_ISOLATE
 0x0400

	)

58 
	#MII_CR_POWER_DOWN
 0x0800

	)

59 
	#MII_CR_AUTO_NEG_EN
 0x1000

	)

60 
	#MII_CR_SPEED_SELECT_LSB
 0x2000

	)

61 
	#MII_CR_LOOPBACK
 0x4000

	)

62 
	#MII_CR_RESET
 0x8000

	)

65 
	#MII_SR_EXTENDED_CAPS
 0x0001

	)

66 
	#MII_SR_JABBER_DETECT
 0x0002

	)

67 
	#MII_SR_LINK_STATUS
 0x0004

	)

68 
	#MII_SR_AUTONEG_CAPS
 0x0008

	)

69 
	#MII_SR_REMOTE_FAULT
 0x0010

	)

70 
	#MII_SR_AUTONEG_COMPLETE
 0x0020

	)

71 
	#MII_SR_PREAMBLE_SUPPRESS
 0x0040

	)

72 
	#MII_SR_EXTENDED_STATUS
 0x0100

	)

73 
	#MII_SR_100T2_HD_CAPS
 0x0200

	)

74 
	#MII_SR_100T2_FD_CAPS
 0x0400

	)

75 
	#MII_SR_10T_HD_CAPS
 0x0800

	)

76 
	#MII_SR_10T_FD_CAPS
 0x1000

	)

77 
	#MII_SR_100X_HD_CAPS
 0x2000

	)

78 
	#MII_SR_100X_FD_CAPS
 0x4000

	)

79 
	#MII_SR_100T4_CAPS
 0x8000

	)

82 
	#NWAY_AR_SELECTOR_FIELD
 0x0001

	)

83 
	#NWAY_AR_10T_HD_CAPS
 0x0020

	)

84 
	#NWAY_AR_10T_FD_CAPS
 0x0040

	)

85 
	#NWAY_AR_100TX_HD_CAPS
 0x0080

	)

86 
	#NWAY_AR_100TX_FD_CAPS
 0x0100

	)

87 
	#NWAY_AR_100T4_CAPS
 0x0200

	)

88 
	#NWAY_AR_PAUSE
 0x0400

	)

89 
	#NWAY_AR_ASM_DIR
 0x0800

	)

90 
	#NWAY_AR_REMOTE_FAULT
 0x2000

	)

91 
	#NWAY_AR_NEXT_PAGE
 0x8000

	)

94 
	#NWAY_LPAR_SELECTOR_FIELD
 0x0000

	)

95 
	#NWAY_LPAR_10T_HD_CAPS
 0x0020

	)

96 
	#NWAY_LPAR_10T_FD_CAPS
 0x0040

	)

97 
	#NWAY_LPAR_100TX_HD_CAPS
 0x0080

	)

98 
	#NWAY_LPAR_100TX_FD_CAPS
 0x0100

	)

99 
	#NWAY_LPAR_100T4_CAPS
 0x0200

	)

100 
	#NWAY_LPAR_PAUSE
 0x0400

	)

101 
	#NWAY_LPAR_ASM_DIR
 0x0800

	)

102 
	#NWAY_LPAR_REMOTE_FAULT
 0x2000

	)

103 
	#NWAY_LPAR_ACKNOWLEDGE
 0x4000

	)

104 
	#NWAY_LPAR_NEXT_PAGE
 0x8000

	)

107 
	#NWAY_ER_LP_NWAY_CAPS
 0x0001

	)

108 
	#NWAY_ER_PAGE_RXD
 0x0002

	)

109 
	#NWAY_ER_NEXT_PAGE_CAPS
 0x0004

	)

110 
	#NWAY_ER_LP_NEXT_PAGE_CAPS
 0x0008

	)

111 
	#NWAY_ER_PAR_DETECT_FAULT
 0x0010

	)

114 
	#NPTX_MSG_CODE_FIELD
 0x0001

	)

115 
	#NPTX_TOGGLE
 0x0800

	)

118 
	#NPTX_ACKNOWLDGE2
 0x1000

	)

121 
	#NPTX_MSG_PAGE
 0x2000

	)

122 
	#NPTX_NEXT_PAGE
 0x8000

	)

127 
	#LP_RNPR_MSG_CODE_FIELD
 0x0001

	)

128 
	#LP_RNPR_TOGGLE
 0x0800

	)

131 
	#LP_RNPR_ACKNOWLDGE2
 0x1000

	)

134 
	#LP_RNPR_MSG_PAGE
 0x2000

	)

135 
	#LP_RNPR_ACKNOWLDGE
 0x4000

	)

136 
	#LP_RNPR_NEXT_PAGE
 0x8000

	)

141 
	#CR_1000T_ASYM_PAUSE
 0x0080

	)

142 
	#CR_1000T_HD_CAPS
 0x0100

	)

143 
	#CR_1000T_FD_CAPS
 0x0200

	)

144 
	#CR_1000T_REPEATER_DTE
 0x0400

	)

146 
	#CR_1000T_MS_VALUE
 0x0800

	)

148 
	#CR_1000T_MS_ENABLE
 0x1000

	)

150 
	#CR_1000T_TEST_MODE_NORMAL
 0x0000

	)

151 
	#CR_1000T_TEST_MODE_1
 0x2000

	)

152 
	#CR_1000T_TEST_MODE_2
 0x4000

	)

153 
	#CR_1000T_TEST_MODE_3
 0x6000

	)

154 
	#CR_1000T_TEST_MODE_4
 0x8000

	)

157 
	#SR_1000T_IDLE_ERROR_CNT
 0x00FF

	)

158 
	#SR_1000T_ASYM_PAUSE_DIR
 0x0100

	)

159 
	#SR_1000T_LP_HD_CAPS
 0x0400

	)

160 
	#SR_1000T_LP_FD_CAPS
 0x0800

	)

161 
	#SR_1000T_REMOTE_RX_STATUS
 0x1000

	)

162 
	#SR_1000T_LOCAL_RX_STATUS
 0x2000

	)

163 
	#SR_1000T_MS_CONFIG_RES
 0x4000

	)

164 
	#SR_1000T_MS_CONFIG_FAULT
 0x8000

	)

165 
	#SR_1000T_REMOTE_RX_STATUS_SHIFT
 12

	)

166 
	#SR_1000T_LOCAL_RX_STATUS_SHIFT
 13

	)

167 
	#SR_1000T_PHY_EXCESSIVE_IDLE_ERR_COUNT
 5

	)

168 
	#FFE_IDLE_ERR_COUNT_TIMEOUT_20
 20

	)

169 
	#FFE_IDLE_ERR_COUNT_TIMEOUT_100
 100

	)

172 
	#IEEE_ESR_1000T_HD_CAPS
 0x1000

	)

173 
	#IEEE_ESR_1000T_FD_CAPS
 0x2000

	)

174 
	#IEEE_ESR_1000X_HD_CAPS
 0x4000

	)

175 
	#IEEE_ESR_1000X_FD_CAPS
 0x8000

	)

177 
	#PHY_TX_POLARITY_MASK
 0x0100

	)

178 
	#PHY_TX_NORMAL_POLARITY
 0

	)

180 
	#AUTO_POLARITY_DISABLE
 0x0010

	)

184 
	#LANSR_MASTER
 0x0001

	)

185 
	#LANSR_FULL_DUPLEX
 0x0002

	)

186 
	#LANSR_LINK_GOOD
 0x0004

	)

187 
	#LANSR_SPEED_MASK
 0x0018

	)

188 
	#LANSR_SPEED_10
 0x0000

	)

189 
	#LANSR_SPEED_100
 0x0008

	)

190 
	#LANSR_SPEED_1000
 0x0010

	)

191 
	#LANSR_SPEED_RSRVD
 0x0018

	)

192 
	#LANSR_NON_COMP_MODE
 0x0020

	)

193 
	#LANSR_DEEP_LOOPBACK
 0x0040

	)

194 
	#LANSR_SHALLOW_LOOPBACK
 0x0080

	)

195 
	#LANSR_RSRVD_8
 0x0100

	)

196 
	#LANSR_FIFO_ERR
 0x0200

	)

197 
	#LANSR_MDIX_XOVER
 0x0400

	)

198 
	#LANSR_RSRVD_11
 0x0800

	)

199 
	#LANSR_TP_POLARITY_REV
 0xf000

	)

202 
	#PHY_INT_RSRVD_0
 0x0001

	)

203 
	#PHY_INT_RSRVD_1
 0x0002

	)

204 
	#PHY_INT_RSRVD_2
 0x0004

	)

205 
	#PHY_INT_REM_FLT_CNG
 0x0008

	)

206 
	#PHY_INT_AN_CMPL
 0x0010

	)

207 
	#PHY_INT_NXT_PG_RCVD
 0x0020

	)

208 
	#PHY_INT_JABBER_CNG
 0x0040

	)

209 
	#PHY_INT_NO_LINK
 0x0080

	)

210 
	#PHY_INT_NO_HCD
 0x0100

	)

211 
	#PHY_INT_MAS_SLA_ERR
 0x0200

	)

212 
	#PHY_INT_PRL_DET_FLT
 0x0400

	)

213 
	#PHY_INT_POL_CNG
 0x0800

	)

214 
	#PHY_INT_MDIX_CNG
 0x1000

	)

215 
	#PHY_INT_DPLX_CNG
 0x2000

	)

216 
	#PHY_INT_LNK_CNG
 0x4000

	)

217 
	#PHY_INT_SPD_CNG
 0x8000

	)

	@firmware/usrp2/usrp2/ethernet.c

19 
	~"ëhî√t.h
"

20 
	~"ëh_phy.h
"

21 
	~"ëh_mac.h
"

22 
	~"pic.h
"

23 
	~"hÆ_io.h
"

24 
	~"n⁄°dio.h
"

26 
	#VERBOSE
 1

	)

28 
ëhî√t_t
 
	ged_°©e
;

29 
ëhî√t_lök_ch™ged_ˇŒback_t
 
	ged_ˇŒback
 = 0;

32 
	$ëhî√t_ªgi°î_lök_ch™ged_ˇŒback
(
ëhî√t_lök_ch™ged_ˇŒback_t
 
√w_ˇŒback
)

34 
ed_ˇŒback
 = 
√w_ˇŒback
;

35 
	}
}

39 
	$ed_£t_mac_•ìd
(
•ìd
)

41 
	`¥ötf
("S≥ed sëÅÿ%d\n",
•ìd
);

57 
	}
}

60 
	$ed_lök_up
(
•ìd
)

64 
	`ed_£t_mac_•ìd
(
•ìd
);

66 i‡(
ed_ˇŒback
)

67 (*
ed_ˇŒback
)(
•ìd
);

68 
	}
}

71 
	$ed_lök_down
()

75 i‡(
ed_ˇŒback
)

76 (*
ed_ˇŒback
)(0);

77 
	}
}

81 
	$ed_lök_•ìd_ch™ge
(
•ìd
)

83 
	`ed_lök_down
();

84 
	`ed_lök_up
(
•ìd
);

85 
	}
}

88 
	$¥öt_Êow_c⁄åﬁ
(
Êow_c⁄åﬁ
)

90 c⁄° *
Êow_c⁄åﬁ_msg
[4] = {

93 
	`put°r
("ethernet flow control: ");

94 
	`puts
(
Êow_c⁄åﬁ_msg
[
Êow_c⁄åﬁ
 & 0x3]);

95 
	}
}

98 
	$check_Êow_c⁄åﬁ_ªsﬁuti⁄
()

100 c⁄° 
èbÀ
[16] = {

102 
FC_NONE
, FC_NONE, FC_NONE, FC_NONE,

103 
FC_NONE
, 
FC_SYMM
, FC_NONE, FC_SYMM,

104 
FC_NONE
, FC_NONE, FC_NONE, 
FC_WE_TX
,

105 
FC_NONE
, 
FC_SYMM
, 
FC_WE_RX
, FC_SYMM

108 
us
 = 
	`ëh_mac_miim_ªad
(
PHY_AUTONEG_ADV
);

109 
Õ
 = 
	`ëh_mac_miim_ªad
(
PHY_LP_ABILITY
);

110 
ödex
 = (((
us
 >> 10Ë& 0x3Ë<< 2Ë| ((
Õ
 >> 10) & 0x3);

111 
ed_°©e
.
Êow_c⁄åﬁ
 = 
èbÀ
[
ödex
];

114 
	`¥öt_Êow_c⁄åﬁ
(
ed_°©e
.
Êow_c⁄åﬁ
);

115 
	}
}

121 
	$ed_check_phy_°©e
()

123 
œn§
 = 
	`ëh_mac_miim_ªad
(
PHY_LINK_AN
);

124 
ëh_lök_°©e_t
 
√w_°©e
 = 
LS_UNKNOWN
;

125 
√w_•ìd
 = 
S_UNKNOWN
;

127 i‡(
VERBOSE
){

128 
	`put°r
("LANSR: ");

129 
	`puthex16_∆
(
œn§
);

132 i‡(
œn§
 & 
LANSR_LINK_GOOD
){

133 i‡(
VERBOSE
)

134 
	`puts
(" LINK_GOOD");

136 
√w_°©e
 = 
LS_UP
;

137 
œn§
 & 
LANSR_SPEED_MASK
){

138 
LANSR_SPEED_10
:

139 
√w_•ìd
 = 10;

142 
LANSR_SPEED_100
:

143 
√w_•ìd
 = 100;

146 
LANSR_SPEED_1000
:

147 
√w_•ìd
 = 1000;

151 
√w_•ìd
 = 
S_UNKNOWN
;

155 
	`check_Êow_c⁄åﬁ_ªsﬁuti⁄
();

158 i‡(
VERBOSE
)

159 
	`puts
(" NOT LINK_GOOD");

161 
√w_°©e
 = 
LS_DOWN
;

162 
√w_•ìd
 = 
S_UNKNOWN
;

165 i‡(
√w_°©e
 !
ed_°©e
.
lök_°©e
){

166 
ed_°©e
.
lök_°©e
 = 
√w_°©e
;

167 i‡(
√w_°©e
 =
LS_UP
)

168 
	`ed_lök_up
(
√w_•ìd
);

169 i‡(
√w_°©e
 =
LS_DOWN
)

170 
	`ed_lök_down
();

172 i‡(
√w_°©e
 =
LS_UP
 && 
√w_•ìd
 !
ed_°©e
.
lök_•ìd
){

173 
ed_°©e
.
lök_•ìd
 = 
√w_•ìd
;

174 
	`ed_lök_•ìd_ch™ge
(
√w_•ìd
);

176 
	}
}

182 
	$ëh_phy_úq_h™dÀr
(
úq
)

184 
	`ed_check_phy_°©e
();

185 
	`ëh_mac_miim_wrôe
(
PHY_INT_CLEAR
, ~0);

186 
	}
}

189 
	$ëhî√t_öô
()

191 
	`ëh_mac_öô
(
	`ëhî√t_mac_addr
());

193 
ed_°©e
.
lök_°©e
 = 
LS_UNKNOWN
;

194 
ed_°©e
.
lök_•ìd
 = 
S_UNKNOWN
;

212 
mask
 =

213 (
PHY_INT_AN_CMPL


214 | 
PHY_INT_NO_LINK


215 | 
PHY_INT_NO_HCD


216 | 
PHY_INT_MAS_SLA_ERR


217 | 
PHY_INT_PRL_DET_FLT


218 | 
PHY_INT_LNK_CNG


219 | 
PHY_INT_SPD_CNG


222 
	`ëh_mac_miim_wrôe
(
PHY_INT_CLEAR
, ~0);

223 
	`ëh_mac_miim_wrôe
(
PHY_INT_MASK
, 
mask
);

225 
	`pic_ªgi°î_h™dÀr
(
IRQ_PHY
, 
ëh_phy_úq_h™dÀr
);

249 
t
 = 
	`ëh_mac_miim_ªad
(
PHY_AUTONEG_ADV
);

250 
t
 &~(
NWAY_AR_PAUSE
 | 
NWAY_AR_ASM_DIR
);

251 
t
 |
NWAY_AR_ASM_DIR
;

254 
t
 &~(
NWAY_AR_10T_HD_CAPS
 | 
NWAY_AR_10T_FD_CAPS
 | 
NWAY_AR_100TX_HD_CAPS
 | 
NWAY_AR_100TX_FD_CAPS
);

256 
	`ëh_mac_miim_wrôe
(
PHY_AUTONEG_ADV
, 
t
);

257 
r
 = 
	`ëh_mac_miim_ªad
(
PHY_AUTONEG_ADV
);

258 i‡(
t
 !
r
){

259 
	`¥ötf
("PHY_AUTONEG_ADV: wrŸê0x%x, gŸ 0x%x\n", 
t
, 
r
);

264 
t
 = 
	`ëh_mac_miim_ªad
(
PHY_CTRL
);

265 
	`ëh_mac_miim_wrôe
(
PHY_CTRL
, 
t
 | 
MII_CR_RESTART_AUTO_NEG
);

266 
	}
}

269 
	$ëhî√t_check_îr‹s
()

273 
r
 = 0;

289  
r
;

290 
	}
}

	@firmware/usrp2/usrp2/sd.c

19 
	~"sd.h
"

20 
	~"mem‹y_m≠.h
"

21 
	~"°döt.h
"

22 
	~"°dio.h
"

24 
ölöe
 

25 
	$sd_∑ck¨g
(*
¨gumít
,
vÆue
)

27 
¨gumít
[3] = ()(
vÆue
 >> 24);

28 
¨gumít
[2] = ()(
vÆue
 >> 16);

29 
¨gumít
[1] = ()(
vÆue
 >> 8);

30 
¨gumít
[0] = ()(
vÆue
);

31 
	}
}

34 
	$sd_öô
()

36 
ª•⁄£
[5];

37 
¨gumít
[4];

38 
i
,
j
;

40 
i
=0;i<4;i++)

41 
¨gumít
[
i
] = 0;

44 
sd•i_ªgs
->
˛kdiv
 = 128;

47 
	`sd_as£π_cs
();

48 
i
 = 0; i < 100; i++)

49 
	`sd_£nd_byã
(
SD_IDLE
);

50 
	`sd_dós£π_cs
();

54 if(
	`sd_£nd_comm™d
(
SD_CMD0
,
SD_CMD0_R
,
ª•⁄£
,
¨gumít
)==0)

57 
j
 = 0;

59 
j
++;

60 if(
	`sd_£nd_comm™d
(
SD_CMD55
,
SD_CMD55_R
,
ª•⁄£
,
¨gumít
)==1)

61 
	`sd_£nd_comm™d
(
SD_ACMD41
,
SD_ACMD41_R
,
ª•⁄£
,
¨gumít
);

63 
j
 = 
SD_IDLE_WAIT_MAX
;

65 ((
ª•⁄£
[0] & 
SD_MSK_IDLE
Ë=SD_MSK_IDLEË&& (
j
 < 
SD_IDLE_WAIT_MAX
));

67 if(
j
>
SD_IDLE_WAIT_MAX
)

71 if(
	`sd_£nd_comm™d
(
SD_CMD58
,
SD_CMD58_R
,
ª•⁄£
,
¨gumít
)==0)

74 if((
ª•⁄£
[2] & 
SD_MSK_OCR_33
) != SD_MSK_OCR_33)

80 
	`sd_∑ck¨g
(
¨gumít
,
SD_BLOCKLEN
);

81 if(
	`sd_£nd_comm™d
(
SD_CMD16
,
SD_CMD16_R
,
ª•⁄£
,
¨gumít
)==0)

85 
sd•i_ªgs
->
˛kdiv
 = 4;

88 
	}
}

90 
	$sd_£nd_comm™d
(
cmd
,
ª•⁄£_ty≥
,

91 *
ª•⁄£
,*
¨gumít
)

93 
i
;

94 
ª•⁄£_Àngth
;

95 
tmp
;

97 
	`sd_as£π_cs
();

98 
	`sd_£nd_byã
((
cmd
 & 0x3F) | 0x40);

99 
i
=3;i>=0;i--)

100 
	`sd_£nd_byã
(
¨gumít
[
i
]);

101 
	`sd_£nd_byã
(
SD_CRC
);

103 
ª•⁄£_Àngth
 = 0;

104 
ª•⁄£_ty≥
)

106 
SD_R1
:

107 
SD_R1B
:

108 
ª•⁄£_Àngth
 = 1;

110 
SD_R2
:

111 
ª•⁄£_Àngth
 = 2;

113 
SD_R3
:

114 
ª•⁄£_Àngth
 = 5;

121 
i
 = 0;

124 
tmp
 = 
	`sd_rcv_byã
();

125 
i
++;

127 ((
tmp
 & 0x80Ë!0Ë&& 
i
 < 
SD_CMD_TIMEOUT
);

129 if(
i
>
SD_CMD_TIMEOUT
)

131 
	`sd_dós£π_cs
();

136 
i
=
ª•⁄£_Àngth
-1; i>=0; i--)

138 
ª•⁄£
[
i
] = 
tmp
;

139 
tmp
 = 
	`sd_rcv_byã
();

141 
i
 = 0;

142 if(
ª•⁄£_ty≥
 =
SD_R1B
)

146 
i
++;

147 
tmp
 = 
	`sd_rcv_byã
();

149 
tmp
 !
SD_IDLE
);

150 
	`sd_£nd_byã
(
SD_IDLE
);

154 
	`sd_dós£π_cs
();

156 
	}
}

159 
	$sd_ªad_block
 (
blockaddr
, *
buf
)

161 
ª•⁄£
[5];

162 
¨gumít
[4];

163 
i
 = 0;

164 
tmp
;

166 
blockaddr
 <<
SD_BLOCKLEN_NBITS
;

167 
	`sd_∑ck¨g
(
¨gumít
,
blockaddr
);

168 if(
	`sd_£nd_comm™d
(
SD_CMD17
,
SD_CMD17_R
,
ª•⁄£
,
¨gumít
)==0)

170 if(
ª•⁄£
[0] != 0)

173 
	`sd_as£π_cs
();

174 
i
 = 0;

177 
tmp
 = 
	`sd_rcv_byã
();

178 
i
++;

180 (
tmp
 =0xFFË&& (
i
 < 
SD_RD_TIMEOUT
));

181 if((
i
>
SD_RD_TIMEOUT
Ë||((
tmp
 & 
SD_MSK_TOK_DATAERROR
) == 0))

183 
	`sd_£nd_byã
(
SD_IDLE
);

186 
i
=0;i<
SD_BLOCKLEN
;i++)

187 
buf
[
i
] = 
	`sd_rcv_byã
();

190 
	}
}

193 
	$sd_wrôe_block
(
blockaddr
, c⁄° *
buf
)

197 
	}
}

	@firmware/usrp2/usrp2/sd.h

19 #i‚de‡
INCLUDED_SD_H


20 
	#INCLUDED_SD_H


	)

22 
	~"mem‹y_m≠.h
"

24 
	#SD_READY
 1

	)

25 
	#SD_IDLE_WAIT_MAX
 100

	)

26 
	#SD_CMD_TIMEOUT
 100

	)

27 
	#SD_RD_TIMEOUT
 1000

	)

29 
	#SD_CMD0
 0

	)

30 
	#SD_CMD1
 1

	)

31 
	#SD_CMD9
 9

	)

32 
	#SD_CMD10
 10

	)

33 
	#SD_CMD12
 12

	)

34 
	#SD_CMD13
 13

	)

35 
	#SD_CMD16
 16

	)

36 
	#SD_CMD17
 17

	)

37 
	#SD_CMD18
 18

	)

38 
	#SD_CMD24
 24

	)

39 
	#SD_CMD25
 25

	)

40 
	#SD_CMD27
 27

	)

41 
	#SD_CMD28
 28

	)

42 
	#SD_CMD29
 29

	)

43 
	#SD_CMD30
 30

	)

44 
	#SD_CMD32
 32

	)

45 
	#SD_CMD33
 33

	)

46 
	#SD_CMD38
 38

	)

47 
	#SD_CMD55
 55

	)

48 
	#SD_CMD58
 58

	)

49 
	#SD_CMD59
 59

	)

50 
	#SD_ACMD41
 41

	)

51 
	#SD_IDLE
 0xFF

	)

52 
	#SD_CRC
 0x95

	)

54 
	#SD_R1
 1

	)

55 
	#SD_R1B
 2

	)

56 
	#SD_R2
 3

	)

57 
	#SD_R3
 4

	)

59 
	#SD_CMD0_R
 
SD_R1


	)

60 
	#SD_CMD16_R
 
SD_R1


	)

61 
	#SD_CMD17_R
 
SD_R1


	)

62 
	#SD_CMD55_R
 
SD_R1


	)

63 
	#SD_ACMD41_R
 
SD_R1


	)

64 
	#SD_CMD58_R
 
SD_R3


	)

66 
	#SD_BLOCKLEN
 512

	)

67 
	#SD_BLOCKLEN_NBITS
 9

	)

69 
	#SD_MSK_IDLE
 0x01

	)

70 
	#SD_MSK_OCR_33
 0xC0

	)

71 
	#SD_MSK_TOK_DATAERROR
 0xE0

	)

74 
sd_öô
();

76 
ölöe
 

77 
	$sd_as£π_cs
()

80 
sd•i_ªgs
->
°©us
 !
SD_READY
)

82 
sd•i_ªgs
->
°©us
 = 1;

83 
	}
}

85 
ölöe
 

86 
	$sd_dós£π_cs
()

89 
sd•i_ªgs
->
°©us
 !
SD_READY
)

91 
sd•i_ªgs
->
°©us
 = 0;

92 
	}
}

94 
ölöe
 

95 
	$sd_rcv_byã
()

98 
sd•i_ªgs
->
°©us
 !
SD_READY
)

100 
sd•i_ªgs
->
£nd_d©
 = 
SD_IDLE
;

101 
sd•i_ªgs
->
°©us
 !
SD_READY
)

103  
sd•i_ªgs
-> 
ª˚ive_d©
;

104 
	}
}

106 
ölöe
 

107 
	$sd_£nd_byã
(
d©
)

110 
sd•i_ªgs
->
°©us
 !
SD_READY
)

112 
sd•i_ªgs
->
£nd_d©
 = 
d©
;

113 
	}
}

116 
sd_£nd_comm™d
(
cmd
,
ª•⁄£_ty≥
,

117 *
ª•⁄£
,*
¨gumít
);

119 
sd_ªad_block
 (
blockaddr
, *
buf
);

120 
sd_wrôe_block
(
blockaddr
, c⁄° *
buf
);

	@firmware/usrp2/usrp2p/bootconfig.h

22 #i‚de‡
INCLUDED_BOOTCONFIG_H


23 
	#INCLUDED_BOOTCONFIG_H


	)

25 
	~<°dboﬁ.h
>

28 
	mÂga_image_numbî
;

29 
	mfúmw¨e_image_numbî
;

30 } 
	tboŸc⁄fig_t
;

32 
ölöe
 
boŸc⁄fig_t


33 
	$make_boŸc⁄fig
(
Âga_image_numbî
, 
fúmw¨e_image_numbî
)

35 
boŸc⁄fig_t
 
r
;

36 
r
.
Âga_image_numbî
 = fpga_image_number;

37 
r
.
fúmw¨e_image_numbî
 = firmware_image_number;

38  
r
;

39 
	}
}

41 
boŸc⁄fig_öô
();

46 
boŸc⁄fig_t
 
boŸc⁄fig_gë_deÁu…
();

51 
boﬁ
 
boŸc⁄fig_£t_deÁu…
(
boŸc⁄fig_t
 
bc
);

59 
boŸc⁄fig_boŸ
(
boŸc⁄fig_t
 
bc
);

	@firmware/usrp2/usrp2p/bootloader_utils.c

9 
	~<°dboﬁ.h
>

10 
	~<°rög.h
>

11 
	~<boŸlﬂdî_utûs.h
>

12 
	~<•i_Êash.h
>

13 
	~<i2c.h
>

14 
	~<mem‹y_m≠.h
>

15 
	~<n⁄°dio.h
>

16 
	~<xûöx_s3_iˇp.h
>

17 
	~<mdñay.h
>

18 
	~"•i.h
"

20 
	#BUTTON_PUSHED
 ((
rouãr_°©us
->
úqs
 & 
PIC_BUTTON
Ë? 0 : 1)

	)

22 
	$is_vÆid_Âga_image
(
uöt32_t
 
addr
) {

24 
uöt8_t
 
imgbuf
[64];

25 
	`•i_Êash_ªad
(
addr
, 64, 
imgbuf
);

27 
size_t
 
i
 = 0; i<63; i++) {

28 if(
imgbuf
[
i
] == 0xFF) ;

29 if(
imgbuf
[
i
] == 0xAA && imgbuf[i+1] == 0x99) {

36 
	}
}

38 
	$is_vÆid_fw_image
(
uöt32_t
 
addr
) {

39 c⁄° 
uöt8_t
 
fwhódî
[] = {0x0b, 0x0b, 0x0b, 0x0b};

41 
uöt8_t
 
buf
[12];

42 
	`•i_Êash_ªad
(
addr
, 4, 
buf
);

46  
	`memcmp
(
buf
, 
fwhódî
, 4) == 0;

47 
	}
}

49 
	$°¨t_¥ogøm
()

53 *((vﬁ©ûê
uöt32_t
 *Ë
SR_ADDR_BLDRDONE
) = 1;

54 
	}
}

56 
	$do_the_boŸlﬂd_thög
() {

57 
	`•if_öô
();

59 
boﬁ
 
¥odu˘i⁄_image
 = 
	`föd_ß„_boŸed_Êag
();

60 
	`£t_ß„_boŸed_Êag
(0);

62 if(
BUTTON_PUSHED
) {

63 
	`puts
("Starting USRP2+ in safe mode. Loading safe firmware.");

67 if(!
¥odu˘i⁄_image
) {

68 
	`puts
("Checking for validÖroduction FPGA image...");

69 if(
	`is_vÆid_Âga_image
(
PROD_FPGA_IMAGE_LOCATION_ADDR
)) {

70 
	`puts
("ValidÖroduction FPGA image found. AttemptingÅo boot.");

71 
	`£t_ß„_boŸed_Êag
(1);

72 
	`mdñay
(300);

73 
	`iˇp_ªlﬂd_Âga
(
PROD_FPGA_IMAGE_LOCATION_ADDR
);

75 
	`puts
("No validÖroduction FPGA image found.\nFallingÅhroughÅo built-in firmware.");

78 if(
	`is_vÆid_fw_image
(
PROD_FW_IMAGE_LOCATION_ADDR
)) {

79 
	`puts
("ValidÖroduction firmware found. Loading...");

80 
	`•i_Êash_ªad
(
PROD_FW_IMAGE_LOCATION_ADDR
, 
FW_IMAGE_SIZE_BYTES
, (*)
RAM_BASE
);

81 
	`puts
("FinishedÜoading. Starting image.");

82 
	`mdñay
(300);

83 
	`°¨t_¥ogøm
();

84 
	`puts
("ERROR: Return from mainÖrogram! This shouldÇever happen!");

86 
	`mdñay
(300);

87 
	`iˇp_ªlﬂd_Âga
(
SAFE_FPGA_IMAGE_LOCATION_ADDR
);

90 
	`puts
("No validÖroduction firmware found. FallingÅhroughÅo built-in firmware.");

104 
	}
}

	@firmware/usrp2/usrp2p/bootloader_utils.h

7 
	~<°döt.h
>

11 
	#FPGA_IMAGE_SIZE_BYTES
 1572864

	)

13 
	#FW_IMAGE_SIZE_BYTES
 0x3fff

	)

15 
	#SAFE_FPGA_IMAGE_LOCATION_ADDR
 0x00000000

	)

16 
	#SAFE_FW_IMAGE_LOCATION_ADDR
 0x003F0000

	)

17 
	#PROD_FPGA_IMAGE_LOCATION_ADDR
 0x00180000

	)

18 
	#PROD_FW_IMAGE_LOCATION_ADDR
 0x00300000

	)

20 
is_vÆid_Âga_image
(
uöt32_t
 
addr
);

21 
is_vÆid_fw_image
(
uöt32_t
 
addr
);

22 
°¨t_¥ogøm
();

23 
do_the_boŸlﬂd_thög
();

	@firmware/usrp2/usrp2p/eth_phy.h

22 #i‚de‡
INCLUDED_ETH_PHY_H


23 
	#INCLUDED_ETH_PHY_H


	)

28 
	#PHY_CTRL
 0x00

	)

29 
	#PHY_STATUS
 0x01

	)

30 
	#PHY_ID1
 0x02

	)

31 
	#PHY_ID2
 0x03

	)

32 
	#PHY_AUTONEG_ADV
 0x04

	)

33 
	#PHY_LP_ABILITY
 0x05

	)

34 
	#PHY_AUTONEG_EXP
 0x06

	)

35 
	#PHY_NEXT_PAGE_TX
 0x07

	)

36 
	#PHY_LP_NEXT_PAGE
 0x08

	)

37 
	#PHY_1000T_CTRL
 0x09

	)

38 
	#PHY_1000T_STATUS
 0x0A

	)

39 
	#PHY_EXT_STATUS
 0x0F

	)

42 
	#PHY_INT_MASK
 24

	)

43 
	#PHY_INT_STATUS
 25

	)

44 
	#PHY_PHY_STATUS
 26

	)

45 
	#PHY_LED2
 28

	)

50 
	#MII_CR_SPEED_SELECT_MSB
 0x0040

	)

51 
	#MII_CR_COLL_TEST_ENABLE
 0x0080

	)

52 
	#MII_CR_FULL_DUPLEX
 0x0100

	)

53 
	#MII_CR_RESTART_AUTO_NEG
 0x0200

	)

54 
	#MII_CR_ISOLATE
 0x0400

	)

55 
	#MII_CR_POWER_DOWN
 0x0800

	)

56 
	#MII_CR_AUTO_NEG_EN
 0x1000

	)

57 
	#MII_CR_SPEED_SELECT_LSB
 0x2000

	)

58 
	#MII_CR_LOOPBACK
 0x4000

	)

59 
	#MII_CR_RESET
 0x8000

	)

62 
	#MII_SR_EXTENDED_CAPS
 0x0001

	)

63 
	#MII_SR_JABBER_DETECT
 0x0002

	)

64 
	#MII_SR_LINK_STATUS
 0x0004

	)

65 
	#MII_SR_AUTONEG_CAPS
 0x0008

	)

66 
	#MII_SR_REMOTE_FAULT
 0x0010

	)

67 
	#MII_SR_AUTONEG_COMPLETE
 0x0020

	)

68 
	#MII_SR_PREAMBLE_SUPPRESS
 0x0040

	)

69 
	#MII_SR_EXTENDED_STATUS
 0x0100

	)

70 
	#MII_SR_100T2_HD_CAPS
 0x0200

	)

71 
	#MII_SR_100T2_FD_CAPS
 0x0400

	)

72 
	#MII_SR_10T_HD_CAPS
 0x0800

	)

73 
	#MII_SR_10T_FD_CAPS
 0x1000

	)

74 
	#MII_SR_100X_HD_CAPS
 0x2000

	)

75 
	#MII_SR_100X_FD_CAPS
 0x4000

	)

76 
	#MII_SR_100T4_CAPS
 0x8000

	)

79 
	#NWAY_AR_SELECTOR_FIELD
 0x0001

	)

80 
	#NWAY_AR_10T_HD_CAPS
 0x0020

	)

81 
	#NWAY_AR_10T_FD_CAPS
 0x0040

	)

82 
	#NWAY_AR_100TX_HD_CAPS
 0x0080

	)

83 
	#NWAY_AR_100TX_FD_CAPS
 0x0100

	)

84 
	#NWAY_AR_100T4_CAPS
 0x0200

	)

85 
	#NWAY_AR_PAUSE
 0x0400

	)

86 
	#NWAY_AR_ASM_DIR
 0x0800

	)

87 
	#NWAY_AR_REMOTE_FAULT
 0x2000

	)

88 
	#NWAY_AR_NEXT_PAGE
 0x8000

	)

91 
	#NWAY_LPAR_SELECTOR_FIELD
 0x0000

	)

92 
	#NWAY_LPAR_10T_HD_CAPS
 0x0020

	)

93 
	#NWAY_LPAR_10T_FD_CAPS
 0x0040

	)

94 
	#NWAY_LPAR_100TX_HD_CAPS
 0x0080

	)

95 
	#NWAY_LPAR_100TX_FD_CAPS
 0x0100

	)

96 
	#NWAY_LPAR_100T4_CAPS
 0x0200

	)

97 
	#NWAY_LPAR_PAUSE
 0x0400

	)

98 
	#NWAY_LPAR_ASM_DIR
 0x0800

	)

99 
	#NWAY_LPAR_REMOTE_FAULT
 0x2000

	)

100 
	#NWAY_LPAR_ACKNOWLEDGE
 0x4000

	)

101 
	#NWAY_LPAR_NEXT_PAGE
 0x8000

	)

104 
	#NWAY_ER_LP_NWAY_CAPS
 0x0001

	)

105 
	#NWAY_ER_PAGE_RXD
 0x0002

	)

106 
	#NWAY_ER_NEXT_PAGE_CAPS
 0x0004

	)

107 
	#NWAY_ER_LP_NEXT_PAGE_CAPS
 0x0008

	)

108 
	#NWAY_ER_PAR_DETECT_FAULT
 0x0010

	)

111 
	#NPTX_MSG_CODE_FIELD
 0x0001

	)

112 
	#NPTX_TOGGLE
 0x0800

	)

115 
	#NPTX_ACKNOWLDGE2
 0x1000

	)

118 
	#NPTX_MSG_PAGE
 0x2000

	)

119 
	#NPTX_NEXT_PAGE
 0x8000

	)

124 
	#LP_RNPR_MSG_CODE_FIELD
 0x0001

	)

125 
	#LP_RNPR_TOGGLE
 0x0800

	)

128 
	#LP_RNPR_ACKNOWLDGE2
 0x1000

	)

131 
	#LP_RNPR_MSG_PAGE
 0x2000

	)

132 
	#LP_RNPR_ACKNOWLDGE
 0x4000

	)

133 
	#LP_RNPR_NEXT_PAGE
 0x8000

	)

138 
	#CR_1000T_ASYM_PAUSE
 0x0080

	)

139 
	#CR_1000T_HD_CAPS
 0x0100

	)

140 
	#CR_1000T_FD_CAPS
 0x0200

	)

141 
	#CR_1000T_REPEATER_DTE
 0x0400

	)

143 
	#CR_1000T_MS_VALUE
 0x0800

	)

145 
	#CR_1000T_MS_ENABLE
 0x1000

	)

147 
	#CR_1000T_TEST_MODE_NORMAL
 0x0000

	)

148 
	#CR_1000T_TEST_MODE_1
 0x2000

	)

149 
	#CR_1000T_TEST_MODE_2
 0x4000

	)

150 
	#CR_1000T_TEST_MODE_3
 0x6000

	)

151 
	#CR_1000T_TEST_MODE_4
 0x8000

	)

154 
	#SR_1000T_IDLE_ERROR_CNT
 0x00FF

	)

155 
	#SR_1000T_ASYM_PAUSE_DIR
 0x0100

	)

156 
	#SR_1000T_LP_HD_CAPS
 0x0400

	)

157 
	#SR_1000T_LP_FD_CAPS
 0x0800

	)

158 
	#SR_1000T_REMOTE_RX_STATUS
 0x1000

	)

159 
	#SR_1000T_LOCAL_RX_STATUS
 0x2000

	)

160 
	#SR_1000T_MS_CONFIG_RES
 0x4000

	)

161 
	#SR_1000T_MS_CONFIG_FAULT
 0x8000

	)

162 
	#SR_1000T_REMOTE_RX_STATUS_SHIFT
 12

	)

163 
	#SR_1000T_LOCAL_RX_STATUS_SHIFT
 13

	)

164 
	#SR_1000T_PHY_EXCESSIVE_IDLE_ERR_COUNT
 5

	)

165 
	#FFE_IDLE_ERR_COUNT_TIMEOUT_20
 20

	)

166 
	#FFE_IDLE_ERR_COUNT_TIMEOUT_100
 100

	)

169 
	#IEEE_ESR_1000T_HD_CAPS
 0x1000

	)

170 
	#IEEE_ESR_1000T_FD_CAPS
 0x2000

	)

171 
	#IEEE_ESR_1000X_HD_CAPS
 0x4000

	)

172 
	#IEEE_ESR_1000X_FD_CAPS
 0x8000

	)

174 
	#PHY_TX_POLARITY_MASK
 0x0100

	)

175 
	#PHY_TX_NORMAL_POLARITY
 0

	)

177 
	#AUTO_POLARITY_DISABLE
 0x0010

	)

181 
	#PHYSTAT_ASYMMETRIC
 (1 << 0)

	)

182 
	#PHYSTAT_PAUSE
 (1 << 1)

	)

183 
	#PHYSTAT_AUTONEG_EN
 (1 << 2)

	)

184 
	#PHYSTAT_COLLISION
 (1 << 3)

	)

185 
	#PHYSTAT_RXSTAT
 (1 << 4)

	)

186 
	#PHYSTAT_TXSTAT
 (1 << 5)

	)

187 
	#PHYSTAT_LINK
 (1 << 6)

	)

188 
	#PHYSTAT_DUPLEX
 (1 << 7)

	)

189 
	#PHYSTAT_SPEED_MASK
 ((1 << 8Ë| (1 << 9))

	)

190 
	#PHYSTAT_SPEED_1000
 (1 << 9)

	)

191 
	#PHYSTAT_SPEED_100
 (1 << 8)

	)

192 
	#PHYSTAT_SPEED_10
 0

	)

193 
	#PHYSTAT_POLARITY
 (1 << 10)

	)

194 
	#PHYSTAT_MDIX
 (1 << 11)

	)

195 
	#PHYSTAT_AUTONEG_STAT
 (1 << 12)

	)

196 
	#PHYSTAT_STANDBY
 (1 << 13)

	)

199 
	#PHY_INT_ENABLE
 (1 << 0)

	)

200 
	#PHY_INT_DOWNSHIFT
 (1 << 1)

	)

201 
	#PHY_INT_LINK_STATUS_CHANGE
 (1 << 2)

	)

202 
	#PHY_INT_RX_STATUS_CHANGE
 (1 << 3)

	)

203 
	#PHY_INT_FIFO_ERROR
 (1 << 4)

	)

204 
	#PHY_INT_ERR_CTR_FULL
 (1 << 5)

	)

205 
	#PHY_INT_NEXT_PAGE_RX
 (1 << 6)

	)

206 
	#PHY_INT_CRC_ERROR
 (1 << 7)

	)

207 
	#PHY_INT_AUTONEG_STATUS_CHANGE
 (1 << 8)

	)

208 
	#PHY_INT_MDIO_SYNC_LOST
 (1 << 9)

	)

209 
	#PHY_INT_TDR_IP_PHONE
 (1 << 10)

	)

212 
	#PHY_LED_TXRX_LSB
 12

	)

213 
	#PHY_LED_LINK_LSB
 8

	)

214 
	#PHY_LED_100_LSB
 4

	)

215 
	#PHY_LED_1000_LSB
 0

	)

217 
	#LED_1000
 0

	)

218 
	#LED_100_TX
 1

	)

219 
	#LED_10
 2

	)

220 
	#LED_1000_ON_100_BLINK
 3

	)

221 
	#LED_LINK
 4

	)

222 
	#LED_TX
 5

	)

223 
	#LED_RX
 6

	)

224 
	#LED_ACTIVITY
 7

	)

225 
	#LED_FULLDUPLEX
 8

	)

226 
	#LED_COLLISION
 9

	)

227 
	#LED_LINK_ON_ACTIVITY_BLINK
 10

	)

228 
	#LED_LINK_ON_RX_BLINK
 11

	)

229 
	#LED_FULL_DUPLEX_ON_COLLISION_BLINK
 12

	)

230 
	#LED_BLINK
 13

	)

231 
	#LED_ON
 14

	)

232 
	#LED_OFF
 15

	)

	@firmware/usrp2/usrp2p/ethernet.c

21 
	~"ëhî√t.h
"

22 
	~"mem‹y_m≠.h
"

23 
	~"ëh_phy.h
"

24 
	~<ëh_mac.h
>

25 
	~<pic.h
>

26 
	~<hÆ_io.h
>

27 
	~<n⁄°dio.h
>

28 
	~<°dboﬁ.h
>

29 
	~<i2c.h
>

30 
	~"u§p2/fw_comm⁄.h
"

32 
	#VERBOSE
 0

	)

34 
ëhî√t_t
 
	ged_°©e
;

35 
ëhî√t_lök_ch™ged_ˇŒback_t
 
	ged_ˇŒback
 = 0;

38 
	$ëhî√t_ªgi°î_lök_ch™ged_ˇŒback
(
ëhî√t_lök_ch™ged_ˇŒback_t
 
√w_ˇŒback
)

40 
ed_ˇŒback
 = 
√w_ˇŒback
;

41 
	}
}

45 
	$ed_£t_mac_•ìd
(
•ìd
)

47 
	`¥ötf
("S≥ed sëÅÿ%d\n",
•ìd
);

63 
	}
}

66 
	$ed_lök_up
(
•ìd
)

70 
	`ed_£t_mac_•ìd
(
•ìd
);

73 
	`hÆ_£t_Àds
(
LED_RJ45
, LED_RJ45);

76 i‡(
ed_ˇŒback
)

77 (*
ed_ˇŒback
)(
•ìd
);

78 
	}
}

81 
	$ed_lök_down
()

86 
	`hÆ_£t_Àds
(0, 
LED_RJ45
);

88 i‡(
ed_ˇŒback
)

89 (*
ed_ˇŒback
)(0);

90 
	}
}

94 
	$ed_lök_•ìd_ch™ge
(
•ìd
)

96 
	`ed_lök_down
();

97 
	`ed_lök_up
(
•ìd
);

98 
	}
}

101 
	$¥öt_Êow_c⁄åﬁ
(
Êow_c⁄åﬁ
)

103 c⁄° *
Êow_c⁄åﬁ_msg
[4] = {

106 
	`put°r
("ethernet flow control: ");

107 
	`puts
(
Êow_c⁄åﬁ_msg
[
Êow_c⁄åﬁ
 & 0x3]);

108 
	}
}

111 
	$check_Êow_c⁄åﬁ_ªsﬁuti⁄
()

113 c⁄° 
èbÀ
[16] = {

115 
FC_NONE
, FC_NONE, FC_NONE, FC_NONE,

116 
FC_NONE
, 
FC_SYMM
, FC_NONE, FC_SYMM,

117 
FC_NONE
, FC_NONE, FC_NONE, 
FC_WE_TX
,

118 
FC_NONE
, 
FC_SYMM
, 
FC_WE_RX
, FC_SYMM

121 
us
 = 
	`ëh_mac_miim_ªad
(
PHY_AUTONEG_ADV
);

122 
Õ
 = 
	`ëh_mac_miim_ªad
(
PHY_LP_ABILITY
);

123 
ödex
 = (((
us
 >> 10Ë& 0x3Ë<< 2Ë| ((
Õ
 >> 10) & 0x3);

124 
ed_°©e
.
Êow_c⁄åﬁ
 = 
èbÀ
[
ödex
];

127 
	`¥öt_Êow_c⁄åﬁ
(
ed_°©e
.
Êow_c⁄åﬁ
);

128 
	}
}

134 
	$ed_check_phy_°©e
()

136 
phy°©
 = 
	`ëh_mac_miim_ªad
(
PHY_PHY_STATUS
);

137 
ëh_lök_°©e_t
 
√w_°©e
 = 
LS_UNKNOWN
;

138 
√w_•ìd
 = 
S_UNKNOWN
;

140 i‡(
VERBOSE
){

141 
	`put°r
("PHYSTAT: ");

142 
	`puthex16_∆
(
phy°©
);

145 i‡(
phy°©
 & 
PHYSTAT_LINK
){

146 i‡(
VERBOSE
)

147 
	`puts
(" LINK_GOOD");

149 
√w_°©e
 = 
LS_UP
;

150 
phy°©
 & 
PHYSTAT_SPEED_MASK
){

151 
PHYSTAT_SPEED_10
:

152 
√w_•ìd
 = 10;

155 
PHYSTAT_SPEED_100
:

156 
√w_•ìd
 = 100;

159 
PHYSTAT_SPEED_1000
:

160 
√w_•ìd
 = 1000;

164 
√w_•ìd
 = 
S_UNKNOWN
;

168 
	`check_Êow_c⁄åﬁ_ªsﬁuti⁄
();

171 i‡(
VERBOSE
)

172 
	`puts
(" NOT LINK_GOOD");

174 
√w_°©e
 = 
LS_DOWN
;

175 
√w_•ìd
 = 
S_UNKNOWN
;

178 i‡(
√w_°©e
 !
ed_°©e
.
lök_°©e
){

179 
ed_°©e
.
lök_°©e
 = 
√w_°©e
;

180 i‡(
√w_°©e
 =
LS_UP
)

181 
	`ed_lök_up
(
√w_•ìd
);

182 i‡(
√w_°©e
 =
LS_DOWN
)

183 
	`ed_lök_down
();

185 i‡(
√w_°©e
 =
LS_UP
 && 
√w_•ìd
 !
ed_°©e
.
lök_•ìd
){

186 
ed_°©e
.
lök_•ìd
 = 
√w_•ìd
;

187 
	`ed_lök_•ìd_ch™ge
(
√w_•ìd
);

189 
	}
}

195 
	$ëh_phy_úq_h™dÀr
(
úq
)

197 
	`ed_check_phy_°©e
();

198 
	`ëh_mac_miim_ªad
(
PHY_INT_STATUS
);

200 
	}
}

203 
	$ëhî√t_öô
()

205 
	`ëh_mac_öô
(
	`ëhî√t_mac_addr
());

207 
ed_°©e
.
lök_°©e
 = 
LS_UNKNOWN
;

208 
ed_°©e
.
lök_•ìd
 = 
S_UNKNOWN
;

226 
mask
 =

227 (
PHY_INT_ENABLE


228 | 
PHY_INT_LINK_STATUS_CHANGE


229 | 
PHY_INT_RX_STATUS_CHANGE


232 
	`ëh_mac_miim_ªad
(
PHY_INT_STATUS
);

233 
	`ëh_mac_miim_wrôe
(
PHY_INT_MASK
, 
mask
);

236 
Àd
 = (
LED_ACTIVITY
 << 
PHY_LED_LINK_LSB
Ë| (
LED_TX
 << 
PHY_LED_TXRX_LSB
);

237 
	`ëh_mac_miim_wrôe
(
PHY_LED2
, 
Àd
);

239 
	`pic_ªgi°î_h™dÀr
(
IRQ_PHY
, 
ëh_phy_úq_h™dÀr
);

263 
t
 = 
	`ëh_mac_miim_ªad
(
PHY_AUTONEG_ADV
);

264 
t
 &~(
NWAY_AR_PAUSE
 | 
NWAY_AR_ASM_DIR
);

265 
t
 |
NWAY_AR_ASM_DIR
;

268 
t
 &~(
NWAY_AR_10T_HD_CAPS
 | 
NWAY_AR_10T_FD_CAPS
 | 
NWAY_AR_100TX_HD_CAPS
 | 
NWAY_AR_100TX_FD_CAPS
);

270 
	`ëh_mac_miim_wrôe
(
PHY_AUTONEG_ADV
, 
t
);

271 
r
 = 
	`ëh_mac_miim_ªad
(
PHY_AUTONEG_ADV
);

272 i‡(
t
 !
r
){

273 
	`¥ötf
("PHY_AUTONEG_ADV: wrŸê0x%x, gŸ 0x%x\n", 
t
, 
r
);

278 
t
 = 
	`ëh_mac_miim_ªad
(
PHY_CTRL
);

279 
	`ëh_mac_miim_wrôe
(
PHY_CTRL
, 
t
 | 
MII_CR_RESTART_AUTO_NEG
);

280 
	}
}

283 
	$ëhî√t_check_îr‹s
()

287 
r
 = 0;

303  
r
;

304 
	}
}

	@firmware/usrp2/usrp2p/spi_flash.c

19 
	~"•i_Êash.h
"

20 
	~"•i_Êash_¥iv©e.h
"

22 
	~<n⁄°dio.h
>

24 
uöt32_t


25 
	$•i_Êash_rd§
()

27  
	`•if_å™ß˘
(
SPI_TXRX
, 
SPI_SS_FLASH
, 
RDSR_CMD
 << 8, 16, 
FLAGS
) & 0xff;

28 
	}
}

31 
	$•i_Êash_wrôe_íabÀ
()

34 
	`•if_å™ß˘
(
SPI_TXONLY
, 
SPI_SS_FLASH
, 
WREN_CMD
, 8, 
FLAGS
);

35 
	}
}

37 
boﬁ


38 
	$•i_Êash_d⁄e_p
()

40  (
	`•i_Êash_rd§
(Ë& 
SR_WIP
) == 0;

41 
	}
}

44 
	$•i_Êash_waô
()

46 !
	`•i_Êash_d⁄e_p
())

48 
	}
}

51 
	$•i_Êash_îa£_£˘‹_°¨t
(
uöt32_t
 
Êash_addr
)

54 if(
Êash_addr
 > 
	`•i_Êash_mem‹y_size
())

57 
	`•i_Êash_waô
();

58 
	`•i_Êash_wrôe_íabÀ
();

59 
	`•if_å™ß˘
(
SPI_TXONLY
, 
SPI_SS_FLASH
,

60 (
SE_CMD
 << 24Ë| (
Êash_addr
 & 0x00ffffff),

61 32, 
FLAGS
);

62 
	}
}

64 
boﬁ


65 
	$•i_Êash_∑ge_¥ogøm_°¨t
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
, c⁄° *
buf
)

67 i‡(
nbyãs
 =0 ||Çbyã†> 
SPI_FLASH_PAGE_SIZE
)

68  
Ál£
;

71 i‡((
Êash_addr
 + 
nbyãs
Ë> 
	`•i_Êash_mem‹y_size
())

72  
Ál£
;

74 
uöt32_t
 
loˇl_buf
[
SPI_FLASH_PAGE_SIZE
 / (uint32_t)];

75 
	`mem£t
(
loˇl_buf
, 0xff, (local_buf));

76 
	`mem˝y
(
loˇl_buf
, 
buf
, 
nbyãs
);

78 
	`•i_Êash_waô
();

79 
	`•i_Êash_wrôe_íabÀ
();

87 
	`•if_waô
();

89 
•if_ªgs
->
ss
 = 0;

90 
•if_ªgs
->
˘æ
 = 
FLAGS
;

94 
•if_ªgs
->
txrx0
 = (
PP_CMD
 << 24Ë| (
Êash_addr
 & 0x00ffffff);

95 
•if_ªgs
->
ss
 = 
SPI_SS_FLASH
;

96 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(4 * 8);

97 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(4 * 8Ë| 
SPI_CTRL_GO_BSY
;

98 
	`•if_waô
();

101 
size_t
 
i
 = 0; i < 16; i++){

102 
•if_ªgs
->
txrx3
 = 
loˇl_buf
[
i
 * 4 + 0];

103 
•if_ªgs
->
txrx2
 = 
loˇl_buf
[
i
 * 4 + 1];

104 
•if_ªgs
->
txrx1
 = 
loˇl_buf
[
i
 * 4 + 2];

105 
•if_ªgs
->
txrx0
 = 
loˇl_buf
[
i
 * 4 + 3];

107 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(16 * 8);

108 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(16 * 8Ë| 
SPI_CTRL_GO_BSY
;

109 
	`•if_waô
();

111 
•if_ªgs
->
ss
 = 0;

113  
åue
;

114 
	}
}

117 
	$•i_Êash_îa£
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
)

119 i‡(
nbyãs
 == 0)

122 
uöt32_t
 
fú°
 = 
	`round_down
(
Êash_addr
, 
	`•i_Êash_£˘‹_size
());

123 
uöt32_t
 
œ°
 = 
	`round_down
(
Êash_addr
 + 
nbyãs
 - 1, 
	`•i_Êash_£˘‹_size
());

125 
uöt32_t
 
s
 = 
fú°
; s <
œ°
; s +
	`•i_Êash_£˘‹_size
()){

126 
	`•i_Êash_îa£_£˘‹_°¨t
(
s
);

128 
	`•i_Êash_waô
();

129 
	}
}

131 
boﬁ


132 
	$•i_Êash_¥ogøm
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
, c⁄° *
buf
)

136 c⁄° *
p
 = (c⁄° *Ë
buf
;

137 
size_t
 
n
;

139 i‡((
nbyãs
 + 
Êash_addr
Ë> 
	`•i_Êash_mem‹y_size
())

140  
Ál£
;

141 i‡(
nbyãs
 == 0)

142  
åue
;

144 
uöt32_t
 
r
 = 
Êash_addr
 % 
SPI_FLASH_PAGE_SIZE
;

145 i‡(
r
){

146 
n
 = 
	`mö
(
SPI_FLASH_PAGE_SIZE
 - 
r
, 
nbyãs
);

147 
	`•i_Êash_∑ge_¥ogøm_°¨t
(
Êash_addr
, 
n
, 
p
);

148 
Êash_addr
 +
n
;

149 
p
 +
n
;

150 
nbyãs
 -
n
;

153 
nbyãs
 > 0){

154 
n
 = 
	`mö
(
SPI_FLASH_PAGE_SIZE
, 
nbyãs
);

155 
	`•i_Êash_∑ge_¥ogøm_°¨t
(
Êash_addr
, 
n
, 
p
);

156 
Êash_addr
 +
n
;

157 
p
 +
n
;

158 
nbyãs
 -
n
;

161 
	`•i_Êash_waô
();

162  
åue
;

163 
	}
}

166 
	$•i_Êash_async_îa£_°¨t
(
•i_Êash_async_°©e_t
 *
s
,

167 
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
)

172 i‡((
nbyãs
 =0Ë|| ((
Êash_addr
 +ÇbyãsË> 
	`•i_Êash_mem‹y_size
())){

173 
s
->
fú°
 = s->
œ°
 = s->
cuºít
 = 0;

177 
uöt32_t
 
fú°
 = 
	`round_down
(
Êash_addr
, 
	`•i_Êash_£˘‹_size
());

178 
uöt32_t
 
œ°
 = 
	`round_down
(
Êash_addr
 + 
nbyãs
 - 1, 
	`•i_Êash_£˘‹_size
());

180 
s
->
fú°
 = first;

181 
s
->
œ°
 =Üast;

182 
s
->
cuºít
 = 
fú°
;

184 
	`•i_Êash_îa£_£˘‹_°¨t
(
s
->
cuºít
);

185 
	}
}

187 
boﬁ


188 
	$•i_Êash_async_îa£_pﬁl
(
•i_Êash_async_°©e_t
 *
s
)

190 i‡(!
	`•i_Êash_d⁄e_p
())

191  
Ál£
;

198 i‡(
s
->
cuºít
 =s->
œ°
)

199  
åue
;

201 
s
->
cuºít
 +
	`•i_Êash_£˘‹_size
();

202 
	`•i_Êash_îa£_£˘‹_°¨t
(
s
->
cuºít
);

203  
Ál£
;

204 
	}
}

	@firmware/usrp2/usrp2p/spi_flash.h

19 #i‚de‡
INCLUDED_SPI_FLASH_H


20 
	#INCLUDED_SPI_FLASH_H


	)

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

26 
	#SPI_FLASH_PAGE_SIZE
 256

	)

27 
	#SPI_SS_FLASH
 1

	)

29 
	#SPIF_PUSH_RISE
 0

30 
	#SPIF_PUSH_FALL
 
SPI_CTRL_TXNEG


31 
	#SPIF_LATCH_RISE
 0

32 
	#SPIF_LATCH_FALL
 
SPI_CTRL_RXNEG


33 

	)

34 
•if_öô
();

35 
•if_waô
();

37 
uöt32_t
 
•if_å™ß˘
(
boﬁ
 
ªadback
, 
¶ave
, uöt32_à
d©a
, 
Àngth
, uöt32_à
Êags
);

39 
uöt32_t
 
•i_Êash_rdid
();

40 
uöt32_t
 
•i_Êash_rd§
();

42 
size_t
 
•i_Êash_log2_mem‹y_size
();

43 
size_t
 
•i_Êash_log2_£˘‹_size
();

44 
size_t
 
•i_Êash_£˘‹_size
();

45 
size_t
 
•i_Êash_mem‹y_size
();

47 
•i_Êash_ªad
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
, *
buf
);

53 
•i_Êash_îa£
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
);

59 
boﬁ
 
•i_Êash_¥ogøm
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
, c⁄° *
buf
);

68 
boﬁ
 
•i_Êash_d⁄e_p
();

73 
•i_Êash_waô
();

79 
•i_Êash_îa£_£˘‹_°¨t
(
uöt32_t
 
Êash_addr
);

86 
boﬁ
 
•i_Êash_∑ge_¥ogøm_°¨t
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
, c⁄° *
buf
);

94 
uöt32_t
 
	mfú°
;

95 
uöt32_t
 
	mœ°
;

96 
uöt32_t
 
	mcuºít
;

97 } 
	t•i_Êash_async_°©e_t
;

106 
•i_Êash_async_îa£_°¨t
(
•i_Êash_async_°©e_t
 *
s
,

107 
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
);

115 
boﬁ
 
•i_Êash_async_îa£_pﬁl
(
•i_Êash_async_°©e_t
 *
s
);

	@firmware/usrp2/usrp2p/spi_flash_private.h

20 #i‚de‡
INCLUDED_SPI_FLASH_PRIVATE_H


21 
	#INCLUDED_SPI_FLASH_PRIVATE_H


	)

23 
	~"•i_Êash.h
"

24 
	~"•i.h
"

25 
	~"mem‹y_m≠.h
"

26 
	~<°rög.h
>

31 
	#WREN_CMD
 0x06

32 
	#WRDI_CMD
 0x04

33 
	#RDID_CMD
 0x9f

34 
	#RDSR_CMD
 0x05

35 
	#WRSR_CMD
 0x01

36 
	#READ_CMD
 0x03

	)

37 
	#FAST_READ_CMD
 0x0b

	)

38 
	#PP_CMD
 0x02

39 
	#SE_CMD
 0xd8

40 
	#BE_CMD
 0xc7

41 
	#RES_CMD
 0xab

42 

	)

45 
	#SR_SRWD
 0x80

	)

46 
	#SR_BP2
 0x10

47 
	#SR_BP1
 0x08

48 
	#SR_BP0
 0x04

49 
	#SR_WEL
 0x02

50 
	#SR_WIP
 0x01

51 

	)

53 
	#FLAGS
 (
SPIF_PUSH_FALL
 | 
SPIF_LATCH_RISE
)

	)

55 
	#LEN
(
x
Ë((xË& 
SPI_CTRL_CHAR_LEN_MASK
)

	)

58 
ölöe
 
uöt32_t


59 
	$mö
(
uöt32_t
 
a
, uöt32_à
b
)

61  
a
 < 
b
 ?á : b;

62 
	}
}

64 
ölöe
 
uöt32_t


65 
	$round_down
(
uöt32_t
 
x
, uöt32_à
powî_of_2
)

67  
x
 & -
powî_of_2
;

68 
	}
}

	@firmware/usrp2/usrp2p/spi_flash_read.c

20 
	~"•i_Êash_¥iv©e.h
"

21 
	~<°dlib.h
>

22 
	~<n⁄°dio.h
>

24 
uöt32_t


25 
	$•i_Êash_rdid
()

27  
	`•if_å™ß˘
(
SPI_TXRX
, 
SPI_SS_FLASH
, 
RDID_CMD
 << 24, 32, 
FLAGS
) & 0xffffff;

28 
	}
}

30 
size_t
 
	$•i_Êash_log2_mem‹y_size
()

32 
size_t
 
_•i_Êash_log2_mem‹y_size
 = 0;

33 i‡(
_•i_Êash_log2_mem‹y_size
 == 0){

34 
uöt32_t
 
id
 = 
	`•i_Êash_rdid
();

35 
uöt8_t
 
ty≥
 = (
id
 >> 8) & 0xff;

36 
uöt8_t
 
size
 = (
id
 >> 0) & 0xff;

37 i‡(
ty≥
 !0x20Ë
	`ab‹t
();

38 
_•i_Êash_log2_mem‹y_size
 = 
size
;

40 i‡(
_•i_Êash_log2_mem‹y_size
 < 22 ||

41 
_•i_Êash_log2_mem‹y_size
 > 24 ) 
	`ab‹t
();

42  
_•i_Êash_log2_mem‹y_size
;

43 
	}
}

45 
size_t
 
	$•i_Êash_log2_£˘‹_size
()

47 
log2_£˘‹_size
[3] = {

52  
log2_£˘‹_size
[
	`•i_Êash_log2_mem‹y_size
() - 22];

53 
	}
}

55 
size_t
 
	$•i_Êash_£˘‹_size
()

57  ((
size_t
Ë1Ë<< 
	`•i_Êash_log2_£˘‹_size
();

58 
	}
}

60 
size_t
 
	$•i_Êash_mem‹y_size
()

62  ((
size_t
Ë1Ë<< 
	`•i_Êash_log2_mem‹y_size
();

63 
	}
}

66 
	$•i_Êash_ªad
(
uöt32_t
 
Êash_addr
, 
size_t
 
nbyãs
, *
buf
)

74 
	`•if_waô
();

76 
•if_ªgs
->
ss
 = 0;

77 
•if_ªgs
->
˘æ
 = 
FLAGS
;

83 
•if_ªgs
->
txrx1
 = 
FAST_READ_CMD
;

84 
•if_ªgs
->
txrx0
 = ((
Êash_addr
 & 0x00ffffff) << 8);

85 
•if_ªgs
->
ss
 = 
SPI_SS_FLASH
;

86 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(5 * 8);

87 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(5 * 8Ë| 
SPI_CTRL_GO_BSY
;

88 
	`•if_waô
();

93 *
d°
 = (*Ë
buf
;

94 
size_t
 
m
;

95 
size_t
 
n
 = 0;Ç < 
nbyãs
;Ç +
m
){

97 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(16 * 8);

98 
•if_ªgs
->
˘æ
 = 
FLAGS
 | 
	`LEN
(16 * 8Ë| 
SPI_CTRL_GO_BSY
;

99 
	`•if_waô
();

101 
uöt32_t
 
w
[4];

102 
w
[0] = 
•if_ªgs
->
txrx3
;

103 
w
[1] = 
•if_ªgs
->
txrx2
;

104 
w
[2] = 
•if_ªgs
->
txrx1
;

105 
w
[3] = 
•if_ªgs
->
txrx0
;

106 *
§c
 = (*Ë&
w
[0];

107 
m
 = 
	`mö
(
nbyãs
 - 
n
, 16);

108 
size_t
 
i
 = 0; i < 
m
; i++)

109 *(
d°
++Ë
§c
[
i
];

111 
•if_ªgs
->
ss
 = 0;

112 
	}
}

	@firmware/usrp2/usrp2p/spif.c

23 
	~"•i.h
"

24 
	~"•i_Êash.h
"

25 
	~"mem‹y_m≠.h
"

28 
	$•if_öô
()

33 
•if_ªgs
->
div
 = 1;

36 
	`•if_å™ß˘
(
SPI_TXONLY
, 0, 0, 8, 
SPIF_PUSH_FALL
 | 
SPIF_LATCH_RISE
);

37 
	}
}

39 
ölöe
 

40 
	$•if_waô
()

42 
•if_ªgs
->
˘æ
 & 
SPI_CTRL_GO_BSY
)

44 
	}
}

46 
uöt32_t


47 
	$•if_å™ß˘
(
boﬁ
 
ªadback_
, 
¶ave
, 
uöt32_t
 
d©a
, 
Àngth
, uöt32_à
Êags
)

49 
Êags
 &(
SPI_CTRL_TXNEG
 | 
SPI_CTRL_RXNEG
);

50 
˘æ
 = 
SPI_CTRL_ASS
 | (
SPI_CTRL_CHAR_LEN_MASK
 & 
Àngth
Ë| 
Êags
;

52 
	`•if_waô
();

55 
•if_ªgs
->
txrx0
 = 
d©a
;

58 
•if_ªgs
->
˘æ
 = ctrl;

60 
•if_ªgs
->
ss
 = 
¶ave
 & 0xff;

61 
•if_ªgs
->
˘æ
 = cå»| 
SPI_CTRL_GO_BSY
;

63 if(
ªadback_
) {

64 
	`•if_waô
();

65  
•if_ªgs
->
txrx0
;

69 
	}
}

	@firmware/usrp2/usrp2p/u2p_init.c

18 
	~"u2p_öô.h
"

19 
	~"i2c.h
"

20 
	~"ëhî√t.h
"

22 
	$u2p_öô
(){

24 
boﬁ
 
ß„_fw
 = 
	`föd_ß„_boŸed_Êag
();

25 
	`£t_ß„_boŸed_Êag
(0);

26 i‡(
ß„_fw
) {

27 
	`ëh_addrs_£t_deÁu…
();

29 
	}
}

	@firmware/usrp2/usrp2p/u2p_init.h

18 
u2p_öô
();

	@firmware/usrp2/usrp2p/udp_fw_update.c

20 
	~<√t_comm⁄.h
>

21 
	~"mem‹y_m≠.h
"

22 
	~"u§p2/fw_comm⁄.h
"

23 
	~"•i.h
"

24 
	~"•i_Êash.h
"

25 
	~<n⁄°dio.h
>

26 
	~<°rög.h
>

27 
	~"ëhî√t.h
"

28 
	~"udp_fw_upd©e.h
"

29 
	~"xûöx_s3_iˇp.h
"

30 
	~"i2c.h
"

32 
uöt16_t
 
	$gë_hw_ªv
() {

33 
uöt16_t
 
tmp
;

34 
	`ì¥om_ªad
(
USRP2_I2C_ADDR_MBOARD
, 
USRP2_EE_MBOARD_REV
, &
tmp
, (tmp));

35  
tmp
;

36 
	}
}

38 
•i_Êash_async_°©e_t
 
	g•i_Êash_async_°©e
;

41 
	$h™dÀ_udp_fw_upd©e_∑ckë
(
sockë_addªss
 
§c
, sockë_addªs†
d°
,

42 *
∑ylﬂd
, 
∑ylﬂd_Àn
) {

44 c⁄° 
u§p2_fw_upd©e_d©a_t
 *
upd©e_d©a_ö
 = (u§p2_fw_upd©e_d©a_à*Ë
∑ylﬂd
;

46 
u§p2_fw_upd©e_d©a_t
 
upd©e_d©a_out
;

47 
u§p2_fw_upd©e_id_t
 
upd©e_d©a_ö_id
 = 
upd©e_d©a_ö
->
id
;

58 i‡(
∑ylﬂd_Àn
 < (
u§p2_fw_upd©e_d©a_t
)){

59 
	`¥ötf
("!Error in updateÖacket handler: ExpectedÖayloadÜength %d, but got %d\n",

60 ()(
u§p2_fw_upd©e_d©a_t
), 
∑ylﬂd_Àn


62 
upd©e_d©a_ö_id
 = 
USRP2_FW_UPDATE_ID_WAT
;

65 
upd©e_d©a_ö_id
) {

66 
USRP2_FW_UPDATE_ID_OHAI_LOL
:

67 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_OHAI_OMG
;

68 
	`mem˝y
(&
upd©e_d©a_out
.
d©a
.
ù_addr
, (*)
	`gë_ù_addr
(), (ip_addr));

70 
§_rx_˘æ0
->
˛ór
 = 1;

71 
§_rx_˘æ1
->
˛ór
 = 1;

72 
§_tx_˘æ
->
cyc_≥r_up
 = 0;

75 
USRP2_FW_UPDATE_ID_WATS_TEH_FLASH_INFO_LOL
:

76 
upd©e_d©a_out
.
d©a
.
Êash_öfo_¨gs
.
£˘‹_size_byãs
 = 
	`•i_Êash_£˘‹_size
();

77 
upd©e_d©a_out
.
d©a
.
Êash_öfo_¨gs
.
mem‹y_size_byãs
 = 
	`•i_Êash_mem‹y_size
();

78 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_HERES_TEH_FLASH_INFO_OMG
;

81 
USRP2_FW_UPDATE_ID_I_CAN_HAS_HW_REV_LOL
:

82 
upd©e_d©a_out
.
d©a
.
hw_ªv
 = (
uöt32_t
Ë
	`gë_hw_ªv
();

83 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_HERES_TEH_HW_REV_OMG
;

86 
USRP2_FW_UPDATE_ID_ERASE_TEH_FLASHES_LOL
:

87 
	`•i_Êash_async_îa£_°¨t
(&
•i_Êash_async_°©e
, 
upd©e_d©a_ö
->
d©a
.
Êash_¨gs
.
Êash_addr
, upd©e_d©a_ö->d©a.Êash_¨gs.
Àngth
);

88 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_ERASING_TEH_FLASHES_OMG
;

91 
USRP2_FW_UPDATE_ID_R_U_DONE_ERASING_LOL
:

94 if(
	`•i_Êash_async_îa£_pﬁl
(&
•i_Êash_async_°©e
)Ë
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_IM_DONE_ERASING_OMG
;

95 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_NOPE_NOT_DONE_ERASING_OMG
;

98 
USRP2_FW_UPDATE_ID_WRITE_TEH_FLASHES_LOL
:

101 
	`•i_Êash_¥ogøm
(
upd©e_d©a_ö
->
d©a
.
Êash_¨gs
.
Êash_addr
, upd©e_d©a_ö->d©a.Êash_¨gs.
Àngth
, update_data_in->data.flash_args.data);

102 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_WROTE_TEH_FLASHES_OMG
;

105 
USRP2_FW_UPDATE_ID_READ_TEH_FLASHES_LOL
:

106 
	`•i_Êash_ªad
(
upd©e_d©a_ö
->
d©a
.
Êash_¨gs
.
Êash_addr
, upd©e_d©a_ö->d©a.Êash_¨gs.
Àngth
, 
upd©e_d©a_out
.data.flash_args.data);

107 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_KK_READ_TEH_FLASHES_OMG
;

110 
USRP2_FW_UPDATE_ID_RESET_MAH_COMPUTORZ_LOL
:

112 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_RESETTIN_TEH_COMPUTORZ_OMG
;

114 
	`iˇp_ªlﬂd_Âga
(0);

121 
upd©e_d©a_out
.
id
 = 
USRP2_FW_UPDATE_ID_WAT
;

123 
	`£nd_udp_pkt
(
USRP2_UDP_UPDATE_PORT
, 
§c
, &
upd©e_d©a_out
, (update_data_out));

124 
	}
}

	@firmware/usrp2/usrp2p/xilinx_s3_icap.c

27 
	~<xûöx_s3_iˇp.h
>

28 
	~<mem‹y_m≠.h
>

29 
	~<•i_Êash_¥iv©e.h
>

33 
ölöe
 

34 
	$sw≠8
(
x
)

36 
r
 = 0;

37 
r
 |(
x
 >> 7) & 0x01;

38 
r
 |(
x
 >> 5) & 0x02;

39 
r
 |(
x
 >> 3) & 0x04;

40 
r
 |(
x
 >> 1) & 0x08;

42 
r
 |(
x
 << 1) & 0x10;

43 
r
 |(
x
 << 3) & 0x20;

44 
r
 |(
x
 << 5) & 0x40;

45 
r
 |(
x
 << 7) & 0x80;

47  
r
;

48 
	}
}

51 
	$wr_iˇp
(
uöt8_t
 
x
)

53 
iˇp_ªgs
->
iˇp
 = 
	`sw≠8
(
x
);

54 
	}
}

56 
uöt8_t


57 
	$rd_iˇp
()

59  
	`sw≠8
(
iˇp_ªgs
->
iˇp
);

60 
	}
}

64 
	$iˇp_ªlﬂd_Âga
(
uöt32_t
 
Êash_addªss
)

67 
uöt32_t
 
i
;

68 
uöt8_t
 
c
[4];

69 } 
t
;

70 
t
.
i
 = 
Êash_addªss
;

74 
t
.
c
[0] = 
FAST_READ_CMD
;

79 
	`wr_iˇp
(0xff);

80 
	`wr_iˇp
(0xff);

81 
	`wr_iˇp
(0xAA);

82 
	`wr_iˇp
(0x99);

83 
	`wr_iˇp
(0x32);

84 
	`wr_iˇp
(0x61);

85 
	`wr_iˇp
(
t
.
c
[2]);

86 
	`wr_iˇp
(
t
.
c
[3]);

87 
	`wr_iˇp
(0x32);

88 
	`wr_iˇp
(0x81);

89 
	`wr_iˇp
(
t
.
c
[0]);

90 
	`wr_iˇp
(
t
.
c
[1]);

91 
	`wr_iˇp
(0x30);

92 
	`wr_iˇp
(0xA1);

93 
	`wr_iˇp
(0x00);

94 
	`wr_iˇp
(0x0E);

95 
	`wr_iˇp
(0x20);

96 
	`wr_iˇp
(0x00);

97 
	`wr_iˇp
(0x20);

98 
	`wr_iˇp
(0x00);

99 
	}
}

	@firmware/usrp2/usrp2p/xilinx_s3_icap.h

19 #i‚de‡
INCLUDED_XILINX_S3_ICAP_H


20 
	#INCLUDED_XILINX_S3_ICAP_H


	)

22 
	~<°döt.h
>

25 
wr_iˇp
(
uöt8_t
 
x
);

26 
uöt8_t
 
rd_iˇp
();

34 
iˇp_ªlﬂd_Âga
(
uöt32_t
 
Êash_addªss
);

	@firmware/usrp3/include/chinch.h

17 #i‚de‡
INCLUDED_CHINCH_H


18 
	#INCLUDED_CHINCH_H


	)

20 
	~<wb_utûs.h
>

21 
	~<°dboﬁ.h
>

22 
	~<¥ötf.h
>

24 
	#STATUS_CHAIN
(
x
, 
°©us
Ëi‡(°©usË°©u†(x)

	)

25 
	#STATUS_MERGE
(
x
, 
°©us
Ë°©u†&(x)

	)

26 
	#STATUS_CHAIN_DBG
(
x
, 
°©us
Ë
	`STATUS_CHAIN
(x, sètus); 
	`¥ötf
("%s: %s\n", #x, sètus?"suc˚eded":"Áûed!")

	)

30 c⁄° 
uöt32_t
 
	gCHINCH_DEFAULT_XACT_TIMEOUT
 = 32768;

31 c⁄° 
uöt32_t
 
	gCHINCH_FLASH_MAX_BUF_WRITES
 = 32;

36 
boﬁ
 
chöch_poke
(c⁄° 
uöt32_t
 
addr
, c⁄° uöt32_à
d©a
, boﬁ 
hÆf_w‹d
, uöt32_à
timeout
);

37 
boﬁ
 
chöch_≥ek
(c⁄° 
uöt32_t
 
addr
, uöt32_t* 
d©a
, boﬁ 
hÆf_w‹d
, uöt32_à
timeout
);

39 
ölöe
 
boﬁ
 
	$chöch_poke32
(c⁄° 
uöt32_t
 
addr
, c⁄° uöt32_à
d©a
) {

40  
	`chöch_poke
(
addr
, 
d©a
, 
Ál£
 , 
CHINCH_DEFAULT_XACT_TIMEOUT
);

41 
	}
}

42 
ölöe
 
boﬁ
 
	$chöch_poke16
(c⁄° 
uöt32_t
 
addr
, c⁄° uöt32_à
d©a
) {

43  
	`chöch_poke
(
addr
, 
d©a
, 
åue
 , 
CHINCH_DEFAULT_XACT_TIMEOUT
);

44 
	}
}

45 
ölöe
 
boﬁ
 
	$chöch_≥ek32
(c⁄° 
uöt32_t
 
addr
, uöt32_t* 
d©a
) {

46  
	`chöch_≥ek
(
addr
, 
d©a
, 
Ál£
 , 
CHINCH_DEFAULT_XACT_TIMEOUT
);

47 
	}
}

48 
ölöe
 
boﬁ
 
	$chöch_≥ek16
(c⁄° 
uöt32_t
 
addr
, uöt32_t* 
d©a
) {

49  
	`chöch_≥ek
(
addr
, 
d©a
, 
åue
 , 
CHINCH_DEFAULT_XACT_TIMEOUT
);

50 
	}
}

55 
boﬁ
 
chöch_Êash_öô
();

56 
chöch_Êash_˛ónup
();

57 
boﬁ
 
chöch_Êash_£À˘_£˘‹
(
uöt32_t
 
£˘‹
);

58 
boﬁ
 
chöch_Êash_îa£_£˘‹
();

59 
boﬁ
 
chöch_Êash_ªad_buf
(
uöt32_t
 
off£t
, 
uöt16_t
* 
buf
, uöt32_à
size
);

60 
boﬁ
 
chöch_Êash_wrôe_buf
(
uöt32_t
 
off£t
, 
uöt16_t
* 
buf
, uöt32_à
size
);

62 
ölöe
 
boﬁ
 
	$chöch_Êash_ªad
(
uöt32_t
 
off£t
, 
uöt16_t
* 
d©a
) {

63  
	`chöch_Êash_ªad_buf
(
off£t
, 
d©a
, 1);

64 
	}
}

65 
ölöe
 
boﬁ
 
	$chöch_Êash_wrôe
(
uöt32_t
 
off£t
, 
uöt16_t
 
d©a
) {

66  
	`chöch_Êash_wrôe_buf
(
off£t
, &
d©a
, 1);

67 
	}
}

72 
uöt8_t
 
	tc⁄fig_°©us_t
;

73 c⁄° 
c⁄fig_°©us_t
 
	gCHINCH_CONFIG_RUNNING
 = 0;

74 c⁄° 
c⁄fig_°©us_t
 
	gCHINCH_CONFIG_DISABLED
 = 1;

75 c⁄° 
c⁄fig_°©us_t
 
	gCHINCH_CONFIG_COMPLETED
 = 2;

76 c⁄° 
c⁄fig_°©us_t
 
	gCHINCH_CONFIG_ERROR
 = 3;

78 
chöch_°¨t_c⁄fig
();

79 
c⁄fig_°©us_t
 
chöch_gë_c⁄fig_°©us
();

85 
uöt8_t
 
	tpcõ_xa˘_size_t
;

86 c⁄° 
pcõ_xa˘_size_t
 
	gPCIE_XACT_32_BIT
 = 0;

87 c⁄° 
pcõ_xa˘_size_t
 
	gPCIE_XACT_16_BIT
 = 1;

89 
uöt8_t
 
	tpcõ_xa˘_t
;

90 c⁄° 
pcõ_xa˘_t
 
	gPCIE_XACT_ERROR
 = 0;

91 c⁄° 
pcõ_xa˘_t
 
	gPCIE_XACT_READ
 = 1;

92 c⁄° 
pcõ_xa˘_t
 
	gPCIE_XACT_WRITE
 = 2;

94 
	$boﬁ
 (*
	tpcõ_ªgi°î_xa˘_ª•⁄dî_t
)(
	tuöt32_t
 
	tª•⁄£
, uöt32_à
	ttimeout
);

98 
pcõ_xa˘_t
 
ty≥
;

99 
uöt32_t
 
addr
;

100 
uöt32_t
 
d©a
;

101 
pcõ_xa˘_size_t
 
size
;

102 
pcõ_ªgi°î_xa˘_ª•⁄dî_t
 
ª•⁄d
;

103 } 
	tpcõ_ªgi°î_xa˘_t
;

105 
boﬁ
 
	`check_pcõ_u£r_ªgp‹t
(
pcõ_ªgi°î_xa˘_t
** 
xa˘_öfo_hdl
);

106 
boﬁ
 
	`f‹w¨d_pcõ_u£r_xa˘_to_wb
();

	@firmware/usrp3/include/cron.h

18 #i‚de‡
INCLUDED_CRON_H


19 
	#INCLUDED_CRON_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

24 
	#CRON_MAX_JOBS
 4

	)

27 
	mSEC
 = 1, 
	mMILLISEC
 = 1000, 
	mMICROSEC
 = 1000000

28 } 
	t¸⁄_time_unô_t
;

30 
uöt32_t
 (*
	t¸⁄_cou¡î_„tchî_t
)();

35 
¸⁄_öô
(c⁄° 
¸⁄_cou¡î_„tchî_t
 
„tch_cou¡î
, 
uöt32_t
 
cou¡î_‰eq
);

40 
uöt32_t
 
¸⁄_gë_ticks
();

45 
uöt32_t
 
gë_ñ≠£d_time
(uöt32_à
°¨t_ticks
, uöt32_à
°›_ticks
, 
¸⁄_time_unô_t
 
unô
);

51 
¶ìp_ticks
(
uöt32_t
 
ticks
);

57 
¶ìp_us
(
uöt32_t
 
duøti⁄
);

63 
¶ìp_ms
(
uöt32_t
 
duøti⁄
);

68 
¸⁄_job_öô
(
uöt32_t
 
job_id
, uöt32_à
öãrvÆ_ms
);

73 
boﬁ
 
¸⁄_job_run_due
(
uöt32_t
 
job_id
);

	@firmware/usrp3/include/ethernet.h

20 #i‚de‡
INCLUDED_ETHERNET_H


21 
	#INCLUDED_ETHERNET_H


	)

23 
	~<°döt.h
>

24 
	~<°ddef.h
>

25 
	~<°dboﬁ.h
>

27 (*
	tëhî√t_lök_ch™ged_ˇŒback_t
)(
	tëhnum
, 
	t•ìd
);

29 
	#MDIO_PORT
 4

	)

34 
	`ëhî√t_öô
(c⁄° 
uöt32_t
 
ëh
);

39 
	`ëhî√t_nöãrÁ˚s
();

42 
	`dump_mdio_ªgs
(c⁄° 
uöt8_t
 
ëh
, 
uöt32_t
 
mdio_p‹t
);

47 
	`pﬁl_sÂp_°©us
(c⁄° 
uöt32_t
 
ëh
);

50 
boﬁ
 
	`ëhî√t_gë_lök_up
(c⁄° 
uöt32_t
 
ëh
);

	@firmware/usrp3/include/ethertype.h

18 #i‚de‡
INCLUDED_ETHERTYPE_H


19 
	#INCLUDED_ETHERTYPE_H


	)

23 
	#ETHERTYPE_IPV4
 0x0800

	)

24 
	#ETHERTYPE_ARP
 0x0806

	)

	@firmware/usrp3/include/flash/spi_flash.h

18 #i‚de‡
INCLUDED_SPI_FLASH


19 
	#INCLUDED_SPI_FLASH


	)

21 
	~<wb_•i.h
>

26 
uöt32_t
 
	m∑ge_size
;

27 
uöt32_t
 
	m£˘‹_size
;

28 
uöt32_t
 
	mnum_£˘‹s
;

29 c⁄° 
wb_•i_¶ave_t
* 
	mbus
;

30 } 
	t•i_Êash_dev_t
;

33 
	$uöt16_t
 (*
	t•if_ªad_id_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
);

34 (*
	t•if_ªad_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
, 
	tuöt32_t
 
	toff£t
, *
	tbuf
, uöt32_à
	tnum_byãs
);

35 
	$boﬁ
 (*
	t•if_îa£_£˘‹_di•©ch_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
, 
	tuöt32_t
 
	toff£t
);

36 
	$boﬁ
 (*
	t•if_îa£_£˘‹_commô_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
, 
	tuöt32_t
 
	toff£t
);

37 
	$boﬁ
 (*
	t•if_îa£_£˘‹_busy_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
);

38 
	$boﬁ
 (*
	t•if_wrôe_∑ge_di•©ch_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
, 
	tuöt32_t
 
	toff£t
, c⁄° *
	tbuf
, uöt32_à
	tnum_byãs
);

39 
	$boﬁ
 (*
	t•if_wrôe_∑ge_commô_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
, 
	tuöt32_t
 
	toff£t
, c⁄° *
	tbuf
, uöt32_à
	tnum_byãs
);

40 
	$boﬁ
 (*
	t•if_wrôe_∑ge_busy_‚_t
)(c⁄° 
	t•i_Êash_dev_t
* 
	tÊash
);

44 
•if_ªad_id_‚_t
 
ªad_id
;

45 
•if_ªad_‚_t
 
ªad
;

46 
•if_îa£_£˘‹_di•©ch_‚_t
 
îa£_£˘‹_di•©ch
;

47 
•if_îa£_£˘‹_commô_‚_t
 
îa£_£˘‹_commô
;

48 
•if_îa£_£˘‹_busy_‚_t
 
îa£_£˘‹_busy
;

49 
•if_wrôe_∑ge_di•©ch_‚_t
 
wrôe_∑ge_di•©ch
;

50 
•if_wrôe_∑ge_commô_‚_t
 
wrôe_∑ge_commô
;

51 
•if_wrôe_∑ge_busy_‚_t
 
wrôe_∑ge_busy
;

52 } 
	t•i_Êash_›s_t
;

55 
IDLE
, 
WRITE_IN_PROGRESS
, 
ERASE_IN_PROGRESS


56 } 
	t•i_Êash_°©e_t
;

61 c⁄° 
•i_Êash_dev_t
* 
devi˚
;

62 c⁄° 
•i_Êash_›s_t
* 
›s
;

63 
•i_Êash_°©e_t
 
°©e
;

64 
uöt32_t
 
œ°_off£t
;

65 
uöt16_t
 
id
;

66 } 
	t•i_Êash_£ssi⁄_t
;

71 
	`•if_öô
(
•i_Êash_£ssi⁄_t
* 
Êash
, c⁄° 
•i_Êash_dev_t
* 
devi˚
, c⁄° 
•i_Êash_›s_t
* 
›s
);

77 
	`•if_ªad_sync
(c⁄° 
•i_Êash_£ssi⁄_t
* 
Êash
, 
uöt32_t
 
off£t
, *
buf
, uöt32_à
num_byãs
);

83 
boﬁ
 
	`•if_îa£_£˘‹_sync
(c⁄° 
•i_Êash_£ssi⁄_t
* 
Êash
, 
uöt32_t
 
off£t
);

89 
boﬁ
 
	`•if_wrôe_∑ge_sync
(c⁄° 
•i_Êash_£ssi⁄_t
* 
Êash
, 
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
);

	@firmware/usrp3/include/flash/spif_spsn_s25flxx.h

18 #i‚de‡
INCLUDED_SPIF_SPSN_S25FLXX_H


19 
	#INCLUDED_SPIF_SPSN_S25FLXX_H


	)

21 
	~<Êash/•i_Êash.h
>

23 c⁄° 
•i_Êash_›s_t
* 
•if_•¢_s25Êxx_›î©i⁄s
();

25 
uöt16_t
 
•if_•¢_s25Êxx_ªad_id
(c⁄° 
•i_Êash_dev_t
* 
Êash
);

27 
•if_•¢_s25Êxx_ªad
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
, *
buf
, uöt32_à
num_byãs
);

29 
boﬁ
 
•if_•¢_s25Êxx_îa£_£˘‹_di•©ch
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
);

31 
boﬁ
 
•if_•¢_s25Êxx_îa£_£˘‹_commô
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
);

33 
boﬁ
 
•if_•¢_s25Êxx_wrôe_∑ge_di•©ch
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
);

35 
boﬁ
 
•if_•¢_s25Êxx_wrôe_∑ge_commô
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
);

37 
boﬁ
 
•if_•¢_s25Êxx_devi˚_busy
(c⁄° 
•i_Êash_dev_t
* 
Êash
);

	@firmware/usrp3/include/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

27 
	#ARPHRD_NETROM
 0

	)

28 
	#ARPHRD_ETHER
 1

	)

29 
	#ARPHRD_EETHER
 2

	)

30 
	#ARPHRD_AX25
 3

	)

31 
	#ARPHRD_PRONET
 4

	)

32 
	#ARPHRD_CHAOS
 5

	)

33 
	#ARPHRD_IEEE802
 6

	)

34 
	#ARPHRD_ARCNET
 7

	)

35 
	#ARPHRD_APPLETLK
 8

	)

36 
	#ARPHRD_DLCI
 15

	)

37 
	#ARPHRD_ATM
 19

	)

38 
	#ARPHRD_METRICOM
 23

	)

39 
	#ARPHRD_IEEE1394
 24

	)

40 
	#ARPHRD_EUI64
 27

	)

41 
	#ARPHRD_INFINIBAND
 32

	)

44 
	#ARPHRD_SLIP
 256

	)

45 
	#ARPHRD_CSLIP
 257

	)

46 
	#ARPHRD_SLIP6
 258

	)

47 
	#ARPHRD_CSLIP6
 259

	)

48 
	#ARPHRD_RSRVD
 260

	)

49 
	#ARPHRD_ADAPT
 264

	)

50 
	#ARPHRD_ROSE
 270

	)

51 
	#ARPHRD_X25
 271

	)

52 
	#ARPHRD_HWX25
 272

	)

53 
	#ARPHRD_CAN
 280

	)

54 
	#ARPHRD_PPP
 512

	)

55 
	#ARPHRD_CISCO
 513

	)

56 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

57 
	#ARPHRD_LAPB
 516

	)

58 
	#ARPHRD_DDCMP
 517

	)

59 
	#ARPHRD_RAWHDLC
 518

	)

61 
	#ARPHRD_TUNNEL
 768

	)

62 
	#ARPHRD_TUNNEL6
 769

	)

63 
	#ARPHRD_FRAD
 770

	)

64 
	#ARPHRD_SKIP
 771

	)

65 
	#ARPHRD_LOOPBACK
 772

	)

66 
	#ARPHRD_LOCALTLK
 773

	)

67 
	#ARPHRD_FDDI
 774

	)

68 
	#ARPHRD_BIF
 775

	)

69 
	#ARPHRD_SIT
 776

	)

70 
	#ARPHRD_IPDDP
 777

	)

71 
	#ARPHRD_IPGRE
 778

	)

72 
	#ARPHRD_PIMREG
 779

	)

73 
	#ARPHRD_HIPPI
 780

	)

74 
	#ARPHRD_ASH
 781

	)

75 
	#ARPHRD_ECONET
 782

	)

76 
	#ARPHRD_IRDA
 783

	)

78 
	#ARPHRD_FCPP
 784

	)

79 
	#ARPHRD_FCAL
 785

	)

80 
	#ARPHRD_FCPL
 786

	)

81 
	#ARPHRD_FCFABRIC
 787

	)

83 
	#ARPHRD_IEEE802_TR
 800

	)

84 
	#ARPHRD_IEEE80211
 801

	)

85 
	#ARPHRD_IEEE80211_PRISM
 802

	)

86 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

88 
	#ARPHRD_VOID
 0xFFFF

	)

89 
	#ARPHRD_NONE
 0xFFFE

	)

92 
	#ARPOP_REQUEST
 1

	)

93 
	#ARPOP_REPLY
 2

	)

94 
	#ARPOP_RREQUEST
 3

	)

95 
	#ARPOP_RREPLY
 4

	)

96 
	#ARPOP_InREQUEST
 8

	)

97 
	#ARPOP_InREPLY
 9

	)

98 
	#ARPOP_NAK
 10

	)

102 
	#ATF_COM
 0x02

	)

103 
	#ATF_PERM
 0x04

	)

104 
	#ATF_PUBL
 0x08

	)

105 
	#ATF_USETRAILERS
 0x10

	)

106 
	#ATF_NETMASK
 0x20

	)

108 
	#ATF_DONTPUB
 0x40

	)

110 
	t__be16
;

115 
	s¨phdr


117 
__be16
 
	m¨_hrd
;

118 
__be16
 
	m¨_¥o
;

119 
	m¨_h 
;

120 
	m¨_∂n
;

121 
__be16
 
	m¨_›
;

127 
	m¨_sha
[
ETH_ALEN
];

128 
	m¨_sù
[4];

129 
	m¨_tha
[
ETH_ALEN
];

130 
	m¨_tù
[4];

138 
	s¨p_ëh_ùv4


140 
__be16
 
	m¨_hrd
;

141 
__be16
 
	m¨_¥o
;

142 
	m¨_h 
;

143 
	m¨_∂n
;

144 
__be16
 
	m¨_›
;

146 
	m¨_sha
[6];

147 
	m¨_sù
[4];

148 
	m¨_tha
[6];

149 
	m¨_tù
[4];

	@firmware/usrp3/include/link_state_route_proto.h

4 #i‚de‡
INCLUDED_LINK_STATE_ROUTE_PROTO_H


5 
	#INCLUDED_LINK_STATE_ROUTE_PROTO_H


	)

7 
	~<°döt.h
>

8 
	~<°ddef.h
>

9 
	~<°dboﬁ.h
>

10 
	~<lwù/ù_addr.h
>

15 
lök_°©e_rouã_¥Ÿo_öô
();

21 
lök_°©e_rouã_¥Ÿo_tick
();

24 
lök_°©e_rouã_¥Ÿo_upd©e
(c⁄° 
uöt8_t
 
ëhno
);

27 
lök_°©e_rouã_¥Ÿo_Êood
(c⁄° 
uöt8_t
 
ëhno
);

32 
lök_°©e_rouã_¥Ÿo_upd©e_cy˛e_ˇche
(c⁄° 
uöt8_t
 
ëhno
);

39 
boﬁ
 
lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e_ˇched
(c⁄° 
uöt8_t
 
ëh_§c
, c⁄° uöt8_à
ëh_d°
);

42 
boﬁ
 
lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e
(c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
);

46 
ù_addr
 
	mnode
;

47 
ù_addr
 
	mnb‹
;

48 } 
	tls_node_m≠pög_t
;

54 c⁄° 
ls_node_m≠pög_t
 *
lök_°©e_rouã_gë_node_m≠pög
(
size_t
 *
Àngth
);

	@firmware/usrp3/include/print_addrs.h

3 #i‚de‡
INCLUDED_PRINT_ADDRS_H


4 
	#INCLUDED_PRINT_ADDRS_H


	)

6 *
mac_addr_to_°r_r
(c⁄° *
addr
, *
°r
);

7 *
ù_addr_to_°r_r
(c⁄° *
addr
, *
°r
);

9 *
mac_addr_to_°r
(c⁄° *
addr
);

10 *
ù_addr_to_°r
(c⁄° *
addr
);

	@firmware/usrp3/include/printf.h

91 #i‚de‡
__TFP_PRINTF__


92 
	#__TFP_PRINTF__


	)

94 
	~<°d¨g.h
>

96 
öô_¥ötf
(* 
puç
,(*
putf
) (*,));

98 
	`tÂ_¥ötf
(*
fmt
, ...);

99 
	`tÂ_•rötf
(* 
s
,*
fmt
, ...);

101 
	`tÂ_f‹m©
(* 
puç
,(*
putf
Ë(*,),*
fmt
, 
va_li°
 
va
);

103 
	#¥ötf
 
tÂ_¥ötf


	)

104 
	#•rötf
 
tÂ_•rötf


	)

105 
	#PRINTF_LONG_SUPPORT
 1

	)

	@firmware/usrp3/include/stdint.h

19 #i‚de‡
INCLUDED_STDINT_H


20 
	#INCLUDED_STDINT_H


	)

22 sig√d 
	töt8_t
;

23 
	tuöt8_t
;

24 
	töt16_t
;

25 
	tuöt16_t
;

26 
	töt32_t
;

27 
	tuöt32_t
;

28 
	töt64_t
;

29 
	tuöt64_t
;

31 
	töçå_t
;

32 
	tuöçå_t
;

	@firmware/usrp3/include/trace.h

18 #i‚de‡
INCLUDED_TRACE_H


19 
	#INCLUDED_TRACE_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

23 
	~<¥ötf.h
>

40 
	mERROR
 = 10,

41 
	mWARN
 = 11,

42 
	mINFO
 = 12,

44 
	mDEBUG
 = 20,

45 } 
	tåa˚_Àvñ_t
;

47 
ölöe
 
	$_åa˚_ty≥check_c⁄v
(
åa˚_Àvñ_t
 
lvl
) {

48  ()
lvl
;

49 
	}
}

51 
	#UHD_FW_PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#UHD_FW_BEAUTIFY_LVL
(
lvl
Ë"[" #lv»"] "

	)

67 #ifde‡
UHD_FW_TRACE_LEVEL


68 
	#UHD_FW_TRACE
(
lvl
, 
fmt
) \

69 i‡(
UHD_FW_TRACE_LEVEL
 >
	`_åa˚_ty≥check_c⁄v
(
lvl
)Ë
	`UHD_FW_PRINTF
(
	`UHD_FW_BEAUTIFY_LVL
÷vlË
fmt
 "\r\n");

	)

70 
	#UHD_FW_TRACE_FSTR
(
lvl
, 
fmt
, ...) \

71 i‡(
UHD_FW_TRACE_LEVEL
 >
	`_åa˚_ty≥check_c⁄v
(
lvl
)Ë
	`UHD_FW_PRINTF
(
	`UHD_FW_BEAUTIFY_LVL
÷vlË
fmt
 "\r\n", 
__VA_ARGS__
);

	)

72 
	#UHD_FW_TRACE_SHORT
(
lvl
, 
fmt
) \

73 i‡(
UHD_FW_TRACE_LEVEL
 >
	`_åa˚_ty≥check_c⁄v
(
lvl
)Ë
	`UHD_FW_PRINTF
(
fmt
);

	)

74 
	#UHD_FW_TRACE_FSTR_SHORT
(
lvl
, 
fmt
, ...) \

75 i‡(
UHD_FW_TRACE_LEVEL
 >
	`_åa˚_ty≥check_c⁄v
(
lvl
)Ë
	`UHD_FW_PRINTF
(
fmt
, 
__VA_ARGS__
);

	)

77 
	#UHD_FW_TRACE
(
lvl
, 
fmt
Ë;

	)

78 
	#UHD_FW_TRACE_FSTR
(
lvl
, 
fmt
, ...Ë;

	)

79 
	#UHD_FW_TRACE_SHORT
(
lvl
, 
fmt
Ë;

	)

80 
	#UHD_FW_TRACE_FSTR_SHORT
(
lvl
, 
fmt
, ...Ë;

	)

	@firmware/usrp3/include/u3_net_stack.h

4 #i‚de‡
INCLUDED_U3_NET_STACK_H


5 
	#INCLUDED_U3_NET_STACK_H


	)

7 
	~<°döt.h
>

8 
	~<°ddef.h
>

9 
	~<°dboﬁ.h
>

10 
	~<wb_pkt_iÁ˚64.h
>

14 
	~<lwù/ù_addr.h
>

15 
	~<lwù/ù.h
>

16 
	~<lwù/udp.h
>

17 
	~<lwù/icmp.h
>

18 
	~<if_¨p.h
>

19 
	~<ëhîty≥.h
>

23 
uöt8_t
 
	maddr
[6];

24 } 
	tëh_mac_addr_t
;

28 
uöt8_t
 
	mëhno
;

29 
uöt8_t
 
	m∑d
[5];

30 
ëh_mac_addr_t
 
	md°
;

31 
ëh_mac_addr_t
 
	m§c
;

32 
uöt16_t
 
	mëhîty≥
;

33 } 
	t∑dded_ëh_hdr_t
;

37 
u3_√t_°ack_öô
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
);

39 
u3_√t_°ack_öô_ëh
(c⁄° 
uöt8_t
 
ëhno
, c⁄° 
ëh_mac_addr_t
 *
mac
, c⁄° 
ù_addr
 *
ù
, c⁄° ù_add∏*
sub√t
);

41 c⁄° 
ù_addr
 *
u3_√t_°ack_gë_ù_addr
(c⁄° 
uöt8_t
 
ëhno
);

43 c⁄° 
ù_addr
 *
u3_√t_°ack_gë_sub√t
(c⁄° 
uöt8_t
 
ëhno
);

45 c⁄° 
ù_addr
 *
u3_√t_°ack_gë_bˇ°
(c⁄° 
uöt8_t
 
ëhno
);

47 c⁄° 
ëh_mac_addr_t
 *
u3_√t_°ack_gë_mac_addr
(c⁄° 
uöt8_t
 
ëhno
);

49 
uöt32_t
 
u3_√t_°ack_gë_°©_cou¡s
(c⁄° 
uöt8_t
 
ëhno
);

53 (*
	tu3_√t_°ack_udp_h™dÀr_t
)(

54 c⁄° 
	tuöt8_t
,

55 c⁄° 
	tù_addr
 *, const ip_addr *,

56 c⁄° 
	tuöt16_t
, const uint16_t,

57 c⁄° *, c⁄° 
	tsize_t


60 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(

61 c⁄° 
uöt16_t
 
p‹t
,

62 c⁄° 
u3_√t_°ack_udp_h™dÀr_t
 
h™dÀr


65 
	`u3_√t_°ack_£nd_udp_pkt
(

66 c⁄° 
uöt8_t
 
ëhno
,

67 c⁄° 
ù_addr
 *
d°
,

68 c⁄° 
uöt16_t
 
§c_p‹t
,

69 c⁄° 
uöt16_t
 
d°_p‹t
,

70 c⁄° *
buff
,

71 c⁄° 
size_t
 
num_byãs


76 (*
	tu3_√t_°ack_icmp_h™dÀr_t
)(

77 c⁄° 
	tuöt8_t
,

78 c⁄° 
	tù_addr
 *, const ip_addr *,

79 c⁄° 
	tuöt16_t
, const uint16_t,

80 c⁄° *, c⁄° 
	tsize_t


83 
	`u3_√t_°ack_ªgi°î_icmp_h™dÀr
(

84 c⁄° 
uöt8_t
 
ty≥
,

85 c⁄° 
uöt8_t
 
code
,

86 c⁄° 
u3_√t_°ack_icmp_h™dÀr_t
 
h™dÀr


89 
	`u3_√t_°ack_£nd_icmp_pkt
(

90 c⁄° 
uöt8_t
 
ëhno
,

91 c⁄° 
uöt8_t
 
ty≥
,

92 c⁄° 
uöt8_t
 
code
,

93 c⁄° 
uöt16_t
 
id
,

94 c⁄° 
uöt16_t
 
£q
,

95 c⁄° 
ù_addr
 *
d°
,

96 c⁄° *
buff
,

97 c⁄° 
size_t
 
num_byãs


102 
	`u3_√t_°ack_h™dÀ_⁄e
();

106 
	`u3_√t_°ack_£nd_¨p_ªque°
(c⁄° 
uöt8_t
 
ëhno
, c⁄° 
ù_addr
 *
addr
);

111 c⁄° 
ëh_mac_addr_t
 *
	`u3_√t_°ack_¨p_ˇche_lookup
(c⁄° 
ù_addr
 *ip_addr);

	@firmware/usrp3/include/udp_uart.h

18 #i‚de‡
INCLUDED_UDP_UART_H


19 
	#INCLUDED_UDP_UART_H


	)

21 
	~<°döt.h
>

22 
	~<°ddef.h
>

23 
	~<°dboﬁ.h
>

29 
udp_u¨t_öô
(c⁄° 
uöt32_t
 
u¨t_ba£
, c⁄° 
uöt16_t
 
udp_p‹t
);

35 
udp_u¨t_pﬁl
();

	@firmware/usrp3/include/wb_i2c.h

4 #i‚de‡
INCLUDED_WB_I2C_H


5 
	#INCLUDED_WB_I2C_H


	)

7 
	~<°döt.h
>

8 
	~<°ddef.h
>

9 
	~<°dboﬁ.h
>

11 
wb_i2c_öô
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
size_t
 
˛k_øã
);

13 
boﬁ
 
wb_i2c_ªad
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
uöt8_t
 
i2c_addr
, uöt8_à*
buf
, 
size_t
 
Àn
);

15 
boﬁ
 
wb_i2c_wrôe
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
uöt8_t
 
i2c_addr
, c⁄° uöt8_à*
buf
, 
size_t
 
Àn
);

	@firmware/usrp3/include/wb_pkt_iface64.h

4 #i‚de‡
INCLUDED_WB_PKT_IFACE64_H


5 
	#INCLUDED_WB_PKT_IFACE64_H


	)

7 
	~<°döt.h
>

8 
	~<°ddef.h
>

9 
	~<°dboﬁ.h
>

14 
uöt32_t
 
	mba£
;

15 
uöt32_t
 
	m˘æ
;

16 
uöt32_t
 
	mc⁄fig_addr
;

17 } 
	twb_pkt_iÁ˚64_c⁄fig_t
;

20 
wb_pkt_iÁ˚64_c⁄fig_t
 
wb_pkt_iÁ˚64_öô
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
size_t
 
˘æ_off£t
);

27 c⁄° *
wb_pkt_iÁ˚64_rx_åy_˛aim
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
, 
size_t
 *
num_byãs
);

32 
wb_pkt_iÁ˚64_rx_ªÀa£
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
);

37 *
wb_pkt_iÁ˚64_tx_˛aim
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
);

42 
wb_pkt_iÁ˚64_tx_submô
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
, c⁄° 
size_t
 
num_byãs
);

	@firmware/usrp3/include/wb_soft_reg.h

18 #i‚de‡
INCLUDED_SOFT_REG_H


19 
	#INCLUDED_SOFT_REG_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

23 
	~<wb_utûs.h
>

33 
uöt32_t
 
	mwr_addr
;

34 
uöt32_t
 
	mrd_addr
;

35 
uöt32_t
 
	mso·_c›y
;

36 } 
	tso·_ªg_t
;

46 
uöt8_t
 
	mnum_bôs
;

47 
uöt8_t
 
	mshi·
;

48 } 
	tso·_ªg_fõld_t
;

58 
ölöe
 
	$öôülize_ªadwrôe_so·_ªg
(
so·_ªg_t
* 
ªg
, 
uöt32_t
 
wr_addr
, uöt32_à
rd_addr
)

60 
ªg
->
wr_addr
 = wr_addr;

61 
ªg
->
rd_addr
 =Ñd_addr;

62 
ªg
->
so·_c›y
 = 0;

63 
	}
}

71 
ölöe
 
	$öôülize_wrôe⁄ly_so·_ªg
(
so·_ªg_t
* 
ªg
, 
uöt32_t
 
addr
)

73 
ªg
->
wr_addr
 = 
addr
;

74 
ªg
->
rd_addr
 = 0;

75 
ªg
->
so·_c›y
 = 0;

76 
	}
}

83 
ölöe
 
	$so·_ªg_£t
(
so·_ªg_t
* 
ªg
, c⁄° 
so·_ªg_fõld_t
 
fõld
, c⁄° 
uöt32_t
 
fõld_vÆue
)

85 c⁄° 
uöt32_t
 
mask
 = ((1<<
fõld
.
num_bôs
)-1)<<fõld.
shi·
;

86 
ªg
->
so·_c›y
 = (ªg->so·_c›y & ~
mask
Ë| ((
fõld_vÆue
 << 
fõld
.
shi·
) & mask);

87 
	}
}

92 
ölöe
 
	$so·_ªg_Êush
(c⁄° 
so·_ªg_t
* 
ªg
)

94 
	`wb_poke32
(
ªg
->
wr_addr
,Ñeg->
so·_c›y
);

95 
	}
}

100 
ölöe
 
	$so·_ªg_wrôe
(
so·_ªg_t
* 
ªg
, c⁄° 
so·_ªg_fõld_t
 
fõld
, c⁄° 
uöt32_t
 
fõld_vÆue
)

102 
	`so·_ªg_£t
(
ªg
, 
fõld
, 
fõld_vÆue
);

103 
	`so·_ªg_Êush
(
ªg
);

104 
	}
}

110 
ölöe
 
uöt32_t
 
	$so·_ªg_gë
(c⁄° 
so·_ªg_t
* 
ªg
, c⁄° 
so·_ªg_fõld_t
 
fõld
)

112 c⁄° 
uöt32_t
 
mask
 = ((1<<
fõld
.
num_bôs
)-1)<<fõld.
shi·
;

113  (
ªg
->
so·_c›y
 & 
mask
Ë>> 
fõld
.
shi·
;

114 
	}
}

119 
ölöe
 
	$so·_ªg_ª‰esh
(
so·_ªg_t
* 
ªg
)

121 i‡(
ªg
->
rd_addr
) {

122 
ªg
->
so·_c›y
 = 
	`wb_≥ek32
‘eg->
rd_addr
);

124 
	}
}

129 
ölöe
 
uöt32_t
 
	$so·_ªg_ªad
(
so·_ªg_t
* 
ªg
, c⁄° 
so·_ªg_fõld_t
 
fõld
)

131 
	`so·_ªg_ª‰esh
(
ªg
);

132  
	`so·_ªg_gë
(
ªg
, 
fõld
);

133 
	}
}

	@firmware/usrp3/include/wb_spi.h

4 #i‚de‡
INCLUDED_WB_SPI_H


5 
	#INCLUDED_WB_SPI_H


	)

7 
	~<°döt.h
>

8 
	~<°ddef.h
>

9 
	~<°dboﬁ.h
>

12 
	mWRITE
, 
	mWRITE_READ


13 } 
	twb_•i_rw_mode_t
;

16 
	mRISING
, 
	mFALLING


17 } 
	twb_•i_edge_t
;

20 * 
	mba£
;

21 
uöt32_t
 
	m¶ave_£l
;

22 
uöt32_t
 
	m˛k_div
;

23 
wb_•i_edge_t
 
	mmosi_edge
;

24 
wb_•i_edge_t
 
	mmiso_edge
;

25 
boﬁ
 
	mlsb_fú°
;

26 } 
	twb_•i_¶ave_t
;

31 
wb_•i_öô
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
);

36 
ölöe
 
wb_•i_å™ß˘
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
,

37 
wb_•i_rw_mode_t
 
rw_mode
, c⁄° * 
mosi_buf
, * 
miso_buf
, 
uöt32_t
 
Àngth
);

42 
ölöe
 
wb_•i_å™ß˘_m™_ss
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
,

43 
wb_•i_rw_mode_t
 
rw_mode
, c⁄° * 
mosi_buf
, * 
miso_buf
, 
uöt32_t
 
Àngth
);

48 
wb_•i_¶ave_£À˘
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
);

53 
wb_•i_¶ave_de£À˘
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
);

	@firmware/usrp3/include/wb_uart.h

4 #i‚de‡
INCLUDED_WB_UART_H


5 
	#INCLUDED_WB_UART_H


	)

7 
	~<°döt.h
>

8 
	~<°dboﬁ.h
>

9 
	~<°ddef.h
>

12 
wb_u¨t_öô
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
size_t
 
div
);

15 
wb_u¨t_putc
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
ch
);

18 
boﬁ
 
wb_u¨t_åy_putc
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
ch
);

21 
wb_u¨t_gëc
(c⁄° 
uöt32_t
 
ba£
);

	@firmware/usrp3/include/wb_utils.h

4 #i‚de‡
INCLUDED_WB_UTILS_H


5 
	#INCLUDED_WB_UTILS_H


	)

7 
	~<°döt.h
>

9 
	#loˇÕ¨am
 c⁄° 

	)

11 
ölöe
 
	$wb_poke32
(c⁄° 
uöt32_t
 
addr
, c⁄° uöt32_à
d©a
)

13 *((vﬁ©ûê
uöt32_t
 *)
addr
Ë
d©a
;

14 
	}
}

16 
ölöe
 
uöt32_t
 
	$wb_≥ek32
(c⁄° 
uöt32_t
 
addr
)

18 c⁄° 
uöt32_t
 
d©a
 = *((vﬁ©ûêuöt32_à*)
addr
);

19  
d©a
;

20 
	}
}

22 
	#SR_ADDR
(
ba£
, 
off£t
Ë((ba£Ë+ (off£t)*4)

	)

	@firmware/usrp3/include/xge_mac.h

2 #i‚de‡
INCLUDED_XGE_MAC_H


3 
	#INCLUDED_XGE_MAC_H


	)

5 
	#HAVE_OPENCORES_XGEMAC
 1

	)

7 #ifde‡
HAVE_OPENCORES_XGEMAC


8 
	#XGE_TX_ENABLE
 (1 << 0)

10 
	#XGE_RX_FRAG_ERR
 (1 << 8)

	)

11 
	#XGE_RX_CRC_ERR
 (1 << 7)

	)

12 
	#XGE_RX_PAUSE
 (1 << 6)

	)

13 
	#XGE_REMOTE_FAULT
 (1 << 5)

	)

14 
	#XGE_LOCAL_FAULT
 (1 << 4)

	)

15 
	#XGE_RX_UNDERFLOW
 (1 << 3)

	)

16 
	#XGE_RX_OVERFLOW
 (1 << 2)

	)

17 
	#XGE_TX_UNDERFLOW
 (1 << 1)

	)

18 
	#XGE_TX_OVERFLOW
 (1 << 0)

	)

22 
	#XGE_MDIO_CLAUSE
(
n
Ë(“ & 0x1Ë<< 12)

	)

23 
	#CLAUSE45
 1

	)

24 
	#CLAUSE22
 0

	)

25 
	#XGE_MDIO_OP
(
n
Ë(“ & 0x3Ë<< 10)

	)

26 
	#MDIO_ADDRESS
 0

	)

27 
	#MDIO_WRITE
 1

	)

28 
	#MDIO_READ
 3

	)

29 
	#MDIO_C22_WRITE
 2

	)

30 
	#MDIO_C22_READ
 1

	)

31 
	#MDIO_READ_POST
 2

	)

32 
	#XGE_MDIO_ADDR
(
n
Ë(“ & 0x1fË<< 5)

	)

33 
	#XGE_MDIO_MMD
(
n
Ë(“ & 0x1fË<< 0)

	)

	@firmware/usrp3/include/xge_phy.h

2 #i‚de‡
INCLUDED_XGE_PHY_H


3 
	#INCLUDED_XGE_PHY_H


	)

5 
	#HAVE_AEL2005_PHY
 1

	)

10 
	#XGE_MDIO_DEVICE_PMA
 1

	)

11 
	#XGE_MDIO_DEVICE_WIS
 2

	)

12 
	#XGE_MDIO_DEVICE_PCS
 3

	)

13 
	#XGE_MDIO_DEVICE_PHY_XS
 4

	)

14 
	#XGE_MDIO_DEVICE_DTE_XS
 5

	)

15 
	#XGE_MDIO_DEVICE_TC
 6

	)

20 
	#XGE_MDIO_CONTROL1
 0

	)

21 
	#XGE_MDIO_STATUS1
 1

	)

22 
	#XGE_MDIO_DEVID1
 2

	)

23 
	#XGE_MDIO_DEVID2
 3

	)

24 
	#XGE_MDIO_SPEED
 4

	)

25 
	#XGE_MDIO_DEVICES1
 5

	)

26 
	#XGE_MDIO_DEVICES2
 6

	)

27 
	#XGE_MDIO_CONTROL2
 7

	)

28 
	#XGE_MDIO_STATUS2
 8

	)

29 
	#XGE_MDIO_LANESTATUS
 24

	)

30 
	#XGE_MDIO_TESTCTRL
 25

	)

31 
	#XILINX_CORE_VERSION
 65535

	)

36 
	#XGE_MDIO_ADDR_PHY_A
 0

	)

41 
	#XGE_MDIO_ADDR_XAUI_A
 2

	)

45 
	#XGE_A
 0

	)

49 
	mSFFP_TYPE_NONE
,

50 
	mSFFP_TYPE_SR
,

51 
	mSFFP_TYPE_LR
,

52 
	mSFFP_TYPE_LRM
,

53 
	mSFFP_TYPE_TWINAX
,

54 
	mSFFP_TYPE_TWINAX_LONG
,

55 
	mSFFP_TYPE_UNKNOWN
,

56 
	mSFFP_TYPE_1000BASE_SX
,

57 
	mSFFP_TYPE_1000BASE_LX
,

58 
	mSFFP_TYPE_1000BASE_T


65 
	mMODULE_DEV_ADDR
 = (0xa0 >> 1),

66 
	mSFF_DEV_ADDR
 = (0xa2 >>1),

71 
	mSFFP_NO_CHANGE
,

72 
	mSFFP_REMOVED
,

73 
	mSFFP_INSERTED


	@firmware/usrp3/lib/chinch.c

18 
	~"chöch.h
"

20 
	#PCIE_MSG_REG_BASE
 0xFB00

	)

21 
	#PCIE_MSG_DATA_REG
 0

23 
	#PCIE_MSG_CTRL_REG
 1

25 
	#PCIE_MSG_RESP_REG
 2

26 
	#PCIE_MSG_STATUS_REG
 3

27 

	)

41 
	#PCIE_CTRL_REG_READ_RESP
 (1<<31)

	)

42 
	#PCIE_CTRL_REG_WRITE
 (1<<30)

	)

43 
	#PCIE_CTRL_REG_READ
 (1<<29)

	)

44 
	#PCIE_CTRL_REG_HALF_WORD
 (1<<28)

	)

45 
	#PCIE_CTRL_REG_ADDR_MASK
 0x000FFFFF

	)

47 
	#PCIE_STATUS_REG_READ_PENDING
 (1<<0)

	)

48 
	#PCIE_STATUS_REG_REQ_PENDING
 (1<<1)

	)

49 
	#PCIE_STATUS_REG_RESP_PENDING
 (1<<2)

	)

50 
	#PCIE_STATUS_REG_BUSY
 (1<<4)

	)

52 
	#CHINCH_FPGA_CONFIG_REG
 0x58

	)

53 
	#CHINCH_FLASH_WINDOW_REG0
 0xC0

	)

54 
	#CHINCH_FLASH_WINDOW_REG1
 0xE0

	)

55 
	#CHINCH_FLASH_2AAA_REG
 0x400

	)

56 
	#CHINCH_FLASH_5555_REG
 0x408

	)

57 
	#CHINCH_FLASH_WINDOW_BASE
 0x60000

	)

58 
	#CHINCH_FLASH_WINDOW_SIZE
 0x20000

	)

59 
	#CHINCH_FLASH_WINDOW_CONF
 0x91

	)

65 
boﬁ
 
	$chöch_poke
(

66 c⁄° 
uöt32_t
 
addr
,

67 c⁄° 
uöt32_t
 
d©a
,

68 
boﬁ
 
hÆf_w‹d
,

69 
uöt32_t
 
timeout


73 
uöt32_t
 
˘æ_w‹d
 = 0, 
i
;

74 
˘æ_w‹d
 |(
addr
 & 
PCIE_CTRL_REG_ADDR_MASK
);

75 i‡(
hÆf_w‹d
Ë
˘æ_w‹d
 |
PCIE_CTRL_REG_HALF_WORD
;

76 
˘æ_w‹d
 |
PCIE_CTRL_REG_WRITE
;

79 
i
 = 0;

80 (
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_STATUS_REG
)Ë& 
PCIE_STATUS_REG_BUSY
) != 0) {

81 i‡(++
i
 > 
timeout
Ë 
Ál£
;

85 
	`wb_poke32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_DATA_REG
), 
d©a
);

86 
	`wb_poke32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_CTRL_REG
), 
˘æ_w‹d
);

88  
åue
;

89 
	}
}

91 
boﬁ
 
	$chöch_≥ek
(

92 c⁄° 
uöt32_t
 
addr
,

93 
uöt32_t
* 
d©a
,

94 
boﬁ
 
hÆf_w‹d
,

95 
uöt32_t
 
timeout


99 
uöt32_t
 
˘æ_w‹d
 = 0, 
i
;

100 
˘æ_w‹d
 |(
addr
 & 
PCIE_CTRL_REG_ADDR_MASK
);

101 i‡(
hÆf_w‹d
Ë
˘æ_w‹d
 |
PCIE_CTRL_REG_HALF_WORD
;

102 
˘æ_w‹d
 |
PCIE_CTRL_REG_READ
;

105 
i
 = 0;

106 (
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_STATUS_REG
)Ë& 
PCIE_STATUS_REG_BUSY
) != 0) {

107 i‡(++
i
 > 
timeout
Ë 
Ál£
;

111 i‡(
d©a
) *data = 0;

112 
	`wb_poke32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_CTRL_REG
), 
˘æ_w‹d
);

115 
i
 = 0;

116 (
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_STATUS_REG
)Ë& 
PCIE_STATUS_REG_READ_PENDING
) != 0) {

117 i‡(++
i
 > 
timeout
Ë 
Ál£
;

120 i‡(
d©a
Ë*d©®
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_RESP_REG
));

121  
åue
;

122 
	}
}

128 
uöt32_t
 
	gg_ˇched_wö_ªg0
;

129 
uöt32_t
 
	gg_ˇched_wö_ªg1
;

131 
boﬁ
 
	$chöch_Êash_öô
()

133 
	`chöch_≥ek32
(
CHINCH_FLASH_WINDOW_REG0
, &
g_ˇched_wö_ªg0
);

134 
	`chöch_≥ek32
(
CHINCH_FLASH_WINDOW_REG1
, &
g_ˇched_wö_ªg1
);

136 
boﬁ
 
°©us
 = 
åue
, 
∑s£d
 =Årue;

137 
	`STATUS_MERGE
(
	`chöch_poke32
(
CHINCH_FLASH_WINDOW_REG0
, 
CHINCH_FLASH_WINDOW_BASE
 | 
CHINCH_FLASH_WINDOW_CONF
), 
°©us
);

140 
	`STATUS_MERGE
(
	`chöch_poke32
(0x200, 0xDEADBEEF), 
°©us
);

141 
	`STATUS_MERGE
(
	`chöch_poke16
(0x204, 0x5678), 
°©us
);

142 
uöt32_t
 
ªg_vÆ
;

143 
	`STATUS_MERGE
(
	`chöch_≥ek16
(0x0, &
ªg_vÆ
), 
°©us
);

144 
	`STATUS_MERGE
(
	`chöch_poke16
(0x206, 
ªg_vÆ
), 
°©us
);

145 
	`STATUS_MERGE
(
	`chöch_≥ek32
(0x200, &
ªg_vÆ
), 
°©us
);

146 
∑s£d
 &(
ªg_vÆ
 == 0xDEADBEEF);

147 
	`STATUS_MERGE
(
	`chöch_≥ek32
(0x204, &
ªg_vÆ
), 
°©us
);

148 
∑s£d
 &(
ªg_vÆ
 == 0x7AD05678);

150  
°©us
 && 
∑s£d
;

151 
	}
}

153 
	$chöch_Êash_˛ónup
()

155 
	`chöch_poke32
(
CHINCH_FLASH_WINDOW_REG0
, 
g_ˇched_wö_ªg0
);

156 
	`chöch_poke32
(
CHINCH_FLASH_WINDOW_REG1
, 
g_ˇched_wö_ªg1
);

157 
	}
}

159 
boﬁ
 
	$chöch_Êash_£À˘_£˘‹
(
uöt32_t
 
£˘‹
)

161  
	`chöch_poke32
(
CHINCH_FLASH_WINDOW_REG1
, 
£˘‹
 * 
CHINCH_FLASH_WINDOW_SIZE
);

162 
	}
}

164 
boﬁ
 
	$chöch_Êash_îa£_£˘‹
()

166 
boﬁ
 
°©us
 = 
åue
;

167 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_5555_REG
, 0x00AA), 
°©us
);

168 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_2AAA_REG
, 0x0055), 
°©us
);

169 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_5555_REG
, 0x0080), 
°©us
);

170 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_5555_REG
, 0x00AA), 
°©us
);

171 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_2AAA_REG
, 0x0055), 
°©us
);

172 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_WINDOW_BASE
, 0x0030), 
°©us
);

174 i‡(
°©us
) {

175 
uöt32_t
 
ªad_d©a
;

176 
åue
) {

177 
°©us
 = 
	`chöch_≥ek16
(
CHINCH_FLASH_WINDOW_BASE
, &
ªad_d©a
);

178 i‡(((
ªad_d©a
 & 0xFFFFË=0xFFFFË|| !
°©us
) ;

181  
°©us
;

182 
	}
}

184 
boﬁ
 
	$chöch_Êash_ªad_buf
(
uöt32_t
 
off£t
, 
uöt16_t
* 
buf
, uöt32_à
size
)

186 
boﬁ
 
°©us
 = 
åue
;

187 
uöt32_t
 
ba£_addr
 = 
CHINCH_FLASH_WINDOW_BASE
 | (
off£t
 & 0x3FFFF);

188 
uöt32_t
 
i
 = 0; (ò< 
size
Ë&& 
°©us
; i++) {

189 
uöt32_t
 
w‹d
;

190 
	`STATUS_CHAIN
(
	`chöch_≥ek16
(
ba£_addr
 + (
i
 * 2), &
w‹d
), 
°©us
);

191 
buf
[
i
] = (
uöt16_t
)
w‹d
;

193  
°©us
;

194 
	}
}

196 
boﬁ
 
	$chöch_Êash_wrôe_buf
(
uöt32_t
 
off£t
, 
uöt16_t
* 
buf
, uöt32_à
size
)

198 i‡(
size
 > 
CHINCH_FLASH_MAX_BUF_WRITES
 || 
buf
 =0Ë 
Ál£
;

199 
boﬁ
 
°©us
 = 
åue
;

202 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_5555_REG
, 0x00AA), 
°©us
);

203 
	`STATUS_MERGE
(
	`chöch_poke16
(
CHINCH_FLASH_2AAA_REG
, 0x0055), 
°©us
);

204 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_WINDOW_BASE
, 0x0025), 
°©us
);

205 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_WINDOW_BASE
, 
size
 - 1), 
°©us
);

208 
uöt32_t
 
ba£_addr
 = 
CHINCH_FLASH_WINDOW_BASE
 | (
off£t
 & 0x3FFFF);

209 
uöt32_t
 
i
 = 0; i < 
size
; i++) {

210 
	`STATUS_CHAIN
(
	`chöch_poke16
(
ba£_addr
 + (
i
 * 2), 
buf
[i]), 
°©us
);

214 
	`STATUS_CHAIN
(
	`chöch_poke16
(
CHINCH_FLASH_WINDOW_BASE
, 0x0029), 
°©us
);

220 
uöt32_t
 
ªad_d©a
;

222 
	`STATUS_MERGE
(
	`chöch_≥ek16
(
ba£_addr
 + ((
size
 - 1Ë* 2), &
ªad_d©a
), 
°©us
);

223 } 
°©us
 && (((
uöt16_t
)
ªad_d©a
 ^ 
buf
[
size
 - 1]) & (1 << 7)));

225  
°©us
;

226 
	}
}

231 
	$chöch_°¨t_c⁄fig
()

233 
	`chöch_poke32
(
CHINCH_FPGA_CONFIG_REG
, 0x1);

234 
	}
}

236 
c⁄fig_°©us_t
 
	$chöch_gë_c⁄fig_°©us
()

238 
boﬁ
 
°©us
 = 
åue
;

239 
uöt32_t
 
ªad_d©a
;

240 
	`STATUS_MERGE
(
	`chöch_≥ek32
(
CHINCH_FPGA_CONFIG_REG
, &
ªad_d©a
), 
°©us
);

241  
°©us
 ? (
c⁄fig_°©us_t
)
ªad_d©a
 : 
CHINCH_CONFIG_ERROR
;

242 
	}
}

248 
pcõ_ªgi°î_xa˘_t
 
	gg_pcõ_ªg_xa˘_öfo
;

249 
uöt32_t
 
	gg_pcõ_ªs_timeout
;

251 
boﬁ
 
	$_ª•⁄d_to_pcõ_xa˘_ªque°
(
uöt32_t
 
ª•⁄£
, uöt32_à
timeout
)

254 
uöt32_t
 
i
 = 0;

255 (
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_STATUS_REG
)Ë& 
PCIE_STATUS_REG_BUSY
) != 0) {

256 i‡(++
i
 > 
g_pcõ_ªs_timeout
Ë 
Ál£
;

260 
	`wb_poke32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_DATA_REG
), 
ª•⁄£
);

261 
	`wb_poke32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_CTRL_REG
), 
PCIE_CTRL_REG_READ_RESP
);

263  
åue
;

264 
	}
}

266 
boﬁ
 
	$check_pcõ_u£r_ªgp‹t
(
pcõ_ªgi°î_xa˘_t
** 
xa˘_öfo_hdl
)

269 i‡((
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_STATUS_REG
)Ë& 
PCIE_STATUS_REG_REQ_PENDING
) != 0) {

271 
g_pcõ_ªg_xa˘_öfo
.
ª•⁄d
 = 
_ª•⁄d_to_pcõ_xa˘_ªque°
;

274 
g_pcõ_ªg_xa˘_öfo
.
d©a
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_DATA_REG
));

275 
uöt32_t
 
xa˘_c⁄åﬁ
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
PCIE_MSG_REG_BASE
, 
PCIE_MSG_CTRL_REG
));

277 
g_pcõ_ªg_xa˘_öfo
.
addr
 = 
xa˘_c⁄åﬁ
 & 
PCIE_CTRL_REG_ADDR_MASK
;

278 
g_pcõ_ªg_xa˘_öfo
.
size
 =

279 (
xa˘_c⁄åﬁ
 & 
PCIE_CTRL_REG_HALF_WORD
Ë=0 ? 
PCIE_XACT_32_BIT
 : 
PCIE_XACT_16_BIT
;

280 i‡((
xa˘_c⁄åﬁ
 & 
PCIE_CTRL_REG_READ
) != 0)

281 
g_pcõ_ªg_xa˘_öfo
.
ty≥
 = 
PCIE_XACT_READ
;

282 i‡((
xa˘_c⁄åﬁ
 & 
PCIE_CTRL_REG_WRITE
) != 0)

283 
g_pcõ_ªg_xa˘_öfo
.
ty≥
 = 
PCIE_XACT_WRITE
;

285 
g_pcõ_ªg_xa˘_öfo
.
ty≥
 = 
PCIE_XACT_ERROR
;

287 *
xa˘_öfo_hdl
 = &
g_pcõ_ªg_xa˘_öfo
;

288  
åue
;

290 *
xa˘_öfo_hdl
 = 0;

291  
Ál£
;

293 
	}
}

295 
boﬁ
 
	$f‹w¨d_pcõ_u£r_xa˘_to_wb
()

297 
pcõ_ªgi°î_xa˘_t
* 
xa˘_öfo
;

298 i‡(
	`check_pcõ_u£r_ªgp‹t
(&
xa˘_öfo
)) {

299 i‡(
xa˘_öfo
->
size
 =
PCIE_XACT_32_BIT
) {

301 i‡(
xa˘_öfo
->
ty≥
 =
PCIE_XACT_WRITE
) {

302 
	`wb_poke32
(
xa˘_öfo
->
addr
, xa˘_öfo->
d©a
);

303  
åue
;

304 } i‡(
xa˘_öfo
->
ty≥
 =
PCIE_XACT_READ
) {

305  
xa˘_öfo
->
	`ª•⁄d
(
	`wb_≥ek32
(xa˘_öfo->
addr
), 
CHINCH_DEFAULT_XACT_TIMEOUT
);

309  
Ál£
;

310 
	}
}

	@firmware/usrp3/lib/cron.c

18 
	~"¸⁄.h
"

21 
¸⁄_cou¡î_„tchî_t
 
	g¸⁄_„tch_cou¡î
;

22 
uöt32_t
 
	g¸⁄_cou¡î_‰eq
;

26 
uöt32_t
 
	mtick_öãrvÆ
;

27 
uöt32_t
 
	mœ°_tick_cou¡
;

28 } 
	t¸⁄_job_t
;

30 
¸⁄_job_t
 
	g¸⁄_job_èbÀ
[
CRON_MAX_JOBS
];

32 
	$¸⁄_öô
(c⁄° 
¸⁄_cou¡î_„tchî_t
 
„tch_cou¡î
, 
uöt32_t
 
cou¡î_‰eq
)

34 
¸⁄_„tch_cou¡î
 = 
„tch_cou¡î
;

35 
¸⁄_cou¡î_‰eq
 = 
cou¡î_‰eq
;

37 
i
 = 0; i < 
CRON_MAX_JOBS
; i++) {

38 
¸⁄_job_èbÀ
[
i
].
tick_öãrvÆ
 = 0;

40 
	}
}

42 
uöt32_t
 
	$¸⁄_gë_ticks
()

44  
	`¸⁄_„tch_cou¡î
();

45 
	}
}

47 
uöt32_t
 
	$gë_ñ≠£d_time
(
uöt32_t
 
°¨t_ticks
, uöt32_à
°›_ticks
, 
¸⁄_time_unô_t
 
unô
)

49  ((
°›_ticks
 - 
°¨t_ticks
Ë/ 
¸⁄_cou¡î_‰eq
Ë* ((
uöt32_t
)
unô
);

50 
	}
}

52 
	$¶ìp_ticks
(
uöt32_t
 
ticks
)

54 i‡(
ticks
 == 0) ;

56 c⁄° 
uöt32_t
 
ticks_begö
 = 
	`¸⁄_„tch_cou¡î
();

57 
	`¸⁄_„tch_cou¡î
(Ë- 
ticks_begö
 < 
ticks
) {

60 
	}
}

62 
	$¶ìp_us
(
uöt32_t
 
duøti⁄
)

64 
	`¶ìp_ticks
((
duøti⁄
 * (
¸⁄_cou¡î_‰eq
/1000000)));

65 
	}
}

67 
	$¶ìp_ms
(
uöt32_t
 
duøti⁄
)

69 
	`¶ìp_ticks
((
duøti⁄
 * (
¸⁄_cou¡î_‰eq
/1000)));

70 
	}
}

72 
	$¸⁄_job_öô
(
uöt32_t
 
job_id
, uöt32_à
öãrvÆ_ms
)

74 
¸⁄_job_èbÀ
[
job_id
].
tick_öãrvÆ
 = (
öãrvÆ_ms
 * (
¸⁄_cou¡î_‰eq
/1000));

75 
¸⁄_job_èbÀ
[
job_id
].
œ°_tick_cou¡
 = 0;

76 
	}
}

78 
boﬁ
 
	$¸⁄_job_run_due
(
uöt32_t
 
job_id
)

80 
uöt32_t
 
√w_tick_cou¡
 = 
	`¸⁄_„tch_cou¡î
();

81 
boﬁ
 
run_job
 = (
√w_tick_cou¡
 - 
¸⁄_job_èbÀ
[
job_id
].
œ°_tick_cou¡
) >=

82 
¸⁄_job_èbÀ
[
job_id
].
tick_öãrvÆ
;

84 i‡(
run_job
) {

89 
¸⁄_job_èbÀ
[
job_id
].
œ°_tick_cou¡
 = 
√w_tick_cou¡
;

91  
run_job
;

92 
	}
}

	@firmware/usrp3/lib/ethernet.c

19 #ifde‡
HAVE_CONFIG_H


20 
	~<c⁄fig.h
>

22 
	~"../x300/x300_defs.h
"

23 
	~"ëhî√t.h
"

24 
	~"¸⁄.h
"

25 
	~<åa˚.h
>

26 
	~"wb_i2c.h
"

27 
	~"wb_utûs.h
"

33 
	~<°döt.h
>

34 
	~<°dboﬁ.h
>

35 
	~"xge_phy.h
"

36 
	~"xge_mac.h
"

37 
	~<u3_√t_°ack.h
>

42 
	#VERBOSE
 0

	)

44 
	#NETHS
 2

45 

	)

46 
boﬁ
 
	glöks_up
[
NETHS
] = {};

53 vﬁ©ûê
uöt32_t
 
	mc⁄fig
;

54 vﬁ©ûê
uöt32_t
 
	möt_≥ndög
;

55 vﬁ©ûê
uöt32_t
 
	möt_°©us
;

56 vﬁ©ûê
uöt32_t
 
	möt_mask
;

57 vﬁ©ûê
uöt32_t
 
	mmdio_d©a
;

58 vﬁ©ûê
uöt32_t
 
	mmdio_addr
;

59 vﬁ©ûê
uöt32_t
 
	mmdio_›
;

60 vﬁ©ûê
uöt32_t
 
	mmdio_c⁄åﬁ
;

61 vﬁ©ûê
uöt32_t
 
	mgpio
;

62 } 
	txge_ªgs_t
;

64 
	#xge_ªgs
 ((
xge_ªgs_t
 *Ë
ba£
)

	)

66 
	#SFPP_STATUS_MODABS_CHG
 (1 << 5)

67 
	#SFPP_STATUS_TXFAULT_CHG
 (1 << 4)

68 
	#SFPP_STATUS_RXLOS_CHG
 (1 << 3)

69 
	#SFPP_STATUS_MODABS
 (1 << 2)

70 
	#SFPP_STATUS_TXFAULT
 (1 << 1)

71 
	#SFPP_STATUS_RXLOS
 (1 << 0)

72 

	)

75 
	$ëhî√t_nöãrÁ˚s
()

77  
NETHS
;

78 
	}
}

85 
uöt32_t


86 
	$xge_ªad_mdio
(c⁄° 
uöt32_t
 
ba£
, c⁄° uöt32_à
addªss
, c⁄° uöt32_à
devi˚
, c⁄° uöt32_à
p‹t
)

89 
xge_ªgs
->
mdio_addr
 = 
addªss
;

91 
xge_ªgs
->
mdio_›
 = 
	`XGE_MDIO_CLAUSE
(
CLAUSE45
Ë| 
	`XGE_MDIO_OP
(
MDIO_ADDRESS
Ë| 
	`XGE_MDIO_ADDR
(
p‹t
Ë| 
	`XGE_MDIO_MMD
(
devi˚
);

93 
xge_ªgs
->
mdio_c⁄åﬁ
 = 1;

95 
xge_ªgs
->
mdio_c⁄åﬁ
 == 1);

97 
xge_ªgs
->
mdio_›
 = 
	`XGE_MDIO_CLAUSE
(
CLAUSE45
Ë| 
	`XGE_MDIO_OP
(
MDIO_READ
Ë| 
	`XGE_MDIO_ADDR
(
p‹t
Ë| 
	`XGE_MDIO_MMD
(
devi˚
);

99 
xge_ªgs
->
mdio_c⁄åﬁ
 = 1;

101 
xge_ªgs
->
mdio_c⁄åﬁ
 == 1);

103 (
xge_ªgs
->
mdio_d©a
);

104 
	}
}

107 
	$xge_wrôe_mdio
(c⁄° 
uöt32_t
 
ba£
, c⁄° uöt32_à
addªss
, c⁄° uöt32_à
devi˚
, c⁄° uöt32_à
p‹t
, c⁄° uöt32_à
d©a
)

110 
xge_ªgs
->
mdio_addr
 = 
addªss
;

112 
xge_ªgs
->
mdio_›
 = 
	`XGE_MDIO_CLAUSE
(
CLAUSE45
Ë| 
	`XGE_MDIO_OP
(
MDIO_ADDRESS
Ë| 
	`XGE_MDIO_ADDR
(
p‹t
Ë| 
	`XGE_MDIO_MMD
(
devi˚
);

114 
xge_ªgs
->
mdio_c⁄åﬁ
 = 1;

116 
xge_ªgs
->
mdio_c⁄åﬁ
 == 1);

118 
xge_ªgs
->
mdio_d©a
 = 
d©a
;

120 
xge_ªgs
->
mdio_›
 = 
	`XGE_MDIO_CLAUSE
(
CLAUSE45
Ë| 
	`XGE_MDIO_OP
(
MDIO_WRITE
Ë| 
	`XGE_MDIO_ADDR
(
p‹t
Ë| 
	`XGE_MDIO_MMD
(
devi˚
);

122 
xge_ªgs
->
mdio_c⁄åﬁ
 = 1;

124 
xge_ªgs
->
mdio_c⁄åﬁ
 == 1);

125 
	}
}

131 
uöt32_t


132 
	$ge_ªad_mdio
(c⁄° 
uöt32_t
 
ba£
, c⁄° uöt32_à
addªss
, c⁄° uöt32_à
p‹t
)

135 
xge_ªgs
->
mdio_›
 = 
	`XGE_MDIO_CLAUSE
(
CLAUSE22
Ë| 
	`XGE_MDIO_OP
(
MDIO_C22_READ
Ë| 
	`XGE_MDIO_ADDR
(
p‹t
Ë| 
addªss
;

137 
xge_ªgs
->
mdio_c⁄åﬁ
 = 1;

139 
xge_ªgs
->
mdio_c⁄åﬁ
 == 1);

141 (
xge_ªgs
->
mdio_d©a
);

142 
	}
}

145 
	$ge_wrôe_mdio
(c⁄° 
uöt32_t
 
ba£
, c⁄° uöt32_à
addªss
, c⁄° uöt32_à
p‹t
, c⁄° uöt32_à
d©a
)

148 
xge_ªgs
->
mdio_d©a
 = 
d©a
;

150 
xge_ªgs
->
mdio_›
 = 
	`XGE_MDIO_CLAUSE
(
CLAUSE22
Ë| 
	`XGE_MDIO_OP
(
MDIO_C22_WRITE
Ë| 
	`XGE_MDIO_ADDR
(
p‹t
Ë| 
addªss
;

152 
xge_ªgs
->
mdio_c⁄åﬁ
 = 1;

154 
xge_ªgs
->
mdio_c⁄åﬁ
 == 1);

155 
	}
}

162 
uöt32_t
 
	$ªad_mdio
(c⁄° 
uöt8_t
 
ëh
, c⁄° 
uöt32_t
 
addªss
, c⁄° uöt32_à
devi˚
, c⁄° uöt32_à
p‹t
)

164 c⁄° 
uöt32_t
 
rb_addr
 = (
ëh
==0Ë? 
RB_SFP0_TYPE
 : 
RB_SFP1_TYPE
;

165 c⁄° 
uöt32_t
 
ba£
 = (
ëh
==0Ë? 
SFP0_MAC_BASE
 : 
SFP1_MAC_BASE
;

166 i‡(
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
rb_addr
)) != 0)

168  
	`xge_ªad_mdio
(
ba£
, 
addªss
, 
devi˚
, 
p‹t
);

172  
	`ge_ªad_mdio
(
ba£
, 
addªss
, 
p‹t
);

174 
	}
}

176 
	$wrôe_mdio
(c⁄° 
uöt8_t
 
ëh
, c⁄° 
uöt32_t
 
addªss
, c⁄° uöt32_à
devi˚
, c⁄° uöt32_à
p‹t
, c⁄° uöt32_à
d©a
)

178 c⁄° 
uöt32_t
 
rb_addr
 = (
ëh
==0Ë? 
RB_SFP0_TYPE
 : 
RB_SFP1_TYPE
;

179 c⁄° 
uöt32_t
 
ba£
 = (
ëh
==0Ë? 
SFP0_MAC_BASE
 : 
SFP1_MAC_BASE
;

180 i‡(
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
rb_addr
)) != 0)

182  
	`xge_wrôe_mdio
(
ba£
, 
addªss
, 
devi˚
, 
p‹t
, 
d©a
);

186  
	`ge_wrôe_mdio
(
ba£
, 
addªss
, 
p‹t
, 
d©a
);

188 
	}
}

195 
	$xge_i2c_rd
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
uöt8_t
 
i2c_dev_addr
, c⁄° uöt8_à
i2c_w‹d_addr
)

197 
uöt8_t
 
buf
;

202 i‡(
	`wb_i2c_wrôe
(
ba£
, 
i2c_dev_addr
, &
i2c_w‹d_addr
, 1Ë=
Ál£
)

206 i‡(
	`wb_i2c_ªad
(
ba£
, 
i2c_dev_addr
, &
buf
, 1Ë=
Ál£
)

209 ((Ë
buf
);

210 
	}
}

218 
	$xge_ªad_sÂp_ty≥
(c⁄° 
uöt32_t
 
ba£
, c⁄° uöt32_à
dñay_ms
)

220 
x
;

222 i‡(
dñay_ms
)

223 
	`¶ìp_ms
(
dñay_ms
);

225 
x
 = 
	`xge_i2c_rd
(
ba£
, 
MODULE_DEV_ADDR
, 3);

227 i‡(
x
 < 0) {

228 
	`UHD_FW_TRACE
(
ERROR
, "I2CÉrror in SFPP_TYPE.");

229  
x
;

232 i‡(
x
 & 0x01)

234 
twöax
;

236 i‡(
x
 & 0x10)

238 
	`UHD_FW_TRACE
(
DEBUG
, "SFFP_TYPE_SR.");

239  
SFFP_TYPE_SR
;

241 i‡(
x
 & 0x20)

243 
	`UHD_FW_TRACE
(
DEBUG
, "SFFP_TYPE_LR.");

244  
SFFP_TYPE_LR
;

246 i‡(
x
 & 0x40)

248 
	`UHD_FW_TRACE
(
DEBUG
, "SFFP_TYPE_LRM.");

249  
SFFP_TYPE_LRM
;

252 
x
 = 
	`xge_i2c_rd
(
ba£
, 
MODULE_DEV_ADDR
, 0x6);

253 i‡(
x
 < 0) {

254 
	`UHD_FW_TRACE
(
ERROR
, "I2CÉrror in SFPP_TYPE.");

255  
x
;

257 i‡(
x
 & 0x01) {

258 
	`UHD_FW_TRACE
(
DEBUG
, "SFFP_TYPE_1000BASE_SX.");

259  
SFFP_TYPE_1000BASE_SX
;

261 i‡(
x
 & 0x02) {

262 
	`UHD_FW_TRACE
(
DEBUG
, "SFFP_TYPE_1000BASE_LX.");

263  
SFFP_TYPE_1000BASE_LX
;

265 i‡(
x
 & 0x08) {

266 
	`UHD_FW_TRACE
(
DEBUG
, "SFFP_TYPE_1000BASE_T.");

267  
SFFP_TYPE_1000BASE_T
;

271 
x
 = 
	`xge_i2c_rd
(
ba£
, 
MODULE_DEV_ADDR
, 8);

272 i‡(
x
 < 0) {

273 
	`UHD_FW_TRACE
(
ERROR
, "I2CÉrror in SFPP_TYPE.");

274  
x
;

276 i‡((
x
 & 4) == 0)

277 
unknown
;

284 
x
 = 
	`xge_i2c_rd
(
ba£
, 
MODULE_DEV_ADDR
, 0xA);

285 i‡(
x
 < 0) {

286 
	`UHD_FW_TRACE
(
ERROR
, "I2CÉrror in SFPP_TYPE.");

287  
x
;

289 i‡(
x
 & 0x80) {

290 
twöax
:

292 
x
 = 
	`xge_i2c_rd
(
ba£
, 
MODULE_DEV_ADDR
, 0x12);

294 i‡(
x
 < 0) {

295 
	`UHD_FW_TRACE
(
ERROR
, "I2CÉrror in SFPP_TYPE.");

296  
x
;

298 
	`UHD_FW_TRACE
(
DEBUG
, "TwinAx.");

300  
x
 > 10 ? 
SFFP_TYPE_TWINAX_LONG
 : 
SFFP_TYPE_TWINAX
;

302 
unknown
:

303 
	`UHD_FW_TRACE
(
WARN
, "Unknown SFP+Åype.");

305  
SFFP_TYPE_UNKNOWN
;

306 
	}
}

308 
	$xge_mac_öô
(c⁄° 
uöt32_t
 
ba£
)

310 
	`UHD_FW_TRACE
(
DEBUG
, "Begining XGE MAC init sequence.");

311 
xge_ªgs
->
c⁄fig
 = 
XGE_TX_ENABLE
;

312 
	}
}

315 
	$xge_phy_öô
(c⁄° 
uöt8_t
 
ëh
, c⁄° 
uöt32_t
 
mdio_p‹t
)

317 
x
;

320 
	`UHD_FW_TRACE
(
DEBUG
, "Begining XGE PHY init sequence.");

322 
x
 = 
	`ªad_mdio
(
ëh
, 0x0, 
XGE_MDIO_DEVICE_PMA
,
mdio_p‹t
);

323 
x
 = x | (1 << 15);

324 
	`wrôe_mdio
(
ëh
, 0x0,
XGE_MDIO_DEVICE_PMA
,
mdio_p‹t
,
x
);

325 
uöt32_t
 
lo›Cou¡
 = 0;

326 
x
&(1<<15)) {

327 
x
 = 
	`ªad_mdio
(
ëh
, 0x0,
XGE_MDIO_DEVICE_PMA
,
mdio_p‹t
);

328 if–
lo›Cou¡
++ > 200 ) ;

330 
	}
}

332 
	$upd©e_ëh_°©e
(c⁄° 
uöt32_t
 
ëh
, c⁄° uöt32_à
sÂ_ty≥
)

334 c⁄° 
boﬁ
 
ﬁd_lök_up
 = 
löks_up
[
ëh
];

335 c⁄° 
uöt32_t
 
°©us_ªg_addr
 = (
ëh
==0Ë? 
RB_SFP0_STATUS
 : 
RB_SFP1_STATUS
;

337 
uöt32_t
 
sÂp_°©us
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
°©us_ªg_addr
)) & 0xFFFF;

338 i‡((
sÂp_°©us
 & (
SFPP_STATUS_RXLOS
|
SFPP_STATUS_TXFAULT
|
SFPP_STATUS_MODABS
)) == 0) {

340 i‡(
sÂ_ty≥
 =
RB_SFP_10G_ETH
) {

341 
	`xge_mac_öô
((
ëh
==0Ë? 
SFP0_MAC_BASE
 : 
SFP1_MAC_BASE
);

342 
	`xge_phy_öô
(
ëh
, 
MDIO_PORT
);

347 
öt8_t
 
timeout
 = 100;

348 
boﬁ
 
lök_up
 = 
Ál£
;

350 i‡(
sÂ_ty≥
 =
RB_SFP_10G_ETH
) {

351 
lök_up
 = ((
	`ªad_mdio
(
ëh
, 
XGE_MDIO_STATUS1
,
XGE_MDIO_DEVICE_PMA
,
MDIO_PORT
)) & (1 << 2)) != 0;

353 
lök_up
 = ((
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
°©us_ªg_addr
)) >> 16) & 0x1) != 0;

355 } !
lök_up
 && 
timeout
-- > 0);

357 
löks_up
[
ëh
] = 
lök_up
;

361 
löks_up
[
ëh
] = 
Ál£
;

364 i‡(!
ﬁd_lök_up
 && 
löks_up
[
ëh
]Ë
	`u3_√t_°ack_£nd_¨p_ªque°
”th, 
	`u3_√t_°ack_gë_ù_addr
(eth));

365 
	}
}

367 
	$pﬁl_sÂp_°©us
(c⁄° 
uöt32_t
 
sÂ
)

369 
uöt32_t
 
ty≥
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, (
sÂ
==0Ë? 
RB_SFP0_TYPE
 : 
RB_SFP1_TYPE
));

370 
uöt32_t
 
°©us
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, (
sÂ
==0Ë? 
RB_SFP0_STATUS
 : 
RB_SFP1_STATUS
));

372 i‡(
°©us
 & 
SFPP_STATUS_MODABS_CHG
) {

374 i‡(
°©us
 & 
SFPP_STATUS_MODABS
) {

376 
	`UHD_FW_TRACE_FSTR
(
INFO
, "A¿SFP+ moduÀ ha†bì¿ªmoved fromÉthÖ‹à%d.", 
sÂ
);

380 
	`UHD_FW_TRACE_FSTR
(
INFO
, "AÇew SFP+ moduÀ ha†bì¿ö£πed i¡ÿëhÖ‹à%d.", 
sÂ
);

381 i‡(
ty≥
 =
RB_SFP_10G_ETH
) {

382 
	`xge_ªad_sÂp_ty≥
((
sÂ
==0Ë? 
I2C0_BASE
 : 
I2C2_BASE
,1);

387 i‡(
°©us
 & 
SFPP_STATUS_RXLOS_CHG
) {

388 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "SFP%1d RXLOS ch™ged sèã: %d", 
sÂ
, (
°©us
 & 
SFPP_STATUS_RXLOS
));

390 i‡(
°©us
 & 
SFPP_STATUS_TXFAULT_CHG
) {

391 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "SFP%1d TXFAULT ch™ged sèã: %d", 
sÂ
, ((
°©us
 & 
SFPP_STATUS_TXFAULT
) >> 1));

393 i‡(
°©us
 & 
SFPP_STATUS_MODABS_CHG
) {

394 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "SFP%1d MODABS ch™ged sèã: %d", 
sÂ
, ((
°©us
 & 
SFPP_STATUS_MODABS
) >> 2));

398 c⁄° 
boﬁ
 
ﬁd_lök_up
 = 
löks_up
[
sÂ
];

399 i‡(
ty≥
 =
RB_SFP_AURORA
) {

400 
löks_up
[
sÂ
] = ((
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, (sÂ==0Ë? 
RB_SFP0_STATUS
 : 
RB_SFP1_STATUS
)) >> 16) & 0x1) != 0;

402 i‡((
°©us
 & 
SFPP_STATUS_RXLOS_CHG
) ||

403 (
°©us
 & 
SFPP_STATUS_TXFAULT_CHG
) ||

404 (
°©us
 & 
SFPP_STATUS_MODABS_CHG
))

406 
	`upd©e_ëh_°©e
(
sÂ
, 
ty≥
);

409 i‡(
ﬁd_lök_up
 !
löks_up
[
sÂ
]) {

410 
	`UHD_FW_TRACE_FSTR
(
INFO
, "Thêlök o¿SFPÖ‹à%u i†%s", 
sÂ
, 
löks_up
[sfp]?"up":"down");

412 
	}
}

414 
	$ëhî√t_öô
(c⁄° 
uöt32_t
 
sÂ
)

416 #ifde‡
UHD_FW_TRACE_LEVEL


417 
uöt32_t
 
x
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, (
sÂ
==0Ë? 
RB_SFP0_STATUS
 : 
RB_SFP1_STATUS
 ));

418 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "SFP%1d SFP initial state: RXLOS: %d TXFAULT: %d MODABS: %d",

419 
sÂ
,

420 (
x
 & 
SFPP_STATUS_RXLOS
),

421 ((
x
 & 
SFPP_STATUS_TXFAULT
) >> 1),

422 ((
x
 & 
SFPP_STATUS_MODABS
) >> 2));

424 
	`upd©e_ëh_°©e
(
sÂ
, 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, (sÂ==0Ë? 
RB_SFP0_TYPE
 : 
RB_SFP1_TYPE
)));

425 
	}
}

432 
	$decode_ªg
(
uöt32_t
 
addªss
, uöt32_à
devi˚
, uöt32_à
d©a
)

434 
	`UHD_FW_TRACE_FSTR
(
DEBUG
,

436 
addªss
, 
devi˚
, 
d©a
);

437 
x
;

438 
addªss
) {

439 
XGE_MDIO_CONTROL1
:

440 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "CONTROL1: %x = ", 
d©a
);

441 
x
=15; x >= 0 ; x--)

442 i‡((
d©a
 & (1 << 
x
)) != 0)

444 
x
) {

445 15: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Reset,"); ;

446 14: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Loopback,"); ;

447 11: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Low Power Mode,"); ;

448 5:4:3:2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "RESERVED speed value,"); ;

449 0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "PMAÜoopback,"); ;

455 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

457 
XGE_MDIO_STATUS1
:

458 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "STATUS1: %x = ", 
d©a
);

459 
x
=15; x >= 0 ; x--)

460 i‡((
d©a
 & (1 << 
x
)) != 0)

462 
x
) {

463 7: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Fault Detected,"); ;

464 2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Link is Up,"); ;

465 1: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Supports Low Power,"); ;

468 
x
) {

469 2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Link is Down,"); ;

471 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

473 
XGE_MDIO_SPEED
:

474 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "SPEED ABILITY: %x = ", 
d©a
);

475 
x
=15; x >= 0 ; x--)

476 i‡((
d©a
 & (1 << 
x
)) != 0)

478 
x
) {

480 8:7:6:5:4:3:2:1: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "RESERVED bits set!,"); ;

481 0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Capable of 10Gb/s,");

484 
x
) {

485 0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Incapable of 10Gb/s,"); ;

487 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

489 
XGE_MDIO_DEVICES1
:

490 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "DEVICES IN PACKAGE: %x = ", 
d©a
);

491 
x
=15; x >= 0 ; x--)

492 i‡((
d©a
 & (1 << 
x
)) != 0)

494 
x
) {

495 7: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Auto-Negotiation,"); ;

496 6: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "TC,"); ;

497 5: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "DTE XS,"); ;

498 4: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "PHY XS,"); ;

499 3: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "PCS,"); ;

500 2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "WIS,"); ;

501 1: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "PMD/PMA,"); ;

502 0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Clause 22Ñegisters,"); ;

504 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

506 
XGE_MDIO_DEVICES2
:

507 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "DEVICES IN PACKAGE (c⁄t): %x = ", 
d©a
);

508 
x
=15; x >= 0 ; x--)

509 i‡((
d©a
 & (1 << 
x
)) != 0)

511 
x
) {

512 15: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Vendor device 2,"); ;

513 14: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Vendor device 1,"); ;

514 13: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Clause 22Éxtension,"); ;

516 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

518 
XGE_MDIO_CONTROL2
:

519 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "CONTROL2: %x = ", 
d©a
);

521 i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
)

522 (
d©a
 & 0xf)) {

523 0xF: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10BASE-T,"); ;

524 0xE: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "100BASE-TX,"); ;

525 0xD: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "1000BASE-KX,"); ;

526 0xC: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "1000BASE-T,"); ;

527 0xB: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-KR,"); ;

528 0xA: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-KX4,"); ;

529 0x9: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-T,"); ;

530 0x8: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-LRM,"); ;

531 0x7: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-SR,"); ;

532 0x6: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-LR,"); ;

533 0x5: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-ER,"); ;

534 0x4: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-LX4,"); ;

538 0x0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-CX4,"); ;

539 } i‡(
devi˚
 =
XGE_MDIO_DEVICE_PCS
)

541 (
d©a
 & 0x3)) {

542 0x3: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-T PCS,"); ;

543 0x2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-W PCS,"); ;

544 0x1: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-X PCS,"); ;

545 0x0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-R PCS,"); ;

547 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

549 
XGE_MDIO_STATUS2
:

550 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "STATUS2: %x = ", 
d©a
);

551 
x
=15; x >= 0 ; x--)

552 i‡((
d©a
 & (1 << 
x
)) != 0)

554 
x
) {

555 15: i‡((
d©a
 & (1 << 14)Ë=0Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "DeviceÑesponding,"); ;

556 13: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Able detectá Tx fault,"); ;

557 12: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Able detectán Rx fault,"); ;

558 11: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Fault on TxÖath,"); ;

559 10: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Fault on RxÖath,"); ;

560 9: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Extendedábilities in Reg1.11,"); ;

561 8: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "AbleÅo disable TX,"); ;

562 7: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-SR,"); ;

563 6: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-LR,"); ;

564 5: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-ER,"); ;

565 4: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-LX4,"); ;

566 3: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-SW,"); ;

567 2: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-LW,"); ;

568 1: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "10GBASE-EW,"); ;

569 0: i‡(
devi˚
 =
XGE_MDIO_DEVICE_PMA
Ë
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "loopback,"); ;

571 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

573 
XGE_MDIO_LANESTATUS
:

574 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "LANE STATUS: %x = ", 
d©a
);

575 
x
=15; x >= 0 ; x--)

576 i‡((
d©a
 & (1 << 
x
)) != 0)

578 
x
) {

579 12: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lanesáligned,"); ;

580 11: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "AbleÅo generateÅestÖatterns,"); ;

581 3: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 3 synced,"); ;

582 2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 2 synced,"); ;

583 1: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 1 synced,"); ;

584 0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 0 synced,"); ;

587 
x
) {

588 3: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 3Çot synced,"); ;

589 2: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 2Çot synced,"); ;

590 1: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 1Çot synced,"); ;

591 0: 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Lane 0Çot synced,"); ;

593 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

595 
XILINX_CORE_VERSION
:

596 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "XILINX CORE VERSION: %x ",
d©a
);

597 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "Vîsi⁄: %d.%d ",((
d©a
&0xf000)>>12),((data&0xf00)>>8));

598 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "P©ch: %d ",((
d©a
&0xE)>>1));

599 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " \n");

600 i‡(
d©a
&0x1Ë
	`UHD_FW_TRACE
(
WARN
, "Evaluation Version of core");

603 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, "Register @áddress: ");

604 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "%x",
addªss
);

605 
	`UHD_FW_TRACE_SHORT
(
DEBUG
, " has value: ");

606 
	`UHD_FW_TRACE_FSTR_SHORT
(
DEBUG
, "%x\n",
d©a
);

609 
	}
}

612 
	$dump_mdio_ªgs
(c⁄° 
uöt8_t
 
ëh
, 
uöt32_t
 
mdio_p‹t
)

614 vﬁ©ûê
x
;

615 
y
;

616 
ªgs_a
[9] = {0,1,4,5,6,7,8,32,33};

617 
ªgs_b
[10] = {0,1,4,5,6,7,8,10,11,65535};

620 
y
 = 0; y < 10; y++)

623 
x
 = 
	`ªad_mdio
(
ëh
,
ªgs_b
[
y
],
XGE_MDIO_DEVICE_PMA
,
mdio_p‹t
);

624 
	`decode_ªg
(
ªgs_b
[
y
],
XGE_MDIO_DEVICE_PMA
,
x
);

627 
y
 = 0; y < 9; y++)

630 
x
 = 
	`ªad_mdio
(
ëh
,
ªgs_a
[
y
],
XGE_MDIO_DEVICE_PCS
,
mdio_p‹t
);

631 
	`decode_ªg
(
ªgs_a
[
y
],
XGE_MDIO_DEVICE_PCS
,
x
);

648 
	}
}

650 
boﬁ
 
	$ëhî√t_gë_lök_up
(c⁄° 
uöt32_t
 
ëh
)

652  
löks_up
[
ëh
];

653 
	}
}

	@firmware/usrp3/lib/flash/spi_flash.c

18 
	~<Êash/•i_Êash.h
>

20 
	$•if_öô
(
•i_Êash_£ssi⁄_t
* 
Êash
, c⁄° 
•i_Êash_dev_t
* 
devi˚
, c⁄° 
•i_Êash_›s_t
* 
›s
)

22 
Êash
->
devi˚
 = device;

23 
Êash
->
›s
 = ops;

24 
Êash
->
°©e
 = 
IDLE
;

25 
Êash
->
œ°_off£t
 = 0;

26 
Êash
->
id
 = 
›s
->
	`ªad_id
(
devi˚
);

27 
	}
}

29 
	$•if_ªad_sync
(c⁄° 
•i_Êash_£ssi⁄_t
* 
Êash
, 
uöt32_t
 
off£t
, *
buf
, uöt32_à
num_byãs
)

31 
Êash
->
›s
->
	`ªad
(Êash->
devi˚
, 
off£t
, 
buf
, 
num_byãs
);

32 
	}
}

34 
boﬁ
 
	$•if_îa£_£˘‹_sync
(c⁄° 
•i_Êash_£ssi⁄_t
* 
Êash
, 
uöt32_t
 
off£t
)

36 i‡(
Êash
->
›s
->
	`îa£_£˘‹_di•©ch
(Êash->
devi˚
, 
off£t
)) {

37  
Êash
->
›s
->
	`îa£_£˘‹_commô
(Êash->
devi˚
, 
off£t
);

39  
Ál£
;

41 
	}
}

43 
boﬁ
 
	$•if_wrôe_∑ge_sync
(c⁄° 
•i_Êash_£ssi⁄_t
* 
Êash
, 
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
)

45 i‡(
Êash
->
›s
->
	`wrôe_∑ge_di•©ch
(Êash->
devi˚
, 
off£t
, 
buf
, 
num_byãs
)) {

46  
Êash
->
›s
->
	`wrôe_∑ge_commô
(Êash->
devi˚
, 
off£t
, 
buf
, 
num_byãs
);

48  
Ál£
;

50 
	}
}

	@firmware/usrp3/lib/flash/spif_spsn_s25flxx.c

18 
	~<wb_•i.h
>

19 
	~<Êash/•if_•¢_s25Êxx.h
>

20 
	~<¸⁄.h
>

21 
	~<åa˚.h
>

22 
	~<°rög.h
>

24 
	#S25FLXX_CMD_WIDTH
 8

	)

25 
	#S25FLXX_ADDR_WIDTH
 24

	)

28 
	#S25FLXX_CMD_READID
 0x90

	)

29 
	#S25FLXX_CMD_READSIG
 0xAB

	)

30 
	#S25FLXX_CMD_READ
 0x03

	)

31 
	#S25FLXX_CMD_FAST_READ
 0x0B

	)

33 
	#S25FLXX_CMD_WREN
 0x06

	)

34 
	#S25FLXX_CMD_WRDI
 0x04

	)

36 
	#S25FLXX_CMD_PP
 0x02

	)

37 
	#S25FLXX_CMD_SE
 0xD8

	)

38 
	#S25FLXX_CMD_BE
 0xC7

	)

39 
	#S25FLXX_CMD_DP
 0xB9

	)

41 
	#S25FLXX_CMD_RDSR
 0x05

	)

42 
	#S25FLXX_CMD_WRSR
 0x01

	)

44 
	#S25FLXX_STATUS_WIP
 0x01

	)

45 
	#S25FLXX_STATUS_E_ERR
 0x20

	)

46 
	#S25FLXX_STATUS_P_ERR
 0x40

	)

48 
	#S25FLXX_SECTOR_ERASE_TIME_MS
 750

49 
	#S25FLXX_PAGE_WRITE_TIME_MS
 1

50 

	)

51 
	#S25FLXX_SMALL_SECTORS_PER_LOGICAL
 16

52 
	#S25FLXX_LARGE_SECTOR_BASE
 0x20000

53 

	)

54 
ölöe
 
uöt8_t
 
	$_•if_ªad_°©us
(c⁄° 
•i_Êash_dev_t
* 
Êash
)

56 
uöt16_t
 
cmd
 = 
S25FLXX_CMD_RDSR
 << 8, 
°©us
 = 0xFFFF;

57 
	`wb_•i_å™ß˘
(
Êash
->
bus
, 
WRITE_READ
, &
cmd
, &
°©us
, 
S25FLXX_CMD_WIDTH
 + 8 );

58  
°©us
;

59 
	}
}

61 
ölöe
 
boﬁ
 
	$_•if_waô_ªady
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
timeout_ms
)

63 
uöt32_t
 
°¨t_ticks
 = 
	`¸⁄_gë_ticks
();

65 i‡((
	`_•if_ªad_°©us
(
Êash
Ë& 
S25FLXX_STATUS_WIP
) == 0) {

66  
åue
;

68 } 
	`gë_ñ≠£d_time
(
°¨t_ticks
, 
	`¸⁄_gë_ticks
(), 
MILLISEC
Ë< 
timeout_ms
);

70  
Ál£
;

71 
	}
}

73 
ölöe
 
	$_•i_Êash_£t_wrôe_íabÀd
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
boﬁ
 
íabÀd
)

75 
uöt8_t
 
cmd
 = 
íabÀd
 ? 
S25FLXX_CMD_WREN
 : 
S25FLXX_CMD_WRDI
;

76 
	`wb_•i_å™ß˘
(
Êash
->
bus
, 
WRITE
, &
cmd
, 
NULL
, 
S25FLXX_CMD_WIDTH
);

77 
	}
}

79 c⁄° 
•i_Êash_›s_t
 
	g•if_•¢_s25Êxx_›s
 =

81 .
ªad_id
 = 
•if_•¢_s25Êxx_ªad_id
,

82 .
	gªad
 = 
•if_•¢_s25Êxx_ªad
,

83 .
	gîa£_£˘‹_di•©ch
 = 
•if_•¢_s25Êxx_îa£_£˘‹_di•©ch
,

84 .
	gîa£_£˘‹_commô
 = 
•if_•¢_s25Êxx_îa£_£˘‹_commô
,

85 .
	gîa£_£˘‹_busy
 = 
•if_•¢_s25Êxx_devi˚_busy
,

86 .
	gwrôe_∑ge_di•©ch
 = 
•if_•¢_s25Êxx_wrôe_∑ge_di•©ch
,

87 .
	gwrôe_∑ge_commô
 = 
•if_•¢_s25Êxx_wrôe_∑ge_commô
,

88 .
	gwrôe_∑ge_busy
 = 
•if_•¢_s25Êxx_devi˚_busy


91 c⁄° 
•i_Êash_›s_t
* 
	$•if_•¢_s25Êxx_›î©i⁄s
()

93  &
•if_•¢_s25Êxx_›s
;

94 
	}
}

96 
uöt16_t
 
	$•if_•¢_s25Êxx_ªad_id
(c⁄° 
•i_Êash_dev_t
* 
Êash
)

98 
	`wb_•i_¶ave_£À˘
(
Êash
->
bus
);

99 
uöt32_t
 
comm™d
 = 
S25FLXX_CMD_READID
 << 24;

100 
	`wb_•i_å™ß˘_m™_ss
(
Êash
->
bus
, 
WRITE
, &
comm™d
, 
NULL
, 32);

101 
uöt16_t
 
id
 = 0;

102 
	`wb_•i_å™ß˘_m™_ss
(
Êash
->
bus
, 
WRITE_READ
, 
NULL
, &
id
, 16);

103 
	`wb_•i_¶ave_de£À˘
(
Êash
->
bus
);

104  
id
;

105 
	}
}

107 
	$•if_•¢_s25Êxx_ªad
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
, *
buf
, uöt32_à
num_byãs
)

116 
uöt8_t
 
ªad_cmd
[5];

117 
ªad_cmd
[4] = 
S25FLXX_CMD_FAST_READ
;

118 *((
uöt32_t
*)(
ªad_cmd
 + 3)Ë(
off£t
 << 8);

120 
	`wb_•i_¶ave_£À˘
(
Êash
->
bus
);

121 
	`wb_•i_å™ß˘_m™_ss
(
Êash
->
bus
, 
WRITE_READ
, 
ªad_cmd
, 
NULL
, 5*8);

124 
uöt8_t
 
d©a_sw
[16], 
d©a
[16];

125 
size_t
 
xa˘_size
 = 16;

126 *
byãs
 = (*Ë
buf
;

127 
size_t
 
i
 = 0; i < 
num_byãs
; i += 16) {

128 i‡(
xa˘_size
 > 
num_byãs
 - 
i
) xact_size =Çum_bytes - i;

129 
	`wb_•i_å™ß˘_m™_ss
(
Êash
->
bus
, 
WRITE_READ
, 
NULL
, 
d©a_sw
, 
xa˘_size
*8);

130 
size_t
 
k
 = 0; k < 4; k++) {

131 ((
uöt32_t
*)
d©a
)[
k
] = ((uöt32_t*)
d©a_sw
)[3-k];

133 
size_t
 
j
 = 0; j < 
xa˘_size
; j++) {

134 *
byãs
 = 
d©a
[
j
];

135 
byãs
++;

138 
	`wb_•i_¶ave_de£À˘
(
Êash
->
bus
);

139 
	}
}

141 
boﬁ
 
	$•if_•¢_s25Êxx_îa£_£˘‹_di•©ch
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
)

144 i‡(
off£t
 % 
Êash
->
£˘‹_size
) {

145 
	`UHD_FW_TRACE
(
ERROR
, "spif_spsn_s25flxx_erase_sector: Erase offsetÇotá multiple of sector size.");

146  
Ál£
;

149 i‡(!
	`_•if_waô_ªady
(
Êash
, 
S25FLXX_SECTOR_ERASE_TIME_MS
)) {

150 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "•if_•¢_s25Êxx_îa£_£˘‹: Timeout. Se˘‹áà0x%X wa†nŸÑódy f‹Éø£.", 
off£t
);

151  
Ál£
;

153 
	`_•i_Êash_£t_wrôe_íabÀd
(
Êash
, 
åue
);

156 
uöt32_t
 
comm™d
 = (
S25FLXX_CMD_SE
 << 24Ë| (
off£t
 & 0x00FFFFFF);

157 
	`wb_•i_å™ß˘
(
Êash
->
bus
, 
WRITE_READ
, &
comm™d
, 
NULL
, 32);

159  
åue
;

160 
	}
}

162 
boﬁ
 
	$•if_•¢_s25Êxx_îa£_£˘‹_commô
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
)

165 
uöt8_t
 
phy_£˘‹_cou¡
 = (
off£t
 < 
S25FLXX_LARGE_SECTOR_BASE
Ë? 
S25FLXX_SMALL_SECTORS_PER_LOGICAL
 : 1;

166 
boﬁ
 
°©us
 = 
Ál£
;

167 
uöt8_t
 
i
 = 0; i < 
phy_£˘‹_cou¡
 && !
°©us
; i++) {

168 
°©us
 = 
	`_•if_waô_ªady
(
Êash
, 
S25FLXX_SECTOR_ERASE_TIME_MS
);

170 i‡(!
°©us
) {

171 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "•if_•¢_s25Êxx_îa£_£˘‹_commô: Timeout. Se˘‹áà0x%X didÇŸ föishÉøsög i¿time.", 
off£t
);

173 
	`_•i_Êash_£t_wrôe_íabÀd
(
Êash
, 
Ál£
);

174  
°©us
;

175 
	}
}

177 
boﬁ
 
	$•if_•¢_s25Êxx_wrôe_∑ge_di•©ch
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
)

179 i‡(
num_byãs
 =0 ||Çum_byã†> 
Êash
->
∑ge_size
) {

180 
	`UHD_FW_TRACE
(
ERROR
, "spif_spsn_s25flxx_write_page: Invalid size. Must be > 0ánd <= Page Size.");

181  
Ál£
;

183 i‡(
num_byãs
 > (
Êash
->
£˘‹_size
 * fœsh->
num_£˘‹s
)) {

184 
	`UHD_FW_TRACE
(
ERROR
, "spif_spsn_s25flxx_write_page: Cannot writeÖast flash boundary.");

185  
Ál£
;

189 i‡(!
	`_•if_waô_ªady
(
Êash
, 
S25FLXX_PAGE_WRITE_TIME_MS
)) {

190 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "•if_•¢_s25Êxx_wrôe_∑ge: Timeout. Pagê© 0x%X wa†nŸÑódy f‹ wrôe.", 
off£t
);

191  
Ál£
;

193 
	`_•i_Êash_£t_wrôe_íabÀd
(
Êash
, 
åue
);

202 
uöt32_t
 
wrôe_cmd
 = (
S25FLXX_CMD_PP
 << 24Ë| (
off£t
 & 0x00FFFFFF);

204 
	`wb_•i_¶ave_£À˘
(
Êash
->
bus
);

205 
	`wb_•i_å™ß˘_m™_ss
(
Êash
->
bus
, 
WRITE
, &
wrôe_cmd
, 
NULL
, 32);

208 
uöt8_t
 
byãs_sw
[16];

209 
uöt8_t
* 
byãs
 = (uöt8_t*Ë
buf
;

210 
öt32_t
 
byãs_À·
 = 
num_byãs
; bytes_left > 0; bytes_left -= 16) {

211 c⁄° 
uöt32_t
 
xa˘_size
 = (
byãs_À·
 < 16) ? bytes_left : 16;

212 
size_t
 
k
 = 0; k < 4; k++) {

213 ((
uöt32_t
*)
byãs_sw
)[
k
] = ((uöt32_t*)
byãs
)[3-k];

215 
	`wb_•i_å™ß˘_m™_ss
(
Êash
->
bus
, 
WRITE
, 
byãs_sw
, 
NULL
, 
xa˘_size
 * 8);

216 
byãs
 +
xa˘_size
;

218 
	`wb_•i_¶ave_de£À˘
(
Êash
->
bus
);

220  
åue
;

221 
	}
}

223 
boﬁ
 
	$•if_•¢_s25Êxx_wrôe_∑ge_commô
(c⁄° 
•i_Êash_dev_t
* 
Êash
, 
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
)

226 i‡(!
	`_•if_waô_ªady
(
Êash
, 
S25FLXX_PAGE_WRITE_TIME_MS
)) {

227 
	`UHD_FW_TRACE
(
ERROR
, "spif_spsn_s25flxx_commit_write: Timeout. Page didÇot finish writing inÅime.");

228  
Ál£
;

230 
	`_•i_Êash_£t_wrôe_íabÀd
(
Êash
, 
Ál£
);

231  
åue
;

232 
	}
}

234 
boﬁ
 
	$•if_•¢_s25Êxx_devi˚_busy
(c⁄° 
•i_Êash_dev_t
* 
Êash
)

236  (
	`_•if_ªad_°©us
(
Êash
Ë& 
S25FLXX_STATUS_WIP
);

237 
	}
}

	@firmware/usrp3/lib/fw_comm_protocol.c

18 
	~"../../../ho°/lib/u§p/comm⁄/fw_comm_¥Ÿocﬁ.h
"

20 
	~<åa˚.h
>

21 
	~<°rög.h
>

23 
boﬁ
 
	$¥o˚ss_fw_comm_¥Ÿocﬁ_pkt
(

24 c⁄° 
fw_comm_pkt_t
* 
ªque°
,

25 
fw_comm_pkt_t
* 
ª•⁄£
,

26 
uöt8_t
 
¥odu˘_id
,

27 
uöt32_t
 
iÁ˚_id
,

28 
poke32_func
 
poke_ˇŒback
,

29 
≥ek32_func
 
≥ek_ˇŒback
)

31 
boﬁ
 
£nd_ª•⁄£
 = 
Ál£
;

33 
uöt16_t
 
sig«tuª
 = 
ªque°
->
id
;

34 
uöt8_t
 
vîsi⁄
 = 
	`FW_COMM_GET_PROTOCOL_VER
(
ªque°
->
id
);

35 
uöt8_t
 
¥odu˘
 = 
	`FW_COMM_GET_PRODUCT_ID
(
ªque°
->
id
);

36 i‡(
sig«tuª
 =
FW_COMM_PROTOCOL_SIGNATURE
 &&

37 
vîsi⁄
 <
FW_COMM_PROTOCOL_VERSION
 &&

38 
¥odu˘
 =
¥odu˘_id
)

41 
	`mem˝y
(
ª•⁄£
, 
ªque°
, (
fw_comm_pkt_t
));

44 
ª•⁄£
->
Êags
 &~
FW_COMM_FLAGS_ERROR_MASK
;

47 
ªque°
->
Êags
 & 
FW_COMM_FLAGS_CMD_MASK
) {

48 
FW_COMM_CMD_ECHO
: {

49 
	`UHD_FW_TRACE
(
DEBUG
, "fw_comm_protocol::echo()");

50 
ª•⁄£
->
d©a_w‹ds
 = 1;

51 
ª•⁄£
->
d©a
[0] = 
iÁ˚_id
;

54 
FW_COMM_CMD_POKE32
: {

55 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "fw_comm_protocol::poke32(0x%x)=0x%x",

56 
ªque°
->
addr
,*‘eque°->
d©a
));

57 
	`poke_ˇŒback
(
ªque°
->
addr
, *‘eque°->
d©a
));

60 
FW_COMM_CMD_PEEK32
: {

61 *(
ª•⁄£
->
d©a
Ë
	`≥ek_ˇŒback
(
ªque°
->
addr
);

62 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "fw_comm_protocol::peek32(0x%x)=0x%x",

63 
ªque°
->
addr
,*(
ª•⁄£
->
d©a
));

66 
FW_COMM_CMD_BLOCK_POKE32
: {

67 i‡(
ªque°
->
d©a_w‹ds
 > 
FW_COMM_MAX_DATA_WORDS
) {

68 
ª•⁄£
->
Êags
 |
FW_COMM_ERR_SIZE_ERROR
;

69 
ª•⁄£
->
d©a_w‹ds
 = 
FW_COMM_MAX_DATA_WORDS
;

71 
ª•⁄£
->
d©a_w‹ds
 = 
ªque°
->data_words;

73 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "fw_comm_¥Ÿocﬁ::block_poke32(0x%x,%d)",
ªque°
->
addr
,
ª•⁄£
->
d©a_w‹ds
);

74 
uöt32_t
 
i
 = 0; i < 
ª•⁄£
->
d©a_w‹ds
; i++) {

75 
	`poke_ˇŒback
(
ªque°
->
addr
 + (
i
 * (
uöt32_t
)),Ñeque°->
d©a
[i]);

79 
FW_COMM_CMD_BLOCK_PEEK32
: {

80 i‡(
ªque°
->
d©a_w‹ds
 > 
FW_COMM_MAX_DATA_WORDS
) {

81 
ª•⁄£
->
Êags
 |
FW_COMM_ERR_SIZE_ERROR
;

82 
ª•⁄£
->
d©a_w‹ds
 = 
FW_COMM_MAX_DATA_WORDS
;

84 
ª•⁄£
->
d©a_w‹ds
 = 
ªque°
->data_words;

86 
uöt32_t
 
i
 = 0; i < 
ª•⁄£
->
d©a_w‹ds
; i++) {

87 
ª•⁄£
->
d©a
[
i
] = 
	`≥ek_ˇŒback
(
ªque°
->
addr
 + (ò* (
uöt32_t
)));

89 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "fw_comm_¥Ÿocﬁ::block_≥ek32(0x%x,%d)",
ªque°
->
addr
,
ª•⁄£
->
d©a_w‹ds
);

93 
	`UHD_FW_TRACE
(
ERROR
, "fw_comm_protocol gotán invalid command.");

94 
ª•⁄£
->
Êags
 |
FW_COMM_ERR_CMD_ERROR
;

99 
£nd_ª•⁄£
 = (
ªque°
->
Êags
 & 
FW_COMM_FLAGS_ACK
);

101 
	`UHD_FW_TRACE
(
WARN
, "fw_comm_protocol ignoredán unknownÑequest.");

102 
£nd_ª•⁄£
 = 
Ál£
;

104  
£nd_ª•⁄£
;

105 
	}
}

	@firmware/usrp3/lib/link_state_route_proto.c

4 
	~<lök_°©e_rouã_¥Ÿo.h
>

5 
	~<u3_√t_°ack.h
>

6 
	~<ëhî√t.h
>

7 
	~<°rög.h
>

8 
	~<¥ötf.h
>

9 
	~<¥öt_addrs.h
>

11 
	#Àngthof
(
a
Ë(◊)/(*◊)))

	)

16 
	#LS_PROTO_VERSION
 6

	)

19 
	#LS_ID_DISCOVER
 (0 | (8 << 
LS_PROTO_VERSION
))

	)

20 
	#LS_ID_INFORM
 (1 | (8 << 
LS_PROTO_VERSION
))

	)

22 
	#LS_PAYLOAD_MTU
 1024

	)

23 
	#LS_NUM_NBOR_ENTRIES
 16

	)

24 
	#LS_NUM_NODE_ENTRIES
 64

	)

25 
	#LS_NUM_MAP_ENTRIES
 128

	)

27 
	#NETHS
 4

28 

	)

34 
uöt32_t
 
	mnum_nb‹s
;

35 
uöt32_t
 
	mnum_p‹ts
;

36 
ù_addr
 
	mnode
;

37 
ù_addr
 
	mnb‹s
[];

38 } 
	tls_d©a_t
;

40 
ölöe
 
size_t
 
	$sizeof_ls_d©a
(c⁄° 
ls_d©a_t
 *
ls_d©a
)

43 + (
uöt32_t
)

44 + (
uöt32_t
)

45 + (
ù_addr
)

46 + (
ù_addr
)*
ls_d©a
->
num_nb‹s
;

47 
	}
}

52 
uöt16_t
 
	gtickî
 = 0;

54 
	$lök_°©e_rouã_¥Ÿo_tick
()

56 
tickî
++;

57 
	}
}

59 
ölöe
 
boﬁ
 
	$is_tick_expúed
(c⁄° 
uöt16_t
 
tick
)

61 c⁄° 
uöt16_t
 
dñè
 = 
tickî
 - 
tick
;

62  
dñè
 > 2;

63 
	}
}

65 
uöt16_t
 
	gcuºít_£q
 = 0;

67 
ölöe
 
boﬁ
 
	$is_£q_√wî
(c⁄° 
uöt16_t
 
£q
, c⁄° uöt16_à
íåy_£q
)

69 i‡(
£q
 =
íåy_£q
Ë 
Ál£
;

70 c⁄° 
uöt16_t
 
dñè
 = 
£q
 - 
íåy_£q
;

71  (
dñè
 & (1 << 15)) == 0;

72 
	}
}

79 
uöt16_t
 
	m£q
;

80 
uöt16_t
 
	mtick
;

81 
uöt8_t
 
	mëhno
;

82 
ù_addr
 
	mù_addr
;

83 } 
	tls_node_íåy_t
;

85 
boﬁ
 
	$ls_node_íåy_vÆid
(c⁄° 
ls_node_íåy_t
 *
íåy
)

87  
íåy
->
ù_addr
.
addr
 !0 && !
	`is_tick_expúed
”¡ry->
tick
);

88 
	}
}

90 
	$ls_node_íåy_upd©e
(
ls_node_íåy_t
 *
íåy
, c⁄° 
öt8_t
 
ëhno
, c⁄° 
uöt16_t
 
£q
, c⁄° 
ù_addr
 *ip_addr)

92 
íåy
->
£q
 = seq;

93 
íåy
->
tick
 = 
tickî
;

94 
íåy
->
ëhno
 =Éthno;

95 
íåy
->
ù_addr
.
addr
 = ip_addr->addr;

96 
	}
}

98 
boﬁ
 
	$ls_node_íåõs_upd©e
(

99 
ls_node_íåy_t
 *
íåõs
, c⁄° 
size_t
 
num_íåõs
,

100 c⁄° 
öt8_t
 
ëhno
, c⁄° 
uöt16_t
 
£q
, c⁄° 
ù_addr
 *ip_addr

103 
size_t
 
i
 = 0; i < 
num_íåõs
; i++)

105 i‡(!
	`ls_node_íåy_vÆid
(&
íåõs
[
i
]))

107 
	`ls_node_íåy_upd©e
(
íåõs
+
i
, 
ëhno
, 
£q
, 
ù_addr
);

108  
åue
;

111 i‡(
íåõs
[
i
].
ù_addr
.
addr
 =ù_addr->add∏&&É¡rõs[i].
ëhno
 ==Éthno)

113 i‡(
	`is_£q_√wî
(
£q
, 
íåõs
[
i
].seq))

115 
	`ls_node_íåy_upd©e
(
íåõs
+
i
, 
ëhno
, 
£q
, 
ù_addr
);

116  
åue
;

118  
Ál£
;

123 
	`memmove
(
íåõs
+1,É¡rõs, (
num_íåõs
-1)*(
ls_node_íåy_t
));

124 
	`ls_node_íåy_upd©e
(
íåõs
+0, 
ëhno
, 
£q
, 
ù_addr
);

125  
åue
;

126 
	}
}

131 
ls_node_íåy_t
 
	gls_nb‹s
[
LS_NUM_NBOR_ENTRIES
];

132 
ls_node_íåy_t
 
	gls_nodes
[
LS_NUM_NODE_ENTRIES
];

137 
ls_node_m≠pög_t
 
	gls_node_m≠s
[
LS_NUM_MAP_ENTRIES
];

139 c⁄° 
ls_node_m≠pög_t
 *
	$lök_°©e_rouã_gë_node_m≠pög
(
size_t
 *
Àngth
)

141 *
Àngth
 = 
	`Àngthof
(
ls_node_m≠s
);

142  
ls_node_m≠s
;

143 
	}
}

145 
	$add_node_m≠pög
(c⁄° 
ù_addr
 *
node
, c⁄° ù_add∏*
nb‹
)

150 
size_t
 
i
 = 0; i < 
	`Àngthof
(
ls_node_m≠s
); i++)

152 i‡(
ls_node_m≠s
[
i
].
node
.
addr
 == 0)

154 
ls_node_m≠s
[
i
].
node
.
addr
 =Çode->addr;

155 
ls_node_m≠s
[
i
].
nb‹
.
addr
 =Çbor->addr;

161 
	`memmove
(
ls_node_m≠s
+1,Üs_node_m≠s, ÷s_node_m≠sË- (
ls_node_m≠pög_t
));

162 
ls_node_m≠s
[0].
node
.
addr
 =Çode->addr;

163 
ls_node_m≠s
[0].
nb‹
.
addr
 =Çbor->addr;

164 
	}
}

166 
	$ªmove_node_m©ches
(c⁄° 
ù_addr
 *
node
)

170 
size_t
 
j
 = 0; j < 
	`Àngthof
(
ls_node_m≠s
); j++)

173 i‡(
ls_node_m≠s
[
j
].
node
.
addr
 ==Çode->addr)

175 
ls_node_m≠s
[
j
].
node
.
addr
 = 0;

176 
ls_node_m≠s
[
j
].
nb‹
.
addr
 = 0;

179 
	}
}

181 
	$upd©e_node_m≠pögs
(c⁄° 
ls_d©a_t
 *
ls_d©a
)

186 
size_t
 
i
 = 0; i < 
	`Àngthof
(
ls_nodes
); i++)

188 i‡(
ls_nodes
[
i
].
ù_addr
.
addr
 !0 && 
	`is_tick_expúed
÷s_nodes[i].
tick
))

190 
	`ªmove_node_m©ches
(&
ls_nodes
[
i
].
ù_addr
);

195 
	`ªmove_node_m©ches
(&
ls_d©a
->
node
);

198 
boﬁ
 
is_loˇl
 = 
Ál£
;

199 
size_t
 
e
 = 0;É < 
	`ëhî√t_nöãrÁ˚s
();É++)

201 i‡(
ls_d©a
->
node
.
addr
 =
	`u3_√t_°ack_gë_ù_addr
(
e
)->addrË
is_loˇl
 = 
åue
;

205 
size_t
 
i
 = 0; i < 
ls_d©a
->
num_nb‹s
; i++)

207 i‡(
is_loˇl
 && 
i
 < 
ls_d©a
->
num_p‹ts
) ;

208 
	`add_node_m≠pög
(&
ls_d©a
->
node
, &ls_d©a->
nb‹s
[
i
]);

210 
	}
}

215 
	$£nd_lök_°©e_d©a_to_Æl_√ighb‹s
(

216 c⁄° 
uöt8_t
 
ëhno
, c⁄° 
uöt16_t
 
£q
, c⁄° 
ls_d©a_t
 *
ls_d©a


219 i‡(!
	`ls_node_íåõs_upd©e
(
ls_nodes
, 
	`Àngthof
÷s_nodes), 
ëhno
, 
£q
, &
ls_d©a
->
node
)) ;

222 
	`upd©e_node_m≠pögs
(
ls_d©a
);

225 
size_t
 
i
 = 0; i < 
	`Àngthof
(
ls_nb‹s
); i++)

227 i‡(
ls_nb‹s
[
i
].
ù_addr
.
addr
 =
ls_d©a
->
node
.addr) ;

228 i‡(
	`ls_node_íåy_vÆid
(&
ls_nb‹s
[
i
]))

230 i‡(
	`ëhî√t_gë_lök_up
(
ls_nb‹s
[
i
].
ëhno
)Ë
	`u3_√t_°ack_£nd_icmp_pkt
(

231 
ls_nb‹s
[
i
].
ëhno
, 
ICMP_IRQ
, 0,

232 
LS_ID_INFORM
, 
£q
,

233 &(
ls_nb‹s
[
i
].
ù_addr
), 
ls_d©a
, 
	`sizeof_ls_d©a
(ls_data)

239 
	`lök_°©e_rouã_¥Ÿo_upd©e_cy˛e_ˇche
(
ëhno
);

240 
	}
}

245 
	$h™dÀ_icmp_ú
(

246 c⁄° 
uöt8_t
 
ëhno
,

247 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

248 c⁄° 
uöt16_t
 
id
, c⁄° uöt16_à
£q
,

249 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


251 
id
)

254 
LS_ID_DISCOVER
:

256 i‡(
	`ls_node_íåõs_upd©e
(
ls_nb‹s
, 
	`Àngthof
÷s_nb‹s), 
ëhno
, 
£q
, 
§c
)Ë
	`lök_°©e_rouã_¥Ÿo_Êood
(ethno);

259 
	}
}

264 
	$h™dÀ_icmp_úq
(

265 c⁄° 
uöt8_t
 
ëhno
,

266 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

267 c⁄° 
uöt16_t
 
id
, c⁄° uöt16_à
£q
,

268 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


270 
id
)

273 
LS_ID_DISCOVER
:

276 
	`u3_√t_°ack_£nd_icmp_pkt
(
ëhno
, 
ICMP_IR
, 0, 
id
, 
£q
, 
§c
, 
buff
, 
num_byãs
);

280 
LS_ID_INFORM
:

282 
	`£nd_lök_°©e_d©a_to_Æl_√ighb‹s
(
ëhno
, 
£q
, (c⁄° 
ls_d©a_t
 *)
buff
);

285 
	}
}

290 
	$lök_°©e_rouã_¥Ÿo_upd©e
(c⁄° 
uöt8_t
 
ëhno
)

294 
	`u3_√t_°ack_£nd_icmp_pkt
(

295 
ëhno
, 
ICMP_IRQ
, 0,

296 
LS_ID_DISCOVER
, 
cuºít_£q
++,

297 
	`u3_√t_°ack_gë_bˇ°
(
ëhno
), 
NULL
, 0

299 
	}
}

301 
	$lök_°©e_rouã_¥Ÿo_Êood
(c⁄° 
uöt8_t
 
ëhno
)

303 
size_t
 
e
 = 0;É < 
	`ëhî√t_nöãrÁ˚s
();É++)

306 
uöt8_t
 
buff
[
LS_PAYLOAD_MTU
] = {};

307 
ls_d©a_t
 *
ls_d©a
 = (ls_d©a_à*)
buff
;

308 
ls_d©a
->
node
.
addr
 = 
	`u3_√t_°ack_gë_ù_addr
(
e
)->addr;

309 
ls_d©a
->
num_nb‹s
 = 0;

310 
ls_d©a
->
num_p‹ts
 = 0;

313 
size_t
 
ej
 = 0;Éj < 
	`ëhî√t_nöãrÁ˚s
();Éj++)

315 i‡(
e
 =
ej
) ;

316 
ls_d©a
->
nb‹s
[ls_d©a->
num_nb‹s
++].
addr
 = 
	`u3_√t_°ack_gë_ù_addr
(
ej
)->addr;

317 
ls_d©a
->
num_p‹ts
++;

321 
size_t
 
i
 = 0; i < 
	`Àngthof
(
ls_nb‹s
); i++)

323 i‡((
	`sizeof_ls_d©a
(
ls_d©a
Ë+ 4Ë>
LS_PAYLOAD_MTU
) ;

324 i‡(
	`ls_node_íåy_vÆid
(&
ls_nb‹s
[
i
]Ë&&Üs_nb‹s[i].
ëhno
 =
e
)

326 
ls_d©a
->
nb‹s
[ls_d©a->
num_nb‹s
++].
addr
 = 
ls_nb‹s
[
i
].
ù_addr
.addr;

331 
	`£nd_lök_°©e_d©a_to_Æl_√ighb‹s
(
ëhno
, 
cuºít_£q
++, 
ls_d©a
);

333 
	}
}

338 
	$fﬁlow_löks
(c⁄° 
size_t
 
cuºít
, 
ù_addr
 *
nodes
, 
boﬁ
 *
visôed
, c⁄° size_à
num_nodes
)

340 i‡(
visôed
[
cuºít
]) ;

341 
visôed
[
cuºít
] = 
åue
;

344 
size_t
 
i
 = 0; i < 
	`Àngthof
(
ls_node_m≠s
); i++)

346 i‡(
ls_node_m≠s
[
i
].
node
.
addr
 !
nodes
[
cuºít
].addr) ;

349 
size_t
 
j
 = 0; j < 
num_nodes
; j++)

351 i‡(
nodes
[
j
].
addr
 !
ls_node_m≠s
[
i
].
nb‹
.addr) ;

352 
	`fﬁlow_löks
(
j
, 
nodes
, 
visôed
, 
num_nodes
);

355 
	}
}

357 
boﬁ
 
	$lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e
(c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
)

362 
size_t
 
num_nodes
 = 0;

363 
ù_addr
 
nodes
[
LS_NUM_MAP_ENTRIES
];

364 
size_t
 
i
 = 0; i < 
	`Àngthof
(
ls_node_m≠s
); i++)

366 i‡(
ls_node_m≠s
[
i
].
node
.
addr
 =0 ||Üs_node_m≠s[i].
nb‹
.addr == 0) ;

368 c⁄° 
ù_addr
 *
node
 = &
ls_node_m≠s
[
i
].node;

371 
size_t
 
j
 = 0; j < 
num_nodes
; j++)

373 i‡(
nodes
[
j
].
addr
 =
node
->addrË
skù_add
;

377 
nodes
[
num_nodes
++].
addr
 = 
node
->addr;

379 
skù_add
: ;

383 
boﬁ
 
visôed
[
LS_NUM_MAP_ENTRIES
];

384 
size_t
 
i
 = 0; i < 
num_nodes
; i++Ë
visôed
[i] = 
Ál£
;

387 
size_t
 
i
 = 0; i < 
num_nodes
; i++)

389 i‡(
nodes
[
i
].
addr
 =
§c
->addrË
	`fﬁlow_löks
(i,Çodes, 
visôed
, 
num_nodes
);

393 
size_t
 
i
 = 0; i < 
num_nodes
; i++)

395 i‡(
nodes
[
i
].
addr
 =
d°
->add∏&& 
visôed
[i])

398  
åue
;

403  
Ál£
;

404 
	}
}

406 
boﬁ
 
	gls_ˇu£s_cy˛e
[
NETHS
][NETHS];

408 
	$lök_°©e_rouã_¥Ÿo_upd©e_cy˛e_ˇche
(c⁄° 
uöt8_t
 
ëh_§c
)

410 
size_t
 
ëh_d°
 = 0;Éth_d° < 
	`ëhî√t_nöãrÁ˚s
();Éth_dst++)

412 i‡(
ëh_§c
 =
ëh_d°
) ;

413 
ls_ˇu£s_cy˛e
[
ëh_§c
][
ëh_d°
] = 
	`lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e
(

414 
	`u3_√t_°ack_gë_ù_addr
(
ëh_§c
),

415 
	`u3_√t_°ack_gë_ù_addr
(
ëh_d°
)

418 
	}
}

420 
boﬁ
 
	$lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e_ˇched
(c⁄° 
uöt8_t
 
ëh_§c
, c⁄° uöt8_à
ëh_d°
)

422  
ls_ˇu£s_cy˛e
[
ëh_§c
][
ëh_d°
];

423 
	}
}

428 
	$lök_°©e_rouã_¥Ÿo_öô
()

430 
	`u3_√t_°ack_ªgi°î_icmp_h™dÀr
(
ICMP_IRQ
, 0, &
h™dÀ_icmp_úq
);

431 
	`u3_√t_°ack_ªgi°î_icmp_h™dÀr
(
ICMP_IR
, 0, &
h™dÀ_icmp_ú
);

434 
size_t
 
i
 = 0; i < 
NETHS
; i++)

436 
size_t
 
j
 = 0; j < 
NETHS
; j++)

438 
ls_ˇu£s_cy˛e
[
i
][
j
] = 
åue
;

441 
	}
}

	@firmware/usrp3/lib/print_addrs.c

3 
	~<¥öt_addrs.h
>

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

6 
	~<¥ötf.h
>

8 
	#MAX_MAC_CHARS
 24

	)

9 
	#MAX_IP_CHARS
 16

	)

11 c⁄° 
	ghex
[16] = "0123456789ABCDEF";

13 *
	$mac_addr_to_°r_r
(c⁄° *
addr
, *
°r
)

15 
uöt8_t
 *
p
 = (uöt8_à*)
addr
;

16 
size_t
 
j
 = 0;

17 
size_t
 
i
 = 0; i < 6; i++)

19 i‡(
i
Ë
°r
[
j
++] = ':';

20 
°r
[
j
++] = 
hex
[(
p
[
i
] >> 4) & 0xf];

21 
°r
[
j
++] = 
hex
[
p
[
i
] & 0xf];

23 
°r
[
j
++] = '\0';

24  
°r
;

25 
	}
}

27 *
	$ù_addr_to_°r_r
(c⁄° *
addr
, *
°r
)

29 
uöt8_t
 *
p
 = (uöt8_à*)
addr
;

30 
	`•rötf
(
°r
, "%d.%d.%d.%d", 
p
[0],Ö[1],Ö[2],Ö[3]);

31  
°r
;

32 
	}
}

34 *
	$mac_addr_to_°r
(c⁄° *
addr
)

36 
size_t
 
ödex
 = 0;

37 
ödex
 = (index + 1) % 4;

38 
°r
[4][
MAX_MAC_CHARS
];

39  
	`mac_addr_to_°r_r
(
addr
, 
°r
[
ödex
]);

40 
	}
}

42 *
	$ù_addr_to_°r
(c⁄° *
addr
)

44 
size_t
 
ödex
 = 0;

45 
ödex
 = (index + 1) % 4;

46 
°r
[4][
MAX_IP_CHARS
];

47  
	`ù_addr_to_°r_r
(
addr
, 
°r
[
ödex
]);

48 
	}
}

	@firmware/usrp3/lib/printf.c

22 
	~"¥ötf.h
"

24 (*
	tputcf
) (*,);

25 
putcf
 
°dout_putf
;

26 * 
°dout_puç
;

28 #ifde‡
PRINTF_LONG_LONG_SUPPORT


30 
	$uŒi2a
(
num
, 
ba£
, 
uc
,* 
bf
)

32 
n
=0;

33 
d
=1;

34 
num
/
d
 >
ba£
)

35 
d
*=
ba£
;

36 
d
!=0) {

37 
dgt
 = 
num
 / 
d
;

38 
num
%=
d
;

39 
d
/=
ba£
;

40 i‡(
n
 || 
dgt
>0|| 
d
==0) {

41 *
bf
++ = 
dgt
+(dgt<10 ? '0' : (
uc
 ? 'A' : 'a')-10);

42 ++
n
;

45 *
bf
=0;

46 
	}
}

48 
	$Œi2a
 (
num
, * 
bf
)

50 i‡(
num
<0) {

51 
num
=-num;

52 *
bf
++ = '-';

54 
	`uŒi2a
(
num
,10,0,
bf
);

55 
	}
}

59 #ifde‡
PRINTF_LONG_SUPPORT


61 
	$uli2a
(
num
, 
ba£
, 
uc
,* 
bf
)

63 
n
=0;

64 
d
=1;

65 
num
/
d
 >
ba£
)

66 
d
*=
ba£
;

67 
d
!=0) {

68 
dgt
 = 
num
 / 
d
;

69 
num
%=
d
;

70 
d
/=
ba£
;

71 i‡(
n
 || 
dgt
>0|| 
d
==0) {

72 *
bf
++ = 
dgt
+(dgt<10 ? '0' : (
uc
 ? 'A' : 'a')-10);

73 ++
n
;

76 *
bf
=0;

77 
	}
}

79 
	$li2a
 (
num
, * 
bf
)

81 i‡(
num
<0) {

82 
num
=-num;

83 *
bf
++ = '-';

85 
	`uli2a
(
num
,10,0,
bf
);

86 
	}
}

90 
	$ui2a
(
num
, 
ba£
, 
uc
,* 
bf
)

92 
n
=0;

93 
d
=1;

94 
num
/
d
 >
ba£
)

95 
d
*=
ba£
;

96 
d
!=0) {

97 
dgt
 = 
num
 / 
d
;

98 
num
%
d
;

99 
d
/=
ba£
;

100 i‡(
n
 || 
dgt
>0 || 
d
==0) {

101 *
bf
++ = 
dgt
+(dgt<10 ? '0' : (
uc
 ? 'A' : 'a')-10);

102 ++
n
;

105 *
bf
=0;

106 
	}
}

108 
	$i2a
 (
num
, * 
bf
)

110 i‡(
num
<0) {

111 
num
=-num;

112 *
bf
++ = '-';

114 
	`ui2a
(
num
,10,0,
bf
);

115 
	}
}

117 
	$a2d
(
ch
)

119 i‡(
ch
>='0' && ch<='9')

120  
ch
-'0';

121 i‡(
ch
>='a' && ch<='f')

122  
ch
-'a'+10;

123 i‡(
ch
>='A' && ch<='F')

124  
ch
-'A'+10;

126 
	}
}

128 
	$a2i
(
ch
, ** 
§c
,
ba£
,* 
nump
)

130 * 
p
*
§c
;

131 
num
=0;

132 
digô
;

133 (
digô
=
	`a2d
(
ch
))>=0) {

134 i‡(
digô
>
ba£
) ;

135 
num
Úum*
ba£
+
digô
;

136 
ch
=*
p
++;

138 *
§c
=
p
;

139 *
nump
=
num
;

140  
ch
;

141 
	}
}

143 
	$putchw
(* 
puç
,
putcf
 
putf
,
n
, 
z
, * 
bf
)

145 
fc
=
z
? '0' : ' ';

146 
ch
;

147 * 
p
=
bf
;

148 *
p
++ && 
n
 > 0)

149 
n
--;

150 
n
-- > 0)

151 
	`putf
(
puç
,
fc
);

152 (
ch
*
bf
++))

153 
	`putf
(
puç
,
ch
);

154 
	}
}

156 
	$tÂ_f‹m©
(* 
puç
,
putcf
 
putf
,*
fmt
, 
va_li°
 
va
)

158 
bf
[12];

160 
ch
;

163 (
ch
=*(
fmt
++))) {

164 i‡(
ch
!='%')

165 
	`putf
(
puç
,
ch
);

167 
lz
=0;

168 #ifde‡ 
PRINTF_LONG_SUPPORT


169 
 g
=0;

171 #ifde‡ 
PRINTF_LONG_LONG_SUPPORT


172 
 g g
=0;

174 
w
=0;

175 
ch
=*(
fmt
++);

176 i‡(
ch
=='0') {

177 
ch
=*(
fmt
++);

178 
lz
=1;

180 i‡(
ch
>='0' && ch<='9') {

181 
ch
=
	`a2i
(ch,&
fmt
,10,&
w
);

183 #ifde‡ 
PRINTF_LONG_SUPPORT


184 i‡(
ch
=='l') {

185 
ch
=*(
fmt
++);

186 
 g
=1;

189 #ifde‡ 
PRINTF_LONG_LONG_SUPPORT


190 i‡((
ch
=='l')&&(
 g
==1)) {

191 
ch
=*(
fmt
++);

192 
 g g
=1;

195 
ch
) {

197 
ab‹t
;

199 #ifde‡ 
PRINTF_LONG_LONG_SUPPORT


200 i‡(
 g g
)

201 
	`uŒi2a
(
	`va_¨g
(
va
, ),10,0,
bf
);

204 #ifde‡ 
PRINTF_LONG_SUPPORT


205 i‡(
 g
)

206 
	`uli2a
(
	`va_¨g
(
va
, ),10,0,
bf
);

209 
	`ui2a
(
	`va_¨g
(
va
, ),10,0,
bf
);

210 
	`putchw
(
puç
,
putf
,
w
,
lz
,
bf
);

214 #ifde‡ 
PRINTF_LONG_LONG_SUPPORT


215 i‡(
 g g
)

216 
	`Œi2a
(
	`va_¨g
(
va
, ),
bf
);

219 #ifde‡ 
PRINTF_LONG_SUPPORT


220 i‡(
 g
)

221 
	`li2a
(
	`va_¨g
(
va
, ),
bf
);

224 
	`i2a
(
	`va_¨g
(
va
, ),
bf
);

225 
	`putchw
(
puç
,
putf
,
w
,
lz
,
bf
);

229 #ifde‡ 
PRINTF_LONG_LONG_SUPPORT


230 i‡(
 g g
)

231 
	`uŒi2a
(
	`va_¨g
(
va
, ),16,(
ch
=='X'),
bf
);

234 #ifde‡ 
PRINTF_LONG_SUPPORT


235 i‡(
 g
)

236 
	`uli2a
(
	`va_¨g
(
va
, ),16,(
ch
=='X'),
bf
);

239 
	`ui2a
(
	`va_¨g
(
va
, ),16,(
ch
=='X'),
bf
);

240 
	`putchw
(
puç
,
putf
,
w
,
lz
,
bf
);

243 
	`putf
(
puç
,()(
	`va_¨g
(
va
, )));

246 
	`putchw
(
puç
,
putf
,
w
,0,
	`va_¨g
(
va
, *));

249 
	`putf
(
puç
,
ch
);

255 
ab‹t
:;

256 
	}
}

259 
	$öô_¥ötf
(* 
puç
,(*
putf
) (*,))

261 
°dout_putf
=
putf
;

262 
°dout_puç
=
puç
;

263 
	}
}

265 
	$tÂ_¥ötf
(*
fmt
, ...)

267 
va_li°
 
va
;

268 
	`va_°¨t
(
va
,
fmt
);

269 
	`tÂ_f‹m©
(
°dout_puç
,
°dout_putf
,
fmt
,
va
);

270 
	`va_íd
(
va
);

271 
	}
}

273 
	$put˝
(* 
p
,
c
)

275 *(*((**)
p
))++ = 
c
;

276 
	}
}

280 
	$tÂ_•rötf
(* 
s
,*
fmt
, ...)

282 
va_li°
 
va
;

283 
	`va_°¨t
(
va
,
fmt
);

284 
	`tÂ_f‹m©
(&
s
,
put˝
,
fmt
,
va
);

285 
	`put˝
(&
s
,0);

286 
	`va_íd
(
va
);

287 
	}
}

	@firmware/usrp3/lib/u3_net_stack.c

4 
	~<u3_√t_°ack.h
>

5 
	~<°rög.h
>

6 
	~<åa˚.h
>

8 
	#MAX_NETHS
 4

	)

12 
∑dded_ëh_hdr_t
 
	mëh
;

13 
¨p_ëh_ùv4
 
	m¨p
;

14 } 
	t∑dded_¨p_t
;

18 
∑dded_ëh_hdr_t
 
	mëh
;

19 
ù_hdr
 
	mù
;

20 
icmp_echo_hdr
 
	micmp
;

21 } 
	t∑dded_icmp_t
;

25 
∑dded_ëh_hdr_t
 
	mëh
;

26 
ù_hdr
 
	mù
;

27 
udp_hdr
 
	mudp
;

28 } 
	t∑dded_udp_t
;

33 
	$h™dÀ_icmp_echo_∑ckë
(

34 c⁄° 
uöt8_t
 
ëhno
,

35 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

36 c⁄° 
uöt16_t
 
id
, c⁄° uöt16_à
£q
,

37 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


39 
	`u3_√t_°ack_£nd_icmp_pkt
(
ëhno
, 
ICMP_ER
, 0, 
id
, 
£q
, 
§c
, 
buff
, 
num_byãs
);

40 
	}
}

42 
h™dÀ_icmp_dur_∑ckë
(

43 c⁄° 
uöt8_t
 
ëhno
,

44 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

45 c⁄° 
uöt16_t
 
id
, c⁄° uöt16_à
£q
,

46 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


52 
uöt32_t
 
	$chksum_buf„r
(

53 
uöt16_t
 *
buf
, 
size_t
 
nsh‹ts
,

54 
uöt32_t
 
öôül_chksum


56 
uöt32_t
 
chksum
 = 
öôül_chksum
;

57 
size_t
 
i
 = 0; i < 
nsh‹ts
; i++Ë
chksum
 +
buf
[i];

59 
chksum
 >> 16) chksum = (chksum & 0xffff) + (chksum >> 16);

61  
chksum
;

62 
	}
}

67 
	#ARP_CACHE_NENTRIES
 32

	)

69 
size_t
 
	g¨p_ˇche_wr_ödex
;

71 
ù_addr
 
	g¨p_ˇche_ùs
[
ARP_CACHE_NENTRIES
];

72 
ëh_mac_addr_t
 
	g¨p_ˇche_macs
[
ARP_CACHE_NENTRIES
];

73 
uöt8_t
 
	g¨p_ˇche_ëhs
[
ARP_CACHE_NENTRIES
];

75 
	$u3_√t_°ack_¨p_ˇche_upd©e
(c⁄° 
ù_addr
 *ù_addr, c⁄° 
ëh_mac_addr_t
 *
mac_addr
, c⁄° 
uöt8_t
 
ëhno
)

77 
size_t
 
i
 = 0; i < 
ARP_CACHE_NENTRIES
; i++)

79 i‡(
	`memcmp
(
ù_addr
, 
¨p_ˇche_ùs
+
i
, (ip_addr)) == 0)

81 
	`mem˝y
(
¨p_ˇche_macs
+
i
, 
mac_addr
, (
ëh_mac_addr_t
));

82 
¨p_ˇche_ëhs
[
i
] = 
ëhno
;

86 i‡(
¨p_ˇche_wr_ödex
 >
ARP_CACHE_NENTRIES
)árp_cache_wr_index = 0;

87 
	`mem˝y
(
¨p_ˇche_ùs
+
¨p_ˇche_wr_ödex
, 
ù_addr
, (ip_addr));

88 
	`mem˝y
(
¨p_ˇche_macs
+
¨p_ˇche_wr_ödex
, 
mac_addr
, (
ëh_mac_addr_t
));

89 
¨p_ˇche_ëhs
[
¨p_ˇche_wr_ödex
] = 
ëhno
;

90 
¨p_ˇche_wr_ödex
++;

91 
	}
}

93 c⁄° 
ëh_mac_addr_t
 *
	$u3_√t_°ack_¨p_ˇche_lookup
(c⁄° 
ù_addr
 *ip_addr)

96 
size_t
 
e
 = 0;É < 
MAX_NETHS
;É++)

98 i‡(
	`memcmp
(
ù_addr
, 
	`u3_√t_°ack_gë_ù_addr
(
e
), (ip_addr)) == 0)

100  
	`u3_√t_°ack_gë_mac_addr
(
e
);

104 
size_t
 
i
 = 0; i < 
ARP_CACHE_NENTRIES
; i++)

106 i‡(
	`memcmp
(
ù_addr
, 
¨p_ˇche_ùs
+
i
, (ip_addr)) == 0)

108  &
¨p_ˇche_macs
[
i
];

111  
NULL
;

112 
	}
}

114 
boﬁ
 
	$ªsﬁve_ù
(c⁄° 
ù_addr
 *ù_addr, 
ëh_mac_addr_t
 *
mac_addr
)

116 
size_t
 
e
 = 0;É < 
MAX_NETHS
;É++)

118 i‡(
	`memcmp
(
	`u3_√t_°ack_gë_bˇ°
(
e
), 
ù_addr
, (ip_addr)) == 0)

120 
	`mem£t
(
mac_addr
, 0xff, (
ëh_mac_addr_t
));

121  
åue
;

124 c⁄° 
ëh_mac_addr_t
 *
r
 = 
	`u3_√t_°ack_¨p_ˇche_lookup
(
ù_addr
);

125 i‡(
r
 !
NULL
)

127 
	`mem˝y
(
mac_addr
, 
r
, (
ëh_mac_addr_t
));

128  
åue
;

130  
Ál£
;

131 
	}
}

136 
wb_pkt_iÁ˚64_c⁄fig_t
 *
	gpkt_iÁ˚_c⁄fig
 = 
NULL
;

138 
	$u3_√t_°ack_öô
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
)

140 
pkt_iÁ˚_c⁄fig
 = 
c⁄fig
;

141 
	`u3_√t_°ack_ªgi°î_icmp_h™dÀr
(
ICMP_ECHO
, 0, &
h™dÀ_icmp_echo_∑ckë
);

142 
	`u3_√t_°ack_ªgi°î_icmp_h™dÀr
(
ICMP_DUR
, 
ICMP_DUR_PORT
, &
h™dÀ_icmp_dur_∑ckë
);

143 
	}
}

145 
ù_addr
 
	g√t_c⁄f_ùs
[
MAX_NETHS
];

146 
ëh_mac_addr_t
 
	g√t_c⁄f_macs
[
MAX_NETHS
];

147 
ù_addr
 
	g√t_c⁄f_sub√ts
[
MAX_NETHS
];

148 
ù_addr
 
	g√t_c⁄f_bˇ°s
[
MAX_NETHS
];

149 
uöt32_t
 
	g√t_°©_cou¡s
[
MAX_NETHS
];

151 
	$u3_√t_°ack_öô_ëh
(

152 c⁄° 
uöt8_t
 
ëhno
,

153 c⁄° 
ëh_mac_addr_t
 *
mac
,

154 c⁄° 
ù_addr
 *
ù
,

155 c⁄° 
ù_addr
 *
sub√t


158 
	`mem˝y
(&
√t_c⁄f_macs
[
ëhno
], 
mac
, (
ëh_mac_addr_t
));

159 
	`mem˝y
(&
√t_c⁄f_ùs
[
ëhno
], 
ù
, (
ù_addr
));

160 
	`mem˝y
(&
√t_c⁄f_sub√ts
[
ëhno
], 
sub√t
, (
ù_addr
));

161 
√t_°©_cou¡s
[
ëhno
] = 0;

162 
	}
}

164 c⁄° 
ù_addr
 *
	$u3_√t_°ack_gë_ù_addr
(c⁄° 
uöt8_t
 
ëhno
)

166  &
√t_c⁄f_ùs
[
ëhno
];

167 
	}
}

169 c⁄° 
ù_addr
 *
	$u3_√t_°ack_gë_sub√t
(c⁄° 
uöt8_t
 
ëhno
)

171  &
√t_c⁄f_sub√ts
[
ëhno
];

172 
	}
}

174 c⁄° 
ù_addr
 *
	$u3_√t_°ack_gë_bˇ°
(c⁄° 
uöt8_t
 
ëhno
)

176 c⁄° 
uöt32_t
 
ù
 = 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
)->
addr
;

177 c⁄° 
uöt32_t
 
sub√t
 = 
	`u3_√t_°ack_gë_sub√t
(
ëhno
)->
addr
;

178 
√t_c⁄f_bˇ°s
[
ëhno
].
addr
 = 
ù
 | (~
sub√t
);

179  &
√t_c⁄f_bˇ°s
[
ëhno
];

180 
	}
}

182 c⁄° 
ëh_mac_addr_t
 *
	$u3_√t_°ack_gë_mac_addr
(c⁄° 
uöt8_t
 
ëhno
)

184  &
√t_c⁄f_macs
[
ëhno
];

185 
	}
}

190 
uöt32_t
 
	$u3_√t_°ack_gë_°©_cou¡s
(c⁄° 
uöt8_t
 
ëhno
)

192  
√t_°©_cou¡s
[
ëhno
];

193 
	}
}

195 
	$ö¸_°©_cou¡s
(c⁄° *
p
)

197 c⁄° 
∑dded_ëh_hdr_t
 *
ëh
 = (c⁄°Öadded_ëh_hdr_à*)
p
;

198 i‡(
ëh
->
ëhno
 < 
MAX_NETHS
Ë
√t_°©_cou¡s
[eth->ethno]++;

199 
	}
}

204 
	$£nd_ëh_pkt
(

205 c⁄° *
p0
, c⁄° 
size_t
 
l0
,

206 c⁄° *
p1
, c⁄° 
size_t
 
l1
,

207 c⁄° *
p2
, c⁄° 
size_t
 
l2


210 
	`ö¸_°©_cou¡s
(
p0
);

211 *
±r
 = 
	`wb_pkt_iÁ˚64_tx_˛aim
(
pkt_iÁ˚_c⁄fig
);

212 
size_t
 
buff_i
 = 0;

214 
uöt32_t
 *
buff32
 = (uöt32_à*)
±r
;

215 
size_t
 
i
 = 0; i < (
l0
+3)/4; i++)

217 
buff32
[
buff_i
++] = ((c⁄° 
uöt32_t
 *)
p0
)[
i
];

219 
size_t
 
i
 = 0; i < (
l1
+3)/4; i++)

221 
buff32
[
buff_i
++] = ((c⁄° 
uöt32_t
 *)
p1
)[
i
];

223 
size_t
 
i
 = 0; i < (
l2
+3)/4; i++)

225 
buff32
[
buff_i
++] = ((c⁄° 
uöt32_t
 *)
p2
)[
i
];

229 i‡((
buff_i
%2Ë=1Ë
buff32
[buff_i++] = 0;

231 
	`wb_pkt_iÁ˚64_tx_submô
(
pkt_iÁ˚_c⁄fig
, 
l0
 + 
l1
 + 
l2
);

232 
	}
}

237 
	$£nd_¨p_ª∂y
(

238 c⁄° 
uöt8_t
 
ëhno
,

239 c⁄° 
¨p_ëh_ùv4
 *
ªq
,

240 c⁄° 
ëh_mac_addr_t
 *
our_mac


242 
∑dded_¨p_t
 
ª∂y
;

243 
ª∂y
.
ëh
.
ëhno
 =Éthno;

244 
	`mem˝y
(&
ª∂y
.
ëh
.
d°
, (
ëh_mac_addr_t
 *)
ªq
->
¨_sha
, (eth_mac_addr_t));

245 
	`mem˝y
(&
ª∂y
.
ëh
.
§c
, 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
), (
ëh_mac_addr_t
));

246 
ª∂y
.
ëh
.
ëhîty≥
 = 
ETHERTYPE_ARP
;

248 
ª∂y
.
¨p
.
¨_hrd
 = 
ªq
->ar_hrd;

249 
ª∂y
.
¨p
.
¨_¥o
 = 
ªq
->ar_pro;

250 
ª∂y
.
¨p
.
¨_h 
 = 
ªq
->ar_hln;

251 
ª∂y
.
¨p
.
¨_∂n
 = 
ªq
->ar_pln;

252 
ª∂y
.
¨p
.
¨_›
 = 
ARPOP_REPLY
;

253 
	`mem˝y
(
ª∂y
.
¨p
.
¨_sha
, 
our_mac
, (
ëh_mac_addr_t
));

254 
	`mem˝y
(
ª∂y
.
¨p
.
¨_sù
, 
ªq
->
¨_tù
, (
ù_addr
));

255 
	`mem˝y
(
ª∂y
.
¨p
.
¨_tha
, 
ªq
->
¨_sha
, (
ëh_mac_addr_t
));

256 
	`mem˝y
(
ª∂y
.
¨p
.
¨_tù
, 
ªq
->
¨_sù
, (
ù_addr
));

258 
	`£nd_ëh_pkt
(&
ª∂y
, ‘ïly), 
NULL
, 0, NULL, 0);

259 
	}
}

261 
	$u3_√t_°ack_£nd_¨p_ªque°
(c⁄° 
uöt8_t
 
ëhno
, c⁄° 
ù_addr
 *
addr
)

263 
∑dded_¨p_t
 
ªq
;

264 
ªq
.
ëh
.
ëhno
 =Éthno;

265 
	`mem£t
(&
ªq
.
ëh
.
d°
, 0xff, (
ëh_mac_addr_t
));

266 
	`mem˝y
(&
ªq
.
ëh
.
§c
, 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
), (
ëh_mac_addr_t
));

267 
ªq
.
ëh
.
ëhîty≥
 = 
ETHERTYPE_ARP
;

269 
ªq
.
¨p
.
¨_hrd
 = 
ARPHRD_ETHER
;

270 
ªq
.
¨p
.
¨_¥o
 = 
ETHERTYPE_IPV4
;

271 
ªq
.
¨p
.
¨_h 
 = (
ëh_mac_addr_t
);

272 
ªq
.
¨p
.
¨_∂n
 = (
ù_addr
);

273 
ªq
.
¨p
.
¨_›
 = 
ARPOP_REQUEST
;

274 
	`mem˝y
(
ªq
.
¨p
.
¨_sha
, 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
), (
ëh_mac_addr_t
));

275 
	`mem˝y
(
ªq
.
¨p
.
¨_sù
, 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
), (
ù_addr
));

276 
	`mem£t
(
ªq
.
¨p
.
¨_tha
, 0x00, (
ëh_mac_addr_t
));

277 
	`mem˝y
(
ªq
.
¨p
.
¨_tù
, 
addr
, (
ù_addr
));

279 
	`£nd_ëh_pkt
(&
ªq
, ‘eq), 
NULL
, 0, NULL, 0);

280 
	}
}

282 
	$h™dÀ_¨p_∑ckë
(c⁄° 
uöt8_t
 
ëhno
, c⁄° 
¨p_ëh_ùv4
 *
p
)

284 
	`UHD_FW_TRACE
(
DEBUG
, "handle_arp_packet");

285 i‡(
p
->
¨_hrd
 !
ARPHRD_ETHER


286 || 
p
->
¨_¥o
 !
ETHERTYPE_IPV4


287 || 
p
->
¨_h 
 !(
ëh_mac_addr_t
)

288 || 
p
->
¨_∂n
 !(
ù_addr
))

292 i‡(
p
->
¨_›
 =
ARPOP_REPLY
)

294 
	`UHD_FW_TRACE
(
DEBUG
, "ARPOP_REPLY");

295 
ù_addr
 ip_addr;

296 
	`mem˝y
(&
ù_addr
, 
p
->
¨_sù
, (ip_addr));

297 
ëh_mac_addr_t
 
mac_addr
;

298 
	`mem˝y
(&
mac_addr
, 
p
->
¨_sha
, (mac_addr));

299 
	`u3_√t_°ack_¨p_ˇche_upd©e
(&
ù_addr
, &
mac_addr
, 
ëhno
);

303 i‡(
p
->
¨_›
 =
ARPOP_REQUEST
)

305 
	`UHD_FW_TRACE
(
DEBUG
, "ARPOP_REQUEST");

306 i‡(
	`memcmp
(
p
->
¨_tù
, 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
), (
ù_addr
)) == 0)

308 
	`£nd_¨p_ª∂y
(
ëhno
, 
p
, 
	`u3_√t_°ack_gë_mac_addr
(ethno));

311 
	}
}

316 
	#UDP_NHANDLERS
 16

	)

318 
uöt16_t
 
	gudp_h™dÀr_p‹ts
[
UDP_NHANDLERS
];

319 
u3_√t_°ack_udp_h™dÀr_t
 
	gudp_h™dÀrs
[
UDP_NHANDLERS
];

320 
size_t
 
	gudp_h™dÀrs_ödex
 = 0;

322 
	$u3_√t_°ack_ªgi°î_udp_h™dÀr
(

323 c⁄° 
uöt16_t
 
p‹t
,

324 c⁄° 
u3_√t_°ack_udp_h™dÀr_t
 
h™dÀr


327 i‡(
udp_h™dÀrs_ödex
 < 
UDP_NHANDLERS
)

329 
udp_h™dÀr_p‹ts
[
udp_h™dÀrs_ödex
] = 
p‹t
;

330 
udp_h™dÀrs
[
udp_h™dÀrs_ödex
] = 
h™dÀr
;

331 
udp_h™dÀrs_ödex
++;

333 
	}
}

335 
	$u3_√t_°ack_£nd_udp_pkt
(

336 c⁄° 
uöt8_t
 
ëhno
,

337 c⁄° 
ù_addr
 *
d°
,

338 c⁄° 
uöt16_t
 
§c_p‹t
,

339 c⁄° 
uöt16_t
 
d°_p‹t
,

340 c⁄° *
buff
,

341 c⁄° 
size_t
 
num_byãs


344 
ëh_mac_addr_t
 
d°_mac_addr
;

345 i‡(!
	`ªsﬁve_ù
(
d°
, &
d°_mac_addr
))

347 
	`UHD_FW_TRACE
(
WARN
, "u3_net_stack_send_udp_pktárp_cache_lookup fail");

351 
∑dded_udp_t
 
pkt
;

353 
pkt
.
ëh
.
ëhno
 =Éthno;

354 
	`mem˝y
(&
pkt
.
ëh
.
d°
, &
d°_mac_addr
, (
ëh_mac_addr_t
));

355 
	`mem˝y
(&
pkt
.
ëh
.
§c
, 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
), (
ëh_mac_addr_t
));

356 
pkt
.
ëh
.
ëhîty≥
 = 
ETHERTYPE_IPV4
;

358 
	`IPH_VHLTOS_SET
(&
pkt
.
ù
, 4, 5, 0);

359 
	`IPH_LEN_SET
(&
pkt
.
ù
, 
IP_HLEN
 + 
UDP_HLEN
 + 
num_byãs
);

360 
	`IPH_ID_SET
(&
pkt
.
ù
, 0);

361 
	`IPH_OFFSET_SET
(&
pkt
.
ù
, 
IP_DF
);

362 
	`IPH_TTL_SET
(&
pkt
.
ù
, 32);

363 
	`IPH_PROTO_SET
(&
pkt
.
ù
, 
IP_PROTO_UDP
);

364 
	`IPH_CHKSUM_SET
(&
pkt
.
ù
, 0);

365 
	`mem˝y
(&
pkt
.
ù
.
§c
, 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
), (
ù_addr
));

366 
	`mem˝y
(&
pkt
.
ù
.
de°
, 
d°
, (
ù_addr
));

368 
	`IPH_CHKSUM_SET
(&
pkt
.
ù
, ~
	`chksum_buf„r
(

369 (*Ë&
pkt
.
ù
, (pkt.ip)/(), 0

372 
pkt
.
udp
.
§c
 = 
§c_p‹t
;

373 
pkt
.
udp
.
de°
 = 
d°_p‹t
;

374 
pkt
.
udp
.
Àn
 = 
UDP_HLEN
 + 
num_byãs
;

375 
pkt
.
udp
.
chksum
 = 0;

377 
	`£nd_ëh_pkt
(&
pkt
, ’kt), 
buff
, 
num_byãs
, 
NULL
, 0);

378 
	}
}

380 
	$h™dÀ_udp_∑ckë
(

381 c⁄° 
uöt8_t
 
ëhno
,

382 c⁄° 
ù_addr
 *
§c
,

383 c⁄° 
ù_addr
 *
d°
,

384 c⁄° 
udp_hdr
 *
udp
,

385 c⁄° 
size_t
 
num_byãs


387 
size_t
 
i
 = 0; i < 
udp_h™dÀrs_ödex
; i++)

389 i‡(
udp_h™dÀr_p‹ts
[
i
] =
udp
->
de°
)

391 
udp_h™dÀrs
[
i
](

392 
ëhno
, 
§c
, 
	`u3_√t_°ack_gë_ù_addr
”thno), 
udp
->§c, udp->
de°
,

393 ((c⁄° 
uöt8_t
 *)
udp
Ë+ (
udp_hdr
),

394 
num_byãs
 - 
UDP_HLEN


399 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "Unh™dÀd UDPÖackë src=%u, de°=%u", 
udp
->
§c
, udp->
de°
);

401 
	}
}

406 
	#ICMP_NHANDLERS
 8

	)

408 
uöt8_t
 
	gicmp_h™dÀr_ty≥s
[
ICMP_NHANDLERS
];

409 
uöt8_t
 
	gicmp_h™dÀr_codes
[
ICMP_NHANDLERS
];

410 
u3_√t_°ack_icmp_h™dÀr_t
 
	gicmp_h™dÀrs
[
ICMP_NHANDLERS
];

411 
size_t
 
	gicmp_h™dÀrs_ödex
 = 0;

413 
	$u3_√t_°ack_ªgi°î_icmp_h™dÀr
(

414 c⁄° 
uöt8_t
 
ty≥
,

415 c⁄° 
uöt8_t
 
code
,

416 c⁄° 
u3_√t_°ack_icmp_h™dÀr_t
 
h™dÀr


419 i‡(
icmp_h™dÀrs_ödex
 < 
ICMP_NHANDLERS
)

421 
icmp_h™dÀr_ty≥s
[
icmp_h™dÀrs_ödex
] = 
ty≥
;

422 
icmp_h™dÀr_codes
[
icmp_h™dÀrs_ödex
] = 
code
;

423 
icmp_h™dÀrs
[
icmp_h™dÀrs_ödex
] = 
h™dÀr
;

424 
icmp_h™dÀrs_ödex
++;

426 
	}
}

428 
	$h™dÀ_icmp_∑ckë
(

429 c⁄° 
uöt8_t
 
ëhno
,

430 c⁄° 
ù_addr
 *
§c
,

431 c⁄° 
ù_addr
 *
d°
,

432 c⁄° 
icmp_echo_hdr
 *
icmp
,

433 c⁄° 
size_t
 
num_byãs


436 
size_t
 
i
 = 0; i < 
icmp_h™dÀrs_ödex
; i++)

438 i‡(
icmp_h™dÀr_ty≥s
[
i
] =
icmp
->
ty≥
 && 
icmp_h™dÀr_codes
[i] =icmp->
code
)

440 
icmp_h™dÀrs
[
i
](

441 
ëhno
, 
§c
, 
	`u3_√t_°ack_gë_ù_addr
”thno), 
icmp
->
id
, icmp->
£qno
,

442 ((c⁄° 
uöt8_t
 *)
icmp
Ë+ (
icmp_echo_hdr
),

443 
num_byãs
 - (
icmp_echo_hdr
)

448 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "Unh™dÀd ICMPÖackëÅy≥=%u", 
icmp
->
ty≥
);

449 
	}
}

451 
	$h™dÀ_icmp_dur_∑ckë
(

452 c⁄° 
uöt8_t
 
ëhno
,

453 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

454 c⁄° 
uöt16_t
 
id
, c⁄° uöt16_à
£q
,

455 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


457 
ù_hdr
 *
ù
 = (ù_hd∏*)
buff
;

458 
udp_hdr
 *
udp
 = (udp_hd∏*)(((*)
ù
Ë+ 
IP_HLEN
);

459 i‡(
	`IPH_PROTO
(
ù
Ë!
IP_PROTO_UDP
) ;

460 
size_t
 
i
 = 0; i < 
udp_h™dÀrs_ödex
; i++)

462 i‡(
udp_h™dÀr_p‹ts
[
i
] =
udp
->
§c
)

464 
udp_h™dÀrs
[
i
](
ëhno
,

465 
§c
, 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
),

466 
udp
->
§c
, udp->
de°
, 
NULL
, 0

471 
	}
}

473 
	$u3_√t_°ack_£nd_icmp_pkt
(

474 c⁄° 
uöt8_t
 
ëhno
,

475 c⁄° 
uöt8_t
 
ty≥
,

476 c⁄° 
uöt8_t
 
code
,

477 c⁄° 
uöt16_t
 
id
,

478 c⁄° 
uöt16_t
 
£q
,

479 c⁄° 
ù_addr
 *
d°
,

480 c⁄° *
buff
,

481 c⁄° 
size_t
 
num_byãs


484 
ëh_mac_addr_t
 
d°_mac_addr
;

485 i‡(!
	`ªsﬁve_ù
(
d°
, &
d°_mac_addr
))

487 
	`UHD_FW_TRACE
(
WARN
, "u3_net_stack_send_echo_requestárp_cache_lookup fail");

491 
∑dded_icmp_t
 
pkt
;

493 
pkt
.
ëh
.
ëhno
 =Éthno;

494 
	`mem˝y
(&
pkt
.
ëh
.
d°
, &
d°_mac_addr
, (
ëh_mac_addr_t
));

495 
	`mem˝y
(&
pkt
.
ëh
.
§c
, 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
), (
ëh_mac_addr_t
));

496 
pkt
.
ëh
.
ëhîty≥
 = 
ETHERTYPE_IPV4
;

498 
	`IPH_VHLTOS_SET
(&
pkt
.
ù
, 4, 5, 0);

499 
	`IPH_LEN_SET
(&
pkt
.
ù
, 
IP_HLEN
 + ’kt.
icmp
Ë+ 
num_byãs
);

500 
	`IPH_ID_SET
(&
pkt
.
ù
, 0);

501 
	`IPH_OFFSET_SET
(&
pkt
.
ù
, 
IP_DF
);

502 
	`IPH_TTL_SET
(&
pkt
.
ù
, 32);

503 
	`IPH_PROTO_SET
(&
pkt
.
ù
, 
IP_PROTO_ICMP
);

504 
	`IPH_CHKSUM_SET
(&
pkt
.
ù
, 0);

505 
	`mem˝y
(&
pkt
.
ù
.
§c
, 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
), (
ù_addr
));

506 
	`mem˝y
(&
pkt
.
ù
.
de°
, 
d°
, (
ù_addr
));

508 
	`IPH_CHKSUM_SET
(&
pkt
.
ù
, ~
	`chksum_buf„r
(

509 (*Ë&
pkt
.
ù
, (pkt.ip)/(), 0

512 
pkt
.
icmp
.
ty≥
 =Åype;

513 
pkt
.
icmp
.
code
 = code;

514 
pkt
.
icmp
.
chksum
 = 0;

515 
pkt
.
icmp
.
id
 = id;

516 
pkt
.
icmp
.
£qno
 = 
£q
;

517 
pkt
.
icmp
.
chksum
 = ~
	`chksum_buf„r
(

518 (*)
buff
,

519 
num_byãs
/(),

520 
	`chksum_buf„r
(

521 (*)&
pkt
.
icmp
,

522 (
pkt
.
icmp
)/(),

526 
	`£nd_ëh_pkt
(&
pkt
, ’kt), 
buff
, 
num_byãs
, 
NULL
, 0);

527 
	}
}

532 
	$h™dÀ_ëh_∑ckë
(c⁄° *
buff
, c⁄° 
size_t
 
num_byãs
)

534 c⁄° 
∑dded_ëh_hdr_t
 *
ëh_hdr
 = (∑dded_ëh_hdr_à*)
buff
;

535 c⁄° 
uöt8_t
 *
ëh_body
 = ((c⁄° uöt8_à*)
buff
Ë+ (
∑dded_ëh_hdr_t
);

536 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "h™dÀ_ëh_∑ckë gŸÉthîty≥ 0x%x", ()
ëh_hdr
->
ëhîty≥
);

538 i‡(
ëh_hdr
->
ëhîty≥
 =
ETHERTYPE_ARP
)

540 
	`UHD_FW_TRACE
(
DEBUG
, "eth_hdr->ethertype == ETHERTYPE_ARP");

541 c⁄° 
¨p_ëh_ùv4
 *
¨p
 = (c⁄° ¨p_ëh_ùv4 *)
ëh_body
;

542 
	`h™dÀ_¨p_∑ckë
(
ëh_hdr
->
ëhno
, 
¨p
);

544 i‡(
ëh_hdr
->
ëhîty≥
 =
ETHERTYPE_IPV4
)

546 
	`UHD_FW_TRACE
(
DEBUG
, "eth_hdr->ethertype == ETHERTYPE_IPV4");

547 c⁄° 
ù_hdr
 *
ù
 = (c⁄° ù_hd∏*)
ëh_body
;

548 c⁄° 
uöt8_t
 *
ù_body
 = 
ëh_body
 + 
IP_HLEN
;

550 i‡(
	`IPH_V
(
ù
Ë!4 || 
	`IPH_HL
(ip) != 5) ;

551 i‡(
	`IPH_OFFSET
(
ù
Ë& (
IP_MF
 | 
IP_OFFMASK
)) ;

555 
	`u3_√t_°ack_¨p_ˇche_upd©e
(&
ù
->
§c
, &
ëh_hdr
->§c,Éth_hdr->
ëhno
);

557 i‡(
	`IPH_PROTO
(
ù
Ë=
IP_PROTO_UDP
)

559 
	`h™dÀ_udp_∑ckë
(

560 
ëh_hdr
->
ëhno
, &
ù
->
§c
, &ù->
de°
,

561 (c⁄° 
udp_hdr
 *)
ù_body
,

562 
	`IPH_LEN
(
ù
Ë- 
IP_HLEN


566 i‡(
	`IPH_PROTO
(
ù
Ë=
IP_PROTO_ICMP
)

568 
	`h™dÀ_icmp_∑ckë
(

569 
ëh_hdr
->
ëhno
, &
ù
->
§c
, &ù->
de°
,

570 (c⁄° 
icmp_echo_hdr
 *)
ù_body
,

571 
	`IPH_LEN
(
ù
Ë- 
IP_HLEN


576 
	}
}

578 
	$u3_√t_°ack_h™dÀ_⁄e
()

580 
size_t
 
num_byãs
 = 0;

581 c⁄° *
±r
 = 
	`wb_pkt_iÁ˚64_rx_åy_˛aim
(
pkt_iÁ˚_c⁄fig
, &
num_byãs
);

582 i‡(
±r
 !
NULL
)

584 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "u3_√t_°ack_h™dÀ_⁄êgŸ %u byãs", ()
num_byãs
);

585 
	`ö¸_°©_cou¡s
(
±r
);

586 
	`h™dÀ_ëh_∑ckë
(
±r
, 
num_byãs
);

587 
	`wb_pkt_iÁ˚64_rx_ªÀa£
(
pkt_iÁ˚_c⁄fig
);

589 
	}
}

	@firmware/usrp3/lib/udp_uart.c

18 
	~<wb_u¨t.h
>

19 
	~<udp_u¨t.h
>

20 
	~<u3_√t_°ack.h
>

25 
	#MAX_NUM_UARTS
 4

	)

27 c⁄° 
size_t
 
	gnum_idÀ_cyc_b4_Êush
 = 22;

34 
uöt32_t
 
	mu¨t_ba£
;

35 
ù_addr
 
	mho°_addr
;

36 
	mho°_ëhno
;

37 
uöt16_t
 
	mho°_p‹t
;

38 
uöt16_t
 
	mloˇl_p‹t
;

39 
__©åibuã__
 ((
Æig√d
 (16))Ë
uöt8_t
 
	mbuf
[256];

40 
size_t
 
	mÀn
;

41 
size_t
 
	mcyc
;

42 } 
	tudp_u¨t_°©e_t
;

44 
udp_u¨t_°©e_t
 
	g_°©es
[
MAX_NUM_UARTS
];

46 
	$udp_u¨t_lookup
(c⁄° 
uöt16_t
 
p‹t
)

48 
size_t
 
i
 = 0; i < 
MAX_NUM_UARTS
; i++)

50 i‡(
_°©es
[
i
].
loˇl_p‹t
 =
p‹t
)  i;

53 
	}
}

58 
	$h™dÀ_u¨t_d©a_∑ckë
(

59 c⁄° 
uöt8_t
 
ëhno
,

60 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

61 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

62 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


65 i‡(
buff
 =
NULL
)

67 c⁄° 
size_t
 
which
 = 
	`udp_u¨t_lookup
(
§c_p‹t
);

68 i‡(
which
 == -1) ;

69 
_°©es
[
which
].
ho°_p‹t
 = 0;

75 c⁄° 
size_t
 
which
 = 
	`udp_u¨t_lookup
(
d°_p‹t
);

76 i‡(
which
 == -1) ;

77 
_°©es
[
which
].
ho°_ëhno
 = 
ëhno
;

78 
_°©es
[
which
].
ho°_addr
 = *
§c
;

79 
_°©es
[
which
].
ho°_p‹t
 = 
§c_p‹t
;

80 
size_t
 
i
 = 0; i < 
num_byãs
; i++)

82 c⁄° 
ch
 = ((c⁄° *)
buff
)[
i
];

83 i‡(
ch
 ='\n'Ë
	`wb_u¨t_putc
(
_°©es
[
which
].
u¨t_ba£
, ()'\r');

84 
	`wb_u¨t_putc
(
_°©es
[
which
].
u¨t_ba£
, ()
ch
);

85 
	`udp_u¨t_pﬁl
();

88 
	}
}

93 
	$udp_u¨t_öô
(c⁄° 
uöt32_t
 
u¨t_ba£
, c⁄° 
uöt16_t
 
udp_p‹t
)

95 
size_t
 
i
 = 0; i < 
MAX_NUM_UARTS
; i++)

97 i‡(
_°©es
[
i
].
u¨t_ba£
 != 0) ;

98 
_°©es
[
i
].
u¨t_ba£
 = uart_base;

99 
_°©es
[
i
].
loˇl_p‹t
 = 
udp_p‹t
;

100 
_°©es
[
i
].
ho°_p‹t
 = 0;

101 
_°©es
[
i
].
Àn
 = 0;

102 
_°©es
[
i
].
cyc
 = 0;

103 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
udp_p‹t
, &
h™dÀ_u¨t_d©a_∑ckë
);

106 
	}
}

111 
	$udp_u¨t_pﬁl
()

113 
size_t
 
i
 = 0; i < 
MAX_NUM_UARTS
; i++)

115 i‡(
_°©es
[
i
].
u¨t_ba£
 == 0) ;

117 
boﬁ
 
√wlöe
 = 
Ál£
;

118 
udp_u¨t_°©e_t
 *
°©e
 = &
_°©es
[
i
];

121 
size_t
 
j
 = 
°©e
->
Àn
; j < (°©e->
buf
); j++)

123 
ªt
 = 
	`wb_u¨t_gëc
(
°©e
->
u¨t_ba£
);

124 i‡(
ªt
 == -1) ;

125 
ch
 = (Ë
ªt
;

126 i‡(
ch
 ='\n' || ch ='\r'Ë
√wlöe
 = 
åue
;

127 
°©e
->
buf
[
j
] = 
ch
;

128 
°©e
->
Àn
++;

129 
°©e
->
cyc
 = 0;

133 i‡(
°©e
->
Àn
 == 0) ;

136 i‡(
√wlöe
 || 
°©e
->
cyc
++ > 
num_idÀ_cyc_b4_Êush
)

138 i‡(
°©e
->
ho°_p‹t
 !0Ë
	`u3_√t_°ack_£nd_udp_pkt
(

139 
°©e
->
ho°_ëhno
,

140 &
°©e
->
ho°_addr
,

141 
°©e
->
loˇl_p‹t
,

142 
°©e
->
ho°_p‹t
,

143 
°©e
->
buf
, sèã->
Àn


145 
°©e
->
Àn
 = 0;

146 
°©e
->
cyc
 = 0;

149 
	}
}

	@firmware/usrp3/lib/wb_i2c.c

23 
	~<wb_i2c.h
>

26 vﬁ©ûê
uöt32_t
 
	m¥esˇÀr_lo
;

27 vﬁ©ûê
uöt32_t
 
	m¥esˇÀr_hi
;

28 vﬁ©ûê
uöt32_t
 
	m˘æ
;

29 vﬁ©ûê
uöt32_t
 
	md©a
;

30 vﬁ©ûê
uöt32_t
 
	mcmd_°©us
;

31 } 
	ti2c_ªgs_t
;

33 
	#i2c_ªgs
 ((
i2c_ªgs_t
 *Ë
ba£
)

	)

35 
	#I2C_CTRL_EN
 (1 << 7)

36 
	#I2C_CTRL_IE
 (1 << 6)

37 

	)

41 
	#I2C_CMD_START
 (1 << 7)

42 
	#I2C_CMD_STOP
 (1 << 6)

43 
	#I2C_CMD_RD
 (1 << 5)

44 
	#I2C_CMD_WR
 (1 << 4)

45 
	#I2C_CMD_NACK
 (1 << 3)

46 
	#I2C_CMD_RSVD_2
 (1 << 2)

47 
	#I2C_CMD_RSVD_1
 (1 << 1)

48 
	#I2C_CMD_IACK
 (1 << 0)

49 

	)

50 
	#I2C_ST_RXACK
 (1 << 7)

51 
	#I2C_ST_BUSY
 (1 << 6)

52 
	#I2C_ST_AL
 (1 << 5)

53 
	#I2C_ST_RSVD_4
 (1 << 4)

54 
	#I2C_ST_RSVD_3
 (1 << 3)

55 
	#I2C_ST_RSVD_2
 (1 << 2)

56 
	#I2C_ST_TIP
 (1 << 1)

57 
	#I2C_ST_IP
 (1 << 0)

58 

	)

59 
	$wb_i2c_öô
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
size_t
 
˛k_øã
)

62 c⁄° 
uöt16_t
 
¥esˇÀr
 = (
˛k_øã
/(5 * 400000)) - 1;

63 
i2c_ªgs
->
¥esˇÀr_lo
 = 
¥esˇÀr
 & 0xff;

64 
i2c_ªgs
->
¥esˇÀr_hi
 = (
¥esˇÀr
 >> 8) & 0xff;

66 
i2c_ªgs
->
˘æ
 = 
I2C_CTRL_EN
;

67 
	}
}

69 
ölöe
 

70 
	$waô_f‹_x„r
(c⁄° 
uöt32_t
 
ba£
)

72 
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_TIP
)

74 
	}
}

76 
ölöe
 
boﬁ


77 
	$waô_chk_ack
(c⁄° 
uöt32_t
 
ba£
)

79 
	`waô_f‹_x„r
(
ba£
);

81 i‡((
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_RXACK
) != 0){

82  
Ál£
;

84  
åue
;

85 
	}
}

87 
boﬁ
 
	$wb_i2c_ªad
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
uöt8_t
 
i2c_addr
, uöt8_à*
buf
, 
size_t
 
Àn
)

89 i‡(
Àn
 == 0)

90  
åue
;

92 
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_BUSY
)

95 
i2c_ªgs
->
d©a
 = (
i2c_addr
 << 1) | 1;

97 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_START
;

98 i‡(!
	`waô_chk_ack
(
ba£
))

99 
Áû
;

101 ; 
Àn
 > 0; 
buf
++,Üen--){

102 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_RD
 | (
Àn
 =1 ? (
I2C_CMD_NACK
 | 
I2C_CMD_STOP
) : 0);

103 
	`waô_f‹_x„r
(
ba£
);

104 *
buf
 = 
i2c_ªgs
->
d©a
;

106  
åue
;

108 
Áû
:

109 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_STOP
;

110  
Ál£
;

111 
	}
}

113 
boﬁ
 
	$wb_i2c_wrôe
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
uöt8_t
 
i2c_addr
, c⁄° uöt8_à*
buf
, 
size_t
 
Àn
)

115 
i2c_ªgs
->
cmd_°©us
 & 
I2C_ST_BUSY
)

118 
i2c_ªgs
->
d©a
 = (
i2c_addr
 << 1) | 0;

121 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | 
I2C_CMD_START
 | (
Àn
 =0 ? 
I2C_CMD_STOP
 : 0);

122 i‡(!
	`waô_chk_ack
(
ba£
))

123 
Áû
;

125 ; 
Àn
 > 0; 
buf
++,Üen--){

126 
i2c_ªgs
->
d©a
 = *
buf
;

127 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_WR
 | (
Àn
 =1 ? 
I2C_CMD_STOP
 : 0);

128 i‡(!
	`waô_chk_ack
(
ba£
))

129 
Áû
;

131  
åue
;

133 
Áû
:

134 
i2c_ªgs
->
cmd_°©us
 = 
I2C_CMD_STOP
;

135  
Ál£
;

136 
	}
}

	@firmware/usrp3/lib/wb_pkt_iface64.c

3 
	~<wb_pkt_iÁ˚64.h
>

4 
	~<wb_utûs.h
>

5 
	~<¥ötf.h
>

7 
	#NUM_BYTES_MASK
 0x1fff

	)

9 
uöt32_t
 
	$gë_°©us
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
)

11  
	`wb_≥ek32
(
c⁄fig
->
c⁄fig_addr
);

12 
	}
}

14 
	$£t_c⁄åﬁ
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
)

16 
	`wb_poke32
(
c⁄fig
->
c⁄fig_addr
, c⁄fig->
˘æ
);

17 
	}
}

19 
wb_pkt_iÁ˚64_c⁄fig_t
 
	$wb_pkt_iÁ˚64_öô
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
size_t
 
˘æ_off£t
)

21 
wb_pkt_iÁ˚64_c⁄fig_t
 
c⁄fig
;

22 
c⁄fig
.
ba£
 = base;

23 
c⁄fig
.
˘æ
 = 0;

24 
c⁄fig
.
c⁄fig_addr
 = 
ba£
 + 
˘æ_off£t
;

25 
	`£t_c⁄åﬁ
(&
c⁄fig
);

26 
	`wb_pkt_iÁ˚64_rx_ªÀa£
(&
c⁄fig
);

27  
c⁄fig
;

28 
	}
}

30 c⁄° *
	$wb_pkt_iÁ˚64_rx_åy_˛aim
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
, 
size_t
 *
num_byãs
)

32 c⁄° 
uöt32_t
 
°©us
 = 
	`gë_°©us
(
c⁄fig
);

33 c⁄° 
uöt32_t
 
rx_°©e_Êag
 = (
°©us
 >> 31) & 0x1;

34 *
num_byãs
 = (
°©us
 & 
NUM_BYTES_MASK
);

36 i‡(
rx_°©e_Êag
 =0Ë 
NULL
;

37  (*)
c⁄fig
->
ba£
;

38 
	}
}

40 
	$wb_pkt_iÁ˚64_rx_ªÀa£
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
)

42 
c⁄fig
->
˘æ
 |= 1ul << 31;

43 
	`£t_c⁄åﬁ
(
c⁄fig
);

44 
åue
)

46 c⁄° 
uöt32_t
 
°©us
 = 
	`gë_°©us
(
c⁄fig
);

47 c⁄° 
uöt32_t
 
rx_°©e_Êag
 = (
°©us
 >> 31) & 0x1;

48 i‡(
rx_°©e_Êag
 == 0)

50 
c⁄fig
->
˘æ
 &= ~(1ul << 31);

51 
	`£t_c⁄åﬁ
(
c⁄fig
);

55 
	}
}

57 *
	$wb_pkt_iÁ˚64_tx_˛aim
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
)

59 
åue
)

61 c⁄° 
uöt32_t
 
°©us
 = 
	`gë_°©us
(
c⁄fig
);

62 c⁄° 
uöt32_t
 
tx_°©e_Êag
 = (
°©us
 >> 30) & 0x1;

63 i‡(
tx_°©e_Êag
 == 1) ;

65  (*)
c⁄fig
->
ba£
;

66 
	}
}

68 
	$wb_pkt_iÁ˚64_tx_submô
(
wb_pkt_iÁ˚64_c⁄fig_t
 *
c⁄fig
, 
size_t
 
num_byãs
)

70 
c⁄fig
->
˘æ
 |= (1ul << 30);

71 
c⁄fig
->
˘æ
 &~(
NUM_BYTES_MASK
);

72 i‡(
num_byãs
 & 0x7)Çum_bytes += 8;

73 
c⁄fig
->
˘æ
 |
num_byãs
 & 
NUM_BYTES_MASK
;

74 
	`£t_c⁄åﬁ
(
c⁄fig
);

77 
åue
)

79 c⁄° 
uöt32_t
 
°©us
 = 
	`gë_°©us
(
c⁄fig
);

80 c⁄° 
uöt32_t
 
tx_°©e_Êag
 = (
°©us
 >> 30) & 0x1;

81 i‡(
tx_°©e_Êag
 == 0) ;

84 
c⁄fig
->
˘æ
 &= ~(1ul << 30);

85 
	`£t_c⁄åﬁ
(
c⁄fig
);

87 
	}
}

	@firmware/usrp3/lib/wb_spi.c

18 
	~<wb_•i.h
>

19 
	~<åa˚.h
>

22 vﬁ©ûê
uöt32_t
 
	md©a0
;

23 vﬁ©ûê
uöt32_t
 
	md©a1
;

24 vﬁ©ûê
uöt32_t
 
	md©a2
;

25 vﬁ©ûê
uöt32_t
 
	md©a3
;

26 vﬁ©ûê
uöt32_t
 
	m˘æ_°©us
;

27 vﬁ©ûê
uöt32_t
 
	m˛kdiv
;

28 vﬁ©ûê
uöt32_t
 
	m¶ave£l
;

29 } 
	twb_•i_ªgs_t
;

31 
	#WB_SPI_REGS
(
ba£
Ë((
wb_•i_ªgs_t
 *Ëba£)

	)

34 
	#WB_SPI_CTRL_AUTO_SS
 (1 << 13)

	)

35 
	#WB_SPI_CTRL_IE
 (1 << 12)

	)

36 
	#WB_SPI_CTRL_LSB
 (1 << 11)

	)

37 
	#WB_SPI_CTRL_TXNEG
 (1 << 10)

	)

38 
	#WB_SPI_CTRL_RXNEG
 (1 << 9)

	)

39 
	#WB_SPI_CTRL_GO_BSY
 (1 << 8)

	)

40 
	#WB_SPI_CTRL_LENGTH
(
x
Ë(x & 0x7F)

	)

42 
ölöe
 
uöt32_t
 
	$_wb_•i_gë_Êags
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
)

44 
uöt32_t
 
Êags
 = 0;

47 i‡(
¶ave
->
mosi_edge
 =
RISING
Ë
Êags
 |
WB_SPI_CTRL_TXNEG
;

50 i‡(
¶ave
->
miso_edge
 =
RISING
Ë
Êags
 |
WB_SPI_CTRL_RXNEG
;

51 i‡(
¶ave
->
lsb_fú°
Ë
Êags
 |
WB_SPI_CTRL_LSB
;

52  
Êags
;

53 
	}
}

55 
ölöe
 
	$_waô_f‹_x„r
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
)

57 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˘æ_°©us
 & 
WB_SPI_CTRL_GO_BSY
) {

60 
	}
}

62 
	$wb_•i_öô
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
)

64 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˛kdiv
 = sœve->
˛k_div
;

65 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
¶ave£l
 = 0;

68 
uöt32_t
 
˘æ
 = 
	`WB_SPI_CTRL_LENGTH
(8Ë| 
	`_wb_•i_gë_Êags
(
¶ave
);

69 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˘æ_°©us
 = 
˘æ
 | 
WB_SPI_CTRL_GO_BSY
;

70 
	`_waô_f‹_x„r
(
¶ave
);

71 
	}
}

73 
	$_wb_•i_å™ß˘_buf
(

74 c⁄° 
wb_•i_¶ave_t
* 
¶ave
, 
wb_•i_rw_mode_t
 
rw_mode
,

75 c⁄° * 
mosi_buf
, * 
miso_buf
, 
uöt32_t
 
Àngth
,

76 
boﬁ
 
auto_¶ave_£l
)

78 i‡(
Àngth
 == 0) ;

81 
	`_waô_f‹_x„r
(
¶ave
);

84 i‡(
mosi_buf
) {

85 
uöt8_t
* 
mosi_byãs
 = (uöt8_t*Ë
mosi_buf
;

86 
uöt8_t
 
bôs_À·
 = 
Àngth
;

87 
uöt32_t
 
ªg_ödex
 = 0;Ñeg_index < 4;Ñeg_index++) {

88 
uöt32_t
 
w‹d
 = 0;

89 i‡(
bôs_À·
 < 32) {

90 i‡(
bôs_À·
 <= 8) {

91 
w‹d
 = (
uöt32_t
Ë
mosi_byãs
[0];

92 } i‡(
bôs_À·
 <= 16) {

93 
w‹d
 = (((
uöt32_t
Ë
mosi_byãs
[1]) << 0) |

94 (((
uöt32_t
Ë
mosi_byãs
[0]) << 8);

95 } i‡(
bôs_À·
 <= 24) {

96 
w‹d
 = (((
uöt32_t
Ë
mosi_byãs
[2]) << 0) |

97 (((
uöt32_t
Ë
mosi_byãs
[1]) << 8) |

98 (((
uöt32_t
Ë
mosi_byãs
[0]) << 16);

100 
w‹d
 = *((
uöt32_t
*Ë
mosi_byãs
);

102 
bôs_À·
 = 0;

104 
w‹d
 = *((
uöt32_t
*Ë
mosi_byãs
);

105 
mosi_byãs
 += 4;

106 
bôs_À·
 -= 32;

109 
ªg_ödex
) {

110 0: 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a0
 = 
w‹d
; ;

111 1: 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a1
 = 
w‹d
; ;

112 2: 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a2
 = 
w‹d
; ;

113 3: 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a3
 = 
w‹d
; ;

116 i‡(
bôs_À·
 == 0) ;

121 
uöt32_t
 
˘æ
 = 
	`WB_SPI_CTRL_LENGTH
(
Àngth
Ë| 
	`_wb_•i_gë_Êags
(
¶ave
);

122 i‡(
auto_¶ave_£l
Ë
˘æ
 |
WB_SPI_CTRL_AUTO_SS
;

123 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˘æ_°©us
 = 
˘æ
;

126 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
¶ave£l
 = sœve->
¶ave_£l
;

129 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˘æ_°©us
 = 
˘æ
 | 
WB_SPI_CTRL_GO_BSY
;

131 i‡(
rw_mode
 =
WRITE_READ
) {

133 
	`_waô_f‹_x„r
(
¶ave
);

135 i‡(
miso_buf
) {

137 
uöt8_t
* 
miso_byãs
 = (uöt8_t*Ë
miso_buf
;

138 
uöt8_t
 
bôs_À·
 = 
Àngth
;

139 
uöt32_t
 
ªg_ödex
 = 0;Ñeg_index < 4;Ñeg_index++) {

140 
uöt32_t
 
w‹d
 = 0;

141 
ªg_ödex
) {

142 0: 
w‹d
 = 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a0
; ;

143 1: 
w‹d
 = 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a1
; ;

144 2: 
w‹d
 = 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a2
; ;

145 3: 
w‹d
 = 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
d©a3
; ;

148 i‡(
bôs_À·
 < 32) {

149 i‡(
bôs_À·
 <= 8) {

150 
miso_byãs
[0] = 
w‹d
 & 0xFF;

151 } i‡(
bôs_À·
 <= 16) {

152 
miso_byãs
[1] = 
w‹d
 & 0xFF;

153 
miso_byãs
[0] = (
w‹d
 >> 8) & 0xFF;

154 } i‡(
bôs_À·
 <= 24) {

155 
miso_byãs
[2] = 
w‹d
 & 0xFF;

156 
miso_byãs
[1] = (
w‹d
 >> 8) & 0xFF;

157 
miso_byãs
[0] = (
w‹d
 >> 16) & 0xFF;

159 *((
uöt32_t
*Ë
miso_byãs
Ë
w‹d
;

161 
bôs_À·
 = 0;

163 *((
uöt32_t
*Ë
miso_byãs
Ë
w‹d
;

164 
miso_byãs
 += 4;

165 
bôs_À·
 -= 32;

168 i‡(
bôs_À·
 == 0) ;

172 
	}
}

174 
	$wb_•i_å™ß˘
(

175 c⁄° 
wb_•i_¶ave_t
* 
¶ave
, 
wb_•i_rw_mode_t
 
rw_mode
,

176 c⁄° * 
mosi_buf
, * 
miso_buf
, 
uöt32_t
 
Àngth
)

178  
	`_wb_•i_å™ß˘_buf
(
¶ave
, 
rw_mode
, 
mosi_buf
, 
miso_buf
, 
Àngth
, 
åue
);

179 
	}
}

181 
	$wb_•i_å™ß˘_m™_ss
(

182 c⁄° 
wb_•i_¶ave_t
* 
¶ave
, 
wb_•i_rw_mode_t
 
rw_mode
,

183 c⁄° * 
mosi_buf
, * 
miso_buf
, 
uöt32_t
 
Àngth
)

185  
	`_wb_•i_å™ß˘_buf
(
¶ave
, 
rw_mode
, 
mosi_buf
, 
miso_buf
, 
Àngth
, 
Ál£
);

186 
	}
}

188 
	$wb_•i_¶ave_£À˘
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
)

191 
	`_waô_f‹_x„r
(
¶ave
);

193 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˘æ_°©us
 = 
	`_wb_•i_gë_Êags
(slave);

195 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
¶ave£l
 = sœve->
¶ave_£l
;

196 
	}
}

198 
	$wb_•i_¶ave_de£À˘
(c⁄° 
wb_•i_¶ave_t
* 
¶ave
)

201 
	`_waô_f‹_x„r
(
¶ave
);

203 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
˘æ_°©us
 = 
	`_wb_•i_gë_Êags
(slave);

205 
	`WB_SPI_REGS
(
¶ave
->
ba£
)->
¶ave£l
 = 0;

206 
	}
}

	@firmware/usrp3/lib/wb_uart.c

3 
	~<wb_u¨t.h
>

4 
	~<wb_utûs.h
>

6 
loˇÕ¨am
 
	gSUART_CLKDIV
 = 0;

7 
loˇÕ¨am
 
	gSUART_TXLEVEL
 = 1;

8 
loˇÕ¨am
 
	gSUART_RXLEVEL
 = 2;

9 
loˇÕ¨am
 
	gSUART_TXCHAR
 = 3;

10 
loˇÕ¨am
 
	gSUART_RXCHAR
 = 4;

12 
	$wb_u¨t_öô
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
size_t
 
div
)

14 
	`wb_poke32
(
ba£
 + 
SUART_CLKDIV
*4, 
div
);

15 
	}
}

17 
	$wb_u¨t_putc
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
ch
)

19 
	`wb_≥ek32
(
ba£
 + 
SUART_TXLEVEL
*4) == 0);

20 
	`wb_poke32
(
ba£
 + 
SUART_TXCHAR
*4, 
ch
);

21 
	}
}

23 
boﬁ
 
	$wb_u¨t_åy_putc
(c⁄° 
uöt32_t
 
ba£
, c⁄° 
ch
)

25 i‡(
	`wb_≥ek32
(
ba£
 + 
SUART_TXLEVEL
*4Ë=0Ë 
Ál£
;

26 
	`wb_poke32
(
ba£
 + 
SUART_TXCHAR
*4, 
ch
);

27  
åue
;

28 
	}
}

30 
	$wb_u¨t_gëc
(c⁄° 
uöt32_t
 
ba£
)

32 i‡(
	`wb_≥ek32
(
ba£
 + 
SUART_RXLEVEL
*4) == 0)  -1;

33  
	`wb_≥ek32
(
ba£
 + 
SUART_RXCHAR
*4);

34 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/api_lib.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_NETCONN


46 
	~"lwù/≠i.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/memp.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

55 
	~<°rög.h
>

67 
√tc⁄n
*

68 
	$√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

70 
√tc⁄n
 *
c⁄n
;

71 
≠i_msg
 
msg
;

73 
c⁄n
 = 
	`√tc⁄n_Æloc
(
t
, 
ˇŒback
);

74 i‡(
c⁄n
 !
NULL
 ) {

75 
msg
.
fun˘i⁄
 = 
do_√wc⁄n
;

76 
msg
.msg.msg.
n
.
¥Ÿo
 =Öroto;

77 
msg
.msg.
c⁄n
 = conn;

78 
	`TCPIP_APIMSG
(&
msg
);

80 i‡(
c⁄n
->
îr
 !
ERR_OK
) {

81 
	`LWIP_ASSERT
("‰ìög c⁄¿wôhouà‰ìögÖcb", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

82 
	`LWIP_ASSERT
("c⁄¿ha†nÿ›_com∂ëed", 
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
);

83 
	`LWIP_ASSERT
("c⁄¿ha†nÿªcvmbox", 
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
);

84 
	`LWIP_ASSERT
("c⁄n->ac˚±mbox shouldn'àexi°", 
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
);

85 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

86 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

87 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

88  
NULL
;

91  
c⁄n
;

92 
	}
}

102 
îr_t


103 
	$√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
)

105 
≠i_msg
 
msg
;

108 i‡(
c⁄n
 =
NULL
) {

109  
ERR_OK
;

112 
msg
.
fun˘i⁄
 = 
do_dñc⁄n
;

113 
msg
.msg.
c⁄n
 = conn;

114 
	`t˝ù_≠imsg
(&
msg
);

116 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

117 
	`√tc⁄n_‰ì
(
c⁄n
);

119  
ERR_OK
;

120 
	}
}

133 
îr_t


134 
	$√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
)

136 
≠i_msg
 
msg
;

138 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

139 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

140 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidÖ‹t", (
p‹t
 !
NULL
),  
ERR_ARG
;);

142 
msg
.
fun˘i⁄
 = 
do_gëaddr
;

143 
msg
.msg.
c⁄n
 = conn;

144 
msg
.msg.msg.
ad
.
ùaddr
 = 
addr
;

145 
msg
.msg.msg.
ad
.
p‹t
 =Öort;

146 
msg
.msg.msg.
ad
.
loˇl
 =Üocal;

147 
	`TCPIP_APIMSG
(&
msg
);

149  
c⁄n
->
îr
;

150 
	}
}

162 
îr_t


163 
	$√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

165 
≠i_msg
 
msg
;

167 
	`LWIP_ERROR
("√tc⁄n_böd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

169 
msg
.
fun˘i⁄
 = 
do_böd
;

170 
msg
.msg.
c⁄n
 = conn;

171 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

172 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

173 
	`TCPIP_APIMSG
(&
msg
);

174  
c⁄n
->
îr
;

175 
	}
}

185 
îr_t


186 
	$√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

188 
≠i_msg
 
msg
;

190 
	`LWIP_ERROR
("√tc⁄n_c⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

192 
msg
.
fun˘i⁄
 = 
do_c⁄√˘
;

193 
msg
.msg.
c⁄n
 = conn;

194 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

195 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

197 
	`t˝ù_≠imsg
(&
msg
);

198  
c⁄n
->
îr
;

199 
	}
}

207 
îr_t


208 
	$√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
)

210 
≠i_msg
 
msg
;

212 
	`LWIP_ERROR
("√tc⁄n_disc⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

214 
msg
.
fun˘i⁄
 = 
do_disc⁄√˘
;

215 
msg
.msg.
c⁄n
 = conn;

216 
	`TCPIP_APIMSG
(&
msg
);

217  
c⁄n
->
îr
;

218 
	}
}

228 
îr_t


229 
	$√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
)

231 
≠i_msg
 
msg
;

234 
	`LWIP_UNUSED_ARG
(
backlog
);

236 
	`LWIP_ERROR
("√tc⁄n_li°í: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

238 
msg
.
fun˘i⁄
 = 
do_li°í
;

239 
msg
.msg.
c⁄n
 = conn;

240 #i‡
TCP_LISTEN_BACKLOG


241 
msg
.msg.msg.
lb
.
backlog
 = backlog;

243 
	`TCPIP_APIMSG
(&
msg
);

244  
c⁄n
->
îr
;

245 
	}
}

253 
√tc⁄n
 *

254 
	$√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
)

256 
√tc⁄n
 *
√wc⁄n
;

258 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

259 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidác˚±mbox", (
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
),  
NULL
;);

261 #i‡
LWIP_SO_RCVTIMEO


262 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, c⁄n->
ªcv_timeout
Ë=
SYS_ARCH_TIMEOUT
) {

263 
√wc⁄n
 = 
NULL
;

266 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, 0);

270 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

272 #i‡
TCP_LISTEN_BACKLOG


273 i‡(
√wc⁄n
 !
NULL
) {

275 
≠i_msg
 
msg
;

276 
msg
.
fun˘i⁄
 = 
do_ªcv
;

277 
msg
.msg.
c⁄n
 = conn;

278 
	`TCPIP_APIMSG
(&
msg
);

283  
√wc⁄n
;

284 
	}
}

292 
√tbuf
 *

293 
	$√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
)

295 
≠i_msg
 
msg
;

296 
√tbuf
 *
buf
 = 
NULL
;

297 
pbuf
 *
p
;

298 
u16_t
 
Àn
;

300 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

302 i‡(
c⁄n
->
ªcvmbox
 =
SYS_MBOX_NULL
) {

305 
c⁄n
->
îr
 = 
ERR_CONN
;

306  
NULL
;

309 i‡(
	`ERR_IS_FATAL
(
c⁄n
->
îr
)) {

310  
NULL
;

313 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

314 #i‡
LWIP_TCP


315 i‡(
c⁄n
->
°©e
 =
NETCONN_LISTEN
) {

317 
c⁄n
->
îr
 = 
ERR_CONN
;

318  
NULL
;

321 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

323 i‡(
buf
 =
NULL
) {

324 
c⁄n
->
îr
 = 
ERR_MEM
;

325  
NULL
;

328 #i‡
LWIP_SO_RCVTIMEO


329 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

330 
c⁄n
->
îr
 = 
ERR_TIMEOUT
;

331 
p
 = 
NULL
;

334 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, 0);

337 i‡(
p
 !
NULL
) {

338 
Àn
 = 
p
->
tŸ_Àn
;

339 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

341 
Àn
 = 0;

345 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
Àn
);

348 i‡(
p
 =
NULL
) {

349 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

351 i‡(
c⁄n
->
îr
 =
ERR_OK
) {

352 
c⁄n
->
îr
 = 
ERR_CLSD
;

354  
NULL
;

357 
buf
->
p
 =Ö;

358 
buf
->
±r
 = 
p
;

359 
buf
->
p‹t
 = 0;

360 
buf
->
addr
 = 
NULL
;

363 
msg
.
fun˘i⁄
 = 
do_ªcv
;

364 
msg
.msg.
c⁄n
 = conn;

365 i‡(
buf
 !
NULL
) {

366 
msg
.msg.msg.
r
.
Àn
 = 
buf
->
p
->
tŸ_Àn
;

368 
msg
.msg.msg.
r
.
Àn
 = 1;

370 
	`TCPIP_APIMSG
(&
msg
);

373 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

374 #i‡
LWIP_SO_RCVTIMEO


375 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

376 
buf
 = 
NULL
;

379 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, 0);

381 i‡(
buf
!=
NULL
) {

382 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
buf
->
p
->
tŸ_Àn
);

384 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
buf
->
p
->
tŸ_Àn
);

389 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_ªcv:Ñe˚ived %∞”º %d)\n", (*)
buf
, 
c⁄n
->
îr
));

391  
buf
;

392 
	}
}

404 
îr_t


405 
	$√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

407 i‡(
buf
 !
NULL
) {

408 
buf
->
addr
 =áddr;

409 
buf
->
p‹t
 =Öort;

410  
	`√tc⁄n_£nd
(
c⁄n
, 
buf
);

412  
ERR_VAL
;

413 
	}
}

422 
îr_t


423 
	$√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
)

425 
≠i_msg
 
msg
;

427 
	`LWIP_ERROR
("√tc⁄n_£nd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

429 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_£nd: sídög %"
U16_F
" byãs\n", 
buf
->
p
->
tŸ_Àn
));

430 
msg
.
fun˘i⁄
 = 
do_£nd
;

431 
msg
.msg.
c⁄n
 = conn;

432 
msg
.msg.msg.
b
 = 
buf
;

433 
	`TCPIP_APIMSG
(&
msg
);

434  
c⁄n
->
îr
;

435 
	}
}

448 
îr_t


449 
	$√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
, 
u8_t
 
≠iÊags
)

451 
≠i_msg
 
msg
;

453 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

454 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n->ty≥", (
c⁄n
->
ty≥
 =
NETCONN_TCP
),  
ERR_VAL
;);

456 
msg
.
fun˘i⁄
 = 
do_wrôe
;

457 
msg
.msg.
c⁄n
 = conn;

458 
msg
.msg.msg.
w
.
d©≠å
 = dataptr;

459 
msg
.msg.msg.
w
.
≠iÊags
 =ápiflags;

460 
msg
.msg.msg.
w
.
Àn
 = 
size
;

464 
	`TCPIP_APIMSG
(&
msg
);

465  
c⁄n
->
îr
;

466 
	}
}

474 
îr_t


475 
	$√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
)

477 
≠i_msg
 
msg
;

479 
	`LWIP_ERROR
("√tc⁄n_˛o£: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

481 
msg
.
fun˘i⁄
 = 
do_˛o£
;

482 
msg
.msg.
c⁄n
 = conn;

483 
	`t˝ù_≠imsg
(&
msg
);

484  
c⁄n
->
îr
;

485 
	}
}

487 #i‡
LWIP_IGMP


498 
îr_t


499 
	$√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
,

500 
ù_addr
 *
mu…üddr
,

501 
ù_addr
 *
öãrÁ˚
,

502 
√tc⁄n_igmp
 
joö_‹_Àave
)

504 
≠i_msg
 
msg
;

506 
	`LWIP_ERROR
("√tc⁄n_joö_Àave_group: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

508 
msg
.
fun˘i⁄
 = 
do_joö_Àave_group
;

509 
msg
.msg.
c⁄n
 = conn;

510 
msg
.msg.msg.
jl
.
mu…üddr
 = multiaddr;

511 
msg
.msg.msg.
jl
.
öãrÁ˚
 = interface;

512 
msg
.msg.msg.
jl
.
joö_‹_Àave
 = join_or_leave;

513 
	`TCPIP_APIMSG
(&
msg
);

514  
c⁄n
->
îr
;

515 
	}
}

518 #i‡
LWIP_DNS


529 
îr_t


530 
	$√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
)

532 
dns_≠i_msg
 
msg
;

533 
îr_t
 
îr
;

534 
sys_£m_t
 
£m
;

536 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidÇame", (
«me
 !
NULL
),  
ERR_ARG
;);

537 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

539 
£m
 = 
	`sys_£m_√w
(0);

540 i‡(
£m
 =
SYS_SEM_NULL
) {

541  
ERR_MEM
;

544 
msg
.
«me
 =Çame;

545 
msg
.
addr
 =áddr;

546 
msg
.
îr
 = &err;

547 
msg
.
£m
 = sem;

549 
	`t˝ù_ˇŒback
(
do_gëho°by«me
, &
msg
);

550 
	`sys_£m_waô
(
£m
);

551 
	`sys_£m_‰ì
(
£m
);

553  
îr
;

554 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/api_msg.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/≠i_msg.h
"

45 
	~"lwù/ù.h
"

46 
	~"lwù/udp.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/øw.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/igmp.h
"

53 
	~"lwù/dns.h
"

55 
	~<°rög.h
>

58 #i‡
LWIP_TCP


59 
îr_t
 
do_wrôem‹e
(
√tc⁄n
 *
c⁄n
);

60 
do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
);

63 #i‡
LWIP_RAW


71 
u8_t


72 
	$ªcv_øw
(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

73 
ù_addr
 *
addr
)

75 
pbuf
 *
q
;

76 
√tbuf
 *
buf
;

77 
√tc⁄n
 *
c⁄n
;

78 #i‡
LWIP_SO_RCVBUF


79 
ªcv_avaû
;

82 
	`LWIP_UNUSED_ARG
(
addr
);

83 
c⁄n
 = 
¨g
;

85 #i‡
LWIP_SO_RCVBUF


86 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

87 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
) &&

88 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë<
c⁄n
->
ªcv_bufsize
)) {

90 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
)) {

93 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

94 if(
q
 !
NULL
) {

95 i‡(
	`pbuf_c›y
(
q
, 
p
Ë!
ERR_OK
) {

96 
	`pbuf_‰ì
(
q
);

97 
q
 = 
NULL
;

101 if(
q
 !
NULL
) {

102 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

103 i‡(
buf
 =
NULL
) {

104 
	`pbuf_‰ì
(
q
);

108 
buf
->
p
 = 
q
;

109 
buf
->
±r
 = 
q
;

110 
buf
->
addr
 = &(((
ù_hdr
*)(
q
->
∑ylﬂd
))->
§c
);

111 
buf
->
p‹t
 = 
pcb
->
¥Ÿocﬁ
;

113 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

114 
	`√tbuf_dñëe
(
buf
);

117 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
q
->
tŸ_Àn
);

119 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
q
->
tŸ_Àn
);

125 
	}
}

128 #i‡
LWIP_UDP


136 
	$ªcv_udp
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

137 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

139 
√tbuf
 *
buf
;

140 
√tc⁄n
 *
c⁄n
;

141 #i‡
LWIP_SO_RCVBUF


142 
ªcv_avaû
;

145 
	`LWIP_UNUSED_ARG
(
pcb
);

146 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê®pcbárgumít", 
pcb
 !
NULL
);

147 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê™árgumít", 
¨g
 !
NULL
);

148 
c⁄n
 = 
¨g
;

149 
	`LWIP_ASSERT
("ªcv_udp:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
udp
 ==Öcb);

151 #i‡
LWIP_SO_RCVBUF


152 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

153 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
) ||

154 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
)) {

156 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

158 
	`pbuf_‰ì
(
p
);

162 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

163 i‡(
buf
 =
NULL
) {

164 
	`pbuf_‰ì
(
p
);

167 
buf
->
p
 =Ö;

168 
buf
->
±r
 = 
p
;

169 
buf
->
addr
 =áddr;

170 
buf
->
p‹t
 =Öort;

173 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

174 
	`√tbuf_dñëe
(
buf
);

177 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
p
->
tŸ_Àn
);

179 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
p
->
tŸ_Àn
);

181 
	}
}

184 #i‡
LWIP_TCP


191 
îr_t


192 
	$ªcv_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

194 
√tc⁄n
 *
c⁄n
;

195 
u16_t
 
Àn
;

197 
	`LWIP_UNUSED_ARG
(
pcb
);

198 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê®pcbárgumít", 
pcb
 !
NULL
);

199 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê™árgumít", 
¨g
 !
NULL
);

200 
c⁄n
 = 
¨g
;

201 
	`LWIP_ASSERT
("ªcv_t˝:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
t˝
 ==Öcb);

203 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

204  
ERR_VAL
;

207 
c⁄n
->
îr
 =Érr;

208 i‡(
p
 !
NULL
) {

209 
Àn
 = 
p
->
tŸ_Àn
;

210 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

212 
Àn
 = 0;

215 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
p
Ë!
ERR_OK
) {

216  
ERR_MEM
;

219 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

222  
ERR_OK
;

223 
	}
}

236 
îr_t


237 
	$pﬁl_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
)

239 
√tc⁄n
 *
c⁄n
 = 
¨g
;

241 
	`LWIP_UNUSED_ARG
(
pcb
);

242 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

244 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

245 
	`do_wrôem‹e
(
c⁄n
);

246 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

247 
	`do_˛o£_öã∫Æ
(
c⁄n
);

250  
ERR_OK
;

251 
	}
}

260 
îr_t


261 
	$£¡_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

263 
√tc⁄n
 *
c⁄n
 = 
¨g
;

265 
	`LWIP_UNUSED_ARG
(
pcb
);

266 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

268 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

269 
	`LWIP_ASSERT
("c⁄n->pcb.t˝ !NULL", 
c⁄n
->
pcb
.
t˝
 !
NULL
);

270 
	`do_wrôem‹e
(
c⁄n
);

271 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

272 
	`do_˛o£_öã∫Æ
(
c⁄n
);

275 i‡(
c⁄n
) {

276 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
)) {

277 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 
Àn
);

281  
ERR_OK
;

282 
	}
}

292 
	$îr_t˝
(*
¨g
, 
îr_t
 
îr
)

294 
√tc⁄n
 *
c⁄n
;

296 
c⁄n
 = 
¨g
;

297 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

299 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

301 
c⁄n
->
îr
 =Érr;

302 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

304 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

305 
	`sys_mbox_po°
(
c⁄n
->
ªcvmbox
, 
NULL
);

307 i‡(
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
 && c⁄n->
°©e
 =
NETCONN_CONNECT
) {

308 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

309 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

311 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

313 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

314 
	`sys_mbox_po°
(
c⁄n
->
ac˚±mbox
, 
NULL
);

316 i‡((
c⁄n
->
°©e
 =
NETCONN_WRITE
Ë|| (c⁄n->°©ê=
NETCONN_CLOSE
)) {

319 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

321 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

323 
	}
}

332 
	$£tup_t˝
(
√tc⁄n
 *
c⁄n
)

334 
t˝_pcb
 *
pcb
;

336 
pcb
 = 
c⁄n
->pcb.
t˝
;

337 
	`t˝_¨g
(
pcb
, 
c⁄n
);

338 
	`t˝_ªcv
(
pcb
, 
ªcv_t˝
);

339 
	`t˝_£¡
(
pcb
, 
£¡_t˝
);

340 
	`t˝_pﬁl
(
pcb
, 
pﬁl_t˝
, 4);

341 
	`t˝_îr
(
pcb
, 
îr_t˝
);

342 
	}
}

350 
îr_t


351 
	$ac˚±_fun˘i⁄
(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

353 
√tc⁄n
 *
√wc⁄n
;

354 
√tc⁄n
 *
c⁄n
;

356 #i‡
API_MSG_DEBUG


357 #i‡
TCP_DEBUG


358 
	`t˝_debug_¥öt_°©e
(
√wpcb
->
°©e
);

361 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

363 
	`LWIP_ERROR
("accept_function: invalid conn->acceptmbox",

364 
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
,  
ERR_VAL
;);

368 
√wc⁄n
 = 
	`√tc⁄n_Æloc
(
c⁄n
->
ty≥
, c⁄n->
ˇŒback
);

369 i‡(
√wc⁄n
 =
NULL
) {

370  
ERR_MEM
;

372 
√wc⁄n
->
pcb
.
t˝
 = 
√wpcb
;

373 
	`£tup_t˝
(
√wc⁄n
);

374 
√wc⁄n
->
îr
 =Érr;

376 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ac˚±mbox
, 
√wc⁄n
Ë!
ERR_OK
) {

379 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

380 
	`√tc⁄n_‰ì
(
√wc⁄n
);

381  
ERR_MEM
;

384 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

387  
ERR_OK
;

388 
	}
}

398 
îr_t


399 
	$pcb_√w
(
≠i_msg_msg
 *
msg
)

401 
msg
->
c⁄n
->
îr
 = 
ERR_OK
;

403 
	`LWIP_ASSERT
("pcb_√w:ÖcbáÃódyáŒoˇãd", 
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
);

406 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

407 #i‡
LWIP_RAW


408 
NETCONN_RAW
:

409 
msg
->
c⁄n
->
pcb
.
øw
 = 
	`øw_√w
(msg->msg.
n
.
¥Ÿo
);

410 if(
msg
->
c⁄n
->
pcb
.
øw
 =
NULL
) {

411 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

414 
	`øw_ªcv
(
msg
->
c⁄n
->
pcb
.
øw
, 
ªcv_øw
, msg->conn);

417 #i‡
LWIP_UDP


418 
NETCONN_UDP
:

419 
msg
->
c⁄n
->
pcb
.
udp
 = 
	`udp_√w
();

420 if(
msg
->
c⁄n
->
pcb
.
udp
 =
NULL
) {

421 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

424 #i‡
LWIP_UDPLITE


425 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPLITE
) {

426 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_UDPLITE
);

429 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPNOCHKSUM
) {

430 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_NOCHKSUM
);

432 
	`udp_ªcv
(
msg
->
c⁄n
->
pcb
.
udp
, 
ªcv_udp
, msg->conn);

435 #i‡
LWIP_TCP


436 
NETCONN_TCP
:

437 
msg
->
c⁄n
->
pcb
.
t˝
 = 
	`t˝_√w
();

438 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

439 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

442 
	`£tup_t˝
(
msg
->
c⁄n
);

447 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

451  
msg
->
c⁄n
->
îr
;

452 
	}
}

461 
	$do_√wc⁄n
(
≠i_msg_msg
 *
msg
)

463 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

464 
	`pcb_√w
(
msg
);

470 
	`TCPIP_APIMSG_ACK
(
msg
);

471 
	}
}

483 
√tc⁄n
*

484 
	$√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

486 
√tc⁄n
 *
c⁄n
;

487 
size
;

489 
c⁄n
 = 
	`memp_mÆloc
(
MEMP_NETCONN
);

490 i‡(
c⁄n
 =
NULL
) {

491  
NULL
;

494 
c⁄n
->
îr
 = 
ERR_OK
;

495 
c⁄n
->
ty≥
 = 
t
;

496 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

498 #i‡(
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_UDP_RECVMBOX_SIZE
) && \

499 (
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_TCP_RECVMBOX_SIZE
)

500 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

502 
	`NETCONNTYPE_GROUP
(
t
)) {

503 #i‡
LWIP_RAW


504 
NETCONN_RAW
:

505 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

508 #i‡
LWIP_UDP


509 
NETCONN_UDP
:

510 
size
 = 
DEFAULT_UDP_RECVMBOX_SIZE
;

513 #i‡
LWIP_TCP


514 
NETCONN_TCP
:

515 
size
 = 
DEFAULT_TCP_RECVMBOX_SIZE
;

519 
	`LWIP_ASSERT
("netconn_alloc: undefinedÇetconn_type", 0);

524 i‡((
c⁄n
->
›_com∂ëed
 = 
	`sys_£m_√w
(0)Ë=
SYS_SEM_NULL
) {

525 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

526  
NULL
;

528 i‡((
c⁄n
->
ªcvmbox
 = 
	`sys_mbox_√w
(
size
)Ë=
SYS_MBOX_NULL
) {

529 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

530 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

531  
NULL
;

534 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

535 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

537 
c⁄n
->
sockë
 = -1;

538 
c⁄n
->
ˇŒback
 = callback;

539 
c⁄n
->
ªcv_avaû
 = 0;

540 #i‡
LWIP_TCP


541 
c⁄n
->
wrôe_msg
 = 
NULL
;

542 
c⁄n
->
wrôe_off£t
 = 0;

543 #i‡
LWIP_TCPIP_CORE_LOCKING


544 
c⁄n
->
wrôe_dñayed
 = 0;

547 #i‡
LWIP_SO_RCVTIMEO


548 
c⁄n
->
ªcv_timeout
 = 0;

550 #i‡
LWIP_SO_RCVBUF


551 
c⁄n
->
ªcv_bufsize
 = 
RECV_BUFSIZE_DEFAULT
;

553  
c⁄n
;

554 
	}
}

563 
	$√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
)

565 *
mem
;

566 
	`LWIP_ASSERT
("PCB mu° bêdóŒoˇãd outsidêthi†fun˘i⁄", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

569 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

570 
	`sys_mbox_åy„tch
(
c⁄n
->
ªcvmbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

571 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

572 if(
mem
 !
NULL
) {

573 
	`pbuf_‰ì
((
pbuf
 *)
mem
);

576 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

579 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

580 
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

584 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

585 
	`sys_mbox_åy„tch
(
c⁄n
->
ac˚±mbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

586 
	`√tc⁄n_dñëe
((
√tc⁄n
 *)
mem
);

588 
	`sys_mbox_‰ì
(
c⁄n
->
ac˚±mbox
);

589 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

592 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

593 
c⁄n
->
›_com∂ëed
 = 
SYS_SEM_NULL
;

595 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

596 
	}
}

598 #i‡
LWIP_TCP


607 
	$do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
)

609 
îr_t
 
îr
;

611 
	`LWIP_ASSERT
("övÆid c⁄n", (
c⁄n
 !
NULL
));

612 
	`LWIP_ASSERT
("thi†i†f‹Å˝Çëc⁄n†⁄ly", (
c⁄n
->
ty≥
 =
NETCONN_TCP
));

613 
	`LWIP_ASSERT
("c⁄¿mu° bêö sèã NETCONN_CLOSE", (
c⁄n
->
°©e
 =
NETCONN_CLOSE
));

614 
	`LWIP_ASSERT
("pcbáÃódy clo£d", (
c⁄n
->
pcb
.
t˝
 !
NULL
));

617 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

618 i‡(
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

619 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

621 
	`t˝_ªcv
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

622 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

624 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

625 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
NULL
, 4);

626 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

629 
îr
 = 
	`t˝_˛o£
(
c⁄n
->
pcb
.
t˝
);

630 i‡(
îr
 =
ERR_OK
) {

632 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

634 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

635 
c⁄n
->
îr
 = 
ERR_OK
;

638 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

639 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

641 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

645 
	`LWIP_ASSERT
("ClosögáÜi°íÖcb mayÇŸ faû!", (
c⁄n
->
pcb
.
t˝
->
°©e
 !
LISTEN
));

646 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
£¡_t˝
);

647 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
pﬁl_t˝
, 4);

648 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
îr_t˝
);

649 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, conn);

653 
	}
}

663 
	$do_dñc⁄n
(
≠i_msg_msg
 *
msg
)

665 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

666 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

667 #i‡
LWIP_RAW


668 
NETCONN_RAW
:

669 
	`øw_ªmove
(
msg
->
c⁄n
->
pcb
.
øw
);

672 #i‡
LWIP_UDP


673 
NETCONN_UDP
:

674 
msg
->
c⁄n
->
pcb
.
udp
->
ªcv_¨g
 = 
NULL
;

675 
	`udp_ªmove
(
msg
->
c⁄n
->
pcb
.
udp
);

678 #i‡
LWIP_TCP


679 
NETCONN_TCP
:

680 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

681 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

694 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

695 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

697 i‡(
msg
->
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
) {

698 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

700 
	}
}

710 
	$do_böd
(
≠i_msg_msg
 *
msg
)

712 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

713 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

714 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

715 #i‡
LWIP_RAW


716 
NETCONN_RAW
:

717 
msg
->
c⁄n
->
îr
 = 
	`øw_böd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

720 #i‡
LWIP_UDP


721 
NETCONN_UDP
:

722 
msg
->
c⁄n
->
îr
 = 
	`udp_böd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

725 #i‡
LWIP_TCP


726 
NETCONN_TCP
:

727 
msg
->
c⁄n
->
îr
 = 
	`t˝_böd
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

735 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

738 
	`TCPIP_APIMSG_ACK
(
msg
);

739 
	}
}

741 #i‡
LWIP_TCP


748 
îr_t


749 
	$do_c⁄√˘ed
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

751 
√tc⁄n
 *
c⁄n
;

753 
	`LWIP_UNUSED_ARG
(
pcb
);

755 
c⁄n
 = 
¨g
;

757 i‡(
c⁄n
 =
NULL
) {

758  
ERR_VAL
;

761 
c⁄n
->
îr
 =Érr;

762 i‡((
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
îr
 =
ERR_OK
)) {

763 
	`£tup_t˝
(
c⁄n
);

765 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

766 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

767  
ERR_OK
;

768 
	}
}

779 
	$do_c⁄√˘
(
≠i_msg_msg
 *
msg
)

781 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

782 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

786 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

787 #i‡
LWIP_RAW


788 
NETCONN_RAW
:

789 
msg
->
c⁄n
->
îr
 = 
	`øw_c⁄√˘
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

790 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

793 #i‡
LWIP_UDP


794 
NETCONN_UDP
:

795 
msg
->
c⁄n
->
îr
 = 
	`udp_c⁄√˘
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

796 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

799 #i‡
LWIP_TCP


800 
NETCONN_TCP
:

801 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CONNECT
;

802 
	`£tup_t˝
(
msg
->
c⁄n
);

803 
msg
->
c⁄n
->
îr
 = 
	`t˝_c⁄√˘
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
,

804 
do_c⁄√˘ed
);

812 
	}
}

822 
	$do_disc⁄√˘
(
≠i_msg_msg
 *
msg
)

824 #i‡
LWIP_UDP


825 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

826 
	`udp_disc⁄√˘
(
msg
->
c⁄n
->
pcb
.
udp
);

829 
	`TCPIP_APIMSG_ACK
(
msg
);

830 
	}
}

839 
	$do_li°í
(
≠i_msg_msg
 *
msg
)

841 #i‡
LWIP_TCP


842 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

843 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

844 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

845 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
CLOSED
) {

846 #i‡
TCP_LISTEN_BACKLOG


847 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í_wôh_backlog
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
lb
.
backlog
);

849 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í
(
msg
->
c⁄n
->
pcb
.
t˝
);

851 i‡(
Õcb
 =
NULL
) {

852 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

855 i‡(
msg
->
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

857 
	`sys_mbox_‰ì
(
msg
->
c⁄n
->
ªcvmbox
);

858 
msg
->
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

860 i‡(
msg
->
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
) {

861 i‡((
msg
->
c⁄n
->
ac˚±mbox
 = 
	`sys_mbox_√w
(
DEFAULT_ACCEPTMBOX_SIZE
)Ë=
SYS_MBOX_NULL
) {

862 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

865 i‡(
msg
->
c⁄n
->
îr
 =
ERR_OK
) {

866 
msg
->
c⁄n
->
°©e
 = 
NETCONN_LISTEN
;

867 
msg
->
c⁄n
->
pcb
.
t˝
 = 
Õcb
;

868 
	`t˝_¨g
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->conn);

869 
	`t˝_ac˚±
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ac˚±_fun˘i⁄
);

873 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

879 
	`TCPIP_APIMSG_ACK
(
msg
);

880 
	}
}

889 
	$do_£nd
(
≠i_msg_msg
 *
msg
)

891 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

892 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

893 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

894 #i‡
LWIP_RAW


895 
NETCONN_RAW
:

896 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

897 
msg
->
c⁄n
->
îr
 = 
	`øw_£nd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
);

899 
msg
->
c⁄n
->
îr
 = 
	`øw_£ndto
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
, msg->msg.b->
addr
);

903 #i‡
LWIP_UDP


904 
NETCONN_UDP
:

905 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

906 
msg
->
c⁄n
->
îr
 = 
	`udp_£nd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
);

908 
msg
->
c⁄n
->
îr
 = 
	`udp_£ndto
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
, msg->msg.b->
addr
, msg->msg.b->
p‹t
);

917 
	`TCPIP_APIMSG_ACK
(
msg
);

918 
	}
}

927 
	$do_ªcv
(
≠i_msg_msg
 *
msg
)

929 #i‡
LWIP_TCP


930 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

931 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

932 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

933 #i‡
TCP_LISTEN_BACKLOG


934 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

935 
	`t˝_ac˚±ed
(
msg
->
c⁄n
->
pcb
.
t˝
);

939 
	`t˝_ªcved
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
r
.
Àn
);

945 
	`TCPIP_APIMSG_ACK
(
msg
);

946 
	}
}

948 #i‡
LWIP_TCP


960 
îr_t


961 
	$do_wrôem‹e
(
√tc⁄n
 *
c⁄n
)

963 
îr_t
 
îr
;

964 *
d©≠å
;

965 
u16_t
 
Àn
, 
avaûabÀ
;

966 
u8_t
 
wrôe_föished
 = 0;

967 
size_t
 
diff
;

969 
	`LWIP_ASSERT
("c⁄n->°©ê=NETCONN_WRITE", (
c⁄n
->
°©e
 =
NETCONN_WRITE
));

971 
d©≠å
 = (
u8_t
*)
c⁄n
->
wrôe_msg
->
msg
.
w
.d©≠å + c⁄n->
wrôe_off£t
;

972 
diff
 = 
c⁄n
->
wrôe_msg
->
msg
.
w
.
Àn
 - c⁄n->
wrôe_off£t
;

973 i‡(
diff
 > 0xffffUL) {

974 
Àn
 = 0xffff;

975 #i‡
LWIP_TCPIP_CORE_LOCKING


976 
c⁄n
->
wrôe_dñayed
 = 1;

979 
Àn
 = (
u16_t
)
diff
;

981 
avaûabÀ
 = 
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
);

982 i‡(
avaûabÀ
 < 
Àn
) {

984 
Àn
 = 
avaûabÀ
;

985 #i‡
LWIP_TCPIP_CORE_LOCKING


986 
c⁄n
->
wrôe_dñayed
 = 1;

990 
îr
 = 
	`t˝_wrôe
(
c⁄n
->
pcb
.
t˝
, 
d©≠å
, 
Àn
, c⁄n->
wrôe_msg
->
msg
.
w
.
≠iÊags
);

991 
	`LWIP_ASSERT
("do_wrôem‹e: invÆidÜígth!", ((
c⁄n
->
wrôe_off£t
 + 
Àn
Ë<c⁄n->
wrôe_msg
->
msg
.
w
.len));

992 i‡(
îr
 =
ERR_OK
) {

993 
c⁄n
->
wrôe_off£t
 +
Àn
;

994 i‡(
c⁄n
->
wrôe_off£t
 =c⁄n->
wrôe_msg
->
msg
.
w
.
Àn
) {

996 
wrôe_föished
 = 1;

997 
c⁄n
->
wrôe_msg
 = 
NULL
;

998 
c⁄n
->
wrôe_off£t
 = 0;

1000 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1002 
îr
 = 
	`t˝_ouçut_«gÀ
(
c⁄n
->
pcb
.
t˝
);

1003 
c⁄n
->
îr
 =Érr;

1004 i‡((
îr
 =
ERR_OK
Ë&& (
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
Ë<
TCP_SNDLOWAT
)) {

1005 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

1007 } i‡(
îr
 =
ERR_MEM
) {

1013 
îr
 = 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

1015 #i‡
LWIP_TCPIP_CORE_LOCKING


1016 
c⁄n
->
wrôe_dñayed
 = 1;

1021 
c⁄n
->
îr
 =Érr;

1022 
wrôe_föished
 = 1;

1025 i‡(
wrôe_föished
) {

1028 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1029 #i‡
LWIP_TCPIP_CORE_LOCKING


1030 i‡(
c⁄n
->
wrôe_dñayed
 != 0)

1033 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

1036 #i‡
LWIP_TCPIP_CORE_LOCKING


1038  
ERR_MEM
;

1040  
ERR_OK
;

1041 
	}
}

1051 
	$do_wrôe
(
≠i_msg_msg
 *
msg
)

1053 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1054 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1055 #i‡
LWIP_TCP


1056 
msg
->
c⁄n
->
°©e
 = 
NETCONN_WRITE
;

1058 
	`LWIP_ASSERT
("Æªady wrôög", 
msg
->
c⁄n
->
wrôe_msg
 =
NULL
 &&

1059 
msg
->
c⁄n
->
wrôe_off£t
 == 0);

1060 
msg
->
c⁄n
->
wrôe_msg
 = msg;

1061 
msg
->
c⁄n
->
wrôe_off£t
 = 0;

1062 #i‡
LWIP_TCPIP_CORE_LOCKING


1063 
msg
->
c⁄n
->
wrôe_dñayed
 = 0;

1064 i‡(
	`do_wrôem‹e
(
msg
->
c⁄n
Ë!
ERR_OK
) {

1065 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_WRITE
);

1066 
	`UNLOCK_TCPIP_CORE
();

1067 
	`sys_¨ch_£m_waô
(
msg
->
c⁄n
->
›_com∂ëed
, 0);

1068 
	`LOCK_TCPIP_CORE
();

1069 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_NONE
);

1072 
	`do_wrôem‹e
(
msg
->
c⁄n
);

1077 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

1079 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1083 
	`TCPIP_APIMSG_ACK
(
msg
);

1084 
	}
}

1093 
	$do_gëaddr
(
≠i_msg_msg
 *
msg
)

1095 i‡(
msg
->
c⁄n
->
pcb
.
ù
 !
NULL
) {

1096 *(
msg
->msg.
ad
.
ùaddr
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
ù
->
loˇl_ù
:msg->c⁄n->pcb.ù->
ªmŸe_ù
);

1098 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1099 #i‡
LWIP_RAW


1100 
NETCONN_RAW
:

1101 i‡(
msg
->msg.
ad
.
loˇl
) {

1102 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
øw
->
¥Ÿocﬁ
;

1105 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1109 #i‡
LWIP_UDP


1110 
NETCONN_UDP
:

1111 i‡(
msg
->msg.
ad
.
loˇl
) {

1112 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
loˇl_p‹t
;

1114 i‡((
msg
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0) {

1115 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1117 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
ªmŸe_p‹t
;

1122 #i‡
LWIP_TCP


1123 
NETCONN_TCP
:

1124 *(
msg
->msg.
ad
.
p‹t
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
t˝
->
loˇl_p‹t
:msg->c⁄n->pcb.t˝->
ªmŸe_p‹t
);

1129 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1131 
	`TCPIP_APIMSG_ACK
(
msg
);

1132 
	}
}

1141 
	$do_˛o£
(
≠i_msg_msg
 *
msg
)

1143 #i‡
LWIP_TCP


1144 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1145 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

1146 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

1151 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1152 
	`TCPIP_APIMSG_ACK
(
msg
);

1154 
	}
}

1156 #i‡
LWIP_IGMP


1164 
	$do_joö_Àave_group
(
≠i_msg_msg
 *
msg
)

1166 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1167 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1168 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1169 #i‡
LWIP_UDP


1170 i‡(
msg
->msg.
jl
.
joö_‹_Àave
 =
NETCONN_JOIN
) {

1171 
msg
->
c⁄n
->
îr
 = 
	`igmp_joögroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1173 
msg
->
c⁄n
->
îr
 = 
	`igmp_Àavegroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1176 #i‡(
LWIP_TCP
 || 
LWIP_RAW
)

1178 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1183 
	`TCPIP_APIMSG_ACK
(
msg
);

1184 
	}
}

1187 #i‡
LWIP_DNS


1194 
	$do_dns_found
(c⁄° *
«me
, 
ù_addr
 *
ùaddr
, *
¨g
)

1196 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1198 
	`LWIP_ASSERT
("DNSÑe•⁄£ f‹ wr⁄g ho°Çame", 
	`°rcmp
(
msg
->
«me
,Çame) == 0);

1200 i‡(
ùaddr
 =
NULL
) {

1202 *
msg
->
îr
 = 
ERR_VAL
;

1205 *
msg
->
îr
 = 
ERR_OK
;

1206 *
msg
->
addr
 = *
ùaddr
;

1209 
	`sys_£m_sig«l
(
msg
->
£m
);

1210 
	}
}

1219 
	$do_gëho°by«me
(*
¨g
)

1221 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1223 *
msg
->
îr
 = 
	`dns_gëho°by«me
(msg->
«me
, msg->
addr
, 
do_dns_found
, msg);

1224 i‡(*
msg
->
îr
 !
ERR_INPROGRESS
) {

1227 
	`sys_£m_sig«l
(
msg
->
£m
);

1229 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/err.c

39 
	~"lwù/îr.h
"

41 #ifde‡
LWIP_DEBUG


43 c⁄° *
	gîr_°ªº
[] = {

68 
	$lwù_°ªº
(
îr_t
 
îr
)

70  
îr_°ªº
[-
îr
];

72 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/netbuf.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/√tbuf.h
"

44 
	~"lwù/memp.h
"

46 
	~<°rög.h
>

56 
√tbuf
 *
	$√tbuf_√w
()

58 
√tbuf
 *
buf
;

60 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

61 i‡(
buf
 !
NULL
) {

62 
buf
->
p
 = 
NULL
;

63 
buf
->
±r
 = 
NULL
;

64 
buf
->
addr
 = 
NULL
;

65  
buf
;

67  
NULL
;

69 
	}
}

77 
	$√tbuf_dñëe
(
√tbuf
 *
buf
)

79 i‡(
buf
 !
NULL
) {

80 i‡(
buf
->
p
 !
NULL
) {

81 
	`pbuf_‰ì
(
buf
->
p
);

82 
buf
->
p
 = buf->
±r
 = 
NULL
;

84 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

86 
	}
}

97 
	$√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
)

99 
	`LWIP_ERROR
("√tbuf_Æloc: invÆid buf", (
buf
 !
NULL
),  NULL;);

102 i‡(
buf
->
p
 !
NULL
) {

103 
	`pbuf_‰ì
(
buf
->
p
);

105 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
size
, 
PBUF_RAM
);

106 i‡(
buf
->
p
 =
NULL
) {

107  
NULL
;

109 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold size",

110 (
buf
->
p
->
Àn
 >
size
));

111 
buf
->
±r
 = buf->
p
;

112  
buf
->
p
->
∑ylﬂd
;

113 
	}
}

121 
	$√tbuf_‰ì
(
√tbuf
 *
buf
)

123 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

124 i‡(
buf
->
p
 !
NULL
) {

125 
	`pbuf_‰ì
(
buf
->
p
);

127 
buf
->
p
 = buf->
±r
 = 
NULL
;

128 
	}
}

139 
îr_t


140 
	$√tbuf_ªf
(
√tbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
size
)

142 
	`LWIP_ERROR
("√tbuf_ªf: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

143 i‡(
buf
->
p
 !
NULL
) {

144 
	`pbuf_‰ì
(
buf
->
p
);

146 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

147 i‡(
buf
->
p
 =
NULL
) {

148 
buf
->
±r
 = 
NULL
;

149  
ERR_MEM
;

151 
buf
->
p
->
∑ylﬂd
 = (*)
d©≠å
;

152 
buf
->
p
->
Àn
 = buf->p->
tŸ_Àn
 = 
size
;

153 
buf
->
±r
 = buf->
p
;

154  
ERR_OK
;

155 
	}
}

164 
	$√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
)

166 
	`LWIP_ERROR
("√tbuf_ªf: invÆid hód", (
hód
 !
NULL
), ;);

167 
	`LWIP_ERROR
("√tbuf_chaö: invÆidÅaû", (
èû
 !
NULL
), ;);

168 
	`pbuf_ˇt
(
hód
->
p
, 
èû
->p);

169 
hód
->
±r
 = hód->
p
;

170 
	`memp_‰ì
(
MEMP_NETBUF
, 
èû
);

171 
	}
}

182 
îr_t


183 
	$√tbuf_d©a
(
√tbuf
 *
buf
, **
d©≠å
, 
u16_t
 *
Àn
)

185 
	`LWIP_ERROR
("√tbuf_d©a: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

186 
	`LWIP_ERROR
("√tbuf_d©a: invÆid d©≠å", (
d©≠å
 !
NULL
),  
ERR_ARG
;);

187 
	`LWIP_ERROR
("√tbuf_d©a: invÆidÜí", (
Àn
 !
NULL
),  
ERR_ARG
;);

189 i‡(
buf
->
±r
 =
NULL
) {

190  
ERR_BUF
;

192 *
d©≠å
 = 
buf
->
±r
->
∑ylﬂd
;

193 *
Àn
 = 
buf
->
±r
->len;

194  
ERR_OK
;

195 
	}
}

207 
s8_t


208 
	$√tbuf_√xt
(
√tbuf
 *
buf
)

210 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
),  -1;);

211 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

214 
buf
->
±r
 = buf->±r->
√xt
;

215 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

219 
	}
}

229 
	$√tbuf_fú°
(
√tbuf
 *
buf
)

231 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

232 
buf
->
±r
 = buf->
p
;

233 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/netdb.c

36 
	~"lwù/√tdb.h
"

38 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


40 
	~"lwù/îr.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/≠i.h
"

45 
	~<°rög.h
>

46 
	~<°dlib.h
>

49 
	sgëho°by«me_r_hñ≥r
 {

50 
ù_addr
 *
	maddrs
;

51 
ù_addr
 
	maddr
;

52 *
	mÆü£s
;

56 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


57 
	gh_î∫o
;

62 #i‚de‡
LWIP_DNS_API_HOSTENT_STORAGE


63 
	#LWIP_DNS_API_HOSTENT_STORAGE
 0

	)

67 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


68 
	#HOSTENT_STORAGE


	)

70 
	#HOSTENT_STORAGE
 

	)

82 
ho°ít
*

83 
	$lwù_gëho°by«me
(c⁄° *
«me
)

85 
îr_t
 
îr
;

86 
ù_addr
 
addr
;

89 
HOSTENT_STORAGE
 
ho°ít
 
s_ho°ít
;

90 
HOSTENT_STORAGE
 *
s_Æü£s
;

91 
HOSTENT_STORAGE
 
ù_addr
 
s_ho°ít_addr
;

92 
HOSTENT_STORAGE
 
ù_addr
 *
s_pho°ít_addr
;

95 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &
addr
);

96 i‡(
îr
 !
ERR_OK
) {

97 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

98 
h_î∫o
 = 
HOST_NOT_FOUND
;

99  
NULL
;

103 
s_ho°ít_addr
 = 
addr
;

104 
s_pho°ít_addr
 = &
s_ho°ít_addr
;

105 
s_ho°ít
.
h_«me
 = (*)
«me
;

106 
s_ho°ít
.
h_Æü£s
 = &
s_Æü£s
;

107 
s_ho°ít
.
h_addπy≥
 = 
AF_INET
;

108 
s_ho°ít
.
h_Àngth
 = (
ù_addr
);

109 
s_ho°ít
.
h_addr_li°
 = (**)&
s_pho°ít_addr
;

111 #i‡
DNS_DEBUG


113 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_«mê =%s\n", 
s_ho°ít
.
h_«me
));

114 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£† =%p\n", 
s_ho°ít
.
h_Æü£s
));

115 i‡(
s_ho°ít
.
h_Æü£s
 !
NULL
) {

116 
u8_t
 
idx
;

117  
idx
=0; 
s_ho°ít
.
h_Æü£s
[idx]; idx++) {

118 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%p\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

119 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%s\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

122 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addπy≥ =%d\n", 
s_ho°ít
.
h_addπy≥
));

123 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Àngth =%d\n", 
s_ho°ít
.
h_Àngth
));

124 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li° =%p\n", 
s_ho°ít
.
h_addr_li°
));

125 i‡(
s_ho°ít
.
h_addr_li°
 !
NULL
) {

126 
u8_t
 
idx
;

127  
idx
=0; 
s_ho°ít
.
h_addr_li°
[idx]; idx++) {

128 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i] =%p\n", 
idx
, 
s_ho°ít
.
h_addr_li°
[idx]));

129 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i]-> =%s\n", 
idx
, 
	`öë_¡ﬂ
(*((
ö_addr
*)(
s_ho°ít
.
h_addr_li°
[idx])))));

134 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


136  
	`sys_thªad_ho°ít
(&
s_ho°ít
);

138  &
s_ho°ít
;

140 
	}
}

159 
	$lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

160 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
)

162 
îr_t
 
îr
;

163 
gëho°by«me_r_hñ≥r
 *
h
;

164 *
ho°«me
;

165 
size_t
 
«mñí
;

166 
lh_î∫o
;

168 i‡(
h_î∫›
 =
NULL
) {

170 
h_î∫›
 = &
lh_î∫o
;

173 i‡(
ªsu…
 =
NULL
) {

175 *
h_î∫›
 = 
EINVAL
;

179 *
ªsu…
 = 
NULL
;

180 i‡((
«me
 =
NULL
Ë|| (
ªt
 =NULLË|| (
buf
 == 0)) {

182 *
h_î∫›
 = 
EINVAL
;

186 
«mñí
 = 
	`°æí
(
«me
);

187 i‡(
buÊí
 < ((
gëho°by«me_r_hñ≥r
Ë+ 
«mñí
 + 1 + (
MEM_ALIGNMENT
 - 1))) {

189 *
h_î∫›
 = 
ERANGE
;

193 
h
 = (
gëho°by«me_r_hñ≥r
*)
	`LWIP_MEM_ALIGN
(
buf
);

194 
ho°«me
 = ((*)
h
Ë+ (
gëho°by«me_r_hñ≥r
);

197 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &(
h
->
addr
));

198 i‡(
îr
 !
ERR_OK
) {

199 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

200 *
h_î∫›
 = 
ENSRNOTFOUND
;

205 
	`MEMCPY
(
ho°«me
, 
«me
, 
«mñí
);

206 
ho°«me
[
«mñí
] = 0;

209 
h
->
addrs
 = &(h->
addr
);

210 
h
->
Æü£s
 = 
NULL
;

211 
ªt
->
h_«me
 = (*)
ho°«me
;

212 
ªt
->
h_Æü£s
 = &(
h
->
Æü£s
);

213 
ªt
->
h_addπy≥
 = 
AF_INET
;

214 
ªt
->
h_Àngth
 = (
ù_addr
);

215 
ªt
->
h_addr_li°
 = (**)&(
h
->
addrs
);

218 *
ªsu…
 = 
ªt
;

222 
	}
}

232 
	$lwù_‰ìaddröfo
(
addröfo
 *
ai
)

234 
addröfo
 *
√xt
;

236 
ai
 !
NULL
) {

237 i‡(
ai
->
ai_addr
 !
NULL
) {

238 
	`mem_‰ì
(
ai
->
ai_addr
);

240 i‡(
ai
->
ai_ˇn⁄«me
 !
NULL
) {

241 
	`mem_‰ì
(
ai
->
ai_ˇn⁄«me
);

243 
√xt
 = 
ai
->
ai_√xt
;

244 
	`mem_‰ì
(
ai
);

245 
ai
 = 
√xt
;

247 
	}
}

269 
	$lwù_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

270 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
)

272 
îr_t
 
îr
;

273 
ù_addr
 
addr
;

274 
addröfo
 *
ai
;

275 
sockaddr_ö
 *
ß
 = 
NULL
;

276 
p‹t_ƒ
 = 0;

278 i‡(
ªs
 =
NULL
) {

279  
EAI_FAIL
;

281 *
ªs
 = 
NULL
;

282 i‡((
nodíame
 =
NULL
Ë&& (
£rv«me
 == NULL)) {

283  
EAI_NONAME
;

286 i‡(
£rv«me
 !
NULL
) {

289 
p‹t_ƒ
 = 
	`©oi
(
£rv«me
);

290 i‡((
p‹t_ƒ
 <= 0) || (port_nr > 0xffff)) {

291  
EAI_SERVICE
;

295 i‡(
nodíame
 !
NULL
) {

297 
îr
 = 
	`√tc⁄n_gëho°by«me
(
nodíame
, &
addr
);

298 i‡(
îr
 !
ERR_OK
) {

299  
EAI_FAIL
;

303 
addr
.add∏
INADDR_LOOPBACK
;

306 
ai
 = 
	`mem_mÆloc
((
addröfo
));

307 i‡(
ai
 =
NULL
) {

308 
memîr
;

310 
	`mem£t
(
ai
, 0, (
addröfo
));

311 
ß
 = 
	`mem_mÆloc
((
sockaddr_ö
));

312 i‡(
ß
 =
NULL
) {

313 
memîr
;

315 
	`mem£t
(
ß
, 0, (
sockaddr_ö
));

317 
ß
->
sö_addr
.
s_addr
 = 
addr
.addr;

318 
ß
->
sö_Ámûy
 = 
AF_INET
;

319 
ß
->
sö_Àn
 = (
sockaddr_ö
);

320 
ß
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t_ƒ
);

323 
ai
->
ai_Ámûy
 = 
AF_INET
;

324 i‡(
höts
 !
NULL
) {

326 
ai
->
ai_sockty≥
 = 
höts
->ai_socktype;

327 
ai
->
ai_¥Ÿocﬁ
 = 
höts
->ai_protocol;

329 i‡(
nodíame
 !
NULL
) {

331 
size_t
 
«mñí
 = 
	`°æí
(
nodíame
);

332 
	`LWIP_ASSERT
("«mñí i†toÿl⁄g", (
«mñí
 + 1Ë<(
mem_size_t
)-1);

333 
ai
->
ai_ˇn⁄«me
 = 
	`mem_mÆloc
((
mem_size_t
)(
«mñí
 + 1));

334 i‡(
ai
->
ai_ˇn⁄«me
 =
NULL
) {

335 
memîr
;

337 
	`MEMCPY
(
ai
->
ai_ˇn⁄«me
, 
nodíame
, 
«mñí
);

338 
ai
->
ai_ˇn⁄«me
[
«mñí
] = 0;

340 
ai
->
ai_addæí
 = (
sockaddr_ö
);

341 
ai
->
ai_addr
 = (
sockaddr
*)
ß
;

343 *
ªs
 = 
ai
;

346 
memîr
:

347 i‡(
ai
 !
NULL
) {

348 
	`mem_‰ì
(
ai
);

350 i‡(
ß
 !
NULL
) {

351 
	`mem_‰ì
(
ß
);

353  
EAI_MEMORY
;

354 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/netifapi.c

34 
	~"lwù/›t.h
"

36 #i‡
LWIP_NETIF_API


38 
	~"lwù/√tiÁpi.h
"

39 
	~"lwù/t˝ù.h
"

45 
	$do_√tiÁpi_√tif_add
–
√tiÁpi_msg_msg
 *
msg
)

47 i‡(!
	`√tif_add
–
msg
->
√tif
,

48 
msg
->msg.
add
.
ùaddr
,

49 
msg
->msg.
add
.
√tmask
,

50 
msg
->msg.
add
.
gw
,

51 
msg
->msg.
add
.
°©e
,

52 
msg
->msg.
add
.
öô
,

53 
msg
->msg.
add
.
öput
)) {

54 
msg
->
îr
 = 
ERR_IF
;

56 
msg
->
îr
 = 
ERR_OK
;

58 
	`TCPIP_NETIFAPI_ACK
(
msg
);

59 
	}
}

66 
	$do_√tiÁpi_√tif_comm⁄
–
√tiÁpi_msg_msg
 *
msg
)

68 i‡(
msg
->msg.
comm⁄
.
îπfunc
!=
NULL
) {

69 
msg
->
îr
 =

70 
msg
->msg.
comm⁄
.
	`îπfunc
(msg->
√tif
);

72 
msg
->
îr
 = 
ERR_OK
;

73 
msg
->msg.
comm⁄
.
	`voidfunc
(msg->
√tif
);

75 
	`TCPIP_NETIFAPI_ACK
(
msg
);

76 
	}
}

84 
îr_t


85 
	$√tiÁpi_√tif_add
(
√tif
 *netif,

86 
ù_addr
 *
ùaddr
,

87 
ù_addr
 *
√tmask
,

88 
ù_addr
 *
gw
,

89 *
°©e
,

90 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

91 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

93 
√tiÁpi_msg
 
msg
;

94 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_add
;

95 
msg
.msg.
√tif
 =Çetif;

96 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

97 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

98 
msg
.msg.msg.
add
.
gw
 = gw;

99 
msg
.msg.msg.
add
.
°©e
 = state;

100 
msg
.msg.msg.
add
.
öô
 = init;

101 
msg
.msg.msg.
add
.
öput
 = input;

102 
	`TCPIP_NETIFAPI
(&
msg
);

103  
msg
.msg.
îr
;

104 
	}
}

112 
îr_t


113 
	$√tiÁpi_√tif_comm⁄
–
√tif
 *netif,

114 (* 
voidfunc
)(
√tif
 *netif),

115 
	$îr_t
 (* 
îπfunc
)(
√tif
 *netif) )

117 
√tiÁpi_msg
 
msg
;

118 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_comm⁄
;

119 
msg
.msg.
√tif
 =Çetif;

120 
msg
.msg.msg.
comm⁄
.
voidfunc
 = voidfunc;

121 
msg
.msg.msg.
comm⁄
.
îπfunc
 =Érrtfunc;

122 
	`TCPIP_NETIFAPI
(&
msg
);

123  
msg
.msg.
îr
;

124 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/sockets.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_SOCKET


45 
	~"lwù/sockës.h
"

46 
	~"lwù/≠i.h
"

47 
	~"lwù/sys.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/öë.h
"

50 
	~"lwù/t˝.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝ù.h
"

55 
	~<°rög.h
>

57 
	#NUM_SOCKETS
 
MEMP_NUM_NETCONN


	)

60 
	slwù_sockë
 {

62 
√tc⁄n
 *
	mc⁄n
;

64 
√tbuf
 *
	mœ°d©a
;

66 
u16_t
 
	mœ°off£t
;

69 
s16_t
 
	mrcvevít
;

72 
u16_t
 
	m£ndevít
;

74 
u16_t
 
	mÊags
;

76 
	mîr
;

80 
	slwù_£À˘_cb
 {

82 
lwù_£À˘_cb
 *
	m√xt
;

84 
fd_£t
 *
	mªad£t
;

86 
fd_£t
 *
	mwrôe£t
;

88 
fd_£t
 *
	mex˚±£t
;

90 
	m£m_sig«Œed
;

92 
sys_£m_t
 
	m£m
;

97 
	slwù_£tgësock›t_d©a
 {

99 
lwù_sockë
 *
	msock
;

101 
	ms
;

103 
	mÀvñ
;

105 
	m›äame
;

108 *
	m›tvÆ
;

110 
sockÀn_t
 *
	m›éí
;

112 
îr_t
 
	mîr
;

116 
lwù_sockë
 
	gsockës
[
NUM_SOCKETS
];

118 
lwù_£À˘_cb
 *
	g£À˘_cb_li°
;

121 
sys_£m_t
 
	gsock£m
;

123 
sys_£m_t
 
	g£À˘£m
;

127 c⁄° 
	gîr_to_î∫o_èbÀ
[] = {

129 
ENOMEM
,

130 
ENOBUFS
,

131 
ETIMEDOUT
,

132 
EHOSTUNREACH
,

133 
ECONNABORTED
,

134 
ECONNRESET
,

135 
ESHUTDOWN
,

136 
ENOTCONN
,

137 
EINVAL
,

138 
EIO
,

139 
EADDRINUSE
,

142 
EINPROGRESS


145 
	#ERR_TO_ERRNO_TABLE_SIZE
 \

146 ((
îr_to_î∫o_èbÀ
)/”º_to_î∫o_èbÀ[0]))

	)

148 
	#îr_to_î∫o
(
îr
) \

149 (()(-(
îr
)Ë< 
ERR_TO_ERRNO_TABLE_SIZE
 ? \

150 
îr_to_î∫o_èbÀ
[-(
îr
)] : 
EIO
)

	)

152 #ifde‡
ERRNO


153 #i‚de‡
£t_î∫o


154 
	#£t_î∫o
(
îr
Ë
î∫o
 = (îr)

	)

157 
	#£t_î∫o
(
îr
)

	)

160 
	#sock_£t_î∫o
(
sk
, 
e
) do { \

161 
sk
->
îr
 = (
e
); \

162 
	`£t_î∫o
(
sk
->
îr
); \

163 } 0)

	)

166 
evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
);

167 
lwù_gësock›t_öã∫Æ
(*
¨g
);

168 
lwù_£tsock›t_öã∫Æ
(*
¨g
);

175 
	$lwù_sockë_öô
()

177 
sock£m
 = 
	`sys_£m_√w
(1);

178 
£À˘£m
 = 
	`sys_£m_√w
(1);

179 
	}
}

187 
lwù_sockë
 *

188 
	$gë_sockë
(
s
)

190 
lwù_sockë
 *
sock
;

192 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

193 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d): invÆid\n", 
s
));

194 
	`£t_î∫o
(
EBADF
);

195  
NULL
;

198 
sock
 = &
sockës
[
s
];

200 i‡(!
sock
->
c⁄n
) {

201 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d):ÇŸá˘ive\n", 
s
));

202 
	`£t_î∫o
(
EBADF
);

203  
NULL
;

206  
sock
;

207 
	}
}

216 
	$Æloc_sockë
(
√tc⁄n
 *
√wc⁄n
)

218 
i
;

221 
	`sys_£m_waô
(
sock£m
);

224 
i
 = 0; i < 
NUM_SOCKETS
; ++i) {

225 i‡(!
sockës
[
i
].
c⁄n
) {

226 
sockës
[
i
].
c⁄n
 = 
√wc⁄n
;

227 
sockës
[
i
].
œ°d©a
 = 
NULL
;

228 
sockës
[
i
].
œ°off£t
 = 0;

229 
sockës
[
i
].
rcvevít
 = 0;

230 
sockës
[
i
].
£ndevít
 = 1;

231 
sockës
[
i
].
Êags
 = 0;

232 
sockës
[
i
].
îr
 = 0;

233 
	`sys_£m_sig«l
(
sock£m
);

234  
i
;

237 
	`sys_£m_sig«l
(
sock£m
);

239 
	}
}

248 
	$lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

250 
lwù_sockë
 *
sock
, *
nsock
;

251 
√tc⁄n
 *
√wc⁄n
;

252 
ù_addr
 
«ddr
;

253 
u16_t
 
p‹t
;

254 
√wsock
;

255 
sockaddr_ö
 
sö
;

256 
îr_t
 
îr
;

258 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d)...\n", 
s
));

259 
sock
 = 
	`gë_sockë
(
s
);

260 i‡(!
sock
)

263 i‡((
sock
->
Êags
 & 
O_NONBLOCK
Ë&& (sock->
rcvevít
 <= 0)) {

264 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

265 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

269 
√wc⁄n
 = 
	`√tc⁄n_ac˚±
(
sock
->
c⁄n
);

270 i‡(!
√wc⁄n
) {

271 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËÁûed,Éº=%d\n", 
s
, 
sock
->
c⁄n
->
îr
));

272 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

277 
îr
 = 
	`√tc⁄n_≥î
(
√wc⁄n
, &
«ddr
, &
p‹t
);

278 i‡(
îr
 !
ERR_OK
) {

279 
	`√tc⁄n_dñëe
(
√wc⁄n
);

280 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

287 i‡(
NULL
 !
addr
) {

288 
	`LWIP_ASSERT
("add∏vÆid buàaddæí NULL", 
addæí
 !
NULL
);

289 
	`mem£t
(&
sö
, 0, (sin));

290 
sö
.
sö_Àn
 = (sin);

291 
sö
.
sö_Ámûy
 = 
AF_INET
;

292 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

293 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

295 i‡(*
addæí
 > (
sö
))

296 *
addæí
 = (
sö
);

298 
	`MEMCPY
(
addr
, &
sö
, *
addæí
);

301 
√wsock
 = 
	`Æloc_sockë
(
√wc⁄n
);

302 i‡(
√wsock
 == -1) {

303 
	`√tc⁄n_dñëe
(
√wc⁄n
);

304 
	`sock_£t_î∫o
(
sock
, 
ENFILE
);

307 
	`LWIP_ASSERT
("övÆid sockë index", (
√wsock
 >0Ë&& (√wsock < 
NUM_SOCKETS
));

308 
√wc⁄n
->
ˇŒback
 = 
evít_ˇŒback
;

309 
nsock
 = &
sockës
[
√wsock
];

310 
	`LWIP_ASSERT
("övÆid sockëÖoöãr", 
nsock
 !
NULL
);

312 
	`sys_£m_waô
(
sock£m
);

318 
nsock
->
rcvevít
 +-1 - 
√wc⁄n
->
sockë
;

319 
√wc⁄n
->
sockë
 = 
√wsock
;

320 
	`sys_£m_sig«l
(
sock£m
);

322 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËªtu∫ögÇew sock=%dáddr=", 
s
, 
√wsock
));

323 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

324 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
p‹t
));

326 
	`sock_£t_î∫o
(
sock
, 0);

327  
√wsock
;

328 
	}
}

331 
	$lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

333 
lwù_sockë
 *
sock
;

334 
ù_addr
 
loˇl_addr
;

335 
u16_t
 
loˇl_p‹t
;

336 
îr_t
 
îr
;

338 
sock
 = 
	`gë_sockë
(
s
);

339 i‡(!
sock
)

342 
	`LWIP_ERROR
("lwù_böd: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

343 ((((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

344 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

346 
loˇl_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

347 
loˇl_p‹t
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

349 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%d,áddr=", 
s
));

350 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
loˇl_addr
);

351 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
loˇl_p‹t
)));

353 
îr
 = 
	`√tc⁄n_böd
(
sock
->
c⁄n
, &
loˇl_addr
, 
	`¡ohs
(
loˇl_p‹t
));

355 i‡(
îr
 !
ERR_OK
) {

356 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

357 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

361 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËsuc˚eded\n", 
s
));

362 
	`sock_£t_î∫o
(
sock
, 0);

364 
	}
}

367 
	$lwù_˛o£
(
s
)

369 
lwù_sockë
 *
sock
;

371 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_˛o£(%d)\n", 
s
));

373 
sock
 = 
	`gë_sockë
(
s
);

374 i‡(!
sock
) {

378 
	`√tc⁄n_dñëe
(
sock
->
c⁄n
);

380 
	`sys_£m_waô
(
sock£m
);

381 i‡(
sock
->
œ°d©a
) {

382 
	`√tbuf_dñëe
(
sock
->
œ°d©a
);

384 
sock
->
œ°d©a
 = 
NULL
;

385 
sock
->
œ°off£t
 = 0;

386 
sock
->
c⁄n
 = 
NULL
;

387 
	`sock_£t_î∫o
(
sock
, 0);

388 
	`sys_£m_sig«l
(
sock£m
);

390 
	}
}

393 
	$lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

395 
lwù_sockë
 *
sock
;

396 
îr_t
 
îr
;

398 
sock
 = 
	`gë_sockë
(
s
);

399 i‡(!
sock
)

402 
	`LWIP_ERROR
("lwù_c⁄√˘: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

403 ((((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

404 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

406 i‡(((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_Ámûy
 =
AF_UNSPEC
) {

407 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d, AF_UNSPEC)\n", 
s
));

408 
îr
 = 
	`√tc⁄n_disc⁄√˘
(
sock
->
c⁄n
);

410 
ù_addr
 
ªmŸe_addr
;

411 
u16_t
 
ªmŸe_p‹t
;

413 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

414 
ªmŸe_p‹t
 = ((c⁄° 
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

416 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d,áddr=", 
s
));

417 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

418 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
	`¡ohs
(
ªmŸe_p‹t
)));

420 
îr
 = 
	`√tc⁄n_c⁄√˘
(
sock
->
c⁄n
, &
ªmŸe_addr
, 
	`¡ohs
(
ªmŸe_p‹t
));

423 i‡(
îr
 !
ERR_OK
) {

424 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

425 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËsuc˚eded\n", 
s
));

430 
	`sock_£t_î∫o
(
sock
, 0);

432 
	}
}

443 
	$lwù_li°í
(
s
, 
backlog
)

445 
lwù_sockë
 *
sock
;

446 
îr_t
 
îr
;

448 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%d, backlog=%d)\n", 
s
, 
backlog
));

450 
sock
 = 
	`gë_sockë
(
s
);

451 i‡(!
sock
)

455 i‡(
backlog
 < 0) {

456 
backlog
 = 0;

458 i‡(
backlog
 > 0xff) {

459 
backlog
 = 0xff;

462 
îr
 = 
	`√tc⁄n_li°í_wôh_backlog
(
sock
->
c⁄n
, 
backlog
);

464 i‡(
îr
 !
ERR_OK
) {

465 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

466 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

470 
	`sock_£t_î∫o
(
sock
, 0);

472 
	}
}

475 
	$lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

476 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

478 
lwù_sockë
 *
sock
;

479 
√tbuf
 *
buf
;

480 
u16_t
 
buÊí
, 
c›yÀn
, 
off
 = 0;

481 
ù_addr
 *
addr
;

482 
u16_t
 
p‹t
;

483 
u8_t
 
d⁄e
 = 0;

485 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d, %p, %"
SZT_F
", 0x%x, ..)\n", 
s
, 
mem
, 
Àn
, 
Êags
));

486 
sock
 = 
	`gë_sockë
(
s
);

487 i‡(!
sock
)

491 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Å› whûêsock->œ°d©a=%p\n", (*)
sock
->
œ°d©a
));

493 i‡(
sock
->
œ°d©a
) {

494 
buf
 = 
sock
->
œ°d©a
;

497 i‡(((
Êags
 & 
MSG_DONTWAIT
Ë|| (
sock
->Êag†& 
O_NONBLOCK
)) &&

498 (
sock
->
rcvevít
 <= 0)) {

499 i‡(
off
 > 0) {

501 
	`sock_£t_î∫o
(
sock
, 0);

502  
off
;

504 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

505 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

511 
sock
->
œ°d©a
 = 
buf
 = 
	`√tc⁄n_ªcv
(sock->
c⁄n
);

512 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Çëc⁄n_ªcvÇëbuf=%p\n", (*)
buf
));

514 i‡(!
buf
) {

515 i‡(
off
 > 0) {

517 
	`sock_£t_î∫o
(
sock
, 0);

518  
off
;

521 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d): bu‡=NULL!\n", 
s
));

522 
	`sock_£t_î∫o
(
sock
, (((sock->
c⁄n
->
pcb
.
ù
 !
NULL
Ë&& (sock->c⁄n->
îr
 =
ERR_OK
))

523 ? 
ETIMEDOUT
 : 
	`îr_to_î∫o
(
sock
->
c⁄n
->
îr
)));

528 
buÊí
 = 
	`√tbuf_Àn
(
buf
);

529 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: buÊí=%"
U16_F
"Üí=%"
SZT_F
" off=%"U16_F" sock->lastoffset=%"U16_F"\n",

530 
buÊí
, 
Àn
, 
off
, 
sock
->
œ°off£t
));

532 
buÊí
 -
sock
->
œ°off£t
;

534 i‡(
Àn
 > 
buÊí
) {

535 
c›yÀn
 = 
buÊí
;

537 
c›yÀn
 = (
u16_t
)
Àn
;

542 
	`√tbuf_c›y_∑πül
(
buf
, (
u8_t
*)
mem
 + 
off
, 
c›yÀn
, 
sock
->
œ°off£t
);

544 
off
 +
c›yÀn
;

546 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

547 
	`LWIP_ASSERT
("övÆid c›yÀn,Üí would undîÊow", 
Àn
 >
c›yÀn
);

548 
Àn
 -
c›yÀn
;

549 i‡–(
Àn
 <= 0) ||

550 (
buf
->
p
->
Êags
 & 
PBUF_FLAG_PUSH
) ||

551 (
sock
->
rcvevít
 <= 0) ||

552 ((
Êags
 & 
MSG_PEEK
)!=0)) {

553 
d⁄e
 = 1;

556 
d⁄e
 = 1;

560 i‡(
d⁄e
) {

561 i‡(
‰om
 && 
‰omÀn
) {

562 
sockaddr_ö
 
sö
;

564 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

565 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

566 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

568 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

569 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

572 
	`mem£t
(&
sö
, 0, (sin));

573 
sö
.
sö_Àn
 = (sin);

574 
sö
.
sö_Ámûy
 = 
AF_INET
;

575 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

576 
sö
.
sö_addr
.
s_addr
 = 
addr
->addr;

578 i‡(*
‰omÀn
 > (
sö
)) {

579 *
‰omÀn
 = (
sö
);

582 
	`MEMCPY
(
‰om
, &
sö
, *
‰omÀn
);

584 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

585 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

586 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%"U16_F"\n", 
p‹t
, 
off
));

588 #i‡
SOCKETS_DEBUG


589 
sockaddr_ö
 
sö
;

591 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

592 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

593 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

595 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

596 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

599 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

600 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, 
addr
);

601 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"Üí=%"U16_F"\n", 
p‹t
, 
off
));

607 i‡((
Êags
 & 
MSG_PEEK
)==0) {

611 i‡((
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
Ë&& (
buÊí
 - 
c›yÀn
 > 0)) {

612 
sock
->
œ°d©a
 = 
buf
;

613 
sock
->
œ°off£t
 +
c›yÀn
;

614 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Üa°d©®nowÇëbuf=%p\n", (*)
buf
));

616 
sock
->
œ°d©a
 = 
NULL
;

617 
sock
->
œ°off£t
 = 0;

618 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: dñëögÇëbuf=%p\n", (*)
buf
));

619 
	`√tbuf_dñëe
(
buf
);

622 } !
d⁄e
);

624 
	`sock_£t_î∫o
(
sock
, 0);

625  
off
;

626 
	}
}

629 
	$lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
)

631  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 0, 
NULL
, NULL);

632 
	}
}

635 
	$lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
)

637  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 
Êags
, 
NULL
, NULL);

638 
	}
}

641 
	$lwù_£nd
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
)

643 
lwù_sockë
 *
sock
;

644 
îr_t
 
îr
;

646 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%d, d©a=%p, size=%"
SZT_F
", flags=0x%x)\n",

647 
s
, 
d©a
, 
size
, 
Êags
));

649 
sock
 = 
	`gë_sockë
(
s
);

650 i‡(!
sock
)

653 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
) {

654 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

655  
	`lwù_£ndto
(
s
, 
d©a
, 
size
, 
Êags
, 
NULL
, 0);

657 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

662 
îr
 = 
	`√tc⁄n_wrôe
(
sock
->
c⁄n
, 
d©a
, 
size
, 
NETCONN_COPY
 | ((
Êags
 & 
MSG_MORE
)?
NETCONN_MORE
:0));

664 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%dËîr=%d size=%"
SZT_F
"\n", 
s
, 
îr
, 
size
));

665 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

666  (
îr
 =
ERR_OK
 ? ()
size
 : -1);

667 
	}
}

670 
	$lwù_£ndto
(
s
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
,

671 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

673 
lwù_sockë
 *
sock
;

674 
ù_addr
 
ªmŸe_addr
;

675 
îr_t
 
îr
;

676 
u16_t
 
sh‹t_size
;

677 #i‡!
LWIP_TCPIP_CORE_LOCKING


678 
√tbuf
 
buf
;

679 
u16_t
 
ªmŸe_p‹t
;

682 
sock
 = 
	`gë_sockë
(
s
);

683 i‡(!
sock
)

686 i‡(
sock
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

687 #i‡
LWIP_TCP


688  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 
Êags
);

690 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

695 
	`LWIP_ASSERT
("lwù_£ndto: sizêmu° fô i¿u16_t", 
size
 <= 0xffff);

696 
sh‹t_size
 = (
u16_t
)
size
;

697 
	`LWIP_ERROR
("lwù_£ndto: invÆidáddªss", (((
to
 =
NULL
Ë&& (
tﬁí
 == 0)) ||

698 ((
tﬁí
 =(
sockaddr_ö
)) &&

699 ((((c⁄° 
sockaddr_ö
 *)
to
)->
sö_Ámûy
Ë=
AF_INET
))),

700 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

702 #i‡
LWIP_TCPIP_CORE_LOCKING


704 { 
pbuf
* 
p
;

706 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

707 i‡(
p
 =
NULL
) {

708 
îr
 = 
ERR_MEM
;

710 
p
->
∑ylﬂd
 = (*)
d©a
;

711 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
sh‹t_size
;

713 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

715 
	`LOCK_TCPIP_CORE
();

716 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_RAW
) {

717 
îr
 = 
sock
->
c⁄n
->î∏
	`øw_£ndto
(sock->c⁄n->
pcb
.
øw
, 
p
, &
ªmŸe_addr
);

719 
îr
 = 
sock
->
c⁄n
->î∏
	`udp_£ndto
(sock->c⁄n->
pcb
.
udp
, 
p
, &
ªmŸe_addr
, 
	`¡ohs
(((c⁄° 
sockaddr_ö
 *)
to
)->
sö_p‹t
));

721 
	`UNLOCK_TCPIP_CORE
();

723 
	`pbuf_‰ì
(
p
);

728 
buf
.
p
 = buf.
±r
 = 
NULL
;

729 i‡(
to
) {

730 
ªmŸe_addr
.
addr
 = ((c⁄° 
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

731 
ªmŸe_p‹t
 = 
	`¡ohs
(((c⁄° 
sockaddr_ö
 *)
to
)->
sö_p‹t
);

732 
buf
.
addr
 = &
ªmŸe_addr
;

733 
buf
.
p‹t
 = 
ªmŸe_p‹t
;

735 
ªmŸe_addr
.
addr
 = 0;

736 
ªmŸe_p‹t
 = 0;

737 
buf
.
addr
 = 
NULL
;

738 
buf
.
p‹t
 = 0;

741 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£ndto(%d, d©a=%p, sh‹t_size=%d"
U16_F
", flags=0x%xÅo=",

742 
s
, 
d©a
, 
sh‹t_size
, 
Êags
));

743 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
ªmŸe_addr
);

744 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
"\n", 
ªmŸe_p‹t
));

747 #i‡
LWIP_NETIF_TX_SINGLE_PBUF


749 i‡(
	`√tbuf_Æloc
(&
buf
, 
sh‹t_size
Ë=
NULL
) {

750 
îr
 = 
ERR_MEM
;

752 
îr
 = 
	`√tbuf_èke
(&
buf
, 
d©a
, 
sh‹t_size
);

755 
îr
 = 
	`√tbuf_ªf
(&
buf
, 
d©a
, 
sh‹t_size
);

757 i‡(
îr
 =
ERR_OK
) {

759 
îr
 = 
	`√tc⁄n_£nd
(
sock
->
c⁄n
, &
buf
);

763 
	`√tbuf_‰ì
(&
buf
);

765 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

766  (
îr
 =
ERR_OK
 ? 
sh‹t_size
 : -1);

767 
	}
}

770 
	$lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

772 
√tc⁄n
 *
c⁄n
;

773 
i
;

775 
	`LWIP_UNUSED_ARG
(
domaö
);

778 
ty≥
) {

779 
SOCK_RAW
:

780 
c⁄n
 = 
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
NETCONN_RAW
, (
u8_t
)
¥Ÿocﬁ
, 
evít_ˇŒback
);

781 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_RAW, %d) = ",

782 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

784 
SOCK_DGRAM
:

785 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
–(
¥Ÿocﬁ
 =
IPPROTO_UDPLITE
) ?

786 
NETCONN_UDPLITE
 : 
NETCONN_UDP
, 
evít_ˇŒback
);

787 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",

788 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

790 
SOCK_STREAM
:

791 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
(
NETCONN_TCP
, 
evít_ˇŒback
);

792 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_STREAM, %d) = ",

793 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

796 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",

797 
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

798 
	`£t_î∫o
(
EINVAL
);

802 i‡(!
c⁄n
) {

803 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("-1 / ENOBUFS (couldÇot createÇetconn)\n"));

804 
	`£t_î∫o
(
ENOBUFS
);

808 
i
 = 
	`Æloc_sockë
(
c⁄n
);

810 i‡(
i
 == -1) {

811 
	`√tc⁄n_dñëe
(
c⁄n
);

812 
	`£t_î∫o
(
ENFILE
);

815 
c⁄n
->
sockë
 = 
i
;

816 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("%d\n", 
i
));

817 
	`£t_î∫o
(0);

818  
i
;

819 
	}
}

822 
	$lwù_wrôe
(
s
, c⁄° *
d©a
, 
size_t
 
size
)

824  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 0);

825 
	}
}

843 
	$lwù_£lsˇn
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
)

845 
i
, 
ƒódy
 = 0;

846 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

847 
lwù_sockë
 *
p_sock
;

849 
	`FD_ZERO
(&
Ãód£t
);

850 
	`FD_ZERO
(&
lwrôe£t
);

851 
	`FD_ZERO
(&
Àx˚±£t
);

855 
i
 = 0; i < 
maxfdp1
; i++) {

856 i‡(
	`FD_ISSET
(
i
, 
ªad£t
)) {

858 
p_sock
 = 
	`gë_sockë
(
i
);

859 i‡(
p_sock
 && (p_sock->
œ°d©a
 || (p_sock->
rcvevít
 > 0))) {

860 
	`FD_SET
(
i
, &
Ãód£t
);

861 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Ñódög\n", 
i
));

862 
ƒódy
++;

865 i‡(
	`FD_ISSET
(
i
, 
wrôe£t
)) {

867 
p_sock
 = 
	`gë_sockë
(
i
);

868 i‡(
p_sock
 &&Ö_sock->
£ndevít
) {

869 
	`FD_SET
(
i
, &
lwrôe£t
);

870 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹ wrôög\n", 
i
));

871 
ƒódy
++;

875 *
ªad£t
 = 
Ãód£t
;

876 *
wrôe£t
 = 
lwrôe£t
;

877 
	`FD_ZERO
(
ex˚±£t
);

879  
ƒódy
;

880 
	}
}

887 
	$lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

888 
timevÆ
 *
timeout
)

890 
i
;

891 
ƒódy
;

892 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

893 
u32_t
 
m£˘imeout
;

894 
lwù_£À˘_cb
 
£À˘_cb
;

895 
lwù_£À˘_cb
 *
p_£lcb
;

897 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select(%d, %p, %p, %p,Åvsec=%ldÅvusec=%ld)\n",

898 
maxfdp1
, (*)
ªad£t
, (*Ë
wrôe£t
, (*Ë
ex˚±£t
,

899 
timeout
 ? (Èimeout->
tv_£c
 : ()-1,

900 
timeout
 ? (Èimeout->
tv_u£c
 : ()-1));

902 
£À˘_cb
.
√xt
 = 0;

903 
£À˘_cb
.
ªad£t
 =Ñeadset;

904 
£À˘_cb
.
wrôe£t
 = writeset;

905 
£À˘_cb
.
ex˚±£t
 =Éxceptset;

906 
£À˘_cb
.
£m_sig«Œed
 = 0;

909 
	`sys_£m_waô
(
£À˘£m
);

911 i‡(
ªad£t
)

912 
Ãód£t
 = *
ªad£t
;

914 
	`FD_ZERO
(&
Ãód£t
);

915 i‡(
wrôe£t
)

916 
lwrôe£t
 = *
wrôe£t
;

918 
	`FD_ZERO
(&
lwrôe£t
);

919 i‡(
ex˚±£t
)

920 
Àx˚±£t
 = *
ex˚±£t
;

922 
	`FD_ZERO
(&
Àx˚±£t
);

926 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

929 i‡(!
ƒódy
) {

930 i‡(
timeout
 &&Åimeout->
tv_£c
 =0 &&Åimeout->
tv_u£c
 == 0) {

931 
	`sys_£m_sig«l
(
£À˘£m
);

932 i‡(
ªad£t
)

933 
	`FD_ZERO
(
ªad£t
);

934 i‡(
wrôe£t
)

935 
	`FD_ZERO
(
wrôe£t
);

936 i‡(
ex˚±£t
)

937 
	`FD_ZERO
(
ex˚±£t
);

939 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÇoÅimeout,Ñeturning 0\n"));

940 
	`£t_î∫o
(0);

950 
£À˘_cb
.
£m
 = 
	`sys_£m_√w
(0);

953 
£À˘_cb
.
√xt
 = 
£À˘_cb_li°
;

954 
£À˘_cb_li°
 = &
£À˘_cb
;

957 
	`sys_£m_sig«l
(
£À˘£m
);

960 i‡(
timeout
 == 0)

962 
m£˘imeout
 = 0;

964 
m£˘imeout
 = ((
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 500)/1000));

965 if(
m£˘imeout
 == 0)

966 
m£˘imeout
 = 1;

969 
i
 = 
	`sys_£m_waô_timeout
(
£À˘_cb
.
£m
, 
m£˘imeout
);

972 
	`sys_£m_waô
(
£À˘£m
);

973 i‡(
£À˘_cb_li°
 =&
£À˘_cb
)

974 
£À˘_cb_li°
 = 
£À˘_cb
.
√xt
;

976 
p_£lcb
 = 
£À˘_cb_li°
;Ö_£lcb;Ö_£lcb =Ö_£lcb->
√xt
) {

977 i‡(
p_£lcb
->
√xt
 =&
£À˘_cb
) {

978 
p_£lcb
->
√xt
 = 
£À˘_cb
.next;

983 
	`sys_£m_sig«l
(
£À˘£m
);

985 
	`sys_£m_‰ì
(
£À˘_cb
.
£m
);

986 i‡(
i
 == 0) {

988 i‡(
ªad£t
)

989 
	`FD_ZERO
(
ªad£t
);

990 i‡(
wrôe£t
)

991 
	`FD_ZERO
(
wrôe£t
);

992 i‡(
ex˚±£t
)

993 
	`FD_ZERO
(
ex˚±£t
);

995 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÅimeoutÉxpired\n"));

996 
	`£t_î∫o
(0);

1001 i‡(
ªad£t
)

1002 
Ãód£t
 = *
ªad£t
;

1004 
	`FD_ZERO
(&
Ãód£t
);

1005 i‡(
wrôe£t
)

1006 
lwrôe£t
 = *
wrôe£t
;

1008 
	`FD_ZERO
(&
lwrôe£t
);

1009 i‡(
ex˚±£t
)

1010 
Àx˚±£t
 = *
ex˚±£t
;

1012 
	`FD_ZERO
(&
Àx˚±£t
);

1015 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

1017 
	`sys_£m_sig«l
(
£À˘£m
);

1019 i‡(
ªad£t
)

1020 *
ªad£t
 = 
Ãód£t
;

1021 i‡(
wrôe£t
)

1022 *
wrôe£t
 = 
lwrôe£t
;

1023 i‡(
ex˚±£t
)

1024 *
ex˚±£t
 = 
Àx˚±£t
;

1026 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘:Çªady=%d\n", 
ƒódy
));

1027 
	`£t_î∫o
(0);

1029  
ƒódy
;

1030 
	}
}

1037 
	$evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
)

1039 
s
;

1040 
lwù_sockë
 *
sock
;

1041 
lwù_£À˘_cb
 *
scb
;

1043 
	`LWIP_UNUSED_ARG
(
Àn
);

1046 i‡(
c⁄n
) {

1047 
s
 = 
c⁄n
->
sockë
;

1048 i‡(
s
 < 0) {

1054 
	`sys_£m_waô
(
sock£m
);

1055 i‡(
c⁄n
->
sockë
 < 0) {

1056 i‡(
evt
 =
NETCONN_EVT_RCVPLUS
) {

1057 
c⁄n
->
sockë
--;

1059 
	`sys_£m_sig«l
(
sock£m
);

1062 
	`sys_£m_sig«l
(
sock£m
);

1065 
sock
 = 
	`gë_sockë
(
s
);

1066 i‡(!
sock
) {

1073 
	`sys_£m_waô
(
£À˘£m
);

1075 
evt
) {

1076 
NETCONN_EVT_RCVPLUS
:

1077 
sock
->
rcvevít
++;

1079 
NETCONN_EVT_RCVMINUS
:

1080 
sock
->
rcvevít
--;

1082 
NETCONN_EVT_SENDPLUS
:

1083 
sock
->
£ndevít
 = 1;

1085 
NETCONN_EVT_SENDMINUS
:

1086 
sock
->
£ndevít
 = 0;

1089 
	`LWIP_ASSERT
("unknownÉvent", 0);

1092 
	`sys_£m_sig«l
(
£À˘£m
);

1102 
	`sys_£m_waô
(
£À˘£m
);

1103 
scb
 = 
£À˘_cb_li°
; scb; scb = scb->
√xt
) {

1104 i‡(
scb
->
£m_sig«Œed
 == 0) {

1106 i‡(
scb
->
ªad£t
 && 
	`FD_ISSET
(
s
, scb->readset))

1107 i‡(
sock
->
rcvevít
 > 0)

1109 i‡(
scb
->
wrôe£t
 && 
	`FD_ISSET
(
s
, scb->writeset))

1110 i‡(
sock
->
£ndevít
)

1114 i‡(
scb
) {

1115 
scb
->
£m_sig«Œed
 = 1;

1116 
	`sys_£m_sig«l
(
scb
->
£m
);

1117 
	`sys_£m_sig«l
(
£À˘£m
);

1119 
	`sys_£m_sig«l
(
£À˘£m
);

1123 
	}
}

1130 
	$lwù_shutdown
(
s
, 
how
)

1132 
	`LWIP_UNUSED_ARG
(
how
);

1133 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_shutdown(%d, how=%d)\n", 
s
, 
how
));

1134  
	`lwù_˛o£
(
s
);

1135 
	}
}

1138 
	$lwù_gëadd∫ame
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
, 
u8_t
 
loˇl
)

1140 
lwù_sockë
 *
sock
;

1141 
sockaddr_ö
 
sö
;

1142 
ù_addr
 
«ddr
;

1144 
sock
 = 
	`gë_sockë
(
s
);

1145 i‡(!
sock
)

1148 
	`mem£t
(&
sö
, 0, (sin));

1149 
sö
.
sö_Àn
 = (sin);

1150 
sö
.
sö_Ámûy
 = 
AF_INET
;

1153 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, &
«ddr
, &
sö
.
sö_p‹t
, 
loˇl
);

1155 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gëadd∫ame(%d,áddr=", 
s
));

1156 
	`ù_addr_debug_¥öt
(
SOCKETS_DEBUG
, &
«ddr
);

1157 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%"
U16_F
")\n", 
sö
.
sö_p‹t
));

1159 
sö
.
sö_p‹t
 = 
	`ht⁄s
(sin.sin_port);

1160 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

1162 i‡(*
«mñí
 > (
sö
))

1163 *
«mñí
 = (
sö
);

1165 
	`MEMCPY
(
«me
, &
sö
, *
«mñí
);

1166 
	`sock_£t_î∫o
(
sock
, 0);

1168 
	}
}

1171 
	$lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1173  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 0);

1174 
	}
}

1177 
	$lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1179  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 1);

1180 
	}
}

1183 
	$lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
)

1185 
îr_t
 
îr
 = 
ERR_OK
;

1186 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1187 
lwù_£tgësock›t_d©a
 
d©a
;

1189 i‡(!
sock
)

1192 i‡((
NULL
 =
›tvÆ
Ë|| (NULL =
›éí
)) {

1193 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1198 
Àvñ
) {

1201 
SOL_SOCKET
:

1202 
›äame
) {

1204 
SO_ACCEPTCONN
:

1205 
SO_BROADCAST
:

1208 
SO_ERROR
:

1209 
SO_KEEPALIVE
:

1212 #i‡
LWIP_SO_RCVTIMEO


1213 
SO_RCVTIMEO
:

1215 #i‡
LWIP_SO_RCVBUF


1216 
SO_RCVBUF
:

1222 #i‡
SO_REUSE


1223 
SO_REUSEADDR
:

1224 
SO_REUSEPORT
:

1226 
SO_TYPE
:

1228 i‡(*
›éí
 < ()) {

1229 
îr
 = 
EINVAL
;

1233 
SO_NO_CHECK
:

1234 i‡(*
›éí
 < ()) {

1235 
îr
 = 
EINVAL
;

1237 #i‡
LWIP_UDP


1238 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1239 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1241 
îr
 = 
EAFNOSUPPORT
;

1247 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1248 
s
, 
›äame
));

1249 
îr
 = 
ENOPROTOOPT
;

1254 
IPPROTO_IP
:

1255 
›äame
) {

1259 
IP_TTL
:

1260 
IP_TOS
:

1261 i‡(*
›éí
 < ()) {

1262 
îr
 = 
EINVAL
;

1265 #i‡
LWIP_IGMP


1266 
IP_MULTICAST_TTL
:

1267 i‡(*
›éí
 < (
u8_t
)) {

1268 
îr
 = 
EINVAL
;

1271 
IP_MULTICAST_IF
:

1272 i‡(*
›éí
 < (
ö_addr
)) {

1273 
îr
 = 
EINVAL
;

1279 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1280 
s
, 
›äame
));

1281 
îr
 = 
ENOPROTOOPT
;

1285 #i‡
LWIP_TCP


1287 
IPPROTO_TCP
:

1288 i‡(*
›éí
 < ()) {

1289 
îr
 = 
EINVAL
;

1294 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1297 
›äame
) {

1298 
TCP_NODELAY
:

1299 
TCP_KEEPALIVE
:

1300 #i‡
LWIP_TCP_KEEPALIVE


1301 
TCP_KEEPIDLE
:

1302 
TCP_KEEPINTVL
:

1303 
TCP_KEEPCNT
:

1308 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1309 
s
, 
›äame
));

1310 
îr
 = 
ENOPROTOOPT
;

1314 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1316 
IPPROTO_UDPLITE
:

1317 i‡(*
›éí
 < ()) {

1318 
îr
 = 
EINVAL
;

1323 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1326 
›äame
) {

1327 
UDPLITE_SEND_CSCOV
:

1328 
UDPLITE_RECV_CSCOV
:

1332 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1333 
s
, 
›äame
));

1334 
îr
 = 
ENOPROTOOPT
;

1340 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1341 
s
, 
Àvñ
, 
›äame
));

1342 
îr
 = 
ENOPROTOOPT
;

1346 i‡(
îr
 !
ERR_OK
) {

1347 
	`sock_£t_î∫o
(
sock
, 
îr
);

1352 
d©a
.
sock
 = sock;

1353 
d©a
.
Àvñ
 =Üevel;

1354 
d©a
.
›äame
 = optname;

1355 
d©a
.
›tvÆ
 = optval;

1356 
d©a
.
›éí
 = optlen;

1357 
d©a
.
îr
 =Érr;

1358 
	`t˝ù_ˇŒback
(
lwù_gësock›t_öã∫Æ
, &
d©a
);

1359 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1361 
îr
 = 
d©a
.err;

1363 
	`sock_£t_î∫o
(
sock
, 
îr
);

1364  
îr
 ? -1 : 0;

1365 
	}
}

1368 
	$lwù_gësock›t_öã∫Æ
(*
¨g
)

1370 
lwù_sockë
 *
sock
;

1371 #ifde‡
LWIP_DEBUG


1372 
s
;

1374 
Àvñ
, 
›äame
;

1375 *
›tvÆ
;

1376 
lwù_£tgësock›t_d©a
 *
d©a
;

1378 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1380 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1381 
sock
 = 
d©a
->sock;

1382 #ifde‡
LWIP_DEBUG


1383 
s
 = 
d©a
->s;

1385 
Àvñ
 = 
d©a
->level;

1386 
›äame
 = 
d©a
->optname;

1387 
›tvÆ
 = 
d©a
->optval;

1389 
Àvñ
) {

1392 
SOL_SOCKET
:

1393 
›äame
) {

1396 
SO_ACCEPTCONN
:

1397 
SO_BROADCAST
:

1400 
SO_KEEPALIVE
:

1402 #i‡
SO_REUSE


1403 
SO_REUSEADDR
:

1404 
SO_REUSEPORT
:

1407 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 & 
›äame
;

1408 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",

1409 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1412 
SO_TYPE
:

1413 
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
)) {

1414 
NETCONN_RAW
:

1415 *(*)
›tvÆ
 = 
SOCK_RAW
;

1417 
NETCONN_TCP
:

1418 *(*)
›tvÆ
 = 
SOCK_STREAM
;

1420 
NETCONN_UDP
:

1421 *(*)
›tvÆ
 = 
SOCK_DGRAM
;

1424 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ty≥
;

1425 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
,

1427 
s
, *(*)
›tvÆ
));

1429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",

1430 
s
, *(*)
›tvÆ
));

1433 
SO_ERROR
:

1434 i‡(
sock
->
îr
 == 0) {

1435 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

1437 *(*)
›tvÆ
 = 
sock
->
îr
;

1438 
sock
->
îr
 = 0;

1439 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",

1440 
s
, *(*)
›tvÆ
));

1443 #i‡
LWIP_SO_RCVTIMEO


1444 
SO_RCVTIMEO
:

1445 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_timeout
;

1448 #i‡
LWIP_SO_RCVBUF


1449 
SO_RCVBUF
:

1450 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_bufsize
;

1453 #i‡
LWIP_UDP


1454 
SO_NO_CHECK
:

1455 *(*)
›tvÆ
 = (
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_NOCHKSUM
) ? 1 : 0;

1462 
IPPROTO_IP
:

1463 
›äame
) {

1464 
IP_TTL
:

1465 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1466 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",

1467 
s
, *(*)
›tvÆ
));

1469 
IP_TOS
:

1470 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
tos
;

1471 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",

1472 
s
, *(*)
›tvÆ
));

1474 #i‡
LWIP_IGMP


1475 
IP_MULTICAST_TTL
:

1476 *(
u8_t
*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1477 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",

1478 
s
, *(*)
›tvÆ
));

1480 
IP_MULTICAST_IF
:

1481 ((
ö_addr
*Ë
›tvÆ
)->
s_addr
 = 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
;

1482 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gësock›t(%d, IPPROTO_IP, IP_MULTICAST_IFË0x%"
X32_F
"\n",

1483 
s
, *(
u32_t
 *)
›tvÆ
));

1489 #i‡
LWIP_TCP


1491 
IPPROTO_TCP
:

1492 
›äame
) {

1493 
TCP_NODELAY
:

1494 *(*)
›tvÆ
 = (
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 & 
TF_NODELAY
);

1495 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",

1496 
s
, (*(*)
›tvÆ
)?"on":"off") );

1498 
TCP_KEEPALIVE
:

1499 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
;

1500 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",

1501 
s
, *(*)
›tvÆ
));

1504 #i‡
LWIP_TCP_KEEPALIVE


1505 
TCP_KEEPIDLE
:

1506 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
/1000);

1507 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",

1508 
s
, *(*)
›tvÆ
));

1510 
TCP_KEEPINTVL
:

1511 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
/1000);

1512 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",

1513 
s
, *(*)
›tvÆ
));

1515 
TCP_KEEPCNT
:

1516 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
;

1517 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",

1518 
s
, *(*)
›tvÆ
));

1525 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1527 
IPPROTO_UDPLITE
:

1528 
›äame
) {

1529 
UDPLITE_SEND_CSCOV
:

1530 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
;

1531 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",

1532 
s
, (*(*)
›tvÆ
)) );

1534 
UDPLITE_RECV_CSCOV
:

1535 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
;

1536 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",

1537 
s
, (*(*)
›tvÆ
)) );

1543 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1544 
	}
}

1547 
	$lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

1549 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1550 
îr
 = 
ERR_OK
;

1551 
lwù_£tgësock›t_d©a
 
d©a
;

1553 i‡(!
sock
)

1556 i‡(
NULL
 =
›tvÆ
) {

1557 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1562 
Àvñ
) {

1565 
SOL_SOCKET
:

1566 
›äame
) {

1568 
SO_BROADCAST
:

1571 
SO_KEEPALIVE
:

1574 #i‡
LWIP_SO_RCVTIMEO


1575 
SO_RCVTIMEO
:

1577 #i‡
LWIP_SO_RCVBUF


1578 
SO_RCVBUF
:

1584 #i‡
SO_REUSE


1585 
SO_REUSEADDR
:

1586 
SO_REUSEPORT
:

1589 i‡(
›éí
 < ()) {

1590 
îr
 = 
EINVAL
;

1593 
SO_NO_CHECK
:

1594 i‡(
›éí
 < ()) {

1595 
îr
 = 
EINVAL
;

1597 #i‡
LWIP_UDP


1598 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1599 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1601 
îr
 = 
EAFNOSUPPORT
;

1606 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1607 
s
, 
›äame
));

1608 
îr
 = 
ENOPROTOOPT
;

1613 
IPPROTO_IP
:

1614 
›äame
) {

1618 
IP_TTL
:

1619 
IP_TOS
:

1620 i‡(
›éí
 < ()) {

1621 
îr
 = 
EINVAL
;

1624 #i‡
LWIP_IGMP


1625 
IP_MULTICAST_TTL
:

1626 i‡(
›éí
 < (
u8_t
)) {

1627 
îr
 = 
EINVAL
;

1629 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1630 
îr
 = 
EAFNOSUPPORT
;

1633 
IP_MULTICAST_IF
:

1634 i‡(
›éí
 < (
ö_addr
)) {

1635 
îr
 = 
EINVAL
;

1637 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1638 
îr
 = 
EAFNOSUPPORT
;

1641 
IP_ADD_MEMBERSHIP
:

1642 
IP_DROP_MEMBERSHIP
:

1643 i‡(
›éí
 < (
ù_mªq
)) {

1644 
îr
 = 
EINVAL
;

1646 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1647 
îr
 = 
EAFNOSUPPORT
;

1652 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1653 
s
, 
›äame
));

1654 
îr
 = 
ENOPROTOOPT
;

1658 #i‡
LWIP_TCP


1660 
IPPROTO_TCP
:

1661 i‡(
›éí
 < ()) {

1662 
îr
 = 
EINVAL
;

1667 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1670 
›äame
) {

1671 
TCP_NODELAY
:

1672 
TCP_KEEPALIVE
:

1673 #i‡
LWIP_TCP_KEEPALIVE


1674 
TCP_KEEPIDLE
:

1675 
TCP_KEEPINTVL
:

1676 
TCP_KEEPCNT
:

1681 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1682 
s
, 
›äame
));

1683 
îr
 = 
ENOPROTOOPT
;

1687 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1689 
IPPROTO_UDPLITE
:

1690 i‡(
›éí
 < ()) {

1691 
îr
 = 
EINVAL
;

1696 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1699 
›äame
) {

1700 
UDPLITE_SEND_CSCOV
:

1701 
UDPLITE_RECV_CSCOV
:

1705 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1706 
s
, 
›äame
));

1707 
îr
 = 
ENOPROTOOPT
;

1713 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1714 
s
, 
Àvñ
, 
›äame
));

1715 
îr
 = 
ENOPROTOOPT
;

1719 i‡(
îr
 !
ERR_OK
) {

1720 
	`sock_£t_î∫o
(
sock
, 
îr
);

1726 
d©a
.
sock
 = sock;

1727 
d©a
.
Àvñ
 =Üevel;

1728 
d©a
.
›äame
 = optname;

1729 
d©a
.
›tvÆ
 = (*)optval;

1730 
d©a
.
›éí
 = &optlen;

1731 
d©a
.
îr
 =Érr;

1732 
	`t˝ù_ˇŒback
(
lwù_£tsock›t_öã∫Æ
, &
d©a
);

1733 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1735 
îr
 = 
d©a
.err;

1737 
	`sock_£t_î∫o
(
sock
, 
îr
);

1738  
îr
 ? -1 : 0;

1739 
	}
}

1742 
	$lwù_£tsock›t_öã∫Æ
(*
¨g
)

1744 
lwù_sockë
 *
sock
;

1745 #ifde‡
LWIP_DEBUG


1746 
s
;

1748 
Àvñ
, 
›äame
;

1749 c⁄° *
›tvÆ
;

1750 
lwù_£tgësock›t_d©a
 *
d©a
;

1752 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1754 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1755 
sock
 = 
d©a
->sock;

1756 #ifde‡
LWIP_DEBUG


1757 
s
 = 
d©a
->s;

1759 
Àvñ
 = 
d©a
->level;

1760 
›äame
 = 
d©a
->optname;

1761 
›tvÆ
 = 
d©a
->optval;

1763 
Àvñ
) {

1766 
SOL_SOCKET
:

1767 
›äame
) {

1770 
SO_BROADCAST
:

1773 
SO_KEEPALIVE
:

1775 #i‡
SO_REUSE


1776 
SO_REUSEADDR
:

1777 
SO_REUSEPORT
:

1780 i‡(*(*)
›tvÆ
) {

1781 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 |
›äame
;

1783 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 &~
›äame
;

1785 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",

1786 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1788 #i‡
LWIP_SO_RCVTIMEO


1789 
SO_RCVTIMEO
:

1790 
sock
->
c⁄n
->
ªcv_timeout
 = ( *(*)
›tvÆ
 );

1793 #i‡
LWIP_SO_RCVBUF


1794 
SO_RCVBUF
:

1795 
sock
->
c⁄n
->
ªcv_bufsize
 = ( *(*)
›tvÆ
 );

1798 #i‡
LWIP_UDP


1799 
SO_NO_CHECK
:

1800 i‡(*(*)
›tvÆ
) {

1801 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_NOCHKSUM
);

1803 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_NOCHKSUM
);

1811 
IPPROTO_IP
:

1812 
›äame
) {

1813 
IP_TTL
:

1814 
sock
->
c⁄n
->
pcb
.
ù
->
âl
 = (
u8_t
)(*(*)
›tvÆ
);

1815 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",

1816 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
âl
));

1818 
IP_TOS
:

1819 
sock
->
c⁄n
->
pcb
.
ù
->
tos
 = (
u8_t
)(*(*)
›tvÆ
);

1820 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",

1821 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
tos
));

1823 #i‡
LWIP_IGMP


1824 
IP_MULTICAST_TTL
:

1825 
sock
->
c⁄n
->
pcb
.
udp
->
âl
 = (
u8_t
)(*(u8_t*)
›tvÆ
);

1827 
IP_MULTICAST_IF
:

1828 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
 = ((
ö_addr
*Ë
›tvÆ
)->
s_addr
;

1830 
IP_ADD_MEMBERSHIP
:

1831 
IP_DROP_MEMBERSHIP
:

1834 
ù_mªq
 *
imr
 = (ù_mªq *)
›tvÆ
;

1835 if(
›äame
 =
IP_ADD_MEMBERSHIP
){

1836 
d©a
->
îr
 = 
	`igmp_joögroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1838 
d©a
->
îr
 = 
	`igmp_Àavegroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1840 if(
d©a
->
îr
 !
ERR_OK
) {

1841 
d©a
->
îr
 = 
EADDRNOTAVAIL
;

1849 #i‡
LWIP_TCP


1851 
IPPROTO_TCP
:

1852 
›äame
) {

1853 
TCP_NODELAY
:

1854 i‡(*(*)
›tvÆ
) {

1855 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 |
TF_NODELAY
;

1857 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 &~
TF_NODELAY
;

1859 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",

1860 
s
, (*(*)
›tvÆ
)?"on":"off") );

1862 
TCP_KEEPALIVE
:

1863 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = (
u32_t
)(*(*)
›tvÆ
);

1864 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPALIVEË-> %"
U32_F
"\n",

1865 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1868 #i‡
LWIP_TCP_KEEPALIVE


1869 
TCP_KEEPIDLE
:

1870 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1871 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPIDLEË-> %"
U32_F
"\n",

1872 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1874 
TCP_KEEPINTVL
:

1875 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1876 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPINTVLË-> %"
U32_F
"\n",

1877 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
));

1879 
TCP_KEEPCNT
:

1880 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
 = (
u32_t
)(*(*)
›tvÆ
);

1881 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£tsock›t(%d, IPPROTO_TCP, TCP_KEEPCNTË-> %"
U32_F
"\n",

1882 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
));

1889 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1891 
IPPROTO_UDPLITE
:

1892 
›äame
) {

1893 
UDPLITE_SEND_CSCOV
:

1894 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1896 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = 8;

1898 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = *(*)
›tvÆ
;

1900 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",

1901 
s
, (*(*)
›tvÆ
)) );

1903 
UDPLITE_RECV_CSCOV
:

1904 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1906 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = 8;

1908 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = *(*)
›tvÆ
;

1910 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",

1911 
s
, (*(*)
›tvÆ
)) );

1917 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1918 
	}
}

1921 
	$lwù_io˘l
(
s
, 
cmd
, *
¨gp
)

1923 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1924 
u16_t
 
buÊí
 = 0;

1925 
s16_t
 
ªcv_avaû
;

1927 i‡(!
sock
)

1930 
cmd
) {

1931 
FIONREAD
:

1932 i‡(!
¨gp
) {

1933 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

1937 
	`SYS_ARCH_GET
(
sock
->
c⁄n
->
ªcv_avaû
,Ñecv_avail);

1938 i‡(
ªcv_avaû
 < 0)

1939 
ªcv_avaû
 = 0;

1940 *((
u16_t
*)
¨gp
Ë(u16_t)
ªcv_avaû
;

1943 i‡(
sock
->
œ°d©a
) {

1944 
buÊí
 = 
	`√tbuf_Àn
(
sock
->
œ°d©a
);

1945 
buÊí
 -
sock
->
œ°off£t
;

1947 *((
u16_t
*)
¨gp
Ë+
buÊí
;

1950 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONREAD, %pË%"
U16_F
"\n", 
s
, 
¨gp
, *((
u16_t
*)argp)));

1951 
	`sock_£t_î∫o
(
sock
, 0);

1954 
FIONBIO
:

1955 i‡(
¨gp
 && *(
u32_t
*)argp)

1956 
sock
->
Êags
 |
O_NONBLOCK
;

1958 
sock
->
Êags
 &~
O_NONBLOCK
;

1959 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONBIO, %d)\n", 
s
, !!(
sock
->
Êags
 & 
O_NONBLOCK
)));

1960 
	`sock_£t_î∫o
(
sock
, 0);

1964 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, UNIMPL: 0x%lx, %p)\n", 
s
, 
cmd
, 
¨gp
));

1965 
	`sock_£t_î∫o
(
sock
, 
ENOSYS
);

1968 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/api/tcpip.c

39 
	~"lwù/›t.h
"

41 #i‡!
NO_SYS


43 
	~"lwù/sys.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù_‰ag.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/autoù.h
"

49 
	~"lwù/dh˝.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/dns.h
"

52 
	~"lwù/t˝ù.h
"

53 
	~"lwù/öô.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"√tif/µp_€.h
"

58 (* 
t˝ù_öô_d⁄e
)(*
¨g
);

59 *
t˝ù_öô_d⁄e_¨g
;

60 
sys_mbox_t
 
mbox
 = 
SYS_MBOX_NULL
;

62 #i‡
LWIP_TCPIP_CORE_LOCKING


64 
sys_£m_t
 
lock_t˝ù_c‹e
;

67 #i‡
LWIP_TCP


69 
t˝ù_t˝_timî_a˘ive
;

77 
	$t˝ù_t˝_timî
(*
¨g
)

79 
	`LWIP_UNUSED_ARG
(
¨g
);

82 
	`t˝_tmr
();

84 i‡(
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
) {

86 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

89 
t˝ù_t˝_timî_a˘ive
 = 0;

91 
	}
}

93 #i‡!
NO_SYS


100 
	$t˝_timî_√eded
()

103 i‡(!
t˝ù_t˝_timî_a˘ive
 && (
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
)) {

105 
t˝ù_t˝_timî_a˘ive
 = 1;

106 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

108 
	}
}

112 #i‡
IP_REASSEMBLY


119 
	$ù_ªass_timî
(*
¨g
)

121 
	`LWIP_UNUSED_ARG
(
¨g
);

122 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

123 
	`ù_ªass_tmr
();

124 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

125 
	}
}

128 #i‡
LWIP_ARP


135 
	$¨p_timî
(*
¨g
)

137 
	`LWIP_UNUSED_ARG
(
¨g
);

138 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:Étharp_tmr()\n"));

139 
	`ëh¨p_tmr
();

140 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

141 
	}
}

144 #i‡
LWIP_DHCP


151 
	$dh˝_timî_cﬂr£
(*
¨g
)

153 
	`LWIP_UNUSED_ARG
(
¨g
);

154 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

155 
	`dh˝_cﬂr£_tmr
();

156 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

157 
	}
}

165 
	$dh˝_timî_föe
(*
¨g
)

167 
	`LWIP_UNUSED_ARG
(
¨g
);

168 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

169 
	`dh˝_föe_tmr
();

170 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

171 
	}
}

174 #i‡
LWIP_AUTOIP


181 
	$autoù_timî
(*
¨g
)

183 
	`LWIP_UNUSED_ARG
(
¨g
);

184 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:áutoip_tmr()\n"));

185 
	`autoù_tmr
();

186 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

187 
	}
}

190 #i‡
LWIP_IGMP


197 
	$igmp_timî
(*
¨g
)

199 
	`LWIP_UNUSED_ARG
(
¨g
);

200 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: igmp_tmr()\n"));

201 
	`igmp_tmr
();

202 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

203 
	}
}

206 #i‡
LWIP_DNS


213 
	$dns_timî
(*
¨g
)

215 
	`LWIP_UNUSED_ARG
(
¨g
);

216 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dns_tmr()\n"));

217 
	`dns_tmr
();

218 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

219 
	}
}

233 
	$t˝ù_thªad
(*
¨g
)

235 
t˝ù_msg
 *
msg
;

236 
	`LWIP_UNUSED_ARG
(
¨g
);

238 #i‡
IP_REASSEMBLY


239 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

241 #i‡
LWIP_ARP


242 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

244 #i‡
LWIP_DHCP


245 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

246 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

248 #i‡
LWIP_AUTOIP


249 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

251 #i‡
LWIP_IGMP


252 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

254 #i‡
LWIP_DNS


255 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

258 i‡(
t˝ù_öô_d⁄e
 !
NULL
) {

259 
	`t˝ù_öô_d⁄e
(
t˝ù_öô_d⁄e_¨g
);

262 
	`LOCK_TCPIP_CORE
();

264 
	`sys_mbox_„tch
(
mbox
, (*)&
msg
);

265 
msg
->
ty≥
) {

266 #i‡
LWIP_NETCONN


267 
TCPIP_MSG_API
:

268 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: API mesßgê%p\n", (*)
msg
));

269 
msg
->msg.
≠imsg
->
	`fun˘i⁄
(&(msg->msg.apimsg->msg));

273 
TCPIP_MSG_INPKT
:

274 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: PACKET %p\n", (*)
msg
));

275 #i‡
LWIP_ARP


276 i‡(
msg
->msg.
öp
.
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

277 
	`ëhî√t_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

280 { 
	`ù_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

282 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

285 #i‡
LWIP_NETIF_API


286 
TCPIP_MSG_NETIFAPI
:

287 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: Nëi‡API mesßgê%p\n", (*)
msg
));

288 
msg
->msg.
√tiÁpimsg
->
	`fun˘i⁄
(&(msg->msg.netifapimsg->msg));

292 
TCPIP_MSG_CALLBACK
:

293 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: CALLBACK %p\n", (*)
msg
));

294 
msg
->msg.
cb
.
	`f
(msg->msg.cb.
˘x
);

295 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

298 
TCPIP_MSG_TIMEOUT
:

299 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: TIMEOUT %p\n", (*)
msg
));

300 
	`sys_timeout
(
msg
->msg.
tmo
.
m£cs
, msg->msg.tmo.
h
, msg->msg.tmo.
¨g
);

301 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

303 
TCPIP_MSG_UNTIMEOUT
:

304 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: UNTIMEOUT %p\n", (*)
msg
));

305 
	`sys_u¡imeout
(
msg
->msg.
tmo
.
h
, msg->msg.tmo.
¨g
);

306 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

313 
	}
}

322 
îr_t


323 
	$t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

325 
t˝ù_msg
 *
msg
;

327 i‡(
mbox
 !
SYS_MBOX_NULL
) {

328 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_INPKT
);

329 i‡(
msg
 =
NULL
) {

330  
ERR_MEM
;

333 
msg
->
ty≥
 = 
TCPIP_MSG_INPKT
;

334 
msg
->msg.
öp
.
p
 =Ö;

335 
msg
->msg.
öp
.
√tif
 = inp;

336 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

337 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

338  
ERR_MEM
;

340  
ERR_OK
;

342  
ERR_VAL
;

343 
	}
}

356 
îr_t


357 
	$t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
)

359 
t˝ù_msg
 *
msg
;

361 i‡(
mbox
 !
SYS_MBOX_NULL
) {

362 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

363 i‡(
msg
 =
NULL
) {

364  
ERR_MEM
;

367 
msg
->
ty≥
 = 
TCPIP_MSG_CALLBACK
;

368 
msg
->msg.
cb
.
f
 = f;

369 
msg
->msg.
cb
.
˘x
 = ctx;

370 i‡(
block
) {

371 
	`sys_mbox_po°
(
mbox
, 
msg
);

373 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

374 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

375  
ERR_MEM
;

378  
ERR_OK
;

380  
ERR_VAL
;

381 
	}
}

391 
îr_t


392 
	$t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

394 
t˝ù_msg
 *
msg
;

396 i‡(
mbox
 !
SYS_MBOX_NULL
) {

397 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

398 i‡(
msg
 =
NULL
) {

399  
ERR_MEM
;

402 
msg
->
ty≥
 = 
TCPIP_MSG_TIMEOUT
;

403 
msg
->msg.
tmo
.
m£cs
 = msecs;

404 
msg
->msg.
tmo
.
h
 = h;

405 
msg
->msg.
tmo
.
¨g
 =árg;

406 
	`sys_mbox_po°
(
mbox
, 
msg
);

407  
ERR_OK
;

409  
ERR_VAL
;

410 
	}
}

420 
îr_t


421 
	$t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

423 
t˝ù_msg
 *
msg
;

425 i‡(
mbox
 !
SYS_MBOX_NULL
) {

426 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

427 i‡(
msg
 =
NULL
) {

428  
ERR_MEM
;

431 
msg
->
ty≥
 = 
TCPIP_MSG_UNTIMEOUT
;

432 
msg
->msg.
tmo
.
h
 = h;

433 
msg
->msg.
tmo
.
¨g
 =árg;

434 
	`sys_mbox_po°
(
mbox
, 
msg
);

435  
ERR_OK
;

437  
ERR_VAL
;

438 
	}
}

440 #i‡
LWIP_NETCONN


449 
îr_t


450 
	$t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
)

452 
t˝ù_msg
 
msg
;

454 i‡(
mbox
 !
SYS_MBOX_NULL
) {

455 
msg
.
ty≥
 = 
TCPIP_MSG_API
;

456 
msg
.msg.
≠imsg
 =ápimsg;

457 
	`sys_mbox_po°
(
mbox
, &
msg
);

458 
	`sys_¨ch_£m_waô
(
≠imsg
->
msg
.
c⁄n
->
›_com∂ëed
, 0);

459  
ERR_OK
;

461  
ERR_VAL
;

462 
	}
}

464 #i‡
LWIP_TCPIP_CORE_LOCKING


473 
îr_t


474 
	$t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
)

476 
	`LOCK_TCPIP_CORE
();

477 
≠imsg
->
	`fun˘i⁄
(&◊pimsg->
msg
));

478 
	`UNLOCK_TCPIP_CORE
();

479  
ERR_OK
;

481 
	}
}

485 #i‡
LWIP_NETIF_API


486 #i‡!
LWIP_TCPIP_CORE_LOCKING


494 
îr_t


495 
	$t˝ù_√tiÁpi
(
√tiÁpi_msg
* 
√tiÁpimsg
)

497 
t˝ù_msg
 
msg
;

499 i‡(
mbox
 !
SYS_MBOX_NULL
) {

500 
√tiÁpimsg
->
msg
.
£m
 = 
	`sys_£m_√w
(0);

501 i‡(
√tiÁpimsg
->
msg
.
£m
 =
SYS_SEM_NULL
) {

502 
√tiÁpimsg
->
msg
.
îr
 = 
ERR_MEM
;

503  
√tiÁpimsg
->
msg
.
îr
;

506 
msg
.
ty≥
 = 
TCPIP_MSG_NETIFAPI
;

507 
msg
.msg.
√tiÁpimsg
 =Çetifapimsg;

508 
	`sys_mbox_po°
(
mbox
, &
msg
);

509 
	`sys_£m_waô
(
√tiÁpimsg
->
msg
.
£m
);

510 
	`sys_£m_‰ì
(
√tiÁpimsg
->
msg
.
£m
);

511  
√tiÁpimsg
->
msg
.
îr
;

513  
ERR_VAL
;

514 
	}
}

524 
îr_t


525 
	$t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
* 
√tiÁpimsg
)

527 
	`LOCK_TCPIP_CORE
();

528 
√tiÁpimsg
->
	`fun˘i⁄
(&“ëiÁpimsg->
msg
));

529 
	`UNLOCK_TCPIP_CORE
();

530  
√tiÁpimsg
->
msg
.
îr
;

531 
	}
}

544 
	$t˝ù_öô
((* 
öôfunc
)(*), *
¨g
)

546 
	`lwù_öô
();

548 
t˝ù_öô_d⁄e
 = 
öôfunc
;

549 
t˝ù_öô_d⁄e_¨g
 = 
¨g
;

550 
mbox
 = 
	`sys_mbox_√w
(
TCPIP_MBOX_SIZE
);

551 #i‡
LWIP_TCPIP_CORE_LOCKING


552 
lock_t˝ù_c‹e
 = 
	`sys_£m_√w
(1);

555 
	`sys_thªad_√w
(
TCPIP_THREAD_NAME
, 
t˝ù_thªad
, 
NULL
, 
TCPIP_THREAD_STACKSIZE
, 
TCPIP_THREAD_PRIO
);

556 
	}
}

565 
	$pbuf_‰ì_öt
(*
p
)

567 
pbuf
 *
q
 = 
p
;

568 
	`pbuf_‰ì
(
q
);

569 
	}
}

577 
îr_t


578 
	$pbuf_‰ì_ˇŒback
(
pbuf
 *
p
)

580  
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_öt
, 
p
, 0);

581 
	}
}

590 
îr_t


591 
	$mem_‰ì_ˇŒback
(*
m
)

593  
	`t˝ù_ˇŒback_wôh_block
(
mem_‰ì
, 
m
, 0);

594 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/dhcp.c

71 
	~"lwù/›t.h
"

73 #i‡
LWIP_DHCP


75 
	~"lwù/°©s.h
"

76 
	~"lwù/mem.h
"

77 
	~"lwù/udp.h
"

78 
	~"lwù/ù_addr.h
"

79 
	~"lwù/√tif.h
"

80 
	~"lwù/öë.h
"

81 
	~"lwù/sys.h
"

82 
	~"lwù/dh˝.h
"

83 
	~"lwù/autoù.h
"

84 
	~"lwù/dns.h
"

85 
	~"√tif/ëh¨p.h
"

87 
	~<°rög.h
>

94 #ifde‡
DHCP_GLOBAL_XID_HEADER


95 #ö˛udê
DHCP_GLOBAL_XID_HEADER


100 
	#DHCP_MAX_MSG_LEN
(
√tif
Ë“ëif->
mtu
)

	)

101 
	#DHCP_MAX_MSG_LEN_MIN_REQUIRED
 576

	)

104 
dh˝_h™dÀ_ack
(
√tif
 *netif);

105 
dh˝_h™dÀ_«k
(
√tif
 *netif);

106 
dh˝_h™dÀ_of„r
(
√tif
 *netif);

108 
îr_t
 
dh˝_discovî
(
√tif
 *netif);

109 
îr_t
 
dh˝_£À˘
(
√tif
 *netif);

110 
dh˝_check
(
√tif
 *netif);

111 
dh˝_böd
(
√tif
 *netif);

112 #i‡
DHCP_DOES_ARP_CHECK


113 
îr_t
 
dh˝_de˛öe
(
√tif
 *netif);

115 
îr_t
 
dh˝_ªböd
(
√tif
 *netif);

116 
dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
);

119 
dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

120 
îr_t
 
dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp);

121 
u8_t
 *
dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, u8_à
›ti⁄_ty≥
);

122 
u8_t
 
dh˝_gë_›ti⁄_byã
(u8_à*
±r
);

124 
u16_t
 
dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
);

126 
u32_t
 
dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
);

127 
dh˝_‰ì_ª∂y
(
dh˝
 *dhcp);

130 
dh˝_timeout
(
√tif
 *netif);

131 
dh˝_t1_timeout
(
√tif
 *netif);

132 
dh˝_t2_timeout
(
√tif
 *netif);

136 
îr_t
 
dh˝_¸óã_ªque°
(
√tif
 *netif);

138 
dh˝_dñëe_ªque°
(
√tif
 *netif);

140 
dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
);

142 
dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
);

143 
dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
);

144 
dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
);

146 
dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp);

161 
	$dh˝_h™dÀ_«k
(
√tif
 *netif)

163 
dh˝
 *dh˝ = 
√tif
->dhcp;

164 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_«k“ëif=%pË%c%c%"
U16_F
"\n",

165 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

167 
	`√tif_£t_down
(
√tif
);

169 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

170 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

171 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

173 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

175 
	`dh˝_discovî
(
√tif
);

176 
	}
}

188 
	$dh˝_check
(
√tif
 *netif)

190 
dh˝
 *dh˝ = 
√tif
->dhcp;

191 
îr_t
 
ªsu…
;

192 
u16_t
 
m£cs
;

193 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_check“ëif=%pË%c%c\n", (*)
√tif
, (
s16_t
Íëif->
«me
[0],

194 (
s16_t
)
√tif
->
«me
[1]));

195 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_CHECKING
);

198 
ªsu…
 = 
	`ëh¨p_quîy
(
√tif
, &
dh˝
->
of„ªd_ù_addr
, 
NULL
);

199 i‡(
ªsu…
 !
ERR_OK
) {

200 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_check: couldÇotÖerform ARP query\n"));

202 
dh˝
->
åõs
++;

203 
m£cs
 = 500;

204 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

205 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_check(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

206 
	}
}

214 
	$dh˝_h™dÀ_of„r
(
√tif
 *netif)

216 
dh˝
 *dh˝ = 
√tif
->dhcp;

218 
u8_t
 *
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SERVER_ID
);

219 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_of„r“ëif=%pË%c%c%"
U16_F
"\n",

220 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

221 i‡(
›ti⁄_±r
 !
NULL
) {

222 
dh˝
->
£rvî_ù_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

223 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): sîvî 0x%08"
X32_F
"\n", 
dh˝
->
£rvî_ù_addr
.
addr
));

225 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, (
ù_addr
 *)&dh˝->
msg_ö
->
yüddr
);

226 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): of„∏f‹ 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

228 
	`dh˝_£À˘
(
√tif
);

230 
	}
}

240 
îr_t


241 
	$dh˝_£À˘
(
√tif
 *netif)

243 
dh˝
 *dh˝ = 
√tif
->dhcp;

244 
îr_t
 
ªsu…
;

245 
u16_t
 
m£cs
;

246 #i‡
LWIP_NETIF_HOSTNAME


247 c⁄° *
p
;

250 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_£À˘“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

251 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REQUESTING
);

254 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

255 i‡(
ªsu…
 =
ERR_OK
) {

256 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

257 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

259 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

260 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

263 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

264 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

266 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

267 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

269 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

270 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

271 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

272 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

273 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

275 #i‡
LWIP_NETIF_HOSTNAME


276 
p
 = (c⁄° *)
√tif
->
ho°«me
;

277 i‡(
p
 !
NULL
) {

278 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

279 *
p
) {

280 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

285 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

287 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

292 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

294 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

295 
	`dh˝_dñëe_ªque°
(
√tif
);

296 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_select: REQUESTING\n"));

298 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_select: couldÇotállocate DHCPÑequest\n"));

300 
dh˝
->
åõs
++;

301 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

302 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

303 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_£À˘(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

304  
ªsu…
;

305 
	}
}

312 
	$dh˝_cﬂr£_tmr
()

314 
√tif
 *√ti‡
√tif_li°
;

315 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_coarse_tmr()\n"));

317 
√tif
 !
NULL
) {

319 i‡(
√tif
->
dh˝
 !
NULL
) {

321 i‡(
√tif
->
dh˝
->
t2_timeout
-- == 1) {

322 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å2Åimeout\n"));

324 
	`dh˝_t2_timeout
(
√tif
);

326 } i‡(
√tif
->
dh˝
->
t1_timeout
-- == 1) {

327 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å1Åimeout\n"));

329 
	`dh˝_t1_timeout
(
√tif
);

333 
√tif
 =Çëif->
√xt
;

335 
	}
}

345 
	$dh˝_föe_tmr
()

347 
√tif
 *√ti‡
√tif_li°
;

349 
√tif
 !
NULL
) {

351 i‡(
√tif
->
dh˝
 !
NULL
) {

353 i‡(
√tif
->
dh˝
->
ªque°_timeout
 > 1) {

354 
√tif
->
dh˝
->
ªque°_timeout
--;

356 i‡(
√tif
->
dh˝
->
ªque°_timeout
 == 1) {

357 
√tif
->
dh˝
->
ªque°_timeout
--;

359 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_fine_tmr():ÑequestÅimeout\n"));

361 
	`dh˝_timeout
(
√tif
);

365 
√tif
 =Çëif->
√xt
;

367 
	}
}

378 
	$dh˝_timeout
(
√tif
 *netif)

380 
dh˝
 *dh˝ = 
√tif
->dhcp;

381 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_timeout()\n"));

383 i‡((
dh˝
->
°©e
 =
DHCP_BACKING_OFF
Ë|| (dh˝->°©ê=
DHCP_SELECTING
)) {

384 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout():Ñestarting discovery\n"));

385 
	`dh˝_discovî
(
√tif
);

387 } i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

388 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING, DHCPÑequestÅimed out\n"));

389 i‡(
dh˝
->
åõs
 <= 5) {

390 
	`dh˝_£À˘
(
√tif
);

392 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING,Ñeleasing,Ñestarting\n"));

393 
	`dh˝_ªÀa£
(
√tif
);

394 
	`dh˝_discovî
(
√tif
);

397 } i‡(
dh˝
->
°©e
 =
DHCP_CHECKING
) {

398 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): CHECKING, ARPÑequestÅimed out\n"));

399 i‡(
dh˝
->
åõs
 <= 1) {

400 
	`dh˝_check
(
√tif
);

405 
	`dh˝_böd
(
√tif
);

409 i‡(
dh˝
->
°©e
 =
DHCP_RENEWING
) {

410 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RENEWING, DHCPÑequestÅimed out\n"));

413 
	`dh˝_ª√w
(
√tif
);

415 } i‡(
dh˝
->
°©e
 =
DHCP_REBINDING
) {

416 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REBINDING, DHCPÑequestÅimed out\n"));

417 i‡(
dh˝
->
åõs
 <= 8) {

418 
	`dh˝_ªböd
(
√tif
);

420 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));

421 
	`dh˝_ªÀa£
(
√tif
);

422 
	`dh˝_discovî
(
√tif
);

425 
	}
}

433 
	$dh˝_t1_timeout
(
√tif
 *netif)

435 
dh˝
 *dh˝ = 
√tif
->dhcp;

436 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout()\n"));

437 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

440 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout(): mustÑenew\n"));

441 
	`dh˝_ª√w
(
√tif
);

443 
	}
}

451 
	$dh˝_t2_timeout
(
√tif
 *netif)

453 
dh˝
 *dh˝ = 
√tif
->dhcp;

454 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout()\n"));

455 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

457 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout(): mustÑebind\n"));

458 
	`dh˝_ªböd
(
√tif
);

460 
	}
}

468 
	$dh˝_h™dÀ_ack
(
√tif
 *netif)

470 
dh˝
 *dh˝ = 
√tif
->dhcp;

471 
u8_t
 *
›ti⁄_±r
;

473 
dh˝
->
of„ªd_¢_mask
.
addr
 = 0;

474 
dh˝
->
of„ªd_gw_addr
.
addr
 = 0;

475 
dh˝
->
of„ªd_bc_addr
.
addr
 = 0;

478 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_LEASE_TIME
);

479 i‡(
›ti⁄_±r
 !
NULL
) {

481 
dh˝
->
of„ªd_t0_Àa£
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

484 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T1
);

485 i‡(
›ti⁄_±r
 !
NULL
) {

487 
dh˝
->
of„ªd_t1_ª√w
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

490 
dh˝
->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t0_Àa£
 / 2;

494 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T2
);

495 i‡(
›ti⁄_±r
 !
NULL
) {

497 
dh˝
->
of„ªd_t2_ªböd
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

500 
dh˝
->
of„ªd_t2_ªböd
 = dh˝->
of„ªd_t0_Àa£
;

504 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, &dh˝->
msg_ö
->
yüddr
);

512 
	`ù_addr_£t
(&
dh˝
->
of„ªd_si_addr
, &dh˝->
msg_ö
->
süddr
);

514 i‡(
dh˝
->
msg_ö
->
fûe
[0]) {

515 
dh˝
->
boŸ_fûe_«me
 = 
	`mem_mÆloc
(
	`°æí
(dh˝->
msg_ö
->
fûe
) + 1);

516 
	`°r˝y
(
dh˝
->
boŸ_fûe_«me
, dh˝->
msg_ö
->
fûe
);

521 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

523 i‡(
›ti⁄_±r
 !
NULL
) {

524 
dh˝
->
of„ªd_¢_mask
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

528 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_ROUTER
);

529 i‡(
›ti⁄_±r
 !
NULL
) {

530 
dh˝
->
of„ªd_gw_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

534 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

535 i‡(
›ti⁄_±r
 !
NULL
) {

536 
dh˝
->
of„ªd_bc_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

540 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

541 i‡(
›ti⁄_±r
 !
NULL
) {

542 
u8_t
 
n
;

543 
dh˝
->
dns_cou¡
 = 
	`dh˝_gë_›ti⁄_byã
(&
›ti⁄_±r
[1]Ë/ (
u32_t
)(
ù_addr
);

545 i‡(
dh˝
->
dns_cou¡
 > 
DHCP_MAX_DNS
)

546 
dh˝
->
dns_cou¡
 = 
DHCP_MAX_DNS
;

547 
n
 = 0;Ç < 
dh˝
->
dns_cou¡
;Ç++) {

548 
dh˝
->
of„ªd_dns_addr
[
n
].
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2 +Ç * 4]));

549 #i‡
LWIP_DNS


550 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&(
dh˝
->
of„ªd_dns_addr
[n].
addr
)));

553 #i‡
LWIP_DNS


554 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&
ù_addr_™y
));

557 
	}
}

571 
îr_t


572 
	$dh˝_°¨t
(
√tif
 *netif)

574 
dh˝
 *dhcp;

575 
îr_t
 
ªsu…
 = 
ERR_OK
;

577 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

578 
dh˝
 = 
√tif
->dhcp;

579 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

582 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

585 i‡(
√tif
->
mtu
 < 
DHCP_MAX_MSG_LEN_MIN_REQUIRED
) {

586 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): Cannot useÅhisÇetif with DHCP: MTU isÅoo small\n"));

587  
ERR_MEM
;

591 i‡(
dh˝
 =
NULL
) {

592 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): startingÇew DHCP client\n"));

593 
dh˝
 = 
	`mem_mÆloc
((dhcp));

594 i‡(
dh˝
 =
NULL
) {

595 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇotállocate dhcp\n"));

596  
ERR_MEM
;

599 
√tif
->
dh˝
 = dhcp;

600 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start():állocated dhcp"));

603 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("dhcp_start():Ñestarting DHCP configuration\n"));

604 i‡(
dh˝
->
pcb
 !
NULL
) {

605 
	`udp_ªmove
(
dh˝
->
pcb
);

607 i‡(
dh˝
->
p
 !
NULL
) {

608 
	`pbuf_‰ì
(
dh˝
->
p
);

613 
	`mem£t
(
dh˝
, 0, (dhcp));

615 
dh˝
->
pcb
 = 
	`udp_√w
();

616 i‡(
dh˝
->
pcb
 =
NULL
) {

617 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇot obtainÖcb\n"));

618 
	`mem_‰ì
((*)
dh˝
);

619 
√tif
->
dh˝
 = dh˝ = 
NULL
;

620  
ERR_MEM
;

622 #i‡
IP_SOF_BROADCAST


623 
dh˝
->
pcb
->
so_›ti⁄s
|=
SOF_BROADCAST
;

626 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

627 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

629 
	`udp_ªcv
(
dh˝
->
pcb
, 
dh˝_ªcv
, 
√tif
);

630 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): starting DHCP configuration\n"));

632 
ªsu…
 = 
	`dh˝_discovî
(
√tif
);

633 i‡(
ªsu…
 !
ERR_OK
) {

635 
	`dh˝_°›
(
√tif
);

636  
ERR_MEM
;

639 
√tif
->
Êags
 |
NETIF_FLAG_DHCP
;

640  
ªsu…
;

641 
	}
}

653 
	$dh˝_öf‹m
(
√tif
 *netif)

655 
dh˝
 *dh˝, *
ﬁd_dh˝
 = 
√tif
->dhcp;

656 
îr_t
 
ªsu…
 = 
ERR_OK
;

657 
dh˝
 = 
	`mem_mÆloc
((dhcp));

658 i‡(
dh˝
 =
NULL
) {

659 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇotállocate dhcp\n"));

662 
√tif
->
dh˝
 = dhcp;

663 
	`mem£t
(
dh˝
, 0, (dhcp));

665 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform():állocated dhcp\n"));

666 
dh˝
->
pcb
 = 
	`udp_√w
();

667 i‡(
dh˝
->
pcb
 =
NULL
) {

668 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇot obtainÖcb"));

669 
	`mem_‰ì
((*)
dh˝
);

672 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform(): createdÇew udpÖcb\n"));

674 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

675 i‡(
ªsu…
 =
ERR_OK
) {

677 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

678 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_INFORM
);

680 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

681 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

683 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

685 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

687 #i‡
IP_SOF_BROADCAST


688 
dh˝
->
pcb
->
so_›ti⁄s
|=
SOF_BROADCAST
;

690 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

691 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
);

692 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_inform: INFORMING\n"));

693 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

694 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

695 
	`dh˝_dñëe_ªque°
(
√tif
);

697 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform: couldÇotállocate DHCPÑequest\n"));

700 i‡(
dh˝
->
pcb
 !
NULL
) {

701 
	`udp_ªmove
(
dh˝
->
pcb
);

703 
dh˝
->
pcb
 = 
NULL
;

704 
	`mem_‰ì
((*)
dh˝
);

705 
√tif
->
dh˝
 = 
ﬁd_dh˝
;

706 
	}
}

708 #i‡
DHCP_DOES_ARP_CHECK


715 
	$dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
)

717 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

718 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_arp_reply()\n"));

720 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
°©e
 =
DHCP_CHECKING
)) {

721 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_¨p_ª∂y(): CHECKING,áΩÑïly f‹ 0x%08"
X32_F
"\n", 
addr
->addr));

724 i‡(
	`ù_addr_cmp
(
addr
, &
√tif
->
dh˝
->
of„ªd_ù_addr
)) {

726 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1, ("dhcp_arp_reply():árpÑeply matched with offeredáddress, declining\n"));

727 
	`dh˝_de˛öe
(
√tif
);

730 
	}
}

741 
îr_t


742 
	$dh˝_de˛öe
(
√tif
 *netif)

744 
dh˝
 *dh˝ = 
√tif
->dhcp;

745 
îr_t
 
ªsu…
 = 
ERR_OK
;

746 
u16_t
 
m£cs
;

747 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_decline()\n"));

748 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

750 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

751 i‡(
ªsu…
 =
ERR_OK
) {

752 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

753 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DECLINE
);

755 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

756 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

758 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

760 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

763 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

765 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

766 
	`dh˝_dñëe_ªque°
(
√tif
);

767 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_decline: BACKING OFF\n"));

769 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_decline: couldÇotállocate DHCPÑequest\n"));

771 
dh˝
->
åõs
++;

772 
m£cs
 = 10*1000;

773 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

774 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_de˛öe(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

775  
ªsu…
;

776 
	}
}

785 
îr_t


786 
	$dh˝_discovî
(
√tif
 *netif)

788 
dh˝
 *dh˝ = 
√tif
->dhcp;

789 
îr_t
 
ªsu…
 = 
ERR_OK
;

790 
u16_t
 
m£cs
;

791 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_discover()\n"));

792 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, 
IP_ADDR_ANY
);

793 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_SELECTING
);

795 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

796 i‡(
ªsu…
 =
ERR_OK
) {

797 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: makingÑequest\n"));

798 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

799 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DISCOVER
);

801 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

802 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

804 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

805 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

806 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

807 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

808 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

810 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

812 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover:Ñealloc()ing\n"));

813 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

815 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

816 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));

817 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

818 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: deleting()ing\n"));

819 
	`dh˝_dñëe_ªque°
(
√tif
);

820 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_discover: SELECTING\n"));

822 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_discover: couldÇotállocate DHCPÑequest\n"));

824 
dh˝
->
åõs
++;

825 #i‡
LWIP_DHCP_AUTOIP_COOP


826 if(
dh˝
->
åõs
 >
LWIP_DHCP_AUTOIP_COOP_TRIES
 && dh˝->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_OFF
) {

827 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_ON
;

828 
	`autoù_°¨t
(
√tif
);

831 
m£cs
 = (
dh˝
->
åõs
 < 6 ? 1 << dhcp->tries : 60) * 1000;

832 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

833 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_discovî(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

834  
ªsu…
;

835 
	}
}

844 
	$dh˝_böd
(
√tif
 *netif)

846 
u32_t
 
timeout
;

847 
dh˝
 *dhcp;

848 
ù_addr
 
¢_mask
, 
gw_addr
;

849 
	`LWIP_ERROR
("dh˝_böd:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

850 
dh˝
 = 
√tif
->dhcp;

851 
	`LWIP_ERROR
("dh˝_böd: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

852 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_böd“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

855 i‡(
dh˝
->
of„ªd_t1_ª√w
 != 0xffffffffUL) {

857 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å1ÑíewÆÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t1_ª√w
));

858 
timeout
 = (
dh˝
->
of„ªd_t1_ª√w
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

859 if(
timeout
 > 0xffff) {

860 
timeout
 = 0xffff;

862 
dh˝
->
t1_timeout
 = (
u16_t
)
timeout
;

863 i‡(
dh˝
->
t1_timeout
 == 0) {

864 
dh˝
->
t1_timeout
 = 1;

866 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t1_ª√w
*1000));

869 i‡(
dh˝
->
of„ªd_t2_ªböd
 != 0xffffffffUL) {

870 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å2ÑebödÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t2_ªböd
));

871 
timeout
 = (
dh˝
->
of„ªd_t2_ªböd
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

872 if(
timeout
 > 0xffff) {

873 
timeout
 = 0xffff;

875 
dh˝
->
t2_timeout
 = (
u16_t
)
timeout
;

876 i‡(
dh˝
->
t2_timeout
 == 0) {

877 
dh˝
->
t2_timeout
 = 1;

879 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t2_ªböd
*1000));

882 
	`ù_addr_£t
(&
¢_mask
, &
dh˝
->
of„ªd_¢_mask
);

886 i‡(
¢_mask
.
addr
 == 0) {

888 
u8_t
 
fú°_o˘ë
 = 
	`ù4_addr1
(&
¢_mask
);

889 i‡(
fú°_o˘ë
 <= 127) {

890 
¢_mask
.
addr
 = 
	`ht⁄l
(0xff000000);

891 } i‡(
fú°_o˘ë
 >= 192) {

892 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffffff00);

894 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffff0000);

898 
	`ù_addr_£t
(&
gw_addr
, &
dh˝
->
of„ªd_gw_addr
);

900 i‡(
gw_addr
.
addr
 == 0) {

902 
gw_addr
.
addr
 = (
dh˝
->
of„ªd_ù_addr
.add∏& 
¢_mask
.addr);

904 
gw_addr
.
addr
 |
	`ht⁄l
(0x00000001);

907 #i‡
LWIP_DHCP_AUTOIP_COOP


908 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

909 
	`autoù_°›
(
√tif
);

910 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

914 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): IP: 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

915 
	`√tif_£t_ùaddr
(
√tif
, &
dh˝
->
of„ªd_ù_addr
);

916 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): SN: 0x%08"
X32_F
"\n", 
¢_mask
.
addr
));

917 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

918 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): GW: 0x%08"
X32_F
"\n", 
gw_addr
.
addr
));

919 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

921 
	`√tif_£t_up
(
√tif
);

923 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BOUND
);

924 
	}
}

931 
îr_t


932 
	$dh˝_ª√w
(
√tif
 *netif)

934 
dh˝
 *dh˝ = 
√tif
->dhcp;

935 
îr_t
 
ªsu…
;

936 
u16_t
 
m£cs
;

937 #i‡
LWIP_NETIF_HOSTNAME


938 c⁄° *
p
;

940 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_renew()\n"));

941 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_RENEWING
);

944 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

945 i‡(
ªsu…
 =
ERR_OK
) {

947 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

948 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

950 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

951 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

953 #i‡
LWIP_NETIF_HOSTNAME


954 
p
 = (c⁄° *)
√tif
->
ho°«me
;

955 i‡(
p
 !
NULL
) {

956 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

957 *
p
) {

958 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

964 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

965 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

969 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

970 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

973 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

975 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

977 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

978 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

979 
	`dh˝_dñëe_ªque°
(
√tif
);

981 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_renew: RENEWING\n"));

983 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_renew: couldÇotállocate DHCPÑequest\n"));

985 
dh˝
->
åõs
++;

987 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 2000 : 20 * 1000;

988 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

989 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ª√w(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

990  
ªsu…
;

991 
	}
}

998 
îr_t


999 
	$dh˝_ªböd
(
√tif
 *netif)

1001 
dh˝
 *dh˝ = 
√tif
->dhcp;

1002 
îr_t
 
ªsu…
;

1003 
u16_t
 
m£cs
;

1004 #i‡
LWIP_NETIF_HOSTNAME


1005 c⁄° *
p
;

1007 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind()\n"));

1008 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBINDING
);

1011 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1012 i‡(
ªsu…
 =
ERR_OK
) {

1014 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1015 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

1017 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

1018 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 
	`DHCP_MAX_MSG_LEN
(
√tif
));

1020 #i‡
LWIP_NETIF_HOSTNAME


1021 
p
 = (c⁄° *)
√tif
->
ho°«me
;

1022 i‡(
p
 !
NULL
) {

1023 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

1024 *
p
) {

1025 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

1031 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

1032 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

1034 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

1035 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

1038 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1040 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1043 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

1044 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

1045 
	`dh˝_dñëe_ªque°
(
√tif
);

1046 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind: REBINDING\n"));

1048 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_rebind: couldÇotállocate DHCPÑequest\n"));

1050 
dh˝
->
åõs
++;

1051 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1052 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1053 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªböd(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1054  
ªsu…
;

1055 
	}
}

1062 
îr_t


1063 
	$dh˝_ªÀa£
(
√tif
 *netif)

1065 
dh˝
 *dh˝ = 
√tif
->dhcp;

1066 
îr_t
 
ªsu…
;

1067 
u16_t
 
m£cs
;

1068 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_release()\n"));

1071 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1073 
dh˝
->
£rvî_ù_addr
.
addr
 = 0;

1074 
dh˝
->
of„ªd_ù_addr
.
addr
 = dh˝->
of„ªd_¢_mask
.addr = 0;

1075 
dh˝
->
of„ªd_gw_addr
.
addr
 = dh˝->
of„ªd_bc_addr
.addr = 0;

1076 
dh˝
->
of„ªd_t0_Àa£
 = dh˝->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t2_ªböd
 = 0;

1077 
dh˝
->
dns_cou¡
 = 0;

1080 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1081 i‡(
ªsu…
 =
ERR_OK
) {

1082 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1083 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_RELEASE
);

1085 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1087 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1089 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

1090 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1091 
	`dh˝_dñëe_ªque°
(
√tif
);

1092 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_release: RELEASED, DHCP_OFF\n"));

1094 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_release: couldÇotállocate DHCPÑequest\n"));

1096 
dh˝
->
åõs
++;

1097 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1098 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1099 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªÀa£(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1101 
	`√tif_£t_down
(
√tif
);

1103 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

1104 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

1105 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

1108  
ªsu…
;

1109 
	}
}

1117 
	$dh˝_°›
(
√tif
 *netif)

1119 
dh˝
 *dh˝ = 
√tif
->dhcp;

1120 
	`LWIP_ERROR
("dh˝_°›:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1122 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

1124 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_stop()\n"));

1126 i‡(
dh˝
 !
NULL
) {

1127 #i‡
LWIP_DHCP_AUTOIP_COOP


1128 if(
dh˝
->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_ON
) {

1129 
	`autoù_°›
(
√tif
);

1130 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_OFF
;

1134 i‡(
dh˝
->
pcb
 !
NULL
) {

1135 
	`udp_ªmove
(
dh˝
->
pcb
);

1136 
dh˝
->
pcb
 = 
NULL
;

1138 i‡(
dh˝
->
p
 !
NULL
) {

1139 
	`pbuf_‰ì
(
dh˝
->
p
);

1140 
dh˝
->
p
 = 
NULL
;

1143 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1144 
	`mem_‰ì
((*)
dh˝
);

1145 
√tif
->
dh˝
 = 
NULL
;

1147 
	}
}

1157 
	$dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
)

1159 i‡(
√w_°©e
 !
dh˝
->
°©e
) {

1160 
dh˝
->
°©e
 = 
√w_°©e
;

1161 
dh˝
->
åõs
 = 0;

1163 
	}
}

1171 
	$dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
)

1173 
	`LWIP_ASSERT
("dh˝_›ti⁄: dh˝->›ti⁄s_out_À¿+ 2 + o±i⁄_À¿<DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U + 
›ti⁄_Àn
 <
DHCP_OPTIONS_LEN
);

1174 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_ty≥
;

1175 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_Àn
;

1176 
	}
}

1182 
	$dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
)

1184 
	`LWIP_ASSERT
("dh˝_›ti⁄_byã: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1185 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
vÆue
;

1186 
	}
}

1189 
	$dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
)

1191 
	`LWIP_ASSERT
("dh˝_›ti⁄_sh‹t: dh˝->›ti⁄s_out_À¿+ 2 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U <
DHCP_OPTIONS_LEN
);

1192 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff00U) >> 8);

1193 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
Ë(
vÆue
 & 0x00ffU);

1194 
	}
}

1197 
	$dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
)

1199 
	`LWIP_ASSERT
("dh˝_›ti⁄_l⁄g: dh˝->›ti⁄s_out_À¿+ 4 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 4U <
DHCP_OPTIONS_LEN
);

1200 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff000000UL) >> 24);

1201 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x00ff0000UL) >> 16);

1202 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x0000ff00UL) >> 8);

1203 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x000000ffUL));

1204 
	}
}

1216 
îr_t


1217 
	$dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp)

1219 
u16_t
 
ªt
;

1220 
	`LWIP_ERROR
("dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_ARG
;);

1221 
	`LWIP_ERROR
("dh˝->∞!NULL", (
dh˝
->
p
 !
NULL
),  
ERR_VAL
;);

1223 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1225 i‡(
dh˝
->
p
->
tŸ_Àn
 > ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
)) {

1226 
dh˝
->
›ti⁄s_ö_Àn
 = dh˝->
p
->
tŸ_Àn
 - ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1227 
dh˝
->
›ti⁄s_ö
 = 
	`mem_mÆloc
(dh˝->
›ti⁄s_ö_Àn
);

1228 i‡(
dh˝
->
›ti⁄s_ö
 =
NULL
) {

1229 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->options\n"));

1230  
ERR_MEM
;

1233 
dh˝
->
msg_ö
 = 
	`mem_mÆloc
((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1234 i‡(
dh˝
->
msg_ö
 =
NULL
) {

1235 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->msg_in\n"));

1236 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1237 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1238  
ERR_MEM
;

1242 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
msg_ö
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
, 0);

1243 
	`LWIP_ASSERT
("ªà=sizeof(°ru˘ dh˝_msgË- DHCP_OPTIONS_LEN", 
ªt
 =(
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1244 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytes into dhcp->msg_in[]\n",

1245 (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
));

1247 i‡(
dh˝
->
›ti⁄s_ö
 !
NULL
) {

1249 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
›ti⁄s_ö
, dh˝->
›ti⁄s_ö_Àn
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1250 
	`LWIP_ASSERT
("ªà=dh˝->›ti⁄s_ö_Àn", 
ªt
 =
dh˝
->
›ti⁄s_ö_Àn
);

1251 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytesÅo dhcp->options_in[]\n",

1252 
dh˝
->
›ti⁄s_ö_Àn
));

1254 
	`LWIP_UNUSED_ARG
(
ªt
);

1255  
ERR_OK
;

1256 
	}
}

1263 
	$dh˝_‰ì_ª∂y
(
dh˝
 *dhcp)

1265 i‡(
dh˝
->
msg_ö
 !
NULL
) {

1266 
	`mem_‰ì
((*)
dh˝
->
msg_ö
);

1267 
dh˝
->
msg_ö
 = 
NULL
;

1269 i‡(
dh˝
->
›ti⁄s_ö
) {

1270 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1271 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1272 
dh˝
->
›ti⁄s_ö_Àn
 = 0;

1274 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("dhcp_free_reply(): free'd\n"));

1275 
	}
}

1281 
	$dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

1283 
√tif
 *√ti‡(√ti‡*)
¨g
;

1284 
dh˝
 *dh˝ = 
√tif
->dhcp;

1285 
dh˝_msg
 *
ª∂y_msg
 = (dh˝_msg *)
p
->
∑ylﬂd
;

1286 
u8_t
 *
›ti⁄s_±r
;

1287 
u8_t
 
msg_ty≥
;

1288 
u8_t
 
i
;

1289 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_ªcv’bu‡%pË‰om DHCP sîvî %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"Ö‹à%"U16_F"\n", (*)
p
,

1290 (
u16_t
)(
	`¡ohl
(
addr
->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),

1291 (
u16_t
)(
	`¡ohl
(
addr
->addrË>> 8 & 0xff), (u16_t)“tohl◊ddr->addrË& 0xff), 
p‹t
));

1292 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->À¿%"
U16_F
"\n", 
p
->
Àn
));

1293 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->tŸ_À¿%"
U16_F
"\n", 
p
->
tŸ_Àn
));

1295 
	`LWIP_UNUSED_ARG
(
pcb
);

1296 
	`LWIP_UNUSED_ARG
(
addr
);

1297 
	`LWIP_UNUSED_ARG
(
p‹t
);

1298 
dh˝
->
p
 =Ö;

1300 i‡(
ª∂y_msg
->
›
 !
DHCP_BOOTREPLY
) {

1301 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("nŸá DHCPÑïly mesßge, buàty≥ %"
U16_F
"\n", (
u16_t
)
ª∂y_msg
->
›
));

1302 
‰ì_pbuf_™d_ªtu∫
;

1305 
i
 = 0; i < 
√tif
->
hwaddr_Àn
; i++) {

1306 i‡(
√tif
->
hwaddr
[
i
] !
ª∂y_msg
->
chaddr
[i]) {

1307 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("√tif->hwaddr[%"
U16_F
"]==%02"
X16_F
" !=Ñeply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",

1308 (
u16_t
)
i
, (u16_t)
√tif
->
hwaddr
[i], (u16_t)i, (u16_t)
ª∂y_msg
->
chaddr
[i]));

1309 
‰ì_pbuf_™d_ªtu∫
;

1313 i‡(
	`¡ohl
(
ª∂y_msg
->
xid
Ë!
dh˝
->xid) {

1314 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id mism©chÑïly_msg->xid(%"
X32_F
")!=dh˝->xid(%"X32_F")\n",
	`¡ohl
(
ª∂y_msg
->
xid
),
dh˝
->xid));

1315 
‰ì_pbuf_™d_ªtu∫
;

1318 i‡(
	`dh˝_unfﬁd_ª∂y
(
dh˝
Ë!
ERR_OK
) {

1319 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("problem unfolding DHCP message -Åoo short on memory?\n"));

1320 
‰ì_pbuf_™d_ªtu∫
;

1323 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));

1325 
›ti⁄s_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
);

1326 i‡(
›ti⁄s_±r
 =
NULL
) {

1327 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OPTION_MESSAGE_TYPE optionÇot found\n"));

1328 
‰ì_pbuf_™d_ªtu∫
;

1332 
msg_ty≥
 = 
	`dh˝_gë_›ti⁄_byã
(
›ti⁄s_±r
 + 2);

1334 i‡(
msg_ty≥
 =
DHCP_ACK
) {

1335 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_ACKÑeceived\n"));

1337 i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

1338 
	`dh˝_h™dÀ_ack
(
√tif
);

1339 
dh˝
->
ªque°_timeout
 = 0;

1340 #i‡
DHCP_DOES_ARP_CHECK


1342 
	`dh˝_check
(
√tif
);

1345 
	`dh˝_böd
(
√tif
);

1349 i‡((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

1350 
dh˝
->
ªque°_timeout
 = 0;

1351 
	`dh˝_böd
(
√tif
);

1355 i‡((
msg_ty≥
 =
DHCP_NAK
) &&

1356 ((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REQUESTING
) ||

1357 (
dh˝
->
°©e
 =
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
 ))) {

1358 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_NAKÑeceived\n"));

1359 
dh˝
->
ªque°_timeout
 = 0;

1360 
	`dh˝_h™dÀ_«k
(
√tif
);

1363 i‡((
msg_ty≥
 =
DHCP_OFFER
Ë&& (
dh˝
->
°©e
 =
DHCP_SELECTING
)) {

1364 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OFFERÑeceived in DHCP_SELECTING state\n"));

1365 
dh˝
->
ªque°_timeout
 = 0;

1367 
	`dh˝_h™dÀ_of„r
(
√tif
);

1369 
‰ì_pbuf_™d_ªtu∫
:

1370 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1371 
	`pbuf_‰ì
(
p
);

1372 
dh˝
->
p
 = 
NULL
;

1373 
	}
}

1380 
îr_t


1381 
	$dh˝_¸óã_ªque°
(
√tif
 *netif)

1383 
dh˝
 *dhcp;

1384 
u16_t
 
i
;

1385 #i‚de‡
DHCP_GLOBAL_XID


1390 
u32_t
 
xid
 = 0xABCD0000;

1392 
u32_t
 
xid
;

1393 
u8_t
 
xid_öôüli£d
 = 0;

1394 i‡(!
xid_öôüli£d
) {

1395 
xid
 = 
DHCP_GLOBAL_XID
;

1396 
xid_öôüli£d
 = !xid_initialised;

1399 
	`LWIP_ERROR
("dh˝_¸óã_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

1400 
dh˝
 = 
√tif
->dhcp;

1401 
	`LWIP_ERROR
("dh˝_¸óã_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_VAL
;);

1402 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->p_ouà=NULL", 
dh˝
->
p_out
 =
NULL
);

1403 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->msg_ouà=NULL", 
dh˝
->
msg_out
 =
NULL
);

1404 
dh˝
->
p_out
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dh˝_msg
), 
PBUF_RAM
);

1405 i‡(
dh˝
->
p_out
 =
NULL
) {

1406 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_create_request(): couldÇotállocateÖbuf\n"));

1407  
ERR_MEM
;

1409 
	`LWIP_ASSERT
("dhcp_create_request: checkÅhat firstÖbuf can hold struct dhcp_msg",

1410 (
dh˝
->
p_out
->
Àn
 >(
dh˝_msg
)));

1413 i‡(
dh˝
->
åõs
==0)

1414 
xid
++;

1415 
dh˝
->
xid
 = xid;

1416 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2,

1417 ("å™ß˘i⁄ id xid(%"
X32_F
")\n", 
xid
));

1419 
dh˝
->
msg_out
 = (
dh˝_msg
 *)dh˝->
p_out
->
∑ylﬂd
;

1421 
dh˝
->
msg_out
->
›
 = 
DHCP_BOOTREQUEST
;

1423 
dh˝
->
msg_out
->
hty≥
 = 
DHCP_HTYPE_ETH
;

1425 
dh˝
->
msg_out
->
hÀn
 = 
DHCP_HLEN_ETH
;

1426 
dh˝
->
msg_out
->
h›s
 = 0;

1427 
dh˝
->
msg_out
->
xid
 = 
	`ht⁄l
(dhcp->xid);

1428 
dh˝
->
msg_out
->
£cs
 = 0;

1429 
dh˝
->
msg_out
->
Êags
 = 0;

1430 
dh˝
->
msg_out
->
cüddr
.
addr
 = 0;

1431 i‡(
dh˝
->
°©e
==
DHCP_BOUND
 || dh˝->°©e==
DHCP_RENEWING
 || dh˝->°©e==
DHCP_REBINDING
) {

1432 
dh˝
->
msg_out
->
cüddr
.
addr
 = 
√tif
->
ù_addr
.addr;

1434 
dh˝
->
msg_out
->
yüddr
.
addr
 = 0;

1435 
dh˝
->
msg_out
->
süddr
.
addr
 = 0;

1436 
dh˝
->
msg_out
->
güddr
.
addr
 = 0;

1437 
i
 = 0; i < 
DHCP_CHADDR_LEN
; i++) {

1439 
dh˝
->
msg_out
->
chaddr
[
i
] = (ò< 
√tif
->
hwaddr_Àn
Ë?Çëif->
hwaddr
[i] : 0 ;

1441 
i
 = 0; i < 
DHCP_SNAME_LEN
; i++) {

1442 
dh˝
->
msg_out
->
¢ame
[
i
] = 0;

1444 
i
 = 0; i < 
DHCP_FILE_LEN
; i++) {

1445 
dh˝
->
msg_out
->
fûe
[
i
] = 0;

1447 
dh˝
->
msg_out
->
cookõ
 = 
	`ht⁄l
(0x63825363UL);

1448 
dh˝
->
›ti⁄s_out_Àn
 = 0;

1450 
i
 = 0; i < 
DHCP_OPTIONS_LEN
; i++) {

1451 
dh˝
->
msg_out
->
›ti⁄s
[
i
] = (
u8_t
)i;

1453  
ERR_OK
;

1454 
	}
}

1462 
	$dh˝_dñëe_ªque°
(
√tif
 *netif)

1464 
dh˝
 *dhcp;

1465 
	`LWIP_ERROR
("dh˝_dñëe_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1466 
dh˝
 = 
√tif
->dhcp;

1467 
	`LWIP_ERROR
("dh˝_dñëe_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1468 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->p_ouà!NULL", 
dh˝
->
p_out
 !
NULL
);

1469 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->msg_ouà!NULL", 
dh˝
->
msg_out
 !
NULL
);

1470 i‡(
dh˝
->
p_out
 !
NULL
) {

1471 
	`pbuf_‰ì
(
dh˝
->
p_out
);

1473 
dh˝
->
p_out
 = 
NULL
;

1474 
dh˝
->
msg_out
 = 
NULL
;

1475 
	}
}

1486 
	$dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp)

1488 
	`LWIP_ERROR
("dh˝_›ti⁄_åaûî: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1489 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->msg_ouà!NULL\n", 
dh˝
->
msg_out
 !
NULL
);

1490 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1491 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
DHCP_OPTION_END
;

1493 (
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_MIN_OPTIONS_LEN
) || (dhcp->options_out_len & 3)) {

1495 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1497 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 0;

1499 
	}
}

1510 
u8_t
 *
	$dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
)

1512 
u8_t
 
ovîlﬂd
 = 
DHCP_OVERLOAD_NONE
;

1515 i‡((
dh˝
->
›ti⁄s_ö
 !
NULL
Ë&& (dh˝->
›ti⁄s_ö_Àn
 > 0)) {

1517 
u8_t
 *
›ti⁄s
 = (u8_à*)
dh˝
->
›ti⁄s_ö
;

1518 
u16_t
 
off£t
 = 0;

1520 (
off£t
 < 
dh˝
->
›ti⁄s_ö_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1523 i‡(
›ti⁄s
[
off£t
] =
DHCP_OPTION_OVERLOAD
) {

1524 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("overloaded message detected\n"));

1526 
off£t
 += 2;

1527 
ovîlﬂd
 = 
›ti⁄s
[
off£t
++];

1530 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1531 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£à%"
U16_F
" i¿›ti⁄s\n", 
off£t
));

1532  &
›ti⁄s
[
off£t
];

1535 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("skùpög o±i⁄ %"
U16_F
" i¿›ti⁄s\n", 
›ti⁄s
[
off£t
]));

1537 
off£t
++;

1539 
off£t
 +1 + 
›ti⁄s
[offset];

1543 i‡(
ovîlﬂd
 !
DHCP_OVERLOAD_NONE
) {

1544 
u16_t
 
fõld_Àn
;

1545 i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_FILE
) {

1546 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded file field\n"));

1547 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
fûe
;

1548 
fõld_Àn
 = 
DHCP_FILE_LEN
;

1549 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME
) {

1550 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded sname field\n"));

1551 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1552 
fõld_Àn
 = 
DHCP_SNAME_LEN
;

1555 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded snameánd file field\n"));

1556 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1557 
fõld_Àn
 = 
DHCP_FILE_LEN
 + 
DHCP_SNAME_LEN
;

1559 
off£t
 = 0;

1562 (
off£t
 < 
fõld_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1563 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1564 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£t=%"
U16_F
"\n", 
off£t
));

1565  &
›ti⁄s
[
off£t
];

1568 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("skùpög o±i⁄ %"
U16_F
"\n", 
›ti⁄s
[
off£t
]));

1570 
off£t
++;

1571 
off£t
 +1 + 
›ti⁄s
[offset];

1576  
NULL
;

1577 
	}
}

1587 
u8_t


1588 
	$dh˝_gë_›ti⁄_byã
(
u8_t
 *
±r
)

1590 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ byã vÆue=%"
U16_F
"\n", (
u16_t
)(*
±r
)));

1591  *
±r
;

1592 
	}
}

1603 
u16_t


1604 
	$dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
)

1606 
u16_t
 
vÆue
;

1607 
vÆue
 = *
±r
++ << 8;

1608 
vÆue
 |*
±r
;

1609 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ sh‹àvÆue=%"
U16_F
"\n", 
vÆue
));

1610  
vÆue
;

1611 
	}
}

1622 
u32_t
 
	$dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
)

1624 
u32_t
 
vÆue
;

1625 
vÆue
 = (
u32_t
)(*
±r
++) << 24;

1626 
vÆue
 |(
u32_t
)(*
±r
++) << 16;

1627 
vÆue
 |(
u32_t
)(*
±r
++) << 8;

1628 
vÆue
 |(
u32_t
)(*
±r
++);

1629 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄Ü⁄g vÆue=%"
U32_F
"\n", 
vÆue
));

1630  
vÆue
;

1631 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/dns.c

75 
	~"lwù/›t.h
"

77 #i‡
LWIP_DNS


79 
	~"lwù/udp.h
"

80 
	~"lwù/mem.h
"

81 
	~"lwù/dns.h
"

83 
	~<°rög.h
>

86 #i‚de‡
DNS_SERVER_ADDRESS


87 
	#DNS_SERVER_ADDRESS
 
	`öë_addr
("208.67.222.222"Ë

	)

91 #i‚de‡
DNS_SERVER_PORT


92 
	#DNS_SERVER_PORT
 53

	)

96 #i‚de‡
DNS_MAX_RETRIES


97 
	#DNS_MAX_RETRIES
 4

	)

101 #i‚de‡
DNS_MAX_TTL


102 
	#DNS_MAX_TTL
 604800

	)

106 
	#DNS_FLAG1_RESPONSE
 0x80

	)

107 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

108 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

109 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

110 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

111 
	#DNS_FLAG1_TRUNC
 0x02

	)

112 
	#DNS_FLAG1_RD
 0x01

	)

113 
	#DNS_FLAG2_RA
 0x80

	)

114 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

115 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

116 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

119 
	#DNS_STATE_UNUSED
 0

	)

120 
	#DNS_STATE_NEW
 1

	)

121 
	#DNS_STATE_ASKING
 2

	)

122 
	#DNS_STATE_DONE
 3

	)

124 #ifde‡
PACK_STRUCT_USE_INCLUDES


125 
	~"¨ch/bp°ru˘.h
"

127 
PACK_STRUCT_BEGIN


129 
	sdns_hdr
 {

130 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

131 
PACK_STRUCT_FIELD
(
u8_t
 
Êags1
);

132 
PACK_STRUCT_FIELD
(
u8_t
 
Êags2
);

133 
PACK_STRUCT_FIELD
(
u16_t
 
numque°i⁄s
);

134 
PACK_STRUCT_FIELD
(
u16_t
 
num™swîs
);

135 
PACK_STRUCT_FIELD
(
u16_t
 
numauthº
);

136 
PACK_STRUCT_FIELD
(
u16_t
 
numexå¨r
);

137 } 
	gPACK_STRUCT_STRUCT
;

138 
	gPACK_STRUCT_END


139 #ifde‡
PACK_STRUCT_USE_INCLUDES


140 
	~"¨ch/ï°ru˘.h
"

142 
	#SIZEOF_DNS_HDR
 12

	)

144 #ifde‡
PACK_STRUCT_USE_INCLUDES


145 
	~"¨ch/bp°ru˘.h
"

147 
PACK_STRUCT_BEGIN


149 
	sdns_quîy
 {

152 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

153 
PACK_STRUCT_FIELD
(
u16_t
 
˛ass
);

154 } 
	gPACK_STRUCT_STRUCT
;

155 
	gPACK_STRUCT_END


156 #ifde‡
PACK_STRUCT_USE_INCLUDES


157 
	~"¨ch/ï°ru˘.h
"

159 
	#SIZEOF_DNS_QUERY
 4

	)

161 #ifde‡
PACK_STRUCT_USE_INCLUDES


162 
	~"¨ch/bp°ru˘.h
"

164 
PACK_STRUCT_BEGIN


166 
	sdns_™swî
 {

169 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

170 
PACK_STRUCT_FIELD
(
u16_t
 
˛ass
);

171 
PACK_STRUCT_FIELD
(
u32_t
 
âl
);

172 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

173 } 
	gPACK_STRUCT_STRUCT
;

174 
	gPACK_STRUCT_END


175 #ifde‡
PACK_STRUCT_USE_INCLUDES


176 
	~"¨ch/ï°ru˘.h
"

178 
	#SIZEOF_DNS_ANSWER
 10

	)

181 
	sdns_èbÀ_íåy
 {

182 
u8_t
 
	m°©e
;

183 
u8_t
 
	mnumdns
;

184 
u8_t
 
	mtmr
;

185 
u8_t
 
	mªåõs
;

186 
u8_t
 
	m£qno
;

187 
u8_t
 
	mîr
;

188 
u32_t
 
	mâl
;

189 
	m«me
[
DNS_MAX_NAME_LENGTH
];

190 
ù_addr
 
	mùaddr
;

192 
dns_found_ˇŒback
 
	mfound
;

193 *
	m¨g
;

196 #i‡
DNS_LOCAL_HOSTLIST


198 
	sloˇl_ho°li°_íåy
 {

200 c⁄° *
	m«me
;

202 
u32_t
 
	maddr
;

203 
loˇl_ho°li°_íåy
 *
	m√xt
;

206 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


209 
loˇl_ho°li°_íåy
 *
	gloˇl_ho°li°_dy«mic
;

214 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_PRE


215 
	#DNS_LOCAL_HOSTLIST_STORAGE_PRE
 

	)

219 #i‚de‡
DNS_LOCAL_HOSTLIST_STORAGE_POST


220 
	#DNS_LOCAL_HOSTLIST_STORAGE_POST


	)

222 
DNS_LOCAL_HOSTLIST_STORAGE_PRE
 
loˇl_ho°li°_íåy
 
	gloˇl_ho°li°_°©ic
[]

223 
	gDNS_LOCAL_HOSTLIST_STORAGE_POST
 = 
DNS_LOCAL_HOSTLIST_INIT
;

227 
dns_öô_loˇl
();

232 
dns_ªcv
(*
s
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

233 
dns_check_íåõs
();

240 
udp_pcb
 *
	gdns_pcb
;

241 
u8_t
 
	gdns_£qno
;

242 
dns_èbÀ_íåy
 
	gdns_èbÀ
[
DNS_TABLE_SIZE
];

243 
ù_addr
 
	gdns_£rvîs
[
DNS_MAX_SERVERS
];

245 #i‡(
DNS_USES_STATIC_BUF
 == 1)

246 
u8_t
 
	gdns_∑ylﬂd
[
DNS_MSG_SIZE
];

254 
	$dns_öô
()

256 
ù_addr
 
dns£rvî
;

259 
dns£rvî
.
addr
 = 
DNS_SERVER_ADDRESS
;

261 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_init: initializing\n"));

264 i‡(
dns_pcb
 =
NULL
) {

265 
dns_pcb
 = 
	`udp_√w
();

267 i‡(
dns_pcb
 !
NULL
) {

270 
	`LWIP_ASSERT
("For implicit initializationÅo work, DNS_STATE_UNUSEDÇeedsÅo be 0",

271 
DNS_STATE_UNUSED
 == 0);

274 
	`udp_böd
(
dns_pcb
, 
IP_ADDR_ANY
, 0);

275 
	`udp_ªcv
(
dns_pcb
, 
dns_ªcv
, 
NULL
);

278 
	`dns_£t£rvî
(0, &
dns£rvî
);

281 #i‡
DNS_LOCAL_HOSTLIST


282 
	`dns_öô_loˇl
();

284 
	}
}

293 
	$dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
)

295 i‡((
numdns
 < 
DNS_MAX_SERVERS
Ë&& (
dns_pcb
 !
NULL
) &&

296 (
dns£rvî
 !
NULL
Ë&& (dns£rvî->
addr
 !=0 )) {

297 
dns_£rvîs
[
numdns
] = (*
dns£rvî
);

299 
	}
}

308 
ù_addr


309 
	$dns_gë£rvî
(
u8_t
 
numdns
)

311 i‡(
numdns
 < 
DNS_MAX_SERVERS
) {

312  
dns_£rvîs
[
numdns
];

314  *
IP_ADDR_ANY
;

316 
	}
}

323 
	$dns_tmr
()

325 i‡(
dns_pcb
 !
NULL
) {

326 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_tmr: dns_check_entries\n"));

327 
	`dns_check_íåõs
();

329 
	}
}

331 #i‡
DNS_LOCAL_HOSTLIST


333 
	$dns_öô_loˇl
()

335 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && 
	`deföed
(
DNS_LOCAL_HOSTLIST_INIT
)

336 
i
;

337 
loˇl_ho°li°_íåy
 *
íåy
;

339 
loˇl_ho°li°_íåy
 
loˇl_ho°li°_öô
[] = 
DNS_LOCAL_HOSTLIST_INIT
;

340 
i
 = 0; i < (
loˇl_ho°li°_öô
Ë/ (
loˇl_ho°li°_íåy
); i++) {

341 
íåy
 = 
	`mem_mÆloc
((
loˇl_ho°li°_íåy
));

342 
	`LWIP_ASSERT
("mem-îr‹ i¿dns_öô_loˇl", 
íåy
 !
NULL
);

343 i‡(
íåy
 !
NULL
) {

344 
loˇl_ho°li°_íåy
 *
öô_íåy
 = &
loˇl_ho°li°_öô
[
i
];

345 
íåy
->
«me
 = 
öô_íåy
->name;

346 
íåy
->
addr
 = 
öô_íåy
->addr;

347 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

348 
loˇl_ho°li°_dy«mic
 = 
íåy
;

352 
	}
}

361 
u32_t


362 
	$dns_lookup_loˇl
(c⁄° *
ho°«me
)

364 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


365 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

366 
íåy
 !
NULL
) {

367 if(
	`°rcmp
(
íåy
->
«me
, 
ho°«me
) == 0) {

368  
íåy
->
addr
;

370 
íåy
 =É¡ry->
√xt
;

373 
i
;

374 
i
 = 0; i < (
loˇl_ho°li°_°©ic
Ë/ (
loˇl_ho°li°_íåy
); i++) {

375 if(
	`°rcmp
(
loˇl_ho°li°_°©ic
[
i
].
«me
, 
ho°«me
) == 0) {

376  
loˇl_ho°li°_°©ic
[
i
].
addr
;

380  
INADDR_NONE
;

381 
	}
}

383 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


393 
	$dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
)

395 
ªmoved
 = 0;

396 
loˇl_ho°li°_íåy
 *
íåy
 = 
loˇl_ho°li°_dy«mic
;

397 
loˇl_ho°li°_íåy
 *
œ°_íåy
 = 
NULL
;

398 
íåy
 !
NULL
) {

399 i‡(((
ho°«me
 =
NULL
Ë|| !
	`°rcmp
(
íåy
->
«me
, hostname)) &&

400 ((
addr
 =
NULL
Ë|| (
íåy
->addr ==áddr->addr))) {

401 
loˇl_ho°li°_íåy
 *
‰ì_íåy
;

402 i‡(
œ°_íåy
 !
NULL
) {

403 
œ°_íåy
->
√xt
 = 
íåy
->next;

405 
loˇl_ho°li°_dy«mic
 = 
íåy
->
√xt
;

407 
‰ì_íåy
 = 
íåy
;

408 
íåy
 =É¡ry->
√xt
;

409 
	`mem_‰ì
(
‰ì_íåy
);

410 
ªmoved
++;

412 
œ°_íåy
 = 
íåy
;

413 
íåy
 =É¡ry->
√xt
;

416  
ªmoved
;

417 
	}
}

427 
îr_t


428 
	$dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
)

430 
loˇl_ho°li°_íåy
 *
íåy
;

431 
íåy
 = 
	`mem_mÆloc
((
loˇl_ho°li°_íåy
));

432 i‡(
íåy
 =
NULL
) {

433  
ERR_MEM
;

435 
íåy
->
«me
 = 
ho°«me
;

436 
íåy
->
addr
 =áddr->addr;

437 
íåy
->
√xt
 = 
loˇl_ho°li°_dy«mic
;

438 
loˇl_ho°li°_dy«mic
 = 
íåy
;

439  
ERR_OK
;

440 
	}
}

457 
u32_t


458 
	$dns_lookup
(c⁄° *
«me
)

460 
u8_t
 
i
;

461 #i‡
DNS_LOCAL_HOSTLIST
 || 
	`deföed
(
DNS_LOOKUP_LOCAL_EXTERN
)

462 
u32_t
 
addr
;

464 #i‡
DNS_LOCAL_HOSTLIST


465 i‡((
addr
 = 
	`dns_lookup_loˇl
(
«me
)Ë!
INADDR_NONE
) {

466  
addr
;

469 #ifde‡
DNS_LOOKUP_LOCAL_EXTERN


470 if((
addr
 = 
	`DNS_LOOKUP_LOCAL_EXTERN
(
«me
)Ë!
INADDR_NONE
) {

471  
addr
;

476 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

477 i‡((
dns_èbÀ
[
i
].
°©e
 =
DNS_STATE_DONE
) &&

478 (
	`°rcmp
(
«me
, 
dns_èbÀ
[
i
].name) == 0)) {

479 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_lookup: \"%s\": found = ", 
«me
));

480 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, &(
dns_èbÀ
[
i
].
ùaddr
));

481 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

482  
dns_èbÀ
[
i
].
ùaddr
.
addr
;

486  
INADDR_NONE
;

487 
	}
}

489 #i‡
DNS_DOES_NAME_CHECK


500 
u8_t


501 
	$dns_com∑ª_«me
(*
quîy
, *
ª•⁄£
)

503 
n
;

506 
n
 = *
ª•⁄£
++;

508 i‡((
n
 & 0xc0) == 0xc0) {

513 
n
 > 0) {

514 i‡((*
quîy
Ë!(*
ª•⁄£
)) {

517 ++
ª•⁄£
;

518 ++
quîy
;

519 --
n
;

521 ++
quîy
;

523 } *
ª•⁄£
 != 0);

526 
	}
}

536 
	$dns_∑r£_«me
(*
quîy
)

538 
n
;

541 
n
 = *
quîy
++;

543 i‡((
n
 & 0xc0) == 0xc0) {

548 
n
 > 0) {

549 ++
quîy
;

550 --
n
;

553 } *
quîy
 != 0);

555  
quîy
 + 1;

556 
	}
}

567 
îr_t


568 
	$dns_£nd
(
u8_t
 
numdns
, c⁄° * 
«me
, u8_à
id
)

570 
îr_t
 
îr
;

571 
dns_hdr
 *
hdr
;

572 
dns_quîy
 
qry
;

573 
pbuf
 *
p
;

574 *
quîy
, *
≈å
;

575 c⁄° *
pHo°«me
;

576 
u8_t
 
n
;

578 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_£nd: dns_£rvîs[%"
U16_F
"] \"%s\":Ñequest\n",

579 (
u16_t
)(
numdns
), 
«me
));

580 
	`LWIP_ASSERT
("dn†£rvî ouào‡¨øy", 
numdns
 < 
DNS_MAX_SERVERS
);

581 
	`LWIP_ASSERT
("dn†£rvî ha†nÿIPáddªs†£t", 
dns_£rvîs
[
numdns
].
addr
 != 0);

584 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
SIZEOF_DNS_HDR
 + 
DNS_MAX_NAME_LENGTH
 +

585 
SIZEOF_DNS_QUERY
, 
PBUF_RAM
);

586 i‡(
p
 !
NULL
) {

587 
	`LWIP_ASSERT
("pbu‡mu° bêö o√Öõ˚", 
p
->
√xt
 =
NULL
);

589 
hdr
 = (
dns_hdr
*)
p
->
∑ylﬂd
;

590 
	`mem£t
(
hdr
, 0, 
SIZEOF_DNS_HDR
);

591 
hdr
->
id
 = 
	`ht⁄s
(id);

592 
hdr
->
Êags1
 = 
DNS_FLAG1_RD
;

593 
hdr
->
numque°i⁄s
 = 
	`ht⁄s
(1);

594 
quîy
 = (*)
hdr
 + 
SIZEOF_DNS_HDR
;

595 
pHo°«me
 = 
«me
;

596 --
pHo°«me
;

600 ++
pHo°«me
;

601 
≈å
 = 
quîy
;

602 ++
quîy
;

603 
n
 = 0; *
pHo°«me
 != '.' && *pHostname != 0; ++pHostname) {

604 *
quîy
 = *
pHo°«me
;

605 ++
quîy
;

606 ++
n
;

608 *
≈å
 = 
n
;

609 } *
pHo°«me
 != 0);

610 *
quîy
++='\0';

613 
qry
.
ty≥
 = 
	`ht⁄s
(
DNS_RRTYPE_A
);

614 
qry
.
˛ass
 = 
	`ht⁄s
(
DNS_RRCLASS_IN
);

615 
	`MEMCPY
–
quîy
, &
qry
, 
SIZEOF_DNS_QUERY
);

618 
	`pbuf_ªÆloc
(
p
, (
quîy
 + 
SIZEOF_DNS_QUERY
Ë- ((*)’->
∑ylﬂd
)));

621 
	`udp_c⁄√˘
(
dns_pcb
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

623 
îr
 = 
	`udp_£ndto
(
dns_pcb
, 
p
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

626 
	`pbuf_‰ì
(
p
);

628 
îr
 = 
ERR_MEM
;

631  
îr
;

632 
	}
}

644 
	$dns_check_íåy
(
u8_t
 
i
)

646 
dns_èbÀ_íåy
 *
pE¡ry
 = &
dns_èbÀ
[
i
];

648 
	`LWIP_ASSERT
("¨øy index ouào‡bounds", 
i
 < 
DNS_TABLE_SIZE
);

650 
pE¡ry
->
°©e
) {

652 
DNS_STATE_NEW
: {

654 
pE¡ry
->
°©e
 = 
DNS_STATE_ASKING
;

655 
pE¡ry
->
numdns
 = 0;

656 
pE¡ry
->
tmr
 = 1;

657 
pE¡ry
->
ªåõs
 = 0;

660 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

664 
DNS_STATE_ASKING
: {

665 i‡(--
pE¡ry
->
tmr
 == 0) {

666 i‡(++
pE¡ry
->
ªåõs
 =
DNS_MAX_RETRIES
) {

667 i‡((
pE¡ry
->
numdns
+1<
DNS_MAX_SERVERS
Ë&& (
dns_£rvîs
[pE¡ry->numdns+1].
addr
!=0)) {

669 
pE¡ry
->
numdns
++;

670 
pE¡ry
->
tmr
 = 1;

671 
pE¡ry
->
ªåõs
 = 0;

674 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\":Åimeout\n", 
pE¡ry
->
«me
));

676 i‡(
pE¡ry
->
found
)

677 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

679 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

680 
pE¡ry
->
found
 = 
NULL
;

686 
pE¡ry
->
tmr
 =ÖE¡ry->
ªåõs
;

689 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

694 
DNS_STATE_DONE
: {

696 i‡(--
pE¡ry
->
âl
 == 0) {

697 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\": flush\n", 
pE¡ry
->
«me
));

699 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

700 
pE¡ry
->
found
 = 
NULL
;

704 
DNS_STATE_UNUSED
:

708 
	`LWIP_ASSERT
("unknown dns_tableÉntry state:", 0);

711 
	}
}

717 
	$dns_check_íåõs
()

719 
u8_t
 
i
;

721 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

722 
	`dns_check_íåy
(
i
);

724 
	}
}

732 
	$dns_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

734 
u8_t
 
i
;

735 *
pHo°«me
;

736 
dns_hdr
 *
hdr
;

737 
dns_™swî
 
™s
;

738 
dns_èbÀ_íåy
 *
pE¡ry
;

739 
u8_t
 
nque°i⁄s
, 
«nswîs
;

740 #i‡(
DNS_USES_STATIC_BUF
 == 0)

741 
u8_t
 
dns_∑ylﬂd
[
DNS_MSG_SIZE
];

743 #i‡(
DNS_USES_STATIC_BUF
 == 2)

744 
u8_t
* 
dns_∑ylﬂd
;

747 
	`LWIP_UNUSED_ARG
(
¨g
);

748 
	`LWIP_UNUSED_ARG
(
pcb
);

749 
	`LWIP_UNUSED_ARG
(
addr
);

750 
	`LWIP_UNUSED_ARG
(
p‹t
);

753 i‡(
p
->
tŸ_Àn
 > 
DNS_MSG_SIZE
) {

754 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo big\n"));

756 
memîr1
;

760 i‡(
p
->
tŸ_Àn
 < (
SIZEOF_DNS_HDR
 + 
SIZEOF_DNS_QUERY
 + 
SIZEOF_DNS_ANSWER
)) {

761 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo small\n"));

763 
memîr1
;

766 #i‡(
DNS_USES_STATIC_BUF
 == 2)

767 
dns_∑ylﬂd
 = 
	`mem_mÆloc
(
p
->
tŸ_Àn
);

768 i‡(
dns_∑ylﬂd
 =
NULL
) {

769 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv: mem_mallocÉrror\n"));

771 
memîr1
;

776 i‡(
	`pbuf_c›y_∑πül
(
p
, 
dns_∑ylﬂd
,Ö->
tŸ_Àn
, 0) ==Ö->tot_len) {

778 
hdr
 = (
dns_hdr
*)
dns_∑ylﬂd
;

779 
i
 = 
	`ht⁄s
(
hdr
->
id
);

780 i‡(
i
 < 
DNS_TABLE_SIZE
) {

781 
pE¡ry
 = &
dns_èbÀ
[
i
];

782 if(
pE¡ry
->
°©e
 =
DNS_STATE_ASKING
) {

784 
pE¡ry
->
°©e
 = 
DNS_STATE_DONE
;

785 
pE¡ry
->
îr
 = 
hdr
->
Êags2
 & 
DNS_FLAG2_ERR_MASK
;

789 
nque°i⁄s
 = 
	`ht⁄s
(
hdr
->
numque°i⁄s
);

790 
«nswîs
 = 
	`ht⁄s
(
hdr
->
num™swîs
);

793 i‡(((
hdr
->
Êags1
 & 
DNS_FLAG1_RESPONSE
Ë=0Ë|| (
pE¡ry
->
îr
 !0Ë|| (
nque°i⁄s
 != 1)) {

794 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿Êags\n", 
pE¡ry
->
«me
));

796 
ª•⁄£îr
;

799 #i‡
DNS_DOES_NAME_CHECK


801 i‡(
	`dns_com∑ª_«me
((*)(
pE¡ry
->
«me
), (*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
) != 0) {

802 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ÇŸ m©chÅÿquîy\n", 
pE¡ry
->
«me
));

804 
ª•⁄£îr
;

809 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)
dns_∑ylﬂd
 + 
SIZEOF_DNS_HDR
Ë+ 
SIZEOF_DNS_QUERY
;

811 
«nswîs
 > 0) {

813 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)pHostname);

816 
	`MEMCPY
(&
™s
, 
pHo°«me
, 
SIZEOF_DNS_ANSWER
);

817 if((
	`¡ohs
(
™s
.
ty≥
Ë=
DNS_RRTYPE_A
Ë&& (¡ohs◊ns.
˛ass
Ë=
DNS_RRCLASS_IN
Ë&& (¡ohs◊ns.
Àn
Ë=(
ù_addr
)) ) {

819 
pE¡ry
->
âl
 = 
	`¡ohl
(
™s
.ttl);

820 i‡(
pE¡ry
->
âl
 > 
DNS_MAX_TTL
) {

821 
pE¡ry
->
âl
 = 
DNS_MAX_TTL
;

824 
	`MEMCPY
–&(
pE¡ry
->
ùaddr
), (
pHo°«me
+
SIZEOF_DNS_ANSWER
), (
ù_addr
));

825 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ = ", 
pE¡ry
->
«me
));

826 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, (&(
pE¡ry
->
ùaddr
)));

827 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

829 i‡(
pE¡ry
->
found
) {

830 (*
pE¡ry
->
found
)’E¡ry->
«me
, &pE¡ry->
ùaddr
,ÖE¡ry->
¨g
);

833 
memîr2
;

835 
pHo°«me
 =ÖHo°«mê+ 
SIZEOF_DNS_ANSWER
 + 
	`ht⁄s
(
™s
.
Àn
);

837 --
«nswîs
;

839 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿ª•⁄£\n", 
pE¡ry
->
«me
));

841 
ª•⁄£îr
;

847 
memîr2
;

849 
ª•⁄£îr
:

851 i‡(
pE¡ry
->
found
) {

852 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

855 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

856 
pE¡ry
->
found
 = 
NULL
;

858 
memîr2
:

859 #i‡(
DNS_USES_STATIC_BUF
 == 2)

861 
	`mem_‰ì
(
dns_∑ylﬂd
);

864 
memîr1
:

866 
	`pbuf_‰ì
(
p
);

868 
	}
}

878 
îr_t


879 
	$dns_íqueue
(c⁄° *
«me
, 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
)

881 
u8_t
 
i
;

882 
u8_t
 
l£q
, 
l£qi
;

883 
dns_èbÀ_íåy
 *
pE¡ry
 = 
NULL
;

886 
l£q
 = 
l£qi
 = 0;

887 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

888 
pE¡ry
 = &
dns_èbÀ
[
i
];

890 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_UNUSED
)

894 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_DONE
) {

895 i‡((
dns_£qno
 - 
pE¡ry
->
£qno
Ë> 
l£q
) {

896 
l£q
 = 
dns_£qno
 - 
pE¡ry
->
£qno
;

897 
l£qi
 = 
i
;

903 i‡(
i
 =
DNS_TABLE_SIZE
) {

904 i‡((
l£qi
 >
DNS_TABLE_SIZE
Ë|| (
dns_èbÀ
[l£qi].
°©e
 !
DNS_STATE_DONE
)) {

906 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": DNSÉ¡rõ†èbÀ i†fuŒ\n", 
«me
));

907  
ERR_MEM
;

910 
i
 = 
l£qi
;

911 
pE¡ry
 = &
dns_èbÀ
[
i
];

916 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": u£ DNSÉ¡ry %"
U16_F
"\n", 
«me
, (
u16_t
)(
i
)));

919 
pE¡ry
->
°©e
 = 
DNS_STATE_NEW
;

920 
pE¡ry
->
£qno
 = 
dns_£qno
++;

921 
pE¡ry
->
found
 = found;

922 
pE¡ry
->
¨g
 = 
ˇŒback_¨g
;

923 
	`°r˝y
(
pE¡ry
->
«me
,Çame);

926 
	`dns_check_íåy
(
i
);

929  
ERR_INPROGRESS
;

930 
	}
}

950 
îr_t


951 
	$dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
, 
dns_found_ˇŒback
 
found
,

952 *
ˇŒback_¨g
)

956 i‡((
dns_pcb
 =
NULL
Ë|| (
addr
 == NULL) ||

957 (!
ho°«me
) || (!hostname[0]) ||

958 (
	`°æí
(
ho°«me
Ë>
DNS_MAX_NAME_LENGTH
)) {

959  
ERR_VAL
;

962 #i‡
LWIP_HAVE_LOOPIF


963 i‡(
	`°rcmp
(
ho°«me
,"localhost")==0) {

964 
addr
->add∏
INADDR_LOOPBACK
;

965  
ERR_OK
;

971 i‡(((
addr
->add∏
	`öë_addr
(
ho°«me
)Ë!
INADDR_NONE
) ||

972 ((
addr
->add∏
	`dns_lookup
(
ho°«me
)Ë!
INADDR_NONE
)) {

973  
ERR_OK
;

977  
	`dns_íqueue
(
ho°«me
, 
found
, 
ˇŒback_¨g
);

978 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/init.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öô.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/sockës.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝.h
"

53 
	~"lwù/¢mp_msg.h
"

54 
	~"lwù/autoù.h
"

55 
	~"lwù/igmp.h
"

56 
	~"lwù/dns.h
"

57 
	~"√tif/ëh¨p.h
"

62 #i‚de‡
BYTE_ORDER


65 #i‡(!
IP_SOF_BROADCAST
 && 
IP_SOF_BROADCAST_RECV
)

68 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

71 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

74 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

77 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

80 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

83 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

86 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

89 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

92 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

95 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

98 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

101 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

104 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

107 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

110 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

113 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

116 #i‡(
PPP_SUPPORT
 && (
NO_SYS
==1))

119 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

122 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

125 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

128 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

131 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

134 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

137 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

140 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

143 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

146 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

150 #i‡((
NO_SYS
==0Ë&& (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
)))

153 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

156 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

159 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

162 #i‡(
PBUF_POOL_BUFSIZE
 <
MEM_ALIGNMENT
)

165 #i‡(
TCP_QUEUE_OOSEQ
 && !
LWIP_TCP
)

168 #i‡(
DNS_LOCAL_HOSTLIST
 && !
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 && !(
deföed
(
DNS_LOCAL_HOSTLIST_INIT
)))

175 #ifde‡
MEMP_NUM_TCPIP_MSG


178 #ifde‡
MEMP_NUM_API_MSG


181 #ifde‡
TCP_REXMIT_DEBUG


184 #ifde‡
RAW_STATS


187 #ifde‡
ETHARP_QUEUE_FIRST


190 #ifde‡
ETHARP_ALWAYS_INSERT


193 #i‡
SO_REUSE


199 #ifde‡
LWIP_DEBUG


201 
	$lwù_ßnôy_check
()

204 #i‡
LWIP_NETCONN


205 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

206 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

208 #i‡
LWIP_TCP


209 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

210 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

211 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

212 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

213 i‡(
TCP_SNDLOWAT
 > 
TCP_SND_BUF
)

214 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan orÉqualÅo TCP_SND_BUF.\n"));

215 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

216 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

217 i‡(
TCP_WND
 < 
TCP_MSS
)

218 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

220 
	}
}

222 
	#lwù_ßnôy_check
()

	)

229 
	$lwù_öô
()

232 
	`lwù_ßnôy_check
();

235 
	`°©s_öô
();

236 
	`sys_öô
();

237 
	`mem_öô
();

238 
	`memp_öô
();

239 
	`pbuf_öô
();

240 
	`√tif_öô
();

241 #i‡
LWIP_SOCKET


242 
	`lwù_sockë_öô
();

244 
	`ù_öô
();

245 #i‡
LWIP_ARP


246 
	`ëh¨p_öô
();

248 #i‡
LWIP_RAW


249 
	`øw_öô
();

251 #i‡
LWIP_UDP


252 
	`udp_öô
();

254 #i‡
LWIP_TCP


255 
	`t˝_öô
();

257 #i‡
LWIP_SNMP


258 
	`¢mp_öô
();

260 #i‡
LWIP_AUTOIP


261 
	`autoù_öô
();

263 #i‡
LWIP_IGMP


264 
	`igmp_öô
();

266 #i‡
LWIP_DNS


267 
	`dns_öô
();

269 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/autoip.c

65 
	~"lwù/›t.h
"

67 #i‡
LWIP_AUTOIP


69 
	~"lwù/mem.h
"

70 
	~"lwù/udp.h
"

71 
	~"lwù/ù_addr.h
"

72 
	~"lwù/√tif.h
"

73 
	~"lwù/autoù.h
"

74 
	~"√tif/ëh¨p.h
"

76 
	~<°dlib.h
>

77 
	~<°rög.h
>

80 
	#AUTOIP_NET
 0xA9FE0000

	)

82 
	#AUTOIP_RANGE_START
 (
AUTOIP_NET
 | 0x0100)

	)

84 
	#AUTOIP_RANGE_END
 (
AUTOIP_NET
 | 0xFEFF)

	)

89 #i‚de‡
LWIP_AUTOIP_RAND


90 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

91 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

92 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

93 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

94 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

101 #i‚de‡
LWIP_AUTOIP_CREATE_SEED_ADDR


102 
	#LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
) \

103 (
AUTOIP_RANGE_START
 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) | \

104 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)))

	)

108 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

111 
autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr
 *
IPAddr
);

114 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

117 
îr_t
 
autoù_böd
(
√tif
 *netif);

123 
	$autoù_öô
()

125 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_init()\n"));

126 
	}
}

132 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

135 
de„nd
 = 1;

137 if(
de„nd
) {

138 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

142 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

146 
	`autoù_°¨t
(
√tif
);

148 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

150 
	`autoù_¨p_™noun˚
(
√tif
);

151 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

154 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

157 
	`autoù_°¨t
(
√tif
);

159 
	}
}

168 
	$autoù_¸óã_addr
(
√tif
 *√tif, 
ù_addr
 *
IPAddr
)

174 
u32_t
 
addr
 = 
	`¡ohl
(
	`LWIP_AUTOIP_CREATE_SEED_ADDR
(
√tif
));

175 
addr
 +
√tif
->
autoù
->
åõd_Œùaddr
;

176 
addr
 = 
AUTOIP_NET
 | (addr & 0xffff);

179 i‡(
addr
 < 
AUTOIP_RANGE_START
) {

180 
addr
 +
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

182 i‡(
addr
 > 
AUTOIP_RANGE_END
) {

183 
addr
 -
AUTOIP_RANGE_END
 - 
AUTOIP_RANGE_START
 + 1;

185 
	`LWIP_ASSERT
("AUTOIPáddªs†nŸ i¿ønge", (
addr
 >
AUTOIP_RANGE_START
) &&

186 (
addr
 <
AUTOIP_RANGE_END
));

187 
IPAddr
->
addr
 = 
	`ht⁄l
(addr);

189 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

190 ("autoù_¸óã_addr():Årõd_Œùaddr=%"
U16_F
", 0x%08"
X32_F
"\n",

191 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), (
u32_t
)(
IPAddr
->
addr
)));

192 
	}
}

199 
îr_t


200 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

202  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

203 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

204 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

205 
	}
}

212 
îr_t


213 
	$autoù_böd
(
√tif
 *netif)

215 
autoù
 *autoù = 
√tif
->autoip;

216 
ù_addr
 
¢_mask
, 
gw_addr
;

218 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

219 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" 0x%08"
X32_F
"\n",

220 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
, 
autoù
->
Œùaddr
.
addr
));

222 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

223 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

225 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

226 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

227 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

230 
	`√tif_£t_up
(
√tif
);

232  
ERR_OK
;

233 
	}
}

240 
îr_t


241 
	$autoù_°¨t
(
√tif
 *netif)

243 
autoù
 *autoù = 
√tif
->autoip;

244 
îr_t
 
ªsu…
 = 
ERR_OK
;

246 if(
	`√tif_is_up
(
√tif
)) {

247 
	`√tif_£t_down
(
√tif
);

253 
√tif
->
ù_addr
.
addr
 = 0;

254 
√tif
->
√tmask
.
addr
 = 0;

255 
√tif
->
gw
.
addr
 = 0;

257 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

258 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

259 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

260 if(
autoù
 =
NULL
) {

262 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

264 
autoù
 = 
	`mem_mÆloc
((autoip));

265 if(
autoù
 =
NULL
) {

266 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

268  
ERR_MEM
;

270 
	`mem£t
–
autoù
, 0, (autoip));

272 
√tif
->
autoù
 =áutoip;

273 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

275 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

276 
autoù
->
âw
 = 0;

277 
autoù
->
£¡_num
 = 0;

278 
	`mem£t
(&
autoù
->
Œùaddr
, 0, (
ù_addr
));

279 
autoù
->
œ°c⁄Êi˘
 = 0;

282 
	`autoù_¸óã_addr
(
√tif
, &(
autoù
->
Œùaddr
));

283 
autoù
->
åõd_Œùaddr
++;

284 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

285 
autoù
->
£¡_num
 = 0;

291 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

299 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

300 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

303  
ªsu…
;

304 
	}
}

311 
îr_t


312 
	$autoù_°›
(
√tif
 *netif)

314 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

315 
	`√tif_£t_down
(
√tif
);

316  
ERR_OK
;

317 
	}
}

323 
	$autoù_tmr
()

325 
√tif
 *√ti‡
√tif_li°
;

327 
√tif
 !
NULL
) {

329 i‡(
√tif
->
autoù
 !
NULL
) {

330 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

331 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

334 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

335 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

336 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

338 
√tif
->
autoù
->
°©e
) {

339 
AUTOIP_STATE_PROBING
:

340 if(
√tif
->
autoù
->
âw
 > 0) {

341 
√tif
->
autoù
->
âw
--;

343 if(
√tif
->
autoù
->
£¡_num
 =
PROBE_NUM
) {

344 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

345 
√tif
->
autoù
->
£¡_num
 = 0;

346 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

348 
	`ëh¨p_ªque°
(
√tif
, &“ëif->
autoù
->
Œùaddr
));

349 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

351 
√tif
->
autoù
->
£¡_num
++;

353 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

354 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

355 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

360 
AUTOIP_STATE_ANNOUNCING
:

361 if(
√tif
->
autoù
->
âw
 > 0) {

362 
√tif
->
autoù
->
âw
--;

364 if(
√tif
->
autoù
->
£¡_num
 == 0) {

368 
	`autoù_böd
(
√tif
);

371 if(
√tif
->
autoù
->
£¡_num
 =
ANNOUNCE_NUM
) {

372 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

373 
√tif
->
autoù
->
£¡_num
 = 0;

374 
√tif
->
autoù
->
âw
 = 0;

376 
	`autoù_¨p_™noun˚
(
√tif
);

377 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

379 
√tif
->
autoù
->
£¡_num
++;

380 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

387 
√tif
 =Çëif->
√xt
;

389 
	}
}

398 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

400 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_arp_reply()\n"));

401 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

407 
ù_addr
 
sùaddr
, 
dùaddr
;

408 
ëh_addr
 
√tiÁddr
;

409 
√tiÁddr
.
addr
[0] = 
√tif
->
hwaddr
[0];

410 
√tiÁddr
.
addr
[1] = 
√tif
->
hwaddr
[1];

411 
√tiÁddr
.
addr
[2] = 
√tif
->
hwaddr
[2];

412 
√tiÁddr
.
addr
[3] = 
√tif
->
hwaddr
[3];

413 
√tiÁddr
.
addr
[4] = 
√tif
->
hwaddr
[4];

414 
√tiÁddr
.
addr
[5] = 
√tif
->
hwaddr
[5];

419 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

420 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

422 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

423 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

424 (
√tif
->
autoù
->
£¡_num
 == 0))) {

431 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

432 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

433 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

434 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

436 
	`autoù_°¨t
(
√tif
);

443 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

444 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

445 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

447 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

451 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/icmp.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_ICMP


46 
	~"lwù/icmp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/öë_chksum.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

54 
	~<°rög.h
>

59 #i‚de‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


60 
	#LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
 1

	)

64 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

66 
icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
);

78 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
u8_t
 
ty≥
;

81 #ifde‡
LWIP_DEBUG


82 
u8_t
 
code
;

84 
icmp_echo_hdr
 *
õcho
;

85 
ù_hdr
 *
ùhdr
;

86 
ù_addr
 
tm∑ddr
;

87 
s16_t
 
hÀn
;

89 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

90 
	`¢mp_öc_icmpömsgs
();

93 
ùhdr
 = 
p
->
∑ylﬂd
;

94 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

95 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

96 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

97 
À√º
;

100 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

101 #ifde‡
LWIP_DEBUG


102 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

104 
ty≥
) {

105 
ICMP_ECHO
:

106 #i‡!
LWIP_MULTICAST_PING
 || !
LWIP_BROADCAST_PING


108 
ac˚±ed
 = 1;

109 #i‡!
LWIP_MULTICAST_PING


111 i‡(
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

112 
ac˚±ed
 = 0;

115 #i‡!
LWIP_BROADCAST_PING


117 i‡(
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
)) {

118 
ac˚±ed
 = 0;

122 i‡(!
ac˚±ed
) {

123 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

124 
	`ICMP_STATS_INC
(
icmp
.
îr
);

125 
	`pbuf_‰ì
(
p
);

130 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

131 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

132 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

133 
À√º
;

135 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

136 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

137 
	`pbuf_‰ì
(
p
);

138 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

139 
	`¢mp_öc_icmpöîr‹s
();

142 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


143 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

147 
pbuf
 *
r
;

149 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

150 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

151 
memîr
;

154 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

155 i‡(
r
 =
NULL
) {

156 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

157 
memîr
;

159 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

160 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

162 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

163 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

164 
memîr
;

166 
ùhdr
 = 
r
->
∑ylﬂd
;

168 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

169 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

170 
memîr
;

173 
	`pbuf_‰ì
(
p
);

175 
p
 = 
r
;

178 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

179 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

180 
memîr
;

187 
õcho
 = 
p
->
∑ylﬂd
;

188 
tm∑ddr
.
addr
 = 
ùhdr
->
§c
.addr;

189 
ùhdr
->
§c
.
addr
 = iphdr->
de°
.addr;

190 
ùhdr
->
de°
.
addr
 = 
tm∑ddr
.addr;

191 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

193 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP_ECHO
 << 8))) {

194 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8) + 1;

196 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8);

200 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

201 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

202 #i‡
CHECKSUM_GEN_IP


203 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

206 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

208 
	`¢mp_öc_icmpoutmsgs
();

210 
	`¢mp_öc_icmpouãch‹ïs
();

212 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

213 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

215 
îr_t
 
ªt
;

216 
ªt
 = 
	`ù_ouçut_if
(
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

217 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

218 i‡(
ªt
 !
ERR_OK
) {

219 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

224 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

225 (
s16_t
)
ty≥
, (s16_t)
code
));

226 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

227 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

229 
	`pbuf_‰ì
(
p
);

231 
À√º
:

232 
	`pbuf_‰ì
(
p
);

233 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

234 
	`¢mp_öc_icmpöîr‹s
();

236 #i‡
LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN


237 
memîr
:

238 
	`pbuf_‰ì
(
p
);

239 
	`ICMP_STATS_INC
(
icmp
.
îr
);

240 
	`¢mp_öc_icmpöîr‹s
();

243 
	}
}

255 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

257 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_DUR
, 
t
);

258 
	}
}

260 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


269 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

271 
	`icmp_£nd_ª•⁄£
(
p
, 
ICMP_TE
, 
t
);

272 
	}
}

285 
	$icmp_£nd_ª•⁄£
(
pbuf
 *
p
, 
u8_t
 
ty≥
, u8_à
code
)

287 
pbuf
 *
q
;

288 
ù_hdr
 *
ùhdr
;

290 
icmp_echo_hdr
 *
icmphdr
;

293 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

294 
PBUF_RAM
);

295 i‡(
q
 =
NULL
) {

296 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

299 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

300 (
q
->
Àn
 >((
icmp_echo_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

302 
ùhdr
 = 
p
->
∑ylﬂd
;

303 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

304 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

305 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

306 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

307 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

309 
icmphdr
 = 
q
->
∑ylﬂd
;

310 
icmphdr
->
ty≥
 =Åype;

311 
icmphdr
->
code
 = code;

312 
icmphdr
->
id
 = 0;

313 
icmphdr
->
£qno
 = 0;

316 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_echo_hdr
), (u8_à*)
p
->payload,

317 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

320 
icmphdr
->
chksum
 = 0;

321 
icmphdr
->
chksum
 = 
	`öë_chksum
(icmphdr, 
q
->
Àn
);

322 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

324 
	`¢mp_öc_icmpoutmsgs
();

326 
	`¢mp_öc_icmpouâimìxcds
();

327 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

328 
	`pbuf_‰ì
(
q
);

329 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/igmp.c

80 
	~"lwù/›t.h
"

82 #i‡
LWIP_IGMP


84 
	~"lwù/igmp.h
"

85 
	~"lwù/debug.h
"

86 
	~"lwù/def.h
"

87 
	~"lwù/mem.h
"

88 
	~"lwù/ù.h
"

89 
	~"lwù/öë.h
"

90 
	~"lwù/öë_chksum.h
"

91 
	~"lwù/√tif.h
"

92 
	~"lwù/icmp.h
"

93 
	~"lwù/udp.h
"

94 
	~"lwù/t˝.h
"

95 
	~"lwù/°©s.h
"

97 
	~"°rög.h
"

103 
igmp_group
* 
	gigmp_group_li°
;

104 
ù_addr
 
	gÆlsy°ems
;

105 
ù_addr
 
	gÆÃouãrs
;

111 
	$igmp_öô
()

113 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

115 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

116 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

117 
	}
}

119 #ifde‡
LWIP_DEBUG


124 
	$igmp_dump_group_li°
()

126 
igmp_group
 *
group
 = 
igmp_group_li°
;

128 
group
 !
NULL
) {

129 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

130 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

131 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
öãrÁ˚
));

132 
group
 = group->
√xt
;

134 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

135 
	}
}

137 
	#igmp_dump_group_li°
()

	)

145 
îr_t


146 
	$igmp_°¨t
(
√tif
 *netif)

148 
igmp_group
* 
group
;

150 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%p\n", 
√tif
));

152 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

154 i‡(
group
 !
NULL
) {

155 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

156 
group
->
u£
++;

159 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

160 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

161 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

162 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

163 
√tif
->
	`igmp_mac_fûãr
–√tif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

166  
ERR_OK
;

169  
ERR_MEM
;

170 
	}
}

177 
îr_t


178 
	$igmp_°›
(
√tif
 *netif)

180 
igmp_group
 *
group
 = 
igmp_group_li°
;

181 
igmp_group
 *
¥ev
 = 
NULL
;

182 
igmp_group
 *
√xt
;

185 
group
 !
NULL
) {

186 
√xt
 = 
group
->next;

188 i‡(
group
->
öãrÁ˚
 =
√tif
) {

190 i‡(
group
 =
igmp_group_li°
) {

191 
igmp_group_li°
 = 
√xt
;

194 i‡(
¥ev
 !
NULL
) {

195 
¥ev
->
√xt
 =Çext;

198 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

199 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

200 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

201 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

202 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

205 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

208 
¥ev
 = 
group
;

211 
group
 = 
√xt
;

213  
ERR_OK
;

214 
	}
}

222 
	$igmp_ªp‹t_groups
–
√tif
 *netif)

224 
igmp_group
 *
group
 = 
igmp_group_li°
;

226 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%p\n", 
√tif
));

228 
group
 !
NULL
) {

229 i‡(
group
->
öãrÁ˚
 =
√tif
) {

230 
	`igmp_dñayög_membî
–
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

232 
group
 = group->
√xt
;

234 
	}
}

244 
igmp_group
 *

245 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

247 
igmp_group
 *
group
 = 
igmp_group_li°
;

249 
group
 !
NULL
) {

250 i‡((
group
->
öãrÁ˚
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

251  
group
;

253 
group
 = group->
√xt
;

259  
NULL
;

260 
	}
}

270 
igmp_group
 *

271 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

273 
igmp_group
 *
group
 = 
igmp_group_li°
;

276 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

277 i‡(
group
 !
NULL
) {

279  
group
;

283 
group
 = 
	`memp_mÆloc
(
MEMP_IGMP_GROUP
);

284 i‡(
group
 !
NULL
) {

285 
group
->
öãrÁ˚
 = 
iÂ
;

286 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

287 
group
->
timî
 = 0;

288 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

289 
group
->
œ°_ªp‹ãr_Êag
 = 0;

290 
group
->
u£
 = 0;

291 
group
->
√xt
 = 
igmp_group_li°
;

293 
igmp_group_li°
 = 
group
;

296 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

297 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

298 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
iÂ
));

300  
group
;

301 
	}
}

309 
îr_t


310 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

312 
îr_t
 
îr
 = 
ERR_OK
;

315 i‡(
igmp_group_li°
 =
group
) {

316 
igmp_group_li°
 = 
group
->
√xt
;

319 
igmp_group
 *
tmpGroup
;

320 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

321 i‡(
tmpGroup
->
√xt
 =
group
) {

322 
tmpGroup
->
√xt
 = 
group
->next;

327 i‡(
tmpGroup
 =
NULL
)

328 
îr
 = 
ERR_ARG
;

331 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

333  
îr
;

334 
	}
}

344 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
)

346 
ù_hdr
 * 
ùhdr
;

347 
igmp_msg
* 
igmp
;

348 
igmp_group
* 
group
;

349 
igmp_group
* 
grou¥ef
;

352 
ùhdr
 = 
p
->
∑ylﬂd
;

353 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

354 
	`pbuf_‰ì
(
p
);

355 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

356 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

360 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

361 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

362 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

363 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

364 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
öp
));

367 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

368 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

369 
	`pbuf_‰ì
(
p
);

370 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

371 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

376 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

379 i‡(!
group
) {

380 
	`pbuf_‰ì
(
p
);

381 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

386 
igmp
->
igmp_msgty≥
) {

387 
IGMP_MEMB_QUERY
: {

389 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& (
igmp
->
igmp_group_addªss
.
addr
 == 0)) {

391 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

393 i‡(
igmp
->
igmp_maxª•
 == 0) {

394 
	`IGMP_STATS_INC
(
igmp
.
v1_rxed
);

395 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

396 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

399 
	`IGMP_STATS_INC
(
igmp
.
group_quîy_rxed
);

400 
grou¥ef
 = 
igmp_group_li°
;

401 
grou¥ef
) {

403 i‡((
grou¥ef
->
öãrÁ˚
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

404 
	`igmp_dñayög_membî
–
grou¥ef
, 
igmp
->
igmp_maxª•
);

406 
grou¥ef
 = grou¥ef->
√xt
;

410 i‡(
group
->
group_addªss
.
addr
 != 0) {

411 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

412 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

413 i‡(
	`ù_addr_cmp
 (
de°
, &
Ælsy°ems
)) {

414 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

416 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
igmp
->
igmp_group_addªss
);

418 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

421 i‡(
group
 !
NULL
) {

422 
	`IGMP_STATS_INC
(
igmp
.
uniˇ°_quîy
);

423 
	`igmp_dñayög_membî
–
group
, 
igmp
->
igmp_maxª•
);

429 
IGMP_V2_MEMB_REPORT
: {

430 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

432 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_rxed
);

433 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

435 
group
->
timî
 = 0;

436 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

437 
group
->
œ°_ªp‹ãr_Êag
 = 0;

442 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",

443 
igmp
->
igmp_msgty≥
, 
group
->
group_°©e
, &group, group->
öãrÁ˚
));

448 
	`pbuf_‰ì
(
p
);

450 
	}
}

459 
îr_t


460 
	$igmp_joögroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

462 
îr_t
 
îr
 = 
ERR_VAL
;

463 
igmp_group
 *
group
;

464 
√tif
 *netif;

467 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

468 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

471 
√tif
 = 
√tif_li°
;

472 
√tif
 !
NULL
) {

474 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

476 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

478 i‡(
group
 !
NULL
) {

480 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

481 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

484 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

485 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

486 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

489 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

490 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

491 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

492 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

493 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

496 
	`IGMP_STATS_INC
(
igmp
.
joö_£¡
);

497 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

499 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

502 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

505 
group
->
u£
++;

507 
îr
 = 
ERR_OK
;

511 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

512  
ERR_MEM
;

516 
√tif
 =Çëif->
√xt
;

519  
îr
;

520 
	}
}

529 
îr_t


530 
	$igmp_Àavegroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

532 
îr_t
 
îr
 = 
ERR_VAL
;

533 
igmp_group
 *
group
;

534 
√tif
 *netif;

537 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

538 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

541 
√tif
 = 
√tif_li°
;

542 
√tif
 !
NULL
) {

544 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

546 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

548 i‡(
group
 !
NULL
) {

550 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

551 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

552 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

555 i‡(
group
->
u£
 <= 1) {

557 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

558 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

559 
	`IGMP_STATS_INC
(
igmp
.
Àave_£¡
);

560 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

564 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

565 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

566 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

567 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%p\n", 
√tif
));

568 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

571 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

572 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

573 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

576 
	`igmp_ªmove_group
(
group
);

579 
group
->
u£
--;

582 
îr
 = 
ERR_OK
;

585 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

589 
√tif
 =Çëif->
√xt
;

592  
îr
;

593 
	}
}

600 
	$igmp_tmr
()

602 
igmp_group
 *
group
 = 
igmp_group_li°
;

604 
group
 !
NULL
) {

605 i‡(
group
->
timî
 != 0) {

606 
group
->
timî
 -= 1;

607 i‡(
group
->
timî
 == 0) {

608 
	`igmp_timeout
(
group
);

611 
group
 = group->
√xt
;

613 
	}
}

622 
	$igmp_timeout
(
igmp_group
 *
group
)

625 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

626 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

627 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

628 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%p\n", 
group
->
öãrÁ˚
));

630 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

632 
	}
}

642 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

647 
group
->
timî
 = 
max_time
;

648 
	}
}

656 
	$igmp_°›_timî
(
igmp_group
 *
group
)

658 
group
->
timî
 = 0;

659 
	}
}

668 
	$igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
)

670 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
) ||

671 ((
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
Ë&& (
maxª•
 > group->
timî
))) {

672 
	`igmp_°¨t_timî
(
group
, (
maxª•
)/2);

673 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

675 
	}
}

696 
îr_t


697 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

698 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif)

701 
u16_t
 
ø
[2];

702 
ø
[0] = 
	`ht⁄s
 (
ROUTER_ALERT
);

703 
ø
[1] = 0x0000;

704  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 0, 
¥Ÿo
, 
√tif
, 
ø
, 
ROUTER_ALERTLEN
);

705 
	}
}

714 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

716 
pbuf
* 
p
 = 
NULL
;

717 
igmp_msg
* 
igmp
 = 
NULL
;

718 
ù_addr
 
§c
 = {0};

719 
ù_addr
* 
de°
 = 
NULL
;

722 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
);

724 i‡(
p
) {

725 
igmp
 = 
p
->
∑ylﬂd
;

726 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

727 (
p
->
Àn
 >(
igmp_msg
)));

728 
	`ù_addr_£t
(&
§c
, &((
group
->
öãrÁ˚
)->
ù_addr
));

730 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

731 
de°
 = &(
group
->
group_addªss
);

732 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_£¡
);

733 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

734 
group
->
œ°_ªp‹ãr_Êag
 = 1;

736 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

737 
de°
 = &
ÆÃouãrs
;

738 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

742 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

743 
igmp
->
igmp_msgty≥
 = 
ty≥
;

744 
igmp
->
igmp_maxª•
 = 0;

745 
igmp
->
igmp_checksum
 = 0;

746 
igmp
->
igmp_checksum
 = 
	`öë_chksum
–igmp, 
IGMP_MINLEN
);

748 
	`igmp_ù_ouçut_if
(
p
, &
§c
, 
de°
, 
IGMP_TTL
, 
IP_PROTO_IGMP
, 
group
->
öãrÁ˚
);

751 
	`pbuf_‰ì
(
p
);

753 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

755 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/inet.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë.h
"

44 #i‚de‡
i•röt


45 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

46 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

47 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

48 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

49 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

50 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

60 
u32_t


61 
	$öë_addr
(c⁄° *
˝
)

63 
ö_addr
 
vÆ
;

65 i‡(
	`öë_©⁄
(
˝
, &
vÆ
)) {

66  (
vÆ
.
s_addr
);

68  (
INADDR_NONE
);

69 
	}
}

83 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
)

85 
u32_t
 
vÆ
;

86 
u8_t
 
ba£
;

87 
c
;

88 
u32_t
 
∑πs
[4];

89 
u32_t
 *
µ
 = 
∑πs
;

91 
c
 = *
˝
;

98 i‡(!
	`isdigô
(
c
))

100 
vÆ
 = 0;

101 
ba£
 = 10;

102 i‡(
c
 == '0') {

103 
c
 = *++
˝
;

104 i‡(
c
 == 'x' || c == 'X') {

105 
ba£
 = 16;

106 
c
 = *++
˝
;

108 
ba£
 = 8;

111 i‡(
	`isdigô
(
c
)) {

112 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

113 
c
 = *++
˝
;

114 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

115 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

116 
c
 = *++
˝
;

120 i‡(
c
 == '.') {

127 i‡(
µ
 >
∑πs
 + 3)

129 *
µ
++ = 
vÆ
;

130 
c
 = *++
˝
;

137 i‡(
c
 !'\0' && !
	`is•a˚
(c))

143 
µ
 - 
∑πs
 + 1) {

152 i‡(
vÆ
 > 0xffffffUL)

154 
vÆ
 |
∑πs
[0] << 24;

158 i‡(
vÆ
 > 0xffff)

160 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

164 i‡(
vÆ
 > 0xff)

166 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

169 i‡(
addr
)

170 
addr
->
s_addr
 = 
	`ht⁄l
(
vÆ
);

172 
	}
}

183 
	$öë_¡ﬂ
(
ö_addr
 
addr
)

185 
°r
[16];

186 
u32_t
 
s_addr
 = 
addr
.s_addr;

187 
öv
[3];

188 *
Ω
;

189 
u8_t
 *
≠
;

190 
u8_t
 
ªm
;

191 
u8_t
 
n
;

192 
u8_t
 
i
;

194 
Ω
 = 
°r
;

195 
≠
 = (
u8_t
 *)&
s_addr
;

196 
n
 = 0;Ç < 4;Ç++) {

197 
i
 = 0;

199 
ªm
 = *
≠
 % (
u8_t
)10;

200 *
≠
 /(
u8_t
)10;

201 
öv
[
i
++] = '0' + 
ªm
;

202 } *
≠
);

203 
i
--)

204 *
Ω
++ = 
öv
[
i
];

205 *
Ω
++ = '.';

206 
≠
++;

208 *--
Ω
 = 0;

209  
°r
;

210 
	}
}

225 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

233 
u16_t


234 
	$ht⁄s
(
u16_t
 
n
)

236  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

237 
	}
}

245 
u16_t


246 
	$¡ohs
(
u16_t
 
n
)

248  
	`ht⁄s
(
n
);

249 
	}
}

257 
u32_t


258 
	$ht⁄l
(
u32_t
 
n
)

260  ((
n
 & 0xff) << 24) |

261 ((
n
 & 0xff00) << 8) |

262 ((
n
 & 0xff0000UL) >> 8) |

263 ((
n
 & 0xff000000UL) >> 24);

264 
	}
}

272 
u32_t


273 
	$¡ohl
(
u32_t
 
n
)

275  
	`ht⁄l
(
n
);

276 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/inet_chksum.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë_chksum.h
"

42 
	~"lwù/öë.h
"

44 
	~<°ddef.h
>

57 #i‚de‡
LWIP_CHKSUM


58 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

59 #i‚de‡
LWIP_CHKSUM_ALGORITHM


60 
	#LWIP_CHKSUM_ALGORITHM
 1

	)

64 #i‚de‡
LWIP_CHKSUM_ALGORITHM


65 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

69 #i‡
LWIP_PLATFORM_BYTESWAP
 && (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

71 
	#SWAP_BYTES_IN_WORD
(
w
Ë
	`LWIP_PLATFORM_HTONS
(w)

	)

74 
	#SWAP_BYTES_IN_WORD
(
w
Ë((w & 0xffË<< 8Ë| ((w & 0xff00Ë>> 8)

	)

78 
	#FOLD_U32T
(
u
Ë((u >> 16Ë+ (u & 0x0000ffffUL))

	)

80 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

91 
u16_t


92 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

94 
u32_t
 
acc
;

95 
u16_t
 
§c
;

96 
u8_t
 *
o˘ë±r
;

98 
acc
 = 0;

100 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

101 
Àn
 > 1) {

104 
§c
 = (*
o˘ë±r
) << 8;

105 
o˘ë±r
++;

107 
§c
 |(*
o˘ë±r
);

108 
o˘ë±r
++;

109 
acc
 +
§c
;

110 
Àn
 -= 2;

112 i‡(
Àn
 > 0) {

114 
§c
 = (*
o˘ë±r
) << 8;

115 
acc
 +
§c
;

118 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

119 i‡((
acc
 & 0xffff0000UL) != 0) {

120 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

125  
	`ht⁄s
((
u16_t
)
acc
);

126 
	}
}

129 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

145 
u16_t


146 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

148 
u8_t
 *
pb
 = 
d©≠å
;

149 
u16_t
 *
ps
, 
t
 = 0;

150 
u32_t
 
sum
 = 0;

151 
odd
 = ((
u32_t
)
pb
 & 1);

154 i‡(
odd
 && 
Àn
 > 0) {

155 ((
u8_t
 *)&
t
)[1] = *
pb
++;

156 
Àn
--;

160 
ps
 = (
u16_t
 *)
pb
;

161 
Àn
 > 1) {

162 
sum
 +*
ps
++;

163 
Àn
 -= 2;

167 i‡(
Àn
 > 0) {

168 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;;

172 
sum
 +
t
;

176 
sum
 = 
	`FOLD_U32T
(sum);

177 
sum
 = 
	`FOLD_U32T
(sum);

180 i‡(
odd
) {

181 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

184  
sum
;

185 
	}
}

188 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

201 
u16_t


202 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

204 
u8_t
 *
pb
 = 
d©≠å
;

205 
u16_t
 *
ps
, 
t
 = 0;

206 
u32_t
 *
∂
;

207 
u32_t
 
sum
 = 0, 
tmp
;

209 
odd
 = ((
u32_t
)
pb
 & 1);

211 i‡(
odd
 && 
Àn
 > 0) {

212 ((
u8_t
 *)&
t
)[1] = *
pb
++;

213 
Àn
--;

216 
ps
 = (
u16_t
 *)
pb
;

218 i‡(((
u32_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

219 
sum
 +*
ps
++;

220 
Àn
 -= 2;

223 
∂
 = (
u32_t
 *)
ps
;

225 
Àn
 > 7) {

226 
tmp
 = 
sum
 + *
∂
++;

227 i‡(
tmp
 < 
sum
) {

228 
tmp
++;

231 
sum
 = 
tmp
 + *
∂
++;

232 i‡(
sum
 < 
tmp
) {

233 
sum
++;

236 
Àn
 -= 8;

240 
sum
 = 
	`FOLD_U32T
(sum);

242 
ps
 = (
u16_t
 *)
∂
;

245 
Àn
 > 1) {

246 
sum
 +*
ps
++;

247 
Àn
 -= 2;

251 i‡(
Àn
 > 0) {

252 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

255 
sum
 +
t
;

259 
sum
 = 
	`FOLD_U32T
(sum);

260 
sum
 = 
	`FOLD_U32T
(sum);

262 i‡(
odd
) {

263 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

266  
sum
;

267 
	}
}

282 
u16_t


283 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

284 
ù_addr
 *
§c
, ù_add∏*
de°
,

285 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

287 
u32_t
 
acc
;

288 
pbuf
 *
q
;

289 
u8_t
 
sw≠≥d
;

291 
acc
 = 0;

292 
sw≠≥d
 = 0;

294 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

295 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

296 (*)
q
, (*)q->
√xt
));

297 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

301 
acc
 = 
	`FOLD_U32T
(acc);

302 i‡(
q
->
Àn
 % 2 != 0) {

303 
sw≠≥d
 = 1 - swapped;

304 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

309 i‡(
sw≠≥d
) {

310 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

312 
acc
 +(
§c
->
addr
 & 0xffffUL);

313 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

314 
acc
 +(
de°
->
addr
 & 0xffffUL);

315 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

316 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

317 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

321 
acc
 = 
	`FOLD_U32T
(acc);

322 
acc
 = 
	`FOLD_U32T
(acc);

323 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

324  (
u16_t
)~(
acc
 & 0xffffUL);

325 
	}
}

340 #i‡
LWIP_UDPLITE


341 
u16_t


342 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

343 
ù_addr
 *
§c
, ù_add∏*
de°
,

344 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

346 
u32_t
 
acc
;

347 
pbuf
 *
q
;

348 
u8_t
 
sw≠≥d
;

349 
u16_t
 
chkÀn
;

351 
acc
 = 0;

352 
sw≠≥d
 = 0;

354 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

355 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

356 (*)
q
, (*)q->
√xt
));

357 
chkÀn
 = 
q
->
Àn
;

358 i‡(
chkÀn
 > 
chksum_Àn
) {

359 
chkÀn
 = 
chksum_Àn
;

361 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

362 
chksum_Àn
 -
chkÀn
;

363 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

366 
acc
 = 
	`FOLD_U32T
(acc);

367 i‡(
q
->
Àn
 % 2 != 0) {

368 
sw≠≥d
 = 1 - swapped;

369 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

374 i‡(
sw≠≥d
) {

375 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

377 
acc
 +(
§c
->
addr
 & 0xffffUL);

378 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

379 
acc
 +(
de°
->
addr
 & 0xffffUL);

380 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

381 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

382 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

386 
acc
 = 
	`FOLD_U32T
(acc);

387 
acc
 = 
	`FOLD_U32T
(acc);

388 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

389  (
u16_t
)~(
acc
 & 0xffffUL);

390 
	}
}

403 
u16_t


404 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

406  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

407 
	}
}

416 
u16_t


417 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

419 
u32_t
 
acc
;

420 
pbuf
 *
q
;

421 
u8_t
 
sw≠≥d
;

423 
acc
 = 0;

424 
sw≠≥d
 = 0;

425 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

426 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

427 
acc
 = 
	`FOLD_U32T
(acc);

428 i‡(
q
->
Àn
 % 2 != 0) {

429 
sw≠≥d
 = 1 - swapped;

430 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

434 i‡(
sw≠≥d
) {

435 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

437  (
u16_t
)~(
acc
 & 0xffffUL);

438 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/ip.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/öë.h
"

47 
	~"lwù/öë_chksum.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/°©s.h
"

57 
	~"¨ch/≥rf.h
"

59 
	~<°rög.h
>

65 
√tif
 *
	gcuºít_√tif
;

70 c⁄° 
ù_hdr
 *
	gcuºít_hódî
;

80 
√tif
 *

81 
	$ù_cuºít_√tif
()

83  
cuºít_√tif
;

84 
	}
}

94 c⁄° 
ù_hdr
 *

95 
	$ù_cuºít_hódî
()

97  
cuºít_hódî
;

98 
	}
}

109 
√tif
 *

110 
	$ù_rouã
(
ù_addr
 *
de°
)

112 
√tif
 *netif;

115 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

117 i‡(
	`√tif_is_up
(
√tif
)) {

118 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

120  
√tif
;

124 i‡((
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(netif_default))) {

125 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ù_rouã: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

126 
	`IP_STATS_INC
(
ù
.
πîr
);

127 
	`¢mp_öc_ùouä‹ouãs
();

128  
NULL
;

131  
√tif_deÁu…
;

132 
	}
}

134 #i‡
IP_FORWARD


145 
√tif
 *

146 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

148 
√tif
 *netif;

150 
PERF_START
;

152 
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
));

153 i‡(
√tif
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ 0x%"
X32_F
" found\n",

155 
ùhdr
->
de°
.
addr
));

156 
	`¢mp_öc_ùouä‹ouãs
();

157  (
√tif
 *)
NULL
;

161 i‡(
√tif
 =
öp
) {

162 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

163 
	`¢mp_öc_ùouä‹ouãs
();

164  (
√tif
 *)
NULL
;

168 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

170 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

171 
	`¢mp_öc_ùöhdªº‹s
();

172 #i‡
LWIP_ICMP


174 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

175 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

178  (
√tif
 *)
NULL
;

182 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`ht⁄s
(0xffff - 0x100)) {

183 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100) + 1);

185 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100));

188 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ0x%"
X32_F
"\n",

189 
ùhdr
->
de°
.
addr
));

191 
	`IP_STATS_INC
(
ù
.
fw
);

192 
	`IP_STATS_INC
(
ù
.
xmô
);

193 
	`¢mp_öc_ùf‹wd©agøms
();

195 
	`PERF_STOP
("ip_forward");

197 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

198  
√tif
;

199 
	}
}

216 
îr_t


217 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

219 
ù_hdr
 *
ùhdr
;

220 
√tif
 *netif;

221 
u16_t
 
ùhdr_hÀn
;

222 
u16_t
 
ùhdr_Àn
;

223 #i‡
LWIP_DHCP


224 
check_ù_§c
=1;

227 
	`IP_STATS_INC
(
ù
.
ªcv
);

228 
	`¢mp_öc_ùöª˚ives
();

231 
ùhdr
 = 
p
->
∑ylﬂd
;

232 i‡(
	`IPH_V
(
ùhdr
) != 4) {

233 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 1, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

234 
	`ù_debug_¥öt
(
p
);

235 
	`pbuf_‰ì
(
p
);

236 
	`IP_STATS_INC
(
ù
.
îr
);

237 
	`IP_STATS_INC
(
ù
.
dr›
);

238 
	`¢mp_öc_ùöhdªº‹s
();

239  
ERR_OK
;

243 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

245 
ùhdr_hÀn
 *= 4;

247 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

250 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

251 i‡(
ùhdr_hÀn
 > 
p
->
Àn
)

252 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

253 
ùhdr_hÀn
, 
p
->
Àn
));

254 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
)

255 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), "

257 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

259 
	`pbuf_‰ì
(
p
);

260 
	`IP_STATS_INC
(
ù
.
À√º
);

261 
	`IP_STATS_INC
(
ù
.
dr›
);

262 
	`¢mp_öc_ùödisˇrds
();

263  
ERR_OK
;

267 #i‡
CHECKSUM_CHECK_IP


268 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

271 
	`ù_debug_¥öt
(
p
);

272 
	`pbuf_‰ì
(
p
);

273 
	`IP_STATS_INC
(
ù
.
chkîr
);

274 
	`IP_STATS_INC
(
ù
.
dr›
);

275 
	`¢mp_öc_ùöhdªº‹s
();

276  
ERR_OK
;

282 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

285 #i‡
LWIP_IGMP


286 i‡(
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

287 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &(
ùhdr
->
de°
)))) {

288 
√tif
 = 
öp
;

290 
√tif
 = 
NULL
;

298 
fú°
 = 1;

299 
√tif
 = 
öp
;

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

302 
ùhdr
->
de°
.
addr
, 
√tif
->
ù_addr
.addr,

303 
ùhdr
->
de°
.
addr
 & 
√tif
->
√tmask
.addr,

304 
√tif
->
ù_addr
.
addr
 &Çëif->
√tmask
.addr,

305 
ùhdr
->
de°
.
addr
 & ~(
√tif
->
√tmask
.addr)));

308 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

310 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
)) ||

312 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
√tif
)) {

313 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

314 
√tif
->
«me
[0],Çetif->name[1]));

319 i‡(
fú°
) {

320 
fú°
 = 0;

321 
√tif
 = 
√tif_li°
;

323 
√tif
 =Çëif->
√xt
;

325 i‡(
√tif
 =
öp
) {

326 
√tif
 =Çëif->
√xt
;

328 } 
√tif
 !
NULL
);

331 #i‡
LWIP_DHCP


336 i‡(
√tif
 =
NULL
) {

338 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

339 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

340 
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
)));

341 i‡(
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
Ë=
DHCP_CLIENT_PORT
) {

342 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input: DHCPÖacketáccepted.\n"));

343 
√tif
 = 
öp
;

344 
check_ù_§c
 = 0;

351 #i‡
LWIP_DHCP


352 i‡(
check_ù_§c
)

354 { i‡((
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
§c
), 
öp
)) ||

355 (
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
§c
)))) {

357 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:Öacket source isÇot valid.\n"));

359 
	`pbuf_‰ì
(
p
);

360 
	`IP_STATS_INC
(
ù
.
dr›
);

361 
	`¢mp_öc_ùöaddªº‹s
();

362 
	`¢mp_öc_ùödisˇrds
();

363  
ERR_OK
;

368 i‡(
√tif
 =
NULL
) {

370 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:ÖacketÇot for us.\n"));

371 #i‡
IP_FORWARD


373 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
)) {

375 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

379 
	`¢mp_öc_ùöaddªº‹s
();

380 
	`¢mp_öc_ùödisˇrds
();

382 
	`pbuf_‰ì
(
p
);

383  
ERR_OK
;

386 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`ht⁄s
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

387 #i‡
IP_REASSEMBLY


388 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

389 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`ht⁄s
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

391 
p
 = 
	`ù_ªass
(p);

393 i‡(
p
 =
NULL
) {

394  
ERR_OK
;

396 
ùhdr
 = 
p
->
∑ylﬂd
;

398 
	`pbuf_‰ì
(
p
);

399 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

400 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

401 
	`IP_STATS_INC
(
ù
.
›ãº
);

402 
	`IP_STATS_INC
(
ù
.
dr›
);

404 
	`¢mp_öc_ùöunknow≈rŸos
();

405  
ERR_OK
;

409 #i‡
IP_OPTIONS_ALLOWED
 == 0

411 #i‡
LWIP_IGMP


413 if((
ùhdr_hÀn
 > 
IP_HLEN
 && (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

415 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

417 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

418 
	`pbuf_‰ì
(
p
);

419 
	`IP_STATS_INC
(
ù
.
›ãº
);

420 
	`IP_STATS_INC
(
ù
.
dr›
);

422 
	`¢mp_öc_ùöunknow≈rŸos
();

423  
ERR_OK
;

428 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

429 
	`ù_debug_¥öt
(
p
);

430 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

432 
cuºít_√tif
 = 
öp
;

433 
cuºít_hódî
 = 
ùhdr
;

435 #i‡
LWIP_RAW


437 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

441 
	`IPH_PROTO
(
ùhdr
)) {

442 #i‡
LWIP_UDP


443 
IP_PROTO_UDP
:

444 #i‡
LWIP_UDPLITE


445 
IP_PROTO_UDPLITE
:

447 
	`¢mp_öc_ùödñivîs
();

448 
	`udp_öput
(
p
, 
öp
);

451 #i‡
LWIP_TCP


452 
IP_PROTO_TCP
:

453 
	`¢mp_öc_ùödñivîs
();

454 
	`t˝_öput
(
p
, 
öp
);

457 #i‡
LWIP_ICMP


458 
IP_PROTO_ICMP
:

459 
	`¢mp_öc_ùödñivîs
();

460 
	`icmp_öput
(
p
, 
öp
);

463 #i‡
LWIP_IGMP


464 
IP_PROTO_IGMP
:

465 
	`igmp_öput
(
p
,
öp
,&(
ùhdr
->
de°
));

469 #i‡
LWIP_ICMP


471 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) &&

472 !
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

473 
p
->
∑ylﬂd
 = 
ùhdr
;

474 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

477 
	`pbuf_‰ì
(
p
);

479 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

481 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

482 
	`IP_STATS_INC
(
ù
.
dr›
);

483 
	`¢mp_öc_ùöunknow≈rŸos
();

487 
cuºít_√tif
 = 
NULL
;

488 
cuºít_hódî
 = 
NULL
;

490  
ERR_OK
;

491 
	}
}

518 
îr_t


519 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

520 
u8_t
 
âl
, u8_à
tos
,

521 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

523 #i‡
IP_OPTIONS_SEND


524  
	`ù_ouçut_if_›t
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
, 
NULL
, 0);

525 
	}
}

533 
îr_t
 
	$ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

534 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

535 
u16_t
 
›éí
)

538 
ù_hdr
 *
ùhdr
;

539 
u16_t
 
ù_id
 = 0;

541 
	`¢mp_öc_ùouåeque°s
();

544 i‡(
de°
 !
IP_HDRINCL
) {

545 
u16_t
 
ù_hÀn
 = 
IP_HLEN
;

546 #i‡
IP_OPTIONS_SEND


547 
u16_t
 
›éí_Æig√d
 = 0;

548 i‡(
›éí
 != 0) {

550 
›éí_Æig√d
 = ((
›éí
 + 3) & ~3);

551 
ù_hÀn
 +
›éí_Æig√d
;

553 i‡(
	`pbuf_hódî
(
p
, 
›éí_Æig√d
)) {

554 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output_if_opt:ÇotÉnoughÑoom for IP options inÖbuf\n"));

555 
	`IP_STATS_INC
(
ù
.
îr
);

556 
	`¢mp_öc_ùoutdisˇrds
();

557  
ERR_BUF
;

559 
	`MEMCPY
(
p
->
∑ylﬂd
, 
ù_›ti⁄s
, 
›éí
);

560 i‡(
›éí
 < 
›éí_Æig√d
) {

562 
	`mem£t
(((*)
p
->
∑ylﬂd
Ë+ 
›éí
, 0, 
›éí_Æig√d
 - optlen);

567 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

568 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

570 
	`IP_STATS_INC
(
ù
.
îr
);

571 
	`¢mp_öc_ùoutdisˇrds
();

572  
ERR_BUF
;

575 
ùhdr
 = 
p
->
∑ylﬂd
;

576 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

577 (
p
->
Àn
 >(
ù_hdr
)));

579 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

580 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

582 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

584 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
ù_hÀn
 / 4, 
tos
);

585 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

586 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

587 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

588 ++
ù_id
;

590 i‡(
	`ù_addr_ißny
(
§c
)) {

591 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

593 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

596 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

597 #i‡
CHECKSUM_GEN_IP


598 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
ù_hÀn
));

602 
ùhdr
 = 
p
->
∑ylﬂd
;

603 
de°
 = &(
ùhdr
->dest);

606 #i‡
IP_FRAG


608 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu))

609  
	`ù_‰ag
(
p
,
√tif
,
de°
);

612 
	`IP_STATS_INC
(
ù
.
xmô
);

614 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

615 
	`ù_debug_¥öt
(
p
);

617 #i‡(
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

618 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

620 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

622  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

626 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

628  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

630 
	}
}

649 
îr_t


650 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

651 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

653 
√tif
 *netif;

655 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

656 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

657 
	`IP_STATS_INC
(
ù
.
πîr
);

658  
ERR_RTE
;

661  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

662 
	}
}

664 #i‡
LWIP_NETIF_HWADDRHINT


683 
îr_t


684 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

685 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

687 
√tif
 *netif;

688 
îr_t
 
îr
;

690 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

691 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

692 
	`IP_STATS_INC
(
ù
.
πîr
);

693  
ERR_RTE
;

696 
√tif
->
addr_höt
 =áddr_hint;

697 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

698 
√tif
->
addr_höt
 = 
NULL
;

700  
îr
;

701 
	}
}

704 #i‡
IP_DEBUG


709 
	$ù_debug_¥öt
(
pbuf
 *
p
)

711 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

712 
u8_t
 *
∑ylﬂd
;

714 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

716 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

717 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

718 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

719 
	`IPH_V
(
ùhdr
),

720 
	`IPH_HL
(
ùhdr
),

721 
	`IPH_TOS
(
ùhdr
),

722 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

723 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

724 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

725 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

726 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

727 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

728 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

729 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

730 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

731 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

732 
	`IPH_TTL
(
ùhdr
),

733 
	`IPH_PROTO
(
ùhdr
),

734 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

735 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

736 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

737 
	`ù4_addr1
(&
ùhdr
->
§c
),

738 
	`ù4_addr2
(&
ùhdr
->
§c
),

739 
	`ù4_addr3
(&
ùhdr
->
§c
),

740 
	`ù4_addr4
(&
ùhdr
->
§c
)));

741 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

742 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

743 
	`ù4_addr1
(&
ùhdr
->
de°
),

744 
	`ù4_addr2
(&
ùhdr
->
de°
),

745 
	`ù4_addr3
(&
ùhdr
->
de°
),

746 
	`ù4_addr4
(&
ùhdr
->
de°
)));

747 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

748 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/ip_addr.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/√tif.h
"

44 
	#IP_ADDR_ANY_VALUE
 0x00000000UL

	)

45 
	#IP_ADDR_BROADCAST_VALUE
 0xffffffffUL

	)

48 c⁄° 
ù_addr
 
	gù_addr_™y
 = { 
IP_ADDR_ANY_VALUE
 };

49 c⁄° 
ù_addr
 
	gù_addr_brﬂdˇ°
 = { 
IP_ADDR_BROADCAST_VALUE
 };

58 
u8_t
 
	$ù_addr_isbrﬂdˇ°
(
ù_addr
 *
addr
, 
√tif
 *netif)

60 
u32_t
 
addr2ã°
;

62 
addr2ã°
 = 
addr
->addr;

64 i‡((~
addr2ã°
 =
IP_ADDR_ANY_VALUE
) ||

65 (
addr2ã°
 =
IP_ADDR_ANY_VALUE
))

68 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0)

73 i‡(
addr2ã°
 =
√tif
->
ù_addr
.
addr
)

76 i‡(
	`ù_addr_√tcmp
(
addr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

78 && ((
addr2ã°
 & ~
√tif
->
√tmask
.
addr
) ==

79 (
IP_ADDR_BROADCAST_VALUE
 & ~
√tif
->
√tmask
.
addr
)))

84 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/ip_frag.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù_‰ag.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/öë.h
"

45 
	~"lwù/öë_chksum.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/¢mp.h
"

48 
	~"lwù/°©s.h
"

49 
	~"lwù/icmp.h
"

51 
	~<°rög.h
>

53 #i‡
IP_REASSEMBLY


67 #i‚de‡
IP_REASS_CHECK_OVERLAP


68 
	#IP_REASS_CHECK_OVERLAP
 1

	)

75 #i‚de‡
IP_REASS_FREE_OLDEST


76 
	#IP_REASS_FREE_OLDEST
 1

	)

79 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

86 #ifde‡
PACK_STRUCT_USE_INCLUDES


87 
	~"¨ch/bp°ru˘.h
"

89 
PACK_STRUCT_BEGIN


90 
	sù_ªass_hñ≥r
 {

91 
PACK_STRUCT_FIELD
(
pbuf
 *
√xt_pbuf
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
°¨t
);

93 
PACK_STRUCT_FIELD
(
u16_t
 
íd
);

94 } 
	gPACK_STRUCT_STRUCT
;

95 
	gPACK_STRUCT_END


96 #ifde‡
PACK_STRUCT_USE_INCLUDES


97 
	~"¨ch/ï°ru˘.h
"

100 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

101 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

102 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

103 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

106 
ù_ªassd©a
 *
	gªassd©agøms
;

107 
u16_t
 
	gù_ªass_pbufcou¡
;

110 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

111 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

120 
	$ù_ªass_tmr
()

122 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

124 
r
 = 
ªassd©agøms
;

125 
r
 !
NULL
) {

128 i‡(
r
->
timî
 > 0) {

129 
r
->
timî
--;

130 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

131 
¥ev
 = 
r
;

132 
r
 =Ñ->
√xt
;

135 
ù_ªassd©a
 *
tmp
;

136 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

137 
tmp
 = 
r
;

139 
r
 =Ñ->
√xt
;

141 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

144 
	}
}

156 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

158 
pbufs_‰ìd
 = 0;

159 
pbuf
 *
p
;

160 
ù_ªass_hñ≥r
 *
ùrh
;

162 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

163 i‡(
¥ev
 !
NULL
) {

164 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

167 
	`¢mp_öc_ùªasmÁûs
();

168 #i‡
LWIP_ICMP


169 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

170 i‡(
ùrh
->
°¨t
 == 0) {

173 
p
 = 
ùr
->p;

174 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

176 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

177 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

178 
pbufs_‰ìd
 +
	`pbuf_˛í
(
p
);

179 
	`pbuf_‰ì
(
p
);

185 
p
 = 
ùr
->p;

186 
p
 !
NULL
) {

187 
pbuf
 *
pcur
;

188 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

189 
pcur
 = 
p
;

191 
p
 = 
ùrh
->
√xt_pbuf
;

192 
pbufs_‰ìd
 +
	`pbuf_˛í
(
pcur
);

193 
	`pbuf_‰ì
(
pcur
);

196 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

197 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

198 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

200  
pbufs_‰ìd
;

201 
	}
}

203 #i‡
IP_REASS_FREE_OLDEST


214 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

219 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

220 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

221 
Ÿhî_d©agøms
;

226 
ﬁde°
 = 
NULL
;

227 
¥ev
 = 
NULL
;

228 
Ÿhî_d©agøms
 = 0;

229 
r
 = 
ªassd©agøms
;

230 
r
 !
NULL
) {

231 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

233 
Ÿhî_d©agøms
++;

234 i‡(
ﬁde°
 =
NULL
) {

235 
ﬁde°
 = 
r
;

236 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

238 
ﬁde°
 = 
r
;

241 i‡(
r
->
√xt
 !
NULL
) {

242 
¥ev
 = 
r
;

244 
r
 =Ñ->
√xt
;

246 i‡(
ﬁde°
 !
NULL
) {

247 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

248 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

250 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

251  
pbufs_‰ìd
;

252 
	}
}

261 
ù_ªassd©a
*

262 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

264 
ù_ªassd©a
* 
ùr
;

266 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

267 i‡(
ùr
 =
NULL
) {

268 #i‡
IP_REASS_FREE_OLDEST


269 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

270 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

272 i‡(
ùr
 =
NULL
)

275 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

276 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

277  
NULL
;

280 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

281 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

284 
ùr
->
√xt
 = 
ªassd©agøms
;

285 
ªassd©agøms
 = 
ùr
;

288 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

289  
ùr
;

290 
	}
}

297 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

301 i‡(
ªassd©agøms
 =
ùr
) {

303 
ªassd©agøms
 = 
ùr
->
√xt
;

306 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

307 
¥ev
->
√xt
 = 
ùr
->next;

311 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
);

312 
	}
}

324 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

326 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

327 
pbuf
 *
q
;

328 
u16_t
 
off£t
,
Àn
;

329 
ù_hdr
 *
‰aghdr
;

330 
vÆid
 = 1;

333 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

334 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

335 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

340 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

341 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

342 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

343 
ùrh
->
√xt_pbuf
 = 
NULL
;

344 
ùrh
->
°¨t
 = 
off£t
;

345 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

349 
q
 = 
ùr
->
p
; q !
NULL
;) {

350 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

351 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

353 
ùrh
->
√xt_pbuf
 = 
q
;

354 i‡(
ùrh_¥ev
 !
NULL
) {

356 #i‡
IP_REASS_CHECK_OVERLAP


357 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

359 
‰ìpbuf
;

362 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

365 
ùr
->
p
 = 
√w_p
;

368 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

370 
‰ìpbuf
;

371 #i‡
IP_REASS_CHECK_OVERLAP


372 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

374 
‰ìpbuf
;

378 i‡(
ùrh_¥ev
 !
NULL
) {

379 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

382 
vÆid
 = 0;

386 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

387 
ùrh_¥ev
 = 
ùrh_tmp
;

391 i‡(
q
 =
NULL
) {

392 i‡(
ùrh_¥ev
 !
NULL
) {

395 #i‡
IP_REASS_CHECK_OVERLAP


396 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

398 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

399 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

400 
vÆid
 = 0;

403 #i‡
IP_REASS_CHECK_OVERLAP


404 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

405 
ùr
->
p
 =
NULL
);

408 
ùr
->
p
 = 
√w_p
;

414 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

416 i‡(
vÆid
) {

419 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

420 
vÆid
 = 0;

423 
ùrh_¥ev
 = 
ùrh
;

424 
q
 = 
ùrh
->
√xt_pbuf
;

425 
q
 !
NULL
) {

426 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

427 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

428 
vÆid
 = 0;

431 
ùrh_¥ev
 = 
ùrh
;

432 
q
 = 
ùrh
->
√xt_pbuf
;

436 i‡(
vÆid
) {

437 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

438 
	`LWIP_ASSERT
("sanity check",

439 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

440 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

441 
ùrh
->
√xt_pbuf
 =
NULL
);

442 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

443 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

450  
vÆid
;

454 #i‡
IP_REASS_CHECK_OVERLAP


455 
‰ìpbuf
:

456 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

457 
	`pbuf_‰ì
(
√w_p
);

460 
	}
}

468 
pbuf
 *

469 
	$ù_ªass
(
pbuf
 *
p
)

471 
pbuf
 *
r
;

472 
ù_hdr
 *
‰aghdr
;

473 
ù_ªassd©a
 *
ùr
;

474 
ù_ªass_hñ≥r
 *
ùrh
;

475 
u16_t
 
off£t
, 
Àn
;

476 
u8_t
 
˛í
;

477 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

479 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

480 
	`¢mp_öc_ùªasmªqds
();

482 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

484 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

485 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

486 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

487 
nuŒªtu∫
;

490 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

491 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

494 
˛í
 = 
	`pbuf_˛í
(
p
);

495 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

496 #i‡
IP_REASS_FREE_OLDEST


497 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

498 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

502 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

503 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

504 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

507 
nuŒªtu∫
;

513 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

517 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

518 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

519 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

520 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

523 
ùr_¥ev
 = 
ùr
;

526 i‡(
ùr
 =
NULL
) {

528 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

530 if(
ùr
 =
NULL
) {

531 
nuŒªtu∫
;

534 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

535 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

540 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

545 
ù_ªass_pbufcou¡
 +
˛í
;

551 i‡((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_MF
) == 0) {

552 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

553 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

554 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

555 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

556 
ùr
->
d©agøm_Àn
));

560 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

563 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

566 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

569 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

570 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

571 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

572 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

573 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

575 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

577 
p
 = 
ùr
->p;

580 
r
 !
NULL
) {

581 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

584 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

585 
	`pbuf_ˇt
(
p
, 
r
);

586 
r
 = 
ùrh
->
√xt_pbuf
;

589 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

592 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

595  
p
;

598 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

599  
NULL
;

601 
nuŒªtu∫
:

602 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

603 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

604 
	`pbuf_‰ì
(
p
);

605  
NULL
;

606 
	}
}

609 #i‡
IP_FRAG


610 #i‡
IP_FRAG_USES_STATIC_BUF


611 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
 + 
MEM_ALIGNMENT
 - 1)];

627 
îr_t


628 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
)

630 
pbuf
 *
ømbuf
;

631 #i‡
IP_FRAG_USES_STATIC_BUF


632 
pbuf
 *
hódî
;

634 
pbuf
 *
√wpbuf
;

635 
ù_hdr
 *
‹igöÆ_ùhdr
;

637 
ù_hdr
 *
ùhdr
;

638 
u16_t
 
nfb
;

639 
u16_t
 
À·
, 
c›
;

640 
u16_t
 
mtu
 = 
√tif
->mtu;

641 
u16_t
 
ofo
, 
omf
;

642 
u16_t
 
œ°
;

643 
u16_t
 
poff
 = 
IP_HLEN
;

644 
u16_t
 
tmp
;

645 #i‡!
IP_FRAG_USES_STATIC_BUF


646 
u16_t
 
√wpbuÊí
 = 0;

647 
u16_t
 
À·_to_c›y
;

651 #i‡
IP_FRAG_USES_STATIC_BUF


656 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
);

657 i‡(
ømbuf
 =
NULL
) {

658 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

659  
ERR_MEM
;

661 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

662 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

665 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

666 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

668 
‹igöÆ_ùhdr
 = 
p
->
∑ylﬂd
;

669 
ùhdr
 = 
‹igöÆ_ùhdr
;

673 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

674 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

675 
omf
 = 
tmp
 & 
IP_MF
;

677 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

679 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

681 
À·
) {

682 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

685 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

686 i‡(!
œ°
)

687 
tmp
 =Åm∞| 
IP_MF
;

690 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

692 #i‡
IP_FRAG_USES_STATIC_BUF


693 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

700 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
);

701 i‡(
ømbuf
 =
NULL
) {

702  
ERR_MEM
;

704 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

705 (
p
->
Àn
 >(
IP_HLEN
)));

706 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

707 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

710 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

711 
p
->
Àn
 -
poff
;

713 
À·_to_c›y
 = 
c›
;

714 
À·_to_c›y
) {

715 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

717 i‡(!
√wpbuÊí
) {

718 
p
 =Ö->
√xt
;

721 
√wpbuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_REF
);

722 i‡(
√wpbuf
 =
NULL
) {

723 
	`pbuf_‰ì
(
ømbuf
);

724  
ERR_MEM
;

727 
√wpbuf
->
∑ylﬂd
 = 
p
->payload;

728 
√wpbuf
->
Àn
 =Çewpbuf->
tŸ_Àn
 = 
√wpbuÊí
;

732 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

733 
À·_to_c›y
 -
√wpbuÊí
;

734 i‡(
À·_to_c›y
)

735 
p
 =Ö->
√xt
;

737 
poff
 = 
√wpbuÊí
;

741 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

742 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

743 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

744 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

746 #i‡
IP_FRAG_USES_STATIC_BUF


747 i‡(
œ°
)

748 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

755 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
);

756 i‡(
hódî
 !
NULL
) {

757 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

758 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

759 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

760 
	`¢mp_öc_ù‰ag¸óãs
();

761 
	`pbuf_‰ì
(
hódî
);

763 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

764 
	`pbuf_‰ì
(
ømbuf
);

765  
ERR_MEM
;

771 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

772 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

781 
	`pbuf_‰ì
(
ømbuf
);

783 
À·
 -
c›
;

784 
ofo
 +
nfb
;

786 #i‡
IP_FRAG_USES_STATIC_BUF


787 
	`pbuf_‰ì
(
ømbuf
);

789 
	`¢mp_öc_ù‰agoks
();

790  
ERR_OK
;

791 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/icmp6.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/icmp.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

47 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

49 
u8_t
 
ty≥
;

50 
icmp_echo_hdr
 *
õcho
;

51 
ù_hdr
 *
ùhdr
;

52 
ù_addr
 
tm∑ddr
;

54 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

58 
ty≥
 = ((
u8_t
 *)
p
->
∑ylﬂd
)[0];

60 
ty≥
) {

61 
ICMP6_ECHO
:

62 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

64 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

65 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

67 
	`pbuf_‰ì
(
p
);

68 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

71 
õcho
 = 
p
->
∑ylﬂd
;

72 
ùhdr
 = (
ù_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 - 
IP_HLEN
);

73 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

74 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

75 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

78 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp:Ö->À¿%"
S16_F
"Ö->tŸ_À¿%"S16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

79 
	`ù_addr_£t
(&
tm∑ddr
, &(
ùhdr
->
§c
));

80 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(ùhdr->
de°
));

81 
	`ù_addr_£t
(&(
ùhdr
->
de°
), &
tm∑ddr
);

82 
õcho
->
ty≥
 = 
ICMP6_ER
;

84 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP6_ECHO
 << 8))) {

85 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8) + 1;

87 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8);

89 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

90 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

93 
	`ù_ouçut_if
 (
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

94 
ùhdr
->
h›lim
, 
IP_PROTO_ICMP
, 
öp
);

97 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
"ÇŸ suµ‹ãd.\n", (
s16_t
)
ty≥
));

98 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

99 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

102 
	`pbuf_‰ì
(
p
);

103 
	}
}

106 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

108 
pbuf
 *
q
;

109 
ù_hdr
 *
ùhdr
;

110 
icmp_dur_hdr
 *
idur
;

113 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

115 i‡(
q
 =
NULL
) {

116 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

117 
	`pbuf_‰ì
(
p
);

120 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

121 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

123 
ùhdr
 = 
p
->
∑ylﬂd
;

125 
idur
 = 
q
->
∑ylﬂd
;

126 
idur
->
ty≥
 = (
u8_t
)
ICMP6_DUR
;

127 
idur
->
icode
 = (
u8_t
)
t
;

129 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, 
p
->∑ylﬂd, 
IP_HLEN
 + 8);

132 
idur
->
chksum
 = 0;

133 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

134 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

136 
	`ù_ouçut
(
q
, 
NULL
,

137 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

138 
	`pbuf_‰ì
(
q
);

139 
	}
}

142 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

144 
pbuf
 *
q
;

145 
ù_hdr
 *
ùhdr
;

146 
icmp_ã_hdr
 *
ãhdr
;

148 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded\n"));

151 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

153 i‡(
q
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

155 
	`pbuf_‰ì
(
p
);

158 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

159 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

161 
ùhdr
 = 
p
->
∑ylﬂd
;

163 
ãhdr
 = 
q
->
∑ylﬂd
;

164 
ãhdr
->
ty≥
 = (
u8_t
)
ICMP6_TE
;

165 
ãhdr
->
icode
 = (
u8_t
)
t
;

168 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, (u8_à*)
p
->∑ylﬂd, 
IP_HLEN
 + 8);

171 
ãhdr
->
chksum
 = 0;

172 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

173 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

174 
	`ù_ouçut
(
q
, 
NULL
,

175 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

176 
	`pbuf_‰ì
(
q
);

177 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/inet6.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/öë.h
"

54 
u32_t


55 
	$chksum
(*
d©≠å
, 
u16_t
 
Àn
)

57 
u16_t
 *
sd©≠å
 = 
d©≠å
;

58 
u32_t
 
acc
;

61 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

62 
acc
 +*
sd©≠å
++;

66 i‡(
Àn
 == 1) {

67 
acc
 +
	`ht⁄s
((
u16_t
)(*(
u8_t
 *)
d©≠å
) << 8);

70  
acc
;

72 
	}
}

79 
u16_t


80 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

81 
ù_addr
 *
§c
, ù_add∏*
de°
,

82 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
)

84 
u32_t
 
acc
;

85 
pbuf
 *
q
;

86 
u8_t
 
sw≠≥d
, 
i
;

88 
acc
 = 0;

89 
sw≠≥d
 = 0;

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

92 
acc
 >> 16) {

93 
acc
 = (acc & 0xffff) + (acc >> 16);

95 i‡(
q
->
Àn
 % 2 != 0) {

96 
sw≠≥d
 = 1 - swapped;

97 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

101 i‡(
sw≠≥d
) {

102 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

105 
i
 = 0; i < 8; i++) {

106 
acc
 +((
u16_t
 *)
§c
->
addr
)[
i
] & 0xffff;

107 
acc
 +((
u16_t
 *)
de°
->
addr
)[
i
] & 0xffff;

108 
acc
 >> 16) {

109 
acc
 = (acc & 0xffff) + (acc >> 16);

112 
acc
 +(
u16_t
)
	`ht⁄s
((u16_t)
¥Ÿo
);

113 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[0] & 0xffff;

114 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[1] & 0xffff;

116 
acc
 >> 16) {

117 
acc
 = (acc & 0xffff) + (acc >> 16);

119  ~(
acc
 & 0xffff);

120 
	}
}

128 
u16_t


129 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

131 
u32_t
 
acc
, 
sum
;

133 
acc
 = 
	`chksum
(
d©≠å
, 
Àn
);

134 
sum
 = (
acc
 & 0xffff) + (acc >> 16);

135 
sum
 += (sum >> 16);

136  ~(
sum
 & 0xffff);

137 
	}
}

139 
u16_t


140 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

142 
u32_t
 
acc
;

143 
pbuf
 *
q
;

144 
u8_t
 
sw≠≥d
;

146 
acc
 = 0;

147 
sw≠≥d
 = 0;

148 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

149 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

150 
acc
 >> 16) {

151 
acc
 = (acc & 0xffff) + (acc >> 16);

153 i‡(
q
->
Àn
 % 2 != 0) {

154 
sw≠≥d
 = 1 - swapped;

155 
acc
 = (acc & 0xff << 8) | (acc & 0xff00 >> 8);

159 i‡(
sw≠≥d
) {

160 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

162  ~(
acc
 & 0xffff);

163 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/ip6.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/ù.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/udp.h
"

51 
	~"lwù/t˝.h
"

53 
	~"lwù/°©s.h
"

55 
	~"¨ch/≥rf.h
"

63 
	$ù_öô
()

65 
	}
}

74 
√tif
 *

75 
	$ù_rouã
(
ù_addr
 *
de°
)

77 
√tif
 *netif;

79 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

80 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

81  
√tif
;

85  
√tif_deÁu…
;

86 
	}
}

96 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
)

98 
√tif
 *netif;

100 
PERF_START
;

102 i‡((
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
))Ë=
NULL
) {

104 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Ço forwardingÑoute found for "));

105 #i‡
IP_DEBUG


106 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

108 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

109 
	`pbuf_‰ì
(
p
);

113 i‡(--
ùhdr
->
h›lim
 == 0) {

114 #i‡
LWIP_ICMP


116 i‡(
ùhdr
->
√xthdr
 !
IP_PROTO_ICMP
) {

117 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

120 
	`pbuf_‰ì
(
p
);

132 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward: forwardingÖacketÅo "));

133 #i‡
IP_DEBUG


134 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

136 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

138 
	`IP_STATS_INC
(
ù
.
fw
);

139 
	`IP_STATS_INC
(
ù
.
xmô
);

141 
	`PERF_STOP
("ip_forward");

143 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

144 
	}
}

157 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
) {

158 
ù_hdr
 *
ùhdr
;

159 
√tif
 *netif;

162 
PERF_START
;

164 #i‡
IP_DEBUG


165 
	`ù_debug_¥öt
(
p
);

169 
	`IP_STATS_INC
(
ù
.
ªcv
);

172 
ùhdr
 = 
p
->
∑ylﬂd
;

175 i‡(
ùhdr
->
v
 != 6) {

176 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖacket dropped dueÅo bad versionÇumber\n"));

177 #i‡
IP_DEBUG


178 
	`ù_debug_¥öt
(
p
);

180 
	`pbuf_‰ì
(
p
);

181 
	`IP_STATS_INC
(
ù
.
îr
);

182 
	`IP_STATS_INC
(
ù
.
dr›
);

187 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

188 #i‡
IP_DEBUG


189 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: iphdr->dest "));

190 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

191 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->ip_addr "));

192 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

193 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

195 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
))) {

201 i‡(
√tif
 =
NULL
) {

203 #i‡
IP_FORWARD


204 
	`ù_f‹w¨d
(
p
, 
ùhdr
);

206 
	`pbuf_‰ì
(
p
);

210 
	`pbuf_ªÆloc
(
p
, 
IP_HLEN
 + 
	`¡ohs
(
ùhdr
->
Àn
));

213 #i‡
IP_DEBUG


219 if(
	`pbuf_hódî
(
p
, -
IP_HLEN
)) {

220 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

224 
ùhdr
->
√xthdr
) {

225 
IP_PROTO_UDP
:

226 
	`udp_öput
(
p
, 
öp
);

228 
IP_PROTO_TCP
:

229 
	`t˝_öput
(
p
, 
öp
);

231 #i‡
LWIP_ICMP


232 
IP_PROTO_ICMP
:

233 
	`icmp_öput
(
p
, 
öp
);

237 #i‡
LWIP_ICMP


239 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

241 
	`pbuf_‰ì
(
p
);

242 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n",

243 
ùhdr
->
√xthdr
));

245 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

246 
	`IP_STATS_INC
(
ù
.
dr›
);

248 
	`PERF_STOP
("ip_input");

249 
	}
}

259 
îr_t


260 
	$ù_ouçut_if
 (
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

261 
u8_t
 
âl
,

262 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

264 
ù_hdr
 *
ùhdr
;

266 
PERF_START
;

268 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

269 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

271 
	`IP_STATS_INC
(
ù
.
îr
);

273  
ERR_BUF
;

275 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

277 
ùhdr
 = 
p
->
∑ylﬂd
;

280 i‡(
de°
 !
IP_HDRINCL
) {

281 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("!IP_HDRLINCL\n"));

282 
ùhdr
->
h›lim
 = 
âl
;

283 
ùhdr
->
√xthdr
 = 
¥Ÿo
;

284 
ùhdr
->
Àn
 = 
	`ht⁄s
(
p
->
tŸ_Àn
 - 
IP_HLEN
);

285 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

287 
ùhdr
->
v
 = 6;

289 i‡(
	`ù_addr_ißny
(
§c
)) {

290 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

292 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

296 
de°
 = &(
ùhdr
->dest);

299 
	`IP_STATS_INC
(
ù
.
xmô
);

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%¯÷í %"
U16_F
")\n", 
√tif
->
«me
[0],Çëif->«me[1], 
p
->
tŸ_Àn
));

302 #i‡
IP_DEBUG


303 
	`ù_debug_¥öt
(
p
);

306 
	`PERF_STOP
("ip_output_if");

307  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

308 
	}
}

316 
îr_t


317 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

318 
u8_t
 
âl
, u8_à
¥Ÿo
)

320 
√tif
 *netif;

321 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

322 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

323 
	`IP_STATS_INC
(
ù
.
πîr
);

324  
ERR_RTE
;

327  
	`ù_ouçut_if
 (
p
, 
§c
, 
de°
, 
âl
, 
¥Ÿo
, 
√tif
);

328 
	}
}

330 #i‡
LWIP_NETIF_HWADDRHINT


331 
îr_t


332 
	$ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

333 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
)

335 
√tif
 *netif;

336 
îr_t
 
îr
;

338 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

339 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

340 
	`IP_STATS_INC
(
ù
.
πîr
);

341  
ERR_RTE
;

344 
√tif
->
addr_höt
 =áddr_hint;

345 
îr
 = 
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

346 
√tif
->
addr_höt
 = 
NULL
;

348  
îr
;

349 
	}
}

352 #i‡
IP_DEBUG


354 
	$ù_debug_¥öt
(
pbuf
 *
p
)

356 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

358 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

359 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

360 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" | %"
X16_F
"%"X16_F" | %"X16_F"%"X16_F" | (v,Åraffic class, flowÜabel)\n",

361 
ùhdr
->
v
,

362 
ùhdr
->
t˛ass1
, iphdr->
t˛ass2
,

363 
ùhdr
->
Êow1
, iphdr->
Êow2
));

364 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

365 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" | %2"U16_F" | %2"U16_F" | (len,Çexthdr, hoplim)\n",

366 
	`¡ohs
(
ùhdr
->
Àn
),

367 
ùhdr
->
√xthdr
,

368 
ùhdr
->
h›lim
));

369 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

370 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

371 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) >> 16) & 0xffff,

372 
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) & 0xffff));

373 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

374 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) >> 16) & 0xffff,

375 
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) & 0xffff));

376 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

377 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) >> 16) & 0xffff,

378 
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) & 0xffff));

379 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

380 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) >> 16) & 0xffff,

381 
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) & 0xffff));

382 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

383 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

384 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) >> 16) & 0xffff,

385 
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) & 0xffff));

386 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

387 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) >> 16) & 0xffff,

388 
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) & 0xffff));

389 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

390 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) >> 16) & 0xffff,

391 
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) & 0xffff));

392 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

393 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) >> 16) & 0xffff,

394 
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) & 0xffff));

395 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

396 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/ip6_addr.c

33 
	~"lwù/›t.h
"

34 
	~"lwù/ù_addr.h
"

35 
	~"lwù/öë.h
"

37 
u8_t


38 
	$ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

39 
ù_addr
 *
mask
)

41 ((
addr1
->
addr
[0] & 
mask
->addr[0]Ë=(
addr2
->addr[0] & mask->addr[0]) &&

42 (
addr1
->
addr
[1] & 
mask
->addr[1]Ë=(
addr2
->addr[1] & mask->addr[1]) &&

43 (
addr1
->
addr
[2] & 
mask
->addr[2]Ë=(
addr2
->addr[2] & mask->addr[2]) &&

44 (
addr1
->
addr
[3] & 
mask
->addr[3]Ë=(
addr2
->addr[3] & mask->addr[3]));

46 
	}
}

48 
u8_t


49 
	$ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
)

51 (
addr1
->
addr
[0] =
addr2
->addr[0] &&

52 
addr1
->
addr
[1] =
addr2
->addr[1] &&

53 
addr1
->
addr
[2] =
addr2
->addr[2] &&

54 
addr1
->
addr
[3] =
addr2
->addr[3]);

55 
	}
}

58 
	$ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
)

60 
	`SMEMCPY
(
de°
, 
§c
, (
ù_addr
));

65 
	}
}

67 
u8_t


68 
	$ù_addr_ißny
(
ù_addr
 *
addr
)

70 i‡(
addr
 =
NULL
)  1;

71 ((
addr
->addr[0] |áddr->addr[1] |áddr->addr[2] |áddr->addr[3]) == 0);

72 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/mem.c

56 
	~"lwù/›t.h
"

58 #i‡!
MEM_LIBC_MALLOC


60 
	~"lwù/def.h
"

61 
	~"lwù/mem.h
"

62 
	~"lwù/sys.h
"

63 
	~"lwù/°©s.h
"

65 
	~<°rög.h
>

67 #i‡
MEM_USE_POOLS


78 
	$mem_mÆloc
(
mem_size_t
 
size
)

80 
memp_mÆloc_hñ≥r
 *
ñemít
;

81 
memp_t
 
poﬁƒ
;

82 
mem_size_t
 
ªquúed_size
 = 
size
 + (
memp_mÆloc_hñ≥r
);

84 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoolnr++) {

85 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


86 
agaö
:

90 i‡(
ªquúed_size
 <
memp_sizes
[
poﬁƒ
]) {

94 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

95 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

96  
NULL
;

98 
ñemít
 = (
memp_mÆloc_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
);

99 i‡(
ñemít
 =
NULL
) {

102 #i‡
MEM_USE_POOLS_TRY_BIGGER_POOL


104 i‡(
poﬁƒ
 < 
MEMP_POOL_LAST
) {

105 
poﬁƒ
++;

106 
agaö
;

109  
NULL
;

113 
ñemít
->
poﬁƒ
 =Öoolnr;

115 
ñemít
++;

117  
ñemít
;

118 
	}
}

128 
	$mem_‰ì
(*
rmem
)

130 
memp_mÆloc_hñ≥r
 *
hmem
 = (memp_mÆloc_hñ≥r*)
rmem
;

132 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

133 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

136 
hmem
--;

138 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

139 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

140 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

143 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem);

144 
	}
}

154 
	smem
 {

156 
mem_size_t
 
	m√xt
;

158 
mem_size_t
 
	m¥ev
;

160 
u8_t
 
	mu£d
;

166 #i‚de‡
MIN_SIZE


167 
	#MIN_SIZE
 12

	)

170 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

171 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

172 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

175 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

177 
u8_t
 *
	gøm
;

179 
mem
 *
	gøm_íd
;

181 
mem
 *
	gl‰ì
;

184 
sys_£m_t
 
	gmem_£m
;

186 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


188 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

191 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

192 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

193 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

194 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

195 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

196 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

201 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

202 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_¨ch_£m_waô
(
mem_£m
, 0)

	)

203 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_£m_sig«l
(
mem_£m
)

	)

205 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

206 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

207 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

224 
	$∂ug_hﬁes
(
mem
 *mem)

226 
mem
 *
nmem
;

227 
mem
 *
pmem
;

229 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

230 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

231 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

234 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

236 
nmem
 = (
mem
 *)&
øm
[mem->
√xt
];

237 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

239 i‡(
l‰ì
 =
nmem
) {

240 
l‰ì
 = 
mem
;

242 
mem
->
√xt
 = 
nmem
->next;

243 ((
mem
 *)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
u8_t
 *)mem -Ñam;

247 
pmem
 = (
mem
 *)&
øm
[mem->
¥ev
];

248 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

250 i‡(
l‰ì
 =
mem
) {

251 
l‰ì
 = 
pmem
;

253 
pmem
->
√xt
 = 
mem
->next;

254 ((
mem
 *)&
øm
[mem->
√xt
])->
¥ev
 = (
u8_t
 *)
pmem
 -Ñam;

256 
	}
}

262 
	$mem_öô
()

264 
mem
 *mem;

266 
	`LWIP_ASSERT
("Sanity checkálignment",

267 (
SIZEOF_STRUCT_MEM
 & (
MEM_ALIGNMENT
-1)) == 0);

270 
øm
 = 
	`LWIP_MEM_ALIGN
(
øm_hóp
);

272 
mem
 = (mem *)
øm
;

273 
mem
->
√xt
 = 
MEM_SIZE_ALIGNED
;

274 
mem
->
¥ev
 = 0;

275 
mem
->
u£d
 = 0;

277 
øm_íd
 = (
mem
 *)&
øm
[
MEM_SIZE_ALIGNED
];

278 
øm_íd
->
u£d
 = 1;

279 
øm_íd
->
√xt
 = 
MEM_SIZE_ALIGNED
;

280 
øm_íd
->
¥ev
 = 
MEM_SIZE_ALIGNED
;

282 
mem_£m
 = 
	`sys_£m_√w
(1);

285 
l‰ì
 = (
mem
 *)
øm
;

287 
	`MEM_STATS_AVAIL
(
avaû
, 
MEM_SIZE_ALIGNED
);

288 
	}
}

297 
	$mem_‰ì
(*
rmem
)

299 
mem
 *mem;

300 
	`LWIP_MEM_FREE_DECL_PROTECT
();

302 i‡(
rmem
 =
NULL
) {

303 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("mem_free(p == NULL) was called.\n"));

306 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

308 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

309 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

311 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

312 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

313 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_free: illegal memory\n"));

315 
	`SYS_ARCH_PROTECT
(
Àv
);

316 
	`MEM_STATS_INC
(
ûÀgÆ
);

317 
	`SYS_ARCH_UNPROTECT
(
Àv
);

321 
	`LWIP_MEM_FREE_PROTECT
();

323 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

325 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

327 
mem
->
u£d
 = 0;

329 i‡(
mem
 < 
l‰ì
) {

331 
l‰ì
 = 
mem
;

334 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

337 
	`∂ug_hﬁes
(
mem
);

338 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


339 
mem_‰ì_cou¡
 = 1;

341 
	`LWIP_MEM_FREE_UNPROTECT
();

342 
	}
}

357 
	$mem_ªÆloc
(*
rmem
, 
mem_size_t
 
√wsize
)

359 
mem_size_t
 
size
;

360 
mem_size_t
 
±r
, 
±r2
;

361 
mem
 *mem, *
mem2
;

363 
	`LWIP_MEM_FREE_DECL_PROTECT
();

367 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

369 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

371 
√wsize
 = 
MIN_SIZE_ALIGNED
;

374 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

375  
NULL
;

378 
	`LWIP_ASSERT
("mem_ªÆloc:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

379 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

381 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

382 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

383 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_realloc: illegal memory\n"));

385 
	`SYS_ARCH_PROTECT
(
Àv
);

386 
	`MEM_STATS_INC
(
ûÀgÆ
);

387 
	`SYS_ARCH_UNPROTECT
(
Àv
);

388  
rmem
;

391 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

393 
±r
 = (
u8_t
 *)
mem
 - 
øm
;

395 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

396 
	`LWIP_ASSERT
("mem_ªÆlo¯ˇ¿⁄ly shrök mem‹y", 
√wsize
 <
size
);

397 i‡(
√wsize
 > 
size
) {

399  
NULL
;

401 i‡(
√wsize
 =
size
) {

403  
rmem
;

407 
	`LWIP_MEM_FREE_PROTECT
();

409 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

411 
mem2
 = (
mem
 *)&
øm
[mem->
√xt
];

412 if(
mem2
->
u£d
 == 0) {

414 
mem_size_t
 
√xt
;

416 
√xt
 = 
mem2
->next;

418 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

419 i‡(
l‰ì
 =
mem2
) {

420 
l‰ì
 = (
mem
 *)&
øm
[
±r2
];

422 
mem2
 = (
mem
 *)&
øm
[
±r2
];

423 
mem2
->
u£d
 = 0;

425 
mem2
->
√xt
 =Çext;

427 
mem2
->
¥ev
 = 
±r
;

429 
mem
->
√xt
 = 
±r2
;

433 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

434 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

437 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

445 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

446 
mem2
 = (
mem
 *)&
øm
[
±r2
];

447 i‡(
mem2
 < 
l‰ì
) {

448 
l‰ì
 = 
mem2
;

450 
mem2
->
u£d
 = 0;

451 
mem2
->
√xt
 = 
mem
->next;

452 
mem2
->
¥ev
 = 
±r
;

453 
mem
->
√xt
 = 
±r2
;

454 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

455 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

465 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


466 
mem_‰ì_cou¡
 = 1;

468 
	`LWIP_MEM_FREE_UNPROTECT
();

469  
rmem
;

470 
	}
}

482 
	$mem_mÆloc
(
mem_size_t
 
size
)

484 
mem_size_t
 
±r
, 
±r2
;

485 
mem
 *mem, *
mem2
;

486 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


487 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

489 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

491 i‡(
size
 == 0) {

492  
NULL
;

497 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

499 if(
size
 < 
MIN_SIZE_ALIGNED
) {

501 
size
 = 
MIN_SIZE_ALIGNED
;

504 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

505  
NULL
;

509 
	`sys_¨ch_£m_waô
(
mem_£m
, 0);

510 
	`LWIP_MEM_ALLOC_PROTECT
();

511 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


514 
loˇl_mem_‰ì_cou¡
 = 0;

520 
±r
 = (
u8_t
 *)
l‰ì
 - 
øm
;Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

521 
±r
 = ((
mem
 *)&
øm
[±r])->
√xt
) {

522 
mem
 = (mem *)&
øm
[
±r
];

523 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


524 
mem_‰ì_cou¡
 = 0;

525 
	`LWIP_MEM_ALLOC_UNPROTECT
();

527 
	`LWIP_MEM_ALLOC_PROTECT
();

528 i‡(
mem_‰ì_cou¡
 != 0) {

529 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

531 
mem_‰ì_cou¡
 = 0;

534 i‡((!
mem
->
u£d
) &&

535 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

539 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

550 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

552 
mem2
 = (
mem
 *)&
øm
[
±r2
];

553 
mem2
->
u£d
 = 0;

554 
mem2
->
√xt
 = 
mem
->next;

555 
mem2
->
¥ev
 = 
±r
;

557 
mem
->
√xt
 = 
±r2
;

558 
mem
->
u£d
 = 1;

560 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

561 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

563 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

572 
mem
->
u£d
 = 1;

573 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

576 i‡(
mem
 =
l‰ì
) {

578 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

579 
	`LWIP_MEM_ALLOC_UNPROTECT
();

581 
	`LWIP_MEM_ALLOC_PROTECT
();

582 
l‰ì
 = (
mem
 *)&
øm
[l‰ì->
√xt
];

584 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

586 
	`LWIP_MEM_ALLOC_UNPROTECT
();

587 
	`sys_£m_sig«l
(
mem_£m
);

588 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

589 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

590 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

591 ((
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

592 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

593 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

595  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

598 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


600 } 
loˇl_mem_‰ì_cou¡
 != 0);

602 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 2, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

603 
	`MEM_STATS_INC
(
îr
);

604 
	`LWIP_MEM_ALLOC_UNPROTECT
();

605 
	`sys_£m_sig«l
(
mem_£m
);

606  
NULL
;

607 
	}
}

620 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

622 *
p
;

625 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

626 i‡(
p
) {

628 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

630  
p
;

631 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/memp.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/memp.h
"

44 
	~"lwù/pbuf.h
"

45 
	~"lwù/udp.h
"

46 
	~"lwù/øw.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/≠i.h
"

50 
	~"lwù/≠i_msg.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"lwù/ù_‰ag.h
"

57 
	~<°rög.h
>

59 #i‡!
MEMP_MEM_MALLOC


61 
	smemp
 {

62 
memp
 *
	m√xt
;

63 #i‡
MEMP_OVERFLOW_CHECK


64 c⁄° *
	mfûe
;

65 
	mlöe
;

69 #i‡
MEMP_OVERFLOW_CHECK


78 #i‚de‡
MEMP_SANITY_REGION_BEFORE


79 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

81 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

82 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

84 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

86 #i‚de‡
MEMP_SANITY_REGION_AFTER


87 
	#MEMP_SANITY_REGION_AFTER
 16

	)

89 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

90 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

92 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

96 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

97 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

105 
	#MEMP_SIZE
 0

	)

106 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

112 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

116 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

121 #i‡!
MEM_USE_POOLS
 && !
MEMP_MEM_MALLOC


124 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

125 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`LWIP_MEM_ALIGN_SIZE
(size),

	)

126 
	~"lwù/memp_°d.h
"

129 #i‡!
MEMP_MEM_MALLOC


132 c⁄° 
u16_t
 
	gmemp_num
[
MEMP_MAX
] = {

133 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

134 
	~"lwù/memp_°d.h
"

138 #ifde‡
LWIP_DEBUG


139 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

140 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

141 
	~"lwù/memp_°d.h
"

146 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

147 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

148 
	~"lwù/memp_°d.h
"

151 #i‡
MEMP_SANITY_CHECK


156 
	$memp_ßnôy
()

158 
s16_t
 
i
, 
c
;

159 
memp
 *
m
, *
n
;

161 
i
 = 0; i < 
MEMP_MAX
; i++) {

162 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

163 
c
 = 1;

164 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

165 i‡(
n
 =
m
 && --
c
 < 0) {

172 
	}
}

174 #i‡
MEMP_OVERFLOW_CHECK


183 
	$memp_ovîÊow_check_ñemít
(
memp
 *
p
, 
u16_t
 
memp_size
)

185 
u16_t
 
k
;

186 
u8_t
 *
m
;

187 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

188 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

189 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

190 i‡(
m
[
k
] != 0xcd) {

191 
	`LWIP_ASSERT
("detected memp underflow!", 0);

195 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

196 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_size
;

197 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

198 i‡(
m
[
k
] != 0xcd) {

199 
	`LWIP_ASSERT
("detected memp overflow!", 0);

203 
	}
}

211 
	$memp_ovîÊow_check_Æl
()

213 
u16_t
 
i
, 
j
;

214 
memp
 *
p
;

216 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

217 
i
 = 0; i < 
MEMP_MAX
; ++i) {

218 
p
 =Ö;

219 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

220 
	`memp_ovîÊow_check_ñemít
(
p
, 
memp_sizes
[
i
]);

221 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

224 
	}
}

230 
	$memp_ovîÊow_öô
()

232 
u16_t
 
i
, 
j
;

233 
memp
 *
p
;

234 
u8_t
 *
m
;

236 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

237 
i
 = 0; i < 
MEMP_MAX
; ++i) {

238 
p
 =Ö;

239 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

240 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

241 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

242 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

244 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

245 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
];

246 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

248 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
] + 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

251 
	}
}

260 
	$memp_öô
()

262 
memp
 *memp;

263 
u16_t
 
i
, 
j
;

265 
i
 = 0; i < 
MEMP_MAX
; ++i) {

266 
	`MEMP_STATS_AVAIL
(
u£d
, 
i
, 0);

267 
	`MEMP_STATS_AVAIL
(
max
, 
i
, 0);

268 
	`MEMP_STATS_AVAIL
(
îr
, 
i
, 0);

269 
	`MEMP_STATS_AVAIL
(
avaû
, 
i
, 
memp_num
[i]);

272 
memp
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

274 
i
 = 0; i < 
MEMP_MAX
; ++i) {

275 
memp_èb
[
i
] = 
NULL
;

277 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

278 
memp
->
√xt
 = 
memp_èb
[
i
];

279 
memp_èb
[
i
] = 
memp
;

280 
memp
 = (mem∞*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]

281 #i‡
MEMP_OVERFLOW_CHECK


282 + 
MEMP_SANITY_REGION_AFTER_ALIGNED


287 #i‡
MEMP_OVERFLOW_CHECK


288 
	`memp_ovîÊow_öô
();

290 
	`memp_ovîÊow_check_Æl
();

292 
	}
}

306 #i‡!
MEMP_OVERFLOW_CHECK


307 
	$memp_mÆloc
(
memp_t
 
ty≥
)

309 
	$memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
)

312 
memp
 *memp;

313 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

315 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

317 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

318 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

319 
	`memp_ovîÊow_check_Æl
();

322 
memp
 = 
memp_èb
[
ty≥
];

324 i‡(
memp
 !
NULL
) {

325 
memp_èb
[
ty≥
] = 
memp
->
√xt
;

326 #i‡
MEMP_OVERFLOW_CHECK


327 
memp
->
√xt
 = 
NULL
;

328 
memp
->
fûe
 = file;

329 
memp
->
löe
 =Üine;

331 
	`MEMP_STATS_INC_USED
(
u£d
, 
ty≥
);

332 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

333 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

334 
memp
 = (memp*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

336 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 2, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

337 
	`MEMP_STATS_INC
(
îr
, 
ty≥
);

340 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

342  
memp
;

343 
	}
}

352 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
)

354 
memp
 *memp;

355 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

357 i‡(
mem
 =
NULL
) {

360 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

361 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

363 
memp
 = (mem∞*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

365 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

366 #i‡
MEMP_OVERFLOW_CHECK


367 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

368 
	`memp_ovîÊow_check_Æl
();

370 
	`memp_ovîÊow_check_ñemít
(
memp
, 
memp_sizes
[
ty≥
]);

374 
	`MEMP_STATS_DEC
(
u£d
, 
ty≥
);

376 
memp
->
√xt
 = 
memp_èb
[
ty≥
];

377 
memp_èb
[
ty≥
] = 
memp
;

379 #i‡
MEMP_SANITY_CHECK


380 
	`LWIP_ASSERT
("mem∞ßnôy", 
	`memp_ßnôy
());

383 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

384 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/netif.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/t˝.h
"

45 
	~"lwù/¢mp.h
"

46 
	~"lwù/igmp.h
"

47 
	~"√tif/ëh¨p.h
"

48 #i‡
ENABLE_LOOPBACK


49 
	~"lwù/sys.h
"

50 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


51 
	~"lwù/t˝ù.h
"

55 #i‡
LWIP_NETIF_STATUS_CALLBACK


56 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ i‡“->
°©us_ˇŒback
Ë“->°©us_ˇŒback)“); }

	)

58 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ }

	)

61 #i‡
LWIP_NETIF_LINK_CALLBACK


62 
	#NETIF_LINK_CALLBACK
(
n
Ë{ i‡“->
lök_ˇŒback
Ë“->lök_ˇŒback)“); }

	)

64 
	#NETIF_LINK_CALLBACK
(
n
Ë{ }

	)

67 
√tif
 *
	g√tif_li°
;

68 
√tif
 *
	g√tif_deÁu…
;

84 
√tif
 *

85 
	$√tif_add
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

86 
ù_addr
 *
gw
,

87 *
°©e
,

88 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

89 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

91 
u8_t
 
√ti‚um
 = 0;

94 
√tif
->
ù_addr
.
addr
 = 0;

95 
√tif
->
√tmask
.
addr
 = 0;

96 
√tif
->
gw
.
addr
 = 0;

97 
√tif
->
Êags
 = 0;

98 #i‡
LWIP_DHCP


100 
√tif
->
dh˝
 = 
NULL
;

102 #i‡
LWIP_AUTOIP


104 
√tif
->
autoù
 = 
NULL
;

106 #i‡
LWIP_NETIF_STATUS_CALLBACK


107 
√tif
->
°©us_ˇŒback
 = 
NULL
;

109 #i‡
LWIP_NETIF_LINK_CALLBACK


110 
√tif
->
lök_ˇŒback
 = 
NULL
;

112 #i‡
LWIP_IGMP


113 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

115 #i‡
ENABLE_LOOPBACK


116 
√tif
->
lo›_fú°
 = 
NULL
;

117 
√tif
->
lo›_œ°
 = 
NULL
;

121 
√tif
->
°©e
 = state;

122 
√tif
->
num
 = 
√ti‚um
++;

123 
√tif
->
öput
 = input;

124 #i‡
LWIP_NETIF_HWADDRHINT


125 
√tif
->
addr_höt
 = 
NULL
;

127 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


128 
√tif
->
lo›_˙t_cuºít
 = 0;

131 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

134 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

135  
NULL
;

139 
√tif
->
√xt
 = 
√tif_li°
;

140 
√tif_li°
 = 
√tif
;

141 
	`¢mp_öc_iÊi°
();

143 #i‡
LWIP_IGMP


145 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

146 
	`igmp_°¨t
–
√tif
);

150 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

151 
√tif
->
«me
[0],Çetif->name[1]));

152 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

153 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

154 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

155 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

156 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

157 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

158  
√tif
;

159 
	}
}

171 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

172 
ù_addr
 *
gw
)

174 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

175 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

176 
	`√tif_£t_gw
(
√tif
, 
gw
);

177 
	}
}

184 
	$√tif_ªmove
(
√tif
 *Çetif)

186 i‡–
√tif
 =
NULL
 ) ;

188 #i‡
LWIP_IGMP


190 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

191 
	`igmp_°›
–
√tif
);

195 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

198 i‡(
√tif_li°
 =
√tif
) {

199 
√tif_li°
 = 
√tif
->
√xt
;

200 
	`¢mp_dec_iÊi°
();

204 
√tif
 * 
tmpNëif
;

205 
tmpNëif
 = 
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

206 i‡(
tmpNëif
->
√xt
 =
√tif
) {

207 
tmpNëif
->
√xt
 = 
√tif
->next;

208 
	`¢mp_dec_iÊi°
();

212 i‡(
tmpNëif
 =
NULL
)

216 i‡(
√tif_deÁu…
 =
√tif
)

218 
	`√tif_£t_deÁu…
(
NULL
);

219 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

220 
	}
}

228 
√tif
 *

229 
	$√tif_föd
(*
«me
)

231 
√tif
 *netif;

232 
u8_t
 
num
;

234 i‡(
«me
 =
NULL
) {

235  
NULL
;

238 
num
 = 
«me
[2] - '0';

240 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

241 i‡(
num
 =
√tif
->num &&

242 
«me
[0] =
√tif
->name[0] &&

243 
«me
[1] =
√tif
->name[1]) {

244 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

245  
√tif
;

248 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

249  
NULL
;

250 
	}
}

262 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

266 #i‡
LWIP_TCP


267 
t˝_pcb
 *
pcb
;

268 
t˝_pcb_li°í
 *
Õcb
;

271 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0)

274 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("netif_set_ipaddr:Çetifáddress being changed\n"));

275 
pcb
 = 
t˝_a˘ive_pcbs
;

276 
pcb
 !
NULL
) {

278 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

280 
t˝_pcb
 *
√xt
 = 
pcb
->next;

281 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

282 
	`t˝_ab‹t
(
pcb
);

283 
pcb
 = 
√xt
;

285 
pcb
 =Öcb->
√xt
;

288 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

290 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

291 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

294 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

299 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

300 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

302 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

303 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

304 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

306 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

307 
√tif
->
«me
[0],Çetif->name[1],

308 
	`ù4_addr1
(&
√tif
->
ù_addr
),

309 
	`ù4_addr2
(&
√tif
->
ù_addr
),

310 
	`ù4_addr3
(&
√tif
->
ù_addr
),

311 
	`ù4_addr4
(&
√tif
->
ù_addr
)));

312 
	}
}

323 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
)

325 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

326 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

327 
√tif
->
«me
[0],Çetif->name[1],

328 
	`ù4_addr1
(&
√tif
->
gw
),

329 
	`ù4_addr2
(&
√tif
->
gw
),

330 
	`ù4_addr3
(&
√tif
->
gw
),

331 
	`ù4_addr4
(&
√tif
->
gw
)));

332 
	}
}

344 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
)

346 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

348 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

349 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

350 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

351 
√tif
->
«me
[0],Çetif->name[1],

352 
	`ù4_addr1
(&
√tif
->
√tmask
),

353 
	`ù4_addr2
(&
√tif
->
√tmask
),

354 
	`ù4_addr3
(&
√tif
->
√tmask
),

355 
	`ù4_addr4
(&
√tif
->
√tmask
)));

356 
	}
}

365 
	$√tif_£t_deÁu…
(
√tif
 *netif)

367 i‡(
√tif
 =
NULL
)

370 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

375 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

377 
√tif_deÁu…
 = 
√tif
;

378 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

379 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

380 
	}
}

391 
	$√tif_£t_up
(
√tif
 *netif)

393 i‡–!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )) {

394 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

396 #i‡
LWIP_SNMP


397 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

400 
	`NETIF_LINK_CALLBACK
(
√tif
);

401 
	`NETIF_STATUS_CALLBACK
(
√tif
);

403 #i‡
LWIP_ARP


405 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

406 
	`ëh¨p_gøtuôous
(
√tif
);

411 
	}
}

421 
	$√tif_£t_down
(
√tif
 *netif)

423 i‡–
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )

425 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

426 #i‡
LWIP_SNMP


427 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

430 
	`NETIF_LINK_CALLBACK
(
√tif
);

431 
	`NETIF_STATUS_CALLBACK
(
√tif
);

433 
	}
}

438 
u8_t
 
	$√tif_is_up
(
√tif
 *netif)

440  (
√tif
->
Êags
 & 
NETIF_FLAG_UP
)?1:0;

441 
	}
}

443 #i‡
LWIP_NETIF_STATUS_CALLBACK


447 
	$√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif ))

449 i‡–
√tif
 )

450 
√tif
->
°©us_ˇŒback
 = status_callback;

451 
	}
}

454 #i‡
LWIP_NETIF_LINK_CALLBACK


458 
	$√tif_£t_lök_up
(
√tif
 *netif )

460 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

462 #i‡
LWIP_ARP


464 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

465 
	`ëh¨p_gøtuôous
(
√tif
);

469 #i‡
LWIP_IGMP


471 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

472 
	`igmp_ªp‹t_groups
–
√tif
);

476 
	`NETIF_LINK_CALLBACK
(
√tif
);

477 
	}
}

482 
	$√tif_£t_lök_down
(
√tif
 *netif )

484 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

485 
	`NETIF_LINK_CALLBACK
(
√tif
);

486 
	}
}

491 
u8_t
 
	$√tif_is_lök_up
(
√tif
 *netif)

493  (
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) ? 1 : 0;

494 
	}
}

499 
	$√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif ))

501 i‡(
√tif
) {

502 
√tif
->
lök_ˇŒback
 =Üink_callback;

504 
	}
}

507 #i‡
ENABLE_LOOPBACK


522 
îr_t


523 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

524 
ù_addr
 *
ùaddr
)

526 
pbuf
 *
r
;

527 
îr_t
 
îr
;

528 
pbuf
 *
œ°
;

529 #i‡
LWIP_LOOPBACK_MAX_PBUFS


530 
u8_t
 
˛í
 = 0;

532 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

533 
	`LWIP_UNUSED_ARG
(
ùaddr
);

536 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

537 i‡(
r
 =
NULL
) {

538  
ERR_MEM
;

540 #i‡
LWIP_LOOPBACK_MAX_PBUFS


541 
˛í
 = 
	`pbuf_˛í
(
r
);

543 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

544 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

545 
	`pbuf_‰ì
(
r
);

546 
r
 = 
NULL
;

547  
ERR_MEM
;

549 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

553 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

554 
	`pbuf_‰ì
(
r
);

555 
r
 = 
NULL
;

556  
îr
;

563 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

565 
	`SYS_ARCH_PROTECT
(
Àv
);

566 if(
√tif
->
lo›_fú°
 !
NULL
) {

567 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

568 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

569 
√tif
->
lo›_œ°
 = 
œ°
;

571 
√tif
->
lo›_fú°
 = 
r
;

572 
√tif
->
lo›_œ°
 = 
œ°
;

574 
	`SYS_ARCH_UNPROTECT
(
Àv
);

576 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


578 
	`t˝ù_ˇŒback
(((*)(*))(
√tif_pﬁl
), 
√tif
);

581  
ERR_OK
;

582 
	}
}

591 
	$√tif_pﬁl
(
√tif
 *netif)

593 
pbuf
 *
ö
;

594 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

598 
	`SYS_ARCH_PROTECT
(
Àv
);

599 
ö
 = 
√tif
->
lo›_fú°
;

600 if(
ö
 !
NULL
) {

601 
pbuf
 *
ö_íd
 = 
ö
;

602 #i‡
LWIP_LOOPBACK_MAX_PBUFS


603 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

605 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

606 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

607 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

609 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

610 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

611 
ö_íd
 = in_íd->
√xt
;

614 if(
ö_íd
 =
√tif
->
lo›_œ°
) {

616 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

619 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

620 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

623 
ö_íd
->
√xt
 = 
NULL
;

625 
	`SYS_ARCH_UNPROTECT
(
Àv
);

627 if(
ö
 !
NULL
) {

629 if(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

630 
	`pbuf_‰ì
(
ö
);

633 
ö
 = 
NULL
;

636 } 
√tif
->
lo›_fú°
 !
NULL
);

637 
	}
}

639 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


644 
	$√tif_pﬁl_Æl
()

646 
√tif
 *√ti‡
√tif_li°
;

648 
√tif
 !
NULL
) {

649 
	`√tif_pﬁl
(
√tif
);

651 
√tif
 =Çëif->
√xt
;

653 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/pbuf.c

64 
	~"lwù/›t.h
"

66 
	~"lwù/°©s.h
"

67 
	~"lwù/def.h
"

68 
	~"lwù/mem.h
"

69 
	~"lwù/memp.h
"

70 
	~"lwù/pbuf.h
"

71 
	~"lwù/sys.h
"

72 
	~"¨ch/≥rf.h
"

73 #i‡
TCP_QUEUE_OOSEQ


74 
	~"lwù/t˝.h
"

77 
	~<°rög.h
>

79 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

82 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

84 #i‡
TCP_QUEUE_OOSEQ


85 
	#ALLOC_POOL_PBUF
(
p
Ëdÿ{ (pË
	`Æloc_poﬁ_pbuf
(); } 0)

	)

87 
	#ALLOC_POOL_PBUF
(
p
Ëdÿ{ (pË
	`memp_mÆloc
(
MEMP_PBUF_POOL
); } 0)

	)

91 #i‡
TCP_QUEUE_OOSEQ


99 
pbuf
 *

100 
	$Æloc_poﬁ_pbuf
()

102 
t˝_pcb
 *
pcb
;

103 
pbuf
 *
p
;

105 
ªåy
:

106 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

107 i‡(
NULL
 =
p
) {

108 
pcb
=
t˝_a˘ive_pcbs
; 
NULL
 !pcb;Öcb =Öcb->
√xt
) {

109 i‡(
NULL
 !
pcb
->
oo£q
) {

110 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

111 
pcb
->
oo£q
 = 
NULL
;

112 
ªåy
;

116  
p
;

117 
	}
}

151 
pbuf
 *

152 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
)

154 
pbuf
 *
p
, *
q
, *
r
;

155 
u16_t
 
off£t
;

156 
s32_t
 
ªm_Àn
;

157 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

160 
off£t
 = 0;

161 
œyî
) {

162 
PBUF_TRANSPORT
:

164 
off£t
 +
PBUF_TRANSPORT_HLEN
;

166 
PBUF_IP
:

168 
off£t
 +
PBUF_IP_HLEN
;

170 
PBUF_LINK
:

172 
off£t
 +
PBUF_LINK_HLEN
;

174 
PBUF_RAW
:

177 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

178  
NULL
;

181 
ty≥
) {

182 
PBUF_POOL
:

184 
	`ALLOC_POOL_PBUF
(
p
);

185 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

186 i‡(
p
 =
NULL
) {

187  
NULL
;

189 
p
->
ty≥
 =Åype;

190 
p
->
√xt
 = 
NULL
;

193 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

194 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

195 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

197 
p
->
tŸ_Àn
 = 
Àngth
;

199 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

200 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

201 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

202 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

203 
	`LWIP_ASSERT
("PBUF_POOL_BUFSIZE must be biggerÅhan MEM_ALIGNMENT",

204 (
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
)) > 0 );

206 
p
->
ªf
 = 1;

211 
r
 = 
p
;

213 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

215 
ªm_Àn
 > 0) {

216 
	`ALLOC_POOL_PBUF
(
q
);

217 i‡(
q
 =
NULL
) {

219 
	`pbuf_‰ì
(
p
);

221  
NULL
;

223 
q
->
ty≥
 =Åype;

224 
q
->
Êags
 = 0;

225 
q
->
√xt
 = 
NULL
;

227 
r
->
√xt
 = 
q
;

229 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

230 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

232 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

233 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

234 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

235 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

236 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

237 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

238 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

239 
q
->
ªf
 = 1;

241 
ªm_Àn
 -
q
->
Àn
;

243 
r
 = 
q
;

249 
PBUF_RAM
:

251 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

252 i‡(
p
 =
NULL
) {

253  
NULL
;

256 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

257 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

258 
p
->
√xt
 = 
NULL
;

259 
p
->
ty≥
 =Åype;

261 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

262 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

265 
PBUF_ROM
:

267 
PBUF_REF
:

269 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF
);

270 i‡(
p
 =
NULL
) {

271 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_alloc: CouldÇotállocate MEMP_PBUF for PBUF_%s.\n",

272 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

273  
NULL
;

276 
p
->
∑ylﬂd
 = 
NULL
;

277 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

278 
p
->
√xt
 = 
NULL
;

279 
p
->
ty≥
 =Åype;

282 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

283  
NULL
;

286 
p
->
ªf
 = 1;

288 
p
->
Êags
 = 0;

289 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

290  
p
;

291 
	}
}

310 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

312 
pbuf
 *
q
;

313 
u16_t
 
ªm_Àn
;

314 
s32_t
 
grow
;

316 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

317 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

318 
p
->
ty≥
 =
PBUF_ROM
 ||

319 
p
->
ty≥
 =
PBUF_RAM
 ||

320 
p
->
ty≥
 =
PBUF_REF
);

323 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

330 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

333 
ªm_Àn
 = 
√w_Àn
;

334 
q
 = 
p
;

336 
ªm_Àn
 > 
q
->
Àn
) {

338 
ªm_Àn
 -
q
->
Àn
;

340 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

341 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

343 
q
 = q->
√xt
;

344 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

351 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

353 
q
 = 
	`mem_ªÆloc
(q, (
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)q + 
ªm_Àn
);

354 
	`LWIP_ASSERT
("mem_ªÆlo¯givêq =NULL", 
q
 !
NULL
);

357 
q
->
Àn
 = 
ªm_Àn
;

358 
q
->
tŸ_Àn
 = q->
Àn
;

361 i‡(
q
->
√xt
 !
NULL
) {

363 
	`pbuf_‰ì
(
q
->
√xt
);

366 
q
->
√xt
 = 
NULL
;

368 
	}
}

390 
u8_t


391 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

393 
u16_t
 
ty≥
;

394 *
∑ylﬂd
;

395 
u16_t
 
ö¸emít_magnôude
;

397 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

398 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
))

401 i‡(
hódî_size_ö¸emít
 < 0){

402 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

404 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

406 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

411 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

412 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
);

414 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

415 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

419 
ty≥
 = 
p
->type;

421 
∑ylﬂd
 = 
p
->payload;

424 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

426 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

428 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

429 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_header: failedás %p < %p (notÉnough space forÇew header size)\n",

430 (*)
p
->
∑ylﬂd
,

431 (*)(
p
 + 1)));\

433 
p
->
∑ylﬂd
 =Öayload;

438 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

440 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

442 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

451 
	`LWIP_ASSERT
("badÖbufÅype", 0);

455 
p
->
Àn
 +
hódî_size_ö¸emít
;

456 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

458 
	`LWIP_DEBUGF
(
PBUF_DEBUG
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

459 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

462 
	}
}

497 
u8_t


498 
	$pbuf_‰ì
(
pbuf
 *
p
)

500 
u16_t
 
ty≥
;

501 
pbuf
 *
q
;

502 
u8_t
 
cou¡
;

504 i‡(
p
 =
NULL
) {

505 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

507 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_free(p == NULL) was called.\n"));

510 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_‰ì(%p)\n", (*)
p
));

512 
PERF_START
;

514 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

515 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

516 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
);

518 
cou¡
 = 0;

521 
p
 !
NULL
) {

522 
u16_t
 
ªf
;

523 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

527 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

529 
	`LWIP_ASSERT
("pbuf_‰ì:Ö->ª‡> 0", 
p
->
ªf
 > 0);

531 
ªf
 = --(
p
->ref);

532 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

534 i‡(
ªf
 == 0) {

536 
q
 = 
p
->
√xt
;

537 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

538 
ty≥
 = 
p
->type;

540 i‡(
ty≥
 =
PBUF_POOL
) {

541 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
);

543 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

544 
	`memp_‰ì
(
MEMP_PBUF
, 
p
);

547 
	`mem_‰ì
(
p
);

549 
cou¡
++;

551 
p
 = 
q
;

555 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

557 
p
 = 
NULL
;

560 
	`PERF_STOP
("pbuf_free");

562  
cou¡
;

563 
	}
}

572 
u8_t


573 
	$pbuf_˛í
(
pbuf
 *
p
)

575 
u8_t
 
Àn
;

577 
Àn
 = 0;

578 
p
 !
NULL
) {

579 ++
Àn
;

580 
p
 =Ö->
√xt
;

582  
Àn
;

583 
	}
}

592 
	$pbuf_ªf
(
pbuf
 *
p
)

594 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

596 i‡(
p
 !
NULL
) {

597 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

598 ++(
p
->
ªf
);

599 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

601 
	}
}

614 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

616 
pbuf
 *
p
;

618 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

619 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

622 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

624 
p
->
tŸ_Àn
 +
t
->tot_len;

627 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

628 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

630 
p
->
tŸ_Àn
 +
t
->tot_len;

632 
p
->
√xt
 = 
t
;

636 
	}
}

655 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

657 
	`pbuf_ˇt
(
h
, 
t
);

659 
	`pbuf_ªf
(
t
);

660 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_FRESH
 | 2, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

661 
	}
}

671 
pbuf
 *

672 
	$pbuf_dechaö
(
pbuf
 *
p
)

674 
pbuf
 *
q
;

675 
u8_t
 
èû_g⁄e
 = 1;

677 
q
 = 
p
->
√xt
;

679 i‡(
q
 !
NULL
) {

681 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

683 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

685 
p
->
√xt
 = 
NULL
;

687 
p
->
tŸ_Àn
 =Ö->
Àn
;

689 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

690 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
);

691 i‡(
èû_g⁄e
 > 0) {

692 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
,

693 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

698 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

699  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

700 
	}
}

720 
îr_t


721 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

723 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

725 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_copy(%p, %p)\n",

726 (*)
p_to
, (*)
p_‰om
));

729 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

730 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

735 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

737 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

739 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

742 
Àn
 = 
p_to
->À¿- 
off£t_to
;

744 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

745 
off£t_to
 +
Àn
;

746 
off£t_‰om
 +
Àn
;

747 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

748 i‡(
off£t_to
 =
p_to
->
Àn
) {

750 
off£t_to
 = 0;

751 
p_to
 =Ö_to->
√xt
;

753 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

754 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

756 
off£t_‰om
 = 0;

757 
p_‰om
 =Ö_‰om->
√xt
;

760 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

762 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

763 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

765 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

767 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

768 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

770 } 
p_‰om
);

771 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("pbuf_copy:Énd of chainÑeached.\n"));

772  
ERR_OK
;

773 
	}
}

786 
u16_t


787 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

789 
pbuf
 *
p
;

790 
u16_t
 
À·
;

791 
u16_t
 
buf_c›y_Àn
;

792 
u16_t
 
c›õd_tŸÆ
 = 0;

794 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

795 
	`LWIP_ERROR
("pbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

797 
À·
 = 0;

799 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

804 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

805 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

807 
off£t
 -
p
->
Àn
;

810 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

811 i‡(
buf_c›y_Àn
 > 
Àn
)

812 
buf_c›y_Àn
 = 
Àn
;

814 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

815 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

816 
À·
 +
buf_c›y_Àn
;

817 
Àn
 -
buf_c›y_Àn
;

818 
off£t
 = 0;

821  
c›õd_tŸÆ
;

822 
	}
}

834 
îr_t


835 
	$pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
)

837 
pbuf
 *
p
;

838 
u16_t
 
buf_c›y_Àn
;

839 
u16_t
 
tŸÆ_c›y_Àn
 = 
Àn
;

840 
u16_t
 
c›õd_tŸÆ
 = 0;

842 
	`LWIP_ERROR
("pbuf_èke: invÆid buf", (
buf
 !
NULL
),  0;);

843 
	`LWIP_ERROR
("pbuf_èke: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

845 i‡((
buf
 =
NULL
Ë|| (
d©≠å
 =NULLË|| (buf->
tŸ_Àn
 < 
Àn
)) {

846  
ERR_ARG
;

850 
p
 = 
buf
; 
tŸÆ_c›y_Àn
 !0;Ö =Ö->
√xt
) {

851 
	`LWIP_ASSERT
("pbuf_èke: invÆidÖbuf", 
p
 !
NULL
);

852 
buf_c›y_Àn
 = 
tŸÆ_c›y_Àn
;

853 i‡(
buf_c›y_Àn
 > 
p
->
Àn
) {

855 
buf_c›y_Àn
 = 
p
->
Àn
;

858 
	`MEMCPY
(
p
->
∑ylﬂd
, &((*)
d©≠å
)[
c›õd_tŸÆ
], 
buf_c›y_Àn
);

859 
tŸÆ_c›y_Àn
 -
buf_c›y_Àn
;

860 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

862 
	`LWIP_ASSERT
("didÇŸ c›yáŒ d©a", 
tŸÆ_c›y_Àn
 =0 && 
c›õd_tŸÆ
 =
Àn
);

863  
ERR_OK
;

864 
	}
}

878 
pbuf
*

879 
	$pbuf_cﬂÀs˚
(
pbuf
 *
p
, 
pbuf_œyî
 
œyî
)

881 
pbuf
 *
q
;

882 
îr_t
 
îr
;

883 i‡(
p
->
√xt
 =
NULL
) {

884  
p
;

886 
q
 = 
	`pbuf_Æloc
(
œyî
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

887 i‡(
q
 =
NULL
) {

889  
p
;

891 
îr
 = 
	`pbuf_c›y
(
q
, 
p
);

892 
	`LWIP_ASSERT
("pbuf_c›y faûed", 
îr
 =
ERR_OK
);

893 
	`pbuf_‰ì
(
p
);

894  
q
;

895 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/raw.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_RAW


45 
	~"lwù/def.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/ù_addr.h
"

49 
	~"lwù/√tif.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

53 
	~"¨ch/≥rf.h
"

55 
	~<°rög.h
>

58 
øw_pcb
 *
	gøw_pcbs
;

77 
u8_t


78 
	$øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
øw_pcb
 *
pcb
, *
¥ev
;

81 
ù_hdr
 *
ùhdr
;

82 
s16_t
 
¥Ÿo
;

83 
u8_t
 
óãn
 = 0;

85 
	`LWIP_UNUSED_ARG
(
öp
);

87 
ùhdr
 = 
p
->
∑ylﬂd
;

88 
¥Ÿo
 = 
	`IPH_PROTO
(
ùhdr
);

90 
¥ev
 = 
NULL
;

91 
pcb
 = 
øw_pcbs
;

94 (
óãn
 =0Ë&& (
pcb
 !
NULL
)) {

95 i‡(
pcb
->
¥Ÿocﬁ
 =
¥Ÿo
) {

96 #i‡
IP_SOF_BROADCAST_RECV


98 i‡((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë|| !
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
))

102 i‡(
pcb
->
ªcv
 !
NULL
) {

104 i‡(
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
)) != 0) {

106 
p
 = 
NULL
;

107 
óãn
 = 1;

108 i‡(
¥ev
 !
NULL
) {

111 
¥ev
->
√xt
 = 
pcb
->next;

112 
pcb
->
√xt
 = 
øw_pcbs
;

113 
øw_pcbs
 = 
pcb
;

121 
¥ev
 = 
pcb
;

122 
pcb
 =Öcb->
√xt
;

124  
óãn
;

125 
	}
}

141 
îr_t


142 
	$øw_böd
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

144 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

145  
ERR_OK
;

146 
	}
}

161 
îr_t


162 
	$øw_c⁄√˘
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

164 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

165  
ERR_OK
;

166 
	}
}

183 
	$øw_ªcv
(
øw_pcb
 *
pcb
,

184 
	$u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
upcb
, 
pbuf
 *
p
,

185 
ù_addr
 *
addr
),

186 *
ªcv_¨g
)

189 
pcb
->
ªcv
 =Ñecv;

190 
pcb
->
ªcv_¨g
 =Ñecv_arg;

191 
	}
}

205 
îr_t


206 
	$øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

208 
îr_t
 
îr
;

209 
√tif
 *netif;

210 
ù_addr
 *
§c_ù
;

211 
pbuf
 *
q
;

213 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_sendto\n"));

216 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

218 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 0, 
PBUF_RAM
);

220 i‡(
q
 =
NULL
) {

221 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("raw_sendto: couldÇotállocate header\n"));

222  
ERR_MEM
;

225 
	`pbuf_chaö
(
q
, 
p
);

227 
	`LWIP_DEBUGF
(
RAW_DEBUG
, ("øw_£ndto:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

230 
q
 = 
p
;

231 if(
	`pbuf_hódî
(
q
, -
IP_HLEN
)) {

232 
	`LWIP_ASSERT
("Can'tÑestore header we justÑemoved!", 0);

233  
ERR_MEM
;

237 i‡((
√tif
 = 
	`ù_rouã
(
ùaddr
)Ë=
NULL
) {

238 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: NÿrouãÅÿ0x%"
X32_F
"\n", 
ùaddr
->
addr
));

240 i‡(
q
 !
p
) {

241 
	`pbuf_‰ì
(
q
);

243  
ERR_RTE
;

246 #i‡
IP_SOF_BROADCAST


248 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ) {

249 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

251 i‡(
q
 !
p
) {

252 
	`pbuf_‰ì
(
q
);

254  
ERR_VAL
;

258 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

260 
§c_ù
 = &(
√tif
->
ù_addr
);

263 
§c_ù
 = &(
pcb
->
loˇl_ù
);

266 #i‡
LWIP_NETIF_HWADDRHINT


267 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

269 
îr
 = 
	`ù_ouçut_if
 (
q
, 
§c_ù
, 
ùaddr
, 
pcb
->
âl
,Öcb->
tos
,Öcb->
¥Ÿocﬁ
, 
√tif
);

270 #i‡
LWIP_NETIF_HWADDRHINT


271 
√tif
->
addr_höt
 = 
NULL
;

275 i‡(
q
 !
p
) {

277 
	`pbuf_‰ì
(
q
);

279  
îr
;

280 
	}
}

289 
îr_t


290 
	$øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
)

292  
	`øw_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
);

293 
	}
}

304 
	$øw_ªmove
(
øw_pcb
 *
pcb
)

306 
øw_pcb
 *
pcb2
;

308 i‡(
øw_pcbs
 =
pcb
) {

310 
øw_pcbs
 =Ñaw_pcbs->
√xt
;

313 
pcb2
 = 
øw_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

315 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

317 
pcb2
->
√xt
 = 
pcb
->next;

321 
	`memp_‰ì
(
MEMP_RAW_PCB
, 
pcb
);

322 
	}
}

334 
øw_pcb
 *

335 
	$øw_√w
(
u8_t
 
¥Ÿo
) {

336 
øw_pcb
 *
pcb
;

338 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_new\n"));

340 
pcb
 = 
	`memp_mÆloc
(
MEMP_RAW_PCB
);

342 i‡(
pcb
 !
NULL
) {

344 
	`mem£t
(
pcb
, 0, (
øw_pcb
));

345 
pcb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

346 
pcb
->
âl
 = 
RAW_TTL
;

347 
pcb
->
√xt
 = 
øw_pcbs
;

348 
øw_pcbs
 = 
pcb
;

350  
pcb
;

351 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/asn1_dec.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

51 
îr_t


52 
	$¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
)

54 
u16_t
 
∂í
, 
ba£
;

55 
u8_t
 *
msg_±r
;

57 
∂í
 = 0;

58 
p
 !
NULL
)

60 
ba£
 = 
∂í
;

61 
∂í
 +
p
->
Àn
;

62 i‡(
ofs
 < 
∂í
)

64 
msg_±r
 = 
p
->
∑ylﬂd
;

65 
msg_±r
 +
ofs
 - 
ba£
;

66 *
ty≥
 = *
msg_±r
;

67  
ERR_OK
;

69 
p
 =Ö->
√xt
;

72  
ERR_ARG
;

73 
	}
}

84 
îr_t


85 
	$¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
)

87 
u16_t
 
∂í
, 
ba£
;

88 
u8_t
 *
msg_±r
;

90 
∂í
 = 0;

91 
p
 !
NULL
)

93 
ba£
 = 
∂í
;

94 
∂í
 +
p
->
Àn
;

95 i‡(
ofs
 < 
∂í
)

97 
msg_±r
 = 
p
->
∑ylﬂd
;

98 
msg_±r
 +
ofs
 - 
ba£
;

100 i‡(*
msg_±r
 < 0x80)

103 *
o˘ës_u£d
 = 1;

104 *
Àngth
 = *
msg_±r
;

105  
ERR_OK
;

107 i‡(*
msg_±r
 == 0x80)

110 
u8_t
 
zîos
;

111 
u8_t
 
i
;

113 *
Àngth
 = 0;

114 
zîos
 = 0;

115 
zîos
 != 2)

117 
i
 = 2;

118 
i
 > 0)

120 
i
--;

121 (*
Àngth
) += 1;

122 
ofs
 += 1;

123 i‡(
ofs
 >
∂í
)

126 
p
 =Ö->
√xt
;

127 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

128 
msg_±r
 = 
p
->
∑ylﬂd
;

129 
∂í
 +
p
->
Àn
;

134 
msg_±r
++;

136 i‡(*
msg_±r
 == 0)

138 
zîos
++;

139 i‡(
zîos
 == 2)

142 
i
 = 0;

147 
zîos
 = 0;

151 *
o˘ës_u£d
 = 1;

152  
ERR_OK
;

154 i‡(*
msg_±r
 == 0x81)

157 
ofs
 += 1;

158 i‡(
ofs
 >
∂í
)

161 
p
 =Ö->
√xt
;

162 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

163 
msg_±r
 = 
p
->
∑ylﬂd
;

168 
msg_±r
++;

170 *
Àngth
 = *
msg_±r
;

171 *
o˘ës_u£d
 = 2;

172  
ERR_OK
;

174 i‡(*
msg_±r
 == 0x82)

176 
u8_t
 
i
;

179 
i
 = 2;

180 
i
 > 0)

182 
i
--;

183 
ofs
 += 1;

184 i‡(
ofs
 >
∂í
)

187 
p
 =Ö->
√xt
;

188 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

189 
msg_±r
 = 
p
->
∑ylﬂd
;

190 
∂í
 +
p
->
Àn
;

195 
msg_±r
++;

197 i‡(
i
 == 0)

200 *
Àngth
 |*
msg_±r
;

205 *
Àngth
 = (*
msg_±r
) << 8;

208 *
o˘ës_u£d
 = 3;

209  
ERR_OK
;

215 *
o˘ës_u£d
 = 1 + ((*
msg_±r
) & 0x7f);

216  
ERR_ARG
;

219 
p
 =Ö->
√xt
;

223  
ERR_ARG
;

224 
	}
}

239 
îr_t


240 
	$¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
)

242 
u16_t
 
∂í
, 
ba£
;

243 
u8_t
 *
msg_±r
;

245 
∂í
 = 0;

246 
p
 !
NULL
)

248 
ba£
 = 
∂í
;

249 
∂í
 +
p
->
Àn
;

250 i‡(
ofs
 < 
∂í
)

252 
msg_±r
 = 
p
->
∑ylﬂd
;

253 
msg_±r
 +
ofs
 - 
ba£
;

254 i‡((
Àn
 > 0) && (len < 6))

257 *
vÆue
 = 0;

258 i‡(*
msg_±r
 & 0x80)

261  
ERR_ARG
;

266 i‡((
Àn
 > 1Ë&& (*
msg_±r
 == 0))

269 
Àn
--;

270 
ofs
 += 1;

271 i‡(
ofs
 >
∂í
)

274 
p
 =Ö->
√xt
;

275 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

276 
msg_±r
 = 
p
->
∑ylﬂd
;

277 
∂í
 +
p
->
Àn
;

282 
msg_±r
++;

287 
Àn
 > 1)

289 
Àn
--;

290 *
vÆue
 |*
msg_±r
;

291 *
vÆue
 <<= 8;

292 
ofs
 += 1;

293 i‡(
ofs
 >
∂í
)

296 
p
 =Ö->
√xt
;

297 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

298 
msg_±r
 = 
p
->
∑ylﬂd
;

299 
∂í
 +
p
->
Àn
;

304 
msg_±r
++;

307 *
vÆue
 |*
msg_±r
;

308  
ERR_OK
;

312  
ERR_ARG
;

315 
p
 =Ö->
√xt
;

318  
ERR_ARG
;

319 
	}
}

332 
îr_t


333 
	$¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
)

335 
u16_t
 
∂í
, 
ba£
;

336 
u8_t
 *
msg_±r
;

337 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


338 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
;

340 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


341 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
 + (
s32_t
) - 1;

343 
u8_t
 
sign
;

345 
∂í
 = 0;

346 
p
 !
NULL
)

348 
ba£
 = 
∂í
;

349 
∂í
 +
p
->
Àn
;

350 i‡(
ofs
 < 
∂í
)

352 
msg_±r
 = 
p
->
∑ylﬂd
;

353 
msg_±r
 +
ofs
 - 
ba£
;

354 i‡((
Àn
 > 0) && (len < 5))

356 i‡(*
msg_±r
 & 0x80)

359 *
vÆue
 = -1;

360 
sign
 = 1;

365 *
vÆue
 = 0;

366 
sign
 = 0;

369 
Àn
 > 1)

371 
Àn
--;

372 i‡(
sign
)

374 *
lsb_±r
 &*
msg_±r
;

375 *
vÆue
 <<= 8;

376 *
lsb_±r
 |= 255;

380 *
lsb_±r
 |*
msg_±r
;

381 *
vÆue
 <<= 8;

383 
ofs
 += 1;

384 i‡(
ofs
 >
∂í
)

387 
p
 =Ö->
√xt
;

388 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

389 
msg_±r
 = 
p
->
∑ylﬂd
;

390 
∂í
 +
p
->
Àn
;

395 
msg_±r
++;

398 i‡(
sign
)

400 *
lsb_±r
 &*
msg_±r
;

404 *
lsb_±r
 |*
msg_±r
;

406  
ERR_OK
;

410  
ERR_ARG
;

413 
p
 =Ö->
√xt
;

416  
ERR_ARG
;

417 
	}
}

428 
îr_t


429 
	$¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
)

431 
u16_t
 
∂í
, 
ba£
;

432 
u8_t
 *
msg_±r
;

433 
s32_t
 *
oid_±r
;

435 
∂í
 = 0;

436 
p
 !
NULL
)

438 
ba£
 = 
∂í
;

439 
∂í
 +
p
->
Àn
;

440 i‡(
ofs
 < 
∂í
)

442 
msg_±r
 = 
p
->
∑ylﬂd
;

443 
msg_±r
 +
ofs
 - 
ba£
;

445 
oid
->
Àn
 = 0;

446 
oid_±r
 = &
oid
->
id
[0];

447 i‡(
Àn
 > 0)

450 i‡(*
msg_±r
 == 0x2B)

453 *
oid_±r
 = 1;

454 
oid_±r
++;

455 *
oid_±r
 = 3;

456 
oid_±r
++;

458 i‡(*
msg_±r
 < 40)

460 *
oid_±r
 = 0;

461 
oid_±r
++;

462 *
oid_±r
 = *
msg_±r
;

463 
oid_±r
++;

465 i‡(*
msg_±r
 < 80)

467 *
oid_±r
 = 1;

468 
oid_±r
++;

469 *
oid_±r
 = (*
msg_±r
) - 40;

470 
oid_±r
++;

474 *
oid_±r
 = 2;

475 
oid_±r
++;

476 *
oid_±r
 = (*
msg_±r
) - 80;

477 
oid_±r
++;

479 
oid
->
Àn
 = 2;

485  
ERR_OK
;

487 
Àn
--;

488 i‡(
Àn
 > 0)

490 
ofs
 += 1;

491 i‡(
ofs
 >
∂í
)

494 
p
 =Ö->
√xt
;

495 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

496 
msg_±r
 = 
p
->
∑ylﬂd
;

497 
∂í
 +
p
->
Àn
;

502 
msg_±r
++;

505 (
Àn
 > 0Ë&& (
oid
->À¿< 
LWIP_SNMP_OBJ_ID_LEN
))

508 i‡(*
msg_±r
 & 0x80)

510 
s32_t
 
sub_id
 = 0;

512 (*
msg_±r
 & 0x80Ë&& (
Àn
 > 1))

514 
Àn
--;

515 
sub_id
 = (sub_id << 7Ë+ (*
msg_±r
 & ~0x80);

516 
ofs
 += 1;

517 i‡(
ofs
 >
∂í
)

520 
p
 =Ö->
√xt
;

521 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

522 
msg_±r
 = 
p
->
∑ylﬂd
;

523 
∂í
 +
p
->
Àn
;

528 
msg_±r
++;

531 i‡(!(*
msg_±r
 & 0x80Ë&& (
Àn
 > 0))

534 
Àn
--;

535 
sub_id
 = (sub_id << 7Ë+ *
msg_±r
;

536 *
oid_±r
 = 
sub_id
;

542 
Àn
--;

543 *
oid_±r
 = *
msg_±r
;

545 i‡(
Àn
 > 0)

548 
ofs
 += 1;

549 i‡(
ofs
 >
∂í
)

552 
p
 =Ö->
√xt
;

553 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

554 
msg_±r
 = 
p
->
∑ylﬂd
;

555 
∂í
 +
p
->
Àn
;

560 
msg_±r
++;

563 
oid_±r
++;

564 
oid
->
Àn
++;

566 i‡(
Àn
 == 0)

569  
ERR_OK
;

574  
ERR_ARG
;

578 
p
 =Ö->
√xt
;

581  
ERR_ARG
;

582 
	}
}

595 
îr_t


596 
	$¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

598 
u16_t
 
∂í
, 
ba£
;

599 
u8_t
 *
msg_±r
;

601 i‡(
Àn
 > 0)

603 
∂í
 = 0;

604 
p
 !
NULL
)

606 
ba£
 = 
∂í
;

607 
∂í
 +
p
->
Àn
;

608 i‡(
ofs
 < 
∂í
)

610 
msg_±r
 = 
p
->
∑ylﬂd
;

611 
msg_±r
 +
ofs
 - 
ba£
;

612 i‡(
øw_Àn
 >
Àn
)

614 
Àn
 > 1)

617 
Àn
--;

618 *
øw
 = *
msg_±r
;

619 
øw
++;

620 
ofs
 += 1;

621 i‡(
ofs
 >
∂í
)

624 
p
 =Ö->
√xt
;

625 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

626 
msg_±r
 = 
p
->
∑ylﬂd
;

627 
∂í
 +
p
->
Àn
;

632 
msg_±r
++;

636 *
øw
 = *
msg_±r
;

637  
ERR_OK
;

642  
ERR_ARG
;

645 
p
 =Ö->
√xt
;

648  
ERR_ARG
;

653  
ERR_OK
;

655 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/asn1_enc.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

50 
	$¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
)

52 i‡(
Àngth
 < 0x80U)

54 *
o˘ës_√eded
 = 1;

56 i‡(
Àngth
 < 0x100U)

58 *
o˘ës_√eded
 = 2;

62 *
o˘ës_√eded
 = 3;

64 
	}
}

77 
	$¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

79 i‡(
vÆue
 < 0x80UL)

81 *
o˘ës_√eded
 = 1;

83 i‡(
vÆue
 < 0x8000UL)

85 *
o˘ës_√eded
 = 2;

87 i‡(
vÆue
 < 0x800000UL)

89 *
o˘ës_√eded
 = 3;

91 i‡(
vÆue
 < 0x80000000UL)

93 *
o˘ës_√eded
 = 4;

97 *
o˘ës_√eded
 = 5;

99 
	}
}

110 
	$¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

112 i‡(
vÆue
 < 0)

114 
vÆue
 = ~value;

116 i‡(
vÆue
 < 0x80L)

118 *
o˘ës_√eded
 = 1;

120 i‡(
vÆue
 < 0x8000L)

122 *
o˘ës_√eded
 = 2;

124 i‡(
vÆue
 < 0x800000L)

126 *
o˘ës_√eded
 = 3;

130 *
o˘ës_√eded
 = 4;

132 
	}
}

142 
	$¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
)

144 
s32_t
 
sub_id
;

145 
u8_t
 
˙t
;

147 
˙t
 = 0;

148 i‡(
idít_Àn
 > 1)

151 
˙t
++;

152 
idít_Àn
 -= 2;

153 
idít
 += 2;

155 
idít_Àn
 > 0)

157 
idít_Àn
--;

158 
sub_id
 = *
idít
;

160 
sub_id
 >>= 7;

161 
˙t
++;

162 
sub_id
 > 0)

164 
sub_id
 >>= 7;

165 
˙t
++;

167 
idít
++;

169 *
o˘ës_√eded
 = 
˙t
;

170 
	}
}

180 
îr_t


181 
	$¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
)

183 
u16_t
 
∂í
, 
ba£
;

184 
u8_t
 *
msg_±r
;

186 
∂í
 = 0;

187 
p
 !
NULL
)

189 
ba£
 = 
∂í
;

190 
∂í
 +
p
->
Àn
;

191 i‡(
ofs
 < 
∂í
)

193 
msg_±r
 = 
p
->
∑ylﬂd
;

194 
msg_±r
 +
ofs
 - 
ba£
;

195 *
msg_±r
 = 
ty≥
;

196  
ERR_OK
;

198 
p
 =Ö->
√xt
;

201  
ERR_ARG
;

202 
	}
}

212 
îr_t


213 
	$¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
)

215 
u16_t
 
∂í
, 
ba£
;

216 
u8_t
 *
msg_±r
;

218 
∂í
 = 0;

219 
p
 !
NULL
)

221 
ba£
 = 
∂í
;

222 
∂í
 +
p
->
Àn
;

223 i‡(
ofs
 < 
∂í
)

225 
msg_±r
 = 
p
->
∑ylﬂd
;

226 
msg_±r
 +
ofs
 - 
ba£
;

228 i‡(
Àngth
 < 0x80)

230 *
msg_±r
 = 
Àngth
;

231  
ERR_OK
;

233 i‡(
Àngth
 < 0x100)

235 *
msg_±r
 = 0x81;

236 
ofs
 += 1;

237 i‡(
ofs
 >
∂í
)

240 
p
 =Ö->
√xt
;

241 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

242 
msg_±r
 = 
p
->
∑ylﬂd
;

247 
msg_±r
++;

249 *
msg_±r
 = 
Àngth
;

250  
ERR_OK
;

254 
u8_t
 
i
;

257 *
msg_±r
 = 0x82;

258 
i
 = 2;

259 
i
 > 0)

261 
i
--;

262 
ofs
 += 1;

263 i‡(
ofs
 >
∂í
)

266 
p
 =Ö->
√xt
;

267 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

268 
msg_±r
 = 
p
->
∑ylﬂd
;

269 
∂í
 +
p
->
Àn
;

274 
msg_±r
++;

276 i‡(
i
 == 0)

279 *
msg_±r
 = 
Àngth
;

284 *
msg_±r
 = 
Àngth
 >> 8;

287  
ERR_OK
;

290 
p
 =Ö->
√xt
;

293  
ERR_ARG
;

294 
	}
}

307 
îr_t


308 
	$¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
)

310 
u16_t
 
∂í
, 
ba£
;

311 
u8_t
 *
msg_±r
;

313 
∂í
 = 0;

314 
p
 !
NULL
)

316 
ba£
 = 
∂í
;

317 
∂í
 +
p
->
Àn
;

318 i‡(
ofs
 < 
∂í
)

320 
msg_±r
 = 
p
->
∑ylﬂd
;

321 
msg_±r
 +
ofs
 - 
ba£
;

323 i‡(
o˘ës_√eded
 == 5)

326 
o˘ës_√eded
--;

327 *
msg_±r
 = 0x00;

328 
ofs
 += 1;

329 i‡(
ofs
 >
∂í
)

332 
p
 =Ö->
√xt
;

333 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

334 
msg_±r
 = 
p
->
∑ylﬂd
;

335 
∂í
 +
p
->
Àn
;

340 
msg_±r
++;

343 
o˘ës_√eded
 > 1)

345 
o˘ës_√eded
--;

346 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

347 
ofs
 += 1;

348 i‡(
ofs
 >
∂í
)

351 
p
 =Ö->
√xt
;

352 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

353 
msg_±r
 = 
p
->
∑ylﬂd
;

354 
∂í
 +
p
->
Àn
;

359 
msg_±r
++;

363 *
msg_±r
 = 
vÆue
;

364  
ERR_OK
;

366 
p
 =Ö->
√xt
;

369  
ERR_ARG
;

370 
	}
}

383 
îr_t


384 
	$¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
)

386 
u16_t
 
∂í
, 
ba£
;

387 
u8_t
 *
msg_±r
;

389 
∂í
 = 0;

390 
p
 !
NULL
)

392 
ba£
 = 
∂í
;

393 
∂í
 +
p
->
Àn
;

394 i‡(
ofs
 < 
∂í
)

396 
msg_±r
 = 
p
->
∑ylﬂd
;

397 
msg_±r
 +
ofs
 - 
ba£
;

399 
o˘ës_√eded
 > 1)

401 
o˘ës_√eded
--;

402 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

403 
ofs
 += 1;

404 i‡(
ofs
 >
∂í
)

407 
p
 =Ö->
√xt
;

408 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

409 
msg_±r
 = 
p
->
∑ylﬂd
;

410 
∂í
 +
p
->
Àn
;

415 
msg_±r
++;

419 *
msg_±r
 = 
vÆue
;

420  
ERR_OK
;

422 
p
 =Ö->
√xt
;

425  
ERR_ARG
;

426 
	}
}

437 
îr_t


438 
	$¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

440 
u16_t
 
∂í
, 
ba£
;

441 
u8_t
 *
msg_±r
;

443 
∂í
 = 0;

444 
p
 !
NULL
)

446 
ba£
 = 
∂í
;

447 
∂í
 +
p
->
Àn
;

448 i‡(
ofs
 < 
∂í
)

450 
msg_±r
 = 
p
->
∑ylﬂd
;

451 
msg_±r
 +
ofs
 - 
ba£
;

453 i‡(
idít_Àn
 > 1)

455 i‡((
idít
[0] == 1) && (ident[1] == 3))

458 *
msg_±r
 = 0x2b;

463 *
msg_±r
 = (
idít
[0] * 40) + ident[1];

465 
ofs
 += 1;

466 i‡(
ofs
 >
∂í
)

469 
p
 =Ö->
√xt
;

470 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

471 
msg_±r
 = 
p
->
∑ylﬂd
;

472 
∂í
 +
p
->
Àn
;

477 
msg_±r
++;

479 
idít_Àn
 -= 2;

480 
idít
 += 2;

486  
ERR_ARG
;

488 
idít_Àn
 > 0)

490 
s32_t
 
sub_id
;

491 
u8_t
 
shi·
, 
èû
;

493 
idít_Àn
--;

494 
sub_id
 = *
idít
;

495 
èû
 = 0;

496 
shi·
 = 28;

497 
shi·
 > 0)

499 
u8_t
 
code
;

501 
code
 = 
sub_id
 >> 
shi·
;

502 i‡((
code
 !0Ë|| (
èû
 != 0))

504 
èû
 = 1;

505 *
msg_±r
 = 
code
 | 0x80;

506 
ofs
 += 1;

507 i‡(
ofs
 >
∂í
)

510 
p
 =Ö->
√xt
;

511 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

512 
msg_±r
 = 
p
->
∑ylﬂd
;

513 
∂í
 +
p
->
Àn
;

518 
msg_±r
++;

521 
shi·
 -= 7;

523 *
msg_±r
 = (
u8_t
)
sub_id
 & 0x7F;

524 i‡(
idít_Àn
 > 0)

526 
ofs
 += 1;

527 i‡(
ofs
 >
∂í
)

530 
p
 =Ö->
√xt
;

531 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

532 
msg_±r
 = 
p
->
∑ylﬂd
;

533 
∂í
 +
p
->
Àn
;

538 
msg_±r
++;

542 
idít
++;

544  
ERR_OK
;

546 
p
 =Ö->
√xt
;

549  
ERR_ARG
;

550 
	}
}

561 
îr_t


562 
	$¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
)

564 
u16_t
 
∂í
, 
ba£
;

565 
u8_t
 *
msg_±r
;

567 
∂í
 = 0;

568 
p
 !
NULL
)

570 
ba£
 = 
∂í
;

571 
∂í
 +
p
->
Àn
;

572 i‡(
ofs
 < 
∂í
)

574 
msg_±r
 = 
p
->
∑ylﬂd
;

575 
msg_±r
 +
ofs
 - 
ba£
;

577 
øw_Àn
 > 1)

580 
øw_Àn
--;

581 *
msg_±r
 = *
øw
;

582 
øw
++;

583 
ofs
 += 1;

584 i‡(
ofs
 >
∂í
)

587 
p
 =Ö->
√xt
;

588 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

589 
msg_±r
 = 
p
->
∑ylﬂd
;

590 
∂í
 +
p
->
Àn
;

595 
msg_±r
++;

598 i‡(
øw_Àn
 > 0)

601 *
msg_±r
 = *
øw
;

603  
ERR_OK
;

605 
p
 =Ö->
√xt
;

608  
ERR_ARG
;

609 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/mib2.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/ù.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/t˝.h
"

47 
	~"lwù/udp.h
"

48 
	~"lwù/¢mp_a¢1.h
"

49 
	~"lwù/¢mp_°ru˘s.h
"

50 
	~"√tif/ëh¨p.h
"

65 
	#SNMP_ENTERPRISE_ID
 26381

	)

66 
	#SNMP_SYSOBJID_LEN
 7

	)

67 
	#SNMP_SYSOBJID
 {1, 3, 6, 1, 4, 1, 
SNMP_ENTERPRISE_ID
}

	)

69 #i‚de‡
SNMP_SYSSERVICES


70 
	#SNMP_SYSSERVICES
 ((1 << 6Ë| (1 << 3Ë| ((
IP_FORWARD
Ë<< 2))

	)

73 #i‚de‡
SNMP_GET_SYSUPTIME


74 
	#SNMP_GET_SYSUPTIME
(
sysu±ime
)

	)

77 
sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

78 
sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

79 
u8_t
 
sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

80 
sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

81 
öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

82 
öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

83 
i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

84 
i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

85 #i‡!
SNMP_SAFE_REQUESTS


86 
u8_t
 
i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

87 
i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

89 
©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

90 
©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

91 
ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

92 
ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

93 
u8_t
 
ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

94 
ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

95 
ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

96 
ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

97 
ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

98 
ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

99 
ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

100 
icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

101 
icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

102 #i‡
LWIP_TCP


103 
t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

104 
t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

105 #ifde‡
THIS_SEEMS_UNUSED


106 
t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

107 
t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 
udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

111 
udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 
ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

113 
ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

115 
¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 
u8_t
 
¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

117 
¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

121 c⁄° 
mib_sˇœr_node
 
	g¢mp_sˇœr
 = {

122 &
¢mp_gë_obje˘_def
,

123 &
¢mp_gë_vÆue
,

124 &
¢mp_£t_ã°
,

125 &
¢mp_£t_vÆue
,

126 
MIB_NODE_SC
,

129 c⁄° 
s32_t
 
	g¢mp_ids
[28] = {

133 
mib_node
* c⁄° 
	g¢mp_nodes
[28] = {

134 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

135 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

136 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

137 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

138 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

139 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

140 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

141 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

142 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

143 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

144 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

145 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

146 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

147 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar

149 c⁄° 
mib_¨øy_node
 
	g¢mp
 = {

150 &
nﬁófs_gë_obje˘_def
,

151 &
nﬁófs_gë_vÆue
,

152 &
nﬁófs_£t_ã°
,

153 &
nﬁófs_£t_vÆue
,

154 
MIB_NODE_AR
,

156 
¢mp_ids
,

157 
¢mp_nodes


166 
mib_li°_roŸnode
 
	gudp_roŸ
 = {

167 &
nﬁófs_gë_obje˘_def
,

168 &
nﬁófs_gë_vÆue
,

169 &
nﬁófs_£t_ã°
,

170 &
nﬁófs_£t_vÆue
,

171 
MIB_NODE_LR
,

173 
NULL
,

174 
NULL
,

177 c⁄° 
s32_t
 
	gud≥¡ry_ids
[2] = { 1, 2 };

178 
mib_node
* c⁄° 
	gud≥¡ry_nodes
[2] = {

179 (
mib_node
* c⁄°)&
udp_roŸ
, (mib_node* const)&udp_root,

181 c⁄° 
mib_¨øy_node
 
	gud≥¡ry
 = {

182 &
nﬁófs_gë_obje˘_def
,

183 &
nﬁófs_gë_vÆue
,

184 &
nﬁófs_£t_ã°
,

185 &
nﬁófs_£t_vÆue
,

186 
MIB_NODE_AR
,

188 
ud≥¡ry_ids
,

189 
ud≥¡ry_nodes


192 
s32_t
 
	gud±abÀ_id
 = 1;

193 
mib_node
* 
	gud±abÀ_node
 = (mib_node* c⁄°)&
ud≥¡ry
;

194 
mib_øm_¨øy_node
 
	gud±abÀ
 = {

195 &
nﬁófs_gë_obje˘_def
,

196 &
nﬁófs_gë_vÆue
,

197 &
nﬁófs_£t_ã°
,

198 &
nﬁófs_£t_vÆue
,

199 
MIB_NODE_RA
,

201 &
ud±abÀ_id
,

202 &
ud±abÀ_node


205 c⁄° 
mib_sˇœr_node
 
	gudp_sˇœr
 = {

206 &
udp_gë_obje˘_def
,

207 &
udp_gë_vÆue
,

208 &
nﬁófs_£t_ã°
,

209 &
nﬁófs_£t_vÆue
,

210 
MIB_NODE_SC
,

213 c⁄° 
s32_t
 
	gudp_ids
[5] = { 1, 2, 3, 4, 5 };

214 
mib_node
* c⁄° 
	gudp_nodes
[5] = {

215 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

216 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

217 (
mib_node
* c⁄°)&
ud±abÀ


219 c⁄° 
mib_¨øy_node
 
	gudp
 = {

220 &
nﬁófs_gë_obje˘_def
,

221 &
nﬁófs_gë_vÆue
,

222 &
nﬁófs_£t_ã°
,

223 &
nﬁófs_£t_vÆue
,

224 
MIB_NODE_AR
,

226 
udp_ids
,

227 
udp_nodes


231 #i‡
LWIP_TCP


234 
mib_li°_roŸnode
 
	gt˝c⁄¡ªe_roŸ
 = {

235 &
nﬁófs_gë_obje˘_def
,

236 &
nﬁófs_gë_vÆue
,

237 &
nﬁófs_£t_ã°
,

238 &
nﬁófs_£t_vÆue
,

239 
MIB_NODE_LR
,

241 
NULL
,

242 
NULL
,

245 c⁄° 
s32_t
 
	gt˝c⁄√¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

246 
mib_node
* c⁄° 
	gt˝c⁄√¡ry_nodes
[5] = {

247 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

248 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

249 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ


251 c⁄° 
mib_¨øy_node
 
	gt˝c⁄√¡ry
 = {

252 &
nﬁófs_gë_obje˘_def
,

253 &
nﬁófs_gë_vÆue
,

254 &
nﬁófs_£t_ã°
,

255 &
nﬁófs_£t_vÆue
,

256 
MIB_NODE_AR
,

258 
t˝c⁄√¡ry_ids
,

259 
t˝c⁄√¡ry_nodes


262 
s32_t
 
	gt˝c⁄¡abÀ_id
 = 1;

263 
mib_node
* 
	gt˝c⁄¡abÀ_node
 = (mib_node* c⁄°)&
t˝c⁄√¡ry
;

264 
mib_øm_¨øy_node
 
	gt˝c⁄¡abÀ
 = {

265 &
nﬁófs_gë_obje˘_def
,

266 &
nﬁófs_gë_vÆue
,

267 &
nﬁófs_£t_ã°
,

268 &
nﬁófs_£t_vÆue
,

269 
MIB_NODE_RA
,

273 &
t˝c⁄¡abÀ_id
,

274 &
t˝c⁄¡abÀ_node


277 c⁄° 
mib_sˇœr_node
 
	gt˝_sˇœr
 = {

278 &
t˝_gë_obje˘_def
,

279 &
t˝_gë_vÆue
,

280 &
nﬁófs_£t_ã°
,

281 &
nﬁófs_£t_vÆue
,

282 
MIB_NODE_SC
,

285 c⁄° 
s32_t
 
	gt˝_ids
[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

286 
mib_node
* c⁄° 
	gt˝_nodes
[15] = {

287 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

288 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

289 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

290 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

291 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

292 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

293 (
mib_node
* c⁄°)&
t˝c⁄¡abÀ
, (mib_node* c⁄°)&
t˝_sˇœr
,

294 (
mib_node
* c⁄°)&
t˝_sˇœr


296 c⁄° 
mib_¨øy_node
 
	gt˝
 = {

297 &
nﬁófs_gë_obje˘_def
,

298 &
nﬁófs_gë_vÆue
,

299 &
nﬁófs_£t_ã°
,

300 &
nﬁófs_£t_vÆue
,

301 
MIB_NODE_AR
,

303 
t˝_ids
,

304 
t˝_nodes


309 c⁄° 
mib_sˇœr_node
 
	gicmp_sˇœr
 = {

310 &
icmp_gë_obje˘_def
,

311 &
icmp_gë_vÆue
,

312 &
nﬁófs_£t_ã°
,

313 &
nﬁófs_£t_vÆue
,

314 
MIB_NODE_SC
,

317 c⁄° 
s32_t
 
	gicmp_ids
[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

318 
mib_node
* c⁄° 
	gicmp_nodes
[26] = {

319 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

320 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

321 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

322 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

323 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

324 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

325 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

326 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

327 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

328 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

329 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

330 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

331 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar

333 c⁄° 
mib_¨øy_node
 
	gicmp
 = {

334 &
nﬁófs_gë_obje˘_def
,

335 &
nﬁófs_gë_vÆue
,

336 &
nﬁófs_£t_ã°
,

337 &
nﬁófs_£t_vÆue
,

338 
MIB_NODE_AR
,

340 
icmp_ids
,

341 
icmp_nodes


345 
mib_li°_roŸnode
 
	gù¡omåì_roŸ
 = {

346 &
nﬁófs_gë_obje˘_def
,

347 &
nﬁófs_gë_vÆue
,

348 &
nﬁófs_£t_ã°
,

349 &
nﬁófs_£t_vÆue
,

350 
MIB_NODE_LR
,

352 
NULL
,

353 
NULL
,

356 c⁄° 
s32_t
 
	gù¡omíåy_ids
[4] = { 1, 2, 3, 4 };

357 
mib_node
* c⁄° 
	gù¡omíåy_nodes
[4] = {

358 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root,

359 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root

361 c⁄° 
mib_¨øy_node
 
	gù¡omíåy
 = {

362 &
nﬁófs_gë_obje˘_def
,

363 &
nﬁófs_gë_vÆue
,

364 &
nﬁófs_£t_ã°
,

365 &
nﬁófs_£t_vÆue
,

366 
MIB_NODE_AR
,

368 
ù¡omíåy_ids
,

369 
ù¡omíåy_nodes


372 
s32_t
 
	gù¡omèbÀ_id
 = 1;

373 
mib_node
* 
	gù¡omèbÀ_node
 = (mib_node* c⁄°)&
ù¡omíåy
;

374 
mib_øm_¨øy_node
 
	gù¡omèbÀ
 = {

375 &
nﬁófs_gë_obje˘_def
,

376 &
nﬁófs_gë_vÆue
,

377 &
nﬁófs_£t_ã°
,

378 &
nﬁófs_£t_vÆue
,

379 
MIB_NODE_RA
,

381 &
ù¡omèbÀ_id
,

382 &
ù¡omèbÀ_node


386 
mib_li°_roŸnode
 
	gùπëªe_roŸ
 = {

387 &
nﬁófs_gë_obje˘_def
,

388 &
nﬁófs_gë_vÆue
,

389 &
nﬁófs_£t_ã°
,

390 &
nﬁófs_£t_vÆue
,

391 
MIB_NODE_LR
,

393 
NULL
,

394 
NULL
,

397 c⁄° 
s32_t
 
	gùπì¡ry_ids
[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };

398 
mib_node
* c⁄° 
	gùπì¡ry_nodes
[13] = {

399 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

400 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

401 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

402 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

403 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

404 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

405 (
mib_node
* c⁄°)&
ùπëªe_roŸ


407 c⁄° 
mib_¨øy_node
 
	gùπì¡ry
 = {

408 &
nﬁófs_gë_obje˘_def
,

409 &
nﬁófs_gë_vÆue
,

410 &
nﬁófs_£t_ã°
,

411 &
nﬁófs_£t_vÆue
,

412 
MIB_NODE_AR
,

414 
ùπì¡ry_ids
,

415 
ùπì¡ry_nodes


418 
s32_t
 
	gùπëabÀ_id
 = 1;

419 
mib_node
* 
	gùπëabÀ_node
 = (mib_node* c⁄°)&
ùπì¡ry
;

420 
mib_øm_¨øy_node
 
	gùπëabÀ
 = {

421 &
nﬁófs_gë_obje˘_def
,

422 &
nﬁófs_gë_vÆue
,

423 &
nﬁófs_£t_ã°
,

424 &
nﬁófs_£t_vÆue
,

425 
MIB_NODE_RA
,

427 &
ùπëabÀ_id
,

428 &
ùπëabÀ_node


432 
mib_li°_roŸnode
 
	gùaddπªe_roŸ
 = {

433 &
nﬁófs_gë_obje˘_def
,

434 &
nﬁófs_gë_vÆue
,

435 &
nﬁófs_£t_ã°
,

436 &
nﬁófs_£t_vÆue
,

437 
MIB_NODE_LR
,

439 
NULL
,

440 
NULL
,

443 c⁄° 
s32_t
 
	gùaddª¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

444 
mib_node
* c⁄° 
	gùaddª¡ry_nodes
[5] = {

445 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

446 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

447 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

448 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

449 (
mib_node
* c⁄°)&
ùaddπªe_roŸ


451 c⁄° 
mib_¨øy_node
 
	gùaddª¡ry
 = {

452 &
nﬁófs_gë_obje˘_def
,

453 &
nﬁófs_gë_vÆue
,

454 &
nﬁófs_£t_ã°
,

455 &
nﬁófs_£t_vÆue
,

456 
MIB_NODE_AR
,

458 
ùaddª¡ry_ids
,

459 
ùaddª¡ry_nodes


462 
s32_t
 
	gùaddπabÀ_id
 = 1;

463 
mib_node
* 
	gùaddπabÀ_node
 = (mib_node* c⁄°)&
ùaddª¡ry
;

464 
mib_øm_¨øy_node
 
	gùaddπabÀ
 = {

465 &
nﬁófs_gë_obje˘_def
,

466 &
nﬁófs_gë_vÆue
,

467 &
nﬁófs_£t_ã°
,

468 &
nﬁófs_£t_vÆue
,

469 
MIB_NODE_RA
,

471 &
ùaddπabÀ_id
,

472 &
ùaddπabÀ_node


476 c⁄° 
mib_sˇœr_node
 
	gù_sˇœr
 = {

477 &
ù_gë_obje˘_def
,

478 &
ù_gë_vÆue
,

479 &
ù_£t_ã°
,

480 &
nﬁófs_£t_vÆue
,

481 
MIB_NODE_SC
,

484 c⁄° 
s32_t
 
	gù_ids
[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

485 
mib_node
* c⁄° 
	gù_nodes
[23] = {

486 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

487 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

488 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

489 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

490 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

491 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

492 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

493 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

494 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

495 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* c⁄°)&
ùaddπabÀ
,

496 (
mib_node
* c⁄°)&
ùπëabÀ
, (mib_node* c⁄°)&
ù¡omèbÀ
,

497 (
mib_node
* c⁄°)&
ù_sˇœr


499 c⁄° 
mib_¨øy_node
 
	gmib2_ù
 = {

500 &
nﬁófs_gë_obje˘_def
,

501 &
nﬁófs_gë_vÆue
,

502 &
nﬁófs_£t_ã°
,

503 &
nﬁófs_£t_vÆue
,

504 
MIB_NODE_AR
,

506 
ù_ids
,

507 
ù_nodes


511 
mib_li°_roŸnode
 
	g¨±ªe_roŸ
 = {

512 &
nﬁófs_gë_obje˘_def
,

513 &
nﬁófs_gë_vÆue
,

514 &
nﬁófs_£t_ã°
,

515 &
nﬁófs_£t_vÆue
,

516 
MIB_NODE_LR
,

518 
NULL
,

519 
NULL
,

522 c⁄° 
s32_t
 
	g©íåy_ids
[3] = { 1, 2, 3 };

523 
mib_node
* c⁄° 
	g©íåy_nodes
[3] = {

524 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

525 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

526 (
mib_node
* c⁄°)&
¨±ªe_roŸ


528 c⁄° 
mib_¨øy_node
 
	g©íåy
 = {

529 &
nﬁófs_gë_obje˘_def
,

530 &
nﬁófs_gë_vÆue
,

531 &
nﬁófs_£t_ã°
,

532 &
nﬁófs_£t_vÆue
,

533 
MIB_NODE_AR
,

535 
©íåy_ids
,

536 
©íåy_nodes


539 c⁄° 
s32_t
 
	g©èbÀ_id
 = 1;

540 
mib_node
* c⁄° 
	g©èbÀ_node
 = (mib_node* c⁄°)&
©íåy
;

541 c⁄° 
mib_¨øy_node
 
	g©èbÀ
 = {

542 &
nﬁófs_gë_obje˘_def
,

543 &
nﬁófs_gë_vÆue
,

544 &
nﬁófs_£t_ã°
,

545 &
nﬁófs_£t_vÆue
,

546 
MIB_NODE_AR
,

548 &
©èbÀ_id
,

549 &
©èbÀ_node


553 
s32_t
 
	g©_id
 = 1;

554 
mib_node
* 
	gmib2_©_node
 = (mib_node* c⁄°)&
©èbÀ
;

555 
mib_øm_¨øy_node
 
	g©
 = {

556 &
nﬁófs_gë_obje˘_def
,

557 &
nﬁófs_gë_vÆue
,

558 &
nﬁófs_£t_ã°
,

559 &
nﬁófs_£t_vÆue
,

560 
MIB_NODE_RA
,

562 &
©_id
,

563 &
mib2_©_node


567 
mib_li°_roŸnode
 
	giÊi°_roŸ
 = {

568 &
i„¡ry_gë_obje˘_def
,

569 &
i„¡ry_gë_vÆue
,

570 #i‡
SNMP_SAFE_REQUESTS


571 &
nﬁófs_£t_ã°
,

572 &
nﬁófs_£t_vÆue
,

574 &
i„¡ry_£t_ã°
,

575 &
i„¡ry_£t_vÆue
,

577 
MIB_NODE_LR
,

579 
NULL
,

580 
NULL
,

583 c⁄° 
s32_t
 
	gi„¡ry_ids
[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };

584 
mib_node
* c⁄° 
	gi„¡ry_nodes
[22] = {

585 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

586 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

587 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

588 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

589 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

590 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

591 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

592 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

593 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

594 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

595 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root

597 c⁄° 
mib_¨øy_node
 
	gi„¡ry
 = {

598 &
nﬁófs_gë_obje˘_def
,

599 &
nﬁófs_gë_vÆue
,

600 &
nﬁófs_£t_ã°
,

601 &
nﬁófs_£t_vÆue
,

602 
MIB_NODE_AR
,

604 
i„¡ry_ids
,

605 
i„¡ry_nodes


608 
s32_t
 
	gi·abÀ_id
 = 1;

609 
mib_node
* 
	gi·abÀ_node
 = (mib_node* c⁄°)&
i„¡ry
;

610 
mib_øm_¨øy_node
 
	gi·abÀ
 = {

611 &
nﬁófs_gë_obje˘_def
,

612 &
nﬁófs_gë_vÆue
,

613 &
nﬁófs_£t_ã°
,

614 &
nﬁófs_£t_vÆue
,

615 
MIB_NODE_RA
,

617 &
i·abÀ_id
,

618 &
i·abÀ_node


622 c⁄° 
mib_sˇœr_node
 
	göãrÁ˚s_sˇœr
 = {

623 &
öãrÁ˚s_gë_obje˘_def
,

624 &
öãrÁ˚s_gë_vÆue
,

625 &
nﬁófs_£t_ã°
,

626 &
nﬁófs_£t_vÆue
,

627 
MIB_NODE_SC
,

630 c⁄° 
s32_t
 
	göãrÁ˚s_ids
[2] = { 1, 2 };

631 
mib_node
* c⁄° 
	göãrÁ˚s_nodes
[2] = {

632 (
mib_node
* c⁄°)&
öãrÁ˚s_sˇœr
, (mib_node* c⁄°)&
i·abÀ


634 c⁄° 
mib_¨øy_node
 
	göãrÁ˚s
 = {

635 &
nﬁófs_gë_obje˘_def
,

636 &
nﬁófs_gë_vÆue
,

637 &
nﬁófs_£t_ã°
,

638 &
nﬁófs_£t_vÆue
,

639 
MIB_NODE_AR
,

641 
öãrÁ˚s_ids
,

642 
öãrÁ˚s_nodes


648 c⁄° 
mib_sˇœr_node
 
	gsys_ãm_sˇœr
 = {

649 &
sy°em_gë_obje˘_def
,

650 &
sy°em_gë_vÆue
,

651 &
sy°em_£t_ã°
,

652 &
sy°em_£t_vÆue
,

653 
MIB_NODE_SC
,

656 c⁄° 
s32_t
 
	gsys_ãm_ids
[7] = { 1, 2, 3, 4, 5, 6, 7 };

657 
mib_node
* c⁄° 
	gsys_ãm_nodes
[7] = {

658 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

659 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

660 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

661 (
mib_node
* c⁄°)&
sys_ãm_sˇœr


664 c⁄° 
mib_¨øy_node
 
	gsys_ãm
 = {

665 &
nﬁófs_gë_obje˘_def
,

666 &
nﬁófs_gë_vÆue
,

667 &
nﬁófs_£t_ã°
,

668 &
nﬁófs_£t_vÆue
,

669 
MIB_NODE_AR
,

671 
sys_ãm_ids
,

672 
sys_ãm_nodes


676 #i‡
LWIP_TCP


677 
	#MIB2_GROUPS
 8

	)

679 
	#MIB2_GROUPS
 7

	)

681 c⁄° 
s32_t
 
	gmib2_ids
[
MIB2_GROUPS
] =

688 #i‡
LWIP_TCP


694 
mib_node
* c⁄° 
	gmib2_nodes
[
MIB2_GROUPS
] = {

695 (
mib_node
* c⁄°)&
sys_ãm
,

696 (
mib_node
* c⁄°)&
öãrÁ˚s
,

697 (
mib_node
* c⁄°)&
©
,

698 (
mib_node
* c⁄°)&
mib2_ù
,

699 (
mib_node
* c⁄°)&
icmp
,

700 #i‡
LWIP_TCP


701 (
mib_node
* c⁄°)&
t˝
,

703 (
mib_node
* c⁄°)&
udp
,

704 (
mib_node
* c⁄°)&
¢mp


707 c⁄° 
mib_¨øy_node
 
	gmib2
 = {

708 &
nﬁófs_gë_obje˘_def
,

709 &
nﬁófs_gë_vÆue
,

710 &
nﬁófs_£t_ã°
,

711 &
nﬁófs_£t_vÆue
,

712 
MIB_NODE_AR
,

713 
MIB2_GROUPS
,

714 
mib2_ids
,

715 
mib2_nodes


719 c⁄° 
s32_t
 
	gmgmt_ids
[1] = { 1 };

720 
mib_node
* c⁄° 
	gmgmt_nodes
[1] = { (mib_node* c⁄°)&
mib2
 };

721 c⁄° 
mib_¨øy_node
 
	gmgmt
 = {

722 &
nﬁófs_gë_obje˘_def
,

723 &
nﬁófs_gë_vÆue
,

724 &
nﬁófs_£t_ã°
,

725 &
nﬁófs_£t_vÆue
,

726 
MIB_NODE_AR
,

728 
mgmt_ids
,

729 
mgmt_nodes


733 #i‡
SNMP_PRIVATE_MIB


734 
s32_t
 
	göã∫ë_ids
[2] = { 2, 4 };

735 
mib_node
* c⁄° 
	göã∫ë_nodes
[2] = { (mib_node* c⁄°)&
mgmt
, (mib_node* c⁄°)&
¥iv©e
 };

736 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

737 &
nﬁófs_gë_obje˘_def
,

738 &
nﬁófs_gë_vÆue
,

739 &
nﬁófs_£t_ã°
,

740 &
nﬁófs_£t_vÆue
,

741 
MIB_NODE_AR
,

743 
öã∫ë_ids
,

744 
öã∫ë_nodes


747 c⁄° 
s32_t
 
	göã∫ë_ids
[1] = { 2 };

748 
mib_node
* c⁄° 
	göã∫ë_nodes
[1] = { (mib_node* c⁄°)&
mgmt
 };

749 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

750 &
nﬁófs_gë_obje˘_def
,

751 &
nﬁófs_gë_vÆue
,

752 &
nﬁófs_£t_ã°
,

753 &
nﬁófs_£t_vÆue
,

754 
MIB_NODE_AR
,

756 
öã∫ë_ids
,

757 
öã∫ë_nodes


762 
¢mp_obj_id
 
	gsysobjid
 = {
SNMP_SYSOBJID_LEN
, 
SNMP_SYSOBJID
};

764 
¢mp_obj_id
 
	g¢mpgΩ_id
 = {7,{1,3,6,1,2,1,11}};

766 c⁄° 
s32_t
 
	gsys£rvi˚s
 = 
SNMP_SYSSERVICES
;

769 c⁄° 
u8_t
 
	gsysdes¸_Àn_deÁu…
 = 4;

770 c⁄° 
u8_t
 
	gsysdes¸_deÁu…
[] = "lwIP";

771 
u8_t
* 
	gsysdes¸_Àn_±r
 = (u8_t*)&
sysdes¸_Àn_deÁu…
;

772 
u8_t
* 
	gsysdes¸_±r
 = (u8_t*)&
sysdes¸_deÁu…
[0];

774 c⁄° 
u8_t
 
	gsysc⁄è˘_Àn_deÁu…
 = 0;

775 c⁄° 
u8_t
 
	gsysc⁄è˘_deÁu…
[] = "";

776 
u8_t
* 
	gsysc⁄è˘_Àn_±r
 = (u8_t*)&
sysc⁄è˘_Àn_deÁu…
;

777 
u8_t
* 
	gsysc⁄è˘_±r
 = (u8_t*)&
sysc⁄è˘_deÁu…
[0];

779 c⁄° 
u8_t
 
	gsy¢ame_Àn_deÁu…
 = 8;

780 c⁄° 
u8_t
 
	gsy¢ame_deÁu…
[] = "FQDN-unk";

781 
u8_t
* 
	gsy¢ame_Àn_±r
 = (u8_t*)&
sy¢ame_Àn_deÁu…
;

782 
u8_t
* 
	gsy¢ame_±r
 = (u8_t*)&
sy¢ame_deÁu…
[0];

784 c⁄° 
u8_t
 
	gsy¶oˇti⁄_Àn_deÁu…
 = 0;

785 c⁄° 
u8_t
 
	gsy¶oˇti⁄_deÁu…
[] = "";

786 
u8_t
* 
	gsy¶oˇti⁄_Àn_±r
 = (u8_t*)&
sy¶oˇti⁄_Àn_deÁu…
;

787 
u8_t
* 
	gsy¶oˇti⁄_±r
 = (u8_t*)&
sy¶oˇti⁄_deÁu…
[0];

789 c⁄° 
u8_t
 
	g¢m≥«bÀauthíå≠s_deÁu…
 = 2;

790 
u8_t
* 
	g¢m≥«bÀauthíå≠s_±r
 = (u8_t*)&
¢m≥«bÀauthíå≠s_deÁu…
;

793 c⁄° 
¢mp_obj_id
 
	gif•ecific
 = {2, {0, 0}};

795 c⁄° 
¢mp_obj_id
 
	gùrouãöfo
 = {2, {0, 0}};

800 
u32_t
 
	gsysu±ime
 = 0;

803 
u32_t
 
	gùöª˚ives
 = 0,

804 
	gùöhdªº‹s
 = 0,

805 
	gùöaddªº‹s
 = 0,

806 
	gùf‹wd©agøms
 = 0,

807 
	gùöunknow≈rŸos
 = 0,

808 
	gùödisˇrds
 = 0,

809 
	gùödñivîs
 = 0,

810 
	gùouåeque°s
 = 0,

811 
	gùoutdisˇrds
 = 0,

812 
	gùouä‹ouãs
 = 0,

813 
	gùªasmªqds
 = 0,

814 
	gùªasmoks
 = 0,

815 
	gùªasmÁûs
 = 0,

816 
	gù‰agoks
 = 0,

817 
	gù‰agÁûs
 = 0,

818 
	gù‰ag¸óãs
 = 0,

819 
	gùroutögdisˇrds
 = 0;

821 
u32_t
 
	gicmpömsgs
 = 0,

822 
	gicmpöîr‹s
 = 0,

823 
	gicmpöde°uƒóchs
 = 0,

824 
	gicmpötimìxcds
 = 0,

825 
	gicmpö∑rm¥obs
 = 0,

826 
	gicmpö§cquíchs
 = 0,

827 
	gicmpöªdúe˘s
 = 0,

828 
	gicmpöechos
 = 0,

829 
	gicmpöech‹ïs
 = 0,

830 
	gicmpötime°amps
 = 0,

831 
	gicmpötime°am¥ïs
 = 0,

832 
	gicmpöaddrmasks
 = 0,

833 
	gicmpöaddrmaskªps
 = 0,

834 
	gicmpoutmsgs
 = 0,

835 
	gicmpouãº‹s
 = 0,

836 
	gicmpoutde°uƒóchs
 = 0,

837 
	gicmpouâimìxcds
 = 0,

838 
	gicmpouç¨m¥obs
 = 0,

839 
	gicmpout§cquíchs
 = 0,

840 
	gicmpouåedúe˘s
 = 0,

841 
	gicmpouãchos
 = 0,

842 
	gicmpouãch‹ïs
 = 0,

843 
	gicmpouâime°amps
 = 0,

844 
	gicmpouâime°am¥ïs
 = 0,

845 
	gicmpouèddrmasks
 = 0,

846 
	gicmpouèddrmaskªps
 = 0;

848 
u32_t
 
	gt˝a˘ive›ís
 = 0,

849 
	gt˝∑ssive›ís
 = 0,

850 
	gt˝©ãm±Áûs
 = 0,

851 
	gt˝e°abª£ts
 = 0,

852 
	gt˝ö£gs
 = 0,

853 
	gt˝out£gs
 = 0,

854 
	gt˝ªå™s£gs
 = 0,

855 
	gt˝öîrs
 = 0,

856 
	gt˝ouå°s
 = 0;

858 
u32_t
 
	gudpöd©agøms
 = 0,

859 
	gud≤›‹ts
 = 0,

860 
	gudpöîr‹s
 = 0,

861 
	gudpoutd©agøms
 = 0;

863 
u32_t
 
	g¢mpöpkts
 = 0,

864 
	g¢mpouçkts
 = 0,

865 
	g¢mpöbadvîsi⁄s
 = 0,

866 
	g¢mpöbadcommunôy«mes
 = 0,

867 
	g¢mpöbadcommunôyu£s
 = 0,

868 
	g¢mpöa¢∑r£îrs
 = 0,

869 
	g¢mpötoobigs
 = 0,

870 
	g¢mpönosuch«mes
 = 0,

871 
	g¢mpöbadvÆues
 = 0,

872 
	g¢mpöªad⁄lys
 = 0,

873 
	g¢mpögíîrs
 = 0,

874 
	g¢mpötŸÆªqv¨s
 = 0,

875 
	g¢mpötŸÆ£tv¨s
 = 0,

876 
	g¢mpögëªque°s
 = 0,

877 
	g¢mpögë√xts
 = 0,

878 
	g¢mpö£åeque°s
 = 0,

879 
	g¢mpögëª•⁄£s
 = 0,

880 
	g¢mpöå≠s
 = 0,

881 
	g¢mpouâoobigs
 = 0,

882 
	g¢mpouäosuch«mes
 = 0,

883 
	g¢mpoutbadvÆues
 = 0,

884 
	g¢mpoutgíîrs
 = 0,

885 
	g¢mpoutgëªque°s
 = 0,

886 
	g¢mpoutgë√xts
 = 0,

887 
	g¢mpout£åeque°s
 = 0,

888 
	g¢mpoutgëª•⁄£s
 = 0,

889 
	g¢mpouâøps
 = 0;

901 
	$oc°∫˝y
(
u8_t
 *
d°
, u8_à*
§c
, u8_à
n
)

903 
n
 > 0)

905 
n
--;

906 *
d°
++ = *
§c
++;

908 
	}
}

917 
	$obje˘idn˝y
(
s32_t
 *
d°
, s32_à*
§c
, 
u8_t
 
n
)

919 
n
 > 0)

921 
n
--;

922 *
d°
++ = *
§c
++;

924 
	}
}

932 
	$¢mp_£t_sysde§
(
u8_t
 *
°r
, u8_à*
Àn
)

934 i‡(
°r
 !
NULL
)

936 
sysdes¸_±r
 = 
°r
;

937 
sysdes¸_Àn_±r
 = 
Àn
;

939 
	}
}

941 
	$¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
)

943 *
oid
 = &
sysobjid
;

944 
	}
}

951 
	$¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
)

953 
sysobjid
 = *
oid
;

954 
	}
}

960 
	$¢mp_öc_sysu±ime
()

962 
sysu±ime
++;

963 
	}
}

965 
	$¢mp_add_sysu±ime
(
u32_t
 
vÆue
)

967 
sysu±ime
+=
vÆue
;

968 
	}
}

970 
	$¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
)

972 
	`SNMP_GET_SYSUPTIME
(
sysu±ime
);

973 *
vÆue
 = 
sysu±ime
;

974 
	}
}

983 
	$¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

985 i‡(
oc°r
 !
NULL
)

987 
sysc⁄è˘_±r
 = 
oc°r
;

988 
sysc⁄è˘_Àn_±r
 = 
oc°æí
;

990 
	}
}

999 
	$¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1001 i‡(
oc°r
 !
NULL
)

1003 
sy¢ame_±r
 = 
oc°r
;

1004 
sy¢ame_Àn_±r
 = 
oc°æí
;

1006 
	}
}

1015 
	$¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1017 i‡(
oc°r
 !
NULL
)

1019 
sy¶oˇti⁄_±r
 = 
oc°r
;

1020 
sy¶oˇti⁄_Àn_±r
 = 
oc°æí
;

1022 
	}
}

1025 
	$¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1027 
ni
->
iföo˘ës
 +
vÆue
;

1028 
	}
}

1030 
	$¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
)

1032 (
ni
->
iföuˇ°pkts
)++;

1033 
	}
}

1035 
	$¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
)

1037 (
ni
->
ifönuˇ°pkts
)++;

1038 
	}
}

1040 
	$¢mp_öc_ifödisˇrds
(
√tif
 *
ni
)

1042 (
ni
->
ifödisˇrds
)++;

1043 
	}
}

1045 
	$¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1047 
ni
->
ifouto˘ës
 +
vÆue
;

1048 
	}
}

1050 
	$¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
)

1052 (
ni
->
ifoutuˇ°pkts
)++;

1053 
	}
}

1055 
	$¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
)

1057 (
ni
->
ifouäuˇ°pkts
)++;

1058 
	}
}

1060 
	$¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
)

1062 (
ni
->
ifoutdisˇrds
)++;

1063 
	}
}

1065 
	$¢mp_öc_iÊi°
()

1067 
mib_li°_node
 *
if_node
 = 
NULL
;

1069 
	`¢mp_mib_node_ö£π
(&
iÊi°_roŸ
, iÊi°_roŸ.
cou¡
 + 1, &
if_node
);

1071 
i·abÀ
.
maxÀngth
 = 1;

1072 
	}
}

1074 
	$¢mp_dec_iÊi°
()

1076 
	`¢mp_mib_node_dñëe
(&
iÊi°_roŸ
, iÊi°_roŸ.
èû
);

1078 if(
iÊi°_roŸ
.
cou¡
 =0Ë
i·abÀ
.
maxÀngth
 = 0;

1079 
	}
}

1085 
	$¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1087 
mib_li°_roŸnode
 *
©_∫
;

1088 
mib_li°_node
 *
©_node
;

1089 
ù_addr
 
hù
;

1090 
s32_t
 
¨pidx
[5];

1091 
u8_t
 
Àvñ
, 
åì
;

1093 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1094 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1095 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1096 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1098 
åì
 = 0;Åree < 2;Åree++)

1100 i‡(
åì
 == 0)

1102 
©_∫
 = &
¨±ªe_roŸ
;

1106 
©_∫
 = &
ù¡omåì_roŸ
;

1108 
Àvñ
 = 0;Üevel < 5;Üevel++)

1110 
©_node
 = 
NULL
;

1111 
	`¢mp_mib_node_ö£π
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_node
);

1112 i‡((
Àvñ
 !4Ë&& (
©_node
 !
NULL
))

1114 i‡(
©_node
->
≈å
 =
NULL
)

1116 
©_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1117 
©_node
->
≈å
 = (
mib_node
*)
©_∫
;

1118 i‡(
©_∫
 !
NULL
)

1120 i‡(
Àvñ
 == 3)

1122 i‡(
åì
 == 0)

1124 
©_∫
->
gë_obje˘_def
 = 
©íåy_gë_obje˘_def
;

1125 
©_∫
->
gë_vÆue
 = 
©íåy_gë_vÆue
;

1129 
©_∫
->
gë_obje˘_def
 = 
ù_¡omíåy_gë_obje˘_def
;

1130 
©_∫
->
gë_vÆue
 = 
ù_¡omíåy_gë_vÆue
;

1132 
©_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1133 
©_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1139 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_arpidx_tree() insert failed, mem full"));

1145 
©_∫
 = (
mib_li°_roŸnode
*)
©_node
->
≈å
;

1151 
©
.
maxÀngth
 = 1;

1152 
ù¡omèbÀ
.
maxÀngth
 = 1;

1153 
	}
}

1159 
	$¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1161 
mib_li°_roŸnode
 *
©_∫
, *
√xt
, *
dñ_∫
[5];

1162 
mib_li°_node
 *
©_n
, *
dñ_n
[5];

1163 
ù_addr
 
hù
;

1164 
s32_t
 
¨pidx
[5];

1165 
u8_t
 
fc
, 
åì
, 
Àvñ
, 
dñ_˙t
;

1167 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1168 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1169 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1171 
åì
 = 0;Åree < 2;Åree++)

1174 i‡(
åì
 == 0)

1176 
©_∫
 = &
¨±ªe_roŸ
;

1180 
©_∫
 = &
ù¡omåì_roŸ
;

1182 
Àvñ
 = 0;

1183 
dñ_˙t
 = 0;

1184 (
Àvñ
 < 5Ë&& (
©_∫
 !
NULL
))

1186 
fc
 = 
	`¢mp_mib_node_föd
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_n
);

1187 i‡(
fc
 == 0)

1190 
dñ_˙t
 = 0;

1191 
©_∫
 = 
NULL
;

1193 i‡(
fc
 == 1)

1195 
dñ_∫
[
dñ_˙t
] = 
©_∫
;

1196 
dñ_n
[
dñ_˙t
] = 
©_n
;

1197 
dñ_˙t
++;

1198 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1200 i‡(
fc
 == 2)

1203 
dñ_˙t
 = 0;

1204 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1206 
Àvñ
++;

1209 
dñ_˙t
 > 0)

1211 
dñ_˙t
--;

1213 
©_∫
 = 
dñ_∫
[
dñ_˙t
];

1214 
©_n
 = 
dñ_n
[
dñ_˙t
];

1216 
√xt
 = 
	`¢mp_mib_node_dñëe
(
©_∫
, 
©_n
);

1217 i‡(
√xt
 !
NULL
)

1219 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1220 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1225 if(
¨±ªe_roŸ
.
cou¡
 =0Ë
©
.
maxÀngth
 = 0;

1226 if(
ù¡omåì_roŸ
.
cou¡
 =0Ë
ù¡omèbÀ
.
maxÀngth
 = 0;

1227 
	}
}

1229 
	$¢mp_öc_ùöª˚ives
()

1231 
ùöª˚ives
++;

1232 
	}
}

1234 
	$¢mp_öc_ùöhdªº‹s
()

1236 
ùöhdªº‹s
++;

1237 
	}
}

1239 
	$¢mp_öc_ùöaddªº‹s
()

1241 
ùöaddªº‹s
++;

1242 
	}
}

1244 
	$¢mp_öc_ùf‹wd©agøms
()

1246 
ùf‹wd©agøms
++;

1247 
	}
}

1249 
	$¢mp_öc_ùöunknow≈rŸos
()

1251 
ùöunknow≈rŸos
++;

1252 
	}
}

1254 
	$¢mp_öc_ùödisˇrds
()

1256 
ùödisˇrds
++;

1257 
	}
}

1259 
	$¢mp_öc_ùödñivîs
()

1261 
ùödñivîs
++;

1262 
	}
}

1264 
	$¢mp_öc_ùouåeque°s
()

1266 
ùouåeque°s
++;

1267 
	}
}

1269 
	$¢mp_öc_ùoutdisˇrds
()

1271 
ùoutdisˇrds
++;

1272 
	}
}

1274 
	$¢mp_öc_ùouä‹ouãs
()

1276 
ùouä‹ouãs
++;

1277 
	}
}

1279 
	$¢mp_öc_ùªasmªqds
()

1281 
ùªasmªqds
++;

1282 
	}
}

1284 
	$¢mp_öc_ùªasmoks
()

1286 
ùªasmoks
++;

1287 
	}
}

1289 
	$¢mp_öc_ùªasmÁûs
()

1291 
ùªasmÁûs
++;

1292 
	}
}

1294 
	$¢mp_öc_ù‰agoks
()

1296 
ù‰agoks
++;

1297 
	}
}

1299 
	$¢mp_öc_ù‰agÁûs
()

1301 
ù‰agÁûs
++;

1302 
	}
}

1304 
	$¢mp_öc_ù‰ag¸óãs
()

1306 
ù‰ag¸óãs
++;

1307 
	}
}

1309 
	$¢mp_öc_ùroutögdisˇrds
()

1311 
ùroutögdisˇrds
++;

1312 
	}
}

1318 
	$¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
)

1320 
mib_li°_roŸnode
 *
ùa_∫
;

1321 
mib_li°_node
 *
ùa_node
;

1322 
ù_addr
 
ù
;

1323 
s32_t
 
ùaddridx
[4];

1324 
u8_t
 
Àvñ
;

1326 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1327 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1328 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1330 
Àvñ
 = 0;

1331 
ùa_∫
 = &
ùaddπªe_roŸ
;

1332 
Àvñ
 < 4)

1334 
ùa_node
 = 
NULL
;

1335 
	`¢mp_mib_node_ö£π
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_node
);

1336 i‡((
Àvñ
 !3Ë&& (
ùa_node
 !
NULL
))

1338 i‡(
ùa_node
->
≈å
 =
NULL
)

1340 
ùa_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1341 
ùa_node
->
≈å
 = (
mib_node
*)
ùa_∫
;

1342 i‡(
ùa_∫
 !
NULL
)

1344 i‡(
Àvñ
 == 2)

1346 
ùa_∫
->
gë_obje˘_def
 = 
ù_addª¡ry_gë_obje˘_def
;

1347 
ùa_∫
->
gë_vÆue
 = 
ù_addª¡ry_gë_vÆue
;

1348 
ùa_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1349 
ùa_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1355 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_ipaddridx_tree() insert failed, mem full"));

1361 
ùa_∫
 = (
mib_li°_roŸnode
*)
ùa_node
->
≈å
;

1364 
Àvñ
++;

1367 
ùaddπabÀ
.
maxÀngth
 = 1;

1368 
	}
}

1374 
	$¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
)

1376 
mib_li°_roŸnode
 *
ùa_∫
, *
√xt
, *
dñ_∫
[4];

1377 
mib_li°_node
 *
ùa_n
, *
dñ_n
[4];

1378 
ù_addr
 
ù
;

1379 
s32_t
 
ùaddridx
[4];

1380 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1382 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1383 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1384 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1387 
Àvñ
 = 0;

1388 
dñ_˙t
 = 0;

1389 
ùa_∫
 = &
ùaddπªe_roŸ
;

1390 (
Àvñ
 < 4Ë&& (
ùa_∫
 !
NULL
))

1392 
fc
 = 
	`¢mp_mib_node_föd
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_n
);

1393 i‡(
fc
 == 0)

1396 
dñ_˙t
 = 0;

1397 
ùa_∫
 = 
NULL
;

1399 i‡(
fc
 == 1)

1401 
dñ_∫
[
dñ_˙t
] = 
ùa_∫
;

1402 
dñ_n
[
dñ_˙t
] = 
ùa_n
;

1403 
dñ_˙t
++;

1404 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1406 i‡(
fc
 == 2)

1409 
dñ_˙t
 = 0;

1410 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1412 
Àvñ
++;

1415 
dñ_˙t
 > 0)

1417 
dñ_˙t
--;

1419 
ùa_∫
 = 
dñ_∫
[
dñ_˙t
];

1420 
ùa_n
 = 
dñ_n
[
dñ_˙t
];

1422 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùa_∫
, 
ùa_n
);

1423 i‡(
√xt
 !
NULL
)

1425 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1426 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1430 i‡(
ùaddπªe_roŸ
.
cou¡
 =0Ë
ùaddπabÀ
.
maxÀngth
 = 0;

1431 
	}
}

1443 
	$¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1445 
u8_t
 
ö£π
 = 0;

1446 
ù_addr
 
d°
;

1448 i‡(
dÊt
 != 0)

1451 
d°
.
addr
 = 0;

1452 
ö£π
 = 1;

1457 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1459 i‡(
d°
.
addr
 !0Ë
ö£π
 = 1;

1461 i‡(
ö£π
)

1463 
mib_li°_roŸnode
 *
ùπe_∫
;

1464 
mib_li°_node
 *
ùπe_node
;

1465 
s32_t
 
ùπeidx
[4];

1466 
u8_t
 
Àvñ
;

1468 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1469 
Àvñ
 = 0;

1470 
ùπe_∫
 = &
ùπëªe_roŸ
;

1471 
Àvñ
 < 4)

1473 
ùπe_node
 = 
NULL
;

1474 
	`¢mp_mib_node_ö£π
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_node
);

1475 i‡((
Àvñ
 !3Ë&& (
ùπe_node
 !
NULL
))

1477 i‡(
ùπe_node
->
≈å
 =
NULL
)

1479 
ùπe_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1480 
ùπe_node
->
≈å
 = (
mib_node
*)
ùπe_∫
;

1481 i‡(
ùπe_∫
 !
NULL
)

1483 i‡(
Àvñ
 == 2)

1485 
ùπe_∫
->
gë_obje˘_def
 = 
ù_πì¡ry_gë_obje˘_def
;

1486 
ùπe_∫
->
gë_vÆue
 = 
ù_πì¡ry_gë_vÆue
;

1487 
ùπe_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1488 
ùπe_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1494 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_iprteidx_tree() insert failed, mem full"));

1500 
ùπe_∫
 = (
mib_li°_roŸnode
*)
ùπe_node
->
≈å
;

1503 
Àvñ
++;

1507 
ùπëabÀ
.
maxÀngth
 = 1;

1508 
	}
}

1518 
	$¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1520 
u8_t
 
dñëe
 = 0;

1521 
ù_addr
 
d°
;

1523 i‡(
dÊt
 != 0)

1526 
d°
.
addr
 = 0;

1527 
dñëe
 = 1;

1532 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1534 i‡(
d°
.
addr
 !0Ë
dñëe
 = 1;

1536 i‡(
dñëe
)

1538 
mib_li°_roŸnode
 *
ùπe_∫
, *
√xt
, *
dñ_∫
[4];

1539 
mib_li°_node
 *
ùπe_n
, *
dñ_n
[4];

1540 
s32_t
 
ùπeidx
[4];

1541 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1543 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1545 
Àvñ
 = 0;

1546 
dñ_˙t
 = 0;

1547 
ùπe_∫
 = &
ùπëªe_roŸ
;

1548 (
Àvñ
 < 4Ë&& (
ùπe_∫
 !
NULL
))

1550 
fc
 = 
	`¢mp_mib_node_föd
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_n
);

1551 i‡(
fc
 == 0)

1554 
dñ_˙t
 = 0;

1555 
ùπe_∫
 = 
NULL
;

1557 i‡(
fc
 == 1)

1559 
dñ_∫
[
dñ_˙t
] = 
ùπe_∫
;

1560 
dñ_n
[
dñ_˙t
] = 
ùπe_n
;

1561 
dñ_˙t
++;

1562 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1564 i‡(
fc
 == 2)

1567 
dñ_˙t
 = 0;

1568 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1570 
Àvñ
++;

1573 
dñ_˙t
 > 0)

1575 
dñ_˙t
--;

1577 
ùπe_∫
 = 
dñ_∫
[
dñ_˙t
];

1578 
ùπe_n
 = 
dñ_n
[
dñ_˙t
];

1580 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùπe_∫
, 
ùπe_n
);

1581 i‡(
√xt
 !
NULL
)

1583 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1584 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1589 i‡(
ùπëªe_roŸ
.
cou¡
 =0Ë
ùπëabÀ
.
maxÀngth
 = 0;

1590 
	}
}

1593 
	$¢mp_öc_icmpömsgs
()

1595 
icmpömsgs
++;

1596 
	}
}

1598 
	$¢mp_öc_icmpöîr‹s
()

1600 
icmpöîr‹s
++;

1601 
	}
}

1603 
	$¢mp_öc_icmpöde°uƒóchs
()

1605 
icmpöde°uƒóchs
++;

1606 
	}
}

1608 
	$¢mp_öc_icmpötimìxcds
()

1610 
icmpötimìxcds
++;

1611 
	}
}

1613 
	$¢mp_öc_icmpö∑rm¥obs
()

1615 
icmpö∑rm¥obs
++;

1616 
	}
}

1618 
	$¢mp_öc_icmpö§cquíchs
()

1620 
icmpö§cquíchs
++;

1621 
	}
}

1623 
	$¢mp_öc_icmpöªdúe˘s
()

1625 
icmpöªdúe˘s
++;

1626 
	}
}

1628 
	$¢mp_öc_icmpöechos
()

1630 
icmpöechos
++;

1631 
	}
}

1633 
	$¢mp_öc_icmpöech‹ïs
()

1635 
icmpöech‹ïs
++;

1636 
	}
}

1638 
	$¢mp_öc_icmpötime°amps
()

1640 
icmpötime°amps
++;

1641 
	}
}

1643 
	$¢mp_öc_icmpötime°am¥ïs
()

1645 
icmpötime°am¥ïs
++;

1646 
	}
}

1648 
	$¢mp_öc_icmpöaddrmasks
()

1650 
icmpöaddrmasks
++;

1651 
	}
}

1653 
	$¢mp_öc_icmpöaddrmaskªps
()

1655 
icmpöaddrmaskªps
++;

1656 
	}
}

1658 
	$¢mp_öc_icmpoutmsgs
()

1660 
icmpoutmsgs
++;

1661 
	}
}

1663 
	$¢mp_öc_icmpouãº‹s
()

1665 
icmpouãº‹s
++;

1666 
	}
}

1668 
	$¢mp_öc_icmpoutde°uƒóchs
()

1670 
icmpoutde°uƒóchs
++;

1671 
	}
}

1673 
	$¢mp_öc_icmpouâimìxcds
()

1675 
icmpouâimìxcds
++;

1676 
	}
}

1678 
	$¢mp_öc_icmpouç¨m¥obs
()

1680 
icmpouç¨m¥obs
++;

1681 
	}
}

1683 
	$¢mp_öc_icmpout§cquíchs
()

1685 
icmpout§cquíchs
++;

1686 
	}
}

1688 
	$¢mp_öc_icmpouåedúe˘s
()

1690 
icmpouåedúe˘s
++;

1691 
	}
}

1693 
	$¢mp_öc_icmpouãchos
()

1695 
icmpouãchos
++;

1696 
	}
}

1698 
	$¢mp_öc_icmpouãch‹ïs
()

1700 
icmpouãch‹ïs
++;

1701 
	}
}

1703 
	$¢mp_öc_icmpouâime°amps
()

1705 
icmpouâime°amps
++;

1706 
	}
}

1708 
	$¢mp_öc_icmpouâime°am¥ïs
()

1710 
icmpouâime°am¥ïs
++;

1711 
	}
}

1713 
	$¢mp_öc_icmpouèddrmasks
()

1715 
icmpouèddrmasks
++;

1716 
	}
}

1718 
	$¢mp_öc_icmpouèddrmaskªps
()

1720 
icmpouèddrmaskªps
++;

1721 
	}
}

1723 
	$¢mp_öc_t˝a˘ive›ís
()

1725 
t˝a˘ive›ís
++;

1726 
	}
}

1728 
	$¢mp_öc_t˝∑ssive›ís
()

1730 
t˝∑ssive›ís
++;

1731 
	}
}

1733 
	$¢mp_öc_t˝©ãm±Áûs
()

1735 
t˝©ãm±Áûs
++;

1736 
	}
}

1738 
	$¢mp_öc_t˝e°abª£ts
()

1740 
t˝e°abª£ts
++;

1741 
	}
}

1743 
	$¢mp_öc_t˝ö£gs
()

1745 
t˝ö£gs
++;

1746 
	}
}

1748 
	$¢mp_öc_t˝out£gs
()

1750 
t˝out£gs
++;

1751 
	}
}

1753 
	$¢mp_öc_t˝ªå™s£gs
()

1755 
t˝ªå™s£gs
++;

1756 
	}
}

1758 
	$¢mp_öc_t˝öîrs
()

1760 
t˝öîrs
++;

1761 
	}
}

1763 
	$¢mp_öc_t˝ouå°s
()

1765 
t˝ouå°s
++;

1766 
	}
}

1768 
	$¢mp_öc_udpöd©agøms
()

1770 
udpöd©agøms
++;

1771 
	}
}

1773 
	$¢mp_öc_ud≤›‹ts
()

1775 
ud≤›‹ts
++;

1776 
	}
}

1778 
	$¢mp_öc_udpöîr‹s
()

1780 
udpöîr‹s
++;

1781 
	}
}

1783 
	$¢mp_öc_udpoutd©agøms
()

1785 
udpoutd©agøms
++;

1786 
	}
}

1792 
	$¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
)

1794 
mib_li°_roŸnode
 *
udp_∫
;

1795 
mib_li°_node
 *
udp_node
;

1796 
ù_addr
 
ù
;

1797 
s32_t
 
udpidx
[5];

1798 
u8_t
 
Àvñ
;

1800 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1801 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1802 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1803 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1805 
udp_∫
 = &
udp_roŸ
;

1806 
Àvñ
 = 0;Üevel < 5;Üevel++)

1808 
udp_node
 = 
NULL
;

1809 
	`¢mp_mib_node_ö£π
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_node
);

1810 i‡((
Àvñ
 !4Ë&& (
udp_node
 !
NULL
))

1812 i‡(
udp_node
->
≈å
 =
NULL
)

1814 
udp_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1815 
udp_node
->
≈å
 = (
mib_node
*)
udp_∫
;

1816 i‡(
udp_∫
 !
NULL
)

1818 i‡(
Àvñ
 == 3)

1820 
udp_∫
->
gë_obje˘_def
 = 
ud≥¡ry_gë_obje˘_def
;

1821 
udp_∫
->
gë_vÆue
 = 
ud≥¡ry_gë_vÆue
;

1822 
udp_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1823 
udp_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1829 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_udpidx_tree() insert failed, mem full"));

1835 
udp_∫
 = (
mib_li°_roŸnode
*)
udp_node
->
≈å
;

1839 
ud±abÀ
.
maxÀngth
 = 1;

1840 
	}
}

1846 
	$¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
)

1848 
mib_li°_roŸnode
 *
udp_∫
, *
√xt
, *
dñ_∫
[5];

1849 
mib_li°_node
 *
udp_n
, *
dñ_n
[5];

1850 
ù_addr
 
ù
;

1851 
s32_t
 
udpidx
[5];

1852 
u8_t
 
bödögs
, 
fc
, 
Àvñ
, 
dñ_˙t
;

1854 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1855 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1856 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1857 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1861 
bödögs
 = 0;

1862 
pcb
 = 
udp_pcbs
;

1863 (
pcb
 !
NULL
))

1865 i‡((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

1866 (
pcb
->
loˇl_p‹t
 =
udpidx
[4]))

1868 
bödögs
++;

1870 
pcb
 =Öcb->
√xt
;

1872 i‡(
bödögs
 == 1)

1876 
Àvñ
 = 0;

1877 
dñ_˙t
 = 0;

1878 
udp_∫
 = &
udp_roŸ
;

1879 (
Àvñ
 < 5Ë&& (
udp_∫
 !
NULL
))

1881 
fc
 = 
	`¢mp_mib_node_föd
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_n
);

1882 i‡(
fc
 == 0)

1885 
dñ_˙t
 = 0;

1886 
udp_∫
 = 
NULL
;

1888 i‡(
fc
 == 1)

1890 
dñ_∫
[
dñ_˙t
] = 
udp_∫
;

1891 
dñ_n
[
dñ_˙t
] = 
udp_n
;

1892 
dñ_˙t
++;

1893 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1895 i‡(
fc
 == 2)

1898 
dñ_˙t
 = 0;

1899 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1901 
Àvñ
++;

1904 
dñ_˙t
 > 0)

1906 
dñ_˙t
--;

1908 
udp_∫
 = 
dñ_∫
[
dñ_˙t
];

1909 
udp_n
 = 
dñ_n
[
dñ_˙t
];

1911 
√xt
 = 
	`¢mp_mib_node_dñëe
(
udp_∫
, 
udp_n
);

1912 i‡(
√xt
 !
NULL
)

1914 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1915 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1920 i‡(
udp_roŸ
.
cou¡
 =0Ë
ud±abÀ
.
maxÀngth
 = 0;

1921 
	}
}

1924 
	$¢mp_öc_¢mpöpkts
()

1926 
¢mpöpkts
++;

1927 
	}
}

1929 
	$¢mp_öc_¢mpouçkts
()

1931 
¢mpouçkts
++;

1932 
	}
}

1934 
	$¢mp_öc_¢mpöbadvîsi⁄s
()

1936 
¢mpöbadvîsi⁄s
++;

1937 
	}
}

1939 
	$¢mp_öc_¢mpöbadcommunôy«mes
()

1941 
¢mpöbadcommunôy«mes
++;

1942 
	}
}

1944 
	$¢mp_öc_¢mpöbadcommunôyu£s
()

1946 
¢mpöbadcommunôyu£s
++;

1947 
	}
}

1949 
	$¢mp_öc_¢mpöa¢∑r£îrs
()

1951 
¢mpöa¢∑r£îrs
++;

1952 
	}
}

1954 
	$¢mp_öc_¢mpötoobigs
()

1956 
¢mpötoobigs
++;

1957 
	}
}

1959 
	$¢mp_öc_¢mpönosuch«mes
()

1961 
¢mpönosuch«mes
++;

1962 
	}
}

1964 
	$¢mp_öc_¢mpöbadvÆues
()

1966 
¢mpöbadvÆues
++;

1967 
	}
}

1969 
	$¢mp_öc_¢mpöªad⁄lys
()

1971 
¢mpöªad⁄lys
++;

1972 
	}
}

1974 
	$¢mp_öc_¢mpögíîrs
()

1976 
¢mpögíîrs
++;

1977 
	}
}

1979 
	$¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
)

1981 
¢mpötŸÆªqv¨s
 +
vÆue
;

1982 
	}
}

1984 
	$¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
)

1986 
¢mpötŸÆ£tv¨s
 +
vÆue
;

1987 
	}
}

1989 
	$¢mp_öc_¢mpögëªque°s
()

1991 
¢mpögëªque°s
++;

1992 
	}
}

1994 
	$¢mp_öc_¢mpögë√xts
()

1996 
¢mpögë√xts
++;

1997 
	}
}

1999 
	$¢mp_öc_¢mpö£åeque°s
()

2001 
¢mpö£åeque°s
++;

2002 
	}
}

2004 
	$¢mp_öc_¢mpögëª•⁄£s
()

2006 
¢mpögëª•⁄£s
++;

2007 
	}
}

2009 
	$¢mp_öc_¢mpöå≠s
()

2011 
¢mpöå≠s
++;

2012 
	}
}

2014 
	$¢mp_öc_¢mpouâoobigs
()

2016 
¢mpouâoobigs
++;

2017 
	}
}

2019 
	$¢mp_öc_¢mpouäosuch«mes
()

2021 
¢mpouäosuch«mes
++;

2022 
	}
}

2024 
	$¢mp_öc_¢mpoutbadvÆues
()

2026 
¢mpoutbadvÆues
++;

2027 
	}
}

2029 
	$¢mp_öc_¢mpoutgíîrs
()

2031 
¢mpoutgíîrs
++;

2032 
	}
}

2034 
	$¢mp_öc_¢mpoutgëªque°s
()

2036 
¢mpoutgëªque°s
++;

2037 
	}
}

2039 
	$¢mp_öc_¢mpoutgë√xts
()

2041 
¢mpoutgë√xts
++;

2042 
	}
}

2044 
	$¢mp_öc_¢mpout£åeque°s
()

2046 
¢mpout£åeque°s
++;

2047 
	}
}

2049 
	$¢mp_öc_¢mpoutgëª•⁄£s
()

2051 
¢mpoutgëª•⁄£s
++;

2052 
	}
}

2054 
	$¢mp_öc_¢mpouâøps
()

2056 
¢mpouâøps
++;

2057 
	}
}

2059 
	$¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
)

2061 *
oid
 = &
¢mpgΩ_id
;

2062 
	}
}

2064 
	$¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2066 i‡(
vÆue
 !
NULL
)

2068 
¢m≥«bÀauthíå≠s_±r
 = 
vÆue
;

2070 
	}
}

2072 
	$¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2074 *
vÆue
 = *
¢m≥«bÀauthíå≠s_±r
;

2075 
	}
}

2078 
	$nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2080 i‡(
idít_Àn
){}

2081 i‡(
idít
){}

2082 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2083 
	}
}

2086 
	$nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2088 i‡(
od
){}

2089 i‡(
Àn
){}

2090 i‡(
vÆue
){}

2091 
	}
}

2093 
u8_t


2094 
	$nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2096 i‡(
od
){}

2097 i‡(
Àn
){}

2098 i‡(
vÆue
){}

2101 
	}
}

2104 
	$nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2106 i‡(
od
){}

2107 i‡(
Àn
){}

2108 i‡(
vÆue
){}

2109 
	}
}

2120 
	$sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2122 
u8_t
 
id
;

2125 
idít_Àn
 += 1;

2126 
idít
 -= 1;

2127 i‡(
idít_Àn
 == 2)

2129 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2130 
od
->
id_ö°_±r
 = 
idít
;

2132 
id
 = 
idít
[0];

2133 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡sy°em.%"
U16_F
".0\n",(
u16_t
)
id
));

2134 
id
)

2137 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2138 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2139 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2140 
od
->
v_Àn
 = *
sysdes¸_Àn_±r
;

2143 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2144 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2145 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2146 
od
->
v_Àn
 = 
sysobjid
.
Àn
 * (
s32_t
);

2149 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2150 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2151 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2152 
od
->
v_Àn
 = (
u32_t
);

2155 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2156 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2157 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2158 
od
->
v_Àn
 = *
sysc⁄è˘_Àn_±r
;

2161 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2162 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2163 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2164 
od
->
v_Àn
 = *
sy¢ame_Àn_±r
;

2167 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2168 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2169 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2170 
od
->
v_Àn
 = *
sy¶oˇti⁄_Àn_±r
;

2173 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2174 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2175 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2176 
od
->
v_Àn
 = (
s32_t
);

2179 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço such object\n"));

2180 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2186 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço scalar\n"));

2187 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2189 
	}
}

2200 
	$sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2202 
u8_t
 
id
;

2204 
id
 = 
od
->
id_ö°_±r
[0];

2205 
id
)

2208 
	`oc°∫˝y
(
vÆue
,
sysdes¸_±r
, 
Àn
);

2211 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
sysobjid
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2215 
	`¢mp_gë_sysu±ime
(
vÆue
);

2219 
	`oc°∫˝y
(
vÆue
,
sysc⁄è˘_±r
,
Àn
);

2222 
	`oc°∫˝y
(
vÆue
,
sy¢ame_±r
,
Àn
);

2225 
	`oc°∫˝y
(
vÆue
,
sy¶oˇti⁄_±r
,
Àn
);

2229 
s32_t
 *
söt_±r
 = 
vÆue
;

2230 *
söt_±r
 = 
sys£rvi˚s
;

2234 
	}
}

2236 
u8_t


2237 
	$sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2239 
u8_t
 
id
, 
£t_ok
;

2241 i‡(
vÆue
) {}

2242 
£t_ok
 = 0;

2243 
id
 = 
od
->
id_ö°_±r
[0];

2244 
id
)

2247 i‡((
sysc⁄è˘_±r
 !
sysc⁄è˘_deÁu…
) &&

2248 (
Àn
 <= 255))

2250 
£t_ok
 = 1;

2254 i‡((
sy¢ame_±r
 !
sy¢ame_deÁu…
) &&

2255 (
Àn
 <= 255))

2257 
£t_ok
 = 1;

2261 i‡((
sy¶oˇti⁄_±r
 !
sy¶oˇti⁄_deÁu…
) &&

2262 (
Àn
 <= 255))

2264 
£t_ok
 = 1;

2268  
£t_ok
;

2269 
	}
}

2272 
	$sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2274 
u8_t
 
id
;

2276 
id
 = 
od
->
id_ö°_±r
[0];

2277 
id
)

2280 
	`oc°∫˝y
(
sysc⁄è˘_±r
,
vÆue
,
Àn
);

2281 *
sysc⁄è˘_Àn_±r
 = 
Àn
;

2284 
	`oc°∫˝y
(
sy¢ame_±r
,
vÆue
,
Àn
);

2285 *
sy¢ame_Àn_±r
 = 
Àn
;

2288 
	`oc°∫˝y
(
sy¶oˇti⁄_±r
,
vÆue
,
Àn
);

2289 *
sy¶oˇti⁄_Àn_±r
 = 
Àn
;

2292 
	}
}

2302 
	$öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2305 
idít_Àn
 += 1;

2306 
idít
 -= 1;

2307 i‡(
idít_Àn
 == 2)

2309 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2310 
od
->
id_ö°_±r
 = 
idít
;

2312 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2313 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2314 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2315 
od
->
v_Àn
 = (
s32_t
);

2319 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("interfaces_get_object_def:Ço scalar\n"));

2320 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2322 
	}
}

2333 
	$öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2335 i‡(
Àn
){}

2336 i‡(
od
->
id_ö°_±r
[0] == 1)

2338 
s32_t
 *
söt_±r
 = 
vÆue
;

2339 *
söt_±r
 = 
iÊi°_roŸ
.
cou¡
;

2341 
	}
}

2351 
	$i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2353 
u8_t
 
id
;

2356 
idít_Àn
 += 1;

2357 
idít
 -= 1;

2358 i‡(
idít_Àn
 == 2)

2360 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2361 
od
->
id_ö°_±r
 = 
idít
;

2363 
id
 = 
idít
[0];

2364 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡i„¡ry.%"
U16_F
"\n",(
u16_t
)
id
));

2365 
id
)

2371 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2372 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2373 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2374 
od
->
v_Àn
 = (
s32_t
);

2377 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2378 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2379 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2381 
od
->
v_Àn
 = 2;

2385 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2386 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2387 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

2388 
od
->
v_Àn
 = (
u32_t
);

2392 
√tif
 *netif;

2394 
	`¢mp_ifödext⁄ëif
(
idít
[1], &
√tif
);

2395 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2396 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2397 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2398 
od
->
v_Àn
 = 
√tif
->
hwaddr_Àn
;

2402 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2403 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2404 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2405 
od
->
v_Àn
 = (
s32_t
);

2408 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2409 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2410 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2411 
od
->
v_Àn
 = (
u32_t
);

2424 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2425 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2426 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2427 
od
->
v_Àn
 = (
u32_t
);

2431 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2432 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2433 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2434 
od
->
v_Àn
 = 
if•ecific
.
Àn
 * (
s32_t
);

2437 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço such object\n"));

2438 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2444 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço scalar\n"));

2445 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2447 
	}
}

2458 
	$i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2460 
√tif
 *netif;

2461 
u8_t
 
id
;

2463 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2464 
id
 = 
od
->
id_ö°_±r
[0];

2465 
id
)

2469 
s32_t
 *
söt_±r
 = 
vÆue
;

2470 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2474 
	`oc°∫˝y
(
vÆue
,(
u8_t
*)
√tif
->
«me
,
Àn
);

2478 
s32_t
 *
söt_±r
 = 
vÆue
;

2479 *
söt_±r
 = 
√tif
->
lök_ty≥
;

2484 
s32_t
 *
söt_±r
 = 
vÆue
;

2485 *
söt_±r
 = 
√tif
->
mtu
;

2490 
u32_t
 *
uöt_±r
 = 
vÆue
;

2491 *
uöt_±r
 = 
√tif
->
lök_•ìd
;

2495 
	`oc°∫˝y
(
vÆue
,
√tif
->
hwaddr
,
Àn
);

2498 #i‡
LWIP_NETIF_LINK_CALLBACK


2500 
s32_t
 *
söt_±r
 = 
vÆue
;

2501 i‡(
	`√tif_is_up
(
√tif
))

2503 i‡(
	`√tif_is_lök_up
(
√tif
))

2505 *
söt_±r
 = 1;

2509 *
söt_±r
 = 7;

2514 *
söt_±r
 = 2;

2521 
s32_t
 *
söt_±r
 = 
vÆue
;

2522 i‡(
	`√tif_is_up
(
√tif
))

2524 *
söt_±r
 = 1;

2528 *
söt_±r
 = 2;

2534 
u32_t
 *
uöt_±r
 = 
vÆue
;

2535 *
uöt_±r
 = 
√tif
->
ts
;

2540 
u32_t
 *
uöt_±r
 = 
vÆue
;

2541 *
uöt_±r
 = 
√tif
->
iföo˘ës
;

2546 
u32_t
 *
uöt_±r
 = 
vÆue
;

2547 *
uöt_±r
 = 
√tif
->
iföuˇ°pkts
;

2552 
u32_t
 *
uöt_±r
 = 
vÆue
;

2553 *
uöt_±r
 = 
√tif
->
ifönuˇ°pkts
;

2558 
u32_t
 *
uöt_±r
 = 
vÆue
;

2559 *
uöt_±r
 = 
√tif
->
ifödisˇrds
;

2566 
u32_t
 *
uöt_±r
 = 
vÆue
;

2567 *
uöt_±r
 = 0;

2572 
u32_t
 *
uöt_±r
 = 
vÆue
;

2573 *
uöt_±r
 = 
√tif
->
ifouto˘ës
;

2578 
u32_t
 *
uöt_±r
 = 
vÆue
;

2579 *
uöt_±r
 = 
√tif
->
ifoutuˇ°pkts
;

2584 
u32_t
 *
uöt_±r
 = 
vÆue
;

2585 *
uöt_±r
 = 
√tif
->
ifouäuˇ°pkts
;

2590 
u32_t
 *
uöt_±r
 = 
vÆue
;

2591 *
uöt_±r
 = 
√tif
->
ifoutdisˇrds
;

2597 
u32_t
 *
uöt_±r
 = 
vÆue
;

2598 *
uöt_±r
 = 0;

2604 
u32_t
 *
uöt_±r
 = 
vÆue
;

2605 *
uöt_±r
 = 0;

2609 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
if•ecific
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

2612 
	}
}

2614 #i‡!
SNMP_SAFE_REQUESTS


2615 
u8_t


2616 
	$i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2618 
√tif
 *netif;

2619 
u8_t
 
id
, 
£t_ok
;

2621 
£t_ok
 = 0;

2622 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2623 
id
 = 
od
->
id_ö°_±r
[0];

2624 
id
)

2628 
s32_t
 *
söt_±r
 = 
vÆue
;

2629 i‡(*
söt_±r
 == 1 || *sint_ptr == 2)

2630 
£t_ok
 = 1;

2634  
£t_ok
;

2635 
	}
}

2638 
	$i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2640 
√tif
 *netif;

2641 
u8_t
 
id
;

2643 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2644 
id
 = 
od
->
id_ö°_±r
[0];

2645 
id
)

2649 
s32_t
 *
söt_±r
 = 
vÆue
;

2650 i‡(*
söt_±r
 == 1)

2652 
	`√tif_£t_up
(
√tif
);

2654 i‡(*
söt_±r
 == 2)

2656 
	`√tif_£t_down
(
√tif
);

2661 
	}
}

2672 
	$©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2675 
idít_Àn
 += 5;

2676 
idít
 -= 5;

2678 i‡(
idít_Àn
 == 6)

2680 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2681 
od
->
id_ö°_±r
 = 
idít
;

2683 
idít
[0])

2686 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2687 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2688 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2689 
od
->
v_Àn
 = (
s32_t
);

2692 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2693 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2694 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2695 
od
->
v_Àn
 = 6;

2698 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2699 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2700 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

2701 
od
->
v_Àn
 = 4;

2704 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço such object\n"));

2705 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2711 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço scalar\n"));

2712 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2714 
	}
}

2717 
	$©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2719 #i‡
LWIP_ARP


2720 
u8_t
 
id
;

2721 
ëh_addr
* 
ëhaddr_ªt
;

2722 
ù_addr
* 
ùaddr_ªt
;

2724 
ù_addr
 
ù
;

2725 
√tif
 *netif;

2727 i‡(
Àn
) {}

2729 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2730 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

2731 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

2733 #i‡
LWIP_ARP


2734 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

2736 
id
 = 
od
->
id_ö°_±r
[0];

2737 
id
)

2741 
s32_t
 *
söt_±r
 = 
vÆue
;

2742 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2747 
ëh_addr
 *
d°
 = 
vÆue
;

2749 *
d°
 = *
ëhaddr_ªt
;

2754 
ù_addr
 *
d°
 = 
vÆue
;

2756 *
d°
 = *
ùaddr_ªt
;

2762 
	}
}

2765 
	$ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2767 
u8_t
 
id
;

2770 
idít_Àn
 += 1;

2771 
idít
 -= 1;

2772 i‡(
idít_Àn
 == 2)

2774 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2775 
od
->
id_ö°_±r
 = 
idít
;

2777 
id
 = 
idít
[0];

2778 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡ù.%"
U16_F
".0\n",(
u16_t
)
id
));

2779 
id
)

2783 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2784 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2785 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2786 
od
->
v_Àn
 = (
s32_t
);

2805 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2806 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2807 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2808 
od
->
v_Àn
 = (
u32_t
);

2811 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2812 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2813 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2814 
od
->
v_Àn
 = (
s32_t
);

2817 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço such object\n"));

2818 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2824 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço scalar\n"));

2825 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2827 
	}
}

2830 
	$ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2832 
u8_t
 
id
;

2834 i‡(
Àn
) {}

2835 
id
 = 
od
->
id_ö°_±r
[0];

2836 
id
)

2840 
s32_t
 *
söt_±r
 = 
vÆue
;

2841 #i‡
IP_FORWARD


2843 *
söt_±r
 = 1;

2846 *
söt_±r
 = 2;

2852 
s32_t
 *
söt_±r
 = 
vÆue
;

2853 *
söt_±r
 = 
IP_DEFAULT_TTL
;

2858 
u32_t
 *
uöt_±r
 = 
vÆue
;

2859 *
uöt_±r
 = 
ùöª˚ives
;

2864 
u32_t
 *
uöt_±r
 = 
vÆue
;

2865 *
uöt_±r
 = 
ùöhdªº‹s
;

2870 
u32_t
 *
uöt_±r
 = 
vÆue
;

2871 *
uöt_±r
 = 
ùöaddªº‹s
;

2876 
u32_t
 *
uöt_±r
 = 
vÆue
;

2877 *
uöt_±r
 = 
ùf‹wd©agøms
;

2882 
u32_t
 *
uöt_±r
 = 
vÆue
;

2883 *
uöt_±r
 = 
ùöunknow≈rŸos
;

2888 
u32_t
 *
uöt_±r
 = 
vÆue
;

2889 *
uöt_±r
 = 
ùödisˇrds
;

2894 
u32_t
 *
uöt_±r
 = 
vÆue
;

2895 *
uöt_±r
 = 
ùödñivîs
;

2900 
u32_t
 *
uöt_±r
 = 
vÆue
;

2901 *
uöt_±r
 = 
ùouåeque°s
;

2906 
u32_t
 *
uöt_±r
 = 
vÆue
;

2907 *
uöt_±r
 = 
ùoutdisˇrds
;

2912 
u32_t
 *
uöt_±r
 = 
vÆue
;

2913 *
uöt_±r
 = 
ùouä‹ouãs
;

2918 
s32_t
 *
söt_±r
 = 
vÆue
;

2919 #i‡
IP_REASSEMBLY


2920 *
söt_±r
 = 
IP_REASS_MAXAGE
;

2922 *
söt_±r
 = 0;

2928 
u32_t
 *
uöt_±r
 = 
vÆue
;

2929 *
uöt_±r
 = 
ùªasmªqds
;

2934 
u32_t
 *
uöt_±r
 = 
vÆue
;

2935 *
uöt_±r
 = 
ùªasmoks
;

2940 
u32_t
 *
uöt_±r
 = 
vÆue
;

2941 *
uöt_±r
 = 
ùªasmÁûs
;

2946 
u32_t
 *
uöt_±r
 = 
vÆue
;

2947 *
uöt_±r
 = 
ù‰agoks
;

2952 
u32_t
 *
uöt_±r
 = 
vÆue
;

2953 *
uöt_±r
 = 
ù‰agÁûs
;

2958 
u32_t
 *
uöt_±r
 = 
vÆue
;

2959 *
uöt_±r
 = 
ù‰ag¸óãs
;

2965 
u32_t
 *
uöt_±r
 = 
vÆue
;

2966 *
uöt_±r
 = 
ùroutögdisˇrds
;

2970 
	}
}

2982 
u8_t


2983 
	$ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2985 
u8_t
 
id
, 
£t_ok
;

2986 
s32_t
 *
söt_±r
 = 
vÆue
;

2988 i‡(
Àn
) {}

2989 
£t_ok
 = 0;

2990 
id
 = 
od
->
id_ö°_±r
[0];

2991 
id
)

2994 #i‡
IP_FORWARD


2996 i‡(*
söt_±r
 == 1)

2999 i‡(*
söt_±r
 == 2)

3002 
£t_ok
 = 1;

3006 i‡(*
söt_±r
 =
IP_DEFAULT_TTL
)

3008 
£t_ok
 = 1;

3012  
£t_ok
;

3013 
	}
}

3016 
	$ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3019 
idít_Àn
 += 4;

3020 
idít
 -= 4;

3022 i‡(
idít_Àn
 == 5)

3024 
u8_t
 
id
;

3026 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3027 
od
->
id_ö°_±r
 = 
idít
;

3029 
id
 = 
idít
[0];

3030 
id
)

3034 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3035 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3036 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3037 
od
->
v_Àn
 = 4;

3042 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3043 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3044 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3045 
od
->
v_Àn
 = (
s32_t
);

3048 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço such object\n"));

3049 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3055 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço scalar\n"));

3056 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3058 
	}
}

3061 
	$ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3063 
u8_t
 
id
;

3064 
u16_t
 
ifidx
;

3065 
ù_addr
 
ù
;

3066 
√tif
 *√ti‡
√tif_li°
;

3068 i‡(
Àn
) {}

3069 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3070 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3071 
ifidx
 = 0;

3072 (
√tif
 !
NULL
Ë&& !
	`ù_addr_cmp
(&
ù
, &√tif->
ù_addr
))

3074 
√tif
 =Çëif->
√xt
;

3075 
ifidx
++;

3078 i‡(
√tif
 !
NULL
)

3080 
id
 = 
od
->
id_ö°_±r
[0];

3081 
id
)

3085 
ù_addr
 *
d°
 = 
vÆue
;

3086 *
d°
 = 
√tif
->
ù_addr
;

3091 
s32_t
 *
söt_±r
 = 
vÆue
;

3092 *
söt_±r
 = 
ifidx
 + 1;

3097 
ù_addr
 *
d°
 = 
vÆue
;

3098 *
d°
 = 
√tif
->
√tmask
;

3103 
s32_t
 *
söt_±r
 = 
vÆue
;

3107 *
söt_±r
 = 
ù_addr_brﬂdˇ°
.
addr
 & 1;

3112 
s32_t
 *
söt_±r
 = 
vÆue
;

3113 #i‡
IP_REASSEMBLY


3118 *
söt_±r
 = (
IP_HLEN
 + ((
IP_REASS_MAX_PBUFS
/2) *

3119 (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
 - 
IP_HLEN
)));

3123 *
söt_±r
 = 0;

3129 
	}
}

3137 
	$ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3139 
u8_t
 
id
;

3142 
idít_Àn
 += 4;

3143 
idít
 -= 4;

3145 i‡(
idít_Àn
 == 5)

3147 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3148 
od
->
id_ö°_±r
 = 
idít
;

3150 
id
 = 
idít
[0];

3151 
id
)

3156 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3157 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3158 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3159 
od
->
v_Àn
 = 4;

3169 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3170 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3171 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3172 
od
->
v_Àn
 = (
s32_t
);

3175 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3176 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3177 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3178 
od
->
v_Àn
 = (
s32_t
);

3182 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3183 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3184 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

3185 
od
->
v_Àn
 = 
ùrouãöfo
.
Àn
 * (
s32_t
);

3188 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço such object\n"));

3189 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3195 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço scalar\n"));

3196 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3198 
	}
}

3201 
	$ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3203 
√tif
 *netif;

3204 
ù_addr
 
de°
;

3205 
s32_t
 *
idít
;

3206 
u8_t
 
id
;

3208 
idít
 = 
od
->
id_ö°_±r
;

3209 
	`¢mp_oidtoù
(&
idít
[1], &
de°
);

3210 
de°
.
addr
 = 
	`ht⁄l
(dest.addr);

3212 i‡(
de°
.
addr
 == 0)

3215 
√tif
 = 
√tif_deÁu…
;

3220 
√tif
 = 
√tif_li°
;

3221 (
√tif
 !
NULL
) &&

3222 !
	`ù_addr_√tcmp
(&
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) )

3224 
√tif
 =Çëif->
√xt
;

3227 i‡(
√tif
 !
NULL
)

3229 
id
 = 
idít
[0];

3230 
id
)

3234 
ù_addr
 *
d°
 = 
vÆue
;

3236 i‡(
de°
.
addr
 == 0)

3239 
d°
->
addr
 = 0;

3244 
d°
->
addr
 = 
√tif
->
ù_addr
.add∏&Çëif->
√tmask
.addr;

3250 
s32_t
 *
söt_±r
 = 
vÆue
;

3252 
	`¢mp_√ti·oifödex
(
√tif
, 
söt_±r
);

3257 
s32_t
 *
söt_±r
 = 
vÆue
;

3259 i‡(
de°
.
addr
 == 0)

3262 *
söt_±r
 = 1;

3267 *
söt_±r
 = 0;

3276 
s32_t
 *
söt_±r
 = 
vÆue
;

3278 *
söt_±r
 = -1;

3283 
ù_addr
 *
d°
 = 
vÆue
;

3285 i‡(
de°
.
addr
 == 0)

3288 *
d°
 = 
√tif
->
gw
;

3293 *
d°
 = 
√tif
->
ù_addr
;

3299 
s32_t
 *
söt_±r
 = 
vÆue
;

3301 i‡(
de°
.
addr
 == 0)

3304 *
söt_±r
 = 4;

3309 *
söt_±r
 = 3;

3315 
s32_t
 *
söt_±r
 = 
vÆue
;

3317 *
söt_±r
 = 2;

3322 
s32_t
 *
söt_±r
 = 
vÆue
;

3325 *
söt_±r
 = 0;

3330 
ù_addr
 *
d°
 = 
vÆue
;

3332 i‡(
de°
.
addr
 == 0)

3335 
d°
->
addr
 = 0;

3340 *
d°
 = 
√tif
->
√tmask
;

3345 
	`obje˘idn˝y
((
s32_t
*)
vÆue
, (s32_t*)
ùrouãöfo
.
id
, (
u8_t
)(
Àn
 / (s32_t)));

3349 
	}
}

3352 
	$ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3355 
idít_Àn
 += 5;

3356 
idít
 -= 5;

3358 i‡(
idít_Àn
 == 6)

3360 
u8_t
 
id
;

3362 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3363 
od
->
id_ö°_±r
 = 
idít
;

3365 
id
 = 
idít
[0];

3366 
id
)

3370 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3371 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3372 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3373 
od
->
v_Àn
 = (
s32_t
);

3376 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3377 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3378 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

3379 
od
->
v_Àn
 = 6;

3382 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3383 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3384 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3385 
od
->
v_Àn
 = 4;

3388 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço such object\n"));

3389 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3395 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço scalar\n"));

3396 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3398 
	}
}

3401 
	$ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3403 #i‡
LWIP_ARP


3404 
u8_t
 
id
;

3405 
ëh_addr
* 
ëhaddr_ªt
;

3406 
ù_addr
* 
ùaddr_ªt
;

3408 
ù_addr
 
ù
;

3409 
√tif
 *netif;

3411 i‡(
Àn
) {}

3413 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

3414 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

3415 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3417 #i‡
LWIP_ARP


3418 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

3420 
id
 = 
od
->
id_ö°_±r
[0];

3421 
id
)

3425 
s32_t
 *
söt_±r
 = 
vÆue
;

3426 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

3431 
ëh_addr
 *
d°
 = 
vÆue
;

3433 *
d°
 = *
ëhaddr_ªt
;

3438 
ù_addr
 *
d°
 = 
vÆue
;

3440 *
d°
 = *
ùaddr_ªt
;

3445 
s32_t
 *
söt_±r
 = 
vÆue
;

3447 *
söt_±r
 = 3;

3453 
	}
}

3456 
	$icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3459 
idít_Àn
 += 1;

3460 
idít
 -= 1;

3461 i‡((
idít_Àn
 == 2) &&

3462 (
idít
[0] > 0) && (ident[0] < 27))

3464 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3465 
od
->
id_ö°_±r
 = 
idít
;

3467 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3468 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3469 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3470 
od
->
v_Àn
 = (
u32_t
);

3474 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("icmp_get_object_def:Ço scalar\n"));

3475 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3477 
	}
}

3480 
	$icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3482 
u32_t
 *
uöt_±r
 = 
vÆue
;

3483 
u8_t
 
id
;

3485 i‡(
Àn
){}

3486 
id
 = 
od
->
id_ö°_±r
[0];

3487 
id
)

3490 *
uöt_±r
 = 
icmpömsgs
;

3493 *
uöt_±r
 = 
icmpöîr‹s
;

3496 *
uöt_±r
 = 
icmpöde°uƒóchs
;

3499 *
uöt_±r
 = 
icmpötimìxcds
;

3502 *
uöt_±r
 = 
icmpö∑rm¥obs
;

3505 *
uöt_±r
 = 
icmpö§cquíchs
;

3508 *
uöt_±r
 = 
icmpöªdúe˘s
;

3511 *
uöt_±r
 = 
icmpöechos
;

3514 *
uöt_±r
 = 
icmpöech‹ïs
;

3517 *
uöt_±r
 = 
icmpötime°amps
;

3520 *
uöt_±r
 = 
icmpötime°am¥ïs
;

3523 *
uöt_±r
 = 
icmpöaddrmasks
;

3526 *
uöt_±r
 = 
icmpöaddrmaskªps
;

3529 *
uöt_±r
 = 
icmpoutmsgs
;

3532 *
uöt_±r
 = 
icmpouãº‹s
;

3535 *
uöt_±r
 = 
icmpoutde°uƒóchs
;

3538 *
uöt_±r
 = 
icmpouâimìxcds
;

3541 *
uöt_±r
 = 
icmpouç¨m¥obs
;

3544 *
uöt_±r
 = 
icmpout§cquíchs
;

3547 *
uöt_±r
 = 
icmpouåedúe˘s
;

3550 *
uöt_±r
 = 
icmpouãchos
;

3553 *
uöt_±r
 = 
icmpouãch‹ïs
;

3556 *
uöt_±r
 = 
icmpouâime°amps
;

3559 *
uöt_±r
 = 
icmpouâime°am¥ïs
;

3562 *
uöt_±r
 = 
icmpouèddrmasks
;

3565 *
uöt_±r
 = 
icmpouèddrmaskªps
;

3568 
	}
}

3570 #i‡
LWIP_TCP


3573 
	$t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3575 
u8_t
 
id
;

3578 
idít_Àn
 += 1;

3579 
idít
 -= 1;

3580 i‡(
idít_Àn
 == 2)

3582 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3583 
od
->
id_ö°_±r
 = 
idít
;

3585 
id
 = 
idít
[0];

3586 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3588 
id
)

3594 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3595 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3596 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3597 
od
->
v_Àn
 = (
s32_t
);

3608 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3609 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3610 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3611 
od
->
v_Àn
 = (
u32_t
);

3614 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3615 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3616 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

3617 
od
->
v_Àn
 = (
u32_t
);

3620 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço such object\n"));

3621 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3627 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço scalar\n"));

3628 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3630 
	}
}

3633 
	$t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3635 
u32_t
 *
uöt_±r
 = 
vÆue
;

3636 
s32_t
 *
söt_±r
 = 
vÆue
;

3637 
u8_t
 
id
;

3639 i‡(
Àn
){}

3640 
id
 = 
od
->
id_ö°_±r
[0];

3641 
id
)

3644 *
söt_±r
 = 4;

3649 *
söt_±r
 = 1000;

3654 *
söt_±r
 = 60000;

3657 *
söt_±r
 = 
MEMP_NUM_TCP_PCB
;

3660 *
uöt_±r
 = 
t˝a˘ive›ís
;

3663 *
uöt_±r
 = 
t˝∑ssive›ís
;

3666 *
uöt_±r
 = 
t˝©ãm±Áûs
;

3669 *
uöt_±r
 = 
t˝e°abª£ts
;

3673 
u16_t
 
t˝cuºe°ab
 = 0;

3674 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

3675 
pcb
 !
NULL
)

3677 i‡((
pcb
->
°©e
 =
ESTABLISHED
) ||

3678 (
pcb
->
°©e
 =
CLOSE_WAIT
))

3680 
t˝cuºe°ab
++;

3682 
pcb
 =Öcb->
√xt
;

3684 *
uöt_±r
 = 
t˝cuºe°ab
;

3688 *
uöt_±r
 = 
t˝ö£gs
;

3691 *
uöt_±r
 = 
t˝out£gs
;

3694 *
uöt_±r
 = 
t˝ªå™s£gs
;

3697 *
uöt_±r
 = 
t˝öîrs
;

3700 *
uöt_±r
 = 
t˝ouå°s
;

3703 
	}
}

3704 #ifde‡
THIS_SEEMS_UNUSED


3706 
	$t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3709 
idít_Àn
 += 10;

3710 
idít
 -= 10;

3712 i‡(
idít_Àn
 == 11)

3714 
u8_t
 
id
;

3716 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3717 
od
->
id_ö°_±r
 = 
idít
;

3719 
id
 = 
idít
[0];

3720 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3722 
id
)

3725 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3726 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3727 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3728 
od
->
v_Àn
 = (
s32_t
);

3732 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3733 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3734 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3735 
od
->
v_Àn
 = 4;

3739 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3740 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3741 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3742 
od
->
v_Àn
 = (
s32_t
);

3745 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3746 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3752 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3753 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3755 
	}
}

3758 
	$t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3760 
ù_addr
 
lù
, 
rù
;

3761 
u16_t
 
Õ‹t
, 
Ω‹t
;

3762 
s32_t
 *
idít
;

3764 
idít
 = 
od
->
id_ö°_±r
;

3765 
	`¢mp_oidtoù
(&
idít
[1], &
lù
);

3766 
lù
.
addr
 = 
	`ht⁄l
(lip.addr);

3767 
Õ‹t
 = 
idít
[5];

3768 
	`¢mp_oidtoù
(&
idít
[6], &
rù
);

3769 
rù
.
addr
 = 
	`ht⁄l
(rip.addr);

3770 
Ω‹t
 = 
idít
[10];

3773 
	}
}

3778 
	$udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3781 
idít_Àn
 += 1;

3782 
idít
 -= 1;

3783 i‡((
idít_Àn
 == 2) &&

3784 (
idít
[0] > 0) && (ident[0] < 6))

3786 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3787 
od
->
id_ö°_±r
 = 
idít
;

3789 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3790 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3791 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3792 
od
->
v_Àn
 = (
u32_t
);

3796 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udp_get_object_def:Ço scalar\n"));

3797 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3799 
	}
}

3802 
	$udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3804 
u32_t
 *
uöt_±r
 = 
vÆue
;

3805 
u8_t
 
id
;

3807 i‡(
Àn
){}

3808 
id
 = 
od
->
id_ö°_±r
[0];

3809 
id
)

3812 *
uöt_±r
 = 
udpöd©agøms
;

3815 *
uöt_±r
 = 
ud≤›‹ts
;

3818 *
uöt_±r
 = 
udpöîr‹s
;

3821 *
uöt_±r
 = 
udpoutd©agøms
;

3824 
	}
}

3827 
	$ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3830 
idít_Àn
 += 5;

3831 
idít
 -= 5;

3833 i‡(
idít_Àn
 == 6)

3835 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3836 
od
->
id_ö°_±r
 = 
idít
;

3838 
idít
[0])

3841 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3842 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3843 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3844 
od
->
v_Àn
 = 4;

3847 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3848 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3849 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3850 
od
->
v_Àn
 = (
s32_t
);

3853 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço such object\n"));

3854 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3860 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço scalar\n"));

3861 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3863 
	}
}

3866 
	$ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3868 
u8_t
 
id
;

3869 
udp_pcb
 *
pcb
;

3870 
ù_addr
 
ù
;

3871 
u16_t
 
p‹t
;

3873 i‡(
Àn
){}

3874 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3875 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3876 
p‹t
 = 
od
->
id_ö°_±r
[5];

3878 
pcb
 = 
udp_pcbs
;

3879 (
pcb
 !
NULL
) &&

3880 !((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

3881 (
pcb
->
loˇl_p‹t
 =
p‹t
)))

3883 
pcb
 =Öcb->
√xt
;

3886 i‡(
pcb
 !
NULL
)

3888 
id
 = 
od
->
id_ö°_±r
[0];

3889 
id
)

3893 
ù_addr
 *
d°
 = 
vÆue
;

3894 *
d°
 = 
pcb
->
loˇl_ù
;

3899 
s32_t
 *
söt_±r
 = 
vÆue
;

3900 *
söt_±r
 = 
pcb
->
loˇl_p‹t
;

3905 
	}
}

3908 
	$¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3911 
idít_Àn
 += 1;

3912 
idít
 -= 1;

3913 i‡(
idít_Àn
 == 2)

3915 
u8_t
 
id
;

3917 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3918 
od
->
id_ö°_±r
 = 
idít
;

3920 
id
 = 
idít
[0];

3921 
id
)

3950 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3951 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3952 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3953 
od
->
v_Àn
 = (
u32_t
);

3956 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3957 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3958 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3959 
od
->
v_Àn
 = (
s32_t
);

3962 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço such object\n"));

3963 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço scalar\n"));

3970 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3972 
	}
}

3975 
	$¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3977 
u32_t
 *
uöt_±r
 = 
vÆue
;

3978 
u8_t
 
id
;

3980 i‡(
Àn
){}

3981 
id
 = 
od
->
id_ö°_±r
[0];

3982 
id
)

3985 *
uöt_±r
 = 
¢mpöpkts
;

3988 *
uöt_±r
 = 
¢mpouçkts
;

3991 *
uöt_±r
 = 
¢mpöbadvîsi⁄s
;

3994 *
uöt_±r
 = 
¢mpöbadcommunôy«mes
;

3997 *
uöt_±r
 = 
¢mpöbadcommunôyu£s
;

4000 *
uöt_±r
 = 
¢mpöa¢∑r£îrs
;

4003 *
uöt_±r
 = 
¢mpötoobigs
;

4006 *
uöt_±r
 = 
¢mpönosuch«mes
;

4009 *
uöt_±r
 = 
¢mpöbadvÆues
;

4012 *
uöt_±r
 = 
¢mpöªad⁄lys
;

4015 *
uöt_±r
 = 
¢mpögíîrs
;

4018 *
uöt_±r
 = 
¢mpötŸÆªqv¨s
;

4021 *
uöt_±r
 = 
¢mpötŸÆ£tv¨s
;

4024 *
uöt_±r
 = 
¢mpögëªque°s
;

4027 *
uöt_±r
 = 
¢mpögë√xts
;

4030 *
uöt_±r
 = 
¢mpö£åeque°s
;

4033 *
uöt_±r
 = 
¢mpögëª•⁄£s
;

4036 *
uöt_±r
 = 
¢mpöå≠s
;

4039 *
uöt_±r
 = 
¢mpouâoobigs
;

4042 *
uöt_±r
 = 
¢mpouäosuch«mes
;

4045 *
uöt_±r
 = 
¢mpoutbadvÆues
;

4048 *
uöt_±r
 = 
¢mpoutgíîrs
;

4051 *
uöt_±r
 = 
¢mpoutgëªque°s
;

4054 *
uöt_±r
 = 
¢mpoutgë√xts
;

4057 *
uöt_±r
 = 
¢mpout£åeque°s
;

4060 *
uöt_±r
 = 
¢mpoutgëª•⁄£s
;

4063 *
uöt_±r
 = 
¢mpouâøps
;

4066 *
uöt_±r
 = *
¢m≥«bÀauthíå≠s_±r
;

4069 
	}
}

4078 
u8_t


4079 
	$¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4081 
u8_t
 
id
, 
£t_ok
;

4083 i‡(
Àn
) {}

4084 
£t_ok
 = 0;

4085 
id
 = 
od
->
id_ö°_±r
[0];

4086 i‡(
id
 == 30)

4089 
s32_t
 *
söt_±r
 = 
vÆue
;

4091 i‡(
¢m≥«bÀauthíå≠s_±r
 !&
¢m≥«bÀauthíå≠s_deÁu…
)

4094 i‡((*
söt_±r
 == 1) || (*sint_ptr == 2))

4096 
£t_ok
 = 1;

4102 i‡(*
söt_±r
 =
¢m≥«bÀauthíå≠s_deÁu…
)

4104 
£t_ok
 = 1;

4108  
£t_ok
;

4109 
	}
}

4112 
	$¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4114 
u8_t
 
id
;

4116 i‡(
Àn
) {}

4117 
id
 = 
od
->
id_ö°_±r
[0];

4118 i‡(
id
 == 30)

4121 
s32_t
 *
söt_±r
 = 
vÆue
;

4122 *
¢m≥«bÀauthíå≠s_±r
 = *
söt_±r
;

4124 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/mib_structs.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/¢mp_°ru˘s.h
"

40 
	~"lwù/mem.h
"

43 c⁄° 
s32_t
 
	g¥efix
[4] = {1, 3, 6, 1};

45 
	#NODE_STACK_SIZE
 (
LWIP_SNMP_OBJ_ID_LEN
)

	)

47 
	sn£


50 
mib_node
* 
	mr_±r
;

52 
s32_t
 
	mr_id
;

54 
u8_t
 
	mr_∆
;

56 
u8_t
 
	gnode_°ack_˙t
;

57 
n£
 
	gnode_°ack
[
NODE_STACK_SIZE
];

63 
	$push_node
(
n£
* 
node
)

65 
	`LWIP_ASSERT
("node_°ack_˙à< NODE_STACK_SIZE",
node_°ack_˙t
 < 
NODE_STACK_SIZE
);

66 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("push_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

67 i‡(
node_°ack_˙t
 < 
NODE_STACK_SIZE
)

69 
node_°ack
[
node_°ack_˙t
] = *
node
;

70 
node_°ack_˙t
++;

72 
	}
}

78 
	$p›_node
(
n£
* 
node
)

80 i‡(
node_°ack_˙t
 > 0)

82 
node_°ack_˙t
--;

83 *
node
 = 
node_°ack
[
node_°ack_˙t
];

85 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("p›_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

86 
	}
}

94 
	$¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif)

96 
√tif
 *
nif
 = 
√tif_li°
;

97 
u16_t
 
i
, 
ifidx
;

99 
ifidx
 = 
ifödex
 - 1;

100 
i
 = 0;

101 (
nif
 !
NULL
Ë&& (
i
 < 
ifidx
))

103 
nif
 =Çif->
√xt
;

104 
i
++;

106 *
√tif
 = 
nif
;

107 
	}
}

115 
	$¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
)

117 
√tif
 *
nif
 = 
√tif_li°
;

118 
u16_t
 
i
;

120 
i
 = 0;

121 
nif
 !
√tif
)

123 
nif
 =Çif->
√xt
;

124 
i
++;

126 *
ifidx
 = 
i
+1;

127 
	}
}

135 
	$¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
)

137 
u32_t
 
ùa
;

139 
ùa
 = 
idít
[0];

140 
ùa
 <<= 8;

141 
ùa
 |
idít
[1];

142 
ùa
 <<= 8;

143 
ùa
 |
idít
[2];

144 
ùa
 <<= 8;

145 
ùa
 |
idít
[3];

146 
ù
->
addr
 = 
ùa
;

147 
	}
}

155 
	$¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
)

157 
u32_t
 
ùa
;

159 
ùa
 = 
ù
->
addr
;

160 
idít
[0] = (
ùa
 >> 24) & 0xff;

161 
idít
[1] = (
ùa
 >> 16) & 0xff;

162 
idít
[2] = (
ùa
 >> 8) & 0xff;

163 
idít
[3] = 
ùa
 & 0xff;

164 
	}
}

166 
mib_li°_node
 *

167 
	$¢mp_mib_ _Æloc
(
s32_t
 
id
)

169 
mib_li°_node
 *
 
;

171 
 
 = (
mib_li°_node
 *)
	`mem_mÆloc
((mib_list_node));

172 i‡(
 
 !
NULL
)

174 
 
->
¥ev
 = 
NULL
;

175 
 
->
√xt
 = 
NULL
;

176 
 
->
objid
 = 
id
;

177 
 
->
≈å
 = 
NULL
;

179  
 
;

180 
	}
}

183 
	$¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
)

185 
	`mem_‰ì
(
 
);

186 
	}
}

188 
mib_li°_roŸnode
 *

189 
	$¢mp_mib_Ãn_Æloc
()

191 
mib_li°_roŸnode
 *
Ãn
;

193 
Ãn
 = (
mib_li°_roŸnode
*)
	`mem_mÆloc
((mib_list_rootnode));

194 i‡(
Ãn
 !
NULL
)

196 
Ãn
->
gë_obje˘_def
 = 
nﬁófs_gë_obje˘_def
;

197 
Ãn
->
gë_vÆue
 = 
nﬁófs_gë_vÆue
;

198 
Ãn
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

199 
Ãn
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

200 
Ãn
->
node_ty≥
 = 
MIB_NODE_LR
;

201 
Ãn
->
maxÀngth
 = 0;

202 
Ãn
->
hód
 = 
NULL
;

203 
Ãn
->
èû
 = 
NULL
;

204 
Ãn
->
cou¡
 = 0;

206  
Ãn
;

207 
	}
}

210 
	$¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
)

212 
	`mem_‰ì
(
Ãn
);

213 
	}
}

226 
s8_t


227 
	$¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
)

229 
mib_li°_node
 *
¬
;

230 
s8_t
 
ö£π
;

232 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

235 
ö£π
 = 0;

236 i‡(
∫
->
hód
 =
NULL
)

239 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯em±yÜi° objid==%"
S32_F
"\n",
objid
));

240 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

241 i‡(
¬
 !
NULL
)

243 
∫
->
hód
 = 
¬
;

244 
∫
->
èû
 = 
¬
;

245 *
ö¢
 = 
¬
;

246 
ö£π
 = 1;

250 
ö£π
 = -1;

255 
mib_li°_node
 *
n
;

257 
n
 = 
∫
->
hód
;

258 (
n
 !
NULL
Ë&& (
ö£π
 == 0))

260 i‡(
n
->
objid
 == objid)

263 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("nodêÆªadyÅhîêobjid==%"
S32_F
"\n",
objid
));

264 *
ö¢
 = 
n
;

265 
ö£π
 = 2;

267 i‡(
n
->
objid
 < objid)

269 i‡(
n
->
√xt
 =
NULL
)

272 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†èû objid==%"
S32_F
"\n",
objid
));

273 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

274 i‡(
¬
 !
NULL
)

276 
¬
->
√xt
 = 
NULL
;

277 
¬
->
¥ev
 = 
n
;

278 
n
->
√xt
 = 
¬
;

279 
∫
->
èû
 = 
¬
;

280 *
ö¢
 = 
¬
;

281 
ö£π
 = 1;

286 
ö£π
 = -1;

292 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("traverseÜist\n"));

293 
n
 =Ç->
√xt
;

300 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†n->¥ev, objid==%"
S32_F
",Ç\n",
objid
));

301 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

302 i‡(
¬
 !
NULL
)

304 i‡(
n
->
¥ev
 =
NULL
)

307 
¬
->
√xt
 = 
n
;

308 
¬
->
¥ev
 = 
NULL
;

309 
∫
->
hód
 = 
¬
;

310 
n
->
¥ev
 = 
¬
;

315 
¬
->
√xt
 = 
n
;

316 
¬
->
¥ev
 = 
n
->prev;

317 
n
->
¥ev
->
√xt
 = 
¬
;

318 
n
->
¥ev
 = 
¬
;

320 *
ö¢
 = 
¬
;

321 
ö£π
 = 1;

326 
ö£π
 = -1;

331 i‡(
ö£π
 == 1)

333 
∫
->
cou¡
 += 1;

335 
	`LWIP_ASSERT
("ö£π !0",
ö£π
 != 0);

336  
ö£π
;

337 
	}
}

348 
s8_t


349 
	$¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
)

351 
s8_t
 
fc
;

352 
mib_li°_node
 *
n
;

354 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

355 
n
 = 
∫
->
hód
;

356 (
n
 !
NULL
Ë&& (n->
objid
 != objid))

358 
n
 =Ç->
√xt
;

360 i‡(
n
 =
NULL
)

362 
fc
 = 0;

364 i‡(
n
->
≈å
 =
NULL
)

367 
fc
 = 1;

371 
mib_li°_roŸnode
 *
r
;

373 i‡(
n
->
≈å
->
node_ty≥
 =
MIB_NODE_LR
)

375 
r
 = (
mib_li°_roŸnode
 *)
n
->
≈å
;

376 i‡(
r
->
cou¡
 > 1)

379 
fc
 = 2;

384 
fc
 = 1;

390 
fc
 = 3;

393 *
‚
 = 
n
;

394  
fc
;

395 
	}
}

405 
mib_li°_roŸnode
 *

406 
	$¢mp_mib_node_dñëe
(
mib_li°_roŸnode
 *
∫
, 
mib_li°_node
 *
n
)

408 
mib_li°_roŸnode
 *
√xt
;

410 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

411 
	`LWIP_ASSERT
("¿!NULL",
n
 !
NULL
);

414 
√xt
 = (
mib_li°_roŸnode
*)(
n
->
≈å
);

415 
∫
->
cou¡
 -= 1;

417 i‡(
n
 =
∫
->
hód
)

419 
∫
->
hód
 = 
n
->
√xt
;

420 i‡(
n
->
√xt
 !
NULL
)

423 
n
->
√xt
->
¥ev
 = 
NULL
;

426 i‡(
n
 =
∫
->
èû
)

428 
∫
->
èû
 = 
n
->
¥ev
;

429 i‡(
n
->
¥ev
 !
NULL
)

432 
n
->
¥ev
->
√xt
 = 
NULL
;

438 
n
->
¥ev
->
√xt
 =Ç->next;

439 
n
->
√xt
->
¥ev
 =Ç->prev;

441 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("‰ìÜi° objid==%"
S32_F
"\n",
n
->
objid
));

442 
	`¢mp_mib_ _‰ì
(
n
);

443 i‡(
∫
->
cou¡
 == 0)

445 
∫
->
hód
 = 
NULL
;

446 
∫
->
èû
 = 
NULL
;

448  
√xt
;

449 
	}
}

462 
mib_node
 *

463 
	$¢mp_£¨ch_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
)

465 
u8_t
 
node_ty≥
, 
ext_Àvñ
;

467 
ext_Àvñ
 = 0;

468 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("node==%∞*idít==%"
S32_F
"\n",(*)
node
,*
idít
));

469 
node
 !
NULL
)

471 
node_ty≥
 = 
node
->node_type;

472 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

474 
mib_¨øy_node
 *
™
;

475 
u16_t
 
i
;

477 i‡(
idít_Àn
 > 0)

480 
™
 = (
mib_¨øy_node
 *)
node
;

481 
i
 = 0;

482 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] !*
idít
))

484 
i
++;

486 i‡(
i
 < 
™
->
maxÀngth
)

489 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

490 i‡(
™
->
≈å
[
i
] =
NULL
)

494 
≈
->
idít_Àn
 = ident_len;

495 
≈
->
idít
 = ident;

496  (
mib_node
*)
™
;

501 
idít
++;

502 
idít_Àn
--;

503 
node
 = 
™
->
≈å
[
i
];

509 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™ sórch faûed *idít==%"
S32_F
"\n",*
idít
));

510  
NULL
;

516 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("an search failed, short object identifier\n"));

517  
NULL
;

520 if(
node_ty≥
 =
MIB_NODE_LR
)

522 
mib_li°_roŸnode
 *
Ãn
;

523 
mib_li°_node
 *
 
;

525 i‡(
idít_Àn
 > 0)

528 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

529 
 
 = 
Ãn
->
hód
;

531 (
 
 !
NULL
Ë&& ( ->
objid
 !*
idít
))

533 
 
 =Ün->
√xt
;

535 i‡(
 
 !
NULL
)

538 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

539 i‡(
 
->
≈å
 =
NULL
)

541 
≈
->
idít_Àn
 = ident_len;

542 
≈
->
idít
 = ident;

543  (
mib_node
*)
Ãn
;

548 
idít_Àn
--;

549 
idít
++;

550 
node
 = 
 
->
≈å
;

556 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("  sórch faûed *idít==%"
S32_F
"\n",*
idít
));

557  
NULL
;

563 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ln search failed, short object identifier\n"));

564  
NULL
;

567 if(
node_ty≥
 =
MIB_NODE_EX
)

569 
mib_exã∫Æ_node
 *
í
;

570 
u16_t
 
i
, 
Àn
;

572 i‡(
idít_Àn
 > 0)

575 
í
 = (
mib_exã∫Æ_node
 *)
node
;

577 
i
 = 0;

578 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

579 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) != 0))

581 
i
++;

583 i‡(
i
 < 
Àn
)

585 
s32_t
 
debug_id
;

587 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
debug_id
);

588 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid==%"
S32_F
" *idít==%"S32_F"\n",
debug_id
,*
idít
));

589 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

591 
≈
->
idít_Àn
 = ident_len;

592 
≈
->
idít
 = ident;

593  (
mib_node
*)
í
;

598 
idít_Àn
--;

599 
idít
++;

600 
ext_Àvñ
++;

606 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í sórch faûed *idít==%"
S32_F
"\n",*
idít
));

607  
NULL
;

613 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("en search failed, short object identifier\n"));

614  
NULL
;

617 i‡(
node_ty≥
 =
MIB_NODE_SC
)

619 
mib_sˇœr_node
 *
¢
;

621 
¢
 = (
mib_sˇœr_node
 *)
node
;

622 i‡((
idít_Àn
 =1Ë&& (*
idít
 == 0))

624 
≈
->
idít_Àn
 = ident_len;

625 
≈
->
idít
 = ident;

626  (
mib_node
*)
¢
;

631 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("search failed, invalid object identifierÜength\n"));

632  
NULL
;

638 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

639  
NULL
;

643 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode==%p\n",(*)
node
));

644  
NULL
;

645 
	}
}

650 
u8_t


651 
	$em±y_èbÀ
(
mib_node
 *
node
)

653 
u8_t
 
node_ty≥
;

654 
u8_t
 
em±y
 = 0;

656 i‡(
node
 !
NULL
)

658 
node_ty≥
 = 
node
->node_type;

659 i‡(
node_ty≥
 =
MIB_NODE_LR
)

661 
mib_li°_roŸnode
 *
Ãn
;

662 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

663 i‡((
Ãn
->
cou¡
 =0Ë|| (Ãn->
hód
 =
NULL
))

665 
em±y
 = 1;

668 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

670 
mib_¨øy_node
 *
™
;

671 
™
 = (
mib_¨øy_node
 *)
node
;

672 i‡((
™
->
maxÀngth
 =0Ë|| (™->
≈å
 =
NULL
))

674 
em±y
 = 1;

677 i‡(
node_ty≥
 =
MIB_NODE_EX
)

679 
mib_exã∫Æ_node
 *
í
;

680 
í
 = (
mib_exã∫Æ_node
 *)
node
;

681 i‡(
í
->
åì_Àvñs
 == 0)

683 
em±y
 = 1;

687  
em±y
;

688 
	}
}

693 
mib_node
 *

694 
	$¢mp_ex∑nd_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

696 
u8_t
 
node_ty≥
, 
ext_Àvñ
, 
˛imb_åì
;

698 
ext_Àvñ
 = 0;

700 
node_°ack_˙t
 = 0;

701 
node
 !
NULL
)

703 
˛imb_åì
 = 0;

704 
node_ty≥
 = 
node
->node_type;

705 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

707 
mib_¨øy_node
 *
™
;

708 
u16_t
 
i
;

711 
™
 = (
mib_¨øy_node
 *)
node
;

712 i‡(
idít_Àn
 > 0)

714 
i
 = 0;

715 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] < *
idít
))

717 
i
++;

719 i‡(
i
 < 
™
->
maxÀngth
)

721 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

723 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
];

724 (
oidªt
->
Àn
)++;

726 i‡(
™
->
≈å
[
i
] =
NULL
)

728 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

730 i‡(
™
->
objid
[
i
] > *
idít
)

732  (
mib_node
*)
™
;

734 i‡((
i
 + 1Ë< 
™
->
maxÀngth
)

737 (
oidªt
->
Àn
)--;

738 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
 + 1];

739 (
oidªt
->
Àn
)++;

740  (
mib_node
*)
™
;

745 (
oidªt
->
Àn
)--;

746 
˛imb_åì
 = 1;

751 
u8_t
 
j
;

752 
n£
 
cur_node
;

754 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

756 
j
 = 
i
 + 1;

757 (
j
 < 
™
->
maxÀngth
Ë&& (
	`em±y_èbÀ
◊n->
≈å
[j])))

759 
j
++;

761 i‡(
j
 < 
™
->
maxÀngth
)

763 
cur_node
.
r_±r
 = 
™
->
≈å
[
j
];

764 
cur_node
.
r_id
 = 
™
->
objid
[
j
];

765 
cur_node
.
r_∆
 = 0;

769 
cur_node
.
r_±r
 = 
NULL
;

771 
	`push_node
(&
cur_node
);

772 i‡(
™
->
objid
[
i
] =*
idít
)

774 
idít_Àn
--;

775 
idít
++;

780 
idít_Àn
 = 0;

783 
node
 = 
™
->
≈å
[
i
];

789 
˛imb_åì
 = 1;

794 
u8_t
 
j
;

796 
j
 = 0;

797 (
j
 < 
™
->
maxÀngth
Ë&& 
	`em±y_èbÀ
◊n->
≈å
[j]))

799 
j
++;

801 i‡(
j
 < 
™
->
maxÀngth
)

803 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·án->objid[j]==%"
S32_F
"\n",
™
->
objid
[
j
]));

804 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
j
];

805 (
oidªt
->
Àn
)++;

806 i‡(
™
->
≈å
[
j
] =
NULL
)

809  (
mib_node
*)
™
;

814 
node
 = 
™
->
≈å
[
j
];

820 
˛imb_åì
 = 1;

824 if(
node_ty≥
 =
MIB_NODE_LR
)

826 
mib_li°_roŸnode
 *
Ãn
;

827 
mib_li°_node
 *
 
;

830 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

831 i‡(
idít_Àn
 > 0)

833 
 
 = 
Ãn
->
hód
;

835 (
 
 !
NULL
Ë&& ( ->
objid
 < *
idít
))

837 
 
 =Ün->
√xt
;

839 i‡(
 
 !
NULL
)

841 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

842 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
objid
;

843 (
oidªt
->
Àn
)++;

844 i‡(
 
->
≈å
 =
NULL
)

847 i‡(
 
->
objid
 > *
idít
)

849  (
mib_node
*)
Ãn
;

851 i‡(
 
->
√xt
 !
NULL
)

854 (
oidªt
->
Àn
)--;

855 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
√xt
->
objid
;

856 (
oidªt
->
Àn
)++;

857  (
mib_node
*)
Ãn
;

862 (
oidªt
->
Àn
)--;

863 
˛imb_åì
 = 1;

868 
mib_li°_node
 *
jn
;

869 
n£
 
cur_node
;

872 
jn
 = 
 
->
√xt
;

873 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

875 
jn
 = jn->
√xt
;

877 i‡(
jn
 !
NULL
)

879 
cur_node
.
r_±r
 = 
jn
->
≈å
;

880 
cur_node
.
r_id
 = 
jn
->
objid
;

881 
cur_node
.
r_∆
 = 0;

885 
cur_node
.
r_±r
 = 
NULL
;

887 
	`push_node
(&
cur_node
);

888 i‡(
 
->
objid
 =*
idít
)

890 
idít_Àn
--;

891 
idít
++;

896 
idít_Àn
 = 0;

899 
node
 = 
 
->
≈å
;

906 
˛imb_åì
 = 1;

911 
mib_li°_node
 *
jn
;

913 
jn
 = 
Ãn
->
hód
;

914 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

916 
jn
 = jn->
√xt
;

918 i‡(
jn
 !
NULL
)

920 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À· jn->objid==%"
S32_F
"\n",
jn
->
objid
));

921 
oidªt
->
id
[oidªt->
Àn
] = 
jn
->
objid
;

922 (
oidªt
->
Àn
)++;

923 i‡(
jn
->
≈å
 =
NULL
)

926 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("jn->nptr == NULL\n"));

927  (
mib_node
*)
Ãn
;

932 
node
 = 
jn
->
≈å
;

938 
˛imb_åì
 = 1;

942 if(
node_ty≥
 =
MIB_NODE_EX
)

944 
mib_exã∫Æ_node
 *
í
;

945 
s32_t
 
ex_id
;

948 
í
 = (
mib_exã∫Æ_node
 *)
node
;

949 i‡(
idít_Àn
 > 0)

951 
u16_t
 
i
, 
Àn
;

953 
i
 = 0;

954 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

955 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) < 0))

957 
i
++;

959 i‡(
i
 < 
Àn
)

962 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
ex_id
);

963 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
ex_id
,*
idít
));

964 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

965 (
oidªt
->
Àn
)++;

967 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

971 i‡(
ex_id
 > *
idít
)

973  (
mib_node
*)
í
;

975 i‡((
i
 + 1Ë< 
Àn
)

978 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
 + 1,&
ex_id
);

979 (
oidªt
->
Àn
)--;

980 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

981 (
oidªt
->
Àn
)++;

982  (
mib_node
*)
í
;

987 (
oidªt
->
Àn
)--;

988 
˛imb_åì
 = 1;

993 
u8_t
 
j
;

994 
n£
 
cur_node
;

996 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

998 
j
 = 
i
 + 1;

999 i‡(
j
 < 
Àn
)

1002 
cur_node
.
r_±r
 = 
node
;

1003 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
j
,&
cur_node
.
r_id
);

1004 
cur_node
.
r_∆
 = 
ext_Àvñ
 + 1;

1008 
cur_node
.
r_±r
 = 
NULL
;

1010 
	`push_node
(&
cur_node
);

1011 i‡(
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,
i
,*
idít
) == 0)

1013 
idít_Àn
--;

1014 
idít
++;

1019 
idít_Àn
 = 0;

1022 
ext_Àvñ
++;

1028 
˛imb_åì
 = 1;

1034 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,0,&
ex_id
);

1035 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·Én->objid==%"
S32_F
"\n",
ex_id
));

1036 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

1037 (
oidªt
->
Àn
)++;

1038 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

1041 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("(ext_level + 1) ==Én->tree_levels\n"));

1042  (
mib_node
*)
í
;

1047 
ext_Àvñ
++;

1051 if(
node_ty≥
 =
MIB_NODE_SC
)

1053 
mib_sˇœr_node
 *
¢
;

1056 
¢
 = (
mib_sˇœr_node
 *)
node
;

1057 i‡(
idít_Àn
 > 0)

1060 
˛imb_åì
 = 1;

1065 
oidªt
->
id
[oidªt->
Àn
] = 0;

1066 (
oidªt
->
Àn
)++;

1068 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("completed scalarÜeaf\n"));

1069  (
mib_node
*)
¢
;

1075 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

1076  
NULL
;

1079 i‡(
˛imb_åì
)

1081 
n£
 
chûd
;

1084 
chûd
.
r_±r
 = 
NULL
;

1085 
chûd
.
r_id
 = 0;

1086 
chûd
.
r_∆
 = 0;

1087 (
node_°ack_˙t
 > 0Ë&& (
chûd
.
r_±r
 =
NULL
))

1089 
	`p›_node
(&
chûd
);

1091 (
oidªt
->
Àn
)--;

1093 i‡(
chûd
.
r_±r
 !
NULL
)

1096 
idít_Àn
 = 0;

1097 
oidªt
->
id
[oidªt->
Àn
] = 
chûd
.
r_id
;

1098 
oidªt
->
Àn
++;

1099 
node
 = 
chûd
.
r_±r
;

1100 
ext_Àvñ
 = 
chûd
.
r_∆
;

1105 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("expand failed,ÅreeÉnds here\n"));

1106  
NULL
;

1111 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode==%p\n",(*)
node
));

1112  
NULL
;

1113 
	}
}

1122 
u8_t


1123 
	$¢mp_iso_¥efix_t°
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

1125 i‡((
idít_Àn
 > 3) &&

1126 (
idít
[0] == 1) && (ident[1] == 3) &&

1127 (
idít
[2] == 6) && (ident[3] == 1))

1135 
	}
}

1148 
u8_t


1149 
	$¢mp_iso_¥efix_ex∑nd
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

1151 c⁄° 
s32_t
 *
¥efix_±r
;

1152 
s32_t
 *
ªt_±r
;

1153 
u8_t
 
i
;

1155 
i
 = 0;

1156 
¥efix_±r
 = &
¥efix
[0];

1157 
ªt_±r
 = &
oidªt
->
id
[0];

1158 
idít_Àn
 = ((ident_len < 4)?ident_len:4);

1159 (
i
 < 
idít_Àn
Ë&& ((*
idít
Ë<(*
¥efix_±r
)))

1161 *
ªt_±r
++ = *
¥efix_±r
++;

1162 
idít
++;

1163 
i
++;

1165 i‡(
i
 =
idít_Àn
)

1168 
i
 < 4)

1170 *
ªt_±r
++ = *
¥efix_±r
++;

1171 
i
++;

1173 
oidªt
->
Àn
 = 
i
;

1181 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/msg_in.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/udp.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/¢mp.h
"

44 
	~"lwù/¢mp_a¢1.h
"

45 
	~"lwù/¢mp_msg.h
"

46 
	~"lwù/¢mp_°ru˘s.h
"

48 
	~<°rög.h
>

52 c⁄° 
s32_t
 
	g¢mp_vîsi⁄
 = 0;

54 c⁄° 
	g¢mp_publiccommunôy
[7] = "public";

57 
¢mp_msg_p°©
 
	gmsg_öput_li°
[
SNMP_CONCURRENT_REQUESTS
];

59 
udp_pcb
 *
	g¢mp1_pcb
;

61 
¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

62 
îr_t
 
¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

63 
îr_t
 
¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

71 
	$¢mp_öô
()

73 
¢mp_msg_p°©
 *
msg_ps
;

74 
u8_t
 
i
;

76 
¢mp1_pcb
 = 
	`udp_√w
();

77 i‡(
¢mp1_pcb
 !
NULL
)

79 
	`udp_ªcv
(
¢mp1_pcb
, 
¢mp_ªcv
, (*)
SNMP_IN_PORT
);

80 
	`udp_böd
(
¢mp1_pcb
, 
IP_ADDR_ANY
, 
SNMP_IN_PORT
);

82 
msg_ps
 = &
msg_öput_li°
[0];

83 
i
=0; i<
SNMP_CONCURRENT_REQUESTS
; i++)

85 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

86 
msg_ps
->
îr‹_ödex
 = 0;

87 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

88 
msg_ps
++;

90 
å≠_msg
.
pcb
 = 
¢mp1_pcb
;

93 
	`¢mp_cﬁd°¨t_å≠
();

94 
	}
}

97 
	$¢mp_îr‹_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
, 
u8_t
 
îr‹
)

99 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

100 
msg_ps
->
outvb
 = msg_ps->
övb
;

101 
msg_ps
->
övb
.
hód
 = 
NULL
;

102 
msg_ps
->
övb
.
èû
 = 
NULL
;

103 
msg_ps
->
övb
.
cou¡
 = 0;

104 
msg_ps
->
îr‹_°©us
 = 
îr‹
;

105 
msg_ps
->
îr‹_ödex
 = 1 + msg_ps->
vb_idx
;

106 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

107 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

108 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

109 
	}
}

112 
	$¢mp_ok_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
)

114 
îr_t
 
îr_ªt
;

116 
îr_ªt
 = 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

117 i‡(
îr_ªt
 =
ERR_MEM
)

123 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_evíà%"
S32_F
"\n",
msg_ps
->
îr‹_°©us
));

126 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
övb
);

127 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

128 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

129 
	}
}

138 
	$¢mp_msg_gë_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

140 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

142 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

144 
mib_exã∫Æ_node
 *
í
;

145 
¢mp_«me_±r
 
≈
;

148 
í
 = 
msg_ps
->
ext_mib_node
;

149 
≈
 = 
msg_ps
->
ext_«me_±r
;

152 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

153 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

155 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

156 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

160 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

162 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

165 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

167 
mib_exã∫Æ_node
 *
í
;

168 
¢mp_v¨böd
 *
vb
;

171 
í
 = 
msg_ps
->
ext_mib_node
;

174 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

175 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

176 i‡(
vb
 !
NULL
)

178 
vb
->
√xt
 = 
NULL
;

179 
vb
->
¥ev
 = 
NULL
;

182 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

183 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

185 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

186 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

188 
vb
->
vÆue_ty≥
 = 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
;

189 
vb
->
vÆue_Àn
 = 
msg_ps
->
ext_obje˘_def
.
v_Àn
;

190 i‡(
vb
->
vÆue_Àn
 > 0)

192 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

193 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

194 i‡(
vb
->
vÆue
 !
NULL
)

196 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

197 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

199 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

200 
msg_ps
->
vb_idx
 += 1;

204 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

205 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço variable space\n"));

206 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

207 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

208 
	`mem_‰ì
(
vb
);

209 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

215 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

216 
vb
->
vÆue
 = 
NULL
;

217 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

219 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

220 
msg_ps
->
vb_idx
 += 1;

225 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

226 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço outvb space\n"));

227 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

231 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

232 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

234 
mib_node
 *
mn
;

235 
¢mp_«me_±r
 
≈
;

237 i‡(
msg_ps
->
vb_idx
 == 0)

239 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

243 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

246 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

248 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

249 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

250 i‡(
mn
 !
NULL
)

252 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

255 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

257 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

259 
msg_ps
->
ext_mib_node
 = 
í
;

260 
msg_ps
->
ext_«me_±r
 = 
≈
;

262 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

267 
obj_def
 
obje˘_def
;

269 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

270 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

271 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

273 
mn
 = mn;

278 
mn
 = 
NULL
;

280 i‡(
mn
 !
NULL
)

282 
¢mp_v¨böd
 *
vb
;

284 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

286 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

287 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

288 i‡(
vb
 !
NULL
)

290 
vb
->
√xt
 = 
NULL
;

291 
vb
->
¥ev
 = 
NULL
;

294 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

295 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

297 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

298 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

300 
vb
->
vÆue_ty≥
 = 
obje˘_def
.
a¢_ty≥
;

301 
vb
->
vÆue_Àn
 = 
obje˘_def
.
v_Àn
;

302 i‡(
vb
->
vÆue_Àn
 > 0)

304 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

305 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

306 i‡(
vb
->
vÆue
 !
NULL
)

308 
mn
->
	`gë_vÆue
(&
obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

309 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

310 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

311 
msg_ps
->
vb_idx
 += 1;

315 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate variable space\n"));

316 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

317 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

318 
	`mem_‰ì
(
vb
);

319 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

325 
vb
->
vÆue
 = 
NULL
;

326 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

327 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

328 
msg_ps
->
vb_idx
 += 1;

333 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate outvb space\n"));

334 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

342 
mn
 = 
NULL
;

344 i‡(
mn
 =
NULL
)

347 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

350 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

351 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

353 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

355 
	}
}

364 
	$¢mp_msg_gë√xt_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

366 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë√xt_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

368 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

370 
mib_exã∫Æ_node
 *
í
;

373 
í
 = 
msg_ps
->
ext_mib_node
;

376 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1], &msg_ps->
ext_obje˘_def
);

377 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

379 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

380 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

384 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1]);

386 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

389 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

391 
mib_exã∫Æ_node
 *
í
;

392 
¢mp_v¨böd
 *
vb
;

395 
í
 = 
msg_ps
->
ext_mib_node
;

397 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
msg_ps
->
ext_oid
,

398 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
,

399 
msg_ps
->
ext_obje˘_def
.
v_Àn
);

400 i‡(
vb
 !
NULL
)

402 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

403 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

404 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

405 
msg_ps
->
vb_idx
 += 1;

409 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

410 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_getnext_event: couldn'tállocate outvb space\n"));

411 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

415 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

416 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

418 
mib_node
 *
mn
;

419 
¢mp_obj_id
 
oid
;

421 i‡(
msg_ps
->
vb_idx
 == 0)

423 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

427 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

429 i‡(
	`¢mp_iso_¥efix_ex∑nd
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
, &
oid
))

431 i‡(
msg_ps
->
vb_±r
->
idít_Àn
 > 3)

434 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
,

435 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

436 
msg_ps
->
vb_±r
->
idít
 + 4, &
oid
);

441 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
, 0, 
NULL
, &
oid
);

446 
mn
 = 
NULL
;

448 i‡(
mn
 !
NULL
)

450 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

453 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

455 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

457 
msg_ps
->
ext_mib_node
 = 
í
;

458 
msg_ps
->
ext_oid
 = 
oid
;

460 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 1, &
oid
.
id
[oid.
Àn
 - 1]);

465 
obj_def
 
obje˘_def
;

466 
¢mp_v¨böd
 *
vb
;

468 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

469 
mn
->
	`gë_obje˘_def
(1, &
oid
.
id
[oid.
Àn
 - 1], &
obje˘_def
);

471 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
obje˘_def
.
a¢_ty≥
, obje˘_def.
v_Àn
);

472 i‡(
vb
 !
NULL
)

474 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

475 
mn
->
	`gë_vÆue
(&
obje˘_def
, obje˘_def.
v_Àn
, 
vb
->
vÆue
);

476 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

477 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

478 
msg_ps
->
vb_idx
 += 1;

482 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_recv couldn'tállocate outvb space\n"));

483 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

487 i‡(
mn
 =
NULL
)

490 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

493 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

494 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

496 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

498 
	}
}

507 
	$¢mp_msg_£t_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

509 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_£t_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

511 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

513 
mib_exã∫Æ_node
 *
í
;

514 
¢mp_«me_±r
 
≈
;

517 
í
 = 
msg_ps
->
ext_mib_node
;

518 
≈
 = 
msg_ps
->
ext_«me_±r
;

521 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

522 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

524 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_TEST
;

525 
í
->
	`£t_ã°_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

529 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

531 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

534 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_TEST
)

536 
mib_exã∫Æ_node
 *
í
;

539 
í
 = 
msg_ps
->
ext_mib_node
;

541 i‡(
msg_ps
->
ext_obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

543 i‡((
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
 =msg_ps->
vb_±r
->
vÆue_ty≥
) &&

544 (
í
->
	`£t_ã°_a
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
,

545 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

547 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

548 
msg_ps
->
vb_idx
 += 1;

552 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

554 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

559 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

561 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

564 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
)

566 
mib_exã∫Æ_node
 *
í
;

567 
¢mp_«me_±r
 
≈
;

570 
í
 = 
msg_ps
->
ext_mib_node
;

571 
≈
 = 
msg_ps
->
ext_«me_±r
;

574 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

575 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

577 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_VALUE
;

578 
í
->
	`£t_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

579 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

583 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

585 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_GENERROR
);

588 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_VALUE
)

590 
mib_exã∫Æ_node
 *
í
;

593 
í
 = 
msg_ps
->
ext_mib_node
;

594 
í
->
	`£t_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

595 
msg_ps
->
vb_±r
->
vÆue_Àn
, msg_ps->vb_±r->
vÆue
);

598 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

599 
msg_ps
->
vb_idx
 += 1;

603 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

604 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

606 
mib_node
 *
mn
;

607 
¢mp_«me_±r
 
≈
;

609 i‡(
msg_ps
->
vb_idx
 == 0)

611 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

615 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

618 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

620 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

621 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

622 i‡(
mn
 !
NULL
)

624 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

627 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

629 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

631 
msg_ps
->
ext_mib_node
 = 
í
;

632 
msg_ps
->
ext_«me_±r
 = 
≈
;

634 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

639 
obj_def
 
obje˘_def
;

641 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

642 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

643 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

645 
mn
 = mn;

650 
mn
 = 
NULL
;

652 i‡(
mn
 !
NULL
)

654 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_TEST
;

656 i‡(
obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

658 i‡((
obje˘_def
.
a¢_ty≥
 =
msg_ps
->
vb_±r
->
vÆue_ty≥
) &&

659 (
mn
->
	`£t_ã°
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

661 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

662 
msg_ps
->
vb_idx
 += 1;

667 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

673 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

681 
mn
 = 
NULL
;

683 i‡(
mn
 =
NULL
)

686 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

690 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

691 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

693 
msg_ps
->
vb_idx
 = 0;

694 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

698 (
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

699 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

701 
mib_node
 *
mn
;

702 
¢mp_«me_±r
 
≈
;

704 i‡(
msg_ps
->
vb_idx
 == 0)

706 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

710 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

713 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

714 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

717 i‡(
mn
 !
NULL
)

719 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

722 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

724 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
;

726 
msg_ps
->
ext_mib_node
 = 
í
;

727 
msg_ps
->
ext_«me_±r
 = 
≈
;

729 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

734 
obj_def
 
obje˘_def
;

736 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF_S
;

737 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

738 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

739 
mn
->
	`£t_vÆue
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

740 
msg_ps
->
vb_idx
 += 1;

744 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

745 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

750 
msg_ps
->
outvb
 = msg_ps->
övb
;

751 
msg_ps
->
övb
.
hód
 = 
NULL
;

752 
msg_ps
->
övb
.
èû
 = 
NULL
;

753 
msg_ps
->
övb
.
cou¡
 = 0;

754 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

756 
	}
}

766 
	$¢mp_msg_evít
(
u8_t
 
ªque°_id
)

768 
¢mp_msg_p°©
 *
msg_ps
;

770 i‡(
ªque°_id
 < 
SNMP_CONCURRENT_REQUESTS
)

772 
msg_ps
 = &
msg_öput_li°
[
ªque°_id
];

773 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
)

775 
	`¢mp_msg_gë√xt_evít
(
ªque°_id
, 
msg_ps
);

777 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
)

779 
	`¢mp_msg_gë_evít
(
ªque°_id
, 
msg_ps
);

781 if(
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

783 
	`¢mp_msg_£t_evít
(
ªque°_id
, 
msg_ps
);

786 
	}
}

791 
	$¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

793 
udp_hdr
 *
udphdr
;

796 
	`LWIP_UNUSED_ARG
(
¨g
);

798 if(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)){

799 
	`LWIP_ASSERT
("Can't moveÅo UDP header", 0);

800 
	`pbuf_‰ì
(
p
);

803 
udphdr
 = 
p
->
∑ylﬂd
;

806 i‡((
pcb
 =
¢mp1_pcb
Ë&& (
	`¡ohs
(
udphdr
->
de°
Ë=
SNMP_IN_PORT
))

808 
¢mp_msg_p°©
 *
msg_ps
;

809 
u8_t
 
ªq_idx
;

812 
msg_ps
 = &
msg_öput_li°
[0];

813 
ªq_idx
 = 0;

814 (
ªq_idx
<
SNMP_CONCURRENT_REQUESTS
Ë&& (
msg_ps
->
°©e
 !
SNMP_MSG_EMPTY
))

816 
ªq_idx
++;

817 
msg_ps
++;

819 i‡(
ªq_idx
 !
SNMP_CONCURRENT_REQUESTS
)

821 
îr_t
 
îr_ªt
;

822 
u16_t
 
∑ylﬂd_Àn
;

823 
u16_t
 
∑ylﬂd_ofs
;

824 
u16_t
 
v¨böd_ofs
 = 0;

827 
	`¢mp_öc_¢mpöpkts
();

829 
msg_ps
->
pcb
 =Öcb;

831 
msg_ps
->
sù
 = *
addr
;

833 
msg_ps
->
•
 = 
p‹t
;

835 
∑ylﬂd_Àn
 = 
	`¡ohs
(
udphdr
->
Àn
Ë- 
UDP_HLEN
;

838 
∑ylﬂd_ofs
 = 
UDP_HLEN
;

841 
îr_ªt
 = 
	`¢mp_pdu_hódî_check
(
p
, 
∑ylﬂd_ofs
, 
∑ylﬂd_Àn
, &
v¨böd_ofs
, 
msg_ps
);

842 i‡(((
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
) ||

843 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
) ||

844 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)) &&

845 ((
msg_ps
->
îr‹_°©us
 =
SNMP_ES_NOERROR
) &&

846 (
msg_ps
->
îr‹_ödex
 == 0)) )

849 
îr_ªt
 =Érr_ret;

854 
îr_ªt
 = 
ERR_ARG
;

856 i‡(
îr_ªt
 =
ERR_OK
)

858 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv ok, communôy %s\n", 
msg_ps
->
communôy
));

862 
îr_ªt
 = 
	`¢mp_pdu_dec_v¨bödli°
(
p
, 
v¨böd_ofs
, &v¨böd_ofs, 
msg_ps
);

863 i‡((
îr_ªt
 =
ERR_OK
Ë&& (
msg_ps
->
övb
.
cou¡
 > 0))

866 
	`pbuf_‰ì
(
p
);

868 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

869 
msg_ps
->
îr‹_ödex
 = 0;

871 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

873 
msg_ps
->
vb_idx
 = 0;

875 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv v¨böd c¡=%"
U16_F
"\n",(
u16_t
)
msg_ps
->
övb
.
cou¡
));

878 
	`¢mp_msg_evít
(
ªq_idx
);

885 
	`pbuf_‰ì
(
p
);

886 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_dec_varbindlist() failed\n"));

893 
	`pbuf_‰ì
(
p
);

894 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_header_check() failed\n"));

900 
	`pbuf_‰ì
(
p
);

906 
	`pbuf_‰ì
(
p
);

908 
	}
}

922 
îr_t


923 
	$¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

925 
îr_t
 
dîr
;

926 
u16_t
 
Àn
, 
ofs_ba£
;

927 
u8_t
 
Àn_o˘ës
;

928 
u8_t
 
ty≥
;

929 
s32_t
 
vîsi⁄
;

931 
ofs_ba£
 = 
ofs
;

932 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

933 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

934 i‡((
dîr
 !
ERR_OK
) ||

935 (
pdu_Àn
 !(1 + 
Àn_o˘ës
 + 
Àn
)) ||

936 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

938 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

939  
ERR_ARG
;

941 
ofs
 +(1 + 
Àn_o˘ës
);

942 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

943 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

944 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

947 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

948  
ERR_ARG
;

950 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
vîsi⁄
);

951 i‡(
dîr
 !
ERR_OK
)

954 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

955  
ERR_ARG
;

957 i‡(
vîsi⁄
 != 0)

960 
	`¢mp_öc_¢mpöbadvîsi⁄s
();

961  
ERR_ARG
;

963 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

964 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

965 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

966 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
)))

969 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

970  
ERR_ARG
;

972 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
SNMP_COMMUNITY_STR_LEN
, 
m_°©
->
communôy
);

973 i‡(
dîr
 !
ERR_OK
)

975 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

976  
ERR_ARG
;

979 
Àn
 = (÷í < (
SNMP_COMMUNITY_STR_LEN
))?(len):(SNMP_COMMUNITY_STR_LEN));

980 
m_°©
->
communôy
[
Àn
] = 0;

981 
m_°©
->
com_°æí
 = 
Àn
;

982 i‡(
	`°∫cmp
(
¢mp_publiccommunôy
, (c⁄° *)
m_°©
->
communôy
, 
SNMP_COMMUNITY_STR_LEN
) != 0)

985 
	`¢mp_öc_¢mpöbadcommunôy«mes
();

986 
	`¢mp_authÁû_å≠
();

987  
ERR_ARG
;

989 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

990 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

991 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

992 i‡(
dîr
 !
ERR_OK
)

994 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

995  
ERR_ARG
;

997 
ty≥
)

999 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_REQ
):

1001 
	`¢mp_öc_¢mpögëªque°s
();

1002 
dîr
 = 
ERR_OK
;

1004 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_NEXT_REQ
):

1006 
	`¢mp_öc_¢mpögë√xts
();

1007 
dîr
 = 
ERR_OK
;

1009 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
):

1011 
	`¢mp_öc_¢mpögëª•⁄£s
();

1012 
dîr
 = 
ERR_ARG
;

1014 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_SET_REQ
):

1016 
	`¢mp_öc_¢mpö£åeque°s
();

1017 
dîr
 = 
ERR_OK
;

1019 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
):

1021 
	`¢mp_öc_¢mpöå≠s
();

1022 
dîr
 = 
ERR_ARG
;

1025 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1026 
dîr
 = 
ERR_ARG
;

1029 i‡(
dîr
 !
ERR_OK
)

1032  
ERR_ARG
;

1034 
m_°©
->
π
 = 
ty≥
 & 0x1F;

1035 
ofs
 +(1 + 
Àn_o˘ës
);

1036 i‡(
Àn
 !(
pdu_Àn
 - (
ofs
 - 
ofs_ba£
)))

1039 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1040  
ERR_ARG
;

1042 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1043 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1044 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1047 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1048  
ERR_ARG
;

1050 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
rid
);

1051 i‡(
dîr
 !
ERR_OK
)

1054 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1055  
ERR_ARG
;

1057 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1058 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1059 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1060 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1063 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1064  
ERR_ARG
;

1068 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_°©us
);

1069 i‡(
dîr
 !
ERR_OK
)

1072 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1073  
ERR_ARG
;

1075 
m_°©
->
îr‹_°©us
)

1077 
SNMP_ES_TOOBIG
:

1078 
	`¢mp_öc_¢mpötoobigs
();

1080 
SNMP_ES_NOSUCHNAME
:

1081 
	`¢mp_öc_¢mpönosuch«mes
();

1083 
SNMP_ES_BADVALUE
:

1084 
	`¢mp_öc_¢mpöbadvÆues
();

1086 
SNMP_ES_READONLY
:

1087 
	`¢mp_öc_¢mpöªad⁄lys
();

1089 
SNMP_ES_GENERROR
:

1090 
	`¢mp_öc_¢mpögíîrs
();

1093 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1094 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1095 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1096 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1099 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1100  
ERR_ARG
;

1104 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_ödex
);

1105 i‡(
dîr
 !
ERR_OK
)

1108 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1109  
ERR_ARG
;

1111 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1112 *
ofs_ªt
 = 
ofs
;

1113  
ERR_OK
;

1114 
	}
}

1116 
îr_t


1117 
	$¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

1119 
îr_t
 
dîr
;

1120 
u16_t
 
Àn
, 
vb_Àn
;

1121 
u8_t
 
Àn_o˘ës
;

1122 
u8_t
 
ty≥
;

1125 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1126 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
vb_Àn
);

1127 i‡((
dîr
 !
ERR_OK
) ||

1128 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

1130 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1131  
ERR_ARG
;

1133 
ofs
 +(1 + 
Àn_o˘ës
);

1136 
m_°©
->
övb
.
cou¡
 = 0;

1137 
m_°©
->
övb
.
hód
 = 
NULL
;

1138 
m_°©
->
övb
.
èû
 = 
NULL
;

1140 
vb_Àn
 > 0)

1142 
¢mp_obj_id
 
oid
, 
oid_vÆue
;

1143 
¢mp_v¨böd
 *
vb
;

1145 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1146 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1147 i‡((
dîr
 !
ERR_OK
) ||

1148 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)) ||

1149 (
Àn
 =0Ë|| (À¿> 
vb_Àn
))

1151 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1153 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1154  
ERR_ARG
;

1156 
ofs
 +(1 + 
Àn_o˘ës
);

1157 
vb_Àn
 -(1 + 
Àn_o˘ës
);

1159 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1160 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1161 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
)))

1164 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1166 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1167  
ERR_ARG
;

1169 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid
);

1170 i‡(
dîr
 !
ERR_OK
)

1173 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1175 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1176  
ERR_ARG
;

1178 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1179 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1181 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1182 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1183 i‡(
dîr
 !
ERR_OK
)

1186 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1188 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1189  
ERR_ARG
;

1192 
ty≥
)

1194 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

1195 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
s32_t
));

1196 i‡(
vb
 !
NULL
)

1198 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1200 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1201 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1205 
dîr
 = 
ERR_ARG
;

1208 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

1209 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

1210 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

1211 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u32_t
));

1212 i‡(
vb
 !
NULL
)

1214 
u32_t
 *
v±r
 = 
vb
->
vÆue
;

1216 
dîr
 = 
	`¢mp_a¢1_dec_u32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1217 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1221 
dîr
 = 
ERR_ARG
;

1224 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

1225 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

1226 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
Àn
);

1227 i‡(
vb
 !
NULL
)

1229 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1230 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1234 
dîr
 = 
ERR_ARG
;

1237 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

1238 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 0);

1239 i‡(
vb
 !
NULL
)

1241 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1242 
dîr
 = 
ERR_OK
;

1246 
dîr
 = 
ERR_ARG
;

1249 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

1250 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid_vÆue
);

1251 i‡(
dîr
 =
ERR_OK
)

1253 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
oid_vÆue
.
Àn
 * (
s32_t
));

1254 i‡(
vb
 !
NULL
)

1256 
u8_t
 
i
 = 
oid_vÆue
.
Àn
;

1257 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1259 
i
 > 0)

1261 
i
--;

1262 
v±r
[
i
] = 
oid_vÆue
.
id
[i];

1264 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1265 
dîr
 = 
ERR_OK
;

1269 
dîr
 = 
ERR_ARG
;

1273 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

1274 i‡(
Àn
 == 4)

1277 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 4);

1278 i‡(
vb
 !
NULL
)

1280 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1281 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1285 
dîr
 = 
ERR_ARG
;

1290 
dîr
 = 
ERR_ARG
;

1294 
dîr
 = 
ERR_ARG
;

1297 i‡(
dîr
 !
ERR_OK
)

1299 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1301 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1302  
ERR_ARG
;

1304 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1305 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1308 i‡(
m_°©
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

1310 
	`¢mp_add_¢mpötŸÆ£tv¨s
(
m_°©
->
övb
.
cou¡
);

1314 
	`¢mp_add_¢mpötŸÆªqv¨s
(
m_°©
->
övb
.
cou¡
);

1317 *
ofs_ªt
 = 
ofs
;

1318  
ERR_OK
;

1319 
	}
}

1321 
¢mp_v¨böd
*

1322 
	$¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
)

1324 
¢mp_v¨böd
 *
vb
;

1326 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

1327 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

1328 i‡(
vb
 !
NULL
)

1330 
u8_t
 
i
;

1332 
vb
->
√xt
 = 
NULL
;

1333 
vb
->
¥ev
 = 
NULL
;

1334 
i
 = 
oid
->
Àn
;

1335 
vb
->
idít_Àn
 = 
i
;

1336 i‡(
i
 > 0)

1339 
vb
->
idít
 = (
s32_t
*)
	`mem_mÆloc
((s32_tË* 
i
);

1340 
	`LWIP_ASSERT
("vb->idíà!NULL",
vb
->
idít
 !
NULL
);

1341 i‡(
vb
->
idít
 =
NULL
)

1343 
	`mem_‰ì
(
vb
);

1344  
NULL
;

1346 
i
 > 0)

1348 
i
--;

1349 
vb
->
idít
[
i
] = 
oid
->
id
[i];

1355 
vb
->
idít
 = 
NULL
;

1357 
vb
->
vÆue_ty≥
 = 
ty≥
;

1358 
vb
->
vÆue_Àn
 = 
Àn
;

1359 i‡(
Àn
 > 0)

1362 
vb
->
vÆue
 = 
	`mem_mÆloc
(
Àn
);

1363 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

1364 i‡(
vb
->
vÆue
 =
NULL
)

1366 i‡(
vb
->
idít
 !
NULL
)

1368 
	`mem_‰ì
(
vb
->
idít
);

1370 
	`mem_‰ì
(
vb
);

1371  
NULL
;

1377 
vb
->
vÆue
 = 
NULL
;

1380  
vb
;

1381 
	}
}

1384 
	$¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
)

1386 i‡(
vb
->
vÆue
 !
NULL
 )

1388 
	`mem_‰ì
(
vb
->
vÆue
);

1390 i‡(
vb
->
idít
 !
NULL
 )

1392 
	`mem_‰ì
(
vb
->
idít
);

1394 
	`mem_‰ì
(
vb
);

1395 
	}
}

1398 
	$¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1400 
¢mp_v¨böd
 *
vb
, *
¥ev
;

1402 
vb
 = 
roŸ
->
èû
;

1403  
vb
 !
NULL
 )

1405 
¥ev
 = 
vb
->prev;

1406 
	`¢mp_v¨böd_‰ì
(
vb
);

1407 
vb
 = 
¥ev
;

1409 
roŸ
->
cou¡
 = 0;

1410 
roŸ
->
hód
 = 
NULL
;

1411 
roŸ
->
èû
 = 
NULL
;

1412 
	}
}

1415 
	$¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
)

1417 i‡(
roŸ
->
cou¡
 == 0)

1420 
roŸ
->
hód
 = 
vb
;

1421 
roŸ
->
èû
 = 
vb
;

1426 
roŸ
->
èû
->
√xt
 = 
vb
;

1427 
vb
->
¥ev
 = 
roŸ
->
èû
;

1428 
roŸ
->
èû
 = 
vb
;

1430 
roŸ
->
cou¡
 += 1;

1431 
	}
}

1433 
¢mp_v¨böd
*

1434 
	$¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1436 
¢mp_v¨böd
* 
vb
;

1438 i‡(
roŸ
->
cou¡
 > 0)

1441 
vb
 = 
roŸ
->
èû
;

1442 
roŸ
->
èû
 = 
vb
->
¥ev
;

1443 
vb
->
¥ev
->
√xt
 = 
NULL
;

1444 
roŸ
->
cou¡
 -= 1;

1449 
vb
 = 
NULL
;

1451  
vb
;

1452 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/msg_out.c

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_SNMP


49 
	~"lwù/udp.h
"

50 
	~"lwù/√tif.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/¢mp_a¢1.h
"

53 
	~"lwù/¢mp_msg.h
"

55 
	s¢mp_å≠_d°


58 
ù_addr
 
	mdù
;

60 
u8_t
 
	míabÀ
;

62 
¢mp_å≠_d°
 
	gå≠_d°
[
SNMP_TRAP_DESTINATIONS
];

65 
¢mp_msg_å≠
 
	gå≠_msg
;

67 
u16_t
 
¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, u16_à
vb_Àn
);

68 
u16_t
 
¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, u16_à
vb_Àn
);

69 
u16_t
 
¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
);

71 
u16_t
 
¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
);

72 
u16_t
 
¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
);

73 
u16_t
 
¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, u16_à
ofs
);

81 
	$¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
)

83 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

85 
å≠_d°
[
d°_idx
].
íabÀ
 =Énable;

87 
	}
}

95 
	$¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
)

97 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

99 
å≠_d°
[
d°_idx
].
dù
.
addr
 = 
	`ht⁄l
(
d°
->addr);

101 
	}
}

112 
îr_t


113 
	$¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
)

115 
¢mp_v¨böd_roŸ
 
em±yvb
 = {
NULL
, NULL, 0, 0, 0};

116 
pbuf
 *
p
;

117 
u16_t
 
tŸ_Àn
;

118 
îr_t
 
îr
;

121 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
m_°©
->
outvb
);

122 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

125 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

126 i‡(
p
 =
NULL
)

128 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()ÅooBig\n"));

131 
m_°©
->
îr‹_°©us
 = 
SNMP_ES_TOOBIG
;

132 
m_°©
->
îr‹_ödex
 = 0;

134 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
em±yvb
);

135 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

137 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

139 i‡(
p
 !
NULL
)

142 
u16_t
 
ofs
;

144 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()Ö != NULL\n"));

147 
ofs
 = 
	`¢mp_ª•_hódî_íc
(
m_°©
, 
p
);

148 i‡(
m_°©
->
îr‹_°©us
 =
SNMP_ES_TOOBIG
)

150 
	`¢mp_v¨böd_li°_íc
(&
em±yvb
, 
p
, 
ofs
);

154 
	`¢mp_v¨böd_li°_íc
(&
m_°©
->
outvb
, 
p
, 
ofs
);

157 
m_°©
->
îr‹_°©us
)

159 
SNMP_ES_TOOBIG
:

160 
	`¢mp_öc_¢mpouâoobigs
();

162 
SNMP_ES_NOSUCHNAME
:

163 
	`¢mp_öc_¢mpouäosuch«mes
();

165 
SNMP_ES_BADVALUE
:

166 
	`¢mp_öc_¢mpoutbadvÆues
();

168 
SNMP_ES_GENERROR
:

169 
	`¢mp_öc_¢mpoutgíîrs
();

172 
	`¢mp_öc_¢mpoutgëª•⁄£s
();

173 
	`¢mp_öc_¢mpouçkts
();

177 
	`udp_c⁄√˘
(
m_°©
->
pcb
, &m_°©->
sù
, m_°©->
•
);

178 
îr
 = 
	`udp_£nd
(
m_°©
->
pcb
, 
p
);

179 i‡(
îr
 =
ERR_MEM
)

182 
îr
 = 
ERR_MEM
;

186 
îr
 = 
ERR_OK
;

189 
	`udp_disc⁄√˘
(
m_°©
->
pcb
);

191 
	`pbuf_‰ì
(
p
);

192 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response() done\n"));

193  
îr
;

199  
ERR_MEM
;

201 
	}
}

219 
îr_t


220 
	$¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
)

222 
¢mp_å≠_d°
 *
td
;

223 
√tif
 *
d°_if
;

224 
ù_addr
 
d°_ù
;

225 
pbuf
 *
p
;

226 
u16_t
 
i
,
tŸ_Àn
;

228 
i
=0, 
td
 = &
å≠_d°
[0]; i<
SNMP_TRAP_DESTINATIONS
; i++,Åd++)

230 i‡((
td
->
íabÀ
 !0Ë&& (td->
dù
.
addr
 != 0))

233 
å≠_msg
.
dù
.
addr
 = 
td
->dip.addr;

235 
d°_if
 = 
	`ù_rouã
(&
td
->
dù
);

236 
d°_ù
.
addr
 = 
	`¡ohl
(
d°_if
->
ù_addr
.addr);

237 
å≠_msg
.
sù_øw
[0] = 
d°_ù
.
addr
 >> 24;

238 
å≠_msg
.
sù_øw
[1] = 
d°_ù
.
addr
 >> 16;

239 
å≠_msg
.
sù_øw
[2] = 
d°_ù
.
addr
 >> 8;

240 
å≠_msg
.
sù_øw
[3] = 
d°_ù
.
addr
;

241 
å≠_msg
.
gí_å≠
 = 
gíîic_å≠
;

242 
å≠_msg
.
•c_å≠
 = 
•ecific_å≠
;

243 i‡(
gíîic_å≠
 =
SNMP_GENTRAP_ENTERPRISESPC
)

246 
å≠_msg
.
íãΩri£
 = 
eoid
;

251 
	`¢mp_gë_¢mpgΩid_±r
(&
å≠_msg
.
íãΩri£
);

253 
	`¢mp_gë_sysu±ime
(&
å≠_msg
.
ts
);

256 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
å≠_msg
.
outvb
);

257 
tŸ_Àn
 = 
	`¢mp_å≠_hódî_sum
(&
å≠_msg
,Åot_len);

260 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

261 i‡(
p
 !
NULL
)

263 
u16_t
 
ofs
;

266 
ofs
 = 
	`¢mp_å≠_hódî_íc
(&
å≠_msg
, 
p
);

267 
	`¢mp_v¨böd_li°_íc
(&
å≠_msg
.
outvb
, 
p
, 
ofs
);

269 
	`¢mp_öc_¢mpouâøps
();

270 
	`¢mp_öc_¢mpouçkts
();

273 
	`udp_c⁄√˘
(
å≠_msg
.
pcb
, &å≠_msg.
dù
, 
SNMP_TRAP_PORT
);

274 
	`udp_£nd
(
å≠_msg
.
pcb
, 
p
);

276 
	`udp_disc⁄√˘
(
å≠_msg
.
pcb
);

278 
	`pbuf_‰ì
(
p
);

282  
ERR_MEM
;

286  
ERR_OK
;

287 
	}
}

290 
	$¢mp_cﬁd°¨t_å≠
()

292 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

293 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

294 
å≠_msg
.
outvb
.
cou¡
 = 0;

295 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_COLDSTART
, 
NULL
, 0);

296 
	}
}

299 
	$¢mp_authÁû_å≠
()

301 
u8_t
 
íabÀ
;

302 
	`¢mp_gë_¢m≥«bÀauthíå≠s
(&
íabÀ
);

303 i‡(
íabÀ
 == 1)

305 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

306 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

307 
å≠_msg
.
outvb
.
cou¡
 = 0;

308 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_AUTHFAIL
, 
NULL
, 0);

310 
	}
}

320 
u16_t


321 
	$¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, 
u16_t
 
vb_Àn
)

323 
u16_t
 
tŸ_Àn
;

324 
¢mp_ª•_hódî_Àngths
 *
rhl
;

326 
rhl
 = &
m_°©
->rhl;

327 
tŸ_Àn
 = 
vb_Àn
;

328 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_ödex
, &
rhl
->
îridxÀn
);

329 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îridxÀn
, &rhl->
îridxÀ∆í
);

330 
tŸ_Àn
 +1 + 
rhl
->
îridxÀ∆í
 +Ñhl->
îridxÀn
;

332 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_°©us
, &
rhl
->
îr°©Àn
);

333 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îr°©Àn
, &rhl->
îr°©À∆í
);

334 
tŸ_Àn
 +1 + 
rhl
->
îr°©À∆í
 +Ñhl->
îr°©Àn
;

336 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
rid
, &
rhl
->
ridÀn
);

337 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
ridÀn
, &rhl->
ridÀ∆í
);

338 
tŸ_Àn
 +1 + 
rhl
->
ridÀ∆í
 +Ñhl->
ridÀn
;

340 
rhl
->
pduÀn
 = 
tŸ_Àn
;

341 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
pduÀn
, &rhl->
pduÀ∆í
);

342 
tŸ_Àn
 +1 + 
rhl
->
pduÀ∆í
;

344 
rhl
->
comÀn
 = 
m_°©
->
com_°æí
;

345 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
comÀn
, &rhl->
comÀ∆í
);

346 
tŸ_Àn
 +1 + 
rhl
->
comÀ∆í
 +Ñhl->
comÀn
;

348 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
rhl
->
vîÀn
);

349 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
vîÀn
, &rhl->
vîÀ∆í
);

350 
tŸ_Àn
 +1 + 
rhl
->
vîÀn
 +Ñhl->
vîÀ∆í
;

352 
rhl
->
£qÀn
 = 
tŸ_Àn
;

353 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
£qÀn
, &rhl->
£qÀ∆í
);

354 
tŸ_Àn
 +1 + 
rhl
->
£qÀ∆í
;

356  
tŸ_Àn
;

357 
	}
}

367 
u16_t


368 
	$¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, 
u16_t
 
vb_Àn
)

370 
u16_t
 
tŸ_Àn
;

371 
¢mp_å≠_hódî_Àngths
 *
thl
;

373 
thl
 = &
m_å≠
->thl;

374 
tŸ_Àn
 = 
vb_Àn
;

376 
	`¢mp_a¢1_íc_u32t_˙t
(
m_å≠
->
ts
, &
thl
->
t¶í
);

377 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
t¶í
, &thl->
t¶íÀn
);

378 
tŸ_Àn
 +1 + 
thl
->
t¶í
 +Åhl->
t¶íÀn
;

380 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
•c_å≠
, &
thl
->
°ΩÀn
);

381 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
°ΩÀn
, &thl->
°ΩÀ∆í
);

382 
tŸ_Àn
 +1 + 
thl
->
°ΩÀn
 +Åhl->
°ΩÀ∆í
;

384 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
gí_å≠
, &
thl
->
gå∂í
);

385 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
gå∂í
, &thl->
gå∂íÀn
);

386 
tŸ_Àn
 +1 + 
thl
->
gå∂í
 +Åhl->
gå∂íÀn
;

388 
thl
->
Øddæí
 = 4;

389 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
Øddæí
, &thl->
ØddæíÀn
);

390 
tŸ_Àn
 +1 + 
thl
->
Øddæí
 +Åhl->
ØddæíÀn
;

392 
	`¢mp_a¢1_íc_oid_˙t
(
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0], &
thl
->
eidÀn
);

393 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
eidÀn
, &thl->
eidÀ∆í
);

394 
tŸ_Àn
 +1 + 
thl
->
eidÀn
 +Åhl->
eidÀ∆í
;

396 
thl
->
pduÀn
 = 
tŸ_Àn
;

397 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
pduÀn
, &thl->
pduÀ∆í
);

398 
tŸ_Àn
 +1 + 
thl
->
pduÀ∆í
;

400 
thl
->
comÀn
 = (
¢mp_publiccommunôy
) - 1;

401 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
comÀn
, &thl->
comÀ∆í
);

402 
tŸ_Àn
 +1 + 
thl
->
comÀ∆í
 +Åhl->
comÀn
;

404 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
thl
->
vîÀn
);

405 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
vîÀn
, &thl->
vîÀ∆í
);

406 
tŸ_Àn
 +1 + 
thl
->
vîÀn
 +Åhl->
vîÀ∆í
;

408 
thl
->
£qÀn
 = 
tŸ_Àn
;

409 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
£qÀn
, &thl->
£qÀ∆í
);

410 
tŸ_Àn
 +1 + 
thl
->
£qÀ∆í
;

412  
tŸ_Àn
;

413 
	}
}

422 
u16_t


423 
	$¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
)

425 
¢mp_v¨böd
 *
vb
;

426 
u32_t
 *
uöt_±r
;

427 
s32_t
 *
söt_±r
;

428 
u16_t
 
tŸ_Àn
;

430 
tŸ_Àn
 = 0;

431 
vb
 = 
roŸ
->
èû
;

432  
vb
 !
NULL
 )

435 
vb
->
vÆue_ty≥
)

437 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

438 
söt_±r
 = 
vb
->
vÆue
;

439 
	`¢mp_a¢1_íc_s32t_˙t
(*
söt_±r
, &
vb
->
vÀn
);

441 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

442 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

443 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

444 
uöt_±r
 = 
vb
->
vÆue
;

445 
	`¢mp_a¢1_íc_u32t_˙t
(*
uöt_±r
, &
vb
->
vÀn
);

447 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

448 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

449 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

450 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

451 
vb
->
vÀn
 = vb->
vÆue_Àn
;

453 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

454 
söt_±r
 = 
vb
->
vÆue
;

455 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
, &vb->
vÀn
);

459 
vb
->
vÀn
 = 0;

463 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
vÀn
, &vb->
vÀ∆í
);

464 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
idít_Àn
, vb->
idít
, &vb->
ﬁí
);

465 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
ﬁí
, &vb->
ﬁíÀn
);

467 
vb
->
£qÀn
 = 1 + vb->
vÀ∆í
 + vb->
vÀn
;

468 
vb
->
£qÀn
 +1 + vb->
ﬁíÀn
 + vb->
ﬁí
;

469 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
£qÀn
, &vb->
£qÀ∆í
);

472 
tŸ_Àn
 +1 + 
vb
->
£qÀ∆í
 + vb->
£qÀn
;

474 
vb
 = vb->
¥ev
;

478 
roŸ
->
£qÀn
 = 
tŸ_Àn
;

479 
	`¢mp_a¢1_íc_Àngth_˙t
(
roŸ
->
£qÀn
, &roŸ->
£qÀ∆í
);

480 
tŸ_Àn
 +1 + 
roŸ
->
£qÀ∆í
;

482  
tŸ_Àn
;

483 
	}
}

488 
u16_t


489 
	$¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
)

491 
u16_t
 
ofs
;

493 
ofs
 = 0;

494 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

495 
ofs
 += 1;

496 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
£qÀn
);

497 
ofs
 +
m_°©
->
rhl
.
£qÀ∆í
;

499 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

500 
ofs
 += 1;

501 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
);

502 
ofs
 +
m_°©
->
rhl
.
vîÀ∆í
;

503 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
, 
¢mp_vîsi⁄
);

504 
ofs
 +
m_°©
->
rhl
.
vîÀn
;

506 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

507 
ofs
 += 1;

508 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
);

509 
ofs
 +
m_°©
->
rhl
.
comÀ∆í
;

510 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
, m_°©->
communôy
);

511 
ofs
 +
m_°©
->
rhl
.
comÀn
;

513 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
));

514 
ofs
 += 1;

515 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
pduÀn
);

516 
ofs
 +
m_°©
->
rhl
.
pduÀ∆í
;

518 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

519 
ofs
 += 1;

520 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
);

521 
ofs
 +
m_°©
->
rhl
.
ridÀ∆í
;

522 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
, m_°©->
rid
);

523 
ofs
 +
m_°©
->
rhl
.
ridÀn
;

525 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

526 
ofs
 += 1;

527 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
);

528 
ofs
 +
m_°©
->
rhl
.
îr°©À∆í
;

529 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
, m_°©->
îr‹_°©us
);

530 
ofs
 +
m_°©
->
rhl
.
îr°©Àn
;

532 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

533 
ofs
 += 1;

534 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
);

535 
ofs
 +
m_°©
->
rhl
.
îridxÀ∆í
;

536 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
, m_°©->
îr‹_ödex
);

537 
ofs
 +
m_°©
->
rhl
.
îridxÀn
;

539  
ofs
;

540 
	}
}

545 
u16_t


546 
	$¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
)

548 
u16_t
 
ofs
;

550 
ofs
 = 0;

551 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

552 
ofs
 += 1;

553 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
£qÀn
);

554 
ofs
 +
m_å≠
->
thl
.
£qÀ∆í
;

556 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

557 
ofs
 += 1;

558 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
);

559 
ofs
 +
m_å≠
->
thl
.
vîÀ∆í
;

560 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
, 
¢mp_vîsi⁄
);

561 
ofs
 +
m_å≠
->
thl
.
vîÀn
;

563 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

564 
ofs
 += 1;

565 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
);

566 
ofs
 +
m_å≠
->
thl
.
comÀ∆í
;

567 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
, (
u8_t
 *)&
¢mp_publiccommunôy
[0]);

568 
ofs
 +
m_å≠
->
thl
.
comÀn
;

570 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
));

571 
ofs
 += 1;

572 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
pduÀn
);

573 
ofs
 +
m_å≠
->
thl
.
pduÀ∆í
;

575 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

576 
ofs
 += 1;

577 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
eidÀn
);

578 
ofs
 +
m_å≠
->
thl
.
eidÀ∆í
;

579 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0]);

580 
ofs
 +
m_å≠
->
thl
.
eidÀn
;

582 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
));

583 
ofs
 += 1;

584 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
);

585 
ofs
 +
m_å≠
->
thl
.
ØddæíÀn
;

586 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
, &m_å≠->
sù_øw
[0]);

587 
ofs
 +
m_å≠
->
thl
.
Øddæí
;

589 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

590 
ofs
 += 1;

591 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
);

592 
ofs
 +
m_å≠
->
thl
.
gå∂íÀn
;

593 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
, m_å≠->
gí_å≠
);

594 
ofs
 +
m_å≠
->
thl
.
gå∂í
;

596 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

597 
ofs
 += 1;

598 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
);

599 
ofs
 +
m_å≠
->
thl
.
°ΩÀ∆í
;

600 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
, m_å≠->
•c_å≠
);

601 
ofs
 +
m_å≠
->
thl
.
°ΩÀn
;

603 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
));

604 
ofs
 += 1;

605 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
);

606 
ofs
 +
m_å≠
->
thl
.
t¶íÀn
;

607 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
, m_å≠->
ts
);

608 
ofs
 +
m_å≠
->
thl
.
t¶í
;

610  
ofs
;

611 
	}
}

616 
u16_t


617 
	$¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, 
u16_t
 
ofs
)

619 
¢mp_v¨böd
 *
vb
;

620 
s32_t
 *
söt_±r
;

621 
u32_t
 *
uöt_±r
;

622 
u8_t
 *
øw_±r
;

624 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

625 
ofs
 += 1;

626 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
roŸ
->
£qÀn
);

627 
ofs
 +
roŸ
->
£qÀ∆í
;

629 
vb
 = 
roŸ
->
hód
;

630  
vb
 !
NULL
 )

632 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

633 
ofs
 += 1;

634 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
£qÀn
);

635 
ofs
 +
vb
->
£qÀ∆í
;

637 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

638 
ofs
 += 1;

639 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
ﬁí
);

640 
ofs
 +
vb
->
ﬁíÀn
;

641 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
idít_Àn
, &vb->
idít
[0]);

642 
ofs
 +
vb
->
ﬁí
;

644 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, 
vb
->
vÆue_ty≥
);

645 
ofs
 += 1;

646 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
vÀn
);

647 
ofs
 +
vb
->
vÀ∆í
;

649 
vb
->
vÆue_ty≥
)

651 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

652 
söt_±r
 = 
vb
->
vÆue
;

653 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
söt_±r
);

655 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

656 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

657 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

658 
uöt_±r
 = 
vb
->
vÆue
;

659 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
uöt_±r
);

661 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

662 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

663 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

664 
øw_±r
 = 
vb
->
vÆue
;

665 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
vb
->
vÀn
, 
øw_±r
);

667 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

669 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

670 
söt_±r
 = 
vb
->
vÆue
;

671 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
);

677 
ofs
 +
vb
->
vÀn
;

678 
vb
 = vb->
√xt
;

680  
ofs
;

681 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/stats.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_STATS


43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

47 
	~<°rög.h
>

49 
°©s_
 
	glwù_°©s
;

51 #i‡
LWIP_STATS_DISPLAY


53 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

55 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

56 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

57 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

58 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

59 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

60 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

61 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

62 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

63 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

64 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

65 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

66 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

67 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ˇchehô
));

68 
	}
}

70 #i‡
IGMP_STATS


72 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

74 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

75 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

76 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

77 
	`LWIP_PLATFORM_DIAG
(("v1_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
v1_rxed
));

78 
	`LWIP_PLATFORM_DIAG
(("joö_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
joö_£¡
));

79 
	`LWIP_PLATFORM_DIAG
(("Àave_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
Àave_£¡
));

80 
	`LWIP_PLATFORM_DIAG
(("uniˇ°_quîy: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
uniˇ°_quîy
));

81 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_£¡
));

82 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_rxed
));

83 
	`LWIP_PLATFORM_DIAG
(("group_quîy_rxed: %"
STAT_COUNTER_F
"\n", 
igmp
->
group_quîy_rxed
));

84 
	}
}

87 #i‡
MEM_STATS
 || 
MEMP_STATS


89 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

91 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

92 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

93 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

94 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

95 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

96 
	}
}

98 #i‡
MEMP_STATS


100 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

102 * 
memp_«mes
[] = {

103 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

104 
	~"lwù/memp_°d.h
"

106 if(
ödex
 < 
MEMP_MAX
) {

107 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

109 
	}
}

113 #i‡
SYS_STATS


115 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

117 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

118 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

119 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

120 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

121 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

122 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

123 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

124 
	}
}

128 
	$°©s_di•œy
()

130 
s16_t
 
i
;

132 
	`LINK_STATS_DISPLAY
();

133 
	`ETHARP_STATS_DISPLAY
();

134 
	`IPFRAG_STATS_DISPLAY
();

135 
	`IP_STATS_DISPLAY
();

136 
	`IGMP_STATS_DISPLAY
();

137 
	`ICMP_STATS_DISPLAY
();

138 
	`UDP_STATS_DISPLAY
();

139 
	`TCP_STATS_DISPLAY
();

140 
	`MEM_STATS_DISPLAY
();

141 
i
 = 0; i < 
MEMP_MAX
; i++) {

142 
	`MEMP_STATS_DISPLAY
(
i
);

144 
	`SYS_STATS_DISPLAY
();

145 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/sys.c

39 
	~"lwù/›t.h
"

41 #i‡(
NO_SYS
 == 0)

43 
	~"lwù/sys.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/t˝ù.h
"

52 
	ssswt_cb


54 
s16_t
 
	mtimeÊag
;

55 
sys_£m_t
 *
	mp£m
;

66 
	$sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
)

68 
u32_t
 
time_√eded
;

69 
sys_timeouts
 *
timeouts
;

70 
sys_timeo
 *
tm±imeout
;

71 
sys_timeout_h™dÀr
 
h
;

72 *
¨g
;

74 
agaö
:

75 
timeouts
 = 
	`sys_¨ch_timeouts
();

77 i‡(!
timeouts
 || !timeouts->
√xt
) {

78 
	`UNLOCK_TCPIP_CORE
();

79 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 0);

80 
	`LOCK_TCPIP_CORE
();

82 i‡(
timeouts
->
√xt
->
time
 > 0) {

83 
	`UNLOCK_TCPIP_CORE
();

84 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
timeouts
->
√xt
->
time
);

85 
	`LOCK_TCPIP_CORE
();

87 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

90 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

94 
tm±imeout
 = 
timeouts
->
√xt
;

95 
timeouts
->
√xt
 = 
tm±imeout
->next;

96 
h
 = 
tm±imeout
->h;

97 
¨g
 = 
tm±imeout
->arg;

98 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

99 i‡(
h
 !
NULL
) {

100 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sm‡ˇŒög h=%p(%p)\n", (*)&
h
, 
¨g
));

101 
	`h
(
¨g
);

105 
agaö
;

110 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

111 
timeouts
->
√xt
->
time
 -
time_√eded
;

113 
timeouts
->
√xt
->
time
 = 0;

117 
	}
}

126 
	$sys_£m_waô
(
sys_£m_t
 
£m
)

128 
u32_t
 
time_√eded
;

129 
sys_timeouts
 *
timeouts
;

130 
sys_timeo
 *
tm±imeout
;

131 
sys_timeout_h™dÀr
 
h
;

132 *
¨g
;

134 
agaö
:

136 
timeouts
 = 
	`sys_¨ch_timeouts
();

138 i‡(!
timeouts
 || !timeouts->
√xt
) {

139 
	`sys_¨ch_£m_waô
(
£m
, 0);

141 i‡(
timeouts
->
√xt
->
time
 > 0) {

142 
time_√eded
 = 
	`sys_¨ch_£m_waô
(
£m
, 
timeouts
->
√xt
->
time
);

144 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

147 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

151 
tm±imeout
 = 
timeouts
->
√xt
;

152 
timeouts
->
√xt
 = 
tm±imeout
->next;

153 
h
 = 
tm±imeout
->h;

154 
¨g
 = 
tm±imeout
->arg;

155 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

156 i‡(
h
 !
NULL
) {

157 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("ssw h=%p(%p)\n", (*)&
h
, (*)
¨g
));

158 
	`h
(
¨g
);

162 
agaö
;

167 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

168 
timeouts
->
√xt
->
time
 -
time_√eded
;

170 
timeouts
->
√xt
->
time
 = 0;

174 
	}
}

188 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

190 
sys_timeouts
 *
timeouts
;

191 
sys_timeo
 *
timeout
, *
t
;

193 
timeout
 = 
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
);

194 i‡(
timeout
 =
NULL
) {

195 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL", 
timeout
 !
NULL
);

198 
timeout
->
√xt
 = 
NULL
;

199 
timeout
->
h
 = h;

200 
timeout
->
¨g
 =árg;

201 
timeout
->
time
 = 
m£cs
;

203 
timeouts
 = 
	`sys_¨ch_timeouts
();

205 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" h=%párg=%p\n",

206 (*)
timeout
, 
m£cs
, (*)&
h
, (*)
¨g
));

208 i‡(
timeouts
 =
NULL
) {

209 
	`LWIP_ASSERT
("sys_timeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

213 i‡(
timeouts
->
√xt
 =
NULL
) {

214 
timeouts
->
√xt
 = 
timeout
;

218 i‡(
timeouts
->
√xt
->
time
 > 
m£cs
) {

219 
timeouts
->
√xt
->
time
 -
m£cs
;

220 
timeout
->
√xt
 = 
timeouts
->next;

221 
timeouts
->
√xt
 = 
timeout
;

223 
t
 = 
timeouts
->
√xt
;Å !
NULL
;Å =Å->next) {

224 
timeout
->
time
 -
t
->time;

225 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

226 i‡(
t
->
√xt
 !
NULL
) {

227 
t
->
√xt
->
time
 -
timeout
->time;

229 
timeout
->
√xt
 = 
t
->next;

230 
t
->
√xt
 = 
timeout
;

235 
	}
}

248 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

250 
sys_timeouts
 *
timeouts
;

251 
sys_timeo
 *
¥ev_t
, *
t
;

253 
timeouts
 = 
	`sys_¨ch_timeouts
();

255 i‡(
timeouts
 =
NULL
) {

256 
	`LWIP_ASSERT
("sys_u¡imeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

259 i‡(
timeouts
->
√xt
 =
NULL
) {

263 
t
 = 
timeouts
->
√xt
, 
¥ev_t
 = 
NULL
;Å != NULL;Örev_t =Å,Å =Å->next) {

264 i‡((
t
->
h
 =hË&& (t->
¨g
 ==árg)) {

267 i‡(
¥ev_t
 =
NULL
)

268 
timeouts
->
√xt
 = 
t
->next;

270 
¥ev_t
->
√xt
 = 
t
->next;

272 i‡(
t
->
√xt
 !
NULL
)

273 
t
->
√xt
->
time
 +=Å->time;

274 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
);

279 
	}
}

287 
	$sswt_h™dÀr
(*
¨g
)

289 
sswt_cb
 *sswt_cb = (sswt_cb *Ë
¨g
;

292 
sswt_cb
->
timeÊag
 = 1;

293 
	`sys_£m_sig«l
(*(
sswt_cb
->
p£m
));

294 
	}
}

304 
	$sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
)

306 
sswt_cb
 sswt_cb;

308 
sswt_cb
.
p£m
 = &
£m
;

309 
sswt_cb
.
timeÊag
 = 0;

312 i‡(
timeout
 > 0) {

314 
	`sys_timeout
(
timeout
, 
sswt_h™dÀr
, &
sswt_cb
);

316 
	`sys_£m_waô
(
£m
);

318 i‡(
sswt_cb
.
timeÊag
) {

323 
	`sys_u¡imeout
(
sswt_h™dÀr
, &
sswt_cb
);

326 
	}
}

334 
	$sys_m¶ìp
(
u32_t
 
ms
)

336 
sys_£m_t
 
dñay£m
 = 
	`sys_£m_√w
(0);

338 
	`sys_£m_waô_timeout
(
dñay£m
, 
ms
);

340 
	`sys_£m_‰ì
(
dñay£m
);

341 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/tcp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_TCP


47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/¢mp.h
"

51 
	~"lwù/t˝.h
"

52 
	~"lwù/debug.h
"

54 
	~<°rög.h
>

57 
u32_t
 
	gt˝_ticks
;

58 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

61 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

66 
t˝_pcb
 *
	gt˝_bound_pcbs
;

68 
t˝_li°í_pcbs_t
 
	gt˝_li°í_pcbs
;

71 
t˝_pcb
 *
	gt˝_a˘ive_pcbs
;

73 
t˝_pcb
 *
	gt˝_tw_pcbs
;

75 
t˝_pcb
 *
	gt˝_tmp_pcb
;

77 
u8_t
 
	gt˝_timî
;

78 
u16_t
 
t˝_√w_p‹t
();

85 
	$t˝_tmr
()

88 
	`t˝_Á°tmr
();

90 i‡(++
t˝_timî
 & 1) {

93 
	`t˝_¶owtmr
();

95 
	}
}

111 
îr_t


112 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

114 
îr_t
 
îr
;

116 #i‡
TCP_DEBUG


117 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

118 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

121 
pcb
->
°©e
) {

122 
CLOSED
:

130 
îr
 = 
ERR_OK
;

131 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

132 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

133 
pcb
 = 
NULL
;

135 
LISTEN
:

136 
îr
 = 
ERR_OK
;

137 
	`t˝_pcb_ªmove
((
t˝_pcb
 **)&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

138 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
);

139 
pcb
 = 
NULL
;

141 
SYN_SENT
:

142 
îr
 = 
ERR_OK
;

143 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

144 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

145 
pcb
 = 
NULL
;

146 
	`¢mp_öc_t˝©ãm±Áûs
();

148 
SYN_RCVD
:

149 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

150 i‡(
îr
 =
ERR_OK
) {

151 
	`¢mp_öc_t˝©ãm±Áûs
();

152 
pcb
->
°©e
 = 
FIN_WAIT_1
;

155 
ESTABLISHED
:

156 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

157 i‡(
îr
 =
ERR_OK
) {

158 
	`¢mp_öc_t˝e°abª£ts
();

159 
pcb
->
°©e
 = 
FIN_WAIT_1
;

162 
CLOSE_WAIT
:

163 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

164 i‡(
îr
 =
ERR_OK
) {

165 
	`¢mp_öc_t˝e°abª£ts
();

166 
pcb
->
°©e
 = 
LAST_ACK
;

171 
îr
 = 
ERR_OK
;

172 
pcb
 = 
NULL
;

176 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

184 
	`t˝_ouçut
(
pcb
);

186  
îr
;

187 
	}
}

198 
	$t˝_ab™d⁄
(
t˝_pcb
 *
pcb
, 
ª£t
)

200 
u32_t
 
£qno
, 
ackno
;

201 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

202 
ù_addr
 
ªmŸe_ù
, 
loˇl_ù
;

203 #i‡
LWIP_CALLBACK_API


204 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

206 *
îrf_¨g
;

212 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

213 
	`t˝_pcb_ªmove
(&
t˝_tw_pcbs
, 
pcb
);

214 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

216 
£qno
 = 
pcb
->
¢d_nxt
;

217 
ackno
 = 
pcb
->
rcv_nxt
;

218 
	`ù_addr_£t
(&
loˇl_ù
, &(
pcb
->local_ip));

219 
	`ù_addr_£t
(&
ªmŸe_ù
, &(
pcb
->remote_ip));

220 
loˇl_p‹t
 = 
pcb
->local_port;

221 
ªmŸe_p‹t
 = 
pcb
->remote_port;

222 #i‡
LWIP_CALLBACK_API


223 
îrf
 = 
pcb
->errf;

225 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

226 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

227 i‡(
pcb
->
u«cked
 !
NULL
) {

228 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

230 i‡(
pcb
->
un£¡
 !
NULL
) {

231 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

233 #i‡
TCP_QUEUE_OOSEQ


234 i‡(
pcb
->
oo£q
 !
NULL
) {

235 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

238 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

239 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

240 i‡(
ª£t
) {

241 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abandon: sending RST\n"));

242 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

245 
	}
}

260 
îr_t


261 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

263 
t˝_pcb
 *
˝cb
;

265 
	`LWIP_ERROR
("t˝_böd: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

267 i‡(
p‹t
 == 0) {

268 
p‹t
 = 
	`t˝_√w_p‹t
();

272 
˝cb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;

273 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

274 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

275 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

276 
	`ù_addr_ißny
(
ùaddr
) ||

277 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

278  
ERR_USE
;

283 
˝cb
 = 
t˝_a˘ive_pcbs
;

284 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

285 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

286 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

287 
	`ù_addr_ißny
(
ùaddr
) ||

288 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

289  
ERR_USE
;

294 
˝cb
 = 
t˝_bound_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

295 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

296 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

297 
	`ù_addr_ißny
(
ùaddr
) ||

298 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

299  
ERR_USE
;

305 
˝cb
 = 
t˝_tw_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

306 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

307 i‡(
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

308  
ERR_USE
;

313 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

314 
pcb
->
loˇl_ù
 = *
ùaddr
;

316 
pcb
->
loˇl_p‹t
 = 
p‹t
;

317 
	`TCP_REG
(&
t˝_bound_pcbs
, 
pcb
);

318 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

319  
ERR_OK
;

320 
	}
}

321 #i‡
LWIP_CALLBACK_API


325 
îr_t


326 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

328 
	`LWIP_UNUSED_ARG
(
¨g
);

329 
	`LWIP_UNUSED_ARG
(
pcb
);

330 
	`LWIP_UNUSED_ARG
(
îr
);

332  
ERR_ABRT
;

333 
	}
}

350 
t˝_pcb
 *

351 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

353 
t˝_pcb_li°í
 *
Õcb
;

355 
	`LWIP_UNUSED_ARG
(
backlog
);

356 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

359 i‡(
pcb
->
°©e
 =
LISTEN
) {

360  
pcb
;

362 
Õcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
);

363 i‡(
Õcb
 =
NULL
) {

364  
NULL
;

366 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

367 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

368 
Õcb
->
°©e
 = 
LISTEN
;

369 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

370 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

371 
Õcb
->
âl
 = 
pcb
->ttl;

372 
Õcb
->
tos
 = 
pcb
->tos;

373 
	`ù_addr_£t
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip);

374 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

375 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

376 #i‡
LWIP_CALLBACK_API


377 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

379 #i‡
TCP_LISTEN_BACKLOG


380 
Õcb
->
ac˚±s_≥ndög
 = 0;

381 
Õcb
->
backlog
 = (backlog ? backlog : 1);

383 
	`TCP_REG
(&
t˝_li°í_pcbs
.
li°í_pcbs
, 
Õcb
);

384  (
t˝_pcb
 *)
Õcb
;

385 
	}
}

393 
u32_t
 
	$t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
)

395 
u32_t
 
√w_right_edge
 = 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
;

397 i‡(
	`TCP_SEQ_GEQ
(
√w_right_edge
, 
pcb
->
rcv_™n_right_edge
 +Öcb->
mss
)) {

399 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

400  
√w_right_edge
 - 
pcb
->
rcv_™n_right_edge
;

402 i‡(
	`TCP_SEQ_GT
(
pcb
->
rcv_nxt
,Öcb->
rcv_™n_right_edge
)) {

405 
pcb
->
rcv_™n_wnd
 = 0;

408 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_™n_right_edge
 -Öcb->
rcv_nxt
;

412 
	}
}

423 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

425 
wnd_öÊ©i⁄
;

427 
	`LWIP_ASSERT
("tcp_recved:Üen would wrapÑcv_wnd\n",

428 
Àn
 <0xfff‡- 
pcb
->
rcv_wnd
 );

430 
pcb
->
rcv_wnd
 +
Àn
;

431 i‡(
pcb
->
rcv_wnd
 > 
TCP_WND
)

432 
pcb
->
rcv_wnd
 = 
TCP_WND
;

434 
wnd_öÊ©i⁄
 = 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

440 i‡(
wnd_öÊ©i⁄
 >
TCP_WND_UPDATE_THRESHOLD
)

441 
	`t˝_ack_now
(
pcb
);

443 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

444 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

445 
	}
}

453 
u16_t


454 
	$t˝_√w_p‹t
()

456 
t˝_pcb
 *
pcb
;

457 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


458 
	#TCP_LOCAL_PORT_RANGE_START
 4096

	)

459 
	#TCP_LOCAL_PORT_RANGE_END
 0x7fff

	)

461 
u16_t
 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

463 
agaö
:

464 i‡(++
p‹t
 > 
TCP_LOCAL_PORT_RANGE_END
) {

465 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

468 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

469 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

470 
agaö
;

473 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

474 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

475 
agaö
;

478 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

479 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

480 
agaö
;

483  
p‹t
;

484 
	}
}

498 
îr_t


499 
	$t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
,

500 
	$îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
îr_t
 
îr
))

502 
îr_t
 
ªt
;

503 
u32_t
 
iss
;

505 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ed from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

507 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

508 i‡(
ùaddr
 !
NULL
) {

509 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

511  
ERR_VAL
;

513 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

514 i‡(
pcb
->
loˇl_p‹t
 == 0) {

515 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

517 
iss
 = 
	`t˝_√xt_iss
();

518 
pcb
->
rcv_nxt
 = 0;

519 
pcb
->
¢d_nxt
 = 
iss
;

520 
pcb
->
œ°ack
 = 
iss
 - 1;

521 
pcb
->
¢d_lbb
 = 
iss
 - 1;

522 
pcb
->
rcv_wnd
 = 
TCP_WND
;

523 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

524 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

525 
pcb
->
¢d_wnd
 = 
TCP_WND
;

528 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

529 #i‡
TCP_CALCULATE_EFF_SEND_MSS


530 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

532 
pcb
->
cwnd
 = 1;

533 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

534 
pcb
->
°©e
 = 
SYN_SENT
;

535 #i‡
LWIP_CALLBACK_API


536 
pcb
->
c⁄√˘ed
 = connected;

538 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

539 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

541 
	`¢mp_öc_t˝a˘ive›ís
();

543 
ªt
 = 
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
TCP_SYN
, 0, 
TF_SEG_OPTS_MSS


544 #i‡
LWIP_TCP_TIMESTAMPS


545 | 
TF_SEG_OPTS_TS


548 i‡(
ªt
 =
ERR_OK
) {

549 
	`t˝_ouçut
(
pcb
);

551  
ªt
;

552 
	}
}

562 
	$t˝_¶owtmr
()

564 
t˝_pcb
 *
pcb
, *
pcb2
, *
¥ev
;

565 
u16_t
 
eff_wnd
;

566 
u8_t
 
pcb_ªmove
;

567 
îr_t
 
îr
;

569 
îr
 = 
ERR_OK
;

571 ++
t˝_ticks
;

574 
¥ev
 = 
NULL
;

575 
pcb
 = 
t˝_a˘ive_pcbs
;

576 i‡(
pcb
 =
NULL
) {

577 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

579 
pcb
 !
NULL
) {

580 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

581 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

582 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

583 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

585 
pcb_ªmove
 = 0;

587 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

588 ++
pcb_ªmove
;

589 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

591 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

592 ++
pcb_ªmove
;

593 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

595 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

598 
pcb
->
≥rsi°_˙t
++;

599 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

600 
pcb
->
≥rsi°_˙t
 = 0;

601 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

602 
pcb
->
≥rsi°_backoff
++;

604 
	`t˝_zîo_wödow_¥obe
(
pcb
);

608 if(
pcb
->
πime
 >= 0)

609 ++
pcb
->
πime
;

611 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

613 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


614 "Öcb->πÿ%"
S16_F
"\n",

615 
pcb
->
πime
,Öcb->
πo
));

619 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

620 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

624 
pcb
->
πime
 = 0;

627 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

628 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

629 i‡(
pcb
->
s°hªsh
 <Öcb->
mss
) {

630 
pcb
->
s°hªsh
 =Öcb->
mss
 * 2;

632 
pcb
->
cwnd
 =Öcb->
mss
;

633 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


634 " s°hªsh %"
U16_F
"\n",

635 
pcb
->
cwnd
,Öcb->
s°hªsh
));

639 
	`t˝_ªxmô_πo
(
pcb
);

644 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

645 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

646 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

647 ++
pcb_ªmove
;

648 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

653 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

654 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

655 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

656 #i‡
LWIP_TCP_KEEPALIVE


657 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

658 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

659 / 
TCP_SLOW_INTERVAL
)

661 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

662 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

665 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

666 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

667 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

669 
	`t˝_ab‹t
(
pcb
);

671 #i‡
LWIP_TCP_KEEPALIVE


672 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

673 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

674 / 
TCP_SLOW_INTERVAL
)

676 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

677 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

678 / 
TCP_SLOW_INTERVAL
)

681 
	`t˝_kì∑live
(
pcb
);

682 
pcb
->
kìp_˙t_£¡
++;

689 #i‡
TCP_QUEUE_OOSEQ


690 i‡(
pcb
->
oo£q
 !
NULL
 &&

691 (
u32_t
)
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

692 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

693 
pcb
->
oo£q
 = 
NULL
;

694 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

699 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

700 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

701 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

702 ++
pcb_ªmove
;

703 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

708 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

709 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

710 ++
pcb_ªmove
;

711 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

716 i‡(
pcb_ªmove
) {

717 
	`t˝_pcb_purge
(
pcb
);

719 i‡(
¥ev
 !
NULL
) {

720 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
t˝_a˘ive_pcbs
);

721 
¥ev
->
√xt
 = 
pcb
->next;

724 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
t˝_a˘ive_pcbs
 =
pcb
);

725 
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

728 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

730 
pcb2
 = 
pcb
->
√xt
;

731 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

732 
pcb
 = 
pcb2
;

736 ++
pcb
->
pﬁ…mr
;

737 i‡(
pcb
->
pﬁ…mr
 >pcb->
pﬁlöãrvÆ
) {

738 
pcb
->
pﬁ…mr
 = 0;

739 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

740 
	`TCP_EVENT_POLL
(
pcb
, 
îr
);

741 i‡(
îr
 =
ERR_OK
) {

742 
	`t˝_ouçut
(
pcb
);

746 
¥ev
 = 
pcb
;

747 
pcb
 =Öcb->
√xt
;

753 
¥ev
 = 
NULL
;

754 
pcb
 = 
t˝_tw_pcbs
;

755 
pcb
 !
NULL
) {

756 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

757 
pcb_ªmove
 = 0;

760 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

761 ++
pcb_ªmove
;

767 i‡(
pcb_ªmove
) {

768 
	`t˝_pcb_purge
(
pcb
);

770 i‡(
¥ev
 !
NULL
) {

771 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
t˝_tw_pcbs
);

772 
¥ev
->
√xt
 = 
pcb
->next;

775 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
t˝_tw_pcbs
 =
pcb
);

776 
t˝_tw_pcbs
 = 
pcb
->
√xt
;

778 
pcb2
 = 
pcb
->
√xt
;

779 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

780 
pcb
 = 
pcb2
;

782 
¥ev
 = 
pcb
;

783 
pcb
 =Öcb->
√xt
;

786 
	}
}

795 
	$t˝_Á°tmr
()

797 
t˝_pcb
 *
pcb
;

799 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

801 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

803 
îr_t
 
îr
;

804 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

805 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

806 i‡(
îr
 =
ERR_OK
) {

807 
pcb
->
ªfu£d_d©a
 = 
NULL
;

812 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

813 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

814 
	`t˝_ack_now
(
pcb
);

815 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

818 
	}
}

826 
u8_t


827 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

829 
u8_t
 
cou¡
 = 0;

830 
t˝_£g
 *
√xt
;

831 
£g
 !
NULL
) {

832 
√xt
 = 
£g
->next;

833 
cou¡
 +
	`t˝_£g_‰ì
(
£g
);

834 
£g
 = 
√xt
;

836  
cou¡
;

837 
	}
}

845 
u8_t


846 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

848 
u8_t
 
cou¡
 = 0;

850 i‡(
£g
 !
NULL
) {

851 i‡(
£g
->
p
 !
NULL
) {

852 
cou¡
 = 
	`pbuf_‰ì
(
£g
->
p
);

853 #i‡
TCP_DEBUG


854 
£g
->
p
 = 
NULL
;

857 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
);

859  
cou¡
;

860 
	}
}

869 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

871 
pcb
->
¥io
 =Örio;

872 
	}
}

873 #i‡
TCP_QUEUE_OOSEQ


882 
t˝_£g
 *

883 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

885 
t˝_£g
 *
c£g
;

887 
c£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

888 i‡(
c£g
 =
NULL
) {

889  
NULL
;

891 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

892 
	`pbuf_ªf
(
c£g
->
p
);

893  
c£g
;

894 
	}
}

897 #i‡
LWIP_CALLBACK_API


902 
îr_t


903 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

905 
¨g
 =árg;

906 i‡(
p
 !
NULL
) {

907 
	`pbuf_‰ì
(
p
);

908 } i‡(
îr
 =
ERR_OK
) {

909  
	`t˝_˛o£
(
pcb
);

911  
ERR_OK
;

912 
	}
}

921 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

923 
t˝_pcb
 *
pcb
, *
öa˘ive
;

924 
u32_t
 
öa˘ivôy
;

925 
u8_t
 
m¥io
;

928 
m¥io
 = 
TCP_PRIO_MAX
;

931 
öa˘ivôy
 = 0;

932 
öa˘ive
 = 
NULL
;

933 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

934 i‡(
pcb
->
¥io
 <=Örio &&

935 
pcb
->
¥io
 <
m¥io
 &&

936 (
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

937 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

938 
öa˘ive
 = 
pcb
;

939 
m¥io
 = 
pcb
->
¥io
;

942 i‡(
öa˘ive
 !
NULL
) {

943 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

944 (*)
öa˘ive
, 
öa˘ivôy
));

945 
	`t˝_ab‹t
(
öa˘ive
);

947 
	}
}

954 
	$t˝_kûl_timewaô
()

956 
t˝_pcb
 *
pcb
, *
öa˘ive
;

957 
u32_t
 
öa˘ivôy
;

959 
öa˘ivôy
 = 0;

960 
öa˘ive
 = 
NULL
;

962 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

963 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

964 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

965 
öa˘ive
 = 
pcb
;

968 i‡(
öa˘ive
 !
NULL
) {

969 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

970 (*)
öa˘ive
, 
öa˘ivôy
));

971 
	`t˝_ab‹t
(
öa˘ive
);

973 
	}
}

981 
t˝_pcb
 *

982 
	$t˝_Æloc
(
u8_t
 
¥io
)

984 
t˝_pcb
 *
pcb
;

985 
u32_t
 
iss
;

987 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

988 i‡(
pcb
 =
NULL
) {

990 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

991 
	`t˝_kûl_timewaô
();

993 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

994 i‡(
pcb
 =
NULL
) {

996 
	`t˝_kûl_¥io
(
¥io
);

998 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

1001 i‡(
pcb
 !
NULL
) {

1002 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

1003 
pcb
->
¥io
 = 
TCP_PRIO_NORMAL
;

1004 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

1005 
pcb
->
¢d_queuñí
 = 0;

1006 
pcb
->
rcv_wnd
 = 
TCP_WND
;

1007 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

1008 
pcb
->
tos
 = 0;

1009 
pcb
->
âl
 = 
TCP_TTL
;

1012 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

1013 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

1014 
pcb
->
ß
 = 0;

1015 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1016 
pcb
->
πime
 = -1;

1017 
pcb
->
cwnd
 = 1;

1018 
iss
 = 
	`t˝_√xt_iss
();

1019 
pcb
->
¢d_wl2
 = 
iss
;

1020 
pcb
->
¢d_nxt
 = 
iss
;

1021 
pcb
->
œ°ack
 = 
iss
;

1022 
pcb
->
¢d_lbb
 = 
iss
;

1023 
pcb
->
tmr
 = 
t˝_ticks
;

1025 
pcb
->
pﬁ…mr
 = 0;

1027 #i‡
LWIP_CALLBACK_API


1028 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1032 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1034 #i‡
LWIP_TCP_KEEPALIVE


1035 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1036 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1039 
pcb
->
kìp_˙t_£¡
 = 0;

1041  
pcb
;

1042 
	}
}

1056 
t˝_pcb
 *

1057 
	$t˝_√w
()

1059  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1060 
	}
}

1070 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1072 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1073 
	}
}

1074 #i‡
LWIP_CALLBACK_API


1084 
	$t˝_ªcv
(
t˝_pcb
 *
pcb
,

1085 
	$îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
pbuf
 *
p
, 
îr_t
 
îr
))

1087 
pcb
->
ªcv
 =Ñecv;

1088 
	}
}

1098 
	$t˝_£¡
(
t˝_pcb
 *
pcb
,

1099 
	$îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
u16_t
 
Àn
))

1101 
pcb
->
£¡
 = sent;

1102 
	}
}

1113 
	$t˝_îr
(
t˝_pcb
 *
pcb
,

1114 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
))

1116 
pcb
->
îrf
 =Érrf;

1117 
	}
}

1128 
	$t˝_ac˚±
(
t˝_pcb
 *
pcb
,

1129 
	$îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
))

1131 
pcb
->
ac˚±
 =áccept;

1132 
	}
}

1143 
	$t˝_pﬁl
(
t˝_pcb
 *
pcb
,

1144 
	$îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
), 
u8_t
 
öãrvÆ
)

1146 #i‡
LWIP_CALLBACK_API


1147 
pcb
->
pﬁl
 =Öoll;

1149 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1150 
	}
}

1159 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1161 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1162 
pcb
->
°©e
 !
TIME_WAIT
 &&

1163 
pcb
->
°©e
 !
LISTEN
) {

1165 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1167 #i‡
TCP_LISTEN_BACKLOG


1168 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

1170 
t˝_pcb_li°í
 *
Õcb
;

1171 
	`LWIP_ASSERT
("tcp_pcb_purge:Öcb->state == SYN_RCVD butÅcp_listen_pcbs is NULL",

1172 
t˝_li°í_pcbs
.
li°í_pcbs
 !
NULL
);

1173 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

1174 i‡((
Õcb
->
loˇl_p‹t
 =
pcb
->local_port) &&

1175 (
	`ù_addr_ißny
(&
Õcb
->
loˇl_ù
) ||

1176 
	`ù_addr_cmp
(&
pcb
->
loˇl_ù
, &
Õcb
->local_ip))) {

1178 
	`LWIP_ASSERT
("tcp_pcb_purge:ÜistenÖcb doesÇot haveácceptsÖending",

1179 
Õcb
->
ac˚±s_≥ndög
 > 0);

1180 
Õcb
->
ac˚±s_≥ndög
--;

1188 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1189 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1190 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

1191 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1193 i‡(
pcb
->
un£¡
 !
NULL
) {

1194 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1196 i‡(
pcb
->
u«cked
 !
NULL
) {

1197 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1199 #i‡
TCP_QUEUE_OOSEQ


1200 i‡(
pcb
->
oo£q
 !
NULL
) {

1201 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1206 
pcb
->
πime
 = -1;

1208 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1209 
pcb
->
oo£q
 = 
NULL
;

1211 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1212 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1213 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1215 
	}
}

1224 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1226 
	`TCP_RMV
(
pcbli°
, 
pcb
);

1228 
	`t˝_pcb_purge
(
pcb
);

1231 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1232 
pcb
->
°©e
 !
LISTEN
 &&

1233 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1234 
pcb
->
Êags
 |
TF_ACK_NOW
;

1235 
	`t˝_ouçut
(
pcb
);

1238 i‡(
pcb
->
°©e
 !
LISTEN
) {

1239 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1240 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1241 #i‡
TCP_QUEUE_OOSEQ


1242 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1246 
pcb
->
°©e
 = 
CLOSED
;

1248 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1249 
	}
}

1256 
u32_t


1257 
	$t˝_√xt_iss
()

1259 
u32_t
 
iss
 = 6510;

1261 
iss
 +
t˝_ticks
;

1262  
iss
;

1263 
	}
}

1265 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1271 
u16_t


1272 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr
 *
addr
)

1274 
u16_t
 
mss_s
;

1275 
√tif
 *
outif
;

1277 
outif
 = 
	`ù_rouã
(
addr
);

1278 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1279 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1285 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1287  
£ndmss
;

1288 
	}
}

1291 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1298 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1300 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1301 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1302 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1303 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1304 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1305 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1306 
	`¡ohl
(
t˝hdr
->
£qno
)));

1307 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1308 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1309 
	`¡ohl
(
t˝hdr
->
ackno
)));

1310 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1311 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1312 
	`TCPH_HDRLEN
(
t˝hdr
),

1313 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1314 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1315 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1316 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1317 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1318 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1319 
	`¡ohs
(
t˝hdr
->
wnd
)));

1320 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1321 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1322 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1323 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1324 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1325 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1326 
	}
}

1334 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1336 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("State: "));

1337 
s
) {

1338 
CLOSED
:

1339 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSED\n"));

1341 
LISTEN
:

1342 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LISTEN\n"));

1344 
SYN_SENT
:

1345 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_SENT\n"));

1347 
SYN_RCVD
:

1348 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_RCVD\n"));

1350 
ESTABLISHED
:

1351 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ESTABLISHED\n"));

1353 
FIN_WAIT_1
:

1354 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_1\n"));

1356 
FIN_WAIT_2
:

1357 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_2\n"));

1359 
CLOSE_WAIT
:

1360 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSE_WAIT\n"));

1362 
CLOSING
:

1363 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSING\n"));

1365 
LAST_ACK
:

1366 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LAST_ACK\n"));

1368 
TIME_WAIT
:

1369 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME_WAIT\n"));

1372 
	}
}

1380 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1382 i‡(
Êags
 & 
TCP_FIN
) {

1383 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1385 i‡(
Êags
 & 
TCP_SYN
) {

1386 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1388 i‡(
Êags
 & 
TCP_RST
) {

1389 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1391 i‡(
Êags
 & 
TCP_PSH
) {

1392 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1394 i‡(
Êags
 & 
TCP_ACK
) {

1395 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1397 i‡(
Êags
 & 
TCP_URG
) {

1398 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1400 i‡(
Êags
 & 
TCP_ECE
) {

1401 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1403 i‡(
Êags
 & 
TCP_CWR
) {

1404 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1406 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("\n"));

1407 
	}
}

1413 
	$t˝_debug_¥öt_pcbs
()

1415 
t˝_pcb
 *
pcb
;

1416 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1417 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1418 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1419 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1420 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1421 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1423 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1424 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1425 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1426 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1427 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1428 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1430 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1431 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1432 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1433 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1434 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1435 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1437 
	}
}

1442 
s16_t


1443 
	$t˝_pcbs_ß√
()

1445 
t˝_pcb
 *
pcb
;

1446 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1447 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1448 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1449 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1451 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1452 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1455 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/tcp_in.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/t˝.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/memp.h
"

54 
	~"lwù/öë.h
"

55 
	~"lwù/öë_chksum.h
"

56 
	~"lwù/°©s.h
"

57 
	~"lwù/¢mp.h
"

58 
	~"¨ch/≥rf.h
"

63 
t˝_£g
 
	gö£g
;

64 
t˝_hdr
 *
	gt˝hdr
;

65 
ù_hdr
 *
	gùhdr
;

66 
u32_t
 
	g£qno
, 
	gackno
;

67 
u8_t
 
	gÊags
;

68 
u16_t
 
	gt˝Àn
;

70 
u8_t
 
	gªcv_Êags
;

71 
pbuf
 *
	gªcv_d©a
;

73 
t˝_pcb
 *
	gt˝_öput_pcb
;

76 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
);

77 
u8_t
 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
);

78 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
);

80 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
);

81 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
);

93 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

95 
t˝_pcb
 *
pcb
, *
¥ev
;

96 
t˝_pcb_li°í
 *
Õcb
;

97 
u8_t
 
hdæí
;

98 
îr_t
 
îr
;

100 
PERF_START
;

102 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

103 
	`¢mp_öc_t˝ö£gs
();

105 
ùhdr
 = 
p
->
∑ylﬂd
;

106 
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(
ùhdr
) * 4);

108 #i‡
TCP_INPUT_DEBUG


109 
	`t˝_debug_¥öt
(
t˝hdr
);

113 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

115 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

116 
	`TCP_STATS_INC
(
t˝
.
À√º
);

117 
	`TCP_STATS_INC
(
t˝
.
dr›
);

118 
	`¢mp_öc_t˝öîrs
();

119 
	`pbuf_‰ì
(
p
);

124 i‡(
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) ||

125 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

126 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

127 
	`TCP_STATS_INC
(
t˝
.
dr›
);

128 
	`¢mp_öc_t˝öîrs
();

129 
	`pbuf_‰ì
(
p
);

133 #i‡
CHECKSUM_CHECK_TCP


135 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

136 (
ù_addr
 *)&(
ùhdr
->
de°
),

137 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

138 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

139 
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
), (ù_add∏*)&(ùhdr->
de°
),

140 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

141 #i‡
TCP_DEBUG


142 
	`t˝_debug_¥öt
(
t˝hdr
);

144 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

145 
	`TCP_STATS_INC
(
t˝
.
dr›
);

146 
	`¢mp_öc_t˝öîrs
();

147 
	`pbuf_‰ì
(
p
);

154 
hdæí
 = 
	`TCPH_HDRLEN
(
t˝hdr
);

155 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

157 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

158 
	`TCP_STATS_INC
(
t˝
.
À√º
);

159 
	`TCP_STATS_INC
(
t˝
.
dr›
);

160 
	`¢mp_öc_t˝öîrs
();

161 
	`pbuf_‰ì
(
p
);

166 
t˝hdr
->
§c
 = 
	`¡ohs
(tcphdr->src);

167 
t˝hdr
->
de°
 = 
	`¡ohs
(tcphdr->dest);

168 
£qno
 = 
t˝hdr
->£qnÿ
	`¡ohl
(tcphdr->seqno);

169 
ackno
 = 
t˝hdr
->acknÿ
	`¡ohl
(tcphdr->ackno);

170 
t˝hdr
->
wnd
 = 
	`¡ohs
(tcphdr->wnd);

172 
Êags
 = 
	`TCPH_FLAGS
(
t˝hdr
);

173 
t˝Àn
 = 
p
->
tŸ_Àn
 + ((
Êags
 & (
TCP_FIN
 | 
TCP_SYN
)) ? 1 : 0);

177 
¥ev
 = 
NULL
;

180 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

181 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

182 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

183 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

184 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

185 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

186 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

187 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

192 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

193 i‡(
¥ev
 !
NULL
) {

194 
¥ev
->
√xt
 = 
pcb
->next;

195 
pcb
->
√xt
 = 
t˝_a˘ive_pcbs
;

196 
t˝_a˘ive_pcbs
 = 
pcb
;

198 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

201 
¥ev
 = 
pcb
;

204 i‡(
pcb
 =
NULL
) {

207 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

208 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

209 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

210 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

211 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

212 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

216 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

217 
	`t˝_timewaô_öput
(
pcb
);

218 
	`pbuf_‰ì
(
p
);

225 
¥ev
 = 
NULL
;

226 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

227 i‡((
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)) ||

228 
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) &&

229 
Õcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
) {

233 i‡(
¥ev
 !
NULL
) {

234 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

236 
Õcb
->
√xt
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;

238 
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

241 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

242 
	`t˝_li°í_öput
(
Õcb
);

243 
	`pbuf_‰ì
(
p
);

246 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

250 #i‡
TCP_INPUT_DEBUG


251 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

252 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

253 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

257 i‡(
pcb
 !
NULL
) {

259 #i‡
TCP_INPUT_DEBUG


260 #i‡
TCP_DEBUG


261 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

266 
ö£g
.
√xt
 = 
NULL
;

267 
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

268 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

269 
ö£g
.
p
 =Ö;

270 
ö£g
.
t˝hdr
 =Åcphdr;

272 
ªcv_d©a
 = 
NULL
;

273 
ªcv_Êags
 = 0;

276 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

278 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

279 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

280 i‡(
îr
 =
ERR_OK
) {

281 
pcb
->
ªfu£d_d©a
 = 
NULL
;

284 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

285 
	`TCP_STATS_INC
(
t˝
.
dr›
);

286 
	`¢mp_öc_t˝öîrs
();

287 
	`pbuf_‰ì
(
p
);

292 
t˝_öput_pcb
 = 
pcb
;

293 
îr
 = 
	`t˝_¥o˚ss
(
pcb
);

294 
t˝_öput_pcb
 = 
NULL
;

297 i‡(
îr
 !
ERR_ABRT
) {

298 i‡(
ªcv_Êags
 & 
TF_RESET
) {

303 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

304 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

305 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

306 } i‡(
ªcv_Êags
 & 
TF_CLOSED
) {

309 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

310 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

312 
îr
 = 
ERR_OK
;

316 i‡(
pcb
->
acked
 > 0) {

317 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

320 i‡(
ªcv_d©a
 !
NULL
) {

321 if(
Êags
 & 
TCP_PSH
) {

322 
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

326 
	`TCP_EVENT_RECV
(
pcb
, 
ªcv_d©a
, 
ERR_OK
, 
îr
);

329 i‡(
îr
 !
ERR_OK
) {

330 
pcb
->
ªfu£d_d©a
 = 
ªcv_d©a
;

331 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

337 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

338 
	`TCP_EVENT_RECV
(
pcb
, 
NULL
, 
ERR_OK
, 
îr
);

342 i‡(
îr
 =
ERR_OK
) {

343 
	`t˝_ouçut
(
pcb
);

350 i‡(
ö£g
.
p
 !
NULL
)

352 
	`pbuf_‰ì
(
ö£g
.
p
);

353 
ö£g
.
p
 = 
NULL
;

355 #i‡
TCP_INPUT_DEBUG


356 #i‡
TCP_DEBUG


357 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

365 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

366 i‡(!(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
)) {

367 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

368 
	`TCP_STATS_INC
(
t˝
.
dr›
);

369 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
,

370 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

371 
t˝hdr
->
de°
,Å˝hdr->
§c
);

373 
	`pbuf_‰ì
(
p
);

376 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

377 
	`PERF_STOP
("tcp_input");

378 
	}
}

392 
îr_t


393 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
)

395 
t˝_pcb
 *
≈cb
;

396 
îr_t
 
rc
;

400 i‡(
Êags
 & 
TCP_ACK
) {

403 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

404 
	`t˝_r°
(
ackno
 + 1, 
£qno
 + 
t˝Àn
,

405 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

406 
t˝hdr
->
de°
,Å˝hdr->
§c
);

407 } i‡(
Êags
 & 
TCP_SYN
) {

408 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
t˝hdr
->
§c
,Å˝hdr->
de°
));

409 #i‡
TCP_LISTEN_BACKLOG


410 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

411 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_li°í_öput:Üi°í backlogÉx˚eded f‹Ö‹à%"
U16_F
"\n", 
t˝hdr
->
de°
));

412  
ERR_ABRT
;

415 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

419 i‡(
≈cb
 =
NULL
) {

420 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

421 
	`TCP_STATS_INC
(
t˝
.
memîr
);

422  
ERR_MEM
;

424 #i‡
TCP_LISTEN_BACKLOG


425 
pcb
->
ac˚±s_≥ndög
++;

428 
	`ù_addr_£t
(&(
≈cb
->
loˇl_ù
), &(
ùhdr
->
de°
));

429 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

430 
	`ù_addr_£t
(&(
≈cb
->
ªmŸe_ù
), &(
ùhdr
->
§c
));

431 
≈cb
->
ªmŸe_p‹t
 = 
t˝hdr
->
§c
;

432 
≈cb
->
°©e
 = 
SYN_RCVD
;

433 
≈cb
->
rcv_nxt
 = 
£qno
 + 1;

434 
≈cb
->
rcv_™n_right_edge
 =Çpcb->
rcv_nxt
;

435 
≈cb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

436 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

437 
≈cb
->
¢d_wl1
 = 
£qno
 - 1;

438 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

439 #i‡
LWIP_CALLBACK_API


440 
≈cb
->
ac˚±
 = 
pcb
->accept;

443 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& (
SOF_DEBUG
|
SOF_DONTROUTE
|
SOF_KEEPALIVE
|
SOF_OOBINLINE
|
SOF_LINGER
);

446 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
);

449 
	`t˝_∑r£›t
(
≈cb
);

450 #i‡
TCP_CALCULATE_EFF_SEND_MSS


451 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

454 
	`¢mp_öc_t˝∑ssive›ís
();

457 
rc
 = 
	`t˝_íqueue
(
≈cb
, 
NULL
, 0, 
TCP_SYN
 | 
TCP_ACK
, 0, 
TF_SEG_OPTS_MSS


458 #i‡
LWIP_TCP_TIMESTAMPS


460 | (
≈cb
->
Êags
 & 
TF_TIMESTAMP
 ? 
TF_SEG_OPTS_TS
 : 0)

463 i‡(
rc
 !
ERR_OK
) {

464 
	`t˝_ab™d⁄
(
≈cb
, 0);

465  
rc
;

467  
	`t˝_ouçut
(
≈cb
);

469  
ERR_OK
;

470 
	}
}

481 
îr_t


482 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
)

484 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
t˝Àn
, 
pcb
->
rcv_nxt
)) {

485 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

487 i‡(
t˝Àn
 > 0) {

488 
	`t˝_ack_now
(
pcb
);

490  
	`t˝_ouçut
(
pcb
);

491 
	}
}

504 
îr_t


505 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
)

507 
t˝_£g
 *
r£g
;

508 
u8_t
 
ac˚±abÀ
 = 0;

509 
îr_t
 
îr
;

511 
îr
 = 
ERR_OK
;

514 i‡(
Êags
 & 
TCP_RST
) {

516 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

517 i‡(
ackno
 =
pcb
->
¢d_nxt
) {

518 
ac˚±abÀ
 = 1;

521 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

522 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

523 
ac˚±abÀ
 = 1;

527 i‡(
ac˚±abÀ
) {

528 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

529 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

530 
ªcv_Êags
 |
TF_RESET
;

531 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

532  
ERR_RST
;

534 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

535 
£qno
, 
pcb
->
rcv_nxt
));

536 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

537 
£qno
, 
pcb
->
rcv_nxt
));

538  
ERR_OK
;

542 i‡((
Êags
 & 
TCP_SYN
Ë&& (
pcb
->
°©e
 !
SYN_SENT
 &&Öcb->°©ê!
SYN_RCVD
)) {

544 
	`t˝_ack_now
(
pcb
);

545  
ERR_OK
;

549 
pcb
->
tmr
 = 
t˝_ticks
;

550 
pcb
->
kìp_˙t_£¡
 = 0;

552 
	`t˝_∑r£›t
(
pcb
);

555 
pcb
->
°©e
) {

556 
SYN_SENT
:

557 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ackno
,

558 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

560 i‡((
Êags
 & 
TCP_ACK
Ë&& (Êag†& 
TCP_SYN
)

561 && 
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

562 
pcb
->
¢d_buf
++;

563 
pcb
->
rcv_nxt
 = 
£qno
 + 1;

564 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
;

565 
pcb
->
œ°ack
 = 
ackno
;

566 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

567 
pcb
->
¢d_wl1
 = 
£qno
 - 1;

568 
pcb
->
°©e
 = 
ESTABLISHED
;

570 #i‡
TCP_CALCULATE_EFF_SEND_MSS


571 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

576 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

578 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

579 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

580 --
pcb
->
¢d_queuñí
;

581 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

582 
r£g
 = 
pcb
->
u«cked
;

583 
pcb
->
u«cked
 = 
r£g
->
√xt
;

587 if(
pcb
->
u«cked
 =
NULL
)

588 
pcb
->
πime
 = -1;

590 
pcb
->
πime
 = 0;

591 
pcb
->
ƒtx
 = 0;

594 
	`t˝_£g_‰ì
(
r£g
);

598 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

599 
	`t˝_ack_now
(
pcb
);

602 i‡(
Êags
 & 
TCP_ACK
) {

604 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

605 
t˝hdr
->
de°
,Å˝hdr->
§c
);

608 
SYN_RCVD
:

609 i‡(
Êags
 & 
TCP_ACK
) {

611 i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

612 
u16_t
 
ﬁd_cwnd
;

613 
pcb
->
°©e
 = 
ESTABLISHED
;

614 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

615 #i‡
LWIP_CALLBACK_API


616 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

619 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

620 i‡(
îr
 !
ERR_OK
) {

623 
	`t˝_ab‹t
(
pcb
);

624  
ERR_ABRT
;

626 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

629 
	`t˝_ª˚ive
(
pcb
);

631 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

633 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

634 
	`t˝_ack_now
(
pcb
);

635 
pcb
->
°©e
 = 
CLOSE_WAIT
;

641 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

642 
t˝hdr
->
de°
,Å˝hdr->
§c
);

644 } i‡((
Êags
 & 
TCP_SYN
Ë&& (
£qno
 =
pcb
->
rcv_nxt
 - 1)) {

646 
	`t˝_ªxmô
(
pcb
);

649 
CLOSE_WAIT
:

651 
ESTABLISHED
:

652 
	`t˝_ª˚ive
(
pcb
);

653 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

654 
	`t˝_ack_now
(
pcb
);

655 
pcb
->
°©e
 = 
CLOSE_WAIT
;

658 
FIN_WAIT_1
:

659 
	`t˝_ª˚ive
(
pcb
);

660 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

661 i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

662 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

663 ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

664 
	`t˝_ack_now
(
pcb
);

665 
	`t˝_pcb_purge
(
pcb
);

666 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

667 
pcb
->
°©e
 = 
TIME_WAIT
;

668 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

670 
	`t˝_ack_now
(
pcb
);

671 
pcb
->
°©e
 = 
CLOSING
;

673 } i‡((
Êags
 & 
TCP_ACK
Ë&& (
ackno
 =
pcb
->
¢d_nxt
)) {

674 
pcb
->
°©e
 = 
FIN_WAIT_2
;

677 
FIN_WAIT_2
:

678 
	`t˝_ª˚ive
(
pcb
);

679 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

680 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

681 
	`t˝_ack_now
(
pcb
);

682 
	`t˝_pcb_purge
(
pcb
);

683 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

684 
pcb
->
°©e
 = 
TIME_WAIT
;

685 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

688 
CLOSING
:

689 
	`t˝_ª˚ive
(
pcb
);

690 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

691 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

692 
	`t˝_pcb_purge
(
pcb
);

693 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

694 
pcb
->
°©e
 = 
TIME_WAIT
;

695 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

698 
LAST_ACK
:

699 
	`t˝_ª˚ive
(
pcb
);

700 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

701 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

703 
ªcv_Êags
 |
TF_CLOSED
;

709  
ERR_OK
;

710 
	}
}

726 
u8_t


727 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
)

729 
t˝_£g
 *
√xt
;

730 #i‡
TCP_QUEUE_OOSEQ


731 
t˝_£g
 *
¥ev
, *
c£g
;

733 
pbuf
 *
p
;

734 
s32_t
 
off
;

735 
s16_t
 
m
;

736 
u32_t
 
right_wnd_edge
;

737 
u16_t
 
√w_tŸ_Àn
;

738 
u8_t
 
ac˚±ed_ö£q
 = 0;

740 i‡(
Êags
 & 
TCP_ACK
) {

741 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl2
;

744 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
£qno
) ||

745 (
pcb
->
¢d_wl1
 =
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, 
ackno
)) ||

746 (
pcb
->
¢d_wl2
 =
ackno
 && 
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

747 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

748 
pcb
->
¢d_wl1
 = 
£qno
;

749 
pcb
->
¢d_wl2
 = 
ackno
;

750 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

751 
pcb
->
≥rsi°_backoff
 = 0;

753 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

754 #i‡
TCP_WND_DEBUG


756 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

757 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
,

758 ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
"áckno %"

759 
U32_F
" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

760 
pcb
->
œ°ack
, 
ackno
,Öcb->
¢d_wl1
, 
£qno
,Öcb->
¢d_wl2
));

765 i‡(
pcb
->
œ°ack
 =
ackno
) {

766 
pcb
->
acked
 = 0;

768 i‡(
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

769 ++
pcb
->
du∑cks
;

770 i‡(
pcb
->
du∑cks
 >3 &&Öcb->
u«cked
 !
NULL
) {

771 i‡(!(
pcb
->
Êags
 & 
TF_INFR
)) {

773 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F
"), fastÑetransmit %"U32_F"\n",

774 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

775 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

776 
	`t˝_ªxmô
(
pcb
);

782 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
)

783 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

785 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

788 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

789 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F
" should bêmö 2 ms†%"U16_F"...\n", 
pcb
->
s°hªsh
, 2*pcb->
mss
));

790 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

793 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

794 
pcb
->
Êags
 |
TF_INFR
;

798 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

799 
pcb
->
cwnd
 +pcb->
mss
;

804 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ckávîãd %"
U32_F
" %"U32_F"\n",

805 
pcb
->
¢d_wl2
 +Öcb->
¢d_wnd
, 
right_wnd_edge
));

807 } i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)){

813 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

814 
pcb
->
Êags
 &~
TF_INFR
;

815 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

819 
pcb
->
ƒtx
 = 0;

822 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

825 
pcb
->
acked
 = (
u16_t
)(
ackno
 -Öcb->
œ°ack
);

827 
pcb
->
¢d_buf
 +pcb->
acked
;

830 
pcb
->
du∑cks
 = 0;

831 
pcb
->
œ°ack
 = 
ackno
;

835 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

836 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

837 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

838 
pcb
->
cwnd
 +pcb->
mss
;

840 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

842 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

843 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

844 
pcb
->
cwnd
 = 
√w_cwnd
;

846 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

849 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

850 
ackno
,

851 
pcb
->
u«cked
 !
NULL
?

852 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

853 
pcb
->
u«cked
 !
NULL
?

854 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

858 
pcb
->
u«cked
 !
NULL
 &&

859 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

860 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ackno
)) {

861 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

862 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

863 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

864 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

866 
√xt
 = 
pcb
->
u«cked
;

867 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

869 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

870 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

871 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

872 
	`t˝_£g_‰ì
(
√xt
);

874 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

875 i‡(
pcb
->
¢d_queuñí
 != 0) {

876 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

877 
pcb
->
un£¡
 !
NULL
);

883 if(
pcb
->
u«cked
 =
NULL
)

884 
pcb
->
πime
 = -1;

886 
pcb
->
πime
 = 0;

888 
pcb
->
pﬁ…mr
 = 0;

891 
pcb
->
acked
 = 0;

900 
pcb
->
un£¡
 !
NULL
 &&

901 
	`TCP_SEQ_BETWEEN
(
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
) +

902 
	`TCP_TCPLEN
(
pcb
->
un£¡
),Öcb->
¢d_nxt
)) {

903 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

904 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

905 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

907 
√xt
 = 
pcb
->
un£¡
;

908 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

909 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

910 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

911 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

912 
	`t˝_£g_‰ì
(
√xt
);

913 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

914 i‡(
pcb
->
¢d_queuñí
 != 0) {

915 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

916 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

921 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

922 
pcb
->
πã°
,Öcb->
π£q
, 
ackno
));

927 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ackno
)) {

930 
m
 = (
s16_t
)(
t˝_ticks
 - 
pcb
->
πã°
);

932 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

933 
m
, m * 
TCP_SLOW_INTERVAL
));

936 
m
 = m - (
pcb
->
ß
 >> 3);

937 
pcb
->
ß
 +
m
;

938 i‡(
m
 < 0) {

939 
m
 = -m;

941 
m
 = m - (
pcb
->
sv
 >> 2);

942 
pcb
->
sv
 +
m
;

943 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

945 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

946 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

948 
pcb
->
πã°
 = 0;

954 i‡(
t˝Àn
 > 0) {

985 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
£qno
 + 1, seqnÿ+ 
t˝Àn
 - 1)){

1006 
off
 = 
pcb
->
rcv_nxt
 - 
£qno
;

1007 
p
 = 
ö£g
.p;

1008 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö£g
.
p
);

1009 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

1010 i‡(
ö£g
.
p
->
Àn
 < 
off
) {

1011 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1012 
√w_tŸ_Àn
 = (
u16_t
)(
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1013 
p
->
Àn
 < 
off
) {

1014 
off
 -
p
->
Àn
;

1018 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1019 
p
->
Àn
 = 0;

1020 
p
 =Ö->
√xt
;

1022 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1024 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1027 if(
	`pbuf_hódî
(
ö£g
.
p
, (
s16_t
)-
off
)) {

1029 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1034 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

1035 
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - 
£qno
);

1036 
ö£g
.
t˝hdr
->
£qno
 = seqnÿ
pcb
->
rcv_nxt
;

1039 i‡(
	`TCP_SEQ_LT
(
£qno
, 
pcb
->
rcv_nxt
)){

1043 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
£qno
));

1044 
	`t˝_ack_now
(
pcb
);

1051 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

1052 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1053 i‡(
pcb
->
rcv_nxt
 =
£qno
) {

1054 
ac˚±ed_ö£q
 = 1;

1058 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1060 i‡(
t˝Àn
 > 
pcb
->
rcv_wnd
) {

1061 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1063 "£qnÿ%"
U32_F
"Üen %"U32_F"ÑightÉdge %"U32_F"\n",

1064 
£qno
, 
t˝Àn
, 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1065 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1068 
	`TCPH_FLAGS_SET
(
ö£g
.
t˝hdr
, 
	`TCPH_FLAGS
(ö£g.t˝hdrË&~ 
TCP_FIN
);

1071 
ö£g
.
Àn
 = 
pcb
->
rcv_wnd
;

1072 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1073 
ö£g
.
Àn
 -= 1;

1075 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1076 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1077 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅoÑcv_wnd\n",

1078 (
£qno
 + 
t˝Àn
Ë=(
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
));

1080 #i‡
TCP_QUEUE_OOSEQ


1081 i‡(
pcb
->
oo£q
 !
NULL
) {

1082 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1083 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
,

1088 
pcb
->
oo£q
 !
NULL
) {

1089 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1090 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1091 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1093 } i‡(
	`TCP_SEQ_LEQ
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqnÿ+ 
t˝Àn
)) {

1094 i‡(
pcb
->
oo£q
->
Àn
 > 0) {

1096 
	`LWIP_ASSERT
("tcp_receive:Årimmed segment would have zeroÜength\n",

1097 
	`TCP_SEQ_GT
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqno));

1099 
ö£g
.
Àn
 = (
u16_t
)(
pcb
->
oo£q
->
t˝hdr
->
£qno
 - seqno);

1100 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_SYN
) {

1101 
ö£g
.
Àn
 -= 1;

1103 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1104 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1105 
	`LWIP_ASSERT
("tcp_receive: segmentÇotÅrimmed correctlyÅo ooseq queue\n",

1106 (
£qno
 + 
t˝Àn
Ë=
pcb
->
oo£q
->
t˝hdr
->seqno);

1109 i‡((
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
)) ==

1110 (
	`TCPH_FLAGS
(
pcb
->
oo£q
->
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
))) {

1111 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1112 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1113 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1120 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

1123 
	`LWIP_ASSERT
("t˝_ª˚ive:Å˝À¿>Ñcv_wnd\n", 
pcb
->
rcv_wnd
 >
t˝Àn
);

1124 
pcb
->
rcv_wnd
 -
t˝Àn
;

1126 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1137 i‡(
ö£g
.
p
->
tŸ_Àn
 > 0) {

1138 
ªcv_d©a
 = 
ö£g
.
p
;

1142 
ö£g
.
p
 = 
NULL
;

1144 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1145 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1146 
ªcv_Êags
 |
TF_GOT_FIN
;

1149 #i‡
TCP_QUEUE_OOSEQ


1152 
pcb
->
oo£q
 !
NULL
 &&

1153 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1155 
c£g
 = 
pcb
->
oo£q
;

1156 
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1158 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1159 
	`LWIP_ASSERT
("tcp_receive: ooseqÅcplen >Ñcv_wnd\n",

1160 
pcb
->
rcv_wnd
 >
	`TCP_TCPLEN
(
c£g
));

1161 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1163 
	`t˝_upd©e_rcv_™n_wnd
(
pcb
);

1165 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1168 i‡(
ªcv_d©a
) {

1169 
	`pbuf_ˇt
(
ªcv_d©a
, 
c£g
->
p
);

1171 
ªcv_d©a
 = 
c£g
->
p
;

1173 
c£g
->
p
 = 
NULL
;

1175 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1176 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1177 
ªcv_Êags
 |
TF_GOT_FIN
;

1178 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1179 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1184 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1185 
	`t˝_£g_‰ì
(
c£g
);

1191 
	`t˝_ack
(
pcb
);

1195 
	`t˝_ack_now
(
pcb
);

1196 #i‡
TCP_QUEUE_OOSEQ


1198 i‡(
pcb
->
oo£q
 =
NULL
) {

1199 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö£g
);

1213 
¥ev
 = 
NULL
;

1214 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1215 i‡(
£qno
 =
√xt
->
t˝hdr
->seqno) {

1220 i‡(
ö£g
.
Àn
 > 
√xt
->len) {

1224 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1225 i‡(
c£g
 !
NULL
) {

1226 
c£g
->
√xt
 =Çext->next;

1227 i‡(
¥ev
 !
NULL
) {

1228 
¥ev
->
√xt
 = 
c£g
;

1230 
pcb
->
oo£q
 = 
c£g
;

1232 
	`t˝_£g_‰ì
(
√xt
);

1233 i‡(
c£g
->
√xt
 !
NULL
) {

1234 
√xt
 = 
c£g
->next;

1235 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1237 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1238 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

1250 i‡(
¥ev
 =
NULL
) {

1251 i‡(
	`TCP_SEQ_LT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1257 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1259 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1260 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1262 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1263 i‡(
c£g
 !
NULL
) {

1264 
c£g
->
√xt
 =Çext;

1265 
pcb
->
oo£q
 = 
c£g
;

1272 if(
	`TCP_SEQ_BETWEEN
(
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)){

1278 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1280 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1281 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1284 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1285 i‡(
c£g
 !
NULL
) {

1286 
c£g
->
√xt
 =Çext;

1287 
¥ev
->
√xt
 = 
c£g
;

1288 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, seqno)) {

1290 
¥ev
->
Àn
 = (
u16_t
)(
£qno
 -Öªv->
t˝hdr
->seqno);

1291 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1299 i‡(
√xt
->√xà=
NULL
 &&

1300 
	`TCP_SEQ_GT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1301 
√xt
->√xà
	`t˝_£g_c›y
(&
ö£g
);

1302 i‡(
√xt
->√xà!
NULL
) {

1303 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, seqno)) {

1305 
√xt
->
Àn
 = (
u16_t
)(
£qno
 -Çext->
t˝hdr
->seqno);

1306 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1312 
¥ev
 = 
√xt
;

1319 
	`t˝_ack_now
(
pcb
);

1326 if(!
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1327 
	`t˝_ack_now
(
pcb
);

1330  
ac˚±ed_ö£q
;

1331 
	}
}

1342 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
)

1344 
u16_t
 
c
, 
max_c
;

1345 
u16_t
 
mss
;

1346 
u8_t
 *
›ts
, 
›t
;

1347 #i‡
LWIP_TCP_TIMESTAMPS


1348 
u32_t
 
tsvÆ
;

1351 
›ts
 = (
u8_t
 *)
t˝hdr
 + 
TCP_HLEN
;

1354 if(
	`TCPH_HDRLEN
(
t˝hdr
) > 0x5) {

1355 
max_c
 = (
	`TCPH_HDRLEN
(
t˝hdr
) - 5) << 2;

1356 
c
 = 0; c < 
max_c
; ) {

1357 
›t
 = 
›ts
[
c
];

1358 
›t
) {

1361 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: EOL\n"));

1365 ++
c
;

1366 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: NOP\n"));

1369 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: MSS\n"));

1370 i‡(
›ts
[
c
 + 1] !0x04 || c + 0x04 > 
max_c
) {

1372 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1376 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1378 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1380 
c
 += 0x04;

1382 #i‡
LWIP_TCP_TIMESTAMPS


1384 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: TS\n"));

1385 i‡(
›ts
[
c
 + 1] !0x0A || c + 0x0A > 
max_c
) {

1387 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1391 
tsvÆ
 = (
›ts
[
c
+2]) | (opts[c+3] << 8) |

1392 (
›ts
[
c
+4] << 16) | (opts[c+5] << 24);

1393 i‡(
Êags
 & 
TCP_SYN
) {

1394 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1395 
pcb
->
Êags
 |
TF_TIMESTAMP
;

1396 } i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
ts_œ°ack£¡
, 
£qno
, seqno+
t˝Àn
)) {

1397 
pcb
->
ts_ª˚¡
 = 
	`¡ohl
(
tsvÆ
);

1400 
c
 += 0x0A;

1404 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: other\n"));

1405 i‡(
›ts
[
c
 + 1] == 0) {

1406 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_parseopt: badÜength\n"));

1413 
c
 +
›ts
[c + 1];

1417 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/tcp_out.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/t˝.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/öë.h
"

53 
	~"lwù/öë_chksum.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/¢mp.h
"

57 
	~<°rög.h
>

60 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

62 
t˝_hdr
 *

63 
	$t˝_ouçut_£t_hódî
(
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
›éí
,

64 
u32_t
 
£qno_be
 )

66 
t˝_hdr
 *
t˝hdr
 = 
p
->
∑ylﬂd
;

67 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

68 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

69 
t˝hdr
->
£qno
 = 
£qno_be
;

70 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

71 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
);

72 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

73 
t˝hdr
->
urgp
 = 0;

74 
	`TCPH_HDRLEN_SET
(
t˝hdr
, (5 + 
›éí
 / 4));

75 
t˝hdr
->
chksum
 = 0;

78 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

80  
t˝hdr
;

81 
	}
}

90 
îr_t


91 
	$t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

94  
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
Êags
, 
TCP_WRITE_FLAG_COPY
, 0);

95 
	}
}

115 
îr_t


116 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
d©a
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

118 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiÊags=%"U16_F")\n", (*)
pcb
,

119 
d©a
, 
Àn
, (
u16_t
)
≠iÊags
));

121 i‡(
pcb
->
°©e
 =
ESTABLISHED
 ||

122 
pcb
->
°©e
 =
CLOSE_WAIT
 ||

123 
pcb
->
°©e
 =
SYN_SENT
 ||

124 
pcb
->
°©e
 =
SYN_RCVD
) {

125 i‡(
Àn
 > 0) {

126 #i‡
LWIP_TCP_TIMESTAMPS


127  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
,

128 
pcb
->
Êags
 & 
TF_TIMESTAMP
 ? 
TF_SEG_OPTS_TS
 : 0);

130  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
, 0);

133  
ERR_OK
;

135 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 3, ("tcp_write() called in invalid state\n"));

136  
ERR_CONN
;

138 
	}
}

154 
îr_t


155 
	$t˝_íqueue
(
t˝_pcb
 *
pcb
, *
¨g
, 
u16_t
 
Àn
,

156 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
)

158 
pbuf
 *
p
;

159 
t˝_£g
 *
£g
, *
u£g
, *
queue
;

160 
u32_t
 
£qno
;

161 
u16_t
 
À·
, 
£gÀn
;

162 *
±r
;

163 
u16_t
 
queuñí
;

164 
u8_t
 
›éí
;

166 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

167 ("t˝_íqueue’cb=%p,árg=%p,Üí=%"
U16_F
", fœgs=%"
X16_F
",ápiflags=%"U16_F")\n",

168 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
Êags
, (u16_t)
≠iÊags
));

169 
	`LWIP_ERROR
("tcp_enqueue:ÖacketÇeedsÖayload, options, or SYN/FIN (programmer violates API)",

170 ((
Àn
 !0Ë|| (
›tÊags
 !0Ë|| ((
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) != 0)),

171  
ERR_ARG
;);

172 
	`LWIP_ERROR
("tcp_enqueue:Üen != 0 ||árg == NULL (programmer violates API)",

173 ((
Àn
 !0Ë|| (
¨g
 =
NULL
)),  
ERR_ARG
;);

176 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

177 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n", 
Àn
, 
pcb
->
¢d_buf
));

178 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

179  
ERR_MEM
;

181 
À·
 = 
Àn
;

182 
±r
 = 
¨g
;

184 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
›tÊags
);

188 
£qno
 = 
pcb
->
¢d_lbb
;

190 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

194 
queuñí
 = 
pcb
->
¢d_queuñí
;

196 i‡((
queuñí
 >
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

197 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

198 
	`TCP_STATS_INC
(
t˝
.
memîr
);

199 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

200  
ERR_MEM
;

202 i‡(
queuñí
 != 0) {

203 
	`LWIP_ASSERT
("tcp_enqueue:Öbufs on queue =>átÜeast one queueÇon-empty",

204 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

206 
	`LWIP_ASSERT
("tcp_enqueue:ÇoÖbufs on queue => both queuesÉmpty",

207 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

212 
u£g
 = 
queue
 = 
£g
 = 
NULL
;

213 
£gÀn
 = 0;

214 
queue
 =
NULL
 || 
À·
 > 0) {

216 
£gÀn
 = 
À·
 > (
pcb
->
mss
 - 
›éí
) ? (pcb->mss - optlen) :Üeft;

219 
£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

220 i‡(
£g
 =
NULL
) {

221 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

223 
memîr
;

225 
£g
->
√xt
 = 
NULL
;

226 
£g
->
p
 = 
NULL
;

229 i‡(
queue
 =
NULL
) {

230 
queue
 = 
£g
;

235 
	`LWIP_ASSERT
("u£g !NULL", 
u£g
 !
NULL
);

236 
u£g
->
√xt
 = 
£g
;

239 
u£g
 = 
£g
;

244 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

245 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
 + 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

246 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

247 ("t˝_íqueuê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

248 
memîr
;

250 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can holdÅhe complete seglen",

251 (
£g
->
p
->
Àn
 >
£gÀn
 + 
›éí
));

252 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

253 i‡(
¨g
 !
NULL
) {

254 
	`MEMCPY
((*)
£g
->
p
->
∑ylﬂd
 + 
›éí
, 
±r
, 
£gÀn
);

256 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

261 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

262 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

264 
memîr
;

266 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

273 i‡(
À·
 > 0) {

274 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

276 
	`pbuf_‰ì
(
£g
->
p
);

277 
£g
->
p
 = 
NULL
;

278 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2,

280 
memîr
;

282 ++
queuñí
;

284 
p
->
∑ylﬂd
 = 
±r
;

285 
£g
->
d©≠å
 = 
±r
;

288 
	`pbuf_ˇt
(
£g
->
p
 ,Ö );

289 
p
 = 
NULL
;

295 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

296 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueue: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

297 
memîr
;

300 
£g
->
Àn
 = 
£gÀn
;

303 i‡(
	`pbuf_hódî
(
£g
->
p
, 
TCP_HLEN
)) {

304 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue:ÇoÑoom for TCP header inÖbuf.\n"));

305 
	`TCP_STATS_INC
(
t˝
.
îr
);

306 
memîr
;

308 
£g
->
t˝hdr
 = seg->
p
->
∑ylﬂd
;

309 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

310 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

311 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

312 
£g
->
t˝hdr
->
urgp
 = 0;

313 
	`TCPH_FLAGS_SET
(
£g
->
t˝hdr
, 
Êags
);

316 
£g
->
Êags
 = 
›tÊags
;

319 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4));

320 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_íqueue: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

321 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

322 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

323 (
u16_t
)
Êags
));

325 
À·
 -
£gÀn
;

326 
£qno
 +
£gÀn
;

327 
±r
 = (*)((
u8_t
 *Ìå + 
£gÀn
);

333 i‡(
pcb
->
un£¡
 =
NULL
) {

334 
u£g
 = 
NULL
;

337 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

343 i‡(
u£g
 !
NULL
 &&

344 
	`TCP_TCPLEN
(
u£g
) != 0 &&

345 !(
	`TCPH_FLAGS
(
u£g
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
)) &&

346 !(
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) &&

348 (
u£g
->
Àn
 + 
queue
->À¿<
pcb
->
mss
) &&

350 (
u£g
->
Êags
 =
queue
->flags)) {

352 if(
	`pbuf_hódî
(
queue
->
p
, -(
TCP_HLEN
 + 
›éí
))) {

354 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

355 
	`TCP_STATS_INC
(
t˝
.
îr
);

356 
memîr
;

358 i‡(
queue
->
p
->
Àn
 == 0) {

360 
pbuf
 *
ﬁd_q
 = 
queue
->
p
;

361 
queue
->
p
 = queue->p->
√xt
;

362 
ﬁd_q
->
√xt
 = 
NULL
;

363 
queuñí
--;

364 
	`pbuf_‰ì
(
ﬁd_q
);

366 
	`LWIP_ASSERT
("zîo-ÀngthÖbuf", (
queue
->
p
 !
NULL
Ë&& (queue->p->
Àn
 > 0));

367 
	`pbuf_ˇt
(
u£g
->
p
, 
queue
->p);

368 
u£g
->
Àn
 +
queue
->len;

369 
u£g
->
√xt
 = 
queue
->next;

371 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: chaöög segmíts,ÇewÜí %"
U16_F
"\n", 
u£g
->
Àn
));

372 i‡(
£g
 =
queue
) {

373 
£g
 = 
u£g
;

374 
£gÀn
 = 
u£g
->
Àn
;

376 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
queue
);

380 i‡(
u£g
 =
NULL
) {

382 
pcb
->
un£¡
 = 
queue
;

386 
u£g
->
√xt
 = 
queue
;

389 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

390 ++
Àn
;

392 i‡(
Êags
 & 
TCP_FIN
) {

393 
pcb
->
Êags
 |
TF_FIN
;

395 
pcb
->
¢d_lbb
 +
Àn
;

397 
pcb
->
¢d_buf
 -
Àn
;

400 
pcb
->
¢d_queuñí
 = 
queuñí
;

401 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

402 i‡(
pcb
->
¢d_queuñí
 != 0) {

403 
	`LWIP_ASSERT
("tcp_enqueue: valid queueÜength",

404 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

409 i‡(
£g
 !
NULL
 && 
£gÀn
 > 0 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

410 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

413  
ERR_OK
;

414 
memîr
:

415 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

416 
	`TCP_STATS_INC
(
t˝
.
memîr
);

418 i‡(
queue
 !
NULL
) {

419 
	`t˝_£gs_‰ì
(
queue
);

421 i‡(
pcb
->
¢d_queuñí
 != 0) {

422 
	`LWIP_ASSERT
("t˝_íqueue: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

423 
pcb
->
un£¡
 !
NULL
);

425 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

426  
ERR_MEM
;

427 
	}
}

430 #i‡
LWIP_TCP_TIMESTAMPS


437 
	$t˝_buûd_time°amp_›ti⁄
(
t˝_pcb
 *
pcb
, 
u32_t
 *
›ts
)

440 
›ts
[0] = 
	`ht⁄l
(0x0101080A);

441 
›ts
[1] = 
	`ht⁄l
(
	`sys_now
());

442 
›ts
[2] = 
	`ht⁄l
(
pcb
->
ts_ª˚¡
);

443 
	}
}

454 
îr_t


455 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

457 
pbuf
 *
p
;

458 
t˝_hdr
 *
t˝hdr
;

459 
t˝_£g
 *
£g
, *
u£g
;

460 
u32_t
 
wnd
, 
¢d_nxt
;

461 #i‡
TCP_CWND_DEBUG


462 
s16_t
 
i
 = 0;

464 
u8_t
 
›éí
 = 0;

470 i‡(
t˝_öput_pcb
 =
pcb
) {

471  
ERR_OK
;

474 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

476 
£g
 = 
pcb
->
un£¡
;

479 
u£g
 = 
pcb
->
u«cked
;

480 i‡(
u£g
 !
NULL
) {

481 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

490 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

491 (
£g
 =
NULL
 ||

492 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

493 #i‡
LWIP_TCP_TIMESTAMPS


494 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
)

495 
›éí
 = 
	`LWIP_TCP_OPT_LENGTH
(
TF_SEG_OPTS_TS
);

497 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 
›éí
, 
PBUF_RAM
);

498 i‡(
p
 =
NULL
) {

499 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

500  
ERR_BUF
;

502 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
,

503 ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

505 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

507 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 
›éí
, 
	`ht⁄l
’cb->
¢d_nxt
));

510 #i‡
LWIP_TCP_TIMESTAMPS


511 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

513 i‡(
pcb
->
Êags
 & 
TF_TIMESTAMP
)

514 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, (
u32_t
 *)(
t˝hdr
 + 1));

517 #i‡
CHECKSUM_GEN_TCP


518 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

519 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

521 #i‡
LWIP_NETIF_HWADDRHINT


522 
	`ù_ouçut_höãd
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

523 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

525 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

526 
IP_PROTO_TCP
);

528 
	`pbuf_‰ì
(
p
);

530  
ERR_OK
;

533 #i‡
TCP_OUTPUT_DEBUG


534 i‡(
£g
 =
NULL
) {

535 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

536 (*)
pcb
->
un£¡
));

539 #i‡
TCP_CWND_DEBUG


540 i‡(
£g
 =
NULL
) {

541 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


542 ", cwnd %"
U16_F
", wnd %"
U32_F


543 ", seg =NULL,áck %"
U32_F
"\n",

544 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

546 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

547 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


548 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

549 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

550 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

551 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

555 
£g
 !
NULL
 &&

556 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

557 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

558 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

566 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

567 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

570 #i‡
TCP_CWND_DEBUG


571 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

572 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

573 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

574 
pcb
->
œ°ack
,

575 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

576 ++
i
;

579 
pcb
->
un£¡
 = 
£g
->
√xt
;

581 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

582 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

583 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

586 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

587 
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

588 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_nxt
, snd_nxt)) {

589 
pcb
->
¢d_nxt
 = snd_nxt;

592 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

593 
£g
->
√xt
 = 
NULL
;

595 i‡(
pcb
->
u«cked
 =
NULL
) {

596 
pcb
->
u«cked
 = 
£g
;

597 
u£g
 = 
£g
;

603 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))){

605 
t˝_£g
 **
cur_£g
 = &(
pcb
->
u«cked
);

606 *
cur_£g
 &&

607 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

608 
cur_£g
 = &((*cur_£g)->
√xt
 );

610 
£g
->
√xt
 = (*
cur_£g
);

611 (*
cur_£g
Ë
£g
;

614 
u£g
->
√xt
 = 
£g
;

615 
u£g
 = u£g->
√xt
;

620 
	`t˝_£g_‰ì
(
£g
);

622 
£g
 = 
pcb
->
un£¡
;

625 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

626 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

628 
pcb
->
≥rsi°_˙t
 = 0;

629 
pcb
->
≥rsi°_backoff
 = 1;

632 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

633  
ERR_OK
;

634 
	}
}

643 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

645 
u16_t
 
Àn
;

646 
√tif
 *netif;

647 
u32_t
 *
›ts
;

650 
	`¢mp_öc_t˝out£gs
();

654 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

657 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

659 
pcb
->
rcv_™n_right_edge
 =Öcb->
rcv_nxt
 +Öcb->
rcv_™n_wnd
;

663 
›ts
 = (
u32_t
 *)(
£g
->
t˝hdr
 + 1);

664 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_MSS
) {

665 
	`TCP_BUILD_MSS_OPTION
(*
›ts
);

666 
›ts
 += 1;

668 #i‡
LWIP_TCP_TIMESTAMPS


669 
pcb
->
ts_œ°ack£¡
 =Öcb->
rcv_nxt
;

671 i‡(
£g
->
Êags
 & 
TF_SEG_OPTS_TS
) {

672 
	`t˝_buûd_time°amp_›ti⁄
(
pcb
, 
›ts
);

673 
›ts
 += 3;

679 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

680 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

681 i‡(
√tif
 =
NULL
) {

684 
	`ù_addr_£t
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
));

688 if(
pcb
->
πime
 == -1)

689 
pcb
->
πime
 = 0;

691 i‡(
pcb
->
πã°
 == 0) {

692 
pcb
->
πã°
 = 
t˝_ticks
;

693 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

695 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

697 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

698 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

699 
£g
->
Àn
));

701 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

703 
£g
->
p
->
Àn
 -=Üen;

704 
£g
->
p
->
tŸ_Àn
 -
Àn
;

706 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

708 
£g
->
t˝hdr
->
chksum
 = 0;

709 #i‡
CHECKSUM_GEN_TCP


710 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
,

711 &(
pcb
->
loˇl_ù
),

712 &(
pcb
->
ªmŸe_ù
),

713 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

715 
	`TCP_STATS_INC
(
t˝
.
xmô
);

717 #i‡
LWIP_NETIF_HWADDRHINT


718 
	`ù_ouçut_höãd
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

719 
IP_PROTO_TCP
, &(
pcb
->
addr_höt
));

721 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

722 
IP_PROTO_TCP
);

724 
	}
}

747 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

748 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

749 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

751 
pbuf
 *
p
;

752 
t˝_hdr
 *
t˝hdr
;

753 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

754 i‡(
p
 =
NULL
) {

755 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

758 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

759 (
p
->
Àn
 >(
t˝_hdr
)));

761 
t˝hdr
 = 
p
->
∑ylﬂd
;

762 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

763 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

764 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

765 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

766 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_RST
 | 
TCP_ACK
);

767 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
TCP_WND
);

768 
t˝hdr
->
urgp
 = 0;

769 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

771 
t˝hdr
->
chksum
 = 0;

772 #i‡
CHECKSUM_GEN_TCP


773 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

774 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

776 
	`TCP_STATS_INC
(
t˝
.
xmô
);

777 
	`¢mp_öc_t˝ouå°s
();

779 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

780 
	`pbuf_‰ì
(
p
);

781 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

782 
	}
}

792 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

794 
t˝_£g
 *
£g
;

796 i‡(
pcb
->
u«cked
 =
NULL
) {

801 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

803 
£g
->
√xt
 = 
pcb
->
un£¡
;

805 
pcb
->
un£¡
 =Öcb->
u«cked
;

807 
pcb
->
u«cked
 = 
NULL
;

810 ++
pcb
->
ƒtx
;

813 
pcb
->
πã°
 = 0;

816 
	`t˝_ouçut
(
pcb
);

817 
	}
}

827 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

829 
t˝_£g
 *
£g
;

830 
t˝_£g
 **
cur_£g
;

832 i‡(
pcb
->
u«cked
 =
NULL
) {

838 
£g
 = 
pcb
->
u«cked
;

839 
pcb
->
u«cked
 = 
£g
->
√xt
;

841 
cur_£g
 = &(
pcb
->
un£¡
);

842 *
cur_£g
 &&

843 
	`TCP_SEQ_LT
(
	`¡ohl
((*
cur_£g
)->
t˝hdr
->
£qno
),Çtohl(
£g
->tcphdr->seqno))) {

844 
cur_£g
 = &((*cur_£g)->
√xt
 );

846 
£g
->
√xt
 = *
cur_£g
;

847 *
cur_£g
 = 
£g
;

849 ++
pcb
->
ƒtx
;

852 
pcb
->
πã°
 = 0;

855 
	`¢mp_öc_t˝ªå™s£gs
();

856 
	`t˝_ouçut
(
pcb
);

857 
	}
}

868 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

870 
pbuf
 *
p
;

871 
t˝_hdr
 *
t˝hdr
;

873 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

874 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

875 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

877 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

878 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

880 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

882 if(
p
 =
NULL
) {

883 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

887 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

888 (
p
->
Àn
 >(
t˝_hdr
)));

890 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 0, 
	`ht⁄l
’cb->
¢d_nxt
 - 1));

892 #i‡
CHECKSUM_GEN_TCP


893 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

894 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

896 
	`TCP_STATS_INC
(
t˝
.
xmô
);

899 #i‡
LWIP_NETIF_HWADDRHINT


900 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

901 &(
pcb
->
addr_höt
));

903 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

906 
	`pbuf_‰ì
(
p
);

908 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

909 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

910 
	}
}

922 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

924 
pbuf
 *
p
;

925 
t˝_hdr
 *
t˝hdr
;

926 
t˝_£g
 *
£g
;

928 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

930 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

931 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

932 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

934 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

935 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


936 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

937 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

939 
£g
 = 
pcb
->
u«cked
;

941 if(
£g
 =
NULL
)

942 
£g
 = 
pcb
->
un£¡
;

944 if(
£g
 =
NULL
)

947 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 1, 
PBUF_RAM
);

949 if(
p
 =
NULL
) {

950 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

953 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

954 (
p
->
Àn
 >(
t˝_hdr
)));

956 
t˝hdr
 = 
	`t˝_ouçut_£t_hódî
(
pcb
, 
p
, 0, 
£g
->t˝hdr->
£qno
);

959 *((*)
p
->
∑ylﬂd
 + (
t˝_hdr
)Ë*(*)
£g
->
d©≠å
;

961 #i‡
CHECKSUM_GEN_TCP


962 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

963 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

965 
	`TCP_STATS_INC
(
t˝
.
xmô
);

968 #i‡
LWIP_NETIF_HWADDRHINT


969 
	`ù_ouçut_höãd
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
,

970 &(
pcb
->
addr_höt
));

972 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

975 
	`pbuf_‰ì
(
p
);

977 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


978 "ácknÿ%"
U32_F
".\n",

979 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

980 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/core/udp.c

49 
	~"lwù/›t.h
"

51 #i‡
LWIP_UDP


53 
	~"lwù/udp.h
"

54 
	~"lwù/def.h
"

55 
	~"lwù/memp.h
"

56 
	~"lwù/öë.h
"

57 
	~"lwù/öë_chksum.h
"

58 
	~"lwù/ù_addr.h
"

59 
	~"lwù/√tif.h
"

60 
	~"lwù/icmp.h
"

61 
	~"lwù/°©s.h
"

62 
	~"lwù/¢mp.h
"

63 
	~"¨ch/≥rf.h
"

64 
	~"lwù/dh˝.h
"

66 
	~<°rög.h
>

70 
udp_pcb
 *
	gudp_pcbs
;

85 
	$udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

87 
udp_hdr
 *
udphdr
;

88 
udp_pcb
 *
pcb
, *
¥ev
;

89 
udp_pcb
 *
unc⁄_pcb
;

90 
ù_hdr
 *
ùhdr
;

91 
u16_t
 
§c
, 
de°
;

92 
u8_t
 
loˇl_m©ch
;

93 
u8_t
 
brﬂdˇ°
;

95 
PERF_START
;

97 
	`UDP_STATS_INC
(
udp
.
ªcv
);

99 
ùhdr
 = 
p
->
∑ylﬂd
;

103 i‡(
p
->
tŸ_Àn
 < (
	`IPH_HL
(
ùhdr
Ë* 4 + 
UDP_HLEN
Ë|| 
	`pbuf_hódî
’, -(
s16_t
)(IPH_HL(iphdr) * 4))) {

105 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

106 ("udp_öput: sh‹àUDP d©agøm (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

107 
	`UDP_STATS_INC
(
udp
.
À√º
);

108 
	`UDP_STATS_INC
(
udp
.
dr›
);

109 
	`¢mp_öc_udpöîr‹s
();

110 
	`pbuf_‰ì
(
p
);

111 
íd
;

114 
udphdr
 = (
udp_hdr
 *)
p
->
∑ylﬂd
;

117 
brﬂdˇ°
 = 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
);

119 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_öput:Ñe˚ived d©agøm o‡Àngth %"
U16_F
"\n", 
p
->
tŸ_Àn
));

122 
§c
 = 
	`¡ohs
(
udphdr
->src);

123 
de°
 = 
	`¡ohs
(
udphdr
->dest);

125 
	`udp_debug_¥öt
(
udphdr
);

128 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

129 ("ud∞(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "

130 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

131 
	`ù4_addr1
(&
ùhdr
->
de°
), 
	`ù4_addr2
(&iphdr->dest),

132 
	`ù4_addr3
(&
ùhdr
->
de°
), 
	`ù4_addr4
(&ùhdr->de°), 
	`¡ohs
(
udphdr
->dest),

133 
	`ù4_addr1
(&
ùhdr
->
§c
), 
	`ù4_addr2
(&iphdr->src),

134 
	`ù4_addr3
(&
ùhdr
->
§c
), 
	`ù4_addr4
(&ùhdr->§c), 
	`¡ohs
(
udphdr
->src)));

136 #i‡
LWIP_DHCP


137 
pcb
 = 
NULL
;

140 i‡(
de°
 =
DHCP_CLIENT_PORT
) {

142 i‡(
§c
 =
DHCP_SERVER_PORT
) {

143 i‡((
öp
->
dh˝
 !
NULL
Ë&& (öp->dh˝->
pcb
 != NULL)) {

147 i‡((
	`ù_addr_ißny
(&
öp
->
dh˝
->
pcb
->
ªmŸe_ù
) ||

148 
	`ù_addr_cmp
(&(
öp
->
dh˝
->
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

149 
pcb
 = 
öp
->
dh˝
->pcb;

156 
¥ev
 = 
NULL
;

157 
loˇl_m©ch
 = 0;

158 
unc⁄_pcb
 = 
NULL
;

163 
pcb
 = 
udp_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

164 
loˇl_m©ch
 = 0;

166 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

167 ("pcb (%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "

168 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

169 
	`ù4_addr1
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2
(&pcb->local_ip),

170 
	`ù4_addr3
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4
(&pcb->loˇl_ù),Öcb->
loˇl_p‹t
,

171 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

172 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->ªmŸe_ù),Öcb->
ªmŸe_p‹t
));

175 i‡((
pcb
->
loˇl_p‹t
 =
de°
) &&

176 ((!
brﬂdˇ°
 && 
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) ||

177 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
)) ||

178 #i‡
LWIP_IGMP


179 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
)) ||

181 #i‡
IP_SOF_BROADCAST_RECV


182 (
brﬂdˇ°
 && (
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
)))) {

184 (
brﬂdˇ°
))) {

186 
loˇl_m©ch
 = 1;

187 i‡((
unc⁄_pcb
 =
NULL
) &&

188 ((
pcb
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0)) {

190 
unc⁄_pcb
 = 
pcb
;

194 i‡((
loˇl_m©ch
 != 0) &&

195 (
pcb
->
ªmŸe_p‹t
 =
§c
) &&

196 (
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
) ||

197 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

199 i‡(
¥ev
 !
NULL
) {

202 
¥ev
->
√xt
 = 
pcb
->next;

203 
pcb
->
√xt
 = 
udp_pcbs
;

204 
udp_pcbs
 = 
pcb
;

206 
	`UDP_STATS_INC
(
udp
.
ˇchehô
);

210 
¥ev
 = 
pcb
;

213 i‡(
pcb
 =
NULL
) {

214 
pcb
 = 
unc⁄_pcb
;

219 i‡(
pcb
 !
NULL
 || 
	`ù_addr_cmp
(&
öp
->
ù_addr
, &
ùhdr
->
de°
)) {

220 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input: calculating checksum\n"));

221 #i‡
LWIP_UDPLITE


222 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDPLITE
) {

224 #i‡
CHECKSUM_CHECK_UDP


225 
u16_t
 
chkÀn
 = 
	`¡ohs
(
udphdr
->
Àn
);

226 i‡(
chkÀn
 < (
udp_hdr
)) {

227 i‡(
chkÀn
 == 0) {

230 
chkÀn
 = 
p
->
tŸ_Àn
;

234 
	`UDP_STATS_INC
(
udp
.
chkîr
);

235 
	`UDP_STATS_INC
(
udp
.
dr›
);

236 
	`¢mp_öc_udpöîr‹s
();

237 
	`pbuf_‰ì
(
p
);

238 
íd
;

241 i‡(
	`öë_chksum_p£udo_∑πül
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

242 (
ù_addr
 *)&(
ùhdr
->
de°
),

243 
IP_PROTO_UDPLITE
, 
p
->
tŸ_Àn
, 
chkÀn
) != 0) {

244 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

246 
	`UDP_STATS_INC
(
udp
.
chkîr
);

247 
	`UDP_STATS_INC
(
udp
.
dr›
);

248 
	`¢mp_öc_udpöîr‹s
();

249 
	`pbuf_‰ì
(
p
);

250 
íd
;

256 #i‡
CHECKSUM_CHECK_UDP


257 i‡(
udphdr
->
chksum
 != 0) {

258 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

259 (
ù_addr
 *)&(
ùhdr
->
de°
),

260 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

261 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

263 
	`UDP_STATS_INC
(
udp
.
chkîr
);

264 
	`UDP_STATS_INC
(
udp
.
dr›
);

265 
	`¢mp_öc_udpöîr‹s
();

266 
	`pbuf_‰ì
(
p
);

267 
íd
;

272 if(
	`pbuf_hódî
(
p
, -
UDP_HLEN
)) {

274 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

275 
	`UDP_STATS_INC
(
udp
.
dr›
);

276 
	`¢mp_öc_udpöîr‹s
();

277 
	`pbuf_‰ì
(
p
);

278 
íd
;

280 i‡(
pcb
 !
NULL
) {

281 
	`¢mp_öc_udpöd©agøms
();

283 i‡(
pcb
->
ªcv
 !
NULL
) {

285 
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
), src);

288 
	`pbuf_‰ì
(
p
);

289 
íd
;

292 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input:Çot for us.\n"));

294 #i‡
LWIP_ICMP


297 i‡(!
brﬂdˇ°
 &&

298 !
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

300 
	`pbuf_hódî
(
p
, (
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
);

301 
	`LWIP_ASSERT
("p->∑ylﬂd =ùhdr", (
p
->
∑ylﬂd
 =
ùhdr
));

302 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PORT
);

305 
	`UDP_STATS_INC
(
udp
.
¥Ÿîr
);

306 
	`UDP_STATS_INC
(
udp
.
dr›
);

307 
	`¢mp_öc_ud≤›‹ts
();

308 
	`pbuf_‰ì
(
p
);

311 
	`pbuf_‰ì
(
p
);

313 
íd
:

314 
	`PERF_STOP
("udp_input");

315 
	}
}

335 
îr_t


336 
	$udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
)

339  
	`udp_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
);

340 
	}
}

359 
îr_t


360 
	$udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

361 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
)

363 
√tif
 *netif;

365 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_send\n"));

368 #i‡
LWIP_IGMP


369 
√tif
 = 
	`ù_rouã
((
	`ù_addr_ismu…iˇ°
(
d°_ù
))?(&(
pcb
->
mu…iˇ°_ù
)):(dst_ip));

371 
√tif
 = 
	`ù_rouã
(
d°_ù
);

375 i‡(
√tif
 =
NULL
) {

376 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£nd: NÿrouãÅÿ0x%"
X32_F
"\n", 
d°_ù
->
addr
));

377 
	`UDP_STATS_INC
(
udp
.
πîr
);

378  
ERR_RTE
;

380  
	`udp_£ndto_if
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
);

381 
	}
}

402 
îr_t


403 
	$udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

404 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif)

406 
udp_hdr
 *
udphdr
;

407 
ù_addr
 *
§c_ù
;

408 
îr_t
 
îr
;

409 
pbuf
 *
q
;

411 #i‡
IP_SOF_BROADCAST


413 i‡–((
pcb
->
so_›ti⁄s
 & 
SOF_BROADCAST
Ë=0Ë&& 
	`ù_addr_isbrﬂdˇ°
(
d°_ù
, 
√tif
) ) {

414 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£ndto_if: SOF_BROADCASTÇŸÉ«bÀd o¿pcb %p\n", (*)
pcb
));

415  
ERR_VAL
;

420 i‡(
pcb
->
loˇl_p‹t
 == 0) {

421 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send:Çot yet boundÅoáÖort, bindingÇow\n"));

422 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

423 i‡(
îr
 !
ERR_OK
) {

424 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: forcedÖort bind failed\n"));

425  
îr
;

430 i‡(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)) {

432 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
UDP_HLEN
, 
PBUF_RAM
);

434 i‡(
q
 =
NULL
) {

435 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: couldÇotállocate header\n"));

436  
ERR_MEM
;

439 
	`pbuf_chaö
(
q
, 
p
);

441 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

442 ("udp_£nd:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

446 
q
 = 
p
;

447 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd:ádded hódî i¿givíÖbu‡%p\n", (*)
p
));

449 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct udp_hdr",

450 (
q
->
Àn
 >(
udp_hdr
)));

452 
udphdr
 = 
q
->
∑ylﬂd
;

453 
udphdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

454 
udphdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

456 
udphdr
->
chksum
 = 0x0000;

459 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

461 
§c_ù
 = &(
√tif
->
ù_addr
);

465 i‡(!
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

467 i‡(
q
 !
p
) {

469 
	`pbuf_‰ì
(
q
);

470 
q
 = 
NULL
;

473  
ERR_VAL
;

476 
§c_ù
 = &(
pcb
->
loˇl_ù
);

479 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: sídög d©agøm o‡Àngth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

481 #i‡
LWIP_UDPLITE


483 i‡(
pcb
->
Êags
 & 
UDP_FLAGS_UDPLITE
) {

484 
u16_t
 
chkÀn
, 
chkÀn_hdr
;

485 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

487 
chkÀn_hdr
 = 
chkÀn
 = 
pcb
->
chksum_Àn_tx
;

488 i‡((
chkÀn
 < (
udp_hdr
)Ë|| (chkÀ¿> 
q
->
tŸ_Àn
)) {

489 i‡(
chkÀn
 != 0) {

490 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖcb->chksum_À¿i†ûÀgÆ: %"
U16_F
"\n", 
chkÀn
));

498 
chkÀn_hdr
 = 0;

499 
chkÀn
 = 
q
->
tŸ_Àn
;

501 
udphdr
->
Àn
 = 
	`ht⁄s
(
chkÀn_hdr
);

503 #i‡
CHECKSUM_GEN_UDP


504 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
,

505 
IP_PROTO_UDPLITE
, 
q
->
tŸ_Àn
, 
chkÀn
);

507 i‡(
udphdr
->
chksum
 == 0x0000)

508 
udphdr
->
chksum
 = 0xffff;

511 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));

512 #i‡
LWIP_NETIF_HWADDRHINT


513 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

515 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDPLITE
, 
√tif
);

516 #i‡
LWIP_NETIF_HWADDRHINT


517 
√tif
->
addr_höt
 = 
NULL
;

522 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDPÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

523 
udphdr
->
Àn
 = 
	`ht⁄s
(
q
->
tŸ_Àn
);

525 #i‡
CHECKSUM_GEN_UDP


526 i‡((
pcb
->
Êags
 & 
UDP_FLAGS_NOCHKSUM
) == 0) {

527 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
, q->
tŸ_Àn
);

529 i‡(
udphdr
->
chksum
 == 0x0000) udphdr->chksum = 0xffff;

532 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP checksum 0x%04"
X16_F
"\n", 
udphdr
->
chksum
));

533 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));

535 #i‡
LWIP_NETIF_HWADDRHINT


536 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

538 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDP
, 
√tif
);

539 #i‡
LWIP_NETIF_HWADDRHINT


540 
√tif
->
addr_höt
 = 
NULL
;

544 
	`¢mp_öc_udpoutd©agøms
();

547 i‡(
q
 !
p
) {

549 
	`pbuf_‰ì
(
q
);

550 
q
 = 
NULL
;

554 
	`UDP_STATS_INC
(
udp
.
xmô
);

555  
îr
;

556 
	}
}

577 
îr_t


578 
	$udp_böd
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

580 
udp_pcb
 *
ùcb
;

581 
u8_t
 
ªböd
;

583 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_bind(ipaddr = "));

584 
	`ù_addr_debug_¥öt
(
UDP_DEBUG
, 
ùaddr
);

585 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, (",Ö‹à%"
U16_F
")\n", 
p‹t
));

587 
ªböd
 = 0;

589 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

591 i‡(
pcb
 =
ùcb
) {

593 
	`LWIP_ASSERT
("ªböd =0", 
ªböd
 == 0);

595 
ªböd
 = 1;

602 #ifde‡
LWIP_UDP_TODO


605 i‡((
ùcb
->
loˇl_p‹t
 =
p‹t
) &&

607 (
	`ù_addr_ißny
(&(
ùcb
->
loˇl_ù
)) ||

608 
	`ù_addr_ißny
(
ùaddr
) ||

609 
	`ù_addr_cmp
(&(
ùcb
->
loˇl_ù
), 
ùaddr
))) {

611 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

612 ("udp_böd:Üoˇ»p‹à%"
U16_F
"áÃódy bound byánŸhîÖcb\n", 
p‹t
));

613  
ERR_USE
;

618 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

621 i‡(
p‹t
 == 0) {

622 #i‚de‡
UDP_LOCAL_PORT_RANGE_START


623 
	#UDP_LOCAL_PORT_RANGE_START
 4096

	)

624 
	#UDP_LOCAL_PORT_RANGE_END
 0x7fff

	)

626 
p‹t
 = 
UDP_LOCAL_PORT_RANGE_START
;

627 
ùcb
 = 
udp_pcbs
;

628 (
ùcb
 !
NULL
Ë&& (
p‹t
 !
UDP_LOCAL_PORT_RANGE_END
)) {

629 i‡(
ùcb
->
loˇl_p‹t
 =
p‹t
) {

631 
p‹t
++;

633 
ùcb
 = 
udp_pcbs
;

636 
ùcb
 = ipcb->
√xt
;

638 i‡(
ùcb
 !
NULL
) {

640 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_bind: out of free UDPÖorts\n"));

641  
ERR_USE
;

644 
pcb
->
loˇl_p‹t
 = 
p‹t
;

645 
	`¢mp_ö£π_udpidx_åì
(
pcb
);

647 i‡(
ªböd
 == 0) {

649 
pcb
->
√xt
 = 
udp_pcbs
;

650 
udp_pcbs
 = 
pcb
;

652 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

653 ("udp_böd: boundÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",Öort %"U16_F"\n",

654 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 24) & 0xff),

655 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 16) & 0xff),

656 (
u16_t
)((
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 8) & 0xff),

657 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
Ë& 0xff),Öcb->
loˇl_p‹t
));

658  
ERR_OK
;

659 
	}
}

677 
îr_t


678 
	$udp_c⁄√˘
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

680 
udp_pcb
 *
ùcb
;

682 i‡(
pcb
->
loˇl_p‹t
 == 0) {

683 
îr_t
 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

684 i‡(
îr
 !
ERR_OK
)

685  
îr
;

688 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

689 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

690 
pcb
->
Êags
 |
UDP_FLAGS_CONNECTED
;

692 #ifde‡
LWIP_UDP_TODO


694 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
Ë&& !ù_addr_ißny(&pcb->
ªmŸe_ù
)) {

695 
√tif
 *netif;

697 i‡((
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
))Ë=
NULL
) {

698 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_c⁄√˘: NÿrouãÅÿ0x%lx\n", 
pcb
->
ªmŸe_ù
.
addr
));

699 
	`UDP_STATS_INC
(
udp
.
πîr
);

700  
ERR_RTE
;

705 
pcb
->
loˇl_ù
 = 
√tif
->
ù_addr
;

706 } i‡(
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
)) {

707 
pcb
->
loˇl_ù
.
addr
 = 0;

710 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

711 ("udp_c⁄√˘: c⁄√˘edÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",

712 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 24) & 0xff),

713 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 16) & 0xff),

714 (
u16_t
)((
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 8) & 0xff),

715 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
Ë& 0xff),Öcb->
ªmŸe_p‹t
));

718 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

719 i‡(
pcb
 =
ùcb
) {

721  
ERR_OK
;

725 
pcb
->
√xt
 = 
udp_pcbs
;

726 
udp_pcbs
 = 
pcb
;

727  
ERR_OK
;

728 
	}
}

736 
	$udp_disc⁄√˘
(
udp_pcb
 *
pcb
)

739 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
IP_ADDR_ANY
);

740 
pcb
->
ªmŸe_p‹t
 = 0;

742 
pcb
->
Êags
 &~
UDP_FLAGS_CONNECTED
;

743 
	}
}

755 
	$udp_ªcv
(
udp_pcb
 *
pcb
,

756 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
, 
pbuf
 *
p
,

757 
ù_addr
 *
addr
, 
u16_t
 
p‹t
),

758 *
ªcv_¨g
)

761 
pcb
->
ªcv
 =Ñecv;

762 
pcb
->
ªcv_¨g
 =Ñecv_arg;

763 
	}
}

774 
	$udp_ªmove
(
udp_pcb
 *
pcb
)

776 
udp_pcb
 *
pcb2
;

778 
	`¢mp_dñëe_udpidx_åì
(
pcb
);

780 i‡(
udp_pcbs
 =
pcb
) {

782 
udp_pcbs
 = udp_pcbs->
√xt
;

785 
pcb2
 = 
udp_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

787 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

789 
pcb2
->
√xt
 = 
pcb
->next;

792 
	`memp_‰ì
(
MEMP_UDP_PCB
, 
pcb
);

793 
	}
}

803 
udp_pcb
 *

804 
	$udp_√w
()

806 
udp_pcb
 *
pcb
;

807 
pcb
 = 
	`memp_mÆloc
(
MEMP_UDP_PCB
);

809 i‡(
pcb
 !
NULL
) {

814 
	`mem£t
(
pcb
, 0, (
udp_pcb
));

815 
pcb
->
âl
 = 
UDP_TTL
;

817  
pcb
;

818 
	}
}

820 #i‡
UDP_DEBUG


827 
	$udp_debug_¥öt
(
udp_hdr
 *
udphdr
)

829 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("UDP header:\n"));

830 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

831 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

832 
	`¡ohs
(
udphdr
->
§c
),Çtohs(udphdr->
de°
)));

833 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

834 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | 0x%04"
X16_F
" | (len, chksum)\n",

835 
	`¡ohs
(
udphdr
->
Àn
),Çtohs(udphdr->
chksum
)));

836 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

837 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

56 
	#AUTOIP_TMR_INTERVAL
 100

	)

57 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

60 
	#PROBE_WAIT
 1

	)

61 
	#PROBE_MIN
 1

	)

62 
	#PROBE_MAX
 2

	)

63 
	#PROBE_NUM
 3

	)

64 
	#ANNOUNCE_NUM
 2

	)

65 
	#ANNOUNCE_INTERVAL
 2

	)

66 
	#ANNOUNCE_WAIT
 2

	)

67 
	#MAX_CONFLICTS
 10

	)

68 
	#RATE_LIMIT_INTERVAL
 60

	)

69 
	#DEFEND_INTERVAL
 10

	)

72 
	#AUTOIP_STATE_OFF
 0

	)

73 
	#AUTOIP_STATE_PROBING
 1

	)

74 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

75 
	#AUTOIP_STATE_BOUND
 3

	)

77 
	sautoù


79 
ù_addr
 
	mŒùaddr
;

80 
u8_t
 
	m°©e
;

81 
u8_t
 
	m£¡_num
;

82 
u16_t
 
	mâw
;

83 
u8_t
 
	mœ°c⁄Êi˘
;

84 
u8_t
 
	måõd_Œùaddr
;

89 
autoù_öô
();

92 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

95 
îr_t
 
autoù_°›
(
√tif
 *netif);

98 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

101 
autoù_tmr
();

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


47 
	#ICMP_ER
 0

	)

48 
	#ICMP_DUR
 3

	)

49 
	#ICMP_SQ
 4

	)

50 
	#ICMP_RD
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TE
 11

	)

53 
	#ICMP_PP
 12

	)

54 
	#ICMP_TS
 13

	)

55 
	#ICMP_TSR
 14

	)

56 
	#ICMP_IRQ
 15

	)

57 
	#ICMP_IR
 16

	)

59 
	eicmp_dur_ty≥
 {

60 
ICMP_DUR_NET
 = 0,

61 
ICMP_DUR_HOST
 = 1,

62 
ICMP_DUR_PROTO
 = 2,

63 
ICMP_DUR_PORT
 = 3,

64 
ICMP_DUR_FRAG
 = 4,

65 
ICMP_DUR_SR
 = 5

68 
	eicmp_ã_ty≥
 {

69 
ICMP_TE_TTL
 = 0,

70 
ICMP_TE_FRAG
 = 1

73 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

75 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

76 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

78 #ifde‡
PACK_STRUCT_USE_INCLUDES


79 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sicmp_echo_hdr
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

91 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

92 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

93 } 
PACK_STRUCT_STRUCT
;

94 
PACK_STRUCT_END


95 #ifde‡
PACK_STRUCT_USE_INCLUDES


96 
	~"¨ch/ï°ru˘.h
"

99 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

100 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

103 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

104 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

106 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


52 
	#IP_PROTO_IGMP
 2

	)

53 
	#IGMP_TTL
 1

	)

54 
	#IGMP_MINLEN
 8

	)

55 
	#ROUTER_ALERT
 0x9404

	)

56 
	#ROUTER_ALERTLEN
 4

	)

61 
	#IGMP_MEMB_QUERY
 0x11

	)

62 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

63 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

64 
	#IGMP_LEAVE_GROUP
 0x17

	)

67 
	#IGMP_TMR_INTERVAL
 100

	)

68 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

69 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

72 
	#IGMP_DEL_MAC_FILTER
 0

	)

73 
	#IGMP_ADD_MAC_FILTER
 1

	)

76 
	#IGMP_GROUP_NON_MEMBER
 0

	)

77 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

78 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

83 #ifde‡
PACK_STRUCT_USE_INCLUDES


84 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sigmp_msg
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
igmp_group_addªss
);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

110 
	sigmp_group
 {

111 
igmp_group
 *
√xt
;

112 
√tif
 *
öãrÁ˚
;

113 
ù_addr
 
group_addªss
;

114 
u8_t
 
œ°_ªp‹ãr_Êag
;

115 
u8_t
 
group_°©e
;

116 
u16_t
 
timî
;

117 
u8_t
 
u£
;

122 
igmp_öô
();

124 
îr_t
 
igmp_°¨t
–
√tif
 *netif);

126 
îr_t
 
igmp_°›
–
√tif
 *netif);

128 
igmp_ªp‹t_groups
–
√tif
 *netif);

130 
igmp_group
 *
igmp_lookf‹_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

132 
igmp_group
 *
igmp_lookup_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

134 
îr_t
 
igmp_ªmove_group
–
igmp_group
 *
group
);

136 
igmp_öput
–
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
);

138 
îr_t
 
igmp_joögroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

140 
îr_t
 
igmp_Àavegroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

142 
igmp_tmr
();

144 
igmp_timeout
–
igmp_group
 *
group
);

146 
igmp_°¨t_timî
–
igmp_group
 *
group
, 
u8_t
 
max_time
);

148 
igmp_°›_timî
–
igmp_group
 *
group
);

150 
igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
);

152 
îr_t
 
igmp_ù_ouçut_if
–
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
, 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif);

154 
igmp_£nd
–
igmp_group
 *
group
, 
u8_t
 
ty≥
);

156 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	sö_addr
 {

43 
u32_t
 
s_addr
;

46 
	#INADDR_NONE
 ((
u32_t
)0xffffffffULË

	)

47 
	#INADDR_LOOPBACK
 ((
u32_t
)0x7f000001ULË

	)

48 
	#INADDR_ANY
 ((
u32_t
)0x00000000ULË

	)

49 
	#INADDR_BROADCAST
 ((
u32_t
)0xffffffffULË

	)

51 
u32_t
 
öë_addr
(c⁄° *
˝
);

52 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

53 *
öë_¡ﬂ
(
ö_addr
 
addr
);

55 #ifde‡
ht⁄s


56 #unde‡
ht⁄s


58 #ifde‡
ht⁄l


59 #unde‡
ht⁄l


61 #ifde‡
¡ohs


62 #unde‡
¡ohs


64 #ifde‡
¡ohl


65 #unde‡
¡ohl


68 #i‚de‡
LWIP_PLATFORM_BYTESWAP


69 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

72 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


73 
	#ht⁄s
(
x
Ë(x)

	)

74 
	#¡ohs
(
x
Ë(x)

	)

75 
	#ht⁄l
(
x
Ë(x)

	)

76 
	#¡ohl
(
x
Ë(x)

	)

78 #ifde‡
LWIP_PREFIX_BYTEORDER_FUNCS


80 
	#ht⁄s
 
lwù_ht⁄s


	)

81 
	#¡ohs
 
lwù_¡ohs


	)

82 
	#ht⁄l
 
lwù_ht⁄l


	)

83 
	#¡ohl
 
lwù_¡ohl


	)

85 #i‡
LWIP_PLATFORM_BYTESWAP


86 
	#ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

87 
	#¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

88 
	#ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

89 
	#¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

91 
u16_t
 
ht⁄s
(u16_à
x
);

92 
u16_t
 
¡ohs
(u16_à
x
);

93 
u32_t
 
ht⁄l
(u32_à
x
);

94 
u32_t
 
¡ohl
(u32_à
x
);

99 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


44 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

45 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

46 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

47 
ù_addr
 *
§c
, ù_add∏*
de°
,

48 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

49 #i‡
LWIP_UDPLITE


50 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

51 
ù_addr
 *
§c
, ù_add∏*
de°
,

52 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

55 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


48 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

50 
	#IP_HLEN
 20

	)

52 
	#IP_PROTO_ICMP
 1

	)

53 
	#IP_PROTO_UDP
 17

	)

54 
	#IP_PROTO_UDPLITE
 136

	)

55 
	#IP_PROTO_TCP
 6

	)

60 #ifde‡
IP_HDRINCL


61 #unde‡
IP_HDRINCL


63 
	#IP_HDRINCL
 
NULL


	)

65 #i‡
LWIP_NETIF_HWADDRHINT


66 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

68 
	#IP_PCB_ADDRHINT


	)

75 
	#IP_PCB
 \

77 
ù_addr
 
loˇl_ù
; \

78 
ù_addr
 
ªmŸe_ù
; \

80 
u16_t
 
so_›ti⁄s
; \

82 
u8_t
 
tos
; \

84 
u8_t
 
âl
 \

86 
IP_PCB_ADDRHINT


	)

88 
	sù_pcb
 {

90 
IP_PCB
;

96 
	#SOF_DEBUG
 (
u16_t
)0x0001U

	)

97 
	#SOF_ACCEPTCONN
 (
u16_t
)0x0002U

	)

98 
	#SOF_REUSEADDR
 (
u16_t
)0x0004U

	)

99 
	#SOF_KEEPALIVE
 (
u16_t
)0x0008U

	)

100 
	#SOF_DONTROUTE
 (
u16_t
)0x0010U

	)

101 
	#SOF_BROADCAST
 (
u16_t
)0x0020U

	)

102 
	#SOF_USELOOPBACK
 (
u16_t
)0x0040U

	)

103 
	#SOF_LINGER
 (
u16_t
)0x0080U

	)

104 
	#SOF_OOBINLINE
 (
u16_t
)0x0100U

	)

105 
	#SOF_REUSEPORT
 (
u16_t
)0x0200U

	)

108 #ifde‡
PACK_STRUCT_USE_INCLUDES


109 
	~"¨ch/bp°ru˘.h
"

111 
PACK_STRUCT_BEGIN


112 
	sù_hdr
 {

114 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

116 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

118 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

126 
PACK_STRUCT_FIELD
(
u16_t
 
_âl_¥Ÿo
);

128 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

130 
PACK_STRUCT_FIELD
(
ù_addr
 
§c
);

131 
PACK_STRUCT_FIELD
(
ù_addr
 
de°
);

132 } 
PACK_STRUCT_STRUCT
;

133 
PACK_STRUCT_END


134 #ifde‡
PACK_STRUCT_USE_INCLUDES


135 
	~"¨ch/ï°ru˘.h
"

138 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

139 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

140 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

141 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

142 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

143 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

144 
	#IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

145 
	#IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

146 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

148 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

149 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

150 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

151 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

152 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

153 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`IPH_TTL
(hdrË<< 8)))

	)

154 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

156 
	#ù_öô
(Ë

	)

157 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

158 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

159 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

160 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

161 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

162 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

163 
√tif
 *netif);

164 #i‡
LWIP_NETIF_HWADDRHINT


165 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

166 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

168 #i‡
IP_OPTIONS_SEND


169 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

170 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

171 
u16_t
 
›éí
);

173 
√tif
 *
ù_cuºít_√tif
();

174 c⁄° 
ù_hdr
 *
ù_cuºít_hódî
();

175 #i‡
IP_DEBUG


176 
ù_debug_¥öt
(
pbuf
 *
p
);

178 
	#ù_debug_¥öt
(
p
)

	)

181 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/öë.h
"

39 #ifde‡
__˝lu•lus


43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
√tif
;

73 c⁄° 
ù_addr
 
ù_addr_™y
;

74 c⁄° 
ù_addr
 
ù_addr_brﬂdˇ°
;

79 
	#IP_ADDR_ANY
 ((
ù_addr
 *)&
ù_addr_™y
)

	)

80 
	#IP_ADDR_BROADCAST
 ((
ù_addr
 *)&
ù_addr_brﬂdˇ°
)

	)

87 
	#IN_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

88 
	#IN_CLASSA_NET
 0xff000000

	)

89 
	#IN_CLASSA_NSHIFT
 24

	)

90 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

91 
	#IN_CLASSA_MAX
 128

	)

93 
	#IN_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

94 
	#IN_CLASSB_NET
 0xffff0000

	)

95 
	#IN_CLASSB_NSHIFT
 16

	)

96 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

97 
	#IN_CLASSB_MAX
 65536

	)

99 
	#IN_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

100 
	#IN_CLASSC_NET
 0xffffff00

	)

101 
	#IN_CLASSC_NSHIFT
 8

	)

102 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

104 
	#IN_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

105 
	#IN_CLASSD_NET
 0xf0000000

	)

106 
	#IN_CLASSD_NSHIFT
 28

	)

107 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

108 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

110 
	#IN_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

111 
	#IN_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

113 
	#IN_LOOPBACKNET
 127

	)

115 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

116 (
ùaddr
)->
addr
 = 
	`ht⁄l
(((
u32_t
)((
a
) & 0xff) << 24) | \

117 ((
u32_t
)((
b
) & 0xff) << 16) | \

118 ((
u32_t
)((
c
) & 0xff) << 8) | \

119 (
u32_t
)((
d
Ë& 0xff))

	)

121 
	#ù_addr_£t
(
de°
, 
§c
Ë(de°)->
addr
 = \

122 ((
§c
Ë=
NULL
? 0:\

123 (
§c
)->
addr
)

	)

132 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

133 (
mask
)->
addr
) == \

134 ((
addr2
)->
addr
 & \

135 (
mask
)->
addr
))

	)

136 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

138 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =0)

	)

140 
u8_t
 
ù_addr_isbrﬂdˇ°
(
ù_addr
 *, 
√tif
 *);

142 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xf0000000UL)Ë=¡ohl(0xe0000000UL))

	)

144 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xffff0000UL)Ë=¡ohl(0xa9„0000UL))

	)

146 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

147 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

148 
ùaddr
 !
NULL
 ? \

149 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 24) & 0xff : 0, \

150 
ùaddr
 !
NULL
 ? \

151 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 16) & 0xff : 0, \

152 
ùaddr
 !
NULL
 ? \

153 (
u16_t
)(
	`¡ohl
((
ùaddr
)->
addr
) >> 8) & 0xff : 0, \

154 
ùaddr
 !
NULL
 ? \

155 (
u16_t
)
	`¡ohl
((
ùaddr
)->
addr
Ë& 0xf‡: 0))

	)

159 
	#ù4_addr1
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 24Ë& 0xff)

	)

160 
	#ù4_addr2
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 16Ë& 0xff)

	)

161 
	#ù4_addr3
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 8Ë& 0xff)

	)

162 
	#ù4_addr4
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
)Ë& 0xff)

	)

164 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
);

72 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP6_DUR
 1

	)

47 
	#ICMP6_TE
 3

	)

48 
	#ICMP6_ECHO
 128

	)

49 
	#ICMP6_ER
 129

	)

52 
	eicmp_dur_ty≥
 {

53 
ICMP_DUR_NET
 = 0,

54 
ICMP_DUR_HOST
 = 1,

55 
ICMP_DUR_PROTO
 = 2,

56 
ICMP_DUR_PORT
 = 3,

57 
ICMP_DUR_FRAG
 = 4,

58 
ICMP_DUR_SR
 = 5

61 
	eicmp_ã_ty≥
 {

62 
ICMP_TE_TTL
 = 0,

63 
ICMP_TE_FRAG
 = 1

66 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

68 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

69 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

71 
	sicmp_echo_hdr
 {

72 
u8_t
 
ty≥
;

73 
u8_t
 
icode
;

74 
u16_t
 
chksum
;

75 
u16_t
 
id
;

76 
u16_t
 
£qno
;

79 
	sicmp_dur_hdr
 {

80 
u8_t
 
ty≥
;

81 
u8_t
 
icode
;

82 
u16_t
 
chksum
;

83 
u32_t
 
unu£d
;

86 
	sicmp_ã_hdr
 {

87 
u8_t
 
ty≥
;

88 
u8_t
 
icode
;

89 
u16_t
 
chksum
;

90 
u32_t
 
unu£d
;

93 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


43 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

44 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

45 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

46 
ù_addr
 *
§c
, ù_add∏*
de°
,

47 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 #i‚de‡
_MACHINE_ENDIAN_H_


53 #i‚de‡
_NETINET_IN_H


54 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


55 
u16_t
 
ht⁄s
(u16_à
n
);

56 
u16_t
 
¡ohs
(u16_à
n
);

57 
u32_t
 
ht⁄l
(u32_à
n
);

58 
u32_t
 
¡ohl
(u32_à
n
);

63 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#IP_HLEN
 40

	)

48 
	#IP_PROTO_ICMP
 58

	)

49 
	#IP_PROTO_UDP
 17

	)

50 
	#IP_PROTO_UDPLITE
 136

	)

51 
	#IP_PROTO_TCP
 6

	)

56 #ifde‡
IP_HDRINCL


57 #unde‡
IP_HDRINCL


59 
	#IP_HDRINCL
 
NULL


	)

61 #i‡
LWIP_NETIF_HWADDRHINT


62 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

64 
	#IP_PCB_ADDRHINT


	)

71 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

72 
ù_addr
 
ªmŸe_ù
; \

74 
u16_t
 
so_›ti⁄s
; \

76 
u8_t
 
tos
; \

78 
u8_t
 
âl
; \

80 
IP_PCB_ADDRHINT


	)

84 
	sù_hdr
 {

85 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


86 
u8_t
 
t˛ass1
:4, 
v
:4;

87 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

89 
u8_t
 
v
:4, 
t˛ass1
:4;

90 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

92 
u16_t
 
Êow2
;

93 
u16_t
 
Àn
;

94 
u8_t
 
√xthdr
;

95 
u8_t
 
h›lim
;

96 
ù_addr
 
§c
, 
de°
;

99 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

101 
ù_öô
();

103 
	~"lwù/√tif.h
"

105 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

107 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

110 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

111 
u8_t
 
âl
, u8_à
¥Ÿo
);

113 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

114 
u8_t
 
âl
, u8_à
¥Ÿo
,

115 
√tif
 *netif);

117 
	#ù_cuºít_√tif
(Ë
NULL


	)

118 
	#ù_cuºít_hódî
(Ë
NULL


	)

120 #i‡
IP_DEBUG


121 
ù_debug_¥öt
(
pbuf
 *
p
);

124 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 
	#IP_ADDR_ANY
 0

	)

43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

72 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

73 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

74 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

76 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

77 
ù_addr
 *
mask
);

78 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

79 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

80 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

82 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

83 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

84 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

85 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

86 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

87 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

88 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

89 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

90 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

91 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

93 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

61 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

62 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

64 
	e√tc⁄n_ty≥
 {

65 
NETCONN_INVALID
 = 0,

67 
NETCONN_TCP
 = 0x10,

69 
NETCONN_UDP
 = 0x20,

70 
NETCONN_UDPLITE
 = 0x21,

71 
NETCONN_UDPNOCHKSUM
= 0x22,

73 
NETCONN_RAW
 = 0x40

76 
	e√tc⁄n_°©e
 {

77 
NETCONN_NONE
,

78 
NETCONN_WRITE
,

79 
NETCONN_LISTEN
,

80 
NETCONN_CONNECT
,

81 
NETCONN_CLOSE


84 
	e√tc⁄n_evt
 {

85 
NETCONN_EVT_RCVPLUS
,

86 
NETCONN_EVT_RCVMINUS
,

87 
NETCONN_EVT_SENDPLUS
,

88 
NETCONN_EVT_SENDMINUS


91 #i‡
LWIP_IGMP


92 
	e√tc⁄n_igmp
 {

93 
NETCONN_JOIN
,

94 
NETCONN_LEAVE


99 
ù_pcb
;

100 
t˝_pcb
;

101 
udp_pcb
;

102 
øw_pcb
;

103 
√tc⁄n
;

106 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

109 
	s√tc⁄n
 {

111 
√tc⁄n_ty≥
 
ty≥
;

113 
√tc⁄n_°©e
 
°©e
;

116 
ù_pcb
 *
ù
;

117 
t˝_pcb
 *
t˝
;

118 
udp_pcb
 *
udp
;

119 
øw_pcb
 *
øw
;

120 } 
pcb
;

122 
îr_t
 
îr
;

124 
sys_£m_t
 
›_com∂ëed
;

127 
sys_mbox_t
 
ªcvmbox
;

130 
sys_mbox_t
 
ac˚±mbox
;

132 
sockë
;

133 #i‡
LWIP_SO_RCVTIMEO


136 
ªcv_timeout
;

138 #i‡
LWIP_SO_RCVBUF


140 
ªcv_bufsize
;

142 
s16_t
 
ªcv_avaû
;

143 #i‡
LWIP_TCP


146 
≠i_msg_msg
 *
wrôe_msg
;

149 
size_t
 
wrôe_off£t
;

150 #i‡
LWIP_TCPIP_CORE_LOCKING


154 
u8_t
 
wrôe_dñayed
;

158 
√tc⁄n_ˇŒback
 
ˇŒback
;

162 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

163 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

164 }

	)

167 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

168 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

170 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

171 
√tc⁄n_ˇŒback
 
ˇŒback
);

172 
îr_t
 
√tc⁄n_dñëe
 (
√tc⁄n
 *
c⁄n
);

174 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

176 
îr_t
 
√tc⁄n_gëaddr
 (
√tc⁄n
 *
c⁄n
,

177 
ù_addr
 *
addr
,

178 
u16_t
 *
p‹t
,

179 
u8_t
 
loˇl
);

180 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

181 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

183 
îr_t
 
√tc⁄n_böd
 (
√tc⁄n
 *
c⁄n
,

184 
ù_addr
 *
addr
,

185 
u16_t
 
p‹t
);

186 
îr_t
 
√tc⁄n_c⁄√˘
 (
√tc⁄n
 *
c⁄n
,

187 
ù_addr
 *
addr
,

188 
u16_t
 
p‹t
);

189 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

190 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

191 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

192 
√tc⁄n
 * 
√tc⁄n_ac˚±
 (√tc⁄¿*
c⁄n
);

193 
√tbuf
 * 
√tc⁄n_ªcv
 (
√tc⁄n
 *
c⁄n
);

194 
îr_t
 
√tc⁄n_£ndto
 (
√tc⁄n
 *
c⁄n
,

195 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

196 
îr_t
 
√tc⁄n_£nd
 (
√tc⁄n
 *
c⁄n
,

197 
√tbuf
 *
buf
);

198 
îr_t
 
√tc⁄n_wrôe
 (
√tc⁄n
 *
c⁄n
,

199 c⁄° *
d©≠å
, 
size_t
 
size
,

200 
u8_t
 
≠iÊags
);

201 
îr_t
 
√tc⁄n_˛o£
 (
√tc⁄n
 *
c⁄n
);

203 #i‡
LWIP_IGMP


204 
îr_t
 
√tc⁄n_joö_Àave_group
 (
√tc⁄n
 *
c⁄n
,

205 
ù_addr
 *
mu…üddr
,

206 
ù_addr
 *
öãrÁ˚
,

207 
√tc⁄n_igmp
 
joö_‹_Àave
);

209 #i‡
LWIP_DNS


210 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
);

213 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
îr
)

	)

214 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

216 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


57 
	s≠i_msg_msg
 {

60 
√tc⁄n
 *
c⁄n
;

64 
√tbuf
 *
b
;

67 
u8_t
 
¥Ÿo
;

68 } 
n
;

71 
ù_addr
 *
ùaddr
;

72 
u16_t
 
p‹t
;

73 } 
bc
;

76 
ù_addr
 *
ùaddr
;

77 
u16_t
 *
p‹t
;

78 
u8_t
 
loˇl
;

79 } 
ad
;

82 c⁄° *
d©≠å
;

83 
size_t
 
Àn
;

84 
u8_t
 
≠iÊags
;

85 } 
w
;

88 
u16_t
 
Àn
;

89 } 
r
;

90 #i‡
LWIP_IGMP


93 
ù_addr
 *
mu…üddr
;

94 
ù_addr
 *
öãrÁ˚
;

95 
√tc⁄n_igmp
 
joö_‹_Àave
;

96 } 
jl
;

98 #i‡
TCP_LISTEN_BACKLOG


100 
u8_t
 
backlog
;

101 } 
lb
;

103 } 
msg
;

109 
	s≠i_msg
 {

111 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

113 
≠i_msg_msg
 
msg
;

116 #i‡
LWIP_DNS


121 
	sdns_≠i_msg
 {

123 c⁄° *
«me
;

125 
ù_addr
 *
addr
;

128 
sys_£m_t
 
£m
;

130 
îr_t
 *
îr
;

134 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

135 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

136 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

137 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

138 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

139 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

140 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

141 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

142 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

143 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

144 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

145 #i‡
LWIP_IGMP


146 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

149 #i‡
LWIP_DNS


150 
do_gëho°by«me
(*
¨g
);

153 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

154 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

156 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

50 #ifde‡
__˝lu•lus


54 #i‚de‡
PACK_STRUCT_BEGIN


55 
	#PACK_STRUCT_BEGIN


	)

58 #i‚de‡
PACK_STRUCT_END


59 
	#PACK_STRUCT_END


	)

62 #i‚de‡
PACK_STRUCT_FIELD


63 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

67 #i‚de‡
LWIP_UNUSED_ARG


68 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

72 #ifde‡
LWIP_PROVIDE_ERRNO


74 
	#EPERM
 1

	)

75 
	#ENOENT
 2

	)

76 
	#ESRCH
 3

	)

77 
	#EINTR
 4

	)

78 
	#EIO
 5

	)

79 
	#ENXIO
 6

	)

80 
	#E2BIG
 7

	)

81 
	#ENOEXEC
 8

	)

82 
	#EBADF
 9

	)

83 
	#ECHILD
 10

	)

84 
	#EAGAIN
 11

	)

85 
	#ENOMEM
 12

	)

86 
	#EACCES
 13

	)

87 
	#EFAULT
 14

	)

88 
	#ENOTBLK
 15

	)

89 
	#EBUSY
 16

	)

90 
	#EEXIST
 17

	)

91 
	#EXDEV
 18

	)

92 
	#ENODEV
 19

	)

93 
	#ENOTDIR
 20

	)

94 
	#EISDIR
 21

	)

95 
	#EINVAL
 22

	)

96 
	#ENFILE
 23

	)

97 
	#EMFILE
 24

	)

98 
	#ENOTTY
 25

	)

99 
	#ETXTBSY
 26

	)

100 
	#EFBIG
 27

	)

101 
	#ENOSPC
 28

	)

102 
	#ESPIPE
 29

	)

103 
	#EROFS
 30

	)

104 
	#EMLINK
 31

	)

105 
	#EPIPE
 32

	)

106 
	#EDOM
 33

	)

107 
	#ERANGE
 34

	)

108 
	#EDEADLK
 35

	)

109 
	#ENAMETOOLONG
 36

	)

110 
	#ENOLCK
 37

	)

111 
	#ENOSYS
 38

	)

112 
	#ENOTEMPTY
 39

	)

113 
	#ELOOP
 40

	)

114 
	#EWOULDBLOCK
 
EAGAIN


	)

115 
	#ENOMSG
 42

	)

116 
	#EIDRM
 43

	)

117 
	#ECHRNG
 44

	)

118 
	#EL2NSYNC
 45

	)

119 
	#EL3HLT
 46

	)

120 
	#EL3RST
 47

	)

121 
	#ELNRNG
 48

	)

122 
	#EUNATCH
 49

	)

123 
	#ENOCSI
 50

	)

124 
	#EL2HLT
 51

	)

125 
	#EBADE
 52

	)

126 
	#EBADR
 53

	)

127 
	#EXFULL
 54

	)

128 
	#ENOANO
 55

	)

129 
	#EBADRQC
 56

	)

130 
	#EBADSLT
 57

	)

132 
	#EDEADLOCK
 
EDEADLK


	)

134 
	#EBFONT
 59

	)

135 
	#ENOSTR
 60

	)

136 
	#ENODATA
 61

	)

137 
	#ETIME
 62

	)

138 
	#ENOSR
 63

	)

139 
	#ENONET
 64

	)

140 
	#ENOPKG
 65

	)

141 
	#EREMOTE
 66

	)

142 
	#ENOLINK
 67

	)

143 
	#EADV
 68

	)

144 
	#ESRMNT
 69

	)

145 
	#ECOMM
 70

	)

146 
	#EPROTO
 71

	)

147 
	#EMULTIHOP
 72

	)

148 
	#EDOTDOT
 73

	)

149 
	#EBADMSG
 74

	)

150 
	#EOVERFLOW
 75

	)

151 
	#ENOTUNIQ
 76

	)

152 
	#EBADFD
 77

	)

153 
	#EREMCHG
 78

	)

154 
	#ELIBACC
 79

	)

155 
	#ELIBBAD
 80

	)

156 
	#ELIBSCN
 81

	)

157 
	#ELIBMAX
 82

	)

158 
	#ELIBEXEC
 83

	)

159 
	#EILSEQ
 84

	)

160 
	#ERESTART
 85

	)

161 
	#ESTRPIPE
 86

	)

162 
	#EUSERS
 87

	)

163 
	#ENOTSOCK
 88

	)

164 
	#EDESTADDRREQ
 89

	)

165 
	#EMSGSIZE
 90

	)

166 
	#EPROTOTYPE
 91

	)

167 
	#ENOPROTOOPT
 92

	)

168 
	#EPROTONOSUPPORT
 93

	)

169 
	#ESOCKTNOSUPPORT
 94

	)

170 
	#EOPNOTSUPP
 95

	)

171 
	#EPFNOSUPPORT
 96

	)

172 
	#EAFNOSUPPORT
 97

	)

173 
	#EADDRINUSE
 98

	)

174 
	#EADDRNOTAVAIL
 99

	)

175 
	#ENETDOWN
 100

	)

176 
	#ENETUNREACH
 101

	)

177 
	#ENETRESET
 102

	)

178 
	#ECONNABORTED
 103

	)

179 
	#ECONNRESET
 104

	)

180 
	#ENOBUFS
 105

	)

181 
	#EISCONN
 106

	)

182 
	#ENOTCONN
 107

	)

183 
	#ESHUTDOWN
 108

	)

184 
	#ETOOMANYREFS
 109

	)

185 
	#ETIMEDOUT
 110

	)

186 
	#ECONNREFUSED
 111

	)

187 
	#EHOSTDOWN
 112

	)

188 
	#EHOSTUNREACH
 113

	)

189 
	#EALREADY
 114

	)

190 
	#EINPROGRESS
 115

	)

191 
	#ESTALE
 116

	)

192 
	#EUCLEAN
 117

	)

193 
	#ENOTNAM
 118

	)

194 
	#ENAVAIL
 119

	)

195 
	#EISNAM
 120

	)

196 
	#EREMOTEIO
 121

	)

197 
	#EDQUOT
 122

	)

199 
	#ENOMEDIUM
 123

	)

200 
	#EMEDIUMTYPE
 124

	)

203 
	#ENSROK
 0

	)

204 
	#ENSRNODATA
 160

	)

205 
	#ENSRFORMERR
 161

	)

206 
	#ENSRSERVFAIL
 162

	)

207 
	#ENSRNOTFOUND
 163

	)

208 
	#ENSRNOTIMP
 164

	)

209 
	#ENSRREFUSED
 165

	)

210 
	#ENSRBADQUERY
 166

	)

211 
	#ENSRBADNAME
 167

	)

212 
	#ENSRBADFAMILY
 168

	)

213 
	#ENSRBADRESP
 169

	)

214 
	#ENSRCONNREFUSED
 170

	)

215 
	#ENSRTIMEOUT
 171

	)

216 
	#ENSROF
 172

	)

217 
	#ENSRFILE
 173

	)

218 
	#ENSRNOMEM
 174

	)

219 
	#ENSRDESTRUCTION
 175

	)

220 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

221 
	#ENSRCNAMELOOP
 177

	)

223 #i‚de‡
î∫o


224 
î∫o
;

229 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_OFF
 0x00

	)

44 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

45 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

46 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

47 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

50 
	#LWIP_DBG_ON
 0x80U

	)

52 
	#LWIP_DBG_OFF
 0x00U

	)

55 
	#LWIP_DBG_TRACE
 0x40U

	)

57 
	#LWIP_DBG_STATE
 0x20U

	)

59 
	#LWIP_DBG_FRESH
 0x10U

	)

61 
	#LWIP_DBG_HALT
 0x08U

	)

63 #i‚de‡
LWIP_NOASSERT


64 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

65 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

67 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

71 #i‚de‡
LWIP_ERROR


72 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

73 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

76 #ifde‡
LWIP_DEBUG


80 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

82 ((
debug
Ë& 
LWIP_DBG_ON
) && \

83 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

84 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

85 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

86 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

90 } 0)

	)

93 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

38 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

39 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

41 #i‚de‡
NULL


42 
	#NULL
 ((*)0)

	)

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	sdh˝


28 
u8_t
 
°©e
;

30 
u8_t
 
åõs
;

32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
pbuf
 *
p
;

38 
dh˝_msg
 *
msg_ö
;

40 
dh˝_msg
 *
›ti⁄s_ö
;

42 
u16_t
 
›ti⁄s_ö_Àn
;

44 
pbuf
 *
p_out
;

45 
dh˝_msg
 *
msg_out
;

46 
u16_t
 
›ti⁄s_out_Àn
;

47 
u16_t
 
ªque°_timeout
;

48 
u16_t
 
t1_timeout
;

49 
u16_t
 
t2_timeout
;

50 
ù_addr
 
£rvî_ù_addr
;

51 
ù_addr
 
of„ªd_ù_addr
;

52 
ù_addr
 
of„ªd_¢_mask
;

53 
ù_addr
 
of„ªd_gw_addr
;

54 
ù_addr
 
of„ªd_bc_addr
;

55 
	#DHCP_MAX_DNS
 2

	)

56 
u32_t
 
dns_cou¡
;

57 
ù_addr
 
of„ªd_dns_addr
[
DHCP_MAX_DNS
];

59 
u32_t
 
of„ªd_t0_Àa£
;

60 
u32_t
 
of„ªd_t1_ª√w
;

61 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_AUTOIP_COOP


63 
u8_t
 
autoù_co›_°©e
;

69 
ù_addr
 
of„ªd_si_addr
;

70 
u8_t
 *
boŸ_fûe_«me
;

75 #ifde‡
PACK_STRUCT_USE_INCLUDES


76 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


80 
	sdh˝_msg


82 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

86 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

88 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

89 
PACK_STRUCT_FIELD
(
ù_addr
 
cüddr
);

90 
PACK_STRUCT_FIELD
(
ù_addr
 
yüddr
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
süddr
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
güddr
);

93 
	#DHCP_CHADDR_LEN
 16U

	)

94 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

95 
	#DHCP_SNAME_LEN
 64U

	)

96 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

97 
	#DHCP_FILE_LEN
 128U

	)

98 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

99 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

100 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

102 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

103 #unde‡
DHCP_OPTIONS_LEN


106 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

108 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

110 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

111 } 
PACK_STRUCT_STRUCT
;

112 
PACK_STRUCT_END


113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/ï°ru˘.h
"

118 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

120 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

122 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

124 
dh˝_°›
(
√tif
 *netif);

126 
dh˝_öf‹m
(
√tif
 *netif);

129 #i‡
DHCP_DOES_ARP_CHECK


130 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
);

134 
dh˝_cﬂr£_tmr
();

136 
dh˝_föe_tmr
();

139 
	#DHCP_MSG_OFS
 (
UDP_DATA_OFS
)

	)

140 
	#DHCP_OP_OFS
 (
DHCP_MSG_OFS
 + 0)

	)

141 
	#DHCP_HTYPE_OFS
 (
DHCP_MSG_OFS
 + 1)

	)

142 
	#DHCP_HLEN_OFS
 (
DHCP_MSG_OFS
 + 2)

	)

143 
	#DHCP_HOPS_OFS
 (
DHCP_MSG_OFS
 + 3)

	)

144 
	#DHCP_XID_OFS
 (
DHCP_MSG_OFS
 + 4)

	)

145 
	#DHCP_SECS_OFS
 (
DHCP_MSG_OFS
 + 8)

	)

146 
	#DHCP_FLAGS_OFS
 (
DHCP_MSG_OFS
 + 10)

	)

147 
	#DHCP_CIADDR_OFS
 (
DHCP_MSG_OFS
 + 12)

	)

148 
	#DHCP_YIADDR_OFS
 (
DHCP_MSG_OFS
 + 16)

	)

149 
	#DHCP_SIADDR_OFS
 (
DHCP_MSG_OFS
 + 20)

	)

150 
	#DHCP_GIADDR_OFS
 (
DHCP_MSG_OFS
 + 24)

	)

151 
	#DHCP_CHADDR_OFS
 (
DHCP_MSG_OFS
 + 28)

	)

152 
	#DHCP_SNAME_OFS
 (
DHCP_MSG_OFS
 + 44)

	)

153 
	#DHCP_FILE_OFS
 (
DHCP_MSG_OFS
 + 108)

	)

154 
	#DHCP_MSG_LEN
 236

	)

156 
	#DHCP_COOKIE_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
)

	)

157 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
 + 4)

	)

159 
	#DHCP_CLIENT_PORT
 68

	)

160 
	#DHCP_SERVER_PORT
 67

	)

163 
	#DHCP_REQUESTING
 1

	)

164 
	#DHCP_INIT
 2

	)

165 
	#DHCP_REBOOTING
 3

	)

166 
	#DHCP_REBINDING
 4

	)

167 
	#DHCP_RENEWING
 5

	)

168 
	#DHCP_SELECTING
 6

	)

169 
	#DHCP_INFORMING
 7

	)

170 
	#DHCP_CHECKING
 8

	)

171 
	#DHCP_PERMANENT
 9

	)

172 
	#DHCP_BOUND
 10

	)

174 
	#DHCP_BACKING_OFF
 12

	)

175 
	#DHCP_OFF
 13

	)

178 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

179 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

181 
	#DHCP_BOOTREQUEST
 1

	)

182 
	#DHCP_BOOTREPLY
 2

	)

184 
	#DHCP_DISCOVER
 1

	)

185 
	#DHCP_OFFER
 2

	)

186 
	#DHCP_REQUEST
 3

	)

187 
	#DHCP_DECLINE
 4

	)

188 
	#DHCP_ACK
 5

	)

189 
	#DHCP_NAK
 6

	)

190 
	#DHCP_RELEASE
 7

	)

191 
	#DHCP_INFORM
 8

	)

193 
	#DHCP_HTYPE_ETH
 1

	)

195 
	#DHCP_HLEN_ETH
 6

	)

197 
	#DHCP_BROADCAST_FLAG
 15

	)

198 
	#DHCP_BROADCAST_MASK
 (1 << 
DHCP_FLAG_BROADCAST
)

	)

201 
	#DHCP_OPTION_PAD
 0

	)

202 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

203 
	#DHCP_OPTION_ROUTER
 3

	)

204 
	#DHCP_OPTION_DNS_SERVER
 6

	)

205 
	#DHCP_OPTION_HOSTNAME
 12

	)

206 
	#DHCP_OPTION_IP_TTL
 23

	)

207 
	#DHCP_OPTION_MTU
 26

	)

208 
	#DHCP_OPTION_BROADCAST
 28

	)

209 
	#DHCP_OPTION_TCP_TTL
 37

	)

210 
	#DHCP_OPTION_END
 255

	)

213 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

214 
	#DHCP_OPTION_LEASE_TIME
 51

	)

215 
	#DHCP_OPTION_OVERLOAD
 52

	)

217 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

218 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

221 
	#DHCP_OPTION_SERVER_ID
 54

	)

222 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

224 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

225 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

227 
	#DHCP_OPTION_T1
 58

	)

228 
	#DHCP_OPTION_T2
 59

	)

229 
	#DHCP_OPTION_US
 60

	)

230 
	#DHCP_OPTION_CLIENT_ID
 61

	)

231 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

232 
	#DHCP_OPTION_BOOTFILE
 67

	)

235 
	#DHCP_OVERLOAD_NONE
 0

	)

236 
	#DHCP_OVERLOAD_FILE
 1

	)

237 
	#DHCP_OVERLOAD_SNAME
 2

	)

238 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

240 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


42 
	#DNS_TMR_INTERVAL
 1000

	)

45 
	#DNS_RRTYPE_A
 1

	)

46 
	#DNS_RRTYPE_NS
 2

	)

47 
	#DNS_RRTYPE_MD
 3

	)

48 
	#DNS_RRTYPE_MF
 4

	)

49 
	#DNS_RRTYPE_CNAME
 5

	)

50 
	#DNS_RRTYPE_SOA
 6

	)

51 
	#DNS_RRTYPE_MB
 7

	)

52 
	#DNS_RRTYPE_MG
 8

	)

53 
	#DNS_RRTYPE_MR
 9

	)

54 
	#DNS_RRTYPE_NULL
 10

	)

55 
	#DNS_RRTYPE_WKS
 11

	)

56 
	#DNS_RRTYPE_PTR
 12

	)

57 
	#DNS_RRTYPE_HINFO
 13

	)

58 
	#DNS_RRTYPE_MINFO
 14

	)

59 
	#DNS_RRTYPE_MX
 15

	)

60 
	#DNS_RRTYPE_TXT
 16

	)

63 
	#DNS_RRCLASS_IN
 1

	)

64 
	#DNS_RRCLASS_CS
 2

	)

65 
	#DNS_RRCLASS_CH
 3

	)

66 
	#DNS_RRCLASS_HS
 4

	)

67 
	#DNS_RRCLASS_FLUSH
 0x800

	)

76 (*
	tdns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr
 *
	tùaddr
, *
	tˇŒback_¨g
);

79 
	`dns_öô
();

81 
	`dns_tmr
();

83 
	`dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
);

85 
ù_addr
 
	`dns_gë£rvî
(
u8_t
 
numdns
);

87 
îr_t
 
	`dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
,

88 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

90 #i‡
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


91 
	`dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

92 
îr_t
 
	`dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr
 *
addr
);

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

58 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_RTE
)

	)

60 
	#ERR_ABRT
 -5

	)

61 
	#ERR_RST
 -6

	)

62 
	#ERR_CLSD
 -7

	)

63 
	#ERR_CONN
 -8

	)

65 
	#ERR_VAL
 -9

	)

67 
	#ERR_ARG
 -10

	)

69 
	#ERR_USE
 -11

	)

71 
	#ERR_IF
 -12

	)

72 
	#ERR_ISCONN
 -13

	)

74 
	#ERR_INPROGRESS
 -14

	)

77 #ifde‡
LWIP_DEBUG


78 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

80 
	#lwù_°ªº
(
x
Ë""

	)

83 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 3U

	)

46 
	#LWIP_VERSION_REVISION
 1U

	)

50 
	#LWIP_VERSION_RC
 255U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

61 #i‚de‡
mem_ªÆloc


62 *
	$mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
)

64 
	`LWIP_UNUSED_ARG
(
size
);

65  
mem
;

66 
	}
}

73 #i‡
MEM_SIZE
 > 64000l

74 
u32_t
 
	tmem_size_t
;

76 
u16_t
 
	tmem_size_t
;

79 #i‡
MEM_USE_POOLS


81 
	#mem_öô
()

	)

84 
	#mem_ªÆloc
(
mem
, 
size
Ë(mem)

	)

87 
mem_öô
();

88 *
mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
);

90 *
mem_mÆloc
(
mem_size_t
 
size
);

91 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

92 
mem_‰ì
(*
mem
);

95 #i‚de‡
LWIP_MEM_ALIGN_SIZE


96 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

99 #i‚de‡
LWIP_MEM_ALIGN


100 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

103 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


79 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

82 #i‡
MEMP_MEM_MALLOC


84 
	~"mem.h
"

86 
	#memp_öô
()

	)

87 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

88 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

92 #i‡
MEM_USE_POOLS


94 
	smemp_mÆloc_hñ≥r


96 
memp_t
 
	gpoﬁƒ
;

100 
memp_öô
();

102 #i‡
MEMP_OVERFLOW_CHECK


103 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

104 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

106 *
memp_mÆloc
(
memp_t
 
ty≥
);

108 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

112 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

51 #i‡
LWIP_NETCONN


52 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

53 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

56 #i‡
NO_SYS
==0

57 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

58 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

61 #i‡
ARP_QUEUEING


62 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

65 #i‡
LWIP_IGMP


66 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

69 #i‡
NO_SYS
==0

70 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

82 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

83 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

90 #i‡
MEMP_USE_CUSTOM_POOLS


91 
	~"lwùpoﬁs.h
"

98 #unde‡
LWIP_MEMPOOL


99 #unde‡
LWIP_MALLOC_MEMPOOL


100 #unde‡
LWIP_MALLOC_MEMPOOL_START


101 #unde‡
LWIP_MALLOC_MEMPOOL_END


102 #unde‡
LWIP_PBUF_MEMPOOL


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

38 #ifde‡
__˝lu•lus


42 
	s√tbuf
 {

43 
pbuf
 *
p
, *
±r
;

44 
ù_addr
 *
addr
;

45 
u16_t
 
p‹t
;

49 
√tbuf
 * 
√tbuf_√w
 ();

50 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

51 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

52 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

53 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

54 c⁄° *
d©≠å
, 
u16_t
 
size
);

55 
√tbuf_chaö
 (
√tbuf
 *
hód
,

56 
√tbuf
 *
èû
);

58 
u16_t
 
√tbuf_Àn
 (
√tbuf
 *
buf
);

59 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

60 **
d©≠å
, 
u16_t
 *
Àn
);

61 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

62 
√tbuf_fú°
 (
√tbuf
 *
buf
);

65 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

66 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

67 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

68 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

69 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

70 
	#√tbuf_‰omaddr
(
buf
Ë((buf)->
addr
)

	)

71 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

73 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netdb.h

30 
	~"lwù/›t.h
"

32 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


34 
	~<°ddef.h
>

36 
	~"lwù/sockës.h
"

39 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


40 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

43 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


44 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

47 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


48 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

51 #i‡
LWIP_DNS_API_DEFINE_ERRORS


53 
	#EAI_NONAME
 200

	)

54 
	#EAI_SERVICE
 201

	)

55 
	#EAI_FAIL
 202

	)

56 
	#EAI_MEMORY
 203

	)

58 
	#HOST_NOT_FOUND
 210

	)

59 
	#NO_DATA
 211

	)

60 
	#NO_RECOVERY
 212

	)

61 
	#TRY_AGAIN
 213

	)

64 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


65 
	sho°ít
 {

66 *
	mh_«me
;

67 **
	mh_Æü£s
;

69 
	mh_addπy≥
;

70 
	mh_Àngth
;

71 **
	mh_addr_li°
;

73 
	#h_addr
 
h_addr_li°
[0]

	)

76 
	saddröfo
 {

77 
	mai_Êags
;

78 
	mai_Ámûy
;

79 
	mai_sockty≥
;

80 
	mai_¥Ÿocﬁ
;

81 
sockÀn_t
 
	mai_addæí
;

82 
sockaddr
 *
	mai_addr
;

83 *
	mai_ˇn⁄«me
;

84 
addröfo
 *
	mai_√xt
;

88 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


90 
h_î∫o
;

93 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

94 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

95 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

96 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

97 
lwù_gëaddröfo
(c⁄° *
nodíame
,

98 c⁄° *
£rv«me
,

99 c⁄° 
addröfo
 *
höts
,

100 
addröfo
 **
ªs
);

102 #i‡
LWIP_COMPAT_SOCKETS


103 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

104 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

105 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

106 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
(
a
)

	)

107 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

108 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/öë.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

71 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

73 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

75 
	#NETIF_FLAG_DHCP
 0x08U

	)

78 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

80 
	#NETIF_FLAG_ETHARP
 0x20U

	)

82 
	#NETIF_FLAG_IGMP
 0x40U

	)

88 
	s√tif
 {

90 
√tif
 *
√xt
;

93 
ù_addr
 ip_addr;

94 
ù_addr
 
√tmask
;

95 
ù_addr
 
gw
;

99 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *
öp
);

103 
îr_t
 (* 
ouçut
)(
√tif
 *√tif, 
pbuf
 *
p
,

104 
ù_addr
 *
ùaddr
);

108 
îr_t
 (* 
lökouçut
)(
√tif
 *√tif, 
pbuf
 *
p
);

109 #i‡
LWIP_NETIF_STATUS_CALLBACK


112 (* 
°©us_ˇŒback
)(
√tif
 *netif);

114 #i‡
LWIP_NETIF_LINK_CALLBACK


117 (* 
lök_ˇŒback
)(
√tif
 *netif);

121 *
°©e
;

122 #i‡
LWIP_DHCP


124 
dh˝
 *dhcp;

126 #i‡
LWIP_AUTOIP


128 
autoù
 *autoip;

130 #i‡
LWIP_NETIF_HOSTNAME


132 * 
ho°«me
;

135 
u8_t
 
hwaddr_Àn
;

137 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

139 
u16_t
 
mtu
;

141 
u8_t
 
Êags
;

143 
«me
[2];

145 
u8_t
 
num
;

146 #i‡
LWIP_SNMP


148 
u8_t
 
lök_ty≥
;

150 
u32_t
 
lök_•ìd
;

152 
u32_t
 
ts
;

154 
u32_t
 
iföo˘ës
;

155 
u32_t
 
iföuˇ°pkts
;

156 
u32_t
 
ifönuˇ°pkts
;

157 
u32_t
 
ifödisˇrds
;

158 
u32_t
 
ifouto˘ës
;

159 
u32_t
 
ifoutuˇ°pkts
;

160 
u32_t
 
ifouäuˇ°pkts
;

161 
u32_t
 
ifoutdisˇrds
;

163 #i‡
LWIP_IGMP


165 
îr_t
 (*
igmp_mac_fûãr
)–
√tif
 *√tif, 
ù_addr
 *
group
, 
u8_t
 
a˘i⁄
);

167 #i‡
LWIP_NETIF_HWADDRHINT


168 
u8_t
 *
addr_höt
;

170 #i‡
ENABLE_LOOPBACK


172 
pbuf
 *
lo›_fú°
;

173 
pbuf
 *
lo›_œ°
;

174 #i‡
LWIP_LOOPBACK_MAX_PBUFS


175 
u16_t
 
lo›_˙t_cuºít
;

180 #i‡
LWIP_SNMP


181 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

183 
√tif
->
lök_ty≥
 = 
ty≥
; \

185 
√tif
->
lök_•ìd
 = 
•ìd
; \

186 
√tif
->
ts
 = 0; \

187 
√tif
->
iföo˘ës
 = 0; \

188 
√tif
->
iföuˇ°pkts
 = 0; \

189 
√tif
->
ifönuˇ°pkts
 = 0; \

190 
√tif
->
ifödisˇrds
 = 0; \

191 
√tif
->
ifouto˘ës
 = 0; \

192 
√tif
->
ifoutuˇ°pkts
 = 0; \

193 
√tif
->
ifouäuˇ°pkts
 = 0; \

194 
√tif
->
ifoutdisˇrds
 = 0

	)

196 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

201 
√tif
 *
√tif_li°
;

203 
√tif
 *
√tif_deÁu…
;

205 
	#√tif_öô
(Ë

	)

207 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

208 
ù_addr
 *
gw
,

209 *
°©e
,

210 
îr_t
 (* 
öô
)(
√tif
 *netif),

211 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif));

214 
√tif_£t_addr
(
√tif
 *√tif,
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

215 
ù_addr
 *
gw
);

216 
√tif_ªmove
(
√tif
 *Çetif);

222 
√tif
 *
√tif_föd
(*
«me
);

224 
√tif_£t_deÁu…
(
√tif
 *netif);

226 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

227 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
);

228 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
);

230 
√tif_£t_up
(
√tif
 *netif);

231 
√tif_£t_down
(
√tif
 *netif);

232 
u8_t
 
√tif_is_up
(
√tif
 *netif);

234 #i‡
LWIP_NETIF_STATUS_CALLBACK


238 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif));

241 #i‡
LWIP_NETIF_LINK_CALLBACK


242 
√tif_£t_lök_up
(
√tif
 *netif);

243 
√tif_£t_lök_down
(
√tif
 *netif);

244 
u8_t
 
√tif_is_lök_up
(
√tif
 *netif);

248 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif));

251 #ifde‡
__˝lu•lus


255 #i‡
ENABLE_LOOPBACK


256 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
de°_ù
);

257 
√tif_pﬁl
(
√tif
 *netif);

258 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


259 
√tif_pﬁl_Æl
();

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 
	s√tiÁpi_msg_msg
 {

45 #i‡!
LWIP_TCPIP_CORE_LOCKING


46 
sys_£m_t
 
£m
;

48 
îr_t
 
îr
;

49 
√tif
 *netif;

52 
ù_addr
 *
ùaddr
;

53 
ù_addr
 *
√tmask
;

54 
ù_addr
 *
gw
;

55 *
°©e
;

56 
îr_t
 (* 
öô
Ë(
√tif
 *netif);

57 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif);

58 } 
add
;

60 (* 
voidfunc
)(
√tif
 *netif);

61 
îr_t
 (* 
îπfunc
)(
√tif
 *netif);

62 } 
comm⁄
;

63 } 
msg
;

66 
	s√tiÁpi_msg
 {

67 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

68 
√tiÁpi_msg_msg
 
msg
;

73 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

74 
ù_addr
 *
ùaddr
,

75 
ù_addr
 *
√tmask
,

76 
ù_addr
 *
gw
,

77 *
°©e
,

78 
îr_t
 (* 
öô
)(
√tif
 *netif),

79 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif) );

81 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

82 (* 
voidfunc
)(
√tif
 *netif),

83 
îr_t
 (* 
îπfunc
)(
√tif
 *netif) );

85 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

86 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

87 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

88 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

89 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

90 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

91 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

92 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

94 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
MEMCPY


76 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

83 #i‚de‡
SMEMCPY


84 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

97 #i‚de‡
MEM_LIBC_MALLOC


98 
	#MEM_LIBC_MALLOC
 0

	)

106 #i‚de‡
MEMP_MEM_MALLOC


107 
	#MEMP_MEM_MALLOC
 0

	)

115 #i‚de‡
MEM_ALIGNMENT


116 
	#MEM_ALIGNMENT
 1

	)

123 #i‚de‡
MEM_SIZE


124 
	#MEM_SIZE
 1600

	)

136 #i‚de‡
MEMP_OVERFLOW_CHECK


137 
	#MEMP_OVERFLOW_CHECK
 0

	)

144 #i‚de‡
MEMP_SANITY_CHECK


145 
	#MEMP_SANITY_CHECK
 0

	)

154 #i‚de‡
MEM_USE_POOLS


155 
	#MEM_USE_POOLS
 0

	)

162 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


163 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

172 #i‚de‡
MEMP_USE_CUSTOM_POOLS


173 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

194 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


195 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

208 #i‚de‡
MEMP_NUM_PBUF


209 
	#MEMP_NUM_PBUF
 16

	)

216 #i‚de‡
MEMP_NUM_RAW_PCB


217 
	#MEMP_NUM_RAW_PCB
 4

	)

225 #i‚de‡
MEMP_NUM_UDP_PCB


226 
	#MEMP_NUM_UDP_PCB
 4

	)

233 #i‚de‡
MEMP_NUM_TCP_PCB


234 
	#MEMP_NUM_TCP_PCB
 5

	)

241 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


242 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

249 #i‚de‡
MEMP_NUM_TCP_SEG


250 
	#MEMP_NUM_TCP_SEG
 16

	)

257 #i‚de‡
MEMP_NUM_REASSDATA


258 
	#MEMP_NUM_REASSDATA
 5

	)

267 #i‚de‡
MEMP_NUM_ARP_QUEUE


268 
	#MEMP_NUM_ARP_QUEUE
 30

	)

277 #i‚de‡
MEMP_NUM_IGMP_GROUP


278 
	#MEMP_NUM_IGMP_GROUP
 8

	)

285 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


286 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

293 #i‚de‡
MEMP_NUM_NETBUF


294 
	#MEMP_NUM_NETBUF
 2

	)

301 #i‚de‡
MEMP_NUM_NETCONN


302 
	#MEMP_NUM_NETCONN
 4

	)

310 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


311 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

319 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


320 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

326 #i‚de‡
PBUF_POOL_SIZE


327 
	#PBUF_POOL_SIZE
 16

	)

338 #i‚de‡
LWIP_ARP


339 
	#LWIP_ARP
 1

	)

345 #i‚de‡
ARP_TABLE_SIZE


346 
	#ARP_TABLE_SIZE
 10

	)

353 #i‚de‡
ARP_QUEUEING


354 
	#ARP_QUEUEING
 1

	)

365 #i‚de‡
ETHARP_TRUST_IP_MAC


366 
	#ETHARP_TRUST_IP_MAC
 1

	)

379 #i‚de‡
IP_FORWARD


380 
	#IP_FORWARD
 0

	)

388 #i‚de‡
IP_OPTIONS_ALLOWED


389 
	#IP_OPTIONS_ALLOWED
 1

	)

397 #i‚de‡
IP_REASSEMBLY


398 
	#IP_REASSEMBLY
 1

	)

406 #i‚de‡
IP_FRAG


407 
	#IP_FRAG
 1

	)

415 #i‚de‡
IP_REASS_MAXAGE


416 
	#IP_REASS_MAXAGE
 3

	)

425 #i‚de‡
IP_REASS_MAX_PBUFS


426 
	#IP_REASS_MAX_PBUFS
 10

	)

434 #i‚de‡
IP_FRAG_USES_STATIC_BUF


435 
	#IP_FRAG_USES_STATIC_BUF
 1

	)

442 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

443 
	#IP_FRAG_MAX_MTU
 1500

	)

449 #i‚de‡
IP_DEFAULT_TTL


450 
	#IP_DEFAULT_TTL
 255

	)

458 #i‚de‡
IP_SOF_BROADCAST


459 
	#IP_SOF_BROADCAST
 0

	)

466 #i‚de‡
IP_SOF_BROADCAST_RECV


467 
	#IP_SOF_BROADCAST_RECV
 0

	)

479 #i‚de‡
LWIP_ICMP


480 
	#LWIP_ICMP
 1

	)

486 #i‚de‡
ICMP_TTL


487 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

493 #i‚de‡
LWIP_BROADCAST_PING


494 
	#LWIP_BROADCAST_PING
 0

	)

500 #i‚de‡
LWIP_MULTICAST_PING


501 
	#LWIP_MULTICAST_PING
 0

	)

512 #i‚de‡
LWIP_RAW


513 
	#LWIP_RAW
 1

	)

519 #i‚de‡
RAW_TTL


520 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

531 #i‚de‡
LWIP_DHCP


532 
	#LWIP_DHCP
 0

	)

538 #i‚de‡
DHCP_DOES_ARP_CHECK


539 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

550 #i‚de‡
LWIP_AUTOIP


551 
	#LWIP_AUTOIP
 0

	)

558 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


559 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

569 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


570 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

582 #i‚de‡
LWIP_SNMP


583 
	#LWIP_SNMP
 0

	)

590 #i‚de‡
SNMP_CONCURRENT_REQUESTS


591 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

598 #i‚de‡
SNMP_TRAP_DESTINATIONS


599 
	#SNMP_TRAP_DESTINATIONS
 1

	)

605 #i‚de‡
SNMP_PRIVATE_MIB


606 
	#SNMP_PRIVATE_MIB
 0

	)

614 #i‚de‡
SNMP_SAFE_REQUESTS


615 
	#SNMP_SAFE_REQUESTS
 1

	)

626 #i‚de‡
LWIP_IGMP


627 
	#LWIP_IGMP
 0

	)

639 #i‚de‡
LWIP_DNS


640 
	#LWIP_DNS
 0

	)

644 #i‚de‡
DNS_TABLE_SIZE


645 
	#DNS_TABLE_SIZE
 4

	)

649 #i‚de‡
DNS_MAX_NAME_LENGTH


650 
	#DNS_MAX_NAME_LENGTH
 256

	)

654 #i‚de‡
DNS_MAX_SERVERS


655 
	#DNS_MAX_SERVERS
 2

	)

659 #i‚de‡
DNS_DOES_NAME_CHECK


660 
	#DNS_DOES_NAME_CHECK
 1

	)

666 #i‚de‡
DNS_USES_STATIC_BUF


667 
	#DNS_USES_STATIC_BUF
 1

	)

671 #i‚de‡
DNS_MSG_SIZE


672 
	#DNS_MSG_SIZE
 512

	)

685 #i‚de‡
DNS_LOCAL_HOSTLIST


686 
	#DNS_LOCAL_HOSTLIST
 0

	)

691 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


692 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

703 #i‚de‡
LWIP_UDP


704 
	#LWIP_UDP
 1

	)

710 #i‚de‡
LWIP_UDPLITE


711 
	#LWIP_UDPLITE
 0

	)

717 #i‚de‡
UDP_TTL


718 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

729 #i‚de‡
LWIP_TCP


730 
	#LWIP_TCP
 1

	)

736 #i‚de‡
TCP_TTL


737 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

744 #i‚de‡
TCP_WND


745 
	#TCP_WND
 2048

	)

751 #i‚de‡
TCP_MAXRTX


752 
	#TCP_MAXRTX
 12

	)

758 #i‚de‡
TCP_SYNMAXRTX


759 
	#TCP_SYNMAXRTX
 6

	)

766 #i‚de‡
TCP_QUEUE_OOSEQ


767 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

777 #i‚de‡
TCP_MSS


778 
	#TCP_MSS
 128

	)

789 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


790 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

797 #i‚de‡
TCP_SND_BUF


798 
	#TCP_SND_BUF
 256

	)

805 #i‚de‡
TCP_SND_QUEUELEN


806 
	#TCP_SND_QUEUELEN
 (4 * (
TCP_SND_BUF
/
TCP_MSS
))

	)

814 #i‚de‡
TCP_SNDLOWAT


815 
	#TCP_SNDLOWAT
 (
TCP_SND_BUF
/2)

	)

821 #i‚de‡
TCP_LISTEN_BACKLOG


822 
	#TCP_LISTEN_BACKLOG
 0

	)

830 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


831 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

837 #i‚de‡
LWIP_TCP_TIMESTAMPS


838 
	#LWIP_TCP_TIMESTAMPS
 0

	)

845 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


846 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

856 #i‚de‡
LWIP_EVENT_API


857 
	#LWIP_EVENT_API
 0

	)

858 
	#LWIP_CALLBACK_API
 1

	)

860 
	#LWIP_EVENT_API
 1

	)

861 
	#LWIP_CALLBACK_API
 0

	)

875 #i‚de‡
PBUF_LINK_HLEN


876 
	#PBUF_LINK_HLEN
 14

	)

884 #i‚de‡
PBUF_POOL_BUFSIZE


885 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

897 #i‚de‡
LWIP_NETIF_HOSTNAME


898 
	#LWIP_NETIF_HOSTNAME
 0

	)

904 #i‚de‡
LWIP_NETIF_API


905 
	#LWIP_NETIF_API
 0

	)

912 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


913 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

920 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


921 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

931 #i‚de‡
LWIP_NETIF_HWADDRHINT


932 
	#LWIP_NETIF_HWADDRHINT
 0

	)

939 #i‚de‡
LWIP_NETIF_LOOPBACK


940 
	#LWIP_NETIF_LOOPBACK
 0

	)

947 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


948 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

964 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


965 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

977 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


978 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

989 #i‚de‡
LWIP_HAVE_LOOPIF


990 
	#LWIP_HAVE_LOOPIF
 0

	)

1001 #i‚de‡
LWIP_HAVE_SLIPIF


1002 
	#LWIP_HAVE_SLIPIF
 0

	)

1013 #i‚de‡
TCPIP_THREAD_NAME


1014 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1022 #i‚de‡
TCPIP_THREAD_STACKSIZE


1023 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1031 #i‚de‡
TCPIP_THREAD_PRIO


1032 
	#TCPIP_THREAD_PRIO
 1

	)

1040 #i‚de‡
TCPIP_MBOX_SIZE


1041 
	#TCPIP_MBOX_SIZE
 0

	)

1047 #i‚de‡
SLIPIF_THREAD_NAME


1048 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1056 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1057 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1065 #i‚de‡
SLIPIF_THREAD_PRIO


1066 
	#SLIPIF_THREAD_PRIO
 1

	)

1072 #i‚de‡
PPP_THREAD_NAME


1073 
	#PPP_THREAD_NAME
 "µpMaö"

	)

1081 #i‚de‡
PPP_THREAD_STACKSIZE


1082 
	#PPP_THREAD_STACKSIZE
 0

	)

1090 #i‚de‡
PPP_THREAD_PRIO


1091 
	#PPP_THREAD_PRIO
 1

	)

1097 #i‚de‡
DEFAULT_THREAD_NAME


1098 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1106 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1107 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1115 #i‚de‡
DEFAULT_THREAD_PRIO


1116 
	#DEFAULT_THREAD_PRIO
 1

	)

1124 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1125 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1133 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1134 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1142 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1143 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1151 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1152 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1164 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1165 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1171 #i‚de‡
LWIP_NETCONN


1172 
	#LWIP_NETCONN
 1

	)

1183 #i‚de‡
LWIP_SOCKET


1184 
	#LWIP_SOCKET
 1

	)

1191 #i‚de‡
LWIP_COMPAT_SOCKETS


1192 
	#LWIP_COMPAT_SOCKETS
 1

	)

1200 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1201 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1209 #i‚de‡
LWIP_TCP_KEEPALIVE


1210 
	#LWIP_TCP_KEEPALIVE
 0

	)

1216 #i‚de‡
LWIP_SO_RCVTIMEO


1217 
	#LWIP_SO_RCVTIMEO
 0

	)

1223 #i‚de‡
LWIP_SO_RCVBUF


1224 
	#LWIP_SO_RCVBUF
 0

	)

1230 #i‚de‡
RECV_BUFSIZE_DEFAULT


1231 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1237 #i‚de‡
SO_REUSE


1238 
	#SO_REUSE
 0

	)

1249 #i‚de‡
LWIP_STATS


1250 
	#LWIP_STATS
 1

	)

1253 #i‡
LWIP_STATS


1258 #i‚de‡
LWIP_STATS_DISPLAY


1259 
	#LWIP_STATS_DISPLAY
 0

	)

1265 #i‚de‡
LINK_STATS


1266 
	#LINK_STATS
 1

	)

1272 #i‚de‡
ETHARP_STATS


1273 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1279 #i‚de‡
IP_STATS


1280 
	#IP_STATS
 1

	)

1287 #i‚de‡
IPFRAG_STATS


1288 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1294 #i‚de‡
ICMP_STATS


1295 
	#ICMP_STATS
 1

	)

1301 #i‚de‡
IGMP_STATS


1302 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1309 #i‚de‡
UDP_STATS


1310 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1317 #i‚de‡
TCP_STATS


1318 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1324 #i‚de‡
MEM_STATS


1325 
	#MEM_STATS
 1

	)

1331 #i‚de‡
MEMP_STATS


1332 
	#MEMP_STATS
 1

	)

1338 #i‚de‡
SYS_STATS


1339 
	#SYS_STATS
 1

	)

1344 
	#LINK_STATS
 0

	)

1345 
	#IP_STATS
 0

	)

1346 
	#IPFRAG_STATS
 0

	)

1347 
	#ICMP_STATS
 0

	)

1348 
	#IGMP_STATS
 0

	)

1349 
	#UDP_STATS
 0

	)

1350 
	#TCP_STATS
 0

	)

1351 
	#MEM_STATS
 0

	)

1352 
	#MEMP_STATS
 0

	)

1353 
	#SYS_STATS
 0

	)

1354 
	#LWIP_STATS_DISPLAY
 0

	)

1366 #i‚de‡
PPP_SUPPORT


1367 
	#PPP_SUPPORT
 0

	)

1373 #i‚de‡
PPPOE_SUPPORT


1374 
	#PPPOE_SUPPORT
 0

	)

1380 #i‚de‡
PPPOS_SUPPORT


1381 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1384 #i‡
PPP_SUPPORT


1389 #i‚de‡
NUM_PPP


1390 
	#NUM_PPP
 1

	)

1396 #i‚de‡
PAP_SUPPORT


1397 
	#PAP_SUPPORT
 0

	)

1403 #i‚de‡
CHAP_SUPPORT


1404 
	#CHAP_SUPPORT
 0

	)

1410 #i‚de‡
MSCHAP_SUPPORT


1411 
	#MSCHAP_SUPPORT
 0

	)

1417 #i‚de‡
CBCP_SUPPORT


1418 
	#CBCP_SUPPORT
 0

	)

1424 #i‚de‡
CCP_SUPPORT


1425 
	#CCP_SUPPORT
 0

	)

1431 #i‚de‡
VJ_SUPPORT


1432 
	#VJ_SUPPORT
 0

	)

1438 #i‚de‡
MD5_SUPPORT


1439 
	#MD5_SUPPORT
 0

	)

1445 #i‚de‡
FSM_DEFTIMEOUT


1446 
	#FSM_DEFTIMEOUT
 6

	)

1449 #i‚de‡
FSM_DEFMAXTERMREQS


1450 
	#FSM_DEFMAXTERMREQS
 2

	)

1453 #i‚de‡
FSM_DEFMAXCONFREQS


1454 
	#FSM_DEFMAXCONFREQS
 10

	)

1457 #i‚de‡
FSM_DEFMAXNAKLOOPS


1458 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1461 #i‚de‡
UPAP_DEFTIMEOUT


1462 
	#UPAP_DEFTIMEOUT
 6

	)

1465 #i‚de‡
UPAP_DEFREQTIME


1466 
	#UPAP_DEFREQTIME
 30

	)

1469 #i‚de‡
CHAP_DEFTIMEOUT


1470 
	#CHAP_DEFTIMEOUT
 6

	)

1473 #i‚de‡
CHAP_DEFTRANSMITS


1474 
	#CHAP_DEFTRANSMITS
 10

	)

1478 #i‚de‡
LCP_ECHOINTERVAL


1479 
	#LCP_ECHOINTERVAL
 0

	)

1483 #i‚de‡
LCP_MAXECHOFAILS


1484 
	#LCP_MAXECHOFAILS
 3

	)

1488 #i‚de‡
PPP_MAXIDLEFLAG


1489 
	#PPP_MAXIDLEFLAG
 100

	)

1500 
	#PPP_MTU
 1500

	)

1501 #i‚de‡
PPP_MAXMTU


1503 
	#PPP_MAXMTU
 1500

	)

1505 
	#PPP_MINMTU
 64

	)

1506 
	#PPP_MRU
 1500

	)

1507 
	#PPP_MAXMRU
 1500

	)

1508 #i‚de‡
PPP_DEFMRU


1509 
	#PPP_DEFMRU
 296

	)

1511 
	#PPP_MINMRU
 128

	)

1514 
	#MAXNAMELEN
 256

	)

1515 
	#MAXSECRETLEN
 256

	)

1527 #i‚de‡
CHECKSUM_GEN_IP


1528 
	#CHECKSUM_GEN_IP
 1

	)

1534 #i‚de‡
CHECKSUM_GEN_UDP


1535 
	#CHECKSUM_GEN_UDP
 1

	)

1541 #i‚de‡
CHECKSUM_GEN_TCP


1542 
	#CHECKSUM_GEN_TCP
 1

	)

1548 #i‚de‡
CHECKSUM_CHECK_IP


1549 
	#CHECKSUM_CHECK_IP
 1

	)

1555 #i‚de‡
CHECKSUM_CHECK_UDP


1556 
	#CHECKSUM_CHECK_UDP
 1

	)

1562 #i‚de‡
CHECKSUM_CHECK_TCP


1563 
	#CHECKSUM_CHECK_TCP
 1

	)

1576 #i‚de‡
LWIP_DBG_MIN_LEVEL


1577 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_OFF


	)

1584 #i‚de‡
LWIP_DBG_TYPES_ON


1585 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1591 #i‚de‡
ETHARP_DEBUG


1592 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1598 #i‚de‡
NETIF_DEBUG


1599 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1605 #i‚de‡
PBUF_DEBUG


1606 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1612 #i‚de‡
API_LIB_DEBUG


1613 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1619 #i‚de‡
API_MSG_DEBUG


1620 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1626 #i‚de‡
SOCKETS_DEBUG


1627 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1633 #i‚de‡
ICMP_DEBUG


1634 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1640 #i‚de‡
IGMP_DEBUG


1641 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1647 #i‚de‡
INET_DEBUG


1648 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1654 #i‚de‡
IP_DEBUG


1655 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1661 #i‚de‡
IP_REASS_DEBUG


1662 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1668 #i‚de‡
RAW_DEBUG


1669 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1675 #i‚de‡
MEM_DEBUG


1676 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1682 #i‚de‡
MEMP_DEBUG


1683 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1689 #i‚de‡
SYS_DEBUG


1690 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1696 #i‚de‡
TCP_DEBUG


1697 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1703 #i‚de‡
TCP_INPUT_DEBUG


1704 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1710 #i‚de‡
TCP_FR_DEBUG


1711 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1718 #i‚de‡
TCP_RTO_DEBUG


1719 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1725 #i‚de‡
TCP_CWND_DEBUG


1726 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1732 #i‚de‡
TCP_WND_DEBUG


1733 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1739 #i‚de‡
TCP_OUTPUT_DEBUG


1740 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1746 #i‚de‡
TCP_RST_DEBUG


1747 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1753 #i‚de‡
TCP_QLEN_DEBUG


1754 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1760 #i‚de‡
UDP_DEBUG


1761 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1767 #i‚de‡
TCPIP_DEBUG


1768 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1774 #i‚de‡
PPP_DEBUG


1775 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

1781 #i‚de‡
SLIP_DEBUG


1782 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

1788 #i‚de‡
DHCP_DEBUG


1789 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

1795 #i‚de‡
AUTOIP_DEBUG


1796 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

1802 #i‚de‡
SNMP_MSG_DEBUG


1803 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1809 #i‚de‡
SNMP_MIB_DEBUG


1810 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

1816 #i‚de‡
DNS_DEBUG


1817 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 
	#PBUF_TRANSPORT_HLEN
 20

	)

44 
	#PBUF_IP_HLEN
 20

	)

47 
PBUF_TRANSPORT
,

48 
PBUF_IP
,

49 
PBUF_LINK
,

50 
PBUF_RAW


51 } 
	tpbuf_œyî
;

54 
PBUF_RAM
,

55 
PBUF_ROM
,

56 
PBUF_REF
,

57 
PBUF_POOL


58 } 
	tpbuf_ty≥
;

62 
	#PBUF_FLAG_PUSH
 0x01U

	)

64 
	spbuf
 {

66 
pbuf
 *
√xt
;

69 *
∑ylﬂd
;

78 
u16_t
 
tŸ_Àn
;

81 
u16_t
 
Àn
;

84 
u8_t
 
ty≥
;

87 
u8_t
 
Êags
;

94 
u16_t
 
ªf
;

99 
	#pbuf_öô
()

	)

101 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
size
, 
pbuf_ty≥
 
ty≥
);

102 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

103 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

104 
pbuf_ªf
(
pbuf
 *
p
);

105 
pbuf_ªf_chaö
(
pbuf
 *
p
);

106 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

107 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

108 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

109 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

110 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

111 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

112 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

113 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

114 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

116 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/öë.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
	søw_pcb
 {

50 
IP_PCB
;

52 
øw_pcb
 *
√xt
;

54 
u8_t
 
¥Ÿocﬁ
;

66 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

67 
ù_addr
 *
addr
);

69 *
ªcv_¨g
;

74 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

75 
øw_ªmove
 (
øw_pcb
 *
pcb
);

76 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

77 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

79 
øw_ªcv
 (
øw_pcb
 *
pcb
,

80 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
,

81 
pbuf
 *
p
,

82 
ù_addr
 *
addr
),

83 *
ªcv_¨g
);

84 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
);

85 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

88 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

89 
	#øw_öô
(Ë

	)

91 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


54 
sio_fd_t
 
sio_›í
(
u8_t
);

57 #i‚de‡
sio_£nd


58 
sio_£nd
(
u8_t
, 
sio_fd_t
);

61 #i‚de‡
sio_ªcv


62 
u8_t
 
sio_ªcv
(
sio_fd_t
);

65 #i‚de‡
sio_ªad


66 
u32_t
 
sio_ªad
(
sio_fd_t
, 
u8_t
 *, u32_t);

69 #i‚de‡
sio_wrôe


70 
u32_t
 
sio_wrôe
(
sio_fd_t
, 
u8_t
 *, u32_t);

73 #i‚de‡
sio_ªad_ab‹t


74 
sio_ªad_ab‹t
(
sio_fd_t
);

77 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/udp.h
"

40 #ifde‡
__˝lu•lus


47 
	e¢mp_ifTy≥
 {

48 
¢mp_ifTy≥_Ÿhî
=1,

49 
¢mp_ifTy≥_ªguœr1822
,

50 
¢mp_ifTy≥_hdh1822
,

51 
¢mp_ifTy≥_ddn_x25
,

52 
¢mp_ifTy≥_rfc877_x25
,

53 
¢mp_ifTy≥_ëhî√t_csmacd
,

54 
¢mp_ifTy≥_iso88023_csmacd
,

55 
¢mp_ifTy≥_iso88024_tokíBus
,

56 
¢mp_ifTy≥_iso88025_tokíRög
,

57 
¢mp_ifTy≥_iso88026_m™
,

58 
¢mp_ifTy≥_°¨L™
,

59 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

60 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

61 
¢mp_ifTy≥_hy≥rch™√l
,

62 
¢mp_ifTy≥_fddi
,

63 
¢mp_ifTy≥_œpb
,

64 
¢mp_ifTy≥_sdlc
,

65 
¢mp_ifTy≥_ds1
,

66 
¢mp_ifTy≥_e1
,

67 
¢mp_ifTy≥_basicISDN
,

68 
¢mp_ifTy≥_¥im¨yISDN
,

69 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

70 
¢mp_ifTy≥_µp
,

71 
¢mp_ifTy≥_so·w¨eLo›back
,

72 
¢mp_ifTy≥_e⁄
,

73 
¢mp_ifTy≥_ëhî√t_3Mbô
,

74 
¢mp_ifTy≥_nsù
,

75 
¢mp_ifTy≥_¶ù
,

76 
¢mp_ifTy≥_u…ø
,

77 
¢mp_ifTy≥_ds3
,

78 
¢mp_ifTy≥_sù
,

79 
¢mp_ifTy≥_‰ame_ªœy


82 #i‡
LWIP_SNMP


85 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

88 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

91 
	s¢mp_obj_id


93 
u8_t
 
Àn
;

94 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

98 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

99 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

100 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

101 
¢mp_öc_sysu±ime
();

102 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

103 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

104 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

105 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

106 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

110 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

111 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

112 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

113 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

114 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

116 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

117 
¢mp_öc_iÊi°
();

118 
¢mp_dec_iÊi°
();

121 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

122 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

125 
¢mp_öc_ùöª˚ives
();

126 
¢mp_öc_ùöhdªº‹s
();

127 
¢mp_öc_ùöaddªº‹s
();

128 
¢mp_öc_ùf‹wd©agøms
();

129 
¢mp_öc_ùöunknow≈rŸos
();

130 
¢mp_öc_ùödisˇrds
();

131 
¢mp_öc_ùödñivîs
();

132 
¢mp_öc_ùouåeque°s
();

133 
¢mp_öc_ùoutdisˇrds
();

134 
¢mp_öc_ùouä‹ouãs
();

135 
¢mp_öc_ùªasmªqds
();

136 
¢mp_öc_ùªasmoks
();

137 
¢mp_öc_ùªasmÁûs
();

138 
¢mp_öc_ù‰agoks
();

139 
¢mp_öc_ù‰agÁûs
();

140 
¢mp_öc_ù‰ag¸óãs
();

141 
¢mp_öc_ùroutögdisˇrds
();

142 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

143 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

144 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

145 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_öc_icmpömsgs
();

149 
¢mp_öc_icmpöîr‹s
();

150 
¢mp_öc_icmpöde°uƒóchs
();

151 
¢mp_öc_icmpötimìxcds
();

152 
¢mp_öc_icmpö∑rm¥obs
();

153 
¢mp_öc_icmpö§cquíchs
();

154 
¢mp_öc_icmpöªdúe˘s
();

155 
¢mp_öc_icmpöechos
();

156 
¢mp_öc_icmpöech‹ïs
();

157 
¢mp_öc_icmpötime°amps
();

158 
¢mp_öc_icmpötime°am¥ïs
();

159 
¢mp_öc_icmpöaddrmasks
();

160 
¢mp_öc_icmpöaddrmaskªps
();

161 
¢mp_öc_icmpoutmsgs
();

162 
¢mp_öc_icmpouãº‹s
();

163 
¢mp_öc_icmpoutde°uƒóchs
();

164 
¢mp_öc_icmpouâimìxcds
();

165 
¢mp_öc_icmpouç¨m¥obs
();

166 
¢mp_öc_icmpout§cquíchs
();

167 
¢mp_öc_icmpouåedúe˘s
();

168 
¢mp_öc_icmpouãchos
();

169 
¢mp_öc_icmpouãch‹ïs
();

170 
¢mp_öc_icmpouâime°amps
();

171 
¢mp_öc_icmpouâime°am¥ïs
();

172 
¢mp_öc_icmpouèddrmasks
();

173 
¢mp_öc_icmpouèddrmaskªps
();

176 
¢mp_öc_t˝a˘ive›ís
();

177 
¢mp_öc_t˝∑ssive›ís
();

178 
¢mp_öc_t˝©ãm±Áûs
();

179 
¢mp_öc_t˝e°abª£ts
();

180 
¢mp_öc_t˝ö£gs
();

181 
¢mp_öc_t˝out£gs
();

182 
¢mp_öc_t˝ªå™s£gs
();

183 
¢mp_öc_t˝öîrs
();

184 
¢mp_öc_t˝ouå°s
();

187 
¢mp_öc_udpöd©agøms
();

188 
¢mp_öc_ud≤›‹ts
();

189 
¢mp_öc_udpöîr‹s
();

190 
¢mp_öc_udpoutd©agøms
();

191 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

192 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_öc_¢mpöpkts
();

196 
¢mp_öc_¢mpouçkts
();

197 
¢mp_öc_¢mpöbadvîsi⁄s
();

198 
¢mp_öc_¢mpöbadcommunôy«mes
();

199 
¢mp_öc_¢mpöbadcommunôyu£s
();

200 
¢mp_öc_¢mpöa¢∑r£îrs
();

201 
¢mp_öc_¢mpötoobigs
();

202 
¢mp_öc_¢mpönosuch«mes
();

203 
¢mp_öc_¢mpöbadvÆues
();

204 
¢mp_öc_¢mpöªad⁄lys
();

205 
¢mp_öc_¢mpögíîrs
();

206 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

207 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

208 
¢mp_öc_¢mpögëªque°s
();

209 
¢mp_öc_¢mpögë√xts
();

210 
¢mp_öc_¢mpö£åeque°s
();

211 
¢mp_öc_¢mpögëª•⁄£s
();

212 
¢mp_öc_¢mpöå≠s
();

213 
¢mp_öc_¢mpouâoobigs
();

214 
¢mp_öc_¢mpouäosuch«mes
();

215 
¢mp_öc_¢mpoutbadvÆues
();

216 
¢mp_öc_¢mpoutgíîrs
();

217 
¢mp_öc_¢mpoutgëªque°s
();

218 
¢mp_öc_¢mpoutgë√xts
();

219 
¢mp_öc_¢mpout£åeque°s
();

220 
¢mp_öc_¢mpoutgëª•⁄£s
();

221 
¢mp_öc_¢mpouâøps
();

222 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

223 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

224 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

231 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

232 
	#¢mp_£t_sysobjid
(
oid
);

	)

233 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

234 
	#¢mp_öc_sysu±ime
()

	)

235 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

236 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

237 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

238 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

239 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

243 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

244 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

245 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

246 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

247 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

249 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

250 
	#¢mp_öc_iÊi°
()

	)

251 
	#¢mp_dec_iÊi°
()

	)

254 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

255 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_öc_ùöª˚ives
()

	)

259 
	#¢mp_öc_ùöhdªº‹s
()

	)

260 
	#¢mp_öc_ùöaddªº‹s
()

	)

261 
	#¢mp_öc_ùf‹wd©agøms
()

	)

262 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

263 
	#¢mp_öc_ùödisˇrds
()

	)

264 
	#¢mp_öc_ùödñivîs
()

	)

265 
	#¢mp_öc_ùouåeque°s
()

	)

266 
	#¢mp_öc_ùoutdisˇrds
()

	)

267 
	#¢mp_öc_ùouä‹ouãs
()

	)

268 
	#¢mp_öc_ùªasmªqds
()

	)

269 
	#¢mp_öc_ùªasmoks
()

	)

270 
	#¢mp_öc_ùªasmÁûs
()

	)

271 
	#¢mp_öc_ù‰agoks
()

	)

272 
	#¢mp_öc_ù‰agÁûs
()

	)

273 
	#¢mp_öc_ù‰ag¸óãs
()

	)

274 
	#¢mp_öc_ùroutögdisˇrds
()

	)

275 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

276 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

277 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

278 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_öc_icmpömsgs
()

	)

282 
	#¢mp_öc_icmpöîr‹s
()

	)

283 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

284 
	#¢mp_öc_icmpötimìxcds
()

	)

285 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

286 
	#¢mp_öc_icmpö§cquíchs
()

	)

287 
	#¢mp_öc_icmpöªdúe˘s
()

	)

288 
	#¢mp_öc_icmpöechos
()

	)

289 
	#¢mp_öc_icmpöech‹ïs
()

	)

290 
	#¢mp_öc_icmpötime°amps
()

	)

291 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

292 
	#¢mp_öc_icmpöaddrmasks
()

	)

293 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

294 
	#¢mp_öc_icmpoutmsgs
()

	)

295 
	#¢mp_öc_icmpouãº‹s
()

	)

296 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

297 
	#¢mp_öc_icmpouâimìxcds
()

	)

298 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

299 
	#¢mp_öc_icmpout§cquíchs
()

	)

300 
	#¢mp_öc_icmpouåedúe˘s
()

	)

301 
	#¢mp_öc_icmpouãchos
()

	)

302 
	#¢mp_öc_icmpouãch‹ïs
()

	)

303 
	#¢mp_öc_icmpouâime°amps
()

	)

304 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

305 
	#¢mp_öc_icmpouèddrmasks
()

	)

306 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

308 
	#¢mp_öc_t˝a˘ive›ís
()

	)

309 
	#¢mp_öc_t˝∑ssive›ís
()

	)

310 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

311 
	#¢mp_öc_t˝e°abª£ts
()

	)

312 
	#¢mp_öc_t˝ö£gs
()

	)

313 
	#¢mp_öc_t˝out£gs
()

	)

314 
	#¢mp_öc_t˝ªå™s£gs
()

	)

315 
	#¢mp_öc_t˝öîrs
()

	)

316 
	#¢mp_öc_t˝ouå°s
()

	)

319 
	#¢mp_öc_udpöd©agøms
()

	)

320 
	#¢mp_öc_ud≤›‹ts
()

	)

321 
	#¢mp_öc_udpöîr‹s
()

	)

322 
	#¢mp_öc_udpoutd©agøms
()

	)

323 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

324 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_öc_¢mpöpkts
()

	)

328 
	#¢mp_öc_¢mpouçkts
()

	)

329 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

330 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

331 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

332 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

333 
	#¢mp_öc_¢mpötoobigs
()

	)

334 
	#¢mp_öc_¢mpönosuch«mes
()

	)

335 
	#¢mp_öc_¢mpöbadvÆues
()

	)

336 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

337 
	#¢mp_öc_¢mpögíîrs
()

	)

338 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

339 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

340 
	#¢mp_öc_¢mpögëªque°s
()

	)

341 
	#¢mp_öc_¢mpögë√xts
()

	)

342 
	#¢mp_öc_¢mpö£åeque°s
()

	)

343 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

344 
	#¢mp_öc_¢mpöå≠s
()

	)

345 
	#¢mp_öc_¢mpouâoobigs
()

	)

346 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

347 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

348 
	#¢mp_öc_¢mpoutgíîrs
()

	)

349 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

350 
	#¢mp_öc_¢mpoutgë√xts
()

	)

351 
	#¢mp_öc_¢mpout£åeque°s
()

	)

352 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

353 
	#¢mp_öc_¢mpouâøps
()

	)

354 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

355 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

356 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

360 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (!0x80 | !0x40)

	)

50 
	#SNMP_ASN1_APPLIC
 (!0x80 | 0x40)

	)

51 
	#SNMP_ASN1_CONTXT
 ( 0x80 | !0x40)

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20)

	)

54 
	#SNMP_ASN1_PRIMIT
 (!0x20)

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
);

95 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

42 #i‡
LWIP_SNMP


44 #i‡
SNMP_PRIVATE_MIB


45 
	~"¥iv©e_mib.h
"

48 #ifde‡
__˝lu•lus


54 #i‚de‡
SNMP_IN_PORT


55 
	#SNMP_IN_PORT
 161

	)

59 #i‚de‡
SNMP_TRAP_PORT


60 
	#SNMP_TRAP_PORT
 162

	)

63 
	#SNMP_ES_NOERROR
 0

	)

64 
	#SNMP_ES_TOOBIG
 1

	)

65 
	#SNMP_ES_NOSUCHNAME
 2

	)

66 
	#SNMP_ES_BADVALUE
 3

	)

67 
	#SNMP_ES_READONLY
 4

	)

68 
	#SNMP_ES_GENERROR
 5

	)

70 
	#SNMP_GENTRAP_COLDSTART
 0

	)

71 
	#SNMP_GENTRAP_WARMSTART
 1

	)

72 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

73 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

75 
	s¢mp_v¨böd


78 
¢mp_v¨böd
 *
√xt
;

80 
¢mp_v¨böd
 *
¥ev
;

83 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

88 
u8_t
 
vÆue_ty≥
;

90 
u8_t
 
vÆue_Àn
;

92 *
vÆue
;

95 
u8_t
 
£qÀ∆í
;

97 
u8_t
 
ﬁíÀn
;

99 
u8_t
 
vÀ∆í
;

101 
u16_t
 
£qÀn
;

103 
u16_t
 
ﬁí
;

105 
u16_t
 
vÀn
;

108 
	s¢mp_v¨böd_roŸ


110 
¢mp_v¨böd
 *
hód
;

111 
¢mp_v¨böd
 *
èû
;

113 
u8_t
 
cou¡
;

115 
u8_t
 
£qÀ∆í
;

117 
u16_t
 
£qÀn
;

121 
	s¢mp_ª•_hódî_Àngths


124 
u8_t
 
îridxÀ∆í
;

126 
u8_t
 
îr°©À∆í
;

128 
u8_t
 
ridÀ∆í
;

130 
u8_t
 
pduÀ∆í
;

132 
u8_t
 
comÀ∆í
;

134 
u8_t
 
vîÀ∆í
;

136 
u8_t
 
£qÀ∆í
;

139 
u16_t
 
îridxÀn
;

141 
u16_t
 
îr°©Àn
;

143 
u16_t
 
ridÀn
;

145 
u16_t
 
pduÀn
;

147 
u16_t
 
comÀn
;

149 
u16_t
 
vîÀn
;

151 
u16_t
 
£qÀn
;

155 
	s¢mp_å≠_hódî_Àngths


158 
u8_t
 
t¶íÀn
;

160 
u8_t
 
°ΩÀ∆í
;

162 
u8_t
 
gå∂íÀn
;

164 
u8_t
 
ØddæíÀn
;

166 
u8_t
 
eidÀ∆í
;

168 
u8_t
 
pduÀ∆í
;

170 
u8_t
 
comÀ∆í
;

172 
u8_t
 
vîÀ∆í
;

174 
u8_t
 
£qÀ∆í
;

177 
u16_t
 
t¶í
;

179 
u16_t
 
°ΩÀn
;

181 
u16_t
 
gå∂í
;

183 
u16_t
 
Øddæí
;

185 
u16_t
 
eidÀn
;

187 
u16_t
 
pduÀn
;

189 
u16_t
 
comÀn
;

191 
u16_t
 
vîÀn
;

193 
u16_t
 
£qÀn
;

197 
	#SNMP_MSG_EMPTY
 0

	)

199 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

202 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

203 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

204 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

205 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

206 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

210 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

211 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

212 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

213 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

214 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

216 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

217 
	s¢mp_msg_p°©


220 
udp_pcb
 *
pcb
;

222 
ù_addr
 
sù
;

224 
u16_t
 
•
;

226 
u8_t
 
π
;

228 
s32_t
 
rid
;

230 
s32_t
 
îr‹_°©us
;

232 
s32_t
 
îr‹_ödex
;

234 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

236 
u8_t
 
com_°æí
;

238 
u8_t
 
°©e
;

240 
mib_exã∫Æ_node
 *
ext_mib_node
;

241 
¢mp_«me_±r
 
ext_«me_±r
;

242 
obj_def
 
ext_obje˘_def
;

243 
¢mp_obj_id
 
ext_oid
;

245 
u8_t
 
vb_idx
;

247 
¢mp_v¨böd
 *
vb_±r
;

249 
¢mp_v¨böd_roŸ
 
övb
;

251 
¢mp_v¨böd_roŸ
 
outvb
;

253 
¢mp_ª•_hódî_Àngths
 
rhl
;

256 
	s¢mp_msg_å≠


259 
udp_pcb
 *
pcb
;

261 
ù_addr
 
dù
;

264 
¢mp_obj_id
 *
íãΩri£
;

266 
u8_t
 
sù_øw
[4];

268 
u32_t
 
gí_å≠
;

270 
u32_t
 
•c_å≠
;

272 
u32_t
 
ts
;

274 
¢mp_v¨böd_roŸ
 
outvb
;

276 
¢mp_å≠_hódî_Àngths
 
thl
;

280 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

282 c⁄° 
¢mp_publiccommunôy
[7];

284 
¢mp_msg_å≠
 
å≠_msg
;

287 
¢mp_öô
();

288 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

289 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
);

292 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

293 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

294 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

295 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

300 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

301 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

302 
¢mp_cﬁd°¨t_å≠
();

303 
¢mp_authÁû_å≠
();

305 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


47 
	~"¥iv©e_mib.h
"

50 #ifde‡
__˝lu•lus


55 
	#MIB_OBJECT_NONE
 0

	)

56 
	#MIB_OBJECT_SCALAR
 1

	)

57 
	#MIB_OBJECT_TAB
 2

	)

60 
	#MIB_OBJECT_READ_ONLY
 0

	)

61 
	#MIB_OBJECT_READ_WRITE
 1

	)

62 
	#MIB_OBJECT_WRITE_ONLY
 2

	)

63 
	#MIB_OBJECT_NOT_ACCESSIBLE
 3

	)

66 
	sobj_def


69 
u8_t
 
ö°™˚
;

71 
u8_t
 
ac˚ss
;

73 
u8_t
 
a¢_ty≥
;

75 
u16_t
 
v_Àn
;

77 
u8_t
 
id_ö°_Àn
;

79 
s32_t
 *
id_ö°_±r
;

82 
	s¢mp_«me_±r


84 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

89 
	#MIB_NODE_SC
 0x01

	)

91 
	#MIB_NODE_AR
 0x02

	)

93 
	#MIB_NODE_RA
 0x03

	)

95 
	#MIB_NODE_LR
 0x04

	)

97 
	#MIB_NODE_EX
 0x05

	)

100 
	smib_node


103 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

106 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

108 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 c⁄° 
u8_t
 
node_ty≥
;

114 c⁄° 
u16_t
 
maxÀngth
;

118 
mib_node
 
	tmib_sˇœr_node
;

122 
	smib_¨øy_node


125 (* c⁄° 
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

126 (* c⁄° 
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

127 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

128 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

130 c⁄° 
u8_t
 
node_ty≥
;

131 c⁄° 
u16_t
 
maxÀngth
;

134 c⁄° 
s32_t
 *
objid
;

135 
mib_node
* c⁄° *
≈å
;

140 
	smib_øm_¨øy_node


143 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

144 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

145 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

146 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

148 
u8_t
 
node_ty≥
;

149 
u16_t
 
maxÀngth
;

152 
s32_t
 *
objid
;

153 
mib_node
 **
≈å
;

156 
	smib_li°_node


158 
mib_li°_node
 *
¥ev
;

159 
mib_li°_node
 *
√xt
;

160 
s32_t
 
objid
;

161 
mib_node
 *
≈å
;

166 
	smib_li°_roŸnode


169 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

170 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

171 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

172 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

174 
u8_t
 
node_ty≥
;

175 
u16_t
 
maxÀngth
;

178 
mib_li°_node
 *
hód
;

179 
mib_li°_node
 *
èû
;

181 
u16_t
 
cou¡
;

186 
	smib_exã∫Æ_node


189 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

190 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

191 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

192 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

194 
u8_t
 
node_ty≥
;

195 
u16_t
 
maxÀngth
;

200 * 
addr_öf
;

202 
u8_t
 
åì_Àvñs
;

204 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

207 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

208 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

211 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

212 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

213 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

214 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

216 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

217 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

218 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

219 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

223 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

224 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

225 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

229 c⁄° 
mib_¨øy_node
 
öã∫ë
;

232 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

233 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

234 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

235 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

237 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
);

238 
¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
);

239 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

240 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

242 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

243 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

244 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

245 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

247 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

248 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

249 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

251 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

252 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

253 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

254 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

256 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

65 #i‚de‡
sockÀn_t


66 
	#sockÀn_t
 
u32_t


	)

70 
	#SOCK_STREAM
 1

	)

71 
	#SOCK_DGRAM
 2

	)

72 
	#SOCK_RAW
 3

	)

77 
	#SO_DEBUG
 0x0001

	)

78 
	#SO_ACCEPTCONN
 0x0002

	)

79 
	#SO_REUSEADDR
 0x0004

	)

80 
	#SO_KEEPALIVE
 0x0008

	)

81 
	#SO_DONTROUTE
 0x0010

	)

82 
	#SO_BROADCAST
 0x0020

	)

83 
	#SO_USELOOPBACK
 0x0040

	)

84 
	#SO_LINGER
 0x0080

	)

85 
	#SO_OOBINLINE
 0x0100

	)

86 
	#SO_REUSEPORT
 0x0200

	)

88 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

93 
	#SO_SNDBUF
 0x1001

	)

94 
	#SO_RCVBUF
 0x1002

	)

95 
	#SO_SNDLOWAT
 0x1003

	)

96 
	#SO_RCVLOWAT
 0x1004

	)

97 
	#SO_SNDTIMEO
 0x1005

	)

98 
	#SO_RCVTIMEO
 0x1006

	)

99 
	#SO_ERROR
 0x1007

	)

100 
	#SO_TYPE
 0x1008

	)

101 
	#SO_CONTIMEO
 0x1009

	)

102 
	#SO_NO_CHECK
 0x100®

	)

108 
	slögî
 {

109 
l_⁄off
;

110 
l_lögî
;

116 
	#SOL_SOCKET
 0xff‡

	)

119 
	#AF_UNSPEC
 0

	)

120 
	#AF_INET
 2

	)

121 
	#PF_INET
 
AF_INET


	)

122 
	#PF_UNSPEC
 
AF_UNSPEC


	)

124 
	#IPPROTO_IP
 0

	)

125 
	#IPPROTO_TCP
 6

	)

126 
	#IPPROTO_UDP
 17

	)

127 
	#IPPROTO_UDPLITE
 136

	)

130 
	#MSG_PEEK
 0x01

	)

131 
	#MSG_WAITALL
 0x02

	)

132 
	#MSG_OOB
 0x04

	)

133 
	#MSG_DONTWAIT
 0x08

	)

134 
	#MSG_MORE
 0x10

	)

140 
	#IP_TOS
 1

	)

141 
	#IP_TTL
 2

	)

143 #i‡
LWIP_TCP


147 
	#TCP_NODELAY
 0x01

	)

148 
	#TCP_KEEPALIVE
 0x02

	)

149 
	#TCP_KEEPIDLE
 0x03

	)

150 
	#TCP_KEEPINTVL
 0x04

	)

151 
	#TCP_KEEPCNT
 0x05

	)

154 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


158 
	#UDPLITE_SEND_CSCOV
 0x01

	)

159 
	#UDPLITE_RECV_CSCOV
 0x02

	)

163 #i‡
LWIP_IGMP


167 
	#IP_ADD_MEMBERSHIP
 3

	)

168 
	#IP_DROP_MEMBERSHIP
 4

	)

169 
	#IP_MULTICAST_TTL
 5

	)

170 
	#IP_MULTICAST_IF
 6

	)

171 
	#IP_MULTICAST_LOOP
 7

	)

173 
	sù_mªq
 {

174 
ö_addr
 
imr_mu…üddr
;

175 
ö_addr
 
imr_öãrÁ˚
;

176 } 
	tù_mªq
;

195 
	#IPTOS_TOS_MASK
 0x1E

	)

196 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

197 
	#IPTOS_LOWDELAY
 0x10

	)

198 
	#IPTOS_THROUGHPUT
 0x08

	)

199 
	#IPTOS_RELIABILITY
 0x04

	)

200 
	#IPTOS_LOWCOST
 0x02

	)

201 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

212 
	#IPTOS_PREC_MASK
 0xe0

	)

213 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

214 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

215 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

216 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

217 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

218 
	#IPTOS_PREC_FLASH
 0x60

	)

219 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

220 
	#IPTOS_PREC_PRIORITY
 0x20

	)

221 
	#IPTOS_PREC_ROUTINE
 0x00

	)

234 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

235 
	#IOCPARM_MASK
 0x7fU

	)

236 
	#IOC_VOID
 0x20000000UL

	)

237 
	#IOC_OUT
 0x40000000UL

	)

238 
	#IOC_IN
 0x80000000UL

	)

239 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

242 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

244 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

246 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

249 #i‚de‡
FIONREAD


250 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

252 #i‚de‡
FIONBIO


253 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

257 #i‚de‡
SIOCSHIWAT


258 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

259 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

260 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

261 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

262 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

266 #i‚de‡
O_NONBLOCK


267 
	#O_NONBLOCK
 04000U

	)

271 #i‚de‡
FD_SET


272 #unde‡
FD_SETSIZE


274 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

275 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

276 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

277 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

278 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

280 
	sfd_£t
 {

281 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

282 } 
	tfd_£t
;

288 #i‚de‡
LWIP_TIMEVAL_PRIVATE


289 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

292 #i‡
LWIP_TIMEVAL_PRIVATE


293 
	stimevÆ
 {

294 
tv_£c
;

295 
tv_u£c
;

299 
lwù_sockë_öô
();

301 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

302 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

303 
lwù_shutdown
(
s
, 
how
);

304 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

305 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

306 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

307 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

308 
lwù_˛o£
(
s
);

309 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

310 
lwù_li°í
(
s
, 
backlog
);

311 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

312 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

313 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

314 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

315 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

316 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

317 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

318 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

319 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

320 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

321 
timevÆ
 *
timeout
);

322 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

324 #i‡
LWIP_COMPAT_SOCKETS


325 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

326 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

327 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

328 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

329 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

330 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

331 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

332 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

333 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

334 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

335 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

336 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

337 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

338 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

339 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

340 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

341 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

343 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


344 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

345 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

346 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

351 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mÀ√º
;

75 
STAT_COUNTER
 
	mchkîr
;

76 
STAT_COUNTER
 
	mv1_rxed
;

77 
STAT_COUNTER
 
	mjoö_£¡
;

78 
STAT_COUNTER
 
	mÀave_£¡
;

79 
STAT_COUNTER
 
	muniˇ°_quîy
;

80 
STAT_COUNTER
 
	mªp‹t_£¡
;

81 
STAT_COUNTER
 
	mªp‹t_rxed
;

82 
STAT_COUNTER
 
	mgroup_quîy_rxed
;

85 
	s°©s_mem
 {

86 
mem_size_t
 
	mavaû
;

87 
mem_size_t
 
	mu£d
;

88 
mem_size_t
 
	mmax
;

89 
STAT_COUNTER
 
	mîr
;

90 
STAT_COUNTER
 
	mûÀgÆ
;

93 
	s°©s_sy£Àm
 {

94 
STAT_COUNTER
 
	mu£d
;

95 
STAT_COUNTER
 
	mmax
;

96 
STAT_COUNTER
 
	mîr
;

99 
	s°©s_sys
 {

100 
°©s_sy£Àm
 
	m£m
;

101 
°©s_sy£Àm
 
	mmbox
;

104 
	s°©s_
 {

105 #i‡
LINK_STATS


106 
°©s_¥Ÿo
 
	mlök
;

108 #i‡
ETHARP_STATS


109 
°©s_¥Ÿo
 
	mëh¨p
;

111 #i‡
IPFRAG_STATS


112 
°©s_¥Ÿo
 
	mù_‰ag
;

114 #i‡
IP_STATS


115 
°©s_¥Ÿo
 
	mù
;

117 #i‡
ICMP_STATS


118 
°©s_¥Ÿo
 
	micmp
;

120 #i‡
IGMP_STATS


121 
°©s_igmp
 
	migmp
;

123 #i‡
UDP_STATS


124 
°©s_¥Ÿo
 
	mudp
;

126 #i‡
TCP_STATS


127 
°©s_¥Ÿo
 
	mt˝
;

129 #i‡
MEM_STATS


130 
°©s_mem
 
	mmem
;

132 #i‡
MEMP_STATS


133 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

135 #i‡
SYS_STATS


136 
°©s_sys
 
	msys
;

140 
°©s_
 
lwù_°©s
;

142 
	#°©s_öô
(Ë

	)

144 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

145 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

147 
	#°©s_öô
()

	)

148 
	#STATS_INC
(
x
)

	)

149 
	#STATS_DEC
(
x
)

	)

152 #i‡
TCP_STATS


153 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

154 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

156 
	#TCP_STATS_INC
(
x
)

	)

157 
	#TCP_STATS_DISPLAY
()

	)

160 #i‡
UDP_STATS


161 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

162 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

164 
	#UDP_STATS_INC
(
x
)

	)

165 
	#UDP_STATS_DISPLAY
()

	)

168 #i‡
ICMP_STATS


169 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

170 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

172 
	#ICMP_STATS_INC
(
x
)

	)

173 
	#ICMP_STATS_DISPLAY
()

	)

176 #i‡
IGMP_STATS


177 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

178 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

180 
	#IGMP_STATS_INC
(
x
)

	)

181 
	#IGMP_STATS_DISPLAY
()

	)

184 #i‡
IP_STATS


185 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

186 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

188 
	#IP_STATS_INC
(
x
)

	)

189 
	#IP_STATS_DISPLAY
()

	)

192 #i‡
IPFRAG_STATS


193 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

194 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

196 
	#IPFRAG_STATS_INC
(
x
)

	)

197 
	#IPFRAG_STATS_DISPLAY
()

	)

200 #i‡
ETHARP_STATS


201 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

202 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

204 
	#ETHARP_STATS_INC
(
x
)

	)

205 
	#ETHARP_STATS_DISPLAY
()

	)

208 #i‡
LINK_STATS


209 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

210 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

212 
	#LINK_STATS_INC
(
x
)

	)

213 
	#LINK_STATS_DISPLAY
()

	)

216 #i‡
MEM_STATS


217 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

218 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

219 
	#MEM_STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.
mem
.
u£d
 += y; \

220 i‡(
lwù_°©s
.
mem
.
max
 <Üwù_°©s.mem.
u£d
) { \

221 
lwù_°©s
.
mem
.
max
 =Üwù_°©s.mem.
u£d
; \

223 } 0)

	)

224 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

225 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

227 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

228 
	#MEM_STATS_INC
(
x
)

	)

229 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

230 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

231 
	#MEM_STATS_DISPLAY
()

	)

234 #i‡
MEMP_STATS


235 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

236 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

237 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

238 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ëdÿ{ ++
lwù_°©s
.
memp
[i].
u£d
; \

239 i‡(
lwù_°©s
.
memp
[
i
].
max
 <Üwù_°©s.memp[i].
u£d
) { \

240 
lwù_°©s
.
memp
[
i
].
max
 =Üwù_°©s.memp[i].
u£d
; \

242 } 0)

	)

243 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

245 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

246 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

247 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

248 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

249 
	#MEMP_STATS_DISPLAY
(
i
)

	)

252 #i‡
SYS_STATS


253 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

254 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

255 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

257 
	#SYS_STATS_INC
(
x
)

	)

258 
	#SYS_STATS_DEC
(
x
)

	)

259 
	#SYS_STATS_DISPLAY
()

	)

263 #i‡
LWIP_STATS_DISPLAY


264 
°©s_di•œy
();

265 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

266 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

267 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

268 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

269 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

271 
	#°©s_di•œy
()

	)

272 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

273 
	#°©s_di•œy_igmp
(
igmp
)

	)

274 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

275 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

276 
	#°©s_di•œy_sys
(
sys
)

	)

279 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_mbox_t
;

47 
	ssys_timeo
 {
u8_t
 
	mdummy
;};

49 
	#sys_öô
()

	)

50 
	#sys_timeout
(
m
,
h
,
a
)

	)

51 
	#sys_u¡imeout
(
m
,
a
)

	)

52 
	#sys_£m_√w
(
c
Ë
	)
c

53 
	#sys_£m_sig«l
(
s
)

	)

54 
	#sys_£m_waô
(
s
)

	)

55 
	#sys_£m_waô_timeout
(
s
,
t
)

	)

56 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

57 
	#sys_£m_‰ì
(
s
)

	)

58 
	#sys_mbox_√w
(
s
Ë0

	)

59 
	#sys_mbox_„tch
(
m
,
d
)

	)

60 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

61 
	#sys_mbox_po°
(
m
,
d
)

	)

62 
	#sys_mbox_åypo°
(
m
,
d
)

	)

63 
	#sys_mbox_‰ì
(
m
)

	)

65 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

70 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

75 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

77 
	~"lwù/îr.h
"

78 
	~"¨ch/sys_¨ch.h
"

80 (* 
	tsys_timeout_h™dÀr
)(*
	t¨g
);

82 
	ssys_timeo
 {

83 
sys_timeo
 *
√xt
;

84 
u32_t
 
time
;

85 
sys_timeout_h™dÀr
 
h
;

86 *
¨g
;

89 
	ssys_timeouts
 {

90 
sys_timeo
 *
√xt
;

94 
	`sys_öô
();

105 
	`sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

106 
	`sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

107 
sys_timeouts
 *
	`sys_¨ch_timeouts
();

110 
sys_£m_t
 
	`sys_£m_√w
(
u8_t
 
cou¡
);

111 
	`sys_£m_sig«l
(
sys_£m_t
 
£m
);

112 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, u32_à
timeout
);

113 
	`sys_£m_‰ì
(
sys_£m_t
 
£m
);

114 
	`sys_£m_waô
(
sys_£m_t
 
£m
);

115 
	`sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
);

118 #i‚de‡
sys_m¶ìp


119 
	`sys_m¶ìp
(
u32_t
 
ms
);

121 #i‚de‡
sys_jiffõs


122 
u32_t
 
	`sys_jiffõs
();

126 
sys_mbox_t
 
	`sys_mbox_√w
(
size
);

127 
	`sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
);

128 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
);

129 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, u32_à
timeout
);

130 #i‚de‡
sys_¨ch_mbox_åy„tch


131 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
);

134 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

135 
	`sys_mbox_‰ì
(
sys_mbox_t
 
mbox
);

136 
	`sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
);

139 
sys_thªad_t
 
	`sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *¨g, 
°acksize
, 
¥io
);

144 
u32_t
 
	`sys_now
();

151 #i‚de‡
SYS_ARCH_PROTECT


157 #i‡
SYS_LIGHTWEIGHT_PROT


164 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

174 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

183 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

184 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

185 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

189 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

190 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

191 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

202 #i‚de‡
SYS_ARCH_INC


203 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

204 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

205 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

206 
v¨
 +
vÆ
; \

207 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

208 } 0)

	)

211 #i‚de‡
SYS_ARCH_DEC


212 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

213 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

214 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

215 
v¨
 -
vÆ
; \

216 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

217 } 0)

	)

220 #i‚de‡
SYS_ARCH_GET


221 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

222 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

223 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

224 
ªt
 = 
v¨
; \

225 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

226 } 0)

	)

229 #i‚de‡
SYS_ARCH_SET


230 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

231 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

232 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

233 
v¨
 = 
vÆ
; \

234 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

235 } 0)

	)

239 #ifde‡
__˝lu•lus


240 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


50 
t˝_pcb
;

55 
	#t˝_öô
(Ë

	)

56 
t˝_tmr
 ();

60 
t˝_pcb
 * 
t˝_√w
 ();

61 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

63 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

64 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
,

65 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,

66 
îr_t
 
îr
));

67 
t˝_ªcv
 (
t˝_pcb
 *
pcb
,

68 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
,

69 
pbuf
 *
p
, 
îr_t
 
îr
));

70 
t˝_£¡
 (
t˝_pcb
 *
pcb
,

71 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
,

72 
u16_t
 
Àn
));

73 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
,

74 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
),

75 
u8_t
 
öãrvÆ
);

76 
t˝_îr
 (
t˝_pcb
 *
pcb
,

77 (* 
îr
)(*
¨g
, 
îr_t
Érr));

79 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

80 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

82 #i‡
TCP_LISTEN_BACKLOG


83 
	#t˝_ac˚±ed
(
pcb
Ë(((
t˝_pcb_li°í
 *)’cb))->
ac˚±s_≥ndög
--)

	)

85 
	#t˝_ac˚±ed
(
pcb
)

	)

88 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

89 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

90 
u16_t
 
p‹t
);

91 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

92 
u16_t
 
p‹t
, 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
,

93 
t˝_pcb
 *
çcb
,

94 
îr_t
 
îr
));

96 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

97 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

99 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

100 
	#t˝_ab‹t
(
pcb
Ë
	`t˝_ab™d⁄
(’cb), 1)

	)

101 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

104 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

105 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

107 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

108 
u8_t
 
≠iÊags
);

110 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

112 
	#TCP_PRIO_MIN
 1

	)

113 
	#TCP_PRIO_NORMAL
 64

	)

114 
	#TCP_PRIO_MAX
 127

	)

118 
t˝_¶owtmr
 ();

119 
t˝_Á°tmr
 ();

123 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

125 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

126 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

127 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

128 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

138 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

139 ((
çcb
)->
Êags
 & 
TF_NODELAY
) || \

140 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

141 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) \

142 Ë? 1 : 0)

	)

143 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

146 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

147 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

148 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

149 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

152 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

154 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

155 
	#TCP_FIN
 0x01U

	)

156 
	#TCP_SYN
 0x02U

	)

157 
	#TCP_RST
 0x04U

	)

158 
	#TCP_PSH
 0x08U

	)

159 
	#TCP_ACK
 0x10U

	)

160 
	#TCP_URG
 0x20U

	)

161 
	#TCP_ECE
 0x40U

	)

162 
	#TCP_CWR
 0x80U

	)

164 
	#TCP_FLAGS
 0x3fU

	)

167 
	#TCP_HLEN
 20

	)

169 #i‚de‡
TCP_TMR_INTERVAL


170 
	#TCP_TMR_INTERVAL
 250

	)

173 #i‚de‡
TCP_FAST_INTERVAL


174 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

177 #i‚de‡
TCP_SLOW_INTERVAL


178 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

181 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

182 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

184 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

186 #i‚de‡
TCP_MSL


187 
	#TCP_MSL
 60000UL

	)

191 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


192 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

195 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


196 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

199 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


200 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

203 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

208 #ifde‡
PACK_STRUCT_USE_INCLUDES


209 
	~"¨ch/bp°ru˘.h
"

211 
PACK_STRUCT_BEGIN


212 
	st˝_hdr
 {

213 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

214 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

215 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

216 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

217 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

218 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

219 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

220 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

221 } 
PACK_STRUCT_STRUCT
;

222 
PACK_STRUCT_END


223 #ifde‡
PACK_STRUCT_USE_INCLUDES


224 
	~"¨ch/ï°ru˘.h
"

227 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

228 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

229 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

231 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

232 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

233 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË& ~
TCP_FLAGS
Ë| (Êags))

	)

234 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (Êags))

	)

235 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

237 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& 
TCP_FIN
 || \

238 
	`TCPH_FLAGS
((
£g
)->
t˝hdr
Ë& 
TCP_SYN
)? 1: 0))

	)

240 
	et˝_°©e
 {

241 
CLOSED
 = 0,

242 
LISTEN
 = 1,

243 
SYN_SENT
 = 2,

244 
SYN_RCVD
 = 3,

245 
ESTABLISHED
 = 4,

246 
FIN_WAIT_1
 = 5,

247 
FIN_WAIT_2
 = 6,

248 
CLOSE_WAIT
 = 7,

249 
CLOSING
 = 8,

250 
LAST_ACK
 = 9,

251 
TIME_WAIT
 = 10

256 
	#TF_RESET
 (
u8_t
)0x08U

	)

257 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

258 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

261 #i‡
LWIP_CALLBACK_API


269 
	#DEF_ACCEPT_CALLBACK
 
	`îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

	)

271 
	#DEF_ACCEPT_CALLBACK


	)

277 
	#TCP_PCB_COMMON
(
ty≥
) \

278 
ty≥
 *
√xt
; \

279 
t˝_°©e
 
°©e
; \

280 
u8_t
 
¥io
; \

281 *
ˇŒback_¨g
; \

283 
u16_t
 
loˇl_p‹t
; \

285 
DEF_ACCEPT_CALLBACK


	)

289 
	st˝_pcb
 {

291 
IP_PCB
;

293 
TCP_PCB_COMMON
(
t˝_pcb
);

296 
u16_t
 
ªmŸe_p‹t
;

298 
u8_t
 
Êags
;

299 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

300 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

301 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

302 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

303 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

304 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

305 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

310 
u32_t
 
rcv_nxt
;

311 
u16_t
 
rcv_wnd
;

312 
u16_t
 
rcv_™n_wnd
;

313 
u32_t
 
rcv_™n_right_edge
;

316 
u32_t
 
tmr
;

317 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

320 
s16_t
 
πime
;

322 
u16_t
 
mss
;

325 
u32_t
 
πã°
;

326 
u32_t
 
π£q
;

327 
s16_t
 
ß
, 
sv
;

329 
s16_t
 
πo
;

330 
u8_t
 
ƒtx
;

333 
u32_t
 
œ°ack
;

334 
u8_t
 
du∑cks
;

337 
u16_t
 
cwnd
;

338 
u16_t
 
s°hªsh
;

341 
u32_t
 
¢d_nxt
;

342 
u16_t
 
¢d_wnd
;

343 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

345 
u32_t
 
¢d_lbb
;

347 
u16_t
 
acked
;

349 
u16_t
 
¢d_buf
;

350 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffff-3)

	)

351 
u16_t
 
¢d_queuñí
;

355 
t˝_£g
 *
un£¡
;

356 
t˝_£g
 *
u«cked
;

357 #i‡
TCP_QUEUE_OOSEQ


358 
t˝_£g
 *
oo£q
;

361 
pbuf
 *
ªfu£d_d©a
;

363 #i‡
LWIP_CALLBACK_API


370 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
•a˚
);

379 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

387 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
pcb
,Éº_à
îr
);

396 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
pcb
);

406 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

409 #i‡
LWIP_TCP_TIMESTAMPS


410 
u32_t
 
ts_œ°ack£¡
;

411 
u32_t
 
ts_ª˚¡
;

415 
u32_t
 
kìp_idÀ
;

416 #i‡
LWIP_TCP_KEEPALIVE


417 
u32_t
 
kìp_ötvl
;

418 
u32_t
 
kìp_˙t
;

422 
u32_t
 
≥rsi°_˙t
;

424 
u8_t
 
≥rsi°_backoff
;

427 
u8_t
 
kìp_˙t_£¡
;

430 
	st˝_pcb_li°í
 {

432 
IP_PCB
;

434 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

436 #i‡
TCP_LISTEN_BACKLOG


437 
u8_t
 
backlog
;

438 
u8_t
 
ac˚±s_≥ndög
;

442 #i‡
LWIP_EVENT_API


444 
	elwù_evít
 {

445 
LWIP_EVENT_ACCEPT
,

446 
LWIP_EVENT_SENT
,

447 
LWIP_EVENT_RECV
,

448 
LWIP_EVENT_CONNECTED
,

449 
LWIP_EVENT_POLL
,

450 
LWIP_EVENT_ERR


453 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

454 
lwù_evít
,

455 
pbuf
 *
p
,

456 
u16_t
 
size
,

457 
îr_t
 
îr
);

459 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

460 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

461 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

462 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

463 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

464 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

465 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

466 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

467 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

468 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

469 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

470 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

473 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

475 if((
pcb
)->
ac˚±
 !
NULL
) \

476 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

477 (
ªt
Ë
ERR_OK
; \

478 } 0)

	)

480 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

482 if((
pcb
)->
£¡
 !
NULL
) \

483 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

484 (
ªt
Ë
ERR_OK
; \

485 } 0)

	)

487 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

489 if((
pcb
)->
ªcv
 !
NULL
) { \

490 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
)); \

492 (
ªt
Ë
ERR_OK
; \

493 i‡(
p
 !
NULL
) \

494 
	`pbuf_‰ì
(
p
); \

496 } 0)

	)

498 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

500 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

501 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

502 (
ªt
Ë
ERR_OK
; \

503 } 0)

	)

505 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

507 if((
pcb
)->
pﬁl
 !
NULL
) \

508 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

509 (
ªt
Ë
ERR_OK
; \

510 } 0)

	)

512 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

514 if((
îrf
Ë!
NULL
) \

515 (
îrf
)((
¨g
),(
îr
)); \

516 } 0)

	)

521 
	st˝_£g
 {

522 
t˝_£g
 *
√xt
;

523 
pbuf
 *
p
;

524 *
d©≠å
;

525 
u16_t
 
Àn
;

526 
u8_t
 
Êags
;

527 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

528 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

529 
t˝_hdr
 *
t˝hdr
;

532 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

533 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

534 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

537 
	#TCP_BUILD_MSS_OPTION
(
x
Ë(xË
	`ht⁄l
(((
u32_t
)2 << 24) | \

538 ((
u32_t
)4 << 16) | \

539 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

540 (
TCP_MSS
 & 255))

	)

543 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

544 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

545 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

547 
u8_t
 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

548 
u8_t
 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

549 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

551 
	#t˝_ack
(
pcb
) \

553 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

554 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

555 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

556 
	`t˝_ouçut
(
pcb
); \

559 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

561 } 0)

	)

563 
	#t˝_ack_now
(
pcb
) \

565 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

566 
	`t˝_ouçut
(
pcb
); \

567 } 0)

	)

569 
îr_t
 
t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

570 
îr_t
 
t˝_íqueue
(
t˝_pcb
 *
pcb
, *
d©≠å
, 
u16_t
 
Àn
,

571 
u8_t
 
Êags
, u8_à
≠iÊags
, u8_à
›tÊags
);

573 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

575 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

576 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

577 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

579 
u32_t
 
t˝_√xt_iss
();

581 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

582 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

584 #i‡
TCP_CALCULATE_EFF_SEND_MSS


585 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr
 *
addr
);

588 
t˝_pcb
 *
t˝_öput_pcb
;

589 
u32_t
 
t˝_ticks
;

591 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


592 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

593 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

594 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

595 
t˝_debug_¥öt_pcbs
();

596 
s16_t
 
t˝_pcbs_ß√
();

598 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

599 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

600 
	#t˝_debug_¥öt_°©e
(
s
)

	)

601 
	#t˝_debug_¥öt_pcbs
()

	)

602 
	#t˝_pcbs_ß√
(Ë1

	)

605 #i‡
NO_SYS


606 
	#t˝_timî_√eded
()

	)

608 
t˝_timî_√eded
();

612 
	ut˝_li°í_pcbs_t
 {

613 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

614 
t˝_pcb
 *
	gpcbs
;

616 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

617 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

620 
t˝_pcb
 *
t˝_tw_pcbs
;

622 
t˝_pcb
 *
t˝_tmp_pcb
;

634 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

635 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", 
≈cb
,Çpcb->
loˇl_p‹t
)); \

636 
t˝_tmp_pcb
 = *
pcbs
; \

637 
t˝_tmp_pcb
 !
NULL
; \

638 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

639 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !
≈cb
); \

641 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", 
≈cb
->
°©e
 !
CLOSED
); \

642 
≈cb
->
√xt
 = *
pcbs
; \

643 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", 
≈cb
->
√xt
 !=Çpcb); \

644 *(
pcbs
Ë
≈cb
; \

645 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

646 
	`t˝_timî_√eded
(); \

647 } 0)

	)

648 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

649 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *
pcbs
 !
NULL
); \

650 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

651 if(*
pcbs
 =
≈cb
) { \

652 *
pcbs
 = (*pcbs)->
√xt
; \

653 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

654 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

655 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

659 
≈cb
->
√xt
 = 
NULL
; \

660 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

661 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

662 } 0)

	)

666 
	#TCP_REG
(
pcbs
, 
≈cb
) \

668 
≈cb
->
√xt
 = *
pcbs
; \

669 *(
pcbs
Ë
≈cb
; \

670 
	`t˝_timî_√eded
(); \

671 } 0)

	)

673 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

675 if(*(
pcbs
Ë=
≈cb
) { \

676 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

679 
t˝_tmp_pcb
 = *
pcbs
; \

680 
t˝_tmp_pcb
 !
NULL
; \

681 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

682 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

683 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

688 
≈cb
->
√xt
 = 
NULL
; \

689 } 0)

	)

693 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/√tif.h
"

46 #ifde‡
__˝lu•lus


50 #i‡
LWIP_TCPIP_CORE_LOCKING


52 
sys_£m_t
 
lock_t˝ù_c‹e
;

53 
	#LOCK_TCPIP_CORE
(Ë
	`sys_£m_waô
(
lock_t˝ù_c‹e
)

	)

54 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_£m_sig«l
(
lock_t˝ù_c‹e
)

	)

55 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

56 
	#TCPIP_APIMSG_ACK
(
m
)

	)

57 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

58 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

60 
	#LOCK_TCPIP_CORE
()

	)

61 
	#UNLOCK_TCPIP_CORE
()

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
c⁄n
->
›_com∂ëed
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
£m
)

	)

68 
t˝ù_öô
((* 
t˝ù_öô_d⁄e
)(*), *
¨g
);

70 #i‡
LWIP_NETCONN


71 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

72 #i‡
LWIP_TCPIP_CORE_LOCKING


73 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

77 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

79 #i‡
LWIP_NETIF_API


80 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

81 #i‡
LWIP_TCPIP_CORE_LOCKING


82 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

86 
îr_t
 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
);

87 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

90 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

91 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

93 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

94 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

96 
	et˝ù_msg_ty≥
 {

97 #i‡
LWIP_NETCONN


98 
	gTCPIP_MSG_API
,

100 
	gTCPIP_MSG_INPKT
,

101 #i‡
LWIP_NETIF_API


102 
	gTCPIP_MSG_NETIFAPI
,

104 
	gTCPIP_MSG_CALLBACK
,

105 
	gTCPIP_MSG_TIMEOUT
,

106 
	gTCPIP_MSG_UNTIMEOUT


109 
	st˝ù_msg
 {

110 
t˝ù_msg_ty≥
 
	gty≥
;

111 
sys_£m_t
 *
	g£m
;

113 #i‡
LWIP_NETCONN


114 
≠i_msg
 *
	g≠imsg
;

116 #i‡
LWIP_NETIF_API


117 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

120 
pbuf
 *
	gp
;

121 
√tif
 *
	g√tif
;

122 } 
	göp
;

124 (*
	gf
)(*
	g˘x
);

125 *
	g˘x
;

126 } 
	gcb
;

128 
u32_t
 
	gm£cs
;

129 
sys_timeout_h™dÀr
 
	gh
;

130 *
	g¨g
;

131 } 
	gtmo
;

132 } 
	gmsg
;

135 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

70 
	sudp_pcb
 {

72 
IP_PCB
;

76 
udp_pcb
 *
√xt
;

78 
u8_t
 
Êags
;

80 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

82 #i‡
LWIP_IGMP


84 
ù_addr
 
mu…iˇ°_ù
;

87 #i‡
LWIP_UDPLITE


89 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

103 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

104 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

106 *
ªcv_¨g
;

109 
udp_pcb
 *
udp_pcbs
;

113 
udp_pcb
 * 
udp_√w
 ();

114 
udp_ªmove
 (
udp_pcb
 *
pcb
);

115 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

116 
u16_t
 
p‹t
);

117 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

118 
u16_t
 
p‹t
);

119 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

120 
udp_ªcv
 (
udp_pcb
 *
pcb
,

121 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
,

122 
pbuf
 *
p
,

123 
ù_addr
 *
addr
,

124 
u16_t
 
p‹t
),

125 *
ªcv_¨g
);

126 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif);

127 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

128 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

130 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

131 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

134 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

136 
	#udp_öô
(Ë

	)

138 #i‡
UDP_DEBUG


139 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

141 
	#udp_debug_¥öt
(
udphdr
)

	)

144 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
ETH_PAD_SIZE


52 
	#ETH_PAD_SIZE
 0

	)

55 #i‚de‡
ETHARP_HWADDR_LEN


56 
	#ETHARP_HWADDR_LEN
 6

	)

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sëh_addr
 {

64 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sëh_hdr
 {

76 #i‡
ETH_PAD_SIZE


77 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

79 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

80 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

82 } 
PACK_STRUCT_STRUCT
;

83 
PACK_STRUCT_END


84 #ifde‡
PACK_STRUCT_USE_INCLUDES


85 
	~"¨ch/ï°ru˘.h
"

88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/bp°ru˘.h
"

91 
PACK_STRUCT_BEGIN


93 
	sëh¨p_hdr
 {

94 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëhhdr
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

96 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

97 
PACK_STRUCT_FIELD
(
u16_t
 
_hwÀn_¥Ÿﬁí
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

99 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

100 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

101 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

102 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

103 } 
PACK_STRUCT_STRUCT
;

104 
PACK_STRUCT_END


105 #ifde‡
PACK_STRUCT_USE_INCLUDES


106 
	~"¨ch/ï°ru˘.h
"

109 #ifde‡
PACK_STRUCT_USE_INCLUDES


110 
	~"¨ch/bp°ru˘.h
"

112 
PACK_STRUCT_BEGIN


113 
	sëhù_hdr
 {

114 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëh
);

115 
PACK_STRUCT_FIELD
(
ù_hdr
 
ù
);

116 } 
PACK_STRUCT_STRUCT
;

117 
PACK_STRUCT_END


118 #ifde‡
PACK_STRUCT_USE_INCLUDES


119 
	~"¨ch/ï°ru˘.h
"

123 
	#ARP_TMR_INTERVAL
 5000

	)

125 
	#ETHTYPE_ARP
 0x0806

	)

126 
	#ETHTYPE_IP
 0x0800

	)

127 
	#ETHTYPE_PPPOEDISC
 0x8863

	)

128 
	#ETHTYPE_PPPOE
 0x8864

	)

131 
	#ARP_REQUEST
 1

	)

132 
	#ARP_REPLY
 2

	)

134 #i‡
ARP_QUEUEING


138 
	sëh¨p_q_íåy
 {

139 
ëh¨p_q_íåy
 *
√xt
;

140 
pbuf
 *
p
;

144 
	#ëh¨p_öô
(Ë

	)

145 
ëh¨p_tmr
();

146 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

147 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
);

148 
ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

149 
ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
,

150 
pbuf
 *
p
);

151 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
);

152 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
);

153 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

158 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), &“ëif)->
ù_addr
)

	)

160 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

162 #i‡
LWIP_AUTOIP


163 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

164 c⁄° 
ëh_addr
 *
ëhd°_addr
,

165 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

166 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

167 c⁄° 
u16_t
 
›code
);

170 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

172 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

174 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/loopif.h

32 #i‚de‡
__NETIF_LOOPIF_H__


33 
	#__NETIF_LOOPIF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


44 
	#lo›if_pﬁl
 
√tif_pﬁl


	)

47 
îr_t
 
lo›if_öô
(
√tif
 *netif);

49 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/ppp_oe.h

70 #i‚de‡
PPP_OE_H


71 
	#PPP_OE_H


	)

73 
	~"lwù/›t.h
"

75 #i‡
PPPOE_SUPPORT
 > 0

77 #ifde‡
PACK_STRUCT_USE_INCLUDES


78 
	~"¨ch/bp°ru˘.h
"

80 
PACK_STRUCT_BEGIN


81 
	sµp€hdr
 {

82 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

86 } 
	gPACK_STRUCT_STRUCT
;

87 
	gPACK_STRUCT_END


88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/ï°ru˘.h
"

92 #ifde‡
PACK_STRUCT_USE_INCLUDES


93 
	~"¨ch/bp°ru˘.h
"

95 
PACK_STRUCT_BEGIN


96 
	sµp€èg
 {

97 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

99 } 
	gPACK_STRUCT_STRUCT
;

100 
	gPACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

106 
	#PPPOE_STATE_INITIAL
 0

	)

107 
	#PPPOE_STATE_PADI_SENT
 1

	)

108 
	#PPPOE_STATE_PADR_SENT
 2

	)

109 
	#PPPOE_STATE_SESSION
 3

	)

110 
	#PPPOE_STATE_CLOSING
 4

	)

112 
	#PPPOE_STATE_PADO_SENT
 1

	)

114 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

115 
	#PPPOE_VERTYPE
 0x11

	)

117 
	#PPPOE_TAG_EOL
 0x0000

	)

118 
	#PPPOE_TAG_SNAME
 0x0101

	)

119 
	#PPPOE_TAG_ACNAME
 0x0102

	)

120 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

121 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

122 
	#PPPOE_TAG_VENDOR
 0x0105

	)

123 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

124 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

125 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

126 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

128 
	#PPPOE_CODE_PADI
 0x09

	)

129 
	#PPPOE_CODE_PADO
 0x07

	)

130 
	#PPPOE_CODE_PADR
 0x19

	)

131 
	#PPPOE_CODE_PADS
 0x65

	)

132 
	#PPPOE_CODE_PADT
 0xA7

	)

134 #i‚de‡
ETHERMTU


135 
	#ETHERMTU
 1500

	)

139 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

141 
	gµp€_so·c
;

144 
µp€_öô
();

146 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

147 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

149 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

150 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

152 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

153 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

155 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

157 
µp€_hdæí
;

	@firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/slipif.h

34 #i‚de‡
__NETIF_SLIPIF_H__


35 
	#__NETIF_SLIPIF_H__


	)

37 
	~"lwù/√tif.h
"

39 #ifde‡
__˝lu•lus


43 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

45 #ifde‡
__˝lu•lus


	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/etharp.c

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_ARP


50 
	~"lwù/öë.h
"

51 
	~"lwù/ù.h
"

52 
	~"lwù/°©s.h
"

53 
	~"lwù/¢mp.h
"

54 
	~"lwù/dh˝.h
"

55 
	~"lwù/autoù.h
"

56 
	~"√tif/ëh¨p.h
"

58 #i‡
PPPOE_SUPPORT


59 
	~"√tif/µp_€.h
"

62 
	~<°rög.h
>

68 
	#ARP_MAXAGE
 240

	)

76 
	#ARP_MAXPENDING
 2

	)

78 
	#HWTYPE_ETHERNET
 1

	)

80 
	#ARPH_HWLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë>> 8)

	)

81 
	#ARPH_PROTOLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë& 0xff)

	)

83 
	#ARPH_HWLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(
	`ARPH_PROTOLEN
(hdrË| (÷íË<< 8))

	)

84 
	#ARPH_PROTOLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(÷íË| (
	`ARPH_HWLEN
(hdrË<< 8))

	)

86 
	eëh¨p_°©e
 {

87 
	mETHARP_STATE_EMPTY
 = 0,

88 
	mETHARP_STATE_PENDING
,

89 
	mETHARP_STATE_STABLE


92 
	sëh¨p_íåy
 {

93 #i‡
ARP_QUEUEING


97 
ëh¨p_q_íåy
 *
	mq
;

99 
ù_addr
 
	mùaddr
;

100 
ëh_addr
 
	mëhaddr
;

101 
ëh¨p_°©e
 
	m°©e
;

102 
u8_t
 
	m˘ime
;

103 
√tif
 *
	m√tif
;

106 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

107 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

108 
ëh¨p_íåy
 
	g¨p_èbÀ
[
ARP_TABLE_SIZE
];

109 #i‡!
LWIP_NETIF_HWADDRHINT


110 
u8_t
 
	gëh¨p_ˇched_íåy
;

116 
	#ETHARP_TRY_HARD
 1

	)

117 
	#ETHARP_FIND_ONLY
 2

	)

119 #i‡
LWIP_NETIF_HWADDRHINT


120 
	#NETIF_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

121 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

122 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif);

124 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
);

127 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

131 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

136 #i‡
ARP_QUEUEING


143 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

145 
ëh¨p_q_íåy
 *
r
;

146 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

147 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

148 
q
) {

149 
r
 = 
q
;

150 
q
 = q->
√xt
;

151 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

152 
	`pbuf_‰ì
(
r
->
p
);

153 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
);

155 
	}
}

165 
	$ëh¨p_tmr
()

167 
u8_t
 
i
;

169 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

171 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

172 
¨p_èbÀ
[
i
].
˘ime
++;

173 i‡(((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) &&

174 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
)) ||

175 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

176 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

178 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

179 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

182 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

183 #i‡
ARP_QUEUEING


185 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

187 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

188 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

189 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

193 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

195 #i‡
ARP_QUEUEING


197 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

202 
	}
}

226 
	gs8_t


227 #i‡
LWIP_NETIF_HWADDRHINT


228 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif)

230 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
)

233 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

234 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

235 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

236 #i‡
ARP_QUEUEING


238 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

240 
u8_t
 
age_queue
 = 0;

245 i‡(
ùaddr
) {

247 #i‡
LWIP_NETIF_HWADDRHINT


248 i‡((
√tif
 !
NULL
Ë&& (√tif->
addr_höt
 != NULL)) {

250 
u8_t
 
≥r_pcb_ˇche
 = *(
√tif
->
addr_höt
);

251 i‡((
≥r_pcb_ˇche
 < 
ARP_TABLE_SIZE
Ë&& 
¨p_èbÀ
[≥r_pcb_ˇche].
°©e
 =
ETHARP_STATE_STABLE
) {

253 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
≥r_pcb_ˇche
].ipaddr)) {

255 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

256  
≥r_pcb_ˇche
;

261 i‡(
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) {

263 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr)) {

265 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

266  
ëh¨p_ˇched_íåy
;

287 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

289 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
)) {

290 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

292 
em±y
 = 
i
;

295 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

297 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

298 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÖídögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

300 #i‡
LWIP_NETIF_HWADDRHINT


301 
	`NETIF_SET_HINT
(
√tif
, 
i
);

303 
ëh¨p_ˇched_íåy
 = 
i
;

305  
i
;

306 #i‡
ARP_QUEUEING


308 } i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

309 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

310 
ﬁd_queue
 = 
i
;

311 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

316 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

317 
ﬁd_≥ndög
 = 
i
;

318 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

323 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

325 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

326 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chög sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

328 #i‡
LWIP_NETIF_HWADDRHINT


329 
	`NETIF_SET_HINT
(
√tif
, 
i
);

331 
ëh¨p_ˇched_íåy
 = 
i
;

333  
i
;

335 } i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

336 
ﬁd_°abÀ
 = 
i
;

337 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

344 i‡(((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_TRY_HARD
) == 0))

346 || ((
Êags
 & 
ETHARP_FIND_ONLY
) != 0)) {

347 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

348  (
s8_t
)
ERR_MEM
;

361 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

362 
i
 = 
em±y
;

363 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

366 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

368 
i
 = 
ﬁd_°abÀ
;

369 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

370 #i‡
ARP_QUEUEING


372 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

375 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

377 
i
 = 
ﬁd_≥ndög
;

378 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

379 #i‡
ARP_QUEUEING


381 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

383 
i
 = 
ﬁd_queue
;

384 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

385 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

386 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

390  (
s8_t
)
ERR_MEM
;

394 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

396 i‡(
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_EMPTY
)

398 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

401 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

404 i‡(
ùaddr
 !
NULL
) {

406 
	`ù_addr_£t
(&
¨p_èbÀ
[
i
].
ùaddr
, ipaddr);

408 
¨p_èbÀ
[
i
].
˘ime
 = 0;

409 #i‡
LWIP_NETIF_HWADDRHINT


410 
	`NETIF_SET_HINT
(
√tif
, 
i
);

412 
ëh¨p_ˇched_íåy
 = 
i
;

414  (
îr_t
)
i
;

415 
	}
}

427 
îr_t


428 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

430 
ëh_hdr
 *
ëhhdr
 = 
p
->
∑ylﬂd
;

431 
u8_t
 
k
;

433 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

434 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

435 
k
 = 
ETHARP_HWADDR_LEN
;

436 
k
 > 0) {

437 
k
--;

438 
ëhhdr
->
de°
.
addr
[
k
] = 
d°
->addr[k];

439 
ëhhdr
->
§c
.
addr
[
k
] = src->addr[k];

441 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_IP
);

442 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

444  
√tif
->
	`lökouçut
“ëif, 
p
);

445 
	}
}

466 
îr_t


467 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

469 
s8_t
 
i
;

470 
u8_t
 
k
;

471 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("update_arp_entry()\n"));

472 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

473 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

474 
	`ù4_addr1
(
ùaddr
), 
	`ù4_addr2
(ùaddr), 
	`ù4_addr3
(ùaddr), 
	`ù4_addr4
(ipaddr),

475 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

476 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

478 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

479 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

480 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

481 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

482  
ERR_ARG
;

485 #i‡
LWIP_NETIF_HWADDRHINT


486 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
, 
√tif
);

488 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
);

491 i‡(
i
 < 0)

492  (
îr_t
)
i
;

495 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

497 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

500 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

502 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

504 
k
 = 
ETHARP_HWADDR_LEN
;

505 
k
 > 0) {

506 
k
--;

507 
¨p_èbÀ
[
i
].
ëhaddr
.
addr
[
k
] =Éthaddr->addr[k];

510 
¨p_èbÀ
[
i
].
˘ime
 = 0;

511 #i‡
ARP_QUEUEING


513 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

514 
pbuf
 *
p
;

516 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

518 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

520 
p
 = 
q
->p;

522 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
);

524 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

526 
	`pbuf_‰ì
(
p
);

529  
ERR_OK
;

530 
	}
}

543 
s8_t


544 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

545 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
)

547 
s8_t
 
i
;

549 
	`LWIP_UNUSED_ARG
(
√tif
);

551 #i‡
LWIP_NETIF_HWADDRHINT


552 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
, 
NULL
);

554 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
);

556 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

557 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

558 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

559  
i
;

562 
	}
}

580 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

582 
ëhù_hdr
 *
hdr
;

583 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

586 
hdr
 = 
p
->
∑ylﬂd
;

588 i‡(!
	`ù_addr_√tcmp
(&(
hdr
->
ù
.
§c
), &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

593 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

597 
	`upd©e_¨p_íåy
(
√tif
, &(
hdr
->
ù
.
§c
), &(hdr->
ëh
.src), 0);

598 
	}
}

617 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

619 
ëh¨p_hdr
 *
hdr
;

621 
ù_addr
 
sùaddr
, 
dùaddr
;

622 
u8_t
 
i
;

623 
u8_t
 
f‹_us
;

624 #i‡
LWIP_AUTOIP


625 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

628 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

632 i‡(
p
->
Àn
 < (
ëh¨p_hdr
)) {

633 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
, (
s16_t
)(
ëh¨p_hdr
)));

634 
	`ETHARP_STATS_INC
(
ëh¨p
.
À√º
);

635 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

636 
	`pbuf_‰ì
(
p
);

640 
hdr
 = 
p
->
∑ylﬂd
;

643 i‡((
hdr
->
hwty≥
 !
	`ht⁄s
(
HWTYPE_ETHERNET
)) ||

644 (
hdr
->
_hwÀn_¥Ÿﬁí
 !
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
))) ||

645 (
hdr
->
¥Ÿo
 !
	`ht⁄s
(
ETHTYPE_IP
)) ||

646 (
hdr
->
ëhhdr
.
ty≥
 !
	`ht⁄s
(
ETHTYPE_ARP
))) {

647 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1,

648 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",

649 
hdr
->
hwty≥
, 
	`ARPH_HWLEN
(hdr), hdr->
¥Ÿo
, 
	`ARPH_PROTOLEN
(hdr), hdr->
ëhhdr
.
ty≥
));

650 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

651 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

652 
	`pbuf_‰ì
(
p
);

655 
	`ETHARP_STATS_INC
(
ëh¨p
.
ªcv
);

657 #i‡
LWIP_AUTOIP


661 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

666 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

667 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

670 i‡(
√tif
->
ù_addr
.
addr
 == 0) {

671 
f‹_us
 = 0;

674 
f‹_us
 = 
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

678 i‡(
f‹_us
) {

681 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 
ETHARP_TRY_HARD
);

685 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 0);

689 
	`ht⁄s
(
hdr
->
›code
)) {

691 
ARP_REQUEST
:

696 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

698 i‡(
f‹_us
) {

700 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

704 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

706 
hdr
->
dùaddr
 = hdr->
sùaddr
;

707 
	`SMEMCPY
(&
hdr
->
sùaddr
, &
√tif
->
ù_addr
, (hdr->sipaddr));

709 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

710 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

711 
i
 = 
ETHARP_HWADDR_LEN
;

712 #i‡
LWIP_AUTOIP


715 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

718 
i
 > 0) {

719 
i
--;

720 
hdr
->
dhwaddr
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

721 #i‡
LWIP_AUTOIP


722 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = 
ëhd°_hwaddr
[i];

724 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

726 
hdr
->
shwaddr
.
addr
[
i
] = 
ëhaddr
->addr[i];

727 
hdr
->
ëhhdr
.
§c
.
addr
[
i
] = 
ëhaddr
->addr[i];

734 
√tif
->
	`lökouçut
“ëif, 
p
);

736 } i‡(
√tif
->
ù_addr
.
addr
 == 0) {

738 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

742 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

745 
ARP_REPLY
:

747 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

748 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

753 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

757 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

758 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

762 
	`pbuf_‰ì
(
p
);

763 
	}
}

783 
îr_t


784 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
)

786 
ëh_addr
 *
de°
, 
mˇ°addr
;

789 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

791 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_output: couldÇotállocateÑoom for header.\n"));

792 
	`LINK_STATS_INC
(
lök
.
À√º
);

793  
ERR_BUF
;

797 
de°
 = 
NULL
;

802 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

804 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

806 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

808 
mˇ°addr
.
addr
[0] = 0x01;

809 
mˇ°addr
.
addr
[1] = 0x00;

810 
mˇ°addr
.
addr
[2] = 0x5e;

811 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

812 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

813 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

815 
de°
 = &
mˇ°addr
;

819 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

821 i‡(
√tif
->
gw
.
addr
 != 0) {

823 
ùaddr
 = &(
√tif
->
gw
);

827  
ERR_RTE
;

831  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

837  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

838 
	}
}

873 
îr_t


874 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
)

876 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

877 
îr_t
 
ªsu…
 = 
ERR_MEM
;

878 
s8_t
 
i
;

881 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

882 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

883 
	`ù_addr_ißny
(
ùaddr
)) {

884 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

885  
ERR_ARG
;

889 #i‡
LWIP_NETIF_HWADDRHINT


890 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
, 
√tif
);

892 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
);

896 i‡(
i
 < 0) {

897 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

898 i‡(
q
) {

899 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

900 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

902  (
îr_t
)
i
;

906 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

907 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

911 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

912 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

913 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

916 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

918 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

919 i‡(
ªsu…
 !
ERR_OK
) {

928 i‡(
q
 !
NULL
) {

930 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

933 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

935 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

936 #i‡
ARP_QUEUEING


937 
pbuf
 *
p
;

938 
c›y_√eded
 = 0;

942 
p
 = 
q
;

943 
p
) {

944 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

945 if(
p
->
ty≥
 !
PBUF_ROM
) {

946 
c›y_√eded
 = 1;

949 
p
 =Ö->
√xt
;

951 if(
c›y_√eded
) {

953 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_RAM
);

954 if(
p
 !
NULL
) {

955 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

956 
	`pbuf_‰ì
(
p
);

957 
p
 = 
NULL
;

962 
p
 = 
q
;

963 
	`pbuf_ªf
(
p
);

966 i‡(
p
 !
NULL
) {

968 
ëh¨p_q_íåy
 *
√w_íåy
;

970 
√w_íåy
 = 
	`memp_mÆloc
(
MEMP_ARP_QUEUE
);

971 i‡(
√w_íåy
 !
NULL
) {

972 
√w_íåy
->
√xt
 = 0;

973 
√w_íåy
->
p
 =Ö;

974 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

976 
ëh¨p_q_íåy
 *
r
;

977 
r
 = 
¨p_èbÀ
[
i
].
q
;

978 
r
->
√xt
 !
NULL
) {

979 
r
 =Ñ->
√xt
;

981 
r
->
√xt
 = 
√w_íåy
;

984 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

986 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

987 
ªsu…
 = 
ERR_OK
;

990 
	`pbuf_‰ì
(
p
);

991 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

995 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

996 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1002 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: Ethî√àde°ö©i⁄áddªs†unknown, queueög dißbÀd,Öackë %∞dr›≥d\n", (*)
q
));

1006  
ªsu…
;

1007 
	}
}

1024 #i‡!
LWIP_AUTOIP


1027 
îr_t


1028 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1029 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1030 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

1031 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

1032 c⁄° 
u16_t
 
›code
)

1034 
pbuf
 *
p
;

1035 
îr_t
 
ªsu…
 = 
ERR_OK
;

1036 
u8_t
 
k
;

1037 
ëh¨p_hdr
 *
hdr
;

1038 #i‡
LWIP_AUTOIP


1039 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1043 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, (
ëh¨p_hdr
), 
PBUF_RAM
);

1045 i‡(
p
 =
NULL
) {

1046 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_raw: couldÇotállocateÖbuf for ARPÑequest.\n"));

1047 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1048  
ERR_MEM
;

1050 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1051 (
p
->
Àn
 >(
ëh¨p_hdr
)));

1053 
hdr
 = 
p
->
∑ylﬂd
;

1054 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1055 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1057 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1058 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1059 
k
 = 
ETHARP_HWADDR_LEN
;

1060 #i‡
LWIP_AUTOIP


1063 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1066 
k
 > 0) {

1067 
k
--;

1069 
hdr
->
shwaddr
.
addr
[
k
] = 
hw§c_addr
->addr[k];

1070 
hdr
->
dhwaddr
.
addr
[
k
] = 
hwd°_addr
->addr[k];

1072 #i‡
LWIP_AUTOIP


1073 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_hwaddr
[k];

1075 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_addr
->addr[k];

1077 
hdr
->
ëhhdr
.
§c
.
addr
[
k
] = 
ëh§c_addr
->addr[k];

1079 
hdr
->
sùaddr
 = *(
ù_addr2
 *)
ù§c_addr
;

1080 
hdr
->
dùaddr
 = *(
ù_addr2
 *)
ùd°_addr
;

1082 
hdr
->
hwty≥
 = 
	`ht⁄s
(
HWTYPE_ETHERNET
);

1083 
hdr
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

1085 
hdr
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
));

1087 
hdr
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

1089 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1090 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1092 
	`pbuf_‰ì
(
p
);

1093 
p
 = 
NULL
;

1096  
ªsu…
;

1097 
	}
}

1108 
îr_t


1109 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

1111 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1112  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1113 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1114 
ùaddr
, 
ARP_REQUEST
);

1115 
	}
}

1125 
îr_t


1126 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1128 
ëh_hdr
* 
ëhhdr
;

1131 
ëhhdr
 = 
p
->
∑ylﬂd
;

1132 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1134 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1135 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1136 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1137 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1138 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1140 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

1142 
ETHTYPE_IP
:

1143 #i‡
ETHARP_TRUST_IP_MAC


1145 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1148 if(
	`pbuf_hódî
(
p
, -(
s16_t
)(
ëh_hdr
))) {

1149 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

1150 
	`pbuf_‰ì
(
p
);

1151 
p
 = 
NULL
;

1154 
	`ù_öput
(
p
, 
√tif
);

1158 
ETHTYPE_ARP
:

1160 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1163 #i‡
PPPOE_SUPPORT


1164 
ETHTYPE_PPPOEDISC
:

1165 
	`µp€_disc_öput
(
√tif
, 
p
);

1168 
ETHTYPE_PPPOE
:

1169 
	`µp€_d©a_öput
(
√tif
, 
p
);

1174 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1175 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1176 
	`pbuf_‰ì
(
p
);

1177 
p
 = 
NULL
;

1183  
ERR_OK
;

1184 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ethernetif.c

46 
	~"lwù/›t.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/mem.h
"

52 
	~"lwù/pbuf.h
"

53 
	~"lwù/sys.h
"

54 
	~<lwù/°©s.h
>

55 
	~<lwù/¢mp.h
>

56 
	~"√tif/ëh¨p.h
"

57 
	~"√tif/µp_€.h
"

60 
	#IFNAME0
 'e'

	)

61 
	#IFNAME1
 'n'

	)

69 
	sëhî√tif
 {

70 
ëh_addr
 *
	mëhaddr
;

75 
ëhî√tif_öput
(
√tif
 *netif);

85 
	$low_Àvñ_öô
(
√tif
 *netif)

87 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

90 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

93 
√tif
->
hwaddr
[0] = ;

95 
√tif
->
hwaddr
[5] = ;

98 
√tif
->
mtu
 = 1500;

102 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

105 
	}
}

123 
îr_t


124 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

126 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

127 
pbuf
 *
q
;

129 
öôüã
 
	`å™s„r
();

131 #i‡
ETH_PAD_SIZE


132 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

135 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

139 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

142 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

144 #i‡
ETH_PAD_SIZE


145 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

148 
	`LINK_STATS_INC
(
lök
.
xmô
);

150  
ERR_OK
;

151 
	}
}

161 
pbuf
 *

162 
	$low_Àvñ_öput
(
√tif
 *netif)

164 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

165 
pbuf
 *
p
, *
q
;

166 
u16_t
 
Àn
;

170 
Àn
 = ;

172 #i‡
ETH_PAD_SIZE


173 
Àn
 +
ETH_PAD_SIZE
;

177 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

179 i‡(
p
 !
NULL
) {

181 #i‡
ETH_PAD_SIZE


182 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

187 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

191 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

193 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

195 #i‡
ETH_PAD_SIZE


196 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

199 
	`LINK_STATS_INC
(
lök
.
ªcv
);

201 
dr›
 
	`∑ckë
();

202 
	`LINK_STATS_INC
(
lök
.
memîr
);

203 
	`LINK_STATS_INC
(
lök
.
dr›
);

206  
p
;

207 
	}
}

219 
	$ëhî√tif_öput
(
√tif
 *netif)

221 
ëhî√tif
 *ethernetif;

222 
ëh_hdr
 *
ëhhdr
;

223 
pbuf
 *
p
;

225 
ëhî√tif
 = 
√tif
->
°©e
;

228 
p
 = 
	`low_Àvñ_öput
(
√tif
);

230 i‡(
p
 =
NULL
) ;

232 
ëhhdr
 = 
p
->
∑ylﬂd
;

234 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

236 
ETHTYPE_IP
:

237 
ETHTYPE_ARP
:

238 #i‡
PPPOE_SUPPORT


240 
ETHTYPE_PPPOEDISC
:

241 
ETHTYPE_PPPOE
:

244 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

245 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

246 
	`pbuf_‰ì
(
p
);

247 
p
 = 
NULL
;

252 
	`pbuf_‰ì
(
p
);

253 
p
 = 
NULL
;

256 
	}
}

270 
îr_t


271 
	$ëhî√tif_öô
(
√tif
 *netif)

273 
ëhî√tif
 *ethernetif;

275 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

277 
ëhî√tif
 = 
	`mem_mÆloc
((ethernetif));

278 i‡(
ëhî√tif
 =
NULL
) {

279 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_init: out of memory\n"));

280  
ERR_MEM
;

283 #i‡
LWIP_NETIF_HOSTNAME


285 
√tif
->
ho°«me
 = "lwip";

293 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

295 
√tif
->
°©e
 = 
ëhî√tif
;

296 
√tif
->
«me
[0] = 
IFNAME0
;

297 
√tif
->
«me
[1] = 
IFNAME1
;

302 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

303 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

305 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

308 
	`low_Àvñ_öô
(
√tif
);

310  
ERR_OK
;

311 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/loopif.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_HAVE_LOOPIF


42 
	~"√tif/lo›if.h
"

43 
	~"lwù/¢mp.h
"

52 
îr_t


53 
	$lo›if_öô
(
√tif
 *netif)

58 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

60 
√tif
->
«me
[0] = 'l';

61 
√tif
->
«me
[1] = 'o';

62 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

63  
ERR_OK
;

64 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/auth.c

67 
	~"lwù/›t.h
"

69 #i‡
PPP_SUPPORT


71 
	~"µp.h
"

72 
	~"µpdebug.h
"

74 
	~"fsm.h
"

75 
	~"l˝.h
"

76 
	~"∑p.h
"

77 
	~"ch≠.h
"

78 
	~"auth.h
"

79 
	~"ù˝.h
"

81 #i‡
CBCP_SUPPORT


82 
	~"cb˝.h
"

90 
	#PAP_WITHPEER
 1

	)

91 
	#PAP_PEER
 2

	)

92 
	#CHAP_WITHPEER
 4

	)

93 
	#CHAP_PEER
 8

	)

100 
	sw‹dli°
 {

101 
w‹dli°
 *
	m√xt
;

102 
	mw‹d
[1];

109 *
¸y±
 (const *, const *);

113 
√tw‹k_pha£
 ();

114 
check_idÀ
 (*);

115 
c⁄√˘_time_expúed
 (*);

117 
logö
 (*, *, **, *);

119 
logout
 ();

120 
nuŒ_logö
 ();

121 
gë_∑p_∑sswd
 (, *, *);

122 
have_∑p_£¸ë
 ();

123 
have_ch≠_£¸ë
 (*, *, 
u32_t
);

124 
ù_addr_check
 (
u32_t
, 
w‹dli°
 *);

126 
£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
);

127 
‰ì_w‹dli°
 (
w‹dli°
 *);

129 #i‡
CBCP_SUPPORT


130 
ˇŒback_pha£
 ();

142 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


144 
	g≥î_auth«me
[
MAXNAMELEN
];

148 
	gauth_≥ndög
[
NUM_PPP
];

151 
	glogged_ö
;

154 
	gdid_authup
;

157 
w‹dli°
 *
	gaddªs£s
[
NUM_PPP
];

160 
	gnum_≈_›í
;

163 
	gnum_≈_up
;

165 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


167 
	g∑sswd_‰om_fûe
;

179 
	$lök_ªquúed
(
unô
)

181 
	`LWIP_UNUSED_ARG
(
unô
);

183 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ªquúed: %d\n", 
unô
));

184 
	}
}

191 
	$lök_ãrmö©ed
(
unô
)

193 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ãrmö©ed: %d\n", 
unô
));

194 i‡(
l˝_pha£
[
unô
] =
PHASE_DEAD
) {

197 i‡(
logged_ö
) {

198 
	`logout
();

200 
l˝_pha£
[
unô
] = 
PHASE_DEAD
;

201 
	`AUTHDEBUG
((
LOG_NOTICE
, "ConnectionÅerminated.\n"));

202 
	`µpLökTîmö©ed
(
unô
);

203 
	}
}

209 
	$lök_down
(
unô
)

211 
i
;

212 
¥Ÿít
 *
¥Ÿp
;

214 
	`AUTHDEBUG
((
LOG_INFO
, "lök_down: %d\n", 
unô
));

215 i‡(
did_authup
) {

217 
did_authup
 = 0;

219 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

220 i‡(!
¥Ÿp
->
íabÀd_Êag
) {

223 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
) {

224 (*
¥Ÿp
->
lowîdown
)(
unô
);

226 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
) {

227 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

230 
num_≈_›í
 = 0;

231 
num_≈_up
 = 0;

232 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

233 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

235 
	`µpLökDown
(
unô
);

236 
	}
}

243 
	$lök_e°ablished
(
unô
)

245 
auth
;

246 
i
;

247 
¥Ÿít
 *
¥Ÿp
;

248 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

249 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

250 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


251 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

254 
	`AUTHDEBUG
((
LOG_INFO
, "lök_e°ablished: %d\n", 
unô
));

258 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

259 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
lowîup
 !
NULL
) {

260 (*
¥Ÿp
->
lowîup
)(
unô
);

263 i‡(
µp_£âögs
.
auth_ªquúed
 && !(
go
->
√g_ch≠
 || go->
√g_u∑p
)) {

269 i‡(!
wo
->
√g_u∑p
 || !
	`nuŒ_logö
(
unô
)) {

270 
	`AUTHDEBUG
((
LOG_WARNING
, "peerÑefusedÅoáuthenticate\n"));

271 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

276 
l˝_pha£
[
unô
] = 
PHASE_AUTHENTICATE
;

277 
auth
 = 0;

278 #i‡
CHAP_SUPPORT


279 i‡(
go
->
√g_ch≠
) {

280 
	`Ch≠AuthPìr
(
unô
, 
µp_£âögs
.
our_«me
, 
go
->
ch≠_mdty≥
);

281 
auth
 |
CHAP_PEER
;

284 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


287 #i‡
PAP_SUPPORT


288 i‡(
go
->
√g_u∑p
) {

289 
	`u∑p_auth≥î
(
unô
);

290 
auth
 |
PAP_PEER
;

293 #i‡
CHAP_SUPPORT


294 i‡(
ho
->
√g_ch≠
) {

295 
	`Ch≠AuthWôhPìr
(
unô
, 
µp_£âögs
.
u£r
, 
ho
->
ch≠_mdty≥
);

296 
auth
 |
CHAP_WITHPEER
;

299 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


302 #i‡
PAP_SUPPORT


303 i‡(
ho
->
√g_u∑p
) {

304 i‡(
µp_£âögs
.
∑sswd
[0] == 0) {

305 
∑sswd_‰om_fûe
 = 1;

306 i‡(!
	`gë_∑p_∑sswd
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
)) {

307 
	`AUTHDEBUG
((
LOG_ERR
, "No secret found for PAPÜogin\n"));

310 
	`u∑p_authwôh≥î
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
);

311 
auth
 |
PAP_WITHPEER
;

314 
auth_≥ndög
[
unô
] = 
auth
;

316 i‡(!
auth
) {

317 
	`√tw‹k_pha£
(
unô
);

319 
	}
}

325 
	$auth_≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

327 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

329 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

333 
	`l˝_˛o£
(
unô
, "Authentication failed");

334 
	}
}

337 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


342 
	$auth_≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
, *
«me
, 
«mñí
)

344 
pbô
;

346 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

347 
¥Ÿocﬁ
) {

348 
PPP_CHAP
:

349 
pbô
 = 
CHAP_PEER
;

351 
PPP_PAP
:

352 
pbô
 = 
PAP_PEER
;

355 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

362 i‡(
«mñí
 > (
≥î_auth«me
) - 1) {

363 
«mñí
 = (
≥î_auth«me
) - 1;

365 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

366 
≥î_auth«me
[
«mñí
] = 0;

372 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

373 
	`√tw‹k_pha£
(
unô
);

375 
	}
}

381 
	$auth_wôh≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

383 
îrCode
 = 
PPPERR_AUTHFAIL
;

385 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

387 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

388 i‡(
∑sswd_‰om_fûe
) {

389 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

396 
	`µpIOCé
(
unô
, 
PPPCTLS_ERRCODE
, &
îrCode
);

403 
	}
}

409 
	$auth_wôh≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

411 
pbô
;

413 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

414 
¥Ÿocﬁ
) {

415 
PPP_CHAP
:

416 
pbô
 = 
CHAP_WITHPEER
;

418 
PPP_PAP
:

419 i‡(
∑sswd_‰om_fûe
) {

420 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

422 
pbô
 = 
PAP_WITHPEER
;

425 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

426 
pbô
 = 0;

433 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

434 
	`√tw‹k_pha£
(
unô
);

436 
	}
}

444 
	$≈_up
(
unô
, 
u16_t
 
¥Ÿo
)

446 
	`LWIP_UNUSED_ARG
(
unô
);

447 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

449 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

450 i‡(
num_≈_up
 == 0) {

451 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: maxc⁄√˘=%d idÀ_time_limô=%d\n",
µp_£âögs
.
maxc⁄√˘
,µp_£âögs.
idÀ_time_limô
));

455 i‡(
µp_£âögs
.
idÀ_time_limô
 > 0) {

456 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
);

463 i‡(
µp_£âögs
.
maxc⁄√˘
 > 0) {

464 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
µp_£âögs
.
maxc⁄√˘
);

467 ++
num_≈_up
;

468 
	}
}

474 
	$≈_down
(
unô
, 
u16_t
 
¥Ÿo
)

476 
	`LWIP_UNUSED_ARG
(
unô
);

477 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

479 
	`AUTHDEBUG
((
LOG_INFO
, "≈_down: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

480 i‡(--
num_≈_up
 =0 && 
µp_£âögs
.
idÀ_time_limô
 > 0) {

481 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

483 
	}
}

489 
	$≈_föished
(
unô
, 
u16_t
 
¥Ÿo
)

491 
	`LWIP_UNUSED_ARG
(
unô
);

492 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

494 
	`AUTHDEBUG
((
LOG_INFO
, "≈_föished: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

495 i‡(--
num_≈_›í
 <= 0) {

497 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

499 
	}
}

507 
	$auth_ª£t
(
unô
)

509 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

510 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

511 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

512 
u32_t
 
ªmŸe
;

514 
	`AUTHDEBUG
((
LOG_INFO
, "auth_ª£t: %d\n", 
unô
));

515 
ao
->
√g_u∑p
 = !
µp_£âögs
.
ªfu£_∑p
 && (µp_£âögs.
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
unô
, 
NULL
, NULL));

516 
ao
->
√g_ch≠
 = !
µp_£âögs
.
ªfu£_ch≠
 &&Öµ_£âögs.
∑sswd
[0] != 0 ;

518 i‡(
go
->
√g_u∑p
 && !
	`have_∑p_£¸ë
()) {

519 
go
->
√g_u∑p
 = 0;

521 i‡(
go
->
√g_ch≠
) {

522 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

523 i‡(!
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
)) {

524 
go
->
√g_ch≠
 = 0;

527 
	}
}

529 #i‡
PAP_SUPPORT


541 
	$check_∑sswd
–
unô
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, **
msg
, *
msgÀn
)

544 
	`LWIP_UNUSED_ARG
(
unô
);

545 
	`LWIP_UNUSED_ARG
(
au£r
);

546 
	`LWIP_UNUSED_ARG
(
u£æí
);

547 
	`LWIP_UNUSED_ARG
(
≠asswd
);

548 
	`LWIP_UNUSED_ARG
(
∑sswdÀn
);

549 
	`LWIP_UNUSED_ARG
(
msgÀn
);

550 *
msg
 = (*) 0;

551  
UPAP_AUTHACK
;

553 
ªt
 = 0;

554 
w‹dli°
 *
addrs
 = 
NULL
;

555 
∑sswd
[256], 
u£r
[256];

556 
£¸ë
[
MAXWORDLEN
];

557 
u_sh‹t
 
©ãm±s
 = 0;

562 
	`BCOPY
(
≠asswd
, 
∑sswd
, 
∑sswdÀn
);

563 
∑sswd
[
∑sswdÀn
] = '\0';

564 
	`BCOPY
(
au£r
, 
u£r
, 
u£æí
);

565 
u£r
[
u£æí
] = '\0';

566 *
msg
 = (*) 0;

569 
ªt
 = 
UPAP_AUTHACK
;

571 i‡(
ªt
 =
UPAP_AUTHNAK
) {

572 i‡(*
msg
 == (*) 0) {

573 *
msg
 = "Login incorrect";

575 *
msgÀn
 = 
	`°æí
(*
msg
);

581 i‡(
©ãm±s
++ >= 10) {

582 
	`AUTHDEBUG
((
LOG_WARNING
, "%d LOGIN FAILURES BY %s\n", 
©ãm±s
, 
u£r
));

585 i‡(
©ãm±s
 > 3) {

586 
	`sys_m¶ìp
((
©ãm±s
 - 3) * 5);

588 i‡(
addrs
 !
NULL
) {

589 
	`‰ì_w‹dli°
(
addrs
);

592 
©ãm±s
 = 0;

593 i‡(*
msg
 == (*) 0) {

594 *
msg
 = "Login ok";

596 *
msgÀn
 = 
	`°æí
(*
msg
);

597 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

600 
	`BZERO
(
∑sswd
, (passwd));

601 
	`BZERO
(
£¸ë
, (secret));

603  
ªt
;

605 
	}
}

614 
	$auth_ù_addr
(
unô
, 
u32_t
 
addr
)

616  
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

617 
	}
}

625 
	$bad_ù_adrs
(
u32_t
 
addr
)

627 
addr
 = 
	`¡ohl
(addr);

628  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


629 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

630 
	}
}

633 #i‡
CHAP_SUPPORT


639 
	$gë_£¸ë
–
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
ßve_addrs
)

642 
Àn
;

643 
w‹dli°
 *
addrs
;

645 
	`LWIP_UNUSED_ARG
(
unô
);

646 
	`LWIP_UNUSED_ARG
(
£rvî
);

647 
	`LWIP_UNUSED_ARG
(
ßve_addrs
);

649 
addrs
 = 
NULL
;

651 if(!
˛õ¡
 || !˛õ¡[0] || 
	`°rcmp
(˛õ¡, 
µp_£âögs
.
u£r
)) {

655 
Àn
 = 
	`°æí
(
µp_£âögs
.
∑sswd
);

656 i‡(
Àn
 > 
MAXSECRETLEN
) {

657 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

658 
Àn
 = 
MAXSECRETLEN
;

661 
	`BCOPY
(
µp_£âögs
.
∑sswd
, 
£¸ë
, 
Àn
);

662 *
£¸ë_Àn
 = 
Àn
;

666 
ªt
 = 0, 
Àn
;

667 
w‹dli°
 *
addrs
;

668 
£cbuf
[
MAXWORDLEN
];

670 
addrs
 = 
NULL
;

671 
£cbuf
[0] = 0;

674 i‡(
ªt
 < 0) {

678 i‡(
ßve_addrs
) {

679 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

682 
Àn
 = 
	`°æí
(
£cbuf
);

683 i‡(
Àn
 > 
MAXSECRETLEN
) {

684 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

685 
Àn
 = 
MAXSECRETLEN
;

688 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

689 
	`BZERO
(
£cbuf
, (secbuf));

690 *
£¸ë_Àn
 = 
Àn
;

694 
	}
}

703 
	$auth_check_›ti⁄s
()

705 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

706 
ˇn_auth
;

707 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

708 
u32_t
 
ªmŸe
;

711 i‡(
µp_£âögs
.
our_«me
[0] =0 ||Öµ_£âögs.
u£ho°«me
) {

712 
	`°r˝y
(
µp_£âögs
.
our_«me
,Öµ_£âögs.
ho°«me
);

715 i‡(
µp_£âögs
.
u£r
[0] == 0) {

716 
	`°r˝y
(
µp_£âögs
.
u£r
,Öµ_£âögs.
our_«me
);

720 i‡(
µp_£âögs
.
auth_ªquúed
 && !
wo
->
√g_ch≠
 && !wo->
√g_u∑p
) {

721 
wo
->
√g_ch≠
 = 1;

722 
wo
->
√g_u∑p
 = 1;

729 
ˇn_auth
 = 
wo
->
√g_u∑p
 && 
	`have_∑p_£¸ë
();

730 i‡(!
ˇn_auth
 && 
wo
->
√g_ch≠
) {

731 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

732 
ˇn_auth
 = 
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
);

735 i‡(
µp_£âögs
.
auth_ªquúed
 && !
ˇn_auth
) {

736 
	`µp_∑nic
("Noáuth secret");

738 
	}
}

749 
	$√tw‹k_pha£
(
unô
)

751 
i
;

752 
¥Ÿít
 *
¥Ÿp
;

753 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

758 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
Ë&& !
did_authup
) {

760 
did_authup
 = 1;

763 #i‡
CBCP_SUPPORT


767 i‡(
go
->
√g_cb˝
) {

768 
l˝_pha£
[
unô
] = 
PHASE_CALLBACK
;

769 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

774 
l˝_pha£
[
unô
] = 
PHASE_NETWORK
;

775 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

776 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

777 (*
¥Ÿp
->
›í
)(
unô
);

778 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
) {

779 ++
num_≈_›í
;

784 i‡(
num_≈_›í
 == 0) {

786 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

788 
	}
}

795 
	$check_idÀ
(*
¨g
)

797 
µp_idÀ
 
idÀ
;

798 
u_sh‹t
 
ôime
;

800 
	`LWIP_UNUSED_ARG
(
¨g
);

801 i‡(!
	`gë_idÀ_time
(0, &
idÀ
)) {

804 
ôime
 = 
	`LWIP_MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

805 i‡(
ôime
 >
µp_£âögs
.
idÀ_time_limô
) {

807 
	`AUTHDEBUG
((
LOG_INFO
, "Terminating connection dueÅoÜack ofáctivity.\n"));

808 
	`l˝_˛o£
(0, "Link inactive");

810 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
 - 
ôime
);

812 
	}
}

818 
	$c⁄√˘_time_expúed
(*
¨g
)

820 
	`LWIP_UNUSED_ARG
(
¨g
);

822 
	`AUTHDEBUG
((
LOG_INFO
, "ConnectÅimeÉxpired\n"));

823 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

824 
	}
}

837 
	$logö
(*
u£r
, *
∑sswd
, **
msg
, *
msgÀn
)

840  (
UPAP_AUTHNAK
);

841 
	}
}

848 
	$logout
()

850 
logged_ö
 = 0;

851 
	}
}

859 
	$nuŒ_logö
(
unô
)

861 
	`LWIP_UNUSED_ARG
(
unô
);

864 
	}
}

872 
	$gë_∑p_∑sswd
(
unô
, *
u£r
, *
∑sswd
)

874 
	`LWIP_UNUSED_ARG
(
unô
);

880 if(
u£r
) {

881 
	`°r˝y
(
u£r
, "none");

883 if(
∑sswd
) {

884 
	`°r˝y
(
∑sswd
, "none");

887 
	}
}

894 
	$have_∑p_£¸ë
()

898 
	}
}

907 
	$have_ch≠_£¸ë
(*
˛õ¡
, *
£rvî
, 
u32_t
 
ªmŸe
)

909 
	`LWIP_UNUSED_ARG
(
˛õ¡
);

910 
	`LWIP_UNUSED_ARG
(
£rvî
);

911 
	`LWIP_UNUSED_ARG
(
ªmŸe
);

914 
	}
}

921 
	$£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
)

923 i‡(
addªs£s
[
unô
] !
NULL
) {

924 
	`‰ì_w‹dli°
(
addªs£s
[
unô
]);

926 
addªs£s
[
unô
] = 
addrs
;

933 i‡(
addrs
 !
NULL
 &&áddrs->
√xt
 == NULL) {

934 *
p
 = 
addrs
->
w‹d
;

935 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

936 
u32_t
 
a
;

937 
ho°ít
 *
hp
;

939 i‡(
wo
->
hißddr
 =0 && *
p
 !'!' && *∞!'-' && 
	`°rchr
’, '/'Ë=
NULL
) {

940 
hp
 = 
	`gëho°by«me
(
p
);

941 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

942 
a
 = *(
u32_t
 *)
hp
->
h_addr
;

944 
a
 = 
	`öë_addr
(
p
);

946 i‡(
a
 !(
u32_t
) -1) {

947 
wo
->
hißddr
 = 
a
;

952 
	}
}

956 
	$ù_addr_check
(
u32_t
 
addr
, 
w‹dli°
 *
addrs
)

959 i‡(
	`bad_ù_adrs
(
addr
)) {

963 i‡(
addrs
 =
NULL
) {

964  !
µp_£âögs
.
auth_ªquúed
;

969 
	}
}

976 
	$‰ì_w‹dli°
(
w‹dli°
 *
wp
)

978 
w‹dli°
 *
√xt
;

980 
wp
 !
NULL
) {

981 
√xt
 = 
wp
->next;

982 
	`‰ì
(
wp
);

983 
wp
 = 
√xt
;

985 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/auth.h

53 #i‚de‡
AUTH_H


54 
	#AUTH_H


	)

61 
lök_ªquúed
 ();

64 
lök_ãrmö©ed
 ();

67 
lök_down
 ();

70 
lök_e°ablished
 ();

73 
≈_up
 (, 
u16_t
);

76 
≈_down
 (, 
u16_t
);

79 
≈_föished
 (, 
u16_t
);

82 
auth_≥î_Áû
 (, 
u16_t
);

85 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

88 
auth_wôh≥î_Áû
 (, 
u16_t
);

91 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

94 
auth_check_›ti⁄s
 ();

97 
auth_ª£t
 ();

100 
check_∑sswd
 (, *, , *, , **, *);

103 
gë_£¸ë
 (, *, *, *, *, );

106 
auth_ù_addr
 (, 
u32_t
);

109 
bad_ù_adrs
 (
u32_t
);

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chap.c

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
CHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"magic.h
"

79 
	~"øndm.h
"

80 
	~"auth.h
"

81 
	~"md5.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

102 
Ch≠Inô
 ();

103 
Ch≠LowîUp
 ();

104 
Ch≠LowîDown
 ();

105 
Ch≠I≈ut
 (, 
u_ch¨
 *, );

106 
Ch≠PrŸocﬁReje˘
 ();

108 
Ch≠PrötPkt
 (
u_ch¨
 *, , (*) (*, *, ...), *);

111 
	`Ch≠ChÆÀngeTimeout
 (*);

112 
	`Ch≠Re•⁄£Timeout
 (*);

113 
	`Ch≠Re˚iveChÆÀnge
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

114 
	`Ch≠RechÆÀnge
 (*);

115 
	`Ch≠Re˚iveRe•⁄£
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

116 
	`Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

117 
	`Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

118 
	`Ch≠SídSètus
 (
ch≠_°©e
 *, );

119 
	`Ch≠SídChÆÀnge
 (
ch≠_°©e
 *);

120 
	`Ch≠SídRe•⁄£
 (
ch≠_°©e
 *);

121 
	`Ch≠GíChÆÀnge
 (
ch≠_°©e
 *);

127 
ch≠_°©e
 
ch≠
[
NUM_PPP
];

129 
¥Ÿít
 
ch≠_¥Ÿít
 = {

130 
PPP_CHAP
,

131 
Ch≠Inô
,

132 
Ch≠I≈ut
,

133 
Ch≠PrŸocﬁReje˘
,

134 
Ch≠LowîUp
,

135 
Ch≠LowîDown
,

136 
NULL
,

137 
NULL
,

139 
Ch≠PrötPkt
,

140 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL


149 
	}
};

160 
	$Ch≠AuthWôhPìr
(
unô
, *
our_«me
, 
dige°
)

162 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

164 
c°©e
->
ª•_«me
 = 
our_«me
;

165 
c°©e
->
ª•_ty≥
 = 
dige°
;

167 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
 ||

168 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

170 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_PENDING
;

179 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

180 
	}
}

187 
	$Ch≠AuthPìr
(
unô
, *
our_«me
, 
dige°
)

189 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

191 
c°©e
->
chÆ_«me
 = 
our_«me
;

192 
c°©e
->
chÆ_ty≥
 = 
dige°
;

194 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
 ||

195 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

197 
c°©e
->
£rvî°©e
 = 
CHAPSS_PENDING
;

201 
	`Ch≠GíChÆÀnge
(
c°©e
);

202 
	`Ch≠SídChÆÀnge
(
c°©e
);

203 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

204 
	}
}

214 
	$Ch≠Inô
(
unô
)

216 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

218 
	`BZERO
(
c°©e
, (*cstate));

219 
c°©e
->
unô
 = unit;

220 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

221 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

222 
c°©e
->
timeouâime
 = 
CHAP_DEFTIMEOUT
;

223 
c°©e
->
max_å™smôs
 = 
CHAP_DEFTRANSMITS
;

225 
	}
}

232 
	$Ch≠ChÆÀngeTimeout
(*
¨g
)

234 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

238 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL_CHAL
 &&

239 
c°©e
->
£rvî°©e
 !
CHAPSS_RECHALLENGE
) {

243 i‡(
c°©e
->
chÆ_å™smôs
 >c°©e->
max_å™smôs
) {

245 
	`CHAPDEBUG
((
LOG_ERR
, "Peer failedÅoÑespondÅo CHAP challenge\n"));

246 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

247 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

251 
	`Ch≠SídChÆÀnge
(
c°©e
);

252 
	}
}

259 
	$Ch≠Re•⁄£Timeout
(*
¨g
)

261 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

264 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

268 
	`Ch≠SídRe•⁄£
(
c°©e
);

269 
	}
}

276 
	$Ch≠RechÆÀnge
(*
¨g
)

278 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

281 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_OPEN
) {

285 
	`Ch≠GíChÆÀnge
(
c°©e
);

286 
	`Ch≠SídChÆÀnge
(
c°©e
);

287 
c°©e
->
£rvî°©e
 = 
CHAPSS_RECHALLENGE
;

288 
	}
}

297 
	$Ch≠LowîUp
(
unô
)

299 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

301 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
) {

302 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_CLOSED
;

303 } i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

304 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

307 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
) {

308 
c°©e
->
£rvî°©e
 = 
CHAPSS_CLOSED
;

309 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

310 
	`Ch≠GíChÆÀnge
(
c°©e
);

311 
	`Ch≠SídChÆÀnge
(
c°©e
);

312 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

314 
	}
}

323 
	$Ch≠LowîDown
(
unô
)

325 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

328 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL_CHAL
 ||

329 
c°©e
->
£rvî°©e
 =
CHAPSS_RECHALLENGE
) {

330 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

331 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN


332 && 
c°©e
->
chÆ_öãrvÆ
 != 0) {

333 
	`UNTIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
);

335 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

336 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

338 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

339 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

340 
	}
}

347 
	$Ch≠PrŸocﬁReje˘
(
unô
)

349 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

351 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL
 &&

352 
c°©e
->
£rvî°©e
 !
CHAPSS_CLOSED
) {

353 
	`auth_≥î_Áû
(
unô
, 
PPP_CHAP
);

355 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_INITIAL
 &&

356 
c°©e
->
˛õ¡°©e
 !
CHAPCS_CLOSED
) {

357 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_CHAP
);

359 
	`Ch≠LowîDown
(
unô
);

360 
	}
}

367 
	$Ch≠I≈ut
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
∑ckë_Àn
)

369 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

370 
u_ch¨
 *
öp
;

371 
u_ch¨
 
code
, 
id
;

372 
Àn
;

378 
öp
 = 
ö∑ckë
;

379 i‡(
∑ckë_Àn
 < 
CHAP_HEADERLEN
) {

380 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd short header.\n"));

383 
	`GETCHAR
(
code
, 
öp
);

384 
	`GETCHAR
(
id
, 
öp
);

385 
	`GETSHORT
(
Àn
, 
öp
);

386 i‡(
Àn
 < 
CHAP_HEADERLEN
) {

387 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd illegalÜength.\n"));

390 i‡(
Àn
 > 
∑ckë_Àn
) {

391 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd shortÖacket.\n"));

394 
Àn
 -
CHAP_HEADERLEN
;

399 
code
) {

400 
CHAP_CHALLENGE
:

401 
	`Ch≠Re˚iveChÆÀnge
(
c°©e
, 
öp
, 
id
, 
Àn
);

404 
CHAP_RESPONSE
:

405 
	`Ch≠Re˚iveRe•⁄£
(
c°©e
, 
öp
, 
id
, 
Àn
);

408 
CHAP_FAILURE
:

409 
	`Ch≠Re˚iveFaûuª
(
c°©e
, 
öp
, 
id
, 
Àn
);

412 
CHAP_SUCCESS
:

413 
	`Ch≠Re˚iveSuc˚ss
(
c°©e
, 
öp
, 
id
, 
Àn
);

417 
	`CHAPDEBUG
((
LOG_WARNING
, "Unknow¿CHAP codê(%dËª˚ived.\n", 
code
));

420 
	}
}

427 
	$Ch≠Re˚iveChÆÀnge
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

429 
rchÆÀnge_Àn
;

430 
u_ch¨
 *
rchÆÀnge
;

431 
£¸ë_Àn
;

432 
£¸ë
[
MAXSECRETLEN
];

433 
rho°«me
[256];

434 
MD5_CTX
 
mdC⁄ãxt
;

435 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

437 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: Rcvd id %d.\n", 
id
));

438 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_CLOSED
 ||

439 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

440 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge: in state %d\n",

441 
c°©e
->
˛õ¡°©e
));

445 i‡(
Àn
 < 2) {

446 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

450 
	`GETCHAR
(
rchÆÀnge_Àn
, 
öp
);

451 
Àn
 - (
u_ch¨
Ë+ 
rchÆÀnge_Àn
;

452 i‡(
Àn
 < 0) {

453 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

456 
rchÆÀnge
 = 
öp
;

457 
	`INCPTR
(
rchÆÀnge_Àn
, 
öp
);

459 i‡(
Àn
 >(
rho°«me
)) {

460 
Àn
 = (
rho°«me
) - 1;

462 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

463 
rho°«me
[
Àn
] = '\000';

465 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge:Ñe˚ivedÇamêfõld '%s'\n", 
rho°«me
));

468 i‡(
µp_£âögs
.
ªmŸe_«me
[0] !0 && (µp_£âögs.
ex∂icô_ªmŸe
 || 
rho°«me
[0] == 0)) {

469 
	`°∫˝y
(
rho°«me
, 
µp_£âögs
.
ªmŸe_«me
, (rhostname));

470 
rho°«me
[(rhostname) - 1] = 0;

471 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: usög '%s'á†ªmŸê«me\n", 
rho°«me
));

475 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, c°©e->
ª•_«me
, 
rho°«me
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

476 
£¸ë_Àn
 = 0;

477 
	`CHAPDEBUG
((
LOG_WARNING
, "NÿCHAP se¸ë found f‹áuthítiˇtög u†tÿ%s\n", 
rho°«me
));

481 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

482 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

485 
c°©e
->
ª•_id
 = 
id
;

486 
c°©e
->
ª•_å™smôs
 = 0;

489 
c°©e
->
ª•_ty≥
) {

491 
CHAP_DIGEST_MD5
:

492 
	`MD5Inô
(&
mdC⁄ãxt
);

493 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
ª•_id
, 1);

494 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

495 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
rchÆÀnge
, 
rchÆÀnge_Àn
);

496 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

497 
	`BCOPY
(
hash
, 
c°©e
->
ª•⁄£
, 
MD5_SIGNATURE_SIZE
);

498 
c°©e
->
ª•_Àngth
 = 
MD5_SIGNATURE_SIZE
;

501 #ifde‡
CHAPMS


502 
CHAP_MICROSOFT
:

503 
	`Ch≠MS
(
c°©e
, 
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
);

508 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
ª•_ty≥
));

512 
	`BZERO
(
£¸ë
, (secret));

513 
	`Ch≠SídRe•⁄£
(
c°©e
);

514 
	}
}

521 
	$Ch≠Re˚iveRe•⁄£
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

523 
u_ch¨
 *
ªmmd
, 
ªmmd_Àn
;

524 
£¸ë_Àn
, 
ﬁd_°©e
;

525 
code
;

526 
rho°«me
[256];

527 
MD5_CTX
 
mdC⁄ãxt
;

528 
£¸ë
[
MAXSECRETLEN
];

529 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

531 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£: Rcvd id %d.\n", 
id
));

533 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_CLOSED
 ||

534 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

535 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse: in state %d\n",

536 
c°©e
->
£rvî°©e
));

540 i‡(
id
 !
c°©e
->
chÆ_id
) {

549 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN
) {

550 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_SUCCESS
);

553 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_BADAUTH
) {

554 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_FAILURE
);

558 i‡(
Àn
 < 2) {

559 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

562 
	`GETCHAR
(
ªmmd_Àn
, 
öp
);

563 
ªmmd
 = 
öp
;

564 
	`INCPTR
(
ªmmd_Àn
, 
öp
);

566 
Àn
 - (
u_ch¨
Ë+ 
ªmmd_Àn
;

567 i‡(
Àn
 < 0) {

568 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

572 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

574 i‡(
Àn
 >(
rho°«me
)) {

575 
Àn
 = (
rho°«me
) - 1;

577 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

578 
rho°«me
[
Àn
] = '\000';

580 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£:Ñe˚ivedÇamêfõld: %s\n", 
rho°«me
));

586 
code
 = 
CHAP_FAILURE
;

587 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, 
rho°«me
, c°©e->
chÆ_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

589 
	`CHAPDEBUG
((
LOG_WARNING
, "No CHAP secret found foráuthenticating %s\n",

590 
rho°«me
));

593 
c°©e
->
chÆ_ty≥
) {

595 
CHAP_DIGEST_MD5
:

596 i‡(
ªmmd_Àn
 !
MD5_SIGNATURE_SIZE
) {

599 
	`MD5Inô
(&
mdC⁄ãxt
);

600 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
chÆ_id
, 1);

601 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

602 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
c°©e
->
chÆÀnge
, c°©e->
chÆ_Àn
);

603 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

606 i‡(
	`memcmp
 (
hash
, 
ªmmd
, 
MD5_SIGNATURE_SIZE
) == 0) {

607 
code
 = 
CHAP_SUCCESS
;

612 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
chÆ_ty≥
));

616 
	`BZERO
(
£¸ë
, (secret));

617 
	`Ch≠SídSètus
(
c°©e
, 
code
);

619 i‡(
code
 =
CHAP_SUCCESS
) {

620 
ﬁd_°©e
 = 
c°©e
->
£rvî°©e
;

621 
c°©e
->
£rvî°©e
 = 
CHAPSS_OPEN
;

622 i‡(
ﬁd_°©e
 =
CHAPSS_INITIAL_CHAL
) {

623 
	`auth_≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
, 
rho°«me
, 
Àn
);

625 i‡(
c°©e
->
chÆ_öãrvÆ
 != 0) {

626 
	`TIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
, c°©e->
chÆ_öãrvÆ
);

629 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPÖeeráuthentication failed\n"));

630 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

631 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

633 
	}
}

639 
	$Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

641 
	`LWIP_UNUSED_ARG
(
id
);

642 
	`LWIP_UNUSED_ARG
(
öp
);

644 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: Rcvd id %d.\n", 
id
));

646 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_OPEN
) {

651 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

653 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

657 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

662 i‡(
Àn
 > 0) {

663 
	`PRINTMSG
(
öp
, 
Àn
);

666 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_OPEN
;

668 
	`auth_wôh≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
);

669 
	}
}

676 
	$Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

678 
	`LWIP_UNUSED_ARG
(
id
);

679 
	`LWIP_UNUSED_ARG
(
öp
);

681 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: Rcvd id %d.\n", 
id
));

683 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

685 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

689 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

694 i‡(
Àn
 > 0) {

695 
	`PRINTMSG
(
öp
, 
Àn
);

698 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPáuthentication failed\n"));

699 
	`auth_wôh≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

700 
	}
}

707 
	$Ch≠SídChÆÀnge
(
ch≠_°©e
 *
c°©e
)

709 
u_ch¨
 *
ouç
;

710 
chÆ_Àn
, 
«me_Àn
;

711 
ouéí
;

713 
chÆ_Àn
 = 
c°©e
->chal_len;

714 
«me_Àn
 = 
	`°æí
(
c°©e
->
chÆ_«me
);

715 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
chÆ_Àn
 + 
«me_Àn
;

716 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

718 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

720 
	`PUTCHAR
(
CHAP_CHALLENGE
, 
ouç
);

721 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

722 
	`PUTSHORT
(
ouéí
, 
ouç
);

724 
	`PUTCHAR
(
chÆ_Àn
, 
ouç
);

725 
	`BCOPY
(
c°©e
->
chÆÀnge
, 
ouç
, 
chÆ_Àn
);

726 
	`INCPTR
(
chÆ_Àn
, 
ouç
);

728 
	`BCOPY
(
c°©e
->
chÆ_«me
, 
ouç
, 
«me_Àn
);

730 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

732 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídChÆÀnge: Síàid %d.\n", 
c°©e
->
chÆ_id
));

734 
	`TIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
, c°©e->
timeouâime
);

735 ++
c°©e
->
chÆ_å™smôs
;

736 
	}
}

743 
	$Ch≠SídSètus
(
ch≠_°©e
 *
c°©e
, 
code
)

745 
u_ch¨
 *
ouç
;

746 
ouéí
, 
msgÀn
;

747 
msg
[256];

749 i‡(
code
 =
CHAP_SUCCESS
) {

750 
	`°r˝y
(
msg
, "Welcome!");

752 
	`°r˝y
(
msg
, "I don'tÜike you. Go 'way.");

754 
msgÀn
 = 
	`°æí
(
msg
);

756 
ouéí
 = 
CHAP_HEADERLEN
 + 
msgÀn
;

757 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

759 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

761 
	`PUTCHAR
(
code
, 
ouç
);

762 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

763 
	`PUTSHORT
(
ouéí
, 
ouç
);

764 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

765 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

767 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídSètus: Síàcodê%d, id %d.\n", 
code
, 
c°©e
->
chÆ_id
));

768 
	}
}

778 
	$Ch≠GíChÆÀnge
(
ch≠_°©e
 *
c°©e
)

780 
chÆ_Àn
;

781 
u_ch¨
 *
±r
 = 
c°©e
->
chÆÀnge
;

782 
i
;

786 
chÆ_Àn
 = ()

787 ((((
	`magic
() >> 16) *

788 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) >> 16)

789 + 
MIN_CHALLENGE_LENGTH
);

790 
c°©e
->
chÆ_Àn
 = chal_len;

791 
c°©e
->
chÆ_id
 = ++c°©e->
id
;

792 
c°©e
->
chÆ_å™smôs
 = 0;

795 
i
 = 0; i < 
chÆ_Àn
; i++ ) {

796 *
±r
++ = (Ë(
	`magic
() & 0xff);

798 
	}
}

806 
	$Ch≠SídRe•⁄£
(
ch≠_°©e
 *
c°©e
)

808 
u_ch¨
 *
ouç
;

809 
ouéí
, 
md_Àn
, 
«me_Àn
;

811 
md_Àn
 = 
c°©e
->
ª•_Àngth
;

812 
«me_Àn
 = 
	`°æí
(
c°©e
->
ª•_«me
);

813 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
md_Àn
 + 
«me_Àn
;

814 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

816 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

818 
	`PUTCHAR
(
CHAP_RESPONSE
, 
ouç
);

819 
	`PUTCHAR
(
c°©e
->
ª•_id
, 
ouç
);

820 
	`PUTSHORT
(
ouéí
, 
ouç
);

822 
	`PUTCHAR
(
md_Àn
, 
ouç
);

823 
	`BCOPY
(
c°©e
->
ª•⁄£
, 
ouç
, 
md_Àn
);

824 
	`INCPTR
(
md_Àn
, 
ouç
);

826 
	`BCOPY
(
c°©e
->
ª•_«me
, 
ouç
, 
«me_Àn
);

829 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

831 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_RESPONSE
;

832 
	`TIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
, c°©e->
timeouâime
);

833 ++
c°©e
->
ª•_å™smôs
;

834 
	}
}

837 *
	gCh≠Codíames
[] = {

844 
	$Ch≠PrötPkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

846 
code
, 
id
, 
Àn
;

847 
˛í
, 
∆í
;

848 
u_ch¨
 
x
;

850 i‡(
∂í
 < 
CHAP_HEADERLEN
) {

853 
	`GETCHAR
(
code
, 
p
);

854 
	`GETCHAR
(
id
, 
p
);

855 
	`GETSHORT
(
Àn
, 
p
);

856 i‡(
Àn
 < 
CHAP_HEADERLEN
 ||Üí > 
∂í
) {

859 i‡(
code
 >1 && codê<(
Ch≠Codíames
) / (*)) {

860 
	`¥öãr
(
¨g
, " %s", 
Ch≠Codíames
[
code
-1]);

862 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

864 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

865 
Àn
 -
CHAP_HEADERLEN
;

866 
code
) {

867 
CHAP_CHALLENGE
:

868 
CHAP_RESPONSE
:

869 i‡(
Àn
 < 1) {

872 
˛í
 = 
p
[0];

873 i‡(
Àn
 < 
˛í
 + 1) {

876 ++
p
;

877 
∆í
 = 
Àn
 - 
˛í
 - 1;

878 
	`¥öãr
(
¨g
, " <");

879 ; 
˛í
 > 0; --clen) {

880 
	`GETCHAR
(
x
, 
p
);

881 
	`¥öãr
(
¨g
, "%.2x", 
x
);

883 
	`¥öãr
(
¨g
, ">,Çamê%.*Z", 
∆í
, 
p
);

885 
CHAP_FAILURE
:

886 
CHAP_SUCCESS
:

887 
	`¥öãr
(
¨g
, " %.*Z", 
Àn
, 
p
);

890 
˛í
 = 
Àn
; clen > 0; --clen) {

891 
	`GETCHAR
(
x
, 
p
);

892 
	`¥öãr
(
¨g
, " %.2x", 
x
);

896  
Àn
 + 
CHAP_HEADERLEN
;

897 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chap.h

68 #i‚de‡
CHAP_H


69 
	#CHAP_H


	)

76 
	#CHAP_HEADERLEN
 4

	)

82 
	#CHAP_DIGEST_MD5
 5

	)

83 
	#MD5_SIGNATURE_SIZE
 16

	)

84 
	#CHAP_MICROSOFT
 0x80

	)

85 
	#MS_CHAP_RESPONSE_LEN
 49

	)

87 
	#CHAP_CHALLENGE
 1

	)

88 
	#CHAP_RESPONSE
 2

	)

89 
	#CHAP_SUCCESS
 3

	)

90 
	#CHAP_FAILURE
 4

	)

95 
	#MIN_CHALLENGE_LENGTH
 32

	)

96 
	#MAX_CHALLENGE_LENGTH
 64

	)

97 
	#MAX_RESPONSE_LENGTH
 64

	)

102 
	#CHAPCS_INITIAL
 0

	)

103 
	#CHAPCS_CLOSED
 1

	)

104 
	#CHAPCS_PENDING
 2

	)

105 
	#CHAPCS_LISTEN
 3

	)

106 
	#CHAPCS_RESPONSE
 4

	)

107 
	#CHAPCS_OPEN
 5

	)

112 
	#CHAPSS_INITIAL
 0

	)

113 
	#CHAPSS_CLOSED
 1

	)

114 
	#CHAPSS_PENDING
 2

	)

115 
	#CHAPSS_INITIAL_CHAL
 3

	)

116 
	#CHAPSS_OPEN
 4

	)

117 
	#CHAPSS_RECHALLENGE
 5

	)

118 
	#CHAPSS_BADAUTH
 6

	)

128 
	sch≠_°©e
 {

129 
	munô
;

130 
	m˛õ¡°©e
;

131 
	m£rvî°©e
;

132 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

133 
u_ch¨
 
	mchÆ_Àn
;

134 
u_ch¨
 
	mchÆ_id
;

135 
u_ch¨
 
	mchÆ_ty≥
;

136 
u_ch¨
 
	mid
;

137 *
	mchÆ_«me
;

138 
	mchÆ_öãrvÆ
;

139 
	mtimeouâime
;

140 
	mmax_å™smôs
;

141 
	mchÆ_å™smôs
;

142 
	mª•_å™smôs
;

143 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

144 
u_ch¨
 
	mª•_Àngth
;

145 
u_ch¨
 
	mª•_id
;

146 
u_ch¨
 
	mª•_ty≥
;

147 *
	mª•_«me
;

148 } 
	tch≠_°©e
;

154 
ch≠_°©e
 
ch≠
[];

156 
¥Ÿít
 
ch≠_¥Ÿít
;

163 
Ch≠AuthWôhPìr
 (, *, );

164 
Ch≠AuthPìr
 (, *, );

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chpms.c

67 
	#USE_CRYPT


	)

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
MSCHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"md4.h
"

79 #i‚de‡
USE_CRYPT


80 
	~"des.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

95 
u_ch¨
 
	mLANM™Re•
[24];

96 
u_ch¨
 
	mNTRe•
[24];

97 
u_ch¨
 
	mU£NT
;

98 } 
	tMS_Ch≠Re•⁄£
;

109 
£tkey
(const *);

110 
í¸y±
(*, );

112 
DesEn¸y±
 (
u_ch¨
 *, u_char *, u_char *);

113 
MakeKey
 (
u_ch¨
 *, u_char *);

115 #ifde‡
USE_CRYPT


116 
Ex∑nd
 (
u_ch¨
 *, u_char *);

117 
Cﬁœp£
 (
u_ch¨
 *, u_char *);

120 
ChÆÀngeRe•⁄£
(

121 
u_ch¨
 *
chÆÀnge
,

122 
u_ch¨
 *
pwHash
,

123 
u_ch¨
 *
ª•⁄£


125 
Ch≠MS_NT
(

126 *
rchÆÀnge
,

127 
rchÆÀnge_Àn
,

128 *
£¸ë
,

129 
£¸ë_Àn
,

130 
MS_Ch≠Re•⁄£
 *
ª•⁄£


132 
u_ch¨
 
Gë7Bôs
(

133 
u_ch¨
 *
öput
,

134 
°¨tBô


142 
	$Ch≠MS
–
ch≠_°©e
 *
c°©e
, *
rchÆÀnge
, 
rchÆÀnge_Àn
, *
£¸ë
, 
£¸ë_Àn
)

144 
MS_Ch≠Re•⁄£
 
ª•⁄£
;

145 #ifde‡
MSLANMAN


146 
ms_œnm™
;

150 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠MS: se¸ë i†'%.*s'\n", 
£¸ë_Àn
, 
£¸ë
));

152 
	`BZERO
(&
ª•⁄£
, (response));

155 
	`Ch≠MS_NT
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

157 #ifde‡
MSLANMAN


158 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

161 
ª•⁄£
.
U£NT
 = !
ms_œnm™
;

163 
ª•⁄£
.
U£NT
 = 1;

166 
	`BCOPY
(&
ª•⁄£
, 
c°©e
->ª•⁄£, 
MS_CHAP_RESPONSE_LEN
);

167 
c°©e
->
ª•_Àngth
 = 
MS_CHAP_RESPONSE_LEN
;

168 
	}
}

175 
	$ChÆÀngeRe•⁄£
–
u_ch¨
 *
chÆÀnge
,

176 
u_ch¨
 *
pwHash
,

177 
u_ch¨
 *
ª•⁄£
 )

179 
ZPassw‹dHash
[21];

181 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

182 
	`BCOPY
(
pwHash
, 
ZPassw‹dHash
, 16);

185 
	`log_∑ckë
(
ZPassw‹dHash
, (ZPassw‹dHash), "ChÆÀngeRe•⁄£ - ZPassw‹dHash", 
LOG_DEBUG
);

188 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 0, 
ª•⁄£
 + 0);

189 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 7, 
ª•⁄£
 + 8);

190 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 14, 
ª•⁄£
 + 16);

193 
	`log_∑ckë
(
ª•⁄£
, 24, "ChÆÀngeRe•⁄£ -Ñe•⁄£", 
LOG_DEBUG
);

195 
	}
}

198 #ifde‡
USE_CRYPT


200 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

201 
u_ch¨
 *
key
,

202 
u_ch¨
 *
cùhî
 )

204 
u_ch¨
 
des_key
[8];

205 
u_ch¨
 
¸y±_key
[66];

206 
u_ch¨
 
des_öput
[66];

208 
	`MakeKey
(
key
, 
des_key
);

210 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

211 
	`£tkey
(
¸y±_key
);

214 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

215 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

218 
	`Ex∑nd
(
˛ór
, 
des_öput
);

219 
	`í¸y±
(
des_öput
, 0);

220 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

223 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

224 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

226 
	}
}

231 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

232 
u_ch¨
 *
key
,

233 
u_ch¨
 *
cùhî
 )

235 
des_cblock
 
des_key
;

236 
des_key_scheduÀ
 
key_scheduÀ
;

238 
	`MakeKey
(
key
, 
des_key
);

240 
	`des_£t_key
(&
des_key
, 
key_scheduÀ
);

243 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

244 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

247 
	`des_ecb_í¸y±
((
des_cblock
 *)
˛ór
, (des_cblock *)
cùhî
, 
key_scheduÀ
, 1);

250 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

251 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

253 
	}
}

258 
u_ch¨


259 
	$Gë7Bôs
–
u_ch¨
 *
öput
, 
°¨tBô
)

261 
w‹d
;

263 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

264 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

266 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

268  
w‹d
 & 0xFE;

269 
	}
}

271 #ifde‡
USE_CRYPT


278 
	$Ex∑nd
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

280 
j
, 
c
;

281 
i
;

283 
i
 = 0; i < 64; 
ö
++){

284 
c
 = *
ö
;

285 
j
 = 7; j >= 0; j--) {

286 *
out
++ = (
c
 >> 
j
) & 01;

288 
i
 += 8;

290 
	}
}

295 
	$Cﬁœp£
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

297 
j
;

298 
i
;

299 
c
;

301 
i
 = 0; i < 64; i +8, 
out
++) {

302 
c
 = 0;

303 
j
 = 7; j >0; j--, 
ö
++) {

304 
c
 |*
ö
 << 
j
;

306 *
out
 = 
c
 & 0xff;

308 
	}
}

312 
	$MakeKey
–
u_ch¨
 *
key
,

313 
u_ch¨
 *
des_key
 )

315 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

316 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

317 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

318 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

319 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

320 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

321 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

322 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

324 #i‚de‡
USE_CRYPT


325 
	`des_£t_odd_∑rôy
((
des_cblock
 *)
des_key
);

329 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",

330 
key
[0], key[1], key[2], key[3], key[4], key[5], key[6]));

331 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

332 
des_key
[0], des_key[1], des_key[2], des_key[3], des_key[4], des_key[5], des_key[6], des_key[7]));

334 
	}
}

337 
	$Ch≠MS_NT
–*
rchÆÀnge
,

338 
rchÆÀnge_Àn
,

339 *
£¸ë
,

340 
£¸ë_Àn
,

341 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

343 
i
;

344 
MD°ru˘
 
md4C⁄ãxt
;

345 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

346 
low_byã_fú°
 = -1;

350 
	`BZERO
(
unicodePassw‹d
, (unicodePassword));

351 
i
 = 0; i < 
£¸ë_Àn
; i++) {

352 
unicodePassw‹d
[
i
 * 2] = (
u_ch¨
)
£¸ë
[i];

354 
	`MDbegö
(&
md4C⁄ãxt
);

355 
	`MDupd©e
(&
md4C⁄ãxt
, 
unicodePassw‹d
, 
£¸ë_Àn
 * 2 * 8);

357 i‡(
low_byã_fú°
 == -1) {

358 
low_byã_fú°
 = (
	`ht⁄s
(()1) != 1);

360 i‡(
low_byã_fú°
 == 0) {

361 
	`MDªvî£
((
u_l⁄g
 *)&
md4C⁄ãxt
);

364 
	`MDupd©e
(&
md4C⁄ãxt
, 
NULL
, 0);

366 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, (*)
md4C⁄ãxt
.
buf„r
, 
ª•⁄£
->
NTRe•
);

367 
	}
}

369 #ifde‡
MSLANMAN


370 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

373 
	$Ch≠MS_LANM™
–*
rchÆÀnge
,

374 
rchÆÀnge_Àn
,

375 *
£¸ë
,

376 
£¸ë_Àn
,

377 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

379 
i
;

380 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

381 
u_ch¨
 
Passw‹dHash
[16];

384 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

385 
i
 = 0; i < 
£¸ë_Àn
; i++) {

386 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

388 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 0, 
Passw‹dHash
 + 0 );

389 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 7, 
Passw‹dHash
 + 8 );

390 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
ª•⁄£
->
LANM™Re•
);

391 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chpms.h

57 #i‚de‡
CHPMS_H


58 
	#CHPMS_H


	)

60 
	#MAX_NT_PASSWORD
 256

	)

62 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/fsm.c

58 
	~"lwù/›t.h
"

60 #i‡
PPP_SUPPORT


62 
	~"µp.h
"

63 
	~"µpdebug.h
"

65 
	~"fsm.h
"

72 #i‡
PPP_DEBUG


74 c⁄° *
	gµ≥º_°ªº
[] = {

97 
fsm_timeout
 (*);

98 
fsm_rc⁄‰eq
 (
fsm
 *, 
u_ch¨
, u_char *, );

99 
fsm_rc⁄Áck
 (
fsm
 *, , 
u_ch¨
 *, );

100 
fsm_rc⁄‚akªj
 (
fsm
 *, , , 
u_ch¨
 *, );

101 
fsm_πîmªq
 (
fsm
 *, , 
u_ch¨
 *, );

102 
fsm_πîmack
 (
fsm
 *);

103 
fsm_rcodîej
 (
fsm
 *, 
u_ch¨
 *, );

104 
fsm_sc⁄‰eq
 (
fsm
 *, );

106 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

117 
	g≥î_mru
[
NUM_PPP
];

130 
	$fsm_öô
(
fsm
 *
f
)

132 
f
->
°©e
 = 
LS_INITIAL
;

133 
f
->
Êags
 = 0;

134 
f
->
id
 = 0;

135 
f
->
timeouâime
 = 
FSM_DEFTIMEOUT
;

136 
f
->
maxc⁄‰eqå™smôs
 = 
FSM_DEFMAXCONFREQS
;

137 
f
->
maxãrmå™smôs
 = 
FSM_DEFMAXTERMREQS
;

138 
f
->
max«klo›s
 = 
FSM_DEFMAXNAKLOOPS
;

139 
f
->
ãrm_ªas⁄_Àn
 = 0;

140 
	}
}

147 
	$fsm_lowîup
(
fsm
 *
f
)

149 
ﬁdSèã
 = 
f
->
°©e
;

151 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

153  
f
->
°©e
 ) {

154 
LS_INITIAL
:

155 
f
->
°©e
 = 
LS_CLOSED
;

158 
LS_STARTING
:

159 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

160 
f
->
°©e
 = 
LS_STOPPED
;

163 
	`fsm_sc⁄‰eq
(
f
, 0);

164 
f
->
°©e
 = 
LS_REQSENT
;

169 
	`FSMDEBUG
((
LOG_INFO
, "%s: UpÉvent in state %d (%s)!\n",

170 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

173 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerup state %d (%s) -> %d (%s)\n",

174 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

175 
	}
}

184 
	$fsm_lowîdown
(
fsm
 *
f
)

186 
ﬁdSèã
 = 
f
->
°©e
;

188 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

190  
f
->
°©e
 ) {

191 
LS_CLOSED
:

192 
f
->
°©e
 = 
LS_INITIAL
;

195 
LS_STOPPED
:

196 
f
->
°©e
 = 
LS_STARTING
;

197 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

198 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

202 
LS_CLOSING
:

203 
f
->
°©e
 = 
LS_INITIAL
;

204 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

207 
LS_STOPPING
:

208 
LS_REQSENT
:

209 
LS_ACKRCVD
:

210 
LS_ACKSENT
:

211 
f
->
°©e
 = 
LS_STARTING
;

212 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

215 
LS_OPENED
:

216 if–
f
->
ˇŒbacks
->
down
 ) {

217 (*
f
->
ˇŒbacks
->
down
)(f);

219 
f
->
°©e
 = 
LS_STARTING
;

223 
	`FSMDEBUG
((
LOG_INFO
, "%s: DownÉvent in state %d (%s)!\n",

224 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

227 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerdown state %d (%s) -> %d (%s)\n",

228 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

229 
	}
}

236 
	$fsm_›í
(
fsm
 *
f
)

238 
ﬁdSèã
 = 
f
->
°©e
;

240 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

242  
f
->
°©e
 ) {

243 
LS_INITIAL
:

244 
f
->
°©e
 = 
LS_STARTING
;

245 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

246 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

250 
LS_CLOSED
:

251 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

252 
f
->
°©e
 = 
LS_STOPPED
;

255 
	`fsm_sc⁄‰eq
(
f
, 0);

256 
f
->
°©e
 = 
LS_REQSENT
;

260 
LS_CLOSING
:

261 
f
->
°©e
 = 
LS_STOPPING
;

263 
LS_STOPPED
:

264 
LS_OPENED
:

265 if–
f
->
Êags
 & 
OPT_RESTART
 ) {

266 
	`fsm_lowîdown
(
f
);

267 
	`fsm_lowîup
(
f
);

272 
	`FSMDEBUG
((
LOG_INFO
, "%s: open state %d (%s) -> %d (%s)\n",

273 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

274 
	}
}

284 
	$fsm_˛o£
(
fsm
 *
f
, *
ªas⁄
)

286 
ﬁdSèã
 = 
f
->
°©e
;

288 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

290 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

291 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
? 0: 
	`°æí
(reason));

292  
f
->
°©e
 ) {

293 
LS_STARTING
:

294 
f
->
°©e
 = 
LS_INITIAL
;

296 
LS_STOPPED
:

297 
f
->
°©e
 = 
LS_CLOSED
;

299 
LS_STOPPING
:

300 
f
->
°©e
 = 
LS_CLOSING
;

303 
LS_REQSENT
:

304 
LS_ACKRCVD
:

305 
LS_ACKSENT
:

306 
LS_OPENED
:

307 if–
f
->
°©e
 !
LS_OPENED
 ) {

308 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

309 } if–
f
->
ˇŒbacks
->
down
 ) {

310 (*
f
->
ˇŒbacks
->
down
)(f);

313 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

314 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

315 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

316 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

317 --
f
->
ªå™smôs
;

319 
f
->
°©e
 = 
LS_CLOSING
;

323 
	`FSMDEBUG
((
LOG_INFO
, "%s: closeÑeason=%s state %d (%s) -> %d (%s)\n",

324 
	`PROTO_NAME
(
f
), 
ªas⁄
, 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

325 
	}
}

334 
	$fsm_sd©a
–
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, u_ch¨ *
d©a
, 
d©Æí
)

336 
u_ch¨
 *
ouç
;

337 
ouéí
;

340 
ouç
 = 
ouçackë_buf
[
f
->
unô
];

341 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
) {

342 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

344 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
) {

345 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

347 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

348 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

349 
	`PUTCHAR
(
code
, 
ouç
);

350 
	`PUTCHAR
(
id
, 
ouç
);

351 
	`PUTSHORT
(
ouéí
, 
ouç
);

352 
	`µpWrôe
(
f
->
unô
, 
ouçackë_buf
[f->unô], 
ouéí
 + 
PPP_HDRLEN
);

353 
	`FSMDEBUG
((
LOG_INFO
, "fsm_sdata(%s): Sent code %d,%d,%d.\n",

354 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
ouéí
));

355 
	}
}

362 
	$fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
)

364 
u_ch¨
 *
öp
 = 
ö∑ckë
;

365 
u_ch¨
 
code
, 
id
;

366 
Àn
;

372 i‡(
l
 < 
HEADERLEN
) {

373 
	`FSMDEBUG
((
LOG_WARNING
, "fsm_input(%x): Rcvd short header.\n",

374 
f
->
¥Ÿocﬁ
));

377 
	`GETCHAR
(
code
, 
öp
);

378 
	`GETCHAR
(
id
, 
öp
);

379 
	`GETSHORT
(
Àn
, 
öp
);

380 i‡(
Àn
 < 
HEADERLEN
) {

381 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd illegalÜength.\n",

382 
f
->
¥Ÿocﬁ
));

385 i‡(
Àn
 > 
l
) {

386 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd shortÖacket.\n",

387 
f
->
¥Ÿocﬁ
));

390 
Àn
 -
HEADERLEN
;

392 if–
f
->
°©e
 =
LS_INITIAL
 || f->°©ê=
LS_STARTING
 ) {

393 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): RcvdÖacket in state %d (%s).\n",

394 
f
->
¥Ÿocﬁ
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

397 
	`FSMDEBUG
((
LOG_INFO
, "fsm_öput(%s):%d,%d,%d\n", 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
l
));

401 
code
) {

402 
CONFREQ
:

403 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

406 
CONFACK
:

407 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

410 
CONFNAK
:

411 
CONFREJ
:

412 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

415 
TERMREQ
:

416 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

419 
TERMACK
:

420 
	`fsm_πîmack
(
f
);

423 
CODEREJ
:

424 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

428 if–!
f
->
ˇŒbacks
->
extcode
 ||

429 !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) ) {

430 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

434 
	}
}

443 
	$fsm_¥Ÿªje˘
(
fsm
 *
f
)

445  
f
->
°©e
 ) {

446 
LS_CLOSING
:

447 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

449 
LS_CLOSED
:

450 
f
->
°©e
 = 
LS_CLOSED
;

451 if–
f
->
ˇŒbacks
->
föished
 ) {

452 (*
f
->
ˇŒbacks
->
föished
)(f);

456 
LS_STOPPING
:

457 
LS_REQSENT
:

458 
LS_ACKRCVD
:

459 
LS_ACKSENT
:

460 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

462 
LS_STOPPED
:

463 
f
->
°©e
 = 
LS_STOPPED
;

464 if–
f
->
ˇŒbacks
->
föished
 ) {

465 (*
f
->
ˇŒbacks
->
föished
)(f);

469 
LS_OPENED
:

470 if–
f
->
ˇŒbacks
->
down
 ) {

471 (*
f
->
ˇŒbacks
->
down
)(f);

474 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

475 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

476 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

477 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

478 --
f
->
ªå™smôs
;

480 
f
->
°©e
 = 
LS_STOPPING
;

484 
	`FSMDEBUG
((
LOG_INFO
, "%s: Protocol-rejectÉvent in state %d (%s)!\n",

485 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

487 
	}
}

501 
	$fsm_timeout
(*
¨g
)

503 
fsm
 *
f
 = (fsm *Ë
¨g
;

505 
f
->
°©e
) {

506 
LS_CLOSING
:

507 
LS_STOPPING
:

508 if–
f
->
ªå™smôs
 <= 0 ) {

509 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Terminate-Request state=%d (%s)\n",

510 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

514 
f
->
°©e
 = (f->°©ê=
LS_CLOSING
)? 
LS_CLOSED
: 
LS_STOPPED
;

515 if–
f
->
ˇŒbacks
->
föished
 ) {

516 (*
f
->
ˇŒbacks
->
föished
)(f);

519 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Terminate-Requests state=%d (%s)\n",

520 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

522 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

523 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

524 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

525 --
f
->
ªå™smôs
;

529 
LS_REQSENT
:

530 
LS_ACKRCVD
:

531 
LS_ACKSENT
:

532 i‡(
f
->
ªå™smôs
 <= 0) {

533 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Config-Requests state=%d (%s)\n",

534 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

535 
f
->
°©e
 = 
LS_STOPPED
;

536 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 ) {

537 (*
f
->
ˇŒbacks
->
föished
)(f);

540 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Config-Request state=%d (%s)\n",

541 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

543 i‡(
f
->
ˇŒbacks
->
ªå™smô
) {

544 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

546 
	`fsm_sc⁄‰eq
(
f
, 1);

547 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

548 
f
->
°©e
 = 
LS_REQSENT
;

554 
	`FSMDEBUG
((
LOG_INFO
, "%s: TimeoutÉvent in state %d (%s)!\n",

555 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

557 
	}
}

564 
	$fsm_rc⁄‰eq
(
fsm
 *
f
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

566 
code
, 
ªje˘_if_dißgªe
;

568 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n",

569 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

570  
f
->
°©e
 ) {

571 
LS_CLOSED
:

573 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

575 
LS_CLOSING
:

576 
LS_STOPPING
:

579 
LS_OPENED
:

581 if–
f
->
ˇŒbacks
->
down
 ) {

582 (*
f
->
ˇŒbacks
->
down
)(f);

584 
	`fsm_sc⁄‰eq
(
f
, 0);

587 
LS_STOPPED
:

589 
	`fsm_sc⁄‰eq
(
f
, 0);

590 
f
->
°©e
 = 
LS_REQSENT
;

598 i‡(
f
->
ˇŒbacks
->
ªqci
) {

599 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

600 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

601 } i‡(
Àn
) {

602 
code
 = 
CONFREJ
;

604 
code
 = 
CONFACK
;

608 
	`fsm_sd©a
(
f
, (
u_ch¨
)
code
, 
id
, 
öp
, 
Àn
);

610 i‡(
code
 =
CONFACK
) {

611 i‡(
f
->
°©e
 =
LS_ACKRCVD
) {

612 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

613 
f
->
°©e
 = 
LS_OPENED
;

614 i‡(
f
->
ˇŒbacks
->
up
) {

615 (*
f
->
ˇŒbacks
->
up
)(f);

618 
f
->
°©e
 = 
LS_ACKSENT
;

620 
f
->
«klo›s
 = 0;

623 i‡(
f
->
°©e
 !
LS_ACKRCVD
) {

624 
f
->
°©e
 = 
LS_REQSENT
;

626 if–
code
 =
CONFNAK
 ) {

627 ++
f
->
«klo›s
;

630 
	}
}

637 
	$fsm_rc⁄Áck
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

639 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",

640 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

642 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

645 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
): (len == 0)) ) {

647 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad Ack (length %d)\n",

648 
	`PROTO_NAME
(
f
), 
Àn
));

651 
f
->
£í_ack
 = 1;

653 
f
->
°©e
) {

654 
LS_CLOSED
:

655 
LS_STOPPED
:

656 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

659 
LS_REQSENT
:

660 
f
->
°©e
 = 
LS_ACKRCVD
;

661 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

664 
LS_ACKRCVD
:

666 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

667 
	`fsm_sc⁄‰eq
(
f
, 0);

668 
f
->
°©e
 = 
LS_REQSENT
;

671 
LS_ACKSENT
:

672 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

673 
f
->
°©e
 = 
LS_OPENED
;

674 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

675 i‡(
f
->
ˇŒbacks
->
up
) {

676 (*
f
->
ˇŒbacks
->
up
)(f);

680 
LS_OPENED
:

682 i‡(
f
->
ˇŒbacks
->
down
) {

683 (*
f
->
ˇŒbacks
->
down
)(f);

685 
	`fsm_sc⁄‰eq
(
f
, 0);

686 
f
->
°©e
 = 
LS_REQSENT
;

689 
	}
}

696 
	$fsm_rc⁄‚akªj
(
fsm
 *
f
, 
code
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

698 (*
¥oc
Ë(
fsm
 *, 
u_ch¨
 *, );

699 
ªt
;

701 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",

702 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

704 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

707 
¥oc
 = (
code
 =
CONFNAK
)? 
f
->
ˇŒbacks
->
«kci
: f->ˇŒbacks->
ªjci
;

708 i‡(!
¥oc
 || !((
ªt
 = 
	`¥oc
(
f
, 
öp
, 
Àn
)))) {

710 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad %s (length %d)\n",

711 
	`PROTO_NAME
(
f
), (
code
==
CONFNAK
? "Nak": "ªje˘"), 
Àn
));

714 
f
->
£í_ack
 = 1;

716 
f
->
°©e
) {

717 
LS_CLOSED
:

718 
LS_STOPPED
:

719 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

722 
LS_REQSENT
:

723 
LS_ACKSENT
:

725 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

726 i‡(
ªt
 < 0) {

727 
f
->
°©e
 = 
LS_STOPPED
;

729 
	`fsm_sc⁄‰eq
(
f
, 0);

733 
LS_ACKRCVD
:

735 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

736 
	`fsm_sc⁄‰eq
(
f
, 0);

737 
f
->
°©e
 = 
LS_REQSENT
;

740 
LS_OPENED
:

742 i‡(
f
->
ˇŒbacks
->
down
) {

743 (*
f
->
ˇŒbacks
->
down
)(f);

745 
	`fsm_sc⁄‰eq
(
f
, 0);

746 
f
->
°©e
 = 
LS_REQSENT
;

749 
	}
}

756 
	$fsm_πîmªq
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
p
, 
Àn
)

758 
	`LWIP_UNUSED_ARG
(
p
);

760 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",

761 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

763 
f
->
°©e
) {

764 
LS_ACKRCVD
:

765 
LS_ACKSENT
:

766 
f
->
°©e
 = 
LS_REQSENT
;

769 
LS_OPENED
:

770 i‡(
Àn
 > 0) {

771 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖì∏(%x)\n", 
	`PROTO_NAME
(
f
), 
p
));

773 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖìr\n", 
	`PROTO_NAME
(
f
)));

775 i‡(
f
->
ˇŒbacks
->
down
) {

776 (*
f
->
ˇŒbacks
->
down
)(f);

778 
f
->
ªå™smôs
 = 0;

779 
f
->
°©e
 = 
LS_STOPPING
;

780 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

784 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

785 
	}
}

792 
	$fsm_πîmack
(
fsm
 *
f
)

794 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermack(%s): state=%d (%s)\n",

795 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

797 
f
->
°©e
) {

798 
LS_CLOSING
:

799 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

800 
f
->
°©e
 = 
LS_CLOSED
;

801 if–
f
->
ˇŒbacks
->
föished
 ) {

802 (*
f
->
ˇŒbacks
->
föished
)(f);

806 
LS_STOPPING
:

807 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

808 
f
->
°©e
 = 
LS_STOPPED
;

809 if–
f
->
ˇŒbacks
->
föished
 ) {

810 (*
f
->
ˇŒbacks
->
föished
)(f);

814 
LS_ACKRCVD
:

815 
f
->
°©e
 = 
LS_REQSENT
;

818 
LS_OPENED
:

819 i‡(
f
->
ˇŒbacks
->
down
) {

820 (*
f
->
ˇŒbacks
->
down
)(f);

822 
	`fsm_sc⁄‰eq
(
f
, 0);

825 
	}
}

832 
	$fsm_rcodîej
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

834 
u_ch¨
 
code
, 
id
;

836 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej(%s): state=%d (%s)\n",

837 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

839 i‡(
Àn
 < 
HEADERLEN
) {

840 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej: Rcvd short Code-RejectÖacket!\n"));

843 
	`GETCHAR
(
code
, 
öp
);

844 
	`GETCHAR
(
id
, 
öp
);

845 
	`FSMDEBUG
((
LOG_WARNING
, "%s: Rcvd Code-Reject for code %d, id %d\n",

846 
	`PROTO_NAME
(
f
), 
code
, 
id
));

848 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

849 
f
->
°©e
 = 
LS_REQSENT
;

851 
	}
}

858 
	$fsm_sc⁄‰eq
(
fsm
 *
f
, 
ªå™smô
)

860 
u_ch¨
 *
ouç
;

861 
cûí
;

863 if–
f
->
°©e
 !
LS_REQSENT
 && f->°©ê!
LS_ACKRCVD
 && f->°©ê!
LS_ACKSENT
 ) {

865 if–
f
->
ˇŒbacks
->
ª£tci
 ) {

866 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

868 
f
->
«klo›s
 = 0;

871 if–!
ªå™smô
 ) {

873 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

874 
f
->
ªqid
 = ++f->
id
;

877 
f
->
£í_ack
 = 0;

882 
ouç
 = 
ouçackë_buf
[
f
->
unô
] + 
PPP_HDRLEN
 + 
HEADERLEN
;

883 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ) {

884 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

885 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
 ) {

886 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

888 i‡(
f
->
ˇŒbacks
->
addci
) {

889 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

892 
cûí
 = 0;

896 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

899 --
f
->
ªå™smôs
;

900 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

902 
	`FSMDEBUG
((
LOG_INFO
, "%s: sending Configure-Request, id %d\n",

903 
	`PROTO_NAME
(
f
), f->
ªqid
));

904 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/fsm.h

54 #i‚de‡
FSM_H


55 
	#FSM_H


	)

63 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#CONFREQ
 1

	)

70 
	#CONFACK
 2

	)

71 
	#CONFNAK
 3

	)

72 
	#CONFREJ
 4

	)

73 
	#TERMREQ
 5

	)

74 
	#TERMACK
 6

	)

75 
	#CODEREJ
 7

	)

80 
	#LS_INITIAL
 0

	)

81 
	#LS_STARTING
 1

	)

82 
	#LS_CLOSED
 2

	)

83 
	#LS_STOPPED
 3

	)

84 
	#LS_CLOSING
 4

	)

85 
	#LS_STOPPING
 5

	)

86 
	#LS_REQSENT
 6

	)

87 
	#LS_ACKRCVD
 7

	)

88 
	#LS_ACKSENT
 8

	)

89 
	#LS_OPENED
 9

	)

94 
	#OPT_PASSIVE
 1

	)

95 
	#OPT_RESTART
 2

	)

96 
	#OPT_SILENT
 4

	)

105 
	sfsm
 {

106 
	munô
;

107 
u_sh‹t
 
	m¥Ÿocﬁ
;

108 
	m°©e
;

109 
	mÊags
;

110 
u_ch¨
 
	mid
;

111 
u_ch¨
 
	mªqid
;

112 
u_ch¨
 
	m£í_ack
;

113 
	mtimeouâime
;

114 
	mmaxc⁄‰eqå™smôs
;

115 
	mªå™smôs
;

116 
	mmaxãrmå™smôs
;

117 
	m«klo›s
;

118 
	mmax«klo›s
;

119 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

120 * 
	mãrm_ªas⁄
;

121 
	mãrm_ªas⁄_Àn
;

122 } 
	tfsm
;

125 
	sfsm_ˇŒbacks
 {

126 (*
	mª£tci
)(
	mfsm
*);

127 (*
	mcûí
)(
	mfsm
*);

128 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

129 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

130 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

131 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

132 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

133 (*
	mup
)(
	mfsm
*);

134 (*
	mdown
)(
	mfsm
*);

135 (*
	m°¨tög
)(
	mfsm
*);

136 (*
	mföished
)(
	mfsm
*);

137 (*
	m¥Ÿªje˘
)();

138 (*
	mªå™smô
)(
	mfsm
*);

139 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

140 *
	m¥Ÿo_«me
;

141 } 
	tfsm_ˇŒbacks
;

150 
≥î_mru
[];

160 
fsm_öô
 (
fsm
*);

161 
fsm_lowîup
 (
fsm
*);

162 
fsm_lowîdown
 (
fsm
*);

163 
fsm_›í
 (
fsm
*);

164 
fsm_˛o£
 (
fsm
*, *);

165 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

166 
fsm_¥Ÿªje˘
 (
fsm
*);

167 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ipcp.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"µpdebug.h
"

59 
	~"auth.h
"

60 
	~"fsm.h
"

61 
	~"vj.h
"

62 
	~"ù˝.h
"

64 
	~<°rög.h
>

74 
	#CILEN_VOID
 2

	)

75 
	#CILEN_COMPRESS
 4

	)

76 
	#CILEN_VJ
 6

	)

77 
	#CILEN_ADDR
 6

	)

78 
	#CILEN_ADDRS
 10

	)

88 
ù˝_ª£tci
 (
fsm
 *);

89 
ù˝_cûí
 (
fsm
 *);

90 
ù˝_addci
 (
fsm
 *, 
u_ch¨
 *, *);

91 
ù˝_ackci
 (
fsm
 *, 
u_ch¨
 *, );

92 
ù˝_«kci
 (
fsm
 *, 
u_ch¨
 *, );

93 
ù˝_ªjci
 (
fsm
 *, 
u_ch¨
 *, );

94 
ù˝_ªqci
 (
fsm
 *, 
u_ch¨
 *, *, );

95 
ù˝_up
 (
fsm
 *);

96 
ù˝_down
 (
fsm
 *);

98 
ù˝_s¸ùt
 (
fsm
 *, *);

100 
ù˝_föished
 (
fsm
 *);

105 
ù˝_öô
 ();

106 
ù˝_›í
 ();

107 
ù˝_˛o£
 (, *);

108 
ù˝_lowîup
 ();

109 
ù˝_lowîdown
 ();

110 
ù˝_öput
 (, 
u_ch¨
 *, );

111 
ù˝_¥Ÿªj
 ();

113 
ù˝_˛ór_addrs
 ();

115 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

116 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

124 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

125 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

126 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

127 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

129 
fsm
 
	gù˝_fsm
[
NUM_PPP
];

131 
¥Ÿít
 
	gù˝_¥Ÿít
 = {

132 
PPP_IPCP
,

133 
ù˝_öô
,

134 
ù˝_öput
,

135 
ù˝_¥Ÿªj
,

136 
ù˝_lowîup
,

137 
ù˝_lowîdown
,

138 
ù˝_›í
,

139 
ù˝_˛o£
,

141 
ù˝_¥öçkt
,

142 
NULL
,

147 
ù_check_›ti⁄s
,

148 
NULL
,

149 
ù_a˘ive_pkt


159 
	gcis_ª˚ived
[
NUM_PPP
];

160 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

162 
fsm_ˇŒbacks
 
	gù˝_ˇŒbacks
 = {

163 
ù˝_ª£tci
,

164 
ù˝_cûí
,

165 
ù˝_addci
,

166 
ù˝_ackci
,

167 
ù˝_«kci
,

168 
ù˝_ªjci
,

169 
ù˝_ªqci
,

170 
ù˝_up
,

171 
ù˝_down
,

172 
NULL
,

173 
ù˝_föished
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

192 
	$_öë_¡ﬂ
(
u32_t
 
n
)

194 
ö_addr
 
ü
;

195 
ü
.
s_addr
 = 
n
;

196  
	`öë_¡ﬂ
(
ü
);

197 
	}
}

199 
	#öë_¡ﬂ
 
_öë_¡ﬂ


	)

205 
	$ù˝_öô
(
unô
)

207 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

208 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

209 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

211 
f
->
unô
 = unit;

212 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

213 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

214 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

216 
	`mem£t
(
wo
, 0, (*wo));

217 
	`mem£t
(
ao
, 0, (*ao));

219 
wo
->
√g_addr
 = 1;

220 
wo
->
ouøddr
 = 0;

221 #i‡
VJ_SUPPORT


222 
wo
->
√g_vj
 = 1;

224 
wo
->
√g_vj
 = 0;

226 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

227 
wo
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

228 
wo
->
cÊag
 = 0;

229 
wo
->
deÁu…_rouã
 = 1;

231 
ao
->
√g_addr
 = 1;

232 #i‡
VJ_SUPPORT


233 
ao
->
√g_vj
 = 1;

235 
ao
->
√g_vj
 = 0;

237 
ao
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

238 
ao
->
cÊag
 = 1;

239 
ao
->
deÁu…_rouã
 = 1;

240 
	}
}

247 
	$ù˝_›í
(
unô
)

249 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

250 
	}
}

257 
	$ù˝_˛o£
(
unô
, *
ªas⁄
)

259 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

260 
	}
}

267 
	$ù˝_lowîup
(
unô
)

269 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

270 
	}
}

277 
	$ù˝_lowîdown
(
unô
)

279 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

280 
	}
}

287 
	$ù˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

289 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

290 
	}
}

299 
	$ù˝_¥Ÿªj
(
unô
)

301 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

302 
	}
}

309 
	$ù˝_ª£tci
(
fsm
 *
f
)

311 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

313 
wo
->
ªq_addr
 = wo->
√g_addr
 && 
ù˝_Ælow›ti⁄s
[
f
->
unô
].neg_addr;

314 i‡(
wo
->
ouøddr
 == 0) {

315 
wo
->
ac˚±_loˇl
 = 1;

317 i‡(
wo
->
hißddr
 == 0) {

318 
wo
->
ac˚±_ªmŸe
 = 1;

321 
wo
->
ªq_dns1
 = 
µp_£âögs
.
u£≥îdns
;

322 
wo
->
ªq_dns2
 = 
µp_£âögs
.
u£≥îdns
;

323 
ù˝_gŸ›ti⁄s
[
f
->
unô
] = *
wo
;

324 
cis_ª˚ived
[
f
->
unô
] = 0;

325 
	}
}

332 
	$ù˝_cûí
(
fsm
 *
f
)

334 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

335 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

336 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

338 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

339 
	#LENCIADDR
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_ADDRS
 : 
CILEN_ADDR
Ë: 0)

	)

340 
	#LENCIDNS
(
√g
Ë“eg ? (
CILEN_ADDR
Ë: 0)

	)

346 i‡(
wo
->
√g_addr
 && !
go
->√g_add∏&& !go->
ﬁd_addrs
) {

348 
go
->
√g_addr
 = 1;

349 
go
->
ﬁd_addrs
 = 1;

351 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

353 i‡(
cis_ª˚ived
[
f
->
unô
] == 0) {

355 
go
->
√g_vj
 = 1;

358 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

359 
go
->
√g_vj
 = 1;

360 
go
->
ﬁd_vj
 = 1;

361 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

366  (
	`LENCIADDR
(
go
->
√g_addr
, go->
ﬁd_addrs
) +

367 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

368 
	`LENCIDNS
(
go
->
ªq_dns1
) +

369 
	`LENCIDNS
(
go
->
ªq_dns2
));

370 
	}
}

377 
	$ù˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

379 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

380 
Àn
 = *
À≈
;

382 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

383 i‡(
√g
) { \

384 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

385 i‡(
Àn
 >
vjÀn
) { \

386 
	`PUTCHAR
(
›t
, 
u˝
); \

387 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

388 
	`PUTSHORT
(
vÆ
, 
u˝
); \

389 i‡(!
ﬁd
) { \

390 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

391 
	`PUTCHAR
(
cÊag
, 
u˝
); \

393 
Àn
 -
vjÀn
; \

395 
√g
 = 0; \

397 }

	)

399 
	#ADDCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

400 i‡(
√g
) { \

401 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

402 i‡(
Àn
 >
addæí
) { \

403 
u32_t
 
l
; \

404 
	`PUTCHAR
(
›t
, 
u˝
); \

405 
	`PUTCHAR
(
addæí
, 
u˝
); \

406 
l
 = 
	`¡ohl
(
vÆ1
); \

407 
	`PUTLONG
(
l
, 
u˝
); \

408 i‡(
ﬁd
) { \

409 
l
 = 
	`¡ohl
(
vÆ2
); \

410 
	`PUTLONG
(
l
, 
u˝
); \

412 
Àn
 -
addæí
; \

414 
√g
 = 0; \

416 }

	)

418 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

419 i‡(
√g
) { \

420 i‡(
Àn
 >
CILEN_ADDR
) { \

421 
u32_t
 
l
; \

422 
	`PUTCHAR
(
›t
, 
u˝
); \

423 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

424 
l
 = 
	`¡ohl
(
addr
); \

425 
	`PUTLONG
(
l
, 
u˝
); \

426 
Àn
 -
CILEN_ADDR
; \

428 
√g
 = 0; \

430 }

	)

432 
	`ADDCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

433 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

435 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

436 
go
->
max¶Ÿödex
, go->
cÊag
);

438 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

440 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

442 *
À≈
 -
Àn
;

443 
	}
}

454 
	$ù˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

456 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

457 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

458 
u32_t
 
cû⁄g
;

459 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

467 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

468 i‡(
√g
) { \

469 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

470 i‡((
Àn
 -
vjÀn
) < 0) { \

471 
bad
; \

473 
	`GETCHAR
(
côy≥
, 
p
); \

474 
	`GETCHAR
(
cûí
, 
p
); \

475 i‡(
cûí
 !
vjÀn
 || \

476 
côy≥
 !
›t
) { \

477 
bad
; \

479 
	`GETSHORT
(
cish‹t
, 
p
); \

480 i‡(
cish‹t
 !
vÆ
) { \

481 
bad
; \

483 i‡(!
ﬁd
) { \

484 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

485 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) { \

486 
bad
; \

488 
	`GETCHAR
(
cicÊag
, 
p
); \

489 i‡(
cicÊag
 !
cÊag
) { \

490 
bad
; \

493 }

	)

495 
	#ACKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

496 i‡(
√g
) { \

497 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

498 
u32_t
 
l
; \

499 i‡((
Àn
 -
addæí
) < 0) { \

500 
bad
; \

502 
	`GETCHAR
(
côy≥
, 
p
); \

503 
	`GETCHAR
(
cûí
, 
p
); \

504 i‡(
cûí
 !
addæí
 || \

505 
côy≥
 !
›t
) { \

506 
bad
; \

508 
	`GETLONG
(
l
, 
p
); \

509 
cû⁄g
 = 
	`ht⁄l
(
l
); \

510 i‡(
vÆ1
 !
cû⁄g
) { \

511 
bad
; \

513 i‡(
ﬁd
) { \

514 
	`GETLONG
(
l
, 
p
); \

515 
cû⁄g
 = 
	`ht⁄l
(
l
); \

516 i‡(
vÆ2
 !
cû⁄g
) { \

517 
bad
; \

520 }

	)

522 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

523 i‡(
√g
) { \

524 
u32_t
 
l
; \

525 i‡((
Àn
 -
CILEN_ADDR
) < 0) { \

526 
bad
; \

528 
	`GETCHAR
(
côy≥
, 
p
); \

529 
	`GETCHAR
(
cûí
, 
p
); \

530 i‡(
cûí
 !
CILEN_ADDR
 || \

531 
côy≥
 !
›t
) { \

532 
bad
; \

534 
	`GETLONG
(
l
, 
p
); \

535 
cû⁄g
 = 
	`ht⁄l
(
l
); \

536 i‡(
addr
 !
cû⁄g
) { \

537 
bad
; \

539 }

	)

541 
	`ACKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

542 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

544 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

545 
go
->
max¶Ÿödex
, go->
cÊag
);

547 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

549 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

554 i‡(
Àn
 != 0) {

555 
bad
;

559 
bad
:

560 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_ackci:Ñeceived bad Ack!\n"));

562 
	}
}

574 
	$ù˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

576 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

577 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

578 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

579 
u_sh‹t
 
cish‹t
;

580 
u32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

581 
ù˝_›ti⁄s
 
no
;

582 
ù˝_›ti⁄s
 
åy
;

584 
	`BZERO
(&
no
, (no));

585 
åy
 = *
go
;

592 
	#NAKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
code
) \

593 i‡(
go
->
√g
 && \

594 
Àn
 >(
cûí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
)) && \

595 
p
[1] =
cûí
 && \

596 
p
[0] =
›t
) { \

597 
Àn
 -
cûí
; \

598 
	`INCPTR
(2, 
p
); \

599 
	`GETLONG
(
l
, 
p
); \

600 
cüddr1
 = 
	`ht⁄l
(
l
); \

601 i‡(
ﬁd
) { \

602 
	`GETLONG
(
l
, 
p
); \

603 
cüddr2
 = 
	`ht⁄l
(
l
); \

604 
no
.
ﬁd_addrs
 = 1; \

606 
cüddr2
 = 0; \

608 
no
.
√g
 = 1; \

609 
code
 \

610 }

	)

612 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

613 i‡(
go
->
√g
 && \

614 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

615 
Àn
 >
cûí
 && \

616 
p
[0] =
›t
) { \

617 
Àn
 -
cûí
; \

618 
	`INCPTR
(2, 
p
); \

619 
	`GETSHORT
(
cish‹t
, 
p
); \

620 
no
.
√g
 = 1; \

621 
code
 \

622 }

	)

624 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

625 i‡(
go
->
√g
 && \

626 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

627 
Àn
 >
cûí
 && \

628 
p
[0] =
›t
) { \

629 
Àn
 -
cûí
; \

630 
	`INCPTR
(2, 
p
); \

631 
	`GETLONG
(
l
, 
p
); \

632 
cidnßddr
 = 
	`ht⁄l
(
l
); \

633 
no
.
√g
 = 1; \

634 
code
 \

635 }

	)

641 
	`NAKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
, go->old_addrs,

642 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

643 
åy
.
ouøddr
 = 
cüddr1
;

644 
	`IPCPDEBUG
((
LOG_INFO
, "local IPáddress %s\n",

645 
	`öë_¡ﬂ
(
cüddr1
)));

647 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

648 
åy
.
hißddr
 = 
cüddr2
;

649 
	`IPCPDEBUG
((
LOG_INFO
, "remote IPáddress %s\n",

650 
	`öë_¡ﬂ
(
cüddr2
)));

660 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

661 i‡(
cûí
 =
CILEN_VJ
) {

662 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

663 
	`GETCHAR
(
cicÊag
, 
p
);

664 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

665 
åy
.
ﬁd_vj
 = 0;

666 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
) {

667 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

669 i‡(!
cicÊag
) {

670 
åy
.
cÊag
 = 0;

673 
åy
.
√g_vj
 = 0;

676 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

677 
åy
.
ﬁd_vj
 = 1;

678 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

680 
åy
.
√g_vj
 = 0;

685 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

686 
åy
.
dnßddr
[0] = 
cidnßddr
;

687 
	`IPCPDEBUG
((
LOG_INFO
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

690 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

691 
åy
.
dnßddr
[1] = 
cidnßddr
;

692 
	`IPCPDEBUG
((
LOG_INFO
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

701 
Àn
 > 
CILEN_VOID
) {

702 
	`GETCHAR
(
côy≥
, 
p
);

703 
	`GETCHAR
(
cûí
, 
p
);

704 if–(
Àn
 -
cûí
) < 0 ) {

705 
bad
;

707 
√xt
 = 
p
 + 
cûí
 - 2;

709 
côy≥
) {

710 
CI_COMPRESSTYPE
:

711 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

712 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

713 
bad
;

715 
no
.
√g_vj
 = 1;

717 
CI_ADDRS
:

718 i‡((
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

719 || 
cûí
 !
CILEN_ADDRS
) {

720 
bad
;

722 
åy
.
√g_addr
 = 1;

723 
åy
.
ﬁd_addrs
 = 1;

724 
	`GETLONG
(
l
, 
p
);

725 
cüddr1
 = 
	`ht⁄l
(
l
);

726 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

727 
åy
.
ouøddr
 = 
cüddr1
;

729 
	`GETLONG
(
l
, 
p
);

730 
cüddr2
 = 
	`ht⁄l
(
l
);

731 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
) {

732 
åy
.
hißddr
 = 
cüddr2
;

734 
no
.
ﬁd_addrs
 = 1;

736 
CI_ADDR
:

737 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
) {

738 
bad
;

740 
åy
.
ﬁd_addrs
 = 0;

741 
	`GETLONG
(
l
, 
p
);

742 
cüddr1
 = 
	`ht⁄l
(
l
);

743 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

744 
åy
.
ouøddr
 = 
cüddr1
;

746 i‡(
åy
.
ouøddr
 != 0) {

747 
åy
.
√g_addr
 = 1;

749 
no
.
√g_addr
 = 1;

752 
p
 = 
√xt
;

756 i‡(
Àn
 != 0) {

757 
bad
;

763 i‡(
f
->
°©e
 !
LS_OPENED
) {

764 *
go
 = 
åy
;

769 
bad
:

770 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_nakci:Ñeceived bad Nak!\n"));

772 
	}
}

779 
	$ù˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

781 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

782 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

783 
u_sh‹t
 
cish‹t
;

784 
u32_t
 
cû⁄g
;

785 
ù˝_›ti⁄s
 
åy
;

787 
åy
 = *
go
;

793 
	#REJCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

794 i‡(
go
->
√g
 && \

795 
Àn
 >(
cûí
 = 
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
) && \

796 
p
[1] =
cûí
 && \

797 
p
[0] =
›t
) { \

798 
u32_t
 
l
; \

799 
Àn
 -
cûí
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
l
, 
p
); \

802 
cû⁄g
 = 
	`ht⁄l
(
l
); \

804 i‡(
cû⁄g
 !
vÆ1
) { \

805 
bad
; \

807 i‡(
ﬁd
) { \

808 
	`GETLONG
(
l
, 
p
); \

809 
cû⁄g
 = 
	`ht⁄l
(
l
); \

811 i‡(
cû⁄g
 !
vÆ2
) { \

812 
bad
; \

815 
åy
.
√g
 = 0; \

816 }

	)

818 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

819 i‡(
go
->
√g
 && \

820 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

821 
Àn
 >
p
[1] && \

822 
p
[0] =
›t
) { \

823 
Àn
 -
p
[1]; \

824 
	`INCPTR
(2, 
p
); \

825 
	`GETSHORT
(
cish‹t
, 
p
); \

827 i‡(
cish‹t
 !
vÆ
) { \

828 
bad
; \

830 i‡(!
ﬁd
) { \

831 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

832 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) { \

833 
bad
; \

835 
	`GETCHAR
(
ciÊag
, 
p
); \

836 i‡(
ciÊag
 !
cÊag
) { \

837 
bad
; \

840 
åy
.
√g
 = 0; \

841 }

	)

843 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

844 i‡(
go
->
√g
 && \

845 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

846 
Àn
 >
cûí
 && \

847 
p
[0] =
›t
) { \

848 
u32_t
 
l
; \

849 
Àn
 -
cûí
; \

850 
	`INCPTR
(2, 
p
); \

851 
	`GETLONG
(
l
, 
p
); \

852 
cû⁄g
 = 
	`ht⁄l
(
l
); \

854 i‡(
cû⁄g
 !
dnßddr
) { \

855 
bad
; \

857 
åy
.
√g
 = 0; \

858 }

	)

860 
	`REJCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
,

861 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

863 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

864 
go
->
max¶Ÿödex
, go->
cÊag
);

866 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

868 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

873 i‡(
Àn
 != 0) {

874 
bad
;

879 i‡(
f
->
°©e
 !
LS_OPENED
) {

880 *
go
 = 
åy
;

884 
bad
:

885 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_rejci:Ñeceived bad Reject!\n"));

887 
	}
}

898 
	$ù˝_ªqci
(
fsm
 *
f
, 
u_ch¨
 *
öp
 ,*
Àn
 ,
ªje˘_if_dißgªe
)

900 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

901 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

902 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

903 #ifde‡
OLD_CI_ADDRS


904 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

906 
u_ch¨
 *
cù
, *
√xt
;

907 
u_sh‹t
 
cûí
, 
côy≥
;

908 
u_sh‹t
 
cish‹t
;

909 
u32_t
 
é
, 
cüddr1
;

910 #ifde‡
OLD_CI_ADDRS


911 
u32_t
 
cüddr2
;

913 
rc
 = 
CONFACK
;

914 
‹c
;

915 
u_ch¨
 *
p
;

916 
u_ch¨
 *
u˝
 = 
öp
;

917 
l
 = *
Àn
;

918 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

919 
d
;

921 
cis_ª˚ived
[
f
->
unô
] = 1;

926 
	`BZERO
(
ho
, (*ho));

931 
√xt
 = 
öp
;

932 
l
) {

933 
‹c
 = 
CONFACK
;

934 
cù
 = 
p
 = 
√xt
;

935 i‡(
l
 < 2 ||

936 
p
[1] < 2 ||

937 
p
[1] > 
l
) {

938 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: bad CIÜength!\n"));

939 
‹c
 = 
CONFREJ
;

940 
cûí
 = 
l
;

941 
l
 = 0;

942 
ídswôch
;

944 
	`GETCHAR
(
côy≥
, 
p
);

945 
	`GETCHAR
(
cûí
, 
p
);

946 
l
 -
cûí
;

947 
√xt
 +
cûí
;

949 
côy≥
) {

950 #ifde‡
OLD_CI_ADDRS


951 
CI_ADDRS
:

952 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci:Ñeceived ADDRS\n"));

953 i‡(!
ao
->
√g_addr
 ||

954 
cûí
 !
CILEN_ADDRS
) {

955 
‹c
 = 
CONFREJ
;

965 
	`GETLONG
(
é
, 
p
);

966 
cüddr1
 = 
	`ht⁄l
(
é
);

967 
	`IPCPDEBUG
((
LOG_INFO
, "hi†add∏%s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

968 i‡(
cüddr1
 !
wo
->
hißddr


969 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

970 
‹c
 = 
CONFNAK
;

971 i‡(!
ªje˘_if_dißgªe
) {

972 
	`DECPTR
((
u32_t
), 
p
);

973 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

974 
	`PUTLONG
(
é
, 
p
);

976 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

980 
‹c
 = 
CONFREJ
;

981 
wo
->
ªq_addr
 = 0;

989 
	`GETLONG
(
é
, 
p
);

990 
cüddr2
 = 
	`ht⁄l
(
é
);

991 
	`IPCPDEBUG
((
LOG_INFO
, "ou∏add∏%s\n", 
	`öë_¡ﬂ
(
cüddr2
)));

992 i‡(
cüddr2
 !
wo
->
ouøddr
) {

993 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

994 
‹c
 = 
CONFNAK
;

995 i‡(!
ªje˘_if_dißgªe
) {

996 
	`DECPTR
((
u32_t
), 
p
);

997 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

998 
	`PUTLONG
(
é
, 
p
);

1001 
go
->
ouøddr
 = 
cüddr2
;

1005 
ho
->
√g_addr
 = 1;

1006 
ho
->
ﬁd_addrs
 = 1;

1007 
ho
->
hißddr
 = 
cüddr1
;

1008 
ho
->
ouøddr
 = 
cüddr2
;

1012 
CI_ADDR
:

1013 i‡(!
ao
->
√g_addr
) {

1014 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDRÇotállowed\n"));

1015 
‹c
 = 
CONFREJ
;

1017 } i‡(
cûí
 !
CILEN_ADDR
) {

1018 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDR badÜen\n"));

1019 
‹c
 = 
CONFREJ
;

1029 
	`GETLONG
(
é
, 
p
);

1030 
cüddr1
 = 
	`ht⁄l
(
é
);

1031 i‡(
cüddr1
 !
wo
->
hißddr


1032 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1033 
‹c
 = 
CONFNAK
;

1034 i‡(!
ªje˘_if_dißgªe
) {

1035 
	`DECPTR
((
u32_t
), 
p
);

1036 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1037 
	`PUTLONG
(
é
, 
p
);

1039 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nak ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1040 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1044 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1045 
‹c
 = 
CONFREJ
;

1046 
wo
->
ªq_addr
 = 0;

1050 
ho
->
√g_addr
 = 1;

1051 
ho
->
hißddr
 = 
cüddr1
;

1052 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1055 
CI_MS_DNS1
:

1056 
CI_MS_DNS2
:

1058 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1061 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1062 
cûí
 !
CILEN_ADDR
) {

1063 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög DNS%d Reque°\n", 
d
+1));

1064 
‹c
 = 
CONFREJ
;

1067 
	`GETLONG
(
é
, 
p
);

1068 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1069 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Naking DNS%d Request %d\n",

1070 
d
+1, 
	`öë_¡ﬂ
(
é
)));

1071 
	`DECPTR
((
u32_t
), 
p
);

1072 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1073 
	`PUTLONG
(
é
, 
p
);

1074 
‹c
 = 
CONFNAK
;

1076 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived DNS%d Reque°\n", 
d
+1));

1079 
CI_MS_WINS1
:

1080 
CI_MS_WINS2
:

1082 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1083 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived WINS%d Reque°\n", 
d
+1));

1086 i‡(
ao
->
wößddr
[
d
] == 0 ||

1087 
cûí
 !
CILEN_ADDR
) {

1088 
‹c
 = 
CONFREJ
;

1091 
	`GETLONG
(
é
, 
p
);

1092 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1093 
	`DECPTR
((
u32_t
), 
p
);

1094 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1095 
	`PUTLONG
(
é
, 
p
);

1096 
‹c
 = 
CONFNAK
;

1100 
CI_COMPRESSTYPE
:

1101 i‡(!
ao
->
√g_vj
) {

1102 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Rejecting COMPRESSTYPEÇotállowed\n"));

1103 
‹c
 = 
CONFREJ
;

1105 } i‡(
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
) {

1106 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPEÜí=%d\n", 
cûí
));

1107 
‹c
 = 
CONFREJ
;

1110 
	`GETSHORT
(
cish‹t
, 
p
);

1112 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1113 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1114 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPE %d\n", 
cish‹t
));

1115 
‹c
 = 
CONFREJ
;

1119 
ho
->
√g_vj
 = 1;

1120 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1121 i‡(
cûí
 =
CILEN_VJ
) {

1122 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1123 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1124 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ max slŸ %d\n", 
max¶Ÿödex
));

1125 
‹c
 = 
CONFNAK
;

1126 i‡(!
ªje˘_if_dißgªe
) {

1127 
	`DECPTR
(1, 
p
);

1128 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1131 
	`GETCHAR
(
cÊag
, 
p
);

1132 i‡(
cÊag
 && !
ao
->cflag) {

1133 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ cÊag %d\n", 
cÊag
));

1134 
‹c
 = 
CONFNAK
;

1135 i‡(!
ªje˘_if_dißgªe
) {

1136 
	`DECPTR
(1, 
p
);

1137 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1140 
ho
->
max¶Ÿödex
 = maxslotindex;

1141 
ho
->
cÊag
 = cflag;

1143 
ho
->
ﬁd_vj
 = 1;

1144 
ho
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

1145 
ho
->
cÊag
 = 1;

1147 
	`IPCPDEBUG
((
LOG_INFO
,

1149 
ho
->
vj_¥Ÿocﬁ
, ho->
ﬁd_vj
, ho->
max¶Ÿödex
, ho->
cÊag
));

1153 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög unknow¿CIÅy≥ %d\n", 
côy≥
));

1154 
‹c
 = 
CONFREJ
;

1158 
ídswôch
:

1159 i‡(
‹c
 =
CONFACK
 &&

1160 
rc
 !
CONFACK
) {

1164 i‡(
‹c
 =
CONFNAK
) {

1165 i‡(
ªje˘_if_dißgªe
) {

1166 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RejectingÅoo manyÇaks\n"));

1167 
‹c
 = 
CONFREJ
;

1169 i‡(
rc
 =
CONFREJ
) {

1172 i‡(
rc
 =
CONFACK
) {

1173 
rc
 = 
CONFNAK
;

1174 
u˝
 = 
öp
;

1179 i‡(
‹c
 =
CONFREJ
 &&

1180 
rc
 !
CONFREJ
) {

1181 
rc
 = 
CONFREJ
;

1182 
u˝
 = 
öp
;

1186 i‡(
u˝
 !
cù
) {

1187 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1191 
	`INCPTR
(
cûí
, 
u˝
);

1201 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 &&

1202 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
) {

1203 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RequestingÖeeráddress\n"));

1204 i‡(
rc
 =
CONFACK
) {

1205 
rc
 = 
CONFNAK
;

1206 
u˝
 = 
öp
;

1207 
wo
->
ªq_addr
 = 0;

1209 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1210 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1211 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1212 
	`PUTLONG
(
é
, 
u˝
);

1215 *
Àn
 = ()(
u˝
 - 
öp
);

1216 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñëu∫ög C⁄figuª-%s\n", 
	`CODENAME
(
rc
)));

1217  (
rc
);

1218 
	}
}

1227 
	$ù_check_›ti⁄s
(
u_l⁄g
 
loˇlAddr
)

1229 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1235 i‡(
wo
->
ouøddr
 =0 && !
µp_£âögs
.
dißbÀ_deÁu…ù
) {

1236 
wo
->
ac˚±_loˇl
 = 1;

1237 
wo
->
ouøddr
 = 
	`ht⁄l
(
loˇlAddr
);

1239 
	}
}

1249 
	$ù˝_up
(
fsm
 *
f
)

1251 
u32_t
 
mask
;

1252 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1253 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1254 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1256 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1257 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: up\n"));

1262 i‡(!
ho
->
√g_addr
) {

1263 
ho
->
hißddr
 = 
wo
->hisaddr;

1266 i‡(
ho
->
hißddr
 == 0) {

1267 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÑemote IPáddress\n"));

1268 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote IPáddress");

1271 i‡(
go
->
ouøddr
 == 0) {

1272 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÜocal IPáddress\n"));

1273 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1277 i‡(
µp_£âögs
.
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1284 i‡(!
	`auth_ù_addr
(
f
->
unô
, 
ho
->
hißddr
)) {

1285 
	`IPCPDEBUG
((
LOG_ERR
, "Peer isÇotáuthorizedÅo useÑemoteáddress %s\n",

1286 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1287 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1292 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1297 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1299 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
, go->
dnßddr
[0], go->dnsaddr[1])) {

1300 
	`IPCPDEBUG
((
LOG_WARNING
, "sifaddr failed\n"));

1301 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1306 i‡(!
	`sifup
(
f
->
unô
)) {

1307 
	`IPCPDEBUG
((
LOG_WARNING
, "sifup failed\n"));

1308 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1312 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1315 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
) {

1316 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
)) {

1317 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1321 
	`IPCPDEBUG
((
LOG_NOTICE
, "loˇ» IPáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
ouøddr
)));

1322 
	`IPCPDEBUG
((
LOG_NOTICE
, "ªmŸêIPáddªs†%s\n", 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1323 i‡(
go
->
dnßddr
[0]) {

1324 
	`IPCPDEBUG
((
LOG_NOTICE
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[0])));

1326 i‡(
go
->
dnßddr
[1]) {

1327 
	`IPCPDEBUG
((
LOG_NOTICE
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[1])));

1329 
	}
}

1339 
	$ù˝_down
(
fsm
 *
f
)

1341 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: down\n"));

1342 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1343 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1345 
	`sifdown
(
f
->
unô
);

1346 
	`ù˝_˛ór_addrs
(
f
->
unô
);

1347 
	}
}

1354 
	$ù˝_˛ór_addrs
(
unô
)

1356 
u32_t
 
ouøddr
, 
hißddr
;

1358 
ouøddr
 = 
ù˝_gŸ›ti⁄s
[
unô
].ouraddr;

1359 
hißddr
 = 
ù˝_his›ti⁄s
[
unô
].hisaddr;

1360 i‡(
deÁu…_rouã_£t
[
unô
]) {

1361 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

1362 
deÁu…_rouã_£t
[
unô
] = 0;

1364 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

1365 
	}
}

1372 
	$ù˝_föished
(
fsm
 *
f
)

1374 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

1375 
	}
}

1379 
	$ù˝_¥öçkt
(
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1381 
	`LWIP_UNUSED_ARG
(
p
);

1382 
	`LWIP_UNUSED_ARG
(
∂í
);

1383 
	`LWIP_UNUSED_ARG
(
¥öãr
);

1384 
	`LWIP_UNUSED_ARG
(
¨g
);

1386 
	}
}

1393 
	#IP_HDRLEN
 20

	)

1394 
	#IP_OFFMASK
 0x1fff

	)

1395 
	#IPPROTO_TCP
 6

	)

1396 
	#TCP_HDRLEN
 20

	)

1397 
	#TH_FIN
 0x01

	)

1404 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

1405 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

1406 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

1407 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

1408 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1409 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1412 
	$ù_a˘ive_pkt
(
u_ch¨
 *
pkt
, 
Àn
)

1414 
u_ch¨
 *
t˝
;

1415 
hÀn
;

1417 
Àn
 -
PPP_HDRLEN
;

1418 
pkt
 +
PPP_HDRLEN
;

1419 i‡(
Àn
 < 
IP_HDRLEN
) {

1422 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0) {

1425 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
) {

1428 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

1429 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
) {

1432 
t˝
 = 
pkt
 + 
hÀn
;

1433 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4) {

1437 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ipcp.h

54 #i‚de‡
IPCP_H


55 
	#IPCP_H


	)

63 
	#CI_ADDRS
 1

	)

64 
	#CI_COMPRESSTYPE
 2

	)

65 
	#CI_ADDR
 3

	)

67 
	#CI_MS_WINS1
 128

	)

68 
	#CI_MS_DNS1
 129

	)

69 
	#CI_MS_WINS2
 130

	)

70 
	#CI_MS_DNS2
 131

	)

72 
	#IPCP_VJMODE_OLD
 1

	)

73 
	#IPCP_VJMODE_RFC1172
 2

	)

74 
	#IPCP_VJMODE_RFC1332
 3

	)

77 
	#IPCP_VJ_COMP
 0x002d

	)

78 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

86 
	sù˝_›ti⁄s
 {

87 
u_öt
 
	m√g_addr
 : 1;

88 
u_öt
 
	mﬁd_addrs
 : 1;

89 
u_öt
 
	mªq_addr
 : 1;

90 
u_öt
 
	mdeÁu…_rouã
 : 1;

91 
u_öt
 
	m¥oxy_¨p
 : 1;

92 
u_öt
 
	m√g_vj
 : 1;

93 
u_öt
 
	mﬁd_vj
 : 1;

94 
u_öt
 
	mac˚±_loˇl
 : 1;

95 
u_öt
 
	mac˚±_ªmŸe
 : 1;

96 
u_öt
 
	mªq_dns1
 : 1;

97 
u_öt
 
	mªq_dns2
 : 1;

98 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

99 
u_ch¨
 
	mmax¶Ÿödex
;

100 
u_ch¨
 
	mcÊag
;

101 
u32_t
 
	mouøddr
, 
	mhißddr
;

102 
u32_t
 
	mdnßddr
[2];

103 
u32_t
 
	mwößddr
[2];

104 } 
	tù˝_›ti⁄s
;

111 
fsm
 
ù˝_fsm
[];

112 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

113 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

114 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

115 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

117 
¥Ÿít
 
ù˝_¥Ÿít
;

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/lcp.c

54 
	~"lwù/›t.h
"

56 #i‡
PPP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"fsm.h
"

62 
	~"ch≠.h
"

63 
	~"magic.h
"

64 
	~"auth.h
"

65 
	~"l˝.h
"

67 
	~<°rög.h
>

69 #i‡
PPPOE_SUPPORT


70 
	~"√tif/µp_€.h
"

72 
	#PPPOE_MAXMTU
 
PPP_MAXMRU


	)

82 
	#CILEN_VOID
 2

	)

83 
	#CILEN_CHAR
 3

	)

84 
	#CILEN_SHORT
 4

	)

85 
	#CILEN_CHAP
 5

	)

86 
	#CILEN_LONG
 6

	)

87 
	#CILEN_LQR
 8

	)

88 
	#CILEN_CBCP
 3

	)

97 
l˝_ª£tci
 (
fsm
*);

98 
l˝_cûí
 (
fsm
*);

99 
l˝_addci
 (
fsm
*, 
u_ch¨
*, *);

100 
l˝_ackci
 (
fsm
*, 
u_ch¨
*, );

101 
l˝_«kci
 (
fsm
*, 
u_ch¨
*, );

102 
l˝_ªjci
 (
fsm
*, 
u_ch¨
*, );

103 
l˝_ªqci
 (
fsm
*, 
u_ch¨
*, *, );

104 
l˝_up
 (
fsm
*);

105 
l˝_down
 (
fsm
*);

106 
l˝_°¨tög
 (
fsm
*);

107 
l˝_föished
 (
fsm
*);

108 
l˝_extcode
 (
fsm
*, , 
u_ch¨
, u_char*, );

110 
l˝_ΩrŸªj
 (
fsm
*, 
u_ch¨
*, );

115 
l˝_echo_lowîup
 ();

116 
l˝_echo_lowîdown
 ();

117 
L˝EchoTimeout
 (*);

118 
l˝_ª˚ived_echo_ª∂y
 (
fsm
*, , 
u_ch¨
*, );

119 
L˝SídEchoReque°
 (
fsm
*);

120 
L˝LökFaûuª
 (
fsm
*);

121 
L˝EchoCheck
 (
fsm
*);

127 
l˝_öput
 (, 
u_ch¨
 *, );

128 
l˝_¥Ÿªj
 ();

130 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : (xË=
CONFNAK
 ? "NAK" : "REJ")

	)

137 
LökPha£
 
	gl˝_pha£
[
NUM_PPP
];

138 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

139 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

140 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

141 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

142 
ext_accm
 
	gxmô_accm
[
NUM_PPP
];

149 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

150 
u_öt
 
	gl˝_echo_öãrvÆ
 = 
LCP_ECHOINTERVAL
;

151 
u_öt
 
	gl˝_echo_Áûs
 = 
LCP_MAXECHOFAILS
;

152 
u32_t
 
	gl˝_echos_≥ndög
 = 0;

153 
u32_t
 
	gl˝_echo_numbî
 = 0;

154 
u32_t
 
	gl˝_echo_timî_ru¬ög
 = 0;

156 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

158 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

159 
l˝_ª£tci
,

160 
l˝_cûí
,

161 
l˝_addci
,

162 
l˝_ackci
,

163 
l˝_«kci
,

164 
l˝_ªjci
,

165 
l˝_ªqci
,

166 
l˝_up
,

167 
l˝_down
,

168 
l˝_°¨tög
,

169 
l˝_föished
,

170 
NULL
,

171 
NULL
,

172 
l˝_extcode
,

176 
¥Ÿít
 
	gl˝_¥Ÿít
 = {

177 
PPP_LCP
,

178 
l˝_öô
,

179 
l˝_öput
,

180 
l˝_¥Ÿªj
,

181 
l˝_lowîup
,

182 
l˝_lowîdown
,

183 
l˝_›í
,

184 
l˝_˛o£
,

186 
l˝_¥öçkt
,

187 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL


198 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

209 
	$l˝_öô
(
unô
)

211 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

212 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

213 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

215 
f
->
unô
 = unit;

216 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

217 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

219 
	`fsm_öô
(
f
);

221 
wo
->
∑ssive
 = 0;

222 
wo
->
sûít
 = 0;

223 
wo
->
ª°¨t
 = 0;

224 
wo
->
√g_mru
 = 1;

225 
wo
->
mru
 = 
PPP_DEFMRU
;

226 
wo
->
√g_asyncm≠
 = 1;

227 
wo
->
asyncm≠
 = 0x00000000l;

228 
wo
->
√g_ch≠
 = 0;

229 
wo
->
√g_u∑p
 = 0;

230 
wo
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

231 
wo
->
√g_magi˙umbî
 = 1;

232 
wo
->
√g_pcom¥essi⁄
 = 1;

233 
wo
->
√g_accom¥essi⁄
 = 1;

234 
wo
->
√g_lqr
 = 0;

235 
wo
->
√g_cb˝
 = 0;

237 
ao
->
√g_mru
 = 1;

238 
ao
->
mru
 = 
PPP_MAXMRU
;

239 
ao
->
√g_asyncm≠
 = 1;

240 
ao
->
asyncm≠
 = 0x00000000l;

241 
ao
->
√g_ch≠
 = (
CHAP_SUPPORT
 != 0);

242 
ao
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

243 
ao
->
√g_u∑p
 = (
PAP_SUPPORT
 != 0);

244 
ao
->
√g_magi˙umbî
 = 1;

245 
ao
->
√g_pcom¥essi⁄
 = 1;

246 
ao
->
√g_accom¥essi⁄
 = 1;

247 
ao
->
√g_lqr
 = 0;

248 
ao
->
√g_cb˝
 = (
CBCP_SUPPORT
 != 0);

254 
	`mem£t
(
xmô_accm
[
unô
], 0, (xmit_accm[0]));

255 
xmô_accm
[
unô
][15] = 0x60;

256 
xmô_accm
[
unô
][0] = (
u_ch¨
)((
ao
->
asyncm≠
 & 0xFF));

257 
xmô_accm
[
unô
][1] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 8) & 0xFF);

258 
xmô_accm
[
unô
][2] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 16) & 0xFF);

259 
xmô_accm
[
unô
][3] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 24) & 0xFF);

260 
	`LCPDEBUG
((
LOG_INFO
, "lcp_init: xmit_accm=%X %X %X %X\n",

261 
xmô_accm
[
unô
][0],

262 
xmô_accm
[
unô
][1],

263 
xmô_accm
[
unô
][2],

264 
xmô_accm
[
unô
][3]));

266 
l˝_pha£
[
unô
] = 
PHASE_INITIALIZE
;

267 
	}
}

274 
	$l˝_›í
(
unô
)

276 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

277 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

279 
f
->
Êags
 = 0;

280 i‡(
wo
->
∑ssive
) {

281 
f
->
Êags
 |
OPT_PASSIVE
;

283 i‡(
wo
->
sûít
) {

284 
f
->
Êags
 |
OPT_SILENT
;

286 
	`fsm_›í
(
f
);

288 
l˝_pha£
[
unô
] = 
PHASE_ESTABLISH
;

289 
	}
}

296 
	$l˝_˛o£
(
unô
, *
ªas⁄
)

298 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

300 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

301 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

303 i‡(
f
->
°©e
 =
LS_STOPPED
 && f->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
)) {

310 
f
->
°©e
 = 
LS_CLOSED
;

311 
	`l˝_föished
(
f
);

313 
	`fsm_˛o£
(&
l˝_fsm
[
unô
], 
ªas⁄
);

315 
	}
}

322 
	$l˝_lowîup
(
unô
)

324 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

331 
	`µp_£t_xaccm
(
unô
, &
xmô_accm
[unit]);

332 
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

333 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, 0x00000000l,

334 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
);

335 
≥î_mru
[
unô
] = 
PPP_MRU
;

336 
l˝_Ælow›ti⁄s
[
unô
].
asyncm≠
 = (
u_l⁄g
)
xmô_accm
[unit][0]

337 | ((
u_l⁄g
)
xmô_accm
[
unô
][1] << 8)

338 | ((
u_l⁄g
)
xmô_accm
[
unô
][2] << 16)

339 | ((
u_l⁄g
)
xmô_accm
[
unô
][3] << 24);

340 
	`LCPDEBUG
((
LOG_INFO
, "lcp_lowerup:ásyncmap=%X %X %X %X\n",

341 
xmô_accm
[
unô
][3],

342 
xmô_accm
[
unô
][2],

343 
xmô_accm
[
unô
][1],

344 
xmô_accm
[
unô
][0]));

346 
	`fsm_lowîup
(&
l˝_fsm
[
unô
]);

347 
	}
}

354 
	$l˝_lowîdown
(
unô
)

356 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

357 
	}
}

363 
	$l˝_•rŸªj
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

370 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
, 
p
, 
Àn
);

371 
	}
}

382 
	$l˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

384 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

386 
	`fsm_öput
(
f
, 
p
, 
Àn
);

387 
	}
}

394 
	$l˝_extcode
(
fsm
 *
f
, 
code
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

396 
u_ch¨
 *
magp
;

398  
code
 ){

399 
PROTREJ
:

400 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

403 
ECHOREQ
:

404 i‡(
f
->
°©e
 !
LS_OPENED
) {

407 
	`LCPDEBUG
((
LOG_INFO
, "l˝: Echo-Reque°, Rcvd id %d\n", 
id
));

408 
magp
 = 
öp
;

409 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

410 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

413 
ECHOREP
:

414 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

417 
DISCREQ
:

424 
	}
}

433 
	$l˝_ΩrŸªj
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

435 
i
;

436 
¥Ÿít
 *
¥Ÿp
;

437 
u_sh‹t
 
¥Ÿ
;

439 i‡(
Àn
 <  (
u_sh‹t
)) {

440 
	`LCPDEBUG
((
LOG_INFO
, "lcp_rprotrej: Rcvd short Protocol-RejectÖacket!\n"));

444 
	`GETSHORT
(
¥Ÿ
, 
öp
);

446 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ΩrŸªj: Rcvd PrŸocﬁ-Reje˘Öackë f‹ %x!\n", 
¥Ÿ
));

452 if–
f
->
°©e
 !
LS_OPENED
 ) {

453 
	`LCPDEBUG
((
LOG_INFO
, "PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d\n", 
f
->
°©e
));

460 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

461 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

462 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

467 
	`LCPDEBUG
((
LOG_WARNING
, "PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x\n", 
¥Ÿ
));

468 
	}
}

475 
	$l˝_¥Ÿªj
(
unô
)

477 
	`LWIP_UNUSED_ARG
(
unô
);

481 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_protrej: Received Protocol-Reject for LCP!\n"));

482 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

483 
	}
}

490 
	$l˝_ª£tci
(
fsm
 *
f
)

492 
l˝_w™t›ti⁄s
[
f
->
unô
].
magi˙umbî
 = 
	`magic
();

493 
l˝_w™t›ti⁄s
[
f
->
unô
].
numlo›s
 = 0;

494 
l˝_gŸ›ti⁄s
[
f
->
unô
] = 
l˝_w™t›ti⁄s
[f->unit];

495 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

496 
	`auth_ª£t
(
f
->
unô
);

497 
	}
}

503 
	$l˝_cûí
(
fsm
 *
f
)

505 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

507 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

508 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

509 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

510 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

511 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

512 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

517  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) +

518 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) +

519 
	`LENCICHAP
(
go
->
√g_ch≠
) +

520 
	`LENCISHORT
(!
go
->
√g_ch≠
 && go->
√g_u∑p
) +

521 
	`LENCILQR
(
go
->
√g_lqr
) +

522 
	`LENCICBCP
(
go
->
√g_cb˝
) +

523 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

524 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

525 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
));

526 
	}
}

533 
	$l˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

535 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

536 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

538 
	#ADDCIVOID
(
›t
, 
√g
) \

539 i‡(
√g
) { \

540 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: o±=%d\n", 
›t
)); \

541 
	`PUTCHAR
(
›t
, 
u˝
); \

542 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

543 }

	)

544 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

545 i‡(
√g
) { \

546 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: INT o±=%d %X\n", 
›t
, 
vÆ
)); \

547 
	`PUTCHAR
(
›t
, 
u˝
); \

548 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

549 
	`PUTSHORT
(
vÆ
, 
u˝
); \

550 }

	)

551 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

552 i‡(
√g
) { \

553 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAP o±=%d %X\n", 
›t
, 
vÆ
)); \

554 
	`PUTCHAR
(
›t
, 
u˝
); \

555 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

556 
	`PUTSHORT
(
vÆ
, 
u˝
); \

557 
	`PUTCHAR
(
dige°
, 
u˝
); \

558 }

	)

559 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

560 i‡(
√g
) { \

561 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: L o±=%d %lX\n", 
›t
, 
vÆ
)); \

562 
	`PUTCHAR
(
›t
, 
u˝
); \

563 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

564 
	`PUTLONG
(
vÆ
, 
u˝
); \

565 }

	)

566 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

567 i‡(
√g
) { \

568 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: LQR o±=%d %lX\n", 
›t
, 
vÆ
)); \

569 
	`PUTCHAR
(
›t
, 
u˝
); \

570 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

571 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

572 
	`PUTLONG
(
vÆ
, 
u˝
); \

573 }

	)

574 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

575 i‡(
√g
) { \

576 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAR o±=%d %X '%z'\n", 
›t
, 
vÆ
, val)); \

577 
	`PUTCHAR
(
›t
, 
u˝
); \

578 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

579 
	`PUTCHAR
(
vÆ
, 
u˝
); \

580 }

	)

582 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

583 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

584 
	`ADDCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

585 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

586 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

587 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

588 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

589 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

590 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

592 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

594 
	`LCPDEBUG
((
LOG_ERR
, "Bug inÜcp_addci: wrongÜength\n"));

596 
	}
}

608 
	$l˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

610 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

611 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

612 
u_sh‹t
 
cish‹t
;

613 
u32_t
 
cû⁄g
;

620 
	#ACKCIVOID
(
›t
, 
√g
) \

621 i‡(
√g
) { \

622 i‡((
Àn
 -
CILEN_VOID
) < 0) \

623 
bad
; \

624 
	`GETCHAR
(
côy≥
, 
p
); \

625 
	`GETCHAR
(
cûí
, 
p
); \

626 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

627 
bad
; \

628 }

	)

629 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

630 i‡(
√g
) { \

631 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

632 
bad
; \

633 
	`GETCHAR
(
côy≥
, 
p
); \

634 
	`GETCHAR
(
cûí
, 
p
); \

635 i‡(
cûí
 !
CILEN_SHORT
 || 
côy≥
 !
›t
) \

636 
bad
; \

637 
	`GETSHORT
(
cish‹t
, 
p
); \

638 i‡(
cish‹t
 !
vÆ
) \

639 
bad
; \

640 }

	)

641 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

642 i‡(
√g
) { \

643 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

644 
bad
; \

645 
	`GETCHAR
(
côy≥
, 
p
); \

646 
	`GETCHAR
(
cûí
, 
p
); \

647 i‡(
cûí
 !
CILEN_CHAR
 || 
côy≥
 !
›t
) \

648 
bad
; \

649 
	`GETCHAR
(
cich¨
, 
p
); \

650 i‡(
cich¨
 !
vÆ
) \

651 
bad
; \

652 }

	)

653 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

654 i‡(
√g
) { \

655 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

656 
bad
; \

657 
	`GETCHAR
(
côy≥
, 
p
); \

658 
	`GETCHAR
(
cûí
, 
p
); \

659 i‡(
cûí
 !
CILEN_CHAP
 || 
côy≥
 !
›t
) \

660 
bad
; \

661 
	`GETSHORT
(
cish‹t
, 
p
); \

662 i‡(
cish‹t
 !
vÆ
) \

663 
bad
; \

664 
	`GETCHAR
(
cich¨
, 
p
); \

665 i‡(
cich¨
 !
dige°
) \

666 
bad
; \

667 }

	)

668 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

669 i‡(
√g
) { \

670 i‡((
Àn
 -
CILEN_LONG
) < 0) \

671 
bad
; \

672 
	`GETCHAR
(
côy≥
, 
p
); \

673 
	`GETCHAR
(
cûí
, 
p
); \

674 i‡(
cûí
 !
CILEN_LONG
 || 
côy≥
 !
›t
) \

675 
bad
; \

676 
	`GETLONG
(
cû⁄g
, 
p
); \

677 i‡(
cû⁄g
 !
vÆ
) \

678 
bad
; \

679 }

	)

680 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

681 i‡(
√g
) { \

682 i‡((
Àn
 -
CILEN_LQR
) < 0) \

683 
bad
; \

684 
	`GETCHAR
(
côy≥
, 
p
); \

685 
	`GETCHAR
(
cûí
, 
p
); \

686 i‡(
cûí
 !
CILEN_LQR
 || 
côy≥
 !
›t
) \

687 
bad
; \

688 
	`GETSHORT
(
cish‹t
, 
p
); \

689 i‡(
cish‹t
 !
PPP_LQR
) \

690 
bad
; \

691 
	`GETLONG
(
cû⁄g
, 
p
); \

692 i‡(
cû⁄g
 !
vÆ
) \

693 
bad
; \

694 }

	)

696 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

697 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

698 
	`ACKCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

699 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

700 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

701 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

702 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

703 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

704 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

709 i‡(
Àn
 != 0) {

710 
bad
;

712 
	`LCPDEBUG
((
LOG_INFO
, "lcp_acki: Ack\n"));

714 
bad
:

715 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_acki:Ñeceived bad Ack!\n"));

717 
	}
}

730 
	$l˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

732 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

733 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

734 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

735 
u_sh‹t
 
cish‹t
;

736 
u32_t
 
cû⁄g
;

737 
l˝_›ti⁄s
 
no
;

738 
l˝_›ti⁄s
 
åy
;

739 
lo›ed_back
 = 0;

740 
cûí
;

742 
	`BZERO
(&
no
, (no));

743 
åy
 = *
go
;

750 
	#NAKCIVOID
(
›t
, 
√g
, 
code
) \

751 i‡(
go
->
√g
 && \

752 
Àn
 >
CILEN_VOID
 && \

753 
p
[1] =
CILEN_VOID
 && \

754 
p
[0] =
›t
) { \

755 
Àn
 -
CILEN_VOID
; \

756 
	`INCPTR
(
CILEN_VOID
, 
p
); \

757 
no
.
√g
 = 1; \

758 
code
 \

759 }

	)

760 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

761 i‡(
go
->
√g
 && \

762 
Àn
 >
CILEN_CHAP
 && \

763 
p
[1] =
CILEN_CHAP
 && \

764 
p
[0] =
›t
) { \

765 
Àn
 -
CILEN_CHAP
; \

766 
	`INCPTR
(2, 
p
); \

767 
	`GETSHORT
(
cish‹t
, 
p
); \

768 
	`GETCHAR
(
cich¨
, 
p
); \

769 
no
.
√g
 = 1; \

770 
code
 \

771 }

	)

772 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

773 i‡(
go
->
√g
 && \

774 
Àn
 >
CILEN_CHAR
 && \

775 
p
[1] =
CILEN_CHAR
 && \

776 
p
[0] =
›t
) { \

777 
Àn
 -
CILEN_CHAR
; \

778 
	`INCPTR
(2, 
p
); \

779 
	`GETCHAR
(
cich¨
, 
p
); \

780 
no
.
√g
 = 1; \

781 
code
 \

782 }

	)

783 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

784 i‡(
go
->
√g
 && \

785 
Àn
 >
CILEN_SHORT
 && \

786 
p
[1] =
CILEN_SHORT
 && \

787 
p
[0] =
›t
) { \

788 
Àn
 -
CILEN_SHORT
; \

789 
	`INCPTR
(2, 
p
); \

790 
	`GETSHORT
(
cish‹t
, 
p
); \

791 
no
.
√g
 = 1; \

792 
code
 \

793 }

	)

794 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

795 i‡(
go
->
√g
 && \

796 
Àn
 >
CILEN_LONG
 && \

797 
p
[1] =
CILEN_LONG
 && \

798 
p
[0] =
›t
) { \

799 
Àn
 -
CILEN_LONG
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
cû⁄g
, 
p
); \

802 
no
.
√g
 = 1; \

803 
code
 \

804 }

	)

805 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

806 i‡(
go
->
√g
 && \

807 
Àn
 >
CILEN_LQR
 && \

808 
p
[1] =
CILEN_LQR
 && \

809 
p
[0] =
›t
) { \

810 
Àn
 -
CILEN_LQR
; \

811 
	`INCPTR
(2, 
p
); \

812 
	`GETSHORT
(
cish‹t
, 
p
); \

813 
	`GETLONG
(
cû⁄g
, 
p
); \

814 
no
.
√g
 = 1; \

815 
code
 \

816 }

	)

825 i‡(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) {

826 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

827 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à< 
PPP_DEFMRU
) {

828 
åy
.
mru
 = 
cish‹t
;

836 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) {

837 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

838 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

847 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
)

848 && 
Àn
 >
CILEN_SHORT


849 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

850 
cûí
 = 
p
[1];

851 
Àn
 -
cûí
;

852 
no
.
√g_ch≠
 = 
go
->neg_chap;

853 
no
.
√g_u∑p
 = 
go
->neg_upap;

854 
	`INCPTR
(2, 
p
);

855 
	`GETSHORT
(
cish‹t
, 
p
);

856 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

862 i‡(!
go
->
√g_ch≠
) {

863 
bad
;

865 
åy
.
√g_ch≠
 = 0;

867 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

868 
	`GETCHAR
(
cich¨
, 
p
);

869 i‡(
go
->
√g_ch≠
) {

875 i‡(
cich¨
 !
go
->
ch≠_mdty≥
) {

876 
åy
.
√g_ch≠
 = 0;

882 
åy
.
√g_u∑p
 = 0;

890 i‡(
go
->
√g_ch≠
) {

891 
åy
.
√g_ch≠
 = 0;

893 
åy
.
√g_u∑p
 = 0;

895 
p
 +
cûí
 - 
CILEN_SHORT
;

904 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

905 i‡(
cish‹t
 !
PPP_LQR
) {

906 
åy
.
√g_lqr
 = 0;

908 
åy
.
lqr_≥riod
 = 
cû⁄g
;

915 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

916 
åy
.
√g_cb˝
 = 0;

922 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

923 
åy
.
magi˙umbî
 = 
	`magic
();

924 
lo›ed_back
 = 1;

932 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
,

933 
åy
.
√g_pcom¥essi⁄
 = 0;

935 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
,

936 
åy
.
√g_accom¥essi⁄
 = 0;

955 
Àn
 > 
CILEN_VOID
) {

956 
	`GETCHAR
(
côy≥
, 
p
);

957 
	`GETCHAR
(
cûí
, 
p
);

958 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0) {

959 
bad
;

961 
√xt
 = 
p
 + 
cûí
 - 2;

963 
côy≥
) {

964 
CI_MRU
:

965 i‡((
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
)

966 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
) {

967 
bad
;

969 
	`GETSHORT
(
cish‹t
, 
p
);

970 i‡(
cish‹t
 < 
PPP_DEFMRU
) {

971 
åy
.
mru
 = 
cish‹t
;

974 
CI_ASYNCMAP
:

975 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl)

976 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
) {

977 
bad
;

980 
CI_AUTHTYPE
:

981 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap) {

982 
bad
;

985 
CI_MAGICNUMBER
:

986 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

987 
cûí
 !
CILEN_LONG
) {

988 
bad
;

991 
CI_PCOMPRESSION
:

992 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

993 || 
cûí
 !
CILEN_VOID
) {

994 
bad
;

997 
CI_ACCOMPRESSION
:

998 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

999 || 
cûí
 !
CILEN_VOID
) {

1000 
bad
;

1003 
CI_QUALITY
:

1004 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
) {

1005 
bad
;

1009 
p
 = 
√xt
;

1013 i‡(
Àn
 != 0) {

1014 
bad
;

1020 i‡(
f
->
°©e
 !
LS_OPENED
) {

1021 i‡(
lo›ed_back
) {

1022 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1023 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜine isÜooped back.\n"));

1024 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1027 
åy
.
numlo›s
 = 0;

1029 *
go
 = 
åy
;

1034 
bad
:

1035 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_nakci:Ñeceived bad Nak!\n"));

1037 
	}
}

1050 
	$l˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

1052 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1053 
u_ch¨
 
cich¨
;

1054 
u_sh‹t
 
cish‹t
;

1055 
u32_t
 
cû⁄g
;

1056 
l˝_›ti⁄s
 
åy
;

1058 
åy
 = *
go
;

1065 
	#REJCIVOID
(
›t
, 
√g
) \

1066 i‡(
go
->
√g
 && \

1067 
Àn
 >
CILEN_VOID
 && \

1068 
p
[1] =
CILEN_VOID
 && \

1069 
p
[0] =
›t
) { \

1070 
Àn
 -
CILEN_VOID
; \

1071 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1072 
åy
.
√g
 = 0; \

1073 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªjci: void o± %dÑeje˘ed\n", 
›t
)); \

1074 }

	)

1075 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1076 i‡(
go
->
√g
 && \

1077 
Àn
 >
CILEN_SHORT
 && \

1078 
p
[1] =
CILEN_SHORT
 && \

1079 
p
[0] =
›t
) { \

1080 
Àn
 -
CILEN_SHORT
; \

1081 
	`INCPTR
(2, 
p
); \

1082 
	`GETSHORT
(
cish‹t
, 
p
); \

1084 i‡(
cish‹t
 !
vÆ
) { \

1085 
bad
; \

1087 
åy
.
√g
 = 0; \

1088 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: sh‹à›à%dÑeje˘ed\n", 
›t
)); \

1089 }

	)

1090 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

1091 i‡(
go
->
√g
 && \

1092 
Àn
 >
CILEN_CHAP
 && \

1093 
p
[1] =
CILEN_CHAP
 && \

1094 
p
[0] =
›t
) { \

1095 
Àn
 -
CILEN_CHAP
; \

1096 
	`INCPTR
(2, 
p
); \

1097 
	`GETSHORT
(
cish‹t
, 
p
); \

1098 
	`GETCHAR
(
cich¨
, 
p
); \

1100 i‡(
cish‹t
 !
vÆ
 || 
cich¨
 !
dige°
) { \

1101 
bad
; \

1103 
åy
.
√g
 = 0; \

1104 
åy
.
√g_u∑p
 = 0; \

1105 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: ch≠ o± %dÑeje˘ed\n", 
›t
)); \

1106 }

	)

1107 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1108 i‡(
go
->
√g
 && \

1109 
Àn
 >
CILEN_LONG
 && \

1110 
p
[1] =
CILEN_LONG
 && \

1111 
p
[0] =
›t
) { \

1112 
Àn
 -
CILEN_LONG
; \

1113 
	`INCPTR
(2, 
p
); \

1114 
	`GETLONG
(
cû⁄g
, 
p
); \

1116 i‡(
cû⁄g
 !
vÆ
) { \

1117 
bad
; \

1119 
åy
.
√g
 = 0; \

1120 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci:Ü⁄g o± %dÑeje˘ed\n", 
›t
)); \

1121 }

	)

1122 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1123 i‡(
go
->
√g
 && \

1124 
Àn
 >
CILEN_LQR
 && \

1125 
p
[1] =
CILEN_LQR
 && \

1126 
p
[0] =
›t
) { \

1127 
Àn
 -
CILEN_LQR
; \

1128 
	`INCPTR
(2, 
p
); \

1129 
	`GETSHORT
(
cish‹t
, 
p
); \

1130 
	`GETLONG
(
cû⁄g
, 
p
); \

1132 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) { \

1133 
bad
; \

1135 
åy
.
√g
 = 0; \

1136 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: LQR o± %dÑeje˘ed\n", 
›t
)); \

1137 }

	)

1138 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1139 i‡(
go
->
√g
 && \

1140 
Àn
 >
CILEN_CBCP
 && \

1141 
p
[1] =
CILEN_CBCP
 && \

1142 
p
[0] =
›t
) { \

1143 
Àn
 -
CILEN_CBCP
; \

1144 
	`INCPTR
(2, 
p
); \

1145 
	`GETCHAR
(
cich¨
, 
p
); \

1147 i‡(
cich¨
 !
vÆ
) { \

1148 
bad
; \

1150 
åy
.
√g
 = 0; \

1151 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: CÆlback o± %dÑeje˘ed\n", 
›t
)); \

1152 }

	)

1154 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1155 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1156 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
PPP_CHAP
, 
go
->
ch≠_mdty≥
);

1157 i‡(!
go
->
√g_ch≠
) {

1158 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1160 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1161 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1162 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1163 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1164 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1169 i‡(
Àn
 != 0) {

1170 
bad
;

1175 i‡(
f
->
°©e
 !
LS_OPENED
) {

1176 *
go
 = 
åy
;

1180 
bad
:

1181 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_rejci:Ñeceived bad Reject!\n"));

1183 
	}
}

1194 
	$l˝_ªqci
(
fsm
 *
f
,

1195 
u_ch¨
 *
öp
,

1196 *
À≈
,

1197 
ªje˘_if_dißgªe
)

1199 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1200 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1201 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1202 
u_ch¨
 *
cù
, *
√xt
;

1203 
cûí
, 
côy≥
, 
cich¨
;

1204 
u_sh‹t
 
cish‹t
;

1205 
u32_t
 
cû⁄g
;

1206 
rc
 = 
CONFACK
;

1207 
‹c
;

1208 
u_ch¨
 *
p
;

1209 
u_ch¨
 *
ªjp
;

1210 
u_ch¨
 *
«kp
;

1211 
l
 = *
À≈
;

1212 #i‡
TRACELCP
 > 0

1213 
åa˚Buf
[80];

1214 
åa˚Ndx
 = 0;

1220 
	`BZERO
(
ho
, (*ho));

1225 
√xt
 = 
öp
;

1226 
«kp
 = 
«k_buf„r
;

1227 
ªjp
 = 
öp
;

1228 
l
) {

1229 
‹c
 = 
CONFACK
;

1230 
cù
 = 
p
 = 
√xt
;

1231 i‡(
l
 < 2 ||

1232 
p
[1] < 2 ||

1233 
p
[1] > 
l
) {

1234 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: bad CIÜength!\n"));

1235 
‹c
 = 
CONFREJ
;

1236 
cûí
 = 
l
;

1237 
l
 = 0;

1238 
côy≥
 = 0;

1239 
ídswôch
;

1241 
	`GETCHAR
(
côy≥
, 
p
);

1242 
	`GETCHAR
(
cûí
, 
p
);

1243 
l
 -
cûí
;

1244 
√xt
 +
cûí
;

1246 
côy≥
) {

1247 
CI_MRU
:

1248 i‡(!
ao
->
√g_mru
) {

1249 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU -Çotállowed\n"));

1250 
‹c
 = 
CONFREJ
;

1252 } i‡(
cûí
 !
CILEN_SHORT
) {

1253 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU - badÜength\n"));

1254 
‹c
 = 
CONFREJ
;

1257 
	`GETSHORT
(
cish‹t
, 
p
);

1264 i‡(
cish‹t
 < 
PPP_MINMRU
) {

1265 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak - MRUÅoo small\n"));

1266 
‹c
 = 
CONFNAK
;

1267 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1268 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1269 
	`PUTSHORT
(
PPP_MINMRU
, 
«kp
);

1272 
ho
->
√g_mru
 = 1;

1273 
ho
->
mru
 = 
cish‹t
;

1274 #i‡
TRACELCP
 > 0

1275 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MRU %d", 
cish‹t
);

1276 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1280 
CI_ASYNCMAP
:

1281 i‡(!
ao
->
√g_asyncm≠
) {

1282 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAPÇotállowed\n"));

1283 
‹c
 = 
CONFREJ
;

1285 } i‡(
cûí
 !
CILEN_LONG
) {

1286 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAP badÜength\n"));

1287 
‹c
 = 
CONFREJ
;

1290 
	`GETLONG
(
cû⁄g
, 
p
);

1296 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1297 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak ASYNCMAP %lX missing %lX\n",

1298 
cû⁄g
, 
ao
->
asyncm≠
));

1299 
‹c
 = 
CONFNAK
;

1300 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1301 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1302 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1305 
ho
->
√g_asyncm≠
 = 1;

1306 
ho
->
asyncm≠
 = 
cû⁄g
;

1307 #i‡
TRACELCP
 > 0

1308 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " ASYNCMAP=%lX", 
cû⁄g
);

1309 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1313 
CI_AUTHTYPE
:

1314 i‡(
cûí
 < 
CILEN_SHORT
) {

1315 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPE missingárg\n"));

1316 
‹c
 = 
CONFREJ
;

1318 } i‡(!(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
)) {

1322 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPEÇotállowed\n"));

1323 
‹c
 = 
CONFREJ
;

1326 
	`GETSHORT
(
cish‹t
, 
p
);

1339 i‡(
cish‹t
 =
PPP_PAP
) {

1340 i‡(
ho
->
√g_ch≠
) {

1341 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAPálreadyáccepted\n"));

1342 
‹c
 = 
CONFREJ
;

1344 } i‡(
cûí
 !
CILEN_SHORT
) {

1345 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAP badÜen\n"));

1346 
‹c
 = 
CONFREJ
;

1349 i‡(!
ao
->
√g_u∑p
) {

1350 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE PAPÇotállowed\n"));

1351 
‹c
 = 
CONFNAK
;

1352 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1353 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1354 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1355 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1358 
ho
->
√g_u∑p
 = 1;

1359 #i‡
TRACELCP
 > 0

1360 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " PAP (%X)", 
cish‹t
);

1361 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1365 i‡(
cish‹t
 =
PPP_CHAP
) {

1366 i‡(
ho
->
√g_u∑p
) {

1367 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAPáccepted PAP\n"));

1368 
‹c
 = 
CONFREJ
;

1370 } i‡(
cûí
 !
CILEN_CHAP
) {

1371 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAP badÜen\n"));

1372 
‹c
 = 
CONFREJ
;

1375 i‡(!
ao
->
√g_ch≠
) {

1376 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE CHAPÇotállowed\n"));

1377 
‹c
 = 
CONFNAK
;

1378 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1379 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1380 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1383 
	`GETCHAR
(
cich¨
, 
p
);

1384 i‡(
cich¨
 !
CHAP_DIGEST_MD5


1385 #ifde‡
CHAPMS


1386 && 
cich¨
 !
CHAP_MICROSOFT


1389 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE CHAP dige°=%d\n", 
cich¨
));

1390 
‹c
 = 
CONFNAK
;

1391 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1392 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1393 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1394 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1397 #i‡
TRACELCP
 > 0

1398 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " CHAP %X,%d", 
cish‹t
, 
cich¨
);

1399 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1401 
ho
->
ch≠_mdty≥
 = 
cich¨
;

1402 
ho
->
√g_ch≠
 = 1;

1411 
‹c
 = 
CONFNAK
;

1412 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1413 i‡(
ao
->
√g_ch≠
) {

1414 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq CHAP\n", 
cish‹t
));

1415 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1416 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1417 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1419 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq PAP\n", 
cish‹t
));

1420 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1421 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1425 
CI_QUALITY
:

1426 
	`GETSHORT
(
cish‹t
, 
p
);

1427 
	`GETLONG
(
cû⁄g
, 
p
);

1428 #i‡
TRACELCP
 > 0

1429 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " QUALITY (%x %x)", 
cish‹t
, (Ë
cû⁄g
);

1430 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1433 i‡(!
ao
->
√g_lqr
 ||

1434 
cûí
 !
CILEN_LQR
) {

1435 
‹c
 = 
CONFREJ
;

1443 i‡(
cish‹t
 !
PPP_LQR
) {

1444 
‹c
 = 
CONFNAK
;

1445 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1446 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1447 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1448 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1453 
CI_MAGICNUMBER
:

1454 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1455 
cûí
 !
CILEN_LONG
) {

1456 
‹c
 = 
CONFREJ
;

1459 
	`GETLONG
(
cû⁄g
, 
p
);

1460 #i‡
TRACELCP
 > 0

1461 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MAGICNUMBER (%lX)", 
cû⁄g
);

1462 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1468 i‡(
go
->
√g_magi˙umbî
 &&

1469 
cû⁄g
 =
go
->
magi˙umbî
) {

1470 
cû⁄g
 = 
	`magic
();

1471 
‹c
 = 
CONFNAK
;

1472 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1473 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1474 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1477 
ho
->
√g_magi˙umbî
 = 1;

1478 
ho
->
magi˙umbî
 = 
cû⁄g
;

1482 
CI_PCOMPRESSION
:

1483 #i‡
TRACELCP
 > 0

1484 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " PCOMPRESSION");

1485 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1487 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1488 
cûí
 !
CILEN_VOID
) {

1489 
‹c
 = 
CONFREJ
;

1492 
ho
->
√g_pcom¥essi⁄
 = 1;

1495 
CI_ACCOMPRESSION
:

1496 #i‡
TRACELCP
 > 0

1497 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " ACCOMPRESSION");

1498 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1500 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1501 
cûí
 !
CILEN_VOID
) {

1502 
‹c
 = 
CONFREJ
;

1505 
ho
->
√g_accom¥essi⁄
 = 1;

1508 
CI_MRRU
:

1509 #i‡
TRACELCP
 > 0

1510 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_MRRU");

1511 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1513 
‹c
 = 
CONFREJ
;

1516 
CI_SSNHF
:

1517 #i‡
TRACELCP
 > 0

1518 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_SSNHF");

1519 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1521 
‹c
 = 
CONFREJ
;

1524 
CI_EPDISC
:

1525 #i‡
TRACELCP
 > 0

1526 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_EPDISC");

1527 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1529 
‹c
 = 
CONFREJ
;

1533 #i‡
TRACELCP


1534 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " unknow¿%d", 
côy≥
);

1535 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1537 
‹c
 = 
CONFREJ
;

1541 
ídswôch
:

1542 #i‡
TRACELCP


1543 i‡(
åa˚Ndx
 >= 80 - 32) {

1544 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñcvd%s\n", 
åa˚Buf
));

1545 
åa˚Ndx
 = 0;

1548 i‡(
‹c
 =
CONFACK
 &&

1549 
rc
 !
CONFACK
) {

1553 i‡(
‹c
 =
CONFNAK
) {

1554 i‡(
ªje˘_if_dißgªe


1555 && 
côy≥
 !
CI_MAGICNUMBER
) {

1556 
‹c
 = 
CONFREJ
;

1558 i‡(
rc
 =
CONFREJ
) {

1561 
rc
 = 
CONFNAK
;

1564 i‡(
‹c
 =
CONFREJ
) {

1565 
rc
 = 
CONFREJ
;

1566 i‡(
cù
 !
ªjp
) {

1567 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1569 
	`INCPTR
(
cûí
, 
ªjp
);

1580 
rc
) {

1581 
CONFACK
:

1582 *
À≈
 = ()(
√xt
 - 
öp
);

1584 
CONFNAK
:

1588 *
À≈
 = ()(
«kp
 - 
«k_buf„r
);

1589 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1591 
CONFREJ
:

1592 *
À≈
 = ()(
ªjp
 - 
öp
);

1596 #i‡
TRACELCP
 > 0

1597 i‡(
åa˚Ndx
 > 0) {

1598 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci: %s\n", 
åa˚Buf
));

1601 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñëu∫ög CONF%s.\n", 
	`CODENAME
(
rc
)));

1602  (
rc
);

1603 
	}
}

1610 
	$l˝_up
(
fsm
 *
f
)

1612 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1613 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1614 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1615 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1617 i‡(!
go
->
√g_magi˙umbî
) {

1618 
go
->
magi˙umbî
 = 0;

1620 i‡(!
ho
->
√g_magi˙umbî
) {

1621 
ho
->
magi˙umbî
 = 0;

1630 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
	`LWIP_MIN
(
ao
->
mru
, (
ho
->
√g_mru
? ho->mru: 
PPP_MRU
)),

1631 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffffl),

1632 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1638 
	`µp_ªcv_c⁄fig
(
f
->
unô
, (
go
->
√g_mru
? 
	`LWIP_MAX
(
wo
->
mru
, go->mru): 
PPP_MRU
),

1639 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1640 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1642 i‡(
ho
->
√g_mru
) {

1643 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1646 
	`l˝_echo_lowîup
(
f
->
unô
);

1648 
	`lök_e°ablished
(
f
->
unô
);

1649 
	}
}

1658 
	$l˝_down
(
fsm
 *
f
)

1660 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1662 
	`l˝_echo_lowîdown
(
f
->
unô
);

1664 
	`lök_down
(
f
->
unô
);

1666 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

1667 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1668 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1669 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1670 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1671 
	}
}

1678 
	$l˝_°¨tög
(
fsm
 *
f
)

1680 
	`lök_ªquúed
(
f
->
unô
);

1681 
	}
}

1688 
	$l˝_föished
(
fsm
 *
f
)

1690 
	`lök_ãrmö©ed
(
f
->
unô
);

1691 
	}
}

1700 
	$¥öt_°rög
–*
p
, 
Àn
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1702 
c
;

1704 
	`¥öãr
(
¨g
, "\"");

1705 ; 
Àn
 > 0; --len) {

1706 
c
 = *
p
++;

1707 i‡(' ' <
c
 && c <= '~') {

1708 i‡(
c
 == '\\' || c == '"') {

1709 
	`¥öãr
(
¨g
, "\\");

1711 
	`¥öãr
(
¨g
, "%c", 
c
);

1713 
c
) {

1715 
	`¥öãr
(
¨g
, "\\n");

1718 
	`¥öãr
(
¨g
, "\\r");

1721 
	`¥öãr
(
¨g
, "\\t");

1724 
	`¥öãr
(
¨g
, "\\%.3o", 
c
);

1728 
	`¥öãr
(
¨g
, "\"");

1729 
	}
}

1735 *
	gl˝_codíames
[] = {

1742 
	$l˝_¥öçkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1744 
code
, 
id
, 
Àn
, 
ﬁí
;

1745 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1746 
u_sh‹t
 
cish‹t
;

1747 
u32_t
 
cû⁄g
;

1749 i‡(
∂í
 < 
HEADERLEN
) {

1752 
p°¨t
 = 
p
;

1753 
	`GETCHAR
(
code
, 
p
);

1754 
	`GETCHAR
(
id
, 
p
);

1755 
	`GETSHORT
(
Àn
, 
p
);

1756 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
) {

1760 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*)) {

1761 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

1763 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1765 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1766 
Àn
 -
HEADERLEN
;

1767 
code
) {

1768 
CONFREQ
:

1769 
CONFACK
:

1770 
CONFNAK
:

1771 
CONFREJ
:

1773 
Àn
 >= 2) {

1774 
	`GETCHAR
(
code
, 
p
);

1775 
	`GETCHAR
(
ﬁí
, 
p
);

1776 
p
 -= 2;

1777 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1780 
	`¥öãr
(
¨g
, " <");

1781 
Àn
 -
ﬁí
;

1782 
›ãnd
 = 
p
 + 
ﬁí
;

1783 
code
) {

1784 
CI_MRU
:

1785 i‡(
ﬁí
 =
CILEN_SHORT
) {

1786 
p
 += 2;

1787 
	`GETSHORT
(
cish‹t
, 
p
);

1788 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

1791 
CI_ASYNCMAP
:

1792 i‡(
ﬁí
 =
CILEN_LONG
) {

1793 
p
 += 2;

1794 
	`GETLONG
(
cû⁄g
, 
p
);

1795 
	`¥öãr
(
¨g
, "asyncm≠ 0x%lx", 
cû⁄g
);

1798 
CI_AUTHTYPE
:

1799 i‡(
ﬁí
 >
CILEN_SHORT
) {

1800 
p
 += 2;

1801 
	`¥öãr
(
¨g
, "auth ");

1802 
	`GETSHORT
(
cish‹t
, 
p
);

1803 
cish‹t
) {

1804 
PPP_PAP
:

1805 
	`¥öãr
(
¨g
, "pap");

1807 
PPP_CHAP
:

1808 
	`¥öãr
(
¨g
, "chap");

1811 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1815 
CI_QUALITY
:

1816 i‡(
ﬁí
 >
CILEN_SHORT
) {

1817 
p
 += 2;

1818 
	`¥öãr
(
¨g
, "quality ");

1819 
	`GETSHORT
(
cish‹t
, 
p
);

1820 
cish‹t
) {

1821 
PPP_LQR
:

1822 
	`¥öãr
(
¨g
, "lqr");

1825 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1829 
CI_CALLBACK
:

1830 i‡(
ﬁí
 >
CILEN_CHAR
) {

1831 
p
 += 2;

1832 
	`¥öãr
(
¨g
, "callback ");

1833 
	`GETSHORT
(
cish‹t
, 
p
);

1834 
cish‹t
) {

1835 
CBCP_OPT
:

1836 
	`¥öãr
(
¨g
, "CBCP");

1839 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1843 
CI_MAGICNUMBER
:

1844 i‡(
ﬁí
 =
CILEN_LONG
) {

1845 
p
 += 2;

1846 
	`GETLONG
(
cû⁄g
, 
p
);

1847 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

1850 
CI_PCOMPRESSION
:

1851 i‡(
ﬁí
 =
CILEN_VOID
) {

1852 
p
 += 2;

1853 
	`¥öãr
(
¨g
, "pcomp");

1856 
CI_ACCOMPRESSION
:

1857 i‡(
ﬁí
 =
CILEN_VOID
) {

1858 
p
 += 2;

1859 
	`¥öãr
(
¨g
, "accomp");

1863 
p
 < 
›ãnd
) {

1864 
	`GETCHAR
(
code
, 
p
);

1865 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1867 
	`¥öãr
(
¨g
, ">");

1871 
TERMACK
:

1872 
TERMREQ
:

1873 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1874 
	`¥öãr
(
¨g
, " ");

1875 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1876 
p
 +
Àn
;

1877 
Àn
 = 0;

1881 
ECHOREQ
:

1882 
ECHOREP
:

1883 
DISCREQ
:

1884 i‡(
Àn
 >= 4) {

1885 
	`GETLONG
(
cû⁄g
, 
p
);

1886 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

1887 
p
 += 4;

1888 
Àn
 -= 4;

1894 ; 
Àn
 > 0; --len) {

1895 
	`GETCHAR
(
code
, 
p
);

1896 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1899  ()(
p
 - 
p°¨t
);

1900 
	}
}

1907 
	$L˝LökFaûuª
 (
fsm
 *
f
)

1909 i‡(
f
->
°©e
 =
LS_OPENED
) {

1910 
	`LCPDEBUG
((
LOG_INFO
, "Nÿª•⁄£Åÿ%dÉcho-ªque°s\n", 
l˝_echos_≥ndög
));

1911 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜinkáppearsÅo be disconnected.\n"));

1912 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

1914 
	}
}

1920 
	$L˝EchoCheck
 (
fsm
 *
f
)

1922 
	`L˝SídEchoReque°
 (
f
);

1927 
	`LWIP_ASSERT
("l˝_echo_timî_ru¬ög =0", 
l˝_echo_timî_ru¬ög
 == 0);

1929 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

1930 
l˝_echo_timî_ru¬ög
 = 1;

1931 
	}
}

1937 
	$L˝EchoTimeout
 (*
¨g
)

1939 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

1940 
l˝_echo_timî_ru¬ög
 = 0;

1941 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

1943 
	}
}

1949 
	$l˝_ª˚ived_echo_ª∂y
 (
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

1951 
u32_t
 
magic
;

1953 
	`LWIP_UNUSED_ARG
(
id
);

1956 i‡(
Àn
 < 4) {

1957 
	`LCPDEBUG
((
LOG_WARNING
, "l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d\n", 
Àn
));

1960 
	`GETLONG
(
magic
, 
öp
);

1961 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî
 && 
magic
 =l˝_gŸ›ti⁄s[f->unô].
magi˙umbî
) {

1962 
	`LCPDEBUG
((
LOG_WARNING
, "appearÅo haveÑeceived our ownÉcho-reply!\n"));

1967 
l˝_echos_≥ndög
 = 0;

1968 
	}
}

1974 
	$L˝SídEchoReque°
 (
fsm
 *
f
)

1976 
u32_t
 
l˝_magic
;

1977 
u_ch¨
 
pkt
[4], *
pkç
;

1982 i‡(
l˝_echo_Áûs
 != 0) {

1983 i‡(
l˝_echos_≥ndög
++ >
l˝_echo_Áûs
) {

1984 
	`L˝LökFaûuª
(
f
);

1985 
l˝_echos_≥ndög
 = 0;

1992 i‡(
f
->
°©e
 =
LS_OPENED
) {

1993 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

1994 
pkç
 = 
pkt
;

1995 
	`PUTLONG
(
l˝_magic
, 
pkç
);

1996 
	`fsm_sd©a
(
f
, 
ECHOREQ
, (
u_ch¨
)(
l˝_echo_numbî
++ & 0xFF), 
pkt
, ()(
pkç
 -Ökt));

1998 
	}
}

2005 
	$l˝_echo_lowîup
 (
unô
)

2007 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2010 
l˝_echos_≥ndög
 = 0;

2011 
l˝_echo_numbî
 = 0;

2012 
l˝_echo_timî_ru¬ög
 = 0;

2015 i‡(
l˝_echo_öãrvÆ
 != 0) {

2016 
	`L˝EchoCheck
 (
f
);

2018 
	}
}

2025 
	$l˝_echo_lowîdown
 (
unô
)

2027 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2029 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2030 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2031 
l˝_echo_timî_ru¬ög
 = 0;

2033 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/lcp.h

54 #i‚de‡
LCP_H


55 
	#LCP_H


	)

63 
	#CI_MRU
 1

	)

64 
	#CI_ASYNCMAP
 2

	)

65 
	#CI_AUTHTYPE
 3

	)

66 
	#CI_QUALITY
 4

	)

67 
	#CI_MAGICNUMBER
 5

	)

68 
	#CI_PCOMPRESSION
 7

	)

69 
	#CI_ACCOMPRESSION
 8

	)

70 
	#CI_CALLBACK
 13

	)

71 
	#CI_MRRU
 17

	)

72 
	#CI_SSNHF
 18

	)

73 
	#CI_EPDISC
 19

	)

78 
	#PROTREJ
 8

	)

79 
	#ECHOREQ
 9

	)

80 
	#ECHOREP
 10

	)

81 
	#DISCREQ
 11

	)

82 
	#CBCP_OPT
 6

	)

92 
	sl˝_›ti⁄s
 {

93 
u_öt
 
	m∑ssive
 : 1;

94 
u_öt
 
	msûít
 : 1;

95 
u_öt
 
	mª°¨t
 : 1;

96 
u_öt
 
	m√g_mru
 : 1;

97 
u_öt
 
	m√g_asyncm≠
 : 1;

98 
u_öt
 
	m√g_u∑p
 : 1;

99 
u_öt
 
	m√g_ch≠
 : 1;

100 
u_öt
 
	m√g_magi˙umbî
 : 1;

101 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

102 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

103 
u_öt
 
	m√g_lqr
 : 1;

104 
u_öt
 
	m√g_cb˝
 : 1;

105 #ifde‡
PPP_MULTILINK


106 
u_öt
 
	m√g_mºu
 : 1;

107 
u_öt
 
	m√g_s¢hf
 : 1;

108 
u_öt
 
	m√g_ídpoöt
 : 1;

110 
u_sh‹t
 
	mmru
;

111 #ifde‡
PPP_MULTILINK


112 
u_sh‹t
 
	mmºu
;

114 
u_ch¨
 
	mch≠_mdty≥
;

115 
u32_t
 
	masyncm≠
;

116 
u32_t
 
	mmagi˙umbî
;

117 
	mnumlo›s
;

118 
u32_t
 
	mlqr_≥riod
;

119 #ifde‡
PPP_MULTILINK


120 
ïdisc
 
	mídpoöt
;

122 } 
	tl˝_›ti⁄s
;

128 
	mPHASE_DEAD
 = 0,

129 
	mPHASE_INITIALIZE
,

130 
	mPHASE_ESTABLISH
,

131 
	mPHASE_AUTHENTICATE
,

132 
	mPHASE_CALLBACK
,

133 
	mPHASE_NETWORK
,

134 
	mPHASE_TERMINATE


135 } 
	tLökPha£
;

142 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

143 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

144 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

145 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

146 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

147 
ext_accm
 
xmô_accm
[];

154 
l˝_öô
 ();

155 
l˝_›í
 ();

156 
l˝_˛o£
 (, *);

157 
l˝_lowîup
 ();

158 
l˝_lowîdown
();

159 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

161 
¥Ÿít
 
l˝_¥Ÿít
;

165 
	#DEFLOOPBACKFAIL
 10

	)

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/magic.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"øndm.h
"

58 
	~"magic.h
"

69 
	$magicInô
()

72 
	}
}

77 
u32_t
 
	$magic
()

79  
	`avR™dom
();

80 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/magic.h

54 #i‚de‡
MAGIC_H


55 
	#MAGIC_H


	)

62 
magicInô
();

65 
u32_t
 
magic
();

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/md5.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 #i‡
CHAP_SUPPORT
 || 
MD5_SUPPORT


40 
	~"µp.h
"

41 
	~"µpdebug.h
"

43 
	~"md5.h
"

57 
Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
);

59 
	gPADDING
[64] = {

71 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

72 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

73 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

74 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

77 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

81 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

82 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

83 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

84 (
a
Ë+(
b
); \

85 }

	)

86 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

87 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

88 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

89 (
a
Ë+(
b
); \

90 }

	)

91 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

92 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

93 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

94 (
a
Ë+(
b
); \

95 }

	)

96 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

97 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

98 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

99 (
a
Ë+(
b
); \

100 }

	)

102 #ifde‡
__STDC__


103 
	#UL
(
x
Ëx##
UL


	)

105 #ifde‡
WIN32


106 
	#UL
(
x
Ëx##
UL


	)

108 
	#UL
(
x
Ë
	)
x

116 
	$MD5Inô
 (
MD5_CTX
 *
mdC⁄ãxt
)

118 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
u32_t
)0;

121 
mdC⁄ãxt
->
buf
[0] = (
u32_t
)0x67452301UL;

122 
mdC⁄ãxt
->
buf
[1] = (
u32_t
)0xefcdab89UL;

123 
mdC⁄ãxt
->
buf
[2] = (
u32_t
)0x98badcfeUL;

124 
mdC⁄ãxt
->
buf
[3] = (
u32_t
)0x10325476UL;

125 
	}
}

132 
	$MD5Upd©e
(
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
)

134 
u32_t
 
ö
[16];

135 
mdi
;

136 
i
, 
ii
;

139 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%.*H\n", 
öLí
, 
	`MIN
(öLí, 20Ë* 2, 
öBuf
);

140 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%s\n", 
öLí
, 
öBuf
);

144 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

147 i‡((
mdC⁄ãxt
->
i
[0] + ((
u32_t
)
öLí
 << 3)) < mdContext->i[0]) {

148 
mdC⁄ãxt
->
i
[1]++;

150 
mdC⁄ãxt
->
i
[0] +((
u32_t
)
öLí
 << 3);

151 
mdC⁄ãxt
->
i
[1] +((
u32_t
)
öLí
 >> 29);

153 
öLí
--) {

155 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

158 i‡(
mdi
 == 0x40) {

159 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4) {

160 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

161 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

162 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

163 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

165 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

166 
mdi
 = 0;

169 
	}
}

175 
	$MD5FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
)

177 
u32_t
 
ö
[16];

178 
mdi
;

179 
i
, 
ii
;

180 
∑dLí
;

183 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

184 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

187 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

190 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

191 
	`MD5Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

194 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4) {

195 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

196 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

197 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

198 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

200 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

203 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

204 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

205 
mdC⁄ãxt
->
dige°
[
ii
+1] =

206 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

207 
mdC⁄ãxt
->
dige°
[
ii
+2] =

208 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

209 
mdC⁄ãxt
->
dige°
[
ii
+3] =

210 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

212 
	`SMEMCPY
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

213 
	}
}

218 
	$Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
)

220 
u32_t
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

223 
	#S11
 7

	)

224 
	#S12
 12

	)

225 
	#S13
 17

	)

226 
	#S14
 22

	)

227 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

228 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

229 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

230 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

231 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

232 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

233 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

234 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

235 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

236 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

237 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

238 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

239 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

240 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

241 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

242 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

245 
	#S21
 5

	)

246 
	#S22
 9

	)

247 
	#S23
 14

	)

248 
	#S24
 20

	)

249 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

250 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

251 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

252 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

253 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

254 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

255 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

256 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

257 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

258 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

259 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

260 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

261 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

262 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

263 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

264 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

267 
	#S31
 4

	)

268 
	#S32
 11

	)

269 
	#S33
 16

	)

270 
	#S34
 23

	)

271 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

272 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

273 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

274 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

275 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

276 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

277 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

278 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

279 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

280 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

281 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

282 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

283 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

284 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

285 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

286 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

289 
	#S41
 6

	)

290 
	#S42
 10

	)

291 
	#S43
 15

	)

292 
	#S44
 21

	)

293 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

294 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

295 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

296 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

297 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

298 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

299 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

300 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

301 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

302 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

303 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

304 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

305 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

306 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

307 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

308 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

310 
buf
[0] +
a
;

311 
buf
[1] +
b
;

312 
buf
[2] +
c
;

313 
buf
[3] +
d
;

314 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/md5.h

40 #i‚de‡
MD5_H


41 
	#MD5_H


	)

45 
u32_t
 
	mi
[2];

46 
u32_t
 
	mbuf
[4];

47 
	mö
[64];

48 
	mdige°
[16];

49 } 
	tMD5_CTX
;

51 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

52 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

53 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/pap.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 #i‡
PAP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"auth.h
"

62 
	~"∑p.h
"

70 
u∑p_öô
 ();

71 
u∑p_lowîup
 ();

72 
u∑p_lowîdown
 ();

73 
u∑p_öput
 (, 
u_ch¨
 *, );

74 
u∑p_¥Ÿªj
 ();

76 
u∑p_timeout
 (*);

77 
u∑p_ªqtimeout
(*);

78 
u∑p_øuthªq
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

79 
u∑p_øuthack
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

80 
u∑p_øuth«k
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

81 
u∑p_ßuthªq
 (
u∑p_°©e
 *);

82 
u∑p_§e•
 (
u∑p_°©e
 *, 
u_ch¨
, u_char, *, );

88 
¥Ÿít
 
	g∑p_¥Ÿít
 = {

89 
PPP_PAP
,

90 
u∑p_öô
,

91 
u∑p_öput
,

92 
u∑p_¥Ÿªj
,

93 
u∑p_lowîup
,

94 
u∑p_lowîdown
,

95 
NULL
,

96 
NULL
,

98 
u∑p_¥öçkt
,

99 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL


110 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

121 
	$u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
)

123 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

126 
u
->
us_u£r
 = 
lu£r
;

127 
u
->
us_u£æí
 = 
	`°æí
(
lu£r
);

128 
u
->
us_∑sswd
 = 
Õassw‹d
;

129 
u
->
us_∑sswdÀn
 = 
	`°æí
(
Õassw‹d
);

130 
	}
}

139 
	$u∑p_authwôh≥î
(
unô
, *
u£r
, *
∑ssw‹d
)

141 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

143 
	`UPAPDEBUG
((
LOG_INFO
, "upap_authwithpeer: %d user=%sÖassword=%s s=%d\n",

144 
unô
, 
u£r
, 
∑ssw‹d
, 
u
->
us_˛õ¡°©e
));

146 
	`u∑p_£éogö∑sswd
(
unô
, 
u£r
, 
∑ssw‹d
);

148 
u
->
us_å™smôs
 = 0;

151 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

152 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

153 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

157 
	`u∑p_ßuthªq
(
u
);

158 
	}
}

167 
	$u∑p_auth≥î
(
unô
)

169 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

172 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

173 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

174 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

178 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

179 i‡(
u
->
us_ªqtimeout
 > 0) {

180 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

182 
	}
}

193 
	$u∑p_öô
(
unô
)

195 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

197 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_öô: %d\n", 
unô
));

198 
u
->
us_unô
 = 
unô
;

199 
u
->
us_u£r
 = 
NULL
;

200 
u
->
us_u£æí
 = 0;

201 
u
->
us_∑sswd
 = 
NULL
;

202 
u
->
us_∑sswdÀn
 = 0;

203 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

204 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

205 
u
->
us_id
 = 0;

206 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

207 
u
->
us_maxå™smôs
 = 10;

208 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

209 
	}
}

215 
	$u∑p_timeout
(*
¨g
)

217 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

219 
	`UPAPDEBUG
((
LOG_INFO
, "upap_timeout: %dÅimeout %dÉxpired s=%d\n",

220 
u
->
us_unô
, u->
us_timeouâime
, u->
us_˛õ¡°©e
));

222 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

226 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

228 
	`UPAPDEBUG
((
LOG_ERR
, "NoÑesponseÅo PAPáuthenticate-requests\n"));

229 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

230 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

234 
	`u∑p_ßuthªq
(
u
);

235 
	}
}

242 
	$u∑p_ªqtimeout
(*
¨g
)

244 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

246 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
) {

250 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

251 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

252 
	}
}

261 
	$u∑p_lowîup
(
unô
)

263 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

265 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîup: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

267 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
) {

268 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

269 } i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

270 
	`u∑p_ßuthªq
(
u
);

273 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
) {

274 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

275 } i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

276 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

277 i‡(
u
->
us_ªqtimeout
 > 0) {

278 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

281 
	}
}

290 
	$u∑p_lowîdown
(
unô
)

292 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

294 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîdown: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

296 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

297 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

299 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0) {

300 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

303 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

304 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

305 
	}
}

314 
	$u∑p_¥Ÿªj
(
unô
)

316 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

318 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

319 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed dueÅoÖrotocol-reject\n"));

320 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

322 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

323 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication ofÖeer failed (protocol-reject)\n"));

324 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

326 
	`u∑p_lowîdown
(
unô
);

327 
	}
}

334 
	$u∑p_öput
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
l
)

336 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

337 
u_ch¨
 *
öp
;

338 
u_ch¨
 
code
, 
id
;

339 
Àn
;

345 
öp
 = 
ö∑ckë
;

346 i‡(
l
 < 
UPAP_HEADERLEN
) {

347 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd short header.\n"));

350 
	`GETCHAR
(
code
, 
öp
);

351 
	`GETCHAR
(
id
, 
öp
);

352 
	`GETSHORT
(
Àn
, 
öp
);

353 i‡(
Àn
 < 
UPAP_HEADERLEN
) {

354 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd illegalÜength.\n"));

357 i‡(
Àn
 > 
l
) {

358 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd shortÖacket.\n"));

361 
Àn
 -
UPAP_HEADERLEN
;

366 
code
) {

367 
UPAP_AUTHREQ
:

368 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

371 
UPAP_AUTHACK
:

372 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

375 
UPAP_AUTHNAK
:

376 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

382 
	}
}

389 
	$u∑p_øuthªq
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

391 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

392 *
ru£r
, *
Ωasswd
;

393 
ªtcode
;

394 *
msg
;

395 
msgÀn
;

397 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth: Rcvd id %d.\n", 
id
));

399 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
) {

407 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

408 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

411 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

412 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

419 i‡(
Àn
 <  (
u_ch¨
)) {

420 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

423 
	`GETCHAR
(
ru£æí
, 
öp
);

424 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

425 i‡(
Àn
 < 0) {

426 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

429 
ru£r
 = (*Ë
öp
;

430 
	`INCPTR
(
ru£æí
, 
öp
);

431 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

432 i‡(
Àn
 < 
ΩasswdÀn
) {

433 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

436 
Ωasswd
 = (*Ë
öp
;

441 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
, 
ΩasswdÀn
, &
msg
, &
msgÀn
);

442 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

444 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

446 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

447 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

448 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 
ru£r
, 
ru£æí
);

450 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

451 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

454 i‡(
u
->
us_ªqtimeout
 > 0) {

455 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

457 
	}
}

464 
	$u∑p_øuthack
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

466 
u_ch¨
 
msgÀn
;

467 *
msg
;

469 
	`LWIP_UNUSED_ARG
(
id
);

471 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuthack: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

473 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

480 i‡(
Àn
 <  (
u_ch¨
)) {

481 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

484 
	`GETCHAR
(
msgÀn
, 
öp
);

485 
Àn
 - (
u_ch¨
);

486 i‡(
Àn
 < 
msgÀn
) {

487 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

490 
msg
 = (*Ë
öp
;

491 
	`PRINTMSG
(
msg
, 
msgÀn
);

493 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

495 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
);

496 
	}
}

503 
	$u∑p_øuth«k
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

505 
u_ch¨
 
msgÀn
;

506 *
msg
;

508 
	`LWIP_UNUSED_ARG
(
id
);

510 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth«k: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

512 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

519 i‡(
Àn
 <  (
u_ch¨
)) {

520 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

522 
	`GETCHAR
(
msgÀn
, 
öp
);

523 if(
msgÀn
 > 0) {

524 
Àn
 - (
u_ch¨
);

525 i‡(
Àn
 < 
msgÀn
) {

526 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

529 
msg
 = (*Ë
öp
;

530 
	`PRINTMSG
(
msg
, 
msgÀn
);

534 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

536 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed\n"));

537 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

538 
	}
}

545 
	$u∑p_ßuthªq
(
u∑p_°©e
 *
u
)

547 
u_ch¨
 *
ouç
;

548 
ouéí
;

550 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
)

551 + 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

552 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

554 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

556 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

557 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

558 
	`PUTSHORT
(
ouéí
, 
ouç
);

559 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

560 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

561 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

562 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

563 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

565 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

567 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_ßuth: Síàid %d\n", 
u
->
us_id
));

569 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

570 ++
u
->
us_å™smôs
;

571 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

572 
	}
}

579 
	$u∑p_§e•
(
u∑p_°©e
 *
u
, 
u_ch¨
 
code
, u_ch¨ 
id
, *
msg
, 
msgÀn
)

581 
u_ch¨
 *
ouç
;

582 
ouéí
;

584 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

585 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

586 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

588 
	`PUTCHAR
(
code
, 
ouç
);

589 
	`PUTCHAR
(
id
, 
ouç
);

590 
	`PUTSHORT
(
ouéí
, 
ouç
);

591 
	`PUTCHAR
(
msgÀn
, 
ouç
);

592 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

593 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

595 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_§e•: Síàcodê%d, id %d s=%d\n", 
code
, 
id
, 
u
->
us_˛õ¡°©e
));

596 
	}
}

602 
	$u∑p_¥öçkt
(

603 
u_ch¨
 *
p
,

604 
∂í
,

605 (*
¥öãr
) (*, *, ...),

606 *
¨g


609 
	`LWIP_UNUSED_ARG
(
p
);

610 
	`LWIP_UNUSED_ARG
(
∂í
);

611 
	`LWIP_UNUSED_ARG
(
¥öãr
);

612 
	`LWIP_UNUSED_ARG
(
¨g
);

614 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/pap.h

52 #i‚de‡
PAP_H


53 
	#PAP_H


	)

55 #i‡
PAP_SUPPORT


63 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#UPAP_AUTHREQ
 1

	)

70 
	#UPAP_AUTHACK
 2

	)

71 
	#UPAP_AUTHNAK
 3

	)

76 
	#UPAPCS_INITIAL
 0

	)

77 
	#UPAPCS_CLOSED
 1

	)

78 
	#UPAPCS_PENDING
 2

	)

79 
	#UPAPCS_AUTHREQ
 3

	)

80 
	#UPAPCS_OPEN
 4

	)

81 
	#UPAPCS_BADAUTH
 5

	)

86 
	#UPAPSS_INITIAL
 0

	)

87 
	#UPAPSS_CLOSED
 1

	)

88 
	#UPAPSS_PENDING
 2

	)

89 
	#UPAPSS_LISTEN
 3

	)

90 
	#UPAPSS_OPEN
 4

	)

91 
	#UPAPSS_BADAUTH
 5

	)

101 
	su∑p_°©e
 {

102 
	mus_unô
;

103 c⁄° *
	mus_u£r
;

104 
	mus_u£æí
;

105 c⁄° *
	mus_∑sswd
;

106 
	mus_∑sswdÀn
;

107 
	mus_˛õ¡°©e
;

108 
	mus_£rvî°©e
;

109 
u_ch¨
 
	mus_id
;

110 
	mus_timeouâime
;

111 
	mus_å™smôs
;

112 
	mus_maxå™smôs
;

113 
	mus_ªqtimeout
;

114 } 
	tu∑p_°©e
;

121 
u∑p_°©e
 
u∑p
[];

123 
u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
);

124 
u∑p_authwôh≥î
 (, *, *);

125 
u∑p_auth≥î
 ();

127 
¥Ÿít
 
∑p_¥Ÿít
;

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ppp.c

82 
	~"lwù/›t.h
"

84 #i‡
PPP_SUPPORT


86 
	~"lwù/ù.h
"

88 
	~"µp.h
"

89 
	~"µpdebug.h
"

91 
	~"øndm.h
"

92 
	~"fsm.h
"

93 #i‡
PAP_SUPPORT


94 
	~"∑p.h
"

96 #i‡
CHAP_SUPPORT


97 
	~"ch≠.h
"

99 
	~"ù˝.h
"

100 
	~"l˝.h
"

101 
	~"magic.h
"

102 
	~"auth.h
"

103 #i‡
VJ_SUPPORT


104 
	~"vj.h
"

106 #i‡
PPPOE_SUPPORT


107 
	~"√tif/µp_€.h
"

110 
	~<°rög.h
>

119 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

120 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

121 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

126 
	mPDIDLE
 = 0,

127 
	mPDSTART
,

128 
	mPDADDRESS
,

129 
	mPDCONTROL
,

130 
	mPDPROTOCOL1
,

131 
	mPDPROTOCOL2
,

132 
	mPDDATA


133 } 
	tPPPDevSèãs
;

135 
	#ESCAPE_P
(
accm
, 
c
Ë(◊ccm)[(cË>> 3] & 
µpACCMMask
[¯& 0x07])

	)

143 
	sPPPC⁄åﬁ_s
 {

144 
	m›íFœg
;

145 #i‡
PPPOE_SUPPORT


146 
√tif
 *
	mëhif
;

147 
µp€_so·c
 *
	mµp€_sc
;

149 
	mif_up
;

150 
	mîrCode
;

151 #i‡
PPPOS_SUPPORT


152 
sio_fd_t
 
	mfd
;

153 
	mkûl_lök
;

154 
	msig_hup
;

155 
pbuf
 *
	möHód
, *
	möTaû
;

156 
PPPDevSèãs
 
	möSèã
;

157 
	möEsˇ≥d
;

158 
u16_t
 
	möPrŸocﬁ
;

159 
u16_t
 
	möFCS
;

161 
	mmtu
;

162 
	mpcomp
;

163 
	maccomp
;

164 
u_l⁄g
 
	mœ°XMô
;

165 
ext_accm
 
	möACCM
;

166 
ext_accm
 
	moutACCM
;

167 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


168 
	mvjE«bÀd
;

169 
vjcom¥ess
 
	mvjComp
;

172 
√tif
 
	m√tif
;

174 
µp_addrs
 
	maddrs
;

176 (*
	mlökSètusCB
)(*
	m˘x
, 
	mîrCode
, *
	m¨g
);

177 *
	mlökSètusCtx
;

179 } 
	tPPPC⁄åﬁ
;

186 
	s≈io˘l
 {

187 
	m¥Ÿocﬁ
;

188 
NPmode
 
	mmode
;

196 #i‡
PPPOS_SUPPORT


197 
µpMaö
(*
pd
);

198 
µpDr›
(
PPPC⁄åﬁ
 *
pc
);

199 
µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
);

206 
u_l⁄g
 
	gsub√tMask
;

208 
PPPC⁄åﬁ
 
	gµpC⁄åﬁ
[
NUM_PPP
];

215 
¥Ÿít
 *
	gµp_¥Ÿocﬁs
[] = {

216 &
l˝_¥Ÿít
,

217 #i‡
PAP_SUPPORT


218 &
∑p_¥Ÿít
,

220 #i‡
CHAP_SUPPORT


221 &
ch≠_¥Ÿít
,

223 #i‡
CBCP_SUPPORT


224 &
cb˝_¥Ÿít
,

226 &
ù˝_¥Ÿít
,

227 #i‡
CCP_SUPPORT


228 &
c˝_¥Ÿít
,

230 
NULL


238 
u_ch¨
 *
	gouçackë_buf
[
NUM_PPP
];

245 #i‡
PPPOS_SUPPORT


249 c⁄° 
u_sh‹t
 
	gfc°ab
[256] = {

286 
u_ch¨
 
	gµpACCMMask
[] = {

299 
	$µpMaöWakeup
(
pd
)

301 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaöWakeup: unô %d\n", 
pd
));

302 
	`sio_ªad_ab‹t
(
µpC⁄åﬁ
[
pd
].
fd
);

303 
	}
}

307 
	$µpLökTîmö©ed
(
pd
)

309 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

311 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökTîmö©ed: unô %d\n", 
pd
));

313 #i‡
PPPOE_SUPPORT


314 if(
pc
->
ëhif
) {

315 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

319 #i‡
PPPOS_SUPPORT


320 
	`µpMaöWakeup
(
pd
);

323 
	}
}

326 
	$µpLökDown
(
pd
)

328 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

330 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökDown: unô %d\n", 
pd
));

332 #i‡
PPPOE_SUPPORT


333 if(
pc
->
ëhif
) {

334 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

338 #i‡
PPPOS_SUPPORT


339 
	`µpMaöWakeup
(
pd
);

342 
	}
}

351 
	$µpSèπCB
(*
¨g
)

353 
pd
 = ()
¨g
;

355 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSèπCB: unô %d\n", 
pd
));

356 
	`l˝_lowîup
(
pd
);

357 
	`l˝_›í
(
pd
);

358 
	}
}

361 
	$µpSt›CB
(*
¨g
)

363 
pd
 = ()
¨g
;

365 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSt›CB: unô %d\n", 
pd
));

366 
	`l˝_˛o£
(
pd
, "UserÑequest");

367 
	}
}

370 
	$µpHupCB
(*
¨g
)

372 
pd
 = ()
¨g
;

374 
	`PPPDEBUG
((
LOG_DEBUG
, "µpHupCB: unô %d\n", 
pd
));

375 
	`l˝_lowîdown
(
pd
);

376 
	`lök_ãrmö©ed
(
pd
);

377 
	}
}

384 
µp_£âögs
 
	gµp_£âögs
;

386 
îr_t


387 
	$µpInô
()

389 
¥Ÿít
 *
¥Ÿp
;

390 
i
, 
j
;

392 
	`mem£t
(&
µp_£âögs
, 0, (ppp_settings));

393 
µp_£âögs
.
u£≥îdns
 = 1;

394 
	`µpSëAuth
(
PPPAUTHTYPE_NONE
, 
NULL
, NULL);

396 
	`magicInô
();

398 
i
 = 0; i < 
NUM_PPP
; i++) {

399 
µpC⁄åﬁ
[
i
].
›íFœg
 = 0;

401 
sub√tMask
 = 
	`ht⁄l
(0xffffff00);

403 
ouçackë_buf
[
i
] = (
u_ch¨
 *)
	`mem_mÆloc
(
PPP_MRU
+
PPP_HDRLEN
);

404 if(!
ouçackë_buf
[
i
]) {

405  
ERR_MEM
;

411 
j
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[j]Ë!
NULL
; ++j) {

412 (*
¥Ÿp
->
öô
)(
i
);

416 #i‡
LINK_STATS


419 
	`mem£t
(&
lwù_°©s
.
lök
, 0, (lwip_stats.link));

422 #i‡
PPPOE_SUPPORT


423 
	`µp€_öô
();

426  
ERR_OK
;

427 
	}
}

430 
	$µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
)

432 
authTy≥
) {

433 
PPPAUTHTYPE_NONE
:

435 #ifde‡
LWIP_PPP_STRICT_PAP_REJECT


436 
µp_£âögs
.
ªfu£_∑p
 = 1;

439 
µp_£âögs
.
ªfu£_∑p
 = 0;

441 
µp_£âögs
.
ªfu£_ch≠
 = 1;

444 
PPPAUTHTYPE_ANY
:

464 
µp_£âögs
.
ªfu£_∑p
 = 0;

465 
µp_£âögs
.
ªfu£_ch≠
 = 0;

468 
PPPAUTHTYPE_PAP
:

469 
µp_£âögs
.
ªfu£_∑p
 = 0;

470 
µp_£âögs
.
ªfu£_ch≠
 = 1;

473 
PPPAUTHTYPE_CHAP
:

474 
µp_£âögs
.
ªfu£_∑p
 = 1;

475 
µp_£âögs
.
ªfu£_ch≠
 = 0;

479 if(
u£r
) {

480 
	`°∫˝y
(
µp_£âögs
.
u£r
, user, (ppp_settings.user)-1);

481 
µp_£âögs
.
u£r
[(ppp_settings.user)-1] = '\0';

483 
µp_£âögs
.
u£r
[0] = '\0';

486 if(
∑sswd
) {

487 
	`°∫˝y
(
µp_£âögs
.
∑sswd
,Öasswd, (ppp_settings.passwd)-1);

488 
µp_£âögs
.
∑sswd
[(ppp_settings.passwd)-1] = '\0';

490 
µp_£âögs
.
∑sswd
[0] = '\0';

492 
	}
}

494 #i‡
PPPOS_SUPPORT


503 
	$µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

505 
PPPC⁄åﬁ
 *
pc
;

506 
pd
;

509 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

511 i‡(
pd
 >
NUM_PPP
) {

512 
pd
 = 
PPPERR_OPEN
;

514 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

518 i‡(
pd
 >= 0) {

519 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

521 
	`l˝_öô
(
pd
);

522 
pc
 = &
µpC⁄åﬁ
[
pd
];

523 
pc
->
fd
 = fd;

524 #i‡
PPPOE_SUPPORT


525 
pc
->
ëhif

NULL
;

527 
pc
->
kûl_lök
 = 0;

528 
pc
->
sig_hup
 = 0;

529 
pc
->
if_up
 = 0;

530 
pc
->
îrCode
 = 0;

531 
pc
->
öSèã
 = 
PDIDLE
;

532 
pc
->
öHód
 = 
NULL
;

533 
pc
->
öTaû
 = 
NULL
;

534 
pc
->
öEsˇ≥d
 = 0;

535 
pc
->
œ°XMô
 = 0;

537 #i‡
VJ_SUPPORT


538 
pc
->
vjE«bÀd
 = 0;

539 
	`vj_com¥ess_öô
(&
pc
->
vjComp
);

546 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

547 
pc
->
öACCM
[15] = 0x60;

548 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

549 
pc
->
outACCM
[15] = 0x60;

551 
pc
->
lökSètusCB
 =ÜinkStatusCB;

552 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

554 
	`sys_thªad_√w
(
PPP_THREAD_NAME
, 
µpMaö
, (*)
pd
, 
PPP_THREAD_STACKSIZE
, 
PPP_THREAD_PRIO
);

555 if(!
lökSètusCB
) {

556 
pd
 >0 && !
pc
->
if_up
) {

557 
	`sys_m¶ìp
(500);

558 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

559 
	`µpClo£
(
pd
);

560 i‡(
pc
->
îrCode
) {

561 
pd
 = 
pc
->
îrCode
;

563 
pd
 = 
PPPERR_CONNECT
;

570  
pd
;

571 
	}
}

574 #i‡
PPPOE_SUPPORT


575 
µpOvîEthî√tLökSètusCB
(
pd
, 
up
);

578 
	$µpOvîEthî√tClo£
(
pd
)

580 
PPPC⁄åﬁ
* 
pc
 = &
µpC⁄åﬁ
[
pd
];

583 
	`l˝_˛o£
(
pd
, 
NULL
);

585 
	`µp€_de°roy
(&
pc
->
√tif
);

586 
	}
}

588 
	$µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

590 
PPPC⁄åﬁ
 *
pc
;

591 
pd
;

593 
	`LWIP_UNUSED_ARG
(
£rvi˚_«me
);

594 
	`LWIP_UNUSED_ARG
(
c⁄˚¡øt‹_«me
);

597 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

598 i‡(
pd
 >
NUM_PPP
) {

599 
pd
 = 
PPPERR_OPEN
;

601 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

605 i‡(
pd
 >= 0) {

607 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

609 
	`l˝_öô
(
pd
);

611 
l˝_w™t›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

612 
l˝_w™t›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

613 
l˝_w™t›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

614 
l˝_w™t›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

616 
l˝_Ælow›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

617 
l˝_Ælow›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

618 
l˝_Ælow›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

619 
l˝_Ælow›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

621 
pc
 = &
µpC⁄åﬁ
[
pd
];

622 
pc
->
if_up
 = 0;

623 
pc
->
îrCode
 = 0;

624 
pc
->
œ°XMô
 = 0;

625 #i‡
PPPOS_SUPPORT


626 
pc
->
kûl_lök
 = 0;

627 
pc
->
sig_hup
 = 0;

628 
pc
->
öSèã
 = 
PDIDLE
;

629 
pc
->
öHód
 = 
NULL
;

630 
pc
->
öTaû
 = 
NULL
;

631 
pc
->
öEsˇ≥d
 = 0;

632 #i‡
VJ_SUPPORT


633 
pc
->
vjE«bÀd
 = 0;

636 
pc
->
ëhif
=Éthif;

638 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

639 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

641 
pc
->
lökSètusCB
 =ÜinkStatusCB;

642 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

644 if(
	`µp€_¸óã
(
ëhif
, 
pd
, 
µpOvîEthî√tLökSètusCB
, &
pc
->
µp€_sc
Ë!
ERR_OK
) {

645 
pc
->
›íFœg
 = 0;

646  
PPPERR_OPEN
;

649 
	`µp€_c⁄√˘
(
pc
->
µp€_sc
);

651 if(!
lökSètusCB
) {

652 
pd
 >0 && !
pc
->
if_up
) {

653 
	`sys_m¶ìp
(500);

654 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

655 
	`µpClo£
(
pd
);

656 i‡(
pc
->
îrCode
) {

657 
pd
 = 
pc
->
îrCode
;

659 
pd
 = 
PPPERR_CONNECT
;

666  
pd
;

667 
	}
}

675 
	$µpClo£
(
pd
)

677 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

678 
°
 = 0;

681 #i‡
PPPOE_SUPPORT


682 if(
pc
->
ëhif
) {

683 
	`PPPDEBUG
((
LOG_DEBUG
, "µpClo£: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

684 
pc
->
îrCode
 = 
PPPERR_USER
;

686 
	`t˝ù_ˇŒback
(
µpSt›CB
, (*)
pd
);

690 #i‡
PPPOS_SUPPORT


691 
pc
->
kûl_lök
 = !0;

692 
	`µpMaöWakeup
(
pd
);

696 if(!
pc
->
lökSètusCB
) {

697 
°
 >0 && 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

698 
	`sys_m¶ìp
(500);

703  
°
;

704 
	}
}

708 
	$µpSigHUP
(
pd
)

710 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

712 #i‡
PPPOE_SUPPORT


713 if(
pc
->
ëhif
) {

714 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSigHUP: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

715 
	`t˝ù_ˇŒback
(
µpHupCB
, (*)
pd
);

719 #i‡
PPPOS_SUPPORT


720 
pc
->
sig_hup
 = 1;

721 
	`µpMaöWakeup
(
pd
);

724 
	}
}

726 #i‡
PPPOS_SUPPORT


728 
	$nPut
(
PPPC⁄åﬁ
 *
pc
, 
pbuf
 *
nb
)

730 
pbuf
 *
b
;

731 
c
;

733 
b
 = 
nb
; b !
NULL
; b = b->
√xt
) {

734 if((
c
 = 
	`sio_wrôe
(
pc
->
fd
, 
b
->
∑ylﬂd
, b->
Àn
)) != b->len) {

735 
	`PPPDEBUG
((
LOG_WARNING
,

736 "PPPÇPut: incom∂ëêsio_wrôe(%d,, %uË%d\n", 
pc
->
fd
, 
b
->
Àn
, 
c
));

737 
	`LINK_STATS_INC
(
lök
.
îr
);

738 
pc
->
œ°XMô
 = 0;

743 
	`pbuf_‰ì
(
nb
);

744 
	`LINK_STATS_INC
(
lök
.
xmô
);

745 
	}
}

753 
pbuf
 *

754 
	$µpAµíd
(
u_ch¨
 
c
, 
pbuf
 *
nb
, 
ext_accm
 *
outACCM
)

756 
pbuf
 *
tb
 = 
nb
;

762 i‡(
nb
 && (
PBUF_POOL_BUFSIZE
 -Çb->
Àn
) < 2) {

763 
tb
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

764 i‡(
tb
) {

765 
nb
->
√xt
 = 
tb
;

767 
	`LINK_STATS_INC
(
lök
.
memîr
);

769 
nb
 = 
tb
;

772 i‡(
nb
) {

773 i‡(
outACCM
 && 
	`ESCAPE_P
(*outACCM, 
c
)) {

774 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
PPP_ESCAPE
;

775 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
 ^ 
PPP_TRANS
;

777 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
;

781  
tb
;

782 
	}
}

785 #i‡
PPPOE_SUPPORT


786 
îr_t


787 
	$µpifOuçutOvîEthî√t
(
pd
, 
pbuf
 *
p
)

789 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

790 
pbuf
 *
pb
;

791 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

792 
i
=0;

794 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + (
¥Ÿocﬁ
), 
PBUF_RAM
);

795 if(!
pb
) {

796 
	`LINK_STATS_INC
(
lök
.
memîr
);

797 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

798  
ERR_MEM
;

801 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

803 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

805 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

806 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
++Ë(
¥Ÿocﬁ
 >> 8) & 0xFF;

808 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
Ë
¥Ÿocﬁ
 & 0xFF;

810 
	`pbuf_chaö
(
pb
, 
p
);

812 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

813 
	`LINK_STATS_INC
(
lök
.
îr
);

814  
PPPERR_DEVICE
;

817 
	`LINK_STATS_INC
(
lök
.
xmô
);

818  
ERR_OK
;

819 
	}
}

823 
îr_t


824 
	$µpifOuçut
(
√tif
 *√tif, 
pbuf
 *
pb
, 
ù_addr
 *
ùaddr
)

826 
pd
 = ()
√tif
->
°©e
;

827 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

828 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

829 #i‡
PPPOS_SUPPORT


830 
u_öt
 
fcsOut
 = 
PPP_INITFCS
;

831 
pbuf
 *
hódMB
 = 
NULL
, *
èûMB
 = NULL, *
p
;

832 
u_ch¨
 
c
;

835 
	`LWIP_UNUSED_ARG
(
ùaddr
);

840 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
 || !
pb
) {

841 
	`PPPDEBUG
((
LOG_WARNING
, "pppifOutput[%d]: badÖarmsÖrot=%dÖb=%p\n",

842 
pd
, 
¥Ÿocﬁ
, 
pb
));

843 
	`LINK_STATS_INC
(
lök
.
›ãº
);

844 
	`LINK_STATS_INC
(
lök
.
dr›
);

845  
ERR_ARG
;

849 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

850 
	`PPPDEBUG
((
LOG_ERR
, "µpifOuçut[%d]:ÜökÇŸ up\n", 
pd
));

851 
	`LINK_STATS_INC
(
lök
.
πîr
);

852 
	`LINK_STATS_INC
(
lök
.
dr›
);

853  
ERR_RTE
;

856 #i‡
PPPOE_SUPPORT


857 if(
pc
->
ëhif
) {

858  
	`µpifOuçutOvîEthî√t
(
pd
, 
pb
);

862 #i‡
PPPOS_SUPPORT


864 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

865 i‡(
hódMB
 =
NULL
) {

866 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: fú°áŒo¯Áû\n", 
pd
));

867 
	`LINK_STATS_INC
(
lök
.
memîr
);

868 
	`LINK_STATS_INC
(
lök
.
dr›
);

869  
ERR_MEM
;

872 #i‡
VJ_SUPPORT


877 i‡(
¥Ÿocﬁ
 =
PPP_IP
 && 
pc
->
vjE«bÀd
) {

878 
	`vj_com¥ess_t˝
(&
pc
->
vjComp
, 
pb
)) {

879 
TYPE_IP
:

883 
TYPE_COMPRESSED_TCP
:

884 
¥Ÿocﬁ
 = 
PPP_VJC_COMP
;

886 
TYPE_UNCOMPRESSED_TCP
:

887 
¥Ÿocﬁ
 = 
PPP_VJC_UNCOMP
;

890 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: bad IPÖackë\n", 
pd
));

891 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

892 
	`LINK_STATS_INC
(
lök
.
dr›
);

893 
	`pbuf_‰ì
(
hódMB
);

894  
ERR_VAL
;

899 
èûMB
 = 
hódMB
;

902 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

903 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

906 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

907 i‡(!
pc
->
accomp
) {

908 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_ALLSTATIONS
);

909 
èûMB
 = 
	`µpAµíd
(
PPP_ALLSTATIONS
,ÅaûMB, &
pc
->
outACCM
);

910 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_UI
);

911 
èûMB
 = 
	`µpAµíd
(
PPP_UI
,ÅaûMB, &
pc
->
outACCM
);

913 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

914 
c
 = (
¥Ÿocﬁ
 >> 8) & 0xFF;

915 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

916 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

918 
c
 = 
¥Ÿocﬁ
 & 0xFF;

919 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

920 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

923 
p
 = 
pb
;Ö;Ö =Ö->
√xt
) {

924 
n
;

925 
u_ch¨
 *
sPå
;

927 
sPå
 = (
u_ch¨
*)
p
->
∑ylﬂd
;

928 
n
 = 
p
->
Àn
;

929 
n
-- > 0) {

930 
c
 = *
sPå
++;

933 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

936 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

941 
c
 = ~
fcsOut
 & 0xFF;

942 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

943 
c
 = (~
fcsOut
 >> 8) & 0xFF;

944 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

945 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

948 i‡(!
èûMB
) {

949 
	`PPPDEBUG
((
LOG_WARNING
,

951 
pd
, 
¥Ÿocﬁ
));

952 
	`pbuf_‰ì
(
hódMB
);

953 
	`LINK_STATS_INC
(
lök
.
memîr
);

954 
	`LINK_STATS_INC
(
lök
.
dr›
);

955  
ERR_MEM
;

959 
	`PPPDEBUG
((
LOG_INFO
, "µpifOuçut[%d]:ÖrŸo=0x%04X\n", 
pd
, 
¥Ÿocﬁ
));

961 
	`nPut
(
pc
, 
hódMB
);

964  
ERR_OK
;

965 
	}
}

970 
	$µpIOCé
(
pd
, 
cmd
, *
¨g
)

972 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

973 
°
 = 0;

975 i‡(
pd
 < 0 ||Öd >
NUM_PPP
) {

976 
°
 = 
PPPERR_PARAM
;

978 
cmd
) {

979 
PPPCTLG_UPSTATUS
:

980 i‡(
¨g
) {

981 *(*)
¨g
 = ()(
pc
->
if_up
);

983 
°
 = 
PPPERR_PARAM
;

986 
PPPCTLS_ERRCODE
:

987 i‡(
¨g
) {

988 
pc
->
îrCode
 = *(*)
¨g
;

990 
°
 = 
PPPERR_PARAM
;

993 
PPPCTLG_ERRCODE
:

994 i‡(
¨g
) {

995 *(*)
¨g
 = ()(
pc
->
îrCode
);

997 
°
 = 
PPPERR_PARAM
;

1000 #i‡
PPPOS_SUPPORT


1001 
PPPCTLG_FD
:

1002 i‡(
¨g
) {

1003 *(
sio_fd_t
 *)
¨g
 = 
pc
->
fd
;

1005 
°
 = 
PPPERR_PARAM
;

1010 
°
 = 
PPPERR_PARAM
;

1015  
°
;

1016 
	}
}

1021 
u_öt


1022 
	$µpMTU
(
pd
)

1024 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1025 
u_öt
 
°
;

1028 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1029 
°
 = 0;

1031 
°
 = 
pc
->
mtu
;

1034  
°
;

1035 
	}
}

1037 #i‡
PPPOE_SUPPORT


1039 
	$µpWrôeOvîEthî√t
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1041 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1042 
pbuf
 *
pb
;

1045 
s
 += 2;

1046 
n
 -= 2;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + 
n
, 
PBUF_RAM
);

1049 if(!
pb
) {

1050 
	`LINK_STATS_INC
(
lök
.
memîr
);

1051 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1052  
PPPERR_ALLOC
;

1055 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

1057 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1059 
	`MEMCPY
(
pb
->
∑ylﬂd
, 
s
, 
n
);

1061 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

1062 
	`LINK_STATS_INC
(
lök
.
îr
);

1063  
PPPERR_DEVICE
;

1066 
	`LINK_STATS_INC
(
lök
.
xmô
);

1067  
PPPERR_NONE
;

1068 
	}
}

1077 
	$µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1079 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1080 #i‡
PPPOS_SUPPORT


1081 
u_ch¨
 
c
;

1082 
u_öt
 
fcsOut
;

1083 
pbuf
 *
hódMB
, *
èûMB
;

1086 #i‡
PPPOE_SUPPORT


1087 if(
pc
->
ëhif
) {

1088  
	`µpWrôeOvîEthî√t
(
pd
, 
s
, 
n
);

1092 #i‡
PPPOS_SUPPORT


1093 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1094 i‡(
hódMB
 =
NULL
) {

1095 
	`LINK_STATS_INC
(
lök
.
memîr
);

1096 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1097  
PPPERR_ALLOC
;

1100 
èûMB
 = 
hódMB
;

1104 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

1105 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1107 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1109 
fcsOut
 = 
PPP_INITFCS
;

1111 
n
-- > 0) {

1112 
c
 = *
s
++;

1115 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

1118 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1122 
c
 = ~
fcsOut
 & 0xFF;

1123 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1124 
c
 = (~
fcsOut
 >> 8) & 0xFF;

1125 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1126 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1130 i‡(!
èûMB
) {

1131 
	`PPPDEBUG
((
LOG_WARNING
,

1132 "µpWrôe[%d]: AŒo¯î∏- dr›pögÖbu‡Àn=%d\n", 
pd
, 
hódMB
->
Àn
));

1134 
	`pbuf_‰ì
(
hódMB
);

1135 
	`LINK_STATS_INC
(
lök
.
memîr
);

1136 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1137  
PPPERR_ALLOC
;

1140 
	`PPPDEBUG
((
LOG_INFO
, "µpWrôe[%d]:Üí=%d\n", 
pd
, 
hódMB
->
Àn
));

1142 
	`nPut
(
pc
, 
hódMB
);

1145  
PPPERR_NONE
;

1146 
	}
}

1153 
	$µp_£nd_c⁄fig
–
unô
, 
mtu
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1155 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1156 
i
;

1158 
pc
->
mtu
 = mtu;

1159 
pc
->
pcomp
 =Öcomp;

1160 
pc
->
accomp
 =áccomp;

1163 
i
 = 0; i < 32/8; i++) {

1164 
pc
->
outACCM
[
i
] = (
u_ch¨
)((
asyncm≠
 >> (8 * i)) & 0xFF);

1166 
	`PPPDEBUG
((
LOG_INFO
, "ppp_send_config[%d]: outACCM=%X %X %X %X\n",

1167 
unô
,

1168 
pc
->
outACCM
[0],Öc->outACCM[1],Öc->outACCM[2],Öc->outACCM[3]));

1169 
	}
}

1176 
	$µp_£t_xaccm
(
unô
, 
ext_accm
 *
accm
)

1178 
	`SMEMCPY
(
µpC⁄åﬁ
[
unô
].
outACCM
, 
accm
, (
ext_accm
));

1179 
	`PPPDEBUG
((
LOG_INFO
, "ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",

1180 
unô
,

1181 
µpC⁄åﬁ
[
unô
].
outACCM
[0],

1182 
µpC⁄åﬁ
[
unô
].
outACCM
[1],

1183 
µpC⁄åﬁ
[
unô
].
outACCM
[2],

1184 
µpC⁄åﬁ
[
unô
].
outACCM
[3]));

1185 
	}
}

1193 
	$µp_ªcv_c⁄fig
–
unô
, 
mru
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1195 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1196 
i
;

1198 
	`LWIP_UNUSED_ARG
(
accomp
);

1199 
	`LWIP_UNUSED_ARG
(
pcomp
);

1200 
	`LWIP_UNUSED_ARG
(
mru
);

1203 
i
 = 0; i < 32 / 8; i++) {

1204 
pc
->
öACCM
[
i
] = (
u_ch¨
)(
asyncm≠
 >> (i * 8));

1206 
	`PPPDEBUG
((
LOG_INFO
, "ppp_recv_config[%d]: inACCM=%X %X %X %X\n",

1207 
unô
,

1208 
pc
->
öACCM
[0],Öc->inACCM[1],Öc->inACCM[2],Öc->inACCM[3]));

1209 
	}
}

1219 
	$c˝_ã°
–
unô
, 
›t_Àn
, 
f‹_å™smô
, 
u_ch¨
 *
›t_±r
)

1222 
	}
}

1228 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1231 
	}
}

1239 
	$c˝_Áèl_îr‹
(
unô
)

1243 
	}
}

1250 
	$gë_idÀ_time
(
u
, 
µp_idÀ
 *
ù
)

1253 
	`LWIP_UNUSED_ARG
(
u
);

1254 
	`LWIP_UNUSED_ARG
(
ù
);

1257 
	}
}

1268 
u32_t


1269 
	$GëMask
(
u32_t
 
addr
)

1271 
u32_t
 
mask
, 
nmask
;

1273 
	`ht⁄l
(
addr
);

1274 i‡(
	`IN_CLASSA
(
addr
)) {

1275 
nmask
 = 
IN_CLASSA_NET
;

1276 } i‡(
	`IN_CLASSB
(
addr
)) {

1277 
nmask
 = 
IN_CLASSB_NET
;

1279 
nmask
 = 
IN_CLASSC_NET
;

1283 
mask
 = 
sub√tMask
 | 
	`ht⁄l
(
nmask
);

1290  
mask
;

1291 
	}
}

1297 
	$sifvjcomp
–
pd
, 
vjcomp
, 
cidcomp
, 
maxcid
)

1299 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1300 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1302 
pc
->
vjE«bÀd
 = 
vjcomp
;

1303 
pc
->
vjComp
.
com¥essSlŸ
 = 
cidcomp
;

1304 
pc
->
vjComp
.
maxSlŸIndex
 = 
maxcid
;

1305 
	`PPPDEBUG
((
LOG_INFO
, "sifvjcomp: VJ compressÉnable=%d slot=%d max slot=%d\n",

1306 
vjcomp
, 
cidcomp
, 
maxcid
));

1310 
	}
}

1315 
îr_t


1316 
	$µpifNëifInô
(
√tif
 *netif)

1318 
√tif
->
«me
[0] = 'p';

1319 
√tif
->
«me
[1] = 'p';

1320 
√tif
->
ouçut
 = 
µpifOuçut
;

1321 
√tif
->
mtu
 = 
	`µpMTU
((Íëif->
°©e
);

1322  
ERR_OK
;

1323 
	}
}

1330 
	$sifup
(
pd
)

1332 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1333 
°
 = 1;

1335 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1336 
°
 = 0;

1337 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1339 
	`√tif_ªmove
(&
pc
->
√tif
);

1340 i‡(
	`√tif_add
(&
pc
->
√tif
, &pc->
addrs
.
our_ùaddr
, &pc->addrs.
√tmask
, &pc->addrs.
his_ùaddr
, (*)
pd
, 
µpifNëifInô
, 
ù_öput
)) {

1341 
	`√tif_£t_up
(&
pc
->
√tif
);

1342 
pc
->
if_up
 = 1;

1343 
pc
->
îrCode
 = 
PPPERR_NONE
;

1345 
	`PPPDEBUG
((
LOG_DEBUG
, "sifup: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1346 if(
pc
->
lökSètusCB
) {

1347 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
, &pc->
addrs
);

1350 
°
 = 0;

1351 
	`PPPDEBUG
((
LOG_ERR
, "sifup[%d]:Çëif_add faûed\n", 
pd
));

1355  
°
;

1356 
	}
}

1362 
	$si‚pmode
(
u
, 
¥Ÿo
, 
NPmode
 
mode
)

1364 
	`LWIP_UNUSED_ARG
(
u
);

1365 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

1366 
	`LWIP_UNUSED_ARG
(
mode
);

1368 
	}
}

1374 
	$sifdown
(
pd
)

1376 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1377 
°
 = 1;

1379 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1380 
°
 = 0;

1381 
	`PPPDEBUG
((
LOG_WARNING
, "sifdown[%d]: badÖ¨ms\n", 
pd
));

1383 
pc
->
if_up
 = 0;

1384 
	`√tif_ªmove
(&
pc
->
√tif
);

1385 
	`PPPDEBUG
((
LOG_DEBUG
, "sifdown: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1386 if(
pc
->
lökSètusCB
) {

1387 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
, 
PPPERR_CONNECT
, 
NULL
);

1390  
°
;

1391 
	}
}

1403 
	$siÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
, u32_à
m
, u32_à
ns1
, u32_à
ns2
)

1405 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1406 
°
 = 1;

1408 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1409 
°
 = 0;

1410 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1412 
	`SMEMCPY
(&
pc
->
addrs
.
our_ùaddr
, &
o
, (o));

1413 
	`SMEMCPY
(&
pc
->
addrs
.
his_ùaddr
, &
h
, (h));

1414 
	`SMEMCPY
(&
pc
->
addrs
.
√tmask
, &
m
, (m));

1415 
	`SMEMCPY
(&
pc
->
addrs
.
dns1
, &
ns1
, (ns1));

1416 
	`SMEMCPY
(&
pc
->
addrs
.
dns2
, &
ns2
, (ns2));

1418  
°
;

1419 
	}
}

1429 
	$ciÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
)

1431 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1432 
°
 = 1;

1434 
	`LWIP_UNUSED_ARG
(
o
);

1435 
	`LWIP_UNUSED_ARG
(
h
);

1436 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1437 
°
 = 0;

1438 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1440 
	`IP4_ADDR
(&
pc
->
addrs
.
our_ùaddr
, 0,0,0,0);

1441 
	`IP4_ADDR
(&
pc
->
addrs
.
his_ùaddr
, 0,0,0,0);

1442 
	`IP4_ADDR
(&
pc
->
addrs
.
√tmask
, 255,255,255,0);

1443 
	`IP4_ADDR
(&
pc
->
addrs
.
dns1
, 0,0,0,0);

1444 
	`IP4_ADDR
(&
pc
->
addrs
.
dns2
, 0,0,0,0);

1446  
°
;

1447 
	}
}

1453 
	$sifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1455 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1456 
°
 = 1;

1458 
	`LWIP_UNUSED_ARG
(
l
);

1459 
	`LWIP_UNUSED_ARG
(
g
);

1461 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1462 
°
 = 0;

1463 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1465 
	`√tif_£t_deÁu…
(&
pc
->
√tif
);

1470  
°
;

1471 
	}
}

1477 
	$cifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1479 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1480 
°
 = 1;

1482 
	`LWIP_UNUSED_ARG
(
l
);

1483 
	`LWIP_UNUSED_ARG
(
g
);

1485 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1486 
°
 = 0;

1487 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1489 
	`√tif_£t_deÁu…
(
NULL
);

1492  
°
;

1493 
	}
}

1499 #i‡
PPPOS_SUPPORT


1503 
	$µpMaö
(*
¨g
)

1505 
pd
 = ()
¨g
;

1506 
pbuf
 *
p
;

1507 
PPPC⁄åﬁ
* 
pc
;

1508 
c
;

1510 
pc
 = &
µpC⁄åﬁ
[
pd
];

1512 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
PPP_MRU
+
PPP_HDRLEN
, 
PBUF_RAM
);

1513 i‡(!
p
) {

1514 
	`LWIP_ASSERT
("∞!NULL", 
p
);

1515 
pc
->
îrCode
 = 
PPPERR_ALLOC
;

1516 
out
;

1522 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1523 
	`t˝ù_ˇŒback
(
µpSèπCB
, 
¨g
);

1524 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

1525 i‡(
pc
->
kûl_lök
) {

1526 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

1527 
pc
->
îrCode
 = 
PPPERR_USER
;

1529 
	`t˝ù_ˇŒback
(
µpSt›CB
, 
¨g
);

1530 
pc
->
kûl_lök
 = 0;

1531 } i‡(
pc
->
sig_hup
) {

1532 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

1533 
pc
->
sig_hup
 = 0;

1534 
	`t˝ù_ˇŒback
(
µpHupCB
, 
¨g
);

1536 
c
 = 
	`sio_ªad
(
pc
->
fd
, 
p
->
∑ylﬂd
,Ö->
Àn
);

1537 if(
c
 > 0) {

1538 
	`µpInProc
(
pd
, 
p
->
∑ylﬂd
, 
c
);

1540 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sio_ªadÜí=%dÑëu∫ed %d\n", 
pd
, 
p
->
Àn
, 
c
));

1541 
	`sys_m¶ìp
(1);

1545 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: PHASE_DEAD\n", 
pd
));

1546 
	`µpDr›
(
pc
);

1547 
	`pbuf_‰ì
(
p
);

1549 
out
:

1550 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1551 if(
pc
->
lökSètusCB
) {

1552 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1555 
pc
->
›íFœg
 = 0;

1556 
	}
}

1559 #i‡
PPPOE_SUPPORT


1562 
	$µpOvîEthî√tInôFaûed
(* 
¨g
)

1564 
PPPC⁄åﬁ
* 
pc
;

1565 
pd
 = ()
¨g
;

1567 
	`µpHupCB
(
¨g
);

1568 
	`µpSt›CB
(
¨g
);

1570 
pc
 = &
µpC⁄åﬁ
[
pd
];

1571 
	`µp€_de°roy
(&
pc
->
√tif
);

1572 
pc
->
›íFœg
 = 0;

1574 if(
pc
->
lökSètusCB
) {

1575 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1577 
	}
}

1580 
	$µpOvîEthî√tLökSètusCB
(
pd
, 
up
)

1582 if(
up
) {

1583 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1584 
	`t˝ù_ˇŒback
(
µpSèπCB
, (*)
pd
);

1586 
PPPC⁄åﬁ
* 
pc
;

1587 
pc
 = &
µpC⁄åﬁ
[
pd
];

1588 
	`t˝ù_ˇŒback
(
µpOvîEthî√tInôFaûed
, (*)
pd
);

1590 
	}
}

1593 
pbuf
 *

1594 
	$µpSögÀBuf
(
pbuf
 *
p
)

1596 
pbuf
 *
q
, *
b
;

1597 
u_ch¨
 *
∂
;

1599 if(
p
->
tŸ_Àn
 =p->
Àn
) {

1600  
p
;

1603 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

1604 if(!
q
) {

1605 
	`PPPDEBUG
((
LOG_ERR
,

1606 "µpSögÀBuf: u«bÀÅÿÆlo¯√w bu‡(%d)\n", 
p
->
tŸ_Àn
));

1607  
p
;

1610 
b
 = 
p
, 
∂
 = 
q
->
∑ylﬂd
; b !
NULL
; b = b->
√xt
) {

1611 
	`MEMCPY
(
∂
, 
b
->
∑ylﬂd
, b->
Àn
);

1612 
∂
 +
b
->
Àn
;

1615 
	`pbuf_‰ì
(
p
);

1617  
q
;

1618 
	}
}

1620 
	sµpI≈utHódî
 {

1621 
	munô
;

1622 
u16_t
 
	m¥Ÿo
;

1630 
	$µpI≈ut
(*
¨g
)

1632 
pbuf
 *
nb
 = (pbu‡*)
¨g
;

1633 
u16_t
 
¥Ÿocﬁ
;

1634 
pd
;

1636 
pd
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
unô
;

1637 
¥Ÿocﬁ
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
¥Ÿo
;

1639 if(
	`pbuf_hódî
(
nb
, -()(
µpI≈utHódî
))) {

1640 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1641 
dr›
;

1644 
	`LINK_STATS_INC
(
lök
.
ªcv
);

1651 if((
l˝_pha£
[
pd
] <
PHASE_AUTHENTICATE
Ë&& (
¥Ÿocﬁ
 !
PPP_LCP
)) {

1652 if(!((
¥Ÿocﬁ
 =
PPP_LQR
Ë|| (¥Ÿocﬁ =
PPP_PAP
Ë|| (¥Ÿocﬁ =
PPP_CHAP
)) ||

1653 (
l˝_pha£
[
pd
] !
PHASE_AUTHENTICATE
)) {

1654 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut: disˇrdögÖrŸÿ0x%04X i¿pha£ %d\n", 
¥Ÿocﬁ
, 
l˝_pha£
[
pd
]));

1655 
dr›
;

1659 
¥Ÿocﬁ
) {

1660 
PPP_VJC_COMP
:

1661 #i‡
VJ_SUPPORT


1662 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_com∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1667 i‡((
	`vj_uncom¥ess_t˝
(&
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&& (µpC⁄åﬁ[pd].
√tif
.
öput
)) {

1668 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1672 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ com¥es£d\n", 
pd
));

1675 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: dr› VJ Com∞ö %d:%s\n", 
pd
, 
nb
->
Àn
,Çb->
∑ylﬂd
));

1679 
PPP_VJC_UNCOMP
:

1680 #i‡
VJ_SUPPORT


1681 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_u¿öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1686 i‡((
	`vj_uncom¥ess_uncomp
(
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&&ÖµC⁄åﬁ[pd].
√tif
.
öput
) {

1687 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1691 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ uncom¥es£d\n", 
pd
));

1694 
	`PPPDEBUG
((
LOG_INFO
,

1696 
pd
, 
nb
->
Àn
, 
	`LWIP_MIN
“b->À¿* 2, 40),Çb->
∑ylﬂd
));

1700 
PPP_IP
:

1701 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: i∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1702 i‡(
µpC⁄åﬁ
[
pd
].
√tif
.
öput
) {

1703 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1709 
¥Ÿít
 *
¥Ÿp
;

1710 
i
;

1715 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1716 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1717 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: %†Àn=%d\n", 
pd
, 
¥Ÿp
->
«me
, 
nb
->
Àn
));

1718 
nb
 = 
	`µpSögÀBuf
(nb);

1719 (*
¥Ÿp
->
öput
)(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1720 
out
;

1725 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]:Ñeje˘ög unsuµ‹ãdÖrŸÿ0x%04XÜí=%d\n", 
pd
, 
¥Ÿocﬁ
, 
nb
->
Àn
));

1726 i‡(
	`pbuf_hódî
(
nb
, (
¥Ÿocﬁ
))) {

1727 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1728 
dr›
;

1730 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1731 
¥Ÿocﬁ
 = 
	`ht⁄s
(protocol);

1732 
	`SMEMCPY
(
nb
->
∑ylﬂd
, &
¥Ÿocﬁ
, (protocol));

1734 
	`l˝_•rŸªj
(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1739 
dr›
:

1740 
	`LINK_STATS_INC
(
lök
.
dr›
);

1742 
out
:

1743 
	`pbuf_‰ì
(
nb
);

1745 
	}
}

1747 #i‡
PPPOS_SUPPORT


1752 
	$µpDr›
(
PPPC⁄åﬁ
 *
pc
)

1754 i‡(
pc
->
öHód
 !
NULL
) {

1756 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›: %d:%.*H\n", 
pc
->
öHód
->
Àn
, 
	`mö
(60,Öc->öHód->À¿* 2),Öc->öHód->
∑ylﬂd
));

1758 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›:Öbu‡Àn=%d\n", 
pc
->
öHód
->
Àn
));

1759 i‡(
pc
->
öTaû
 && (pc->öTaû !pc->
öHód
)) {

1760 
	`pbuf_‰ì
(
pc
->
öTaû
);

1762 
	`pbuf_‰ì
(
pc
->
öHód
);

1763 
pc
->
öHód
 = 
NULL
;

1764 
pc
->
öTaû
 = 
NULL
;

1766 #i‡
VJ_SUPPORT


1767 
	`vj_uncom¥ess_îr
(&
pc
->
vjComp
);

1770 
	`LINK_STATS_INC
(
lök
.
dr›
);

1771 
	}
}

1777 
	$µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
)

1779 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1780 
pbuf
 *
√xtNBuf
;

1781 
u_ch¨
 
curCh¨
;

1783 
	`PPPDEBUG
((
LOG_DEBUG
, "µpInProc[%d]: gŸ %d byãs\n", 
pd
, 
l
));

1784 
l
-- > 0) {

1785 
curCh¨
 = *
s
++;

1788 i‡(
	`ESCAPE_P
(
pc
->
öACCM
, 
curCh¨
)) {

1794 i‡(
curCh¨
 =
PPP_ESCAPE
) {

1795 
pc
->
öEsˇ≥d
 = 1;

1797 } i‡(
curCh¨
 =
PPP_FLAG
) {

1799 i‡(
pc
->
öSèã
 <
PDADDRESS
) {

1802 } i‡(
pc
->
öSèã
 < 
PDDATA
) {

1803 
	`PPPDEBUG
((
LOG_WARNING
,

1805 
pd
, 
pc
->
öSèã
));

1806 
	`LINK_STATS_INC
(
lök
.
À√º
);

1807 
	`µpDr›
(
pc
);

1809 } i‡(
pc
->
öFCS
 !
PPP_GOODFCS
) {

1810 
	`PPPDEBUG
((
LOG_INFO
,

1812 
pd
, 
pc
->
öFCS
,Öc->
öPrŸocﬁ
));

1813 
	`LINK_STATS_INC
(
lök
.
chkîr
);

1814 
	`µpDr›
(
pc
);

1818 if(
pc
->
öTaû
->
Àn
 >= 2) {

1819 
pc
->
öTaû
->
Àn
 -= 2;

1821 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1822 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1823 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1826 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1827 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1828 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1831 
	`pbuf_ªÆloc
(
pc
->
öHód
,Öc->öHód->
tŸ_Àn
 - 2);

1835 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pc
->
öHód
Ë!
ERR_OK
) {

1836 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1837 
	`pbuf_‰ì
(
pc
->
öHód
);

1838 
	`LINK_STATS_INC
(
lök
.
dr›
);

1840 
pc
->
öHód
 = 
NULL
;

1841 
pc
->
öTaû
 = 
NULL
;

1845 
pc
->
öFCS
 = 
PPP_INITFCS
;

1846 
pc
->
öSèã
 = 
PDADDRESS
;

1847 
pc
->
öEsˇ≥d
 = 0;

1851 
	`PPPDEBUG
((
LOG_WARNING
,

1852 "µpInProc[%d]: Dr›pög ACCM ch¨ <%d>\n", 
pd
, 
curCh¨
));

1857 i‡(
pc
->
öEsˇ≥d
) {

1858 
pc
->
öEsˇ≥d
 = 0;

1859 
curCh¨
 ^
PPP_TRANS
;

1863 
pc
->
öSèã
) {

1864 
PDIDLE
:

1867 i‡(
curCh¨
 !
PPP_ALLSTATIONS
) {

1872 
PDSTART
:

1874 
pc
->
öFCS
 = 
PPP_INITFCS
;

1877 
PDADDRESS
:

1878 i‡(
curCh¨
 =
PPP_ALLSTATIONS
) {

1879 
pc
->
öSèã
 = 
PDCONTROL
;

1884 
PDCONTROL
:

1886 i‡(
curCh¨
 =
PPP_UI
) {

1887 
pc
->
öSèã
 = 
PDPROTOCOL1
;

1892 
	`PPPDEBUG
((
LOG_WARNING
,

1893 "µpInProc[%d]: InvÆid c⁄åﬁ <%d>\n", 
pd
, 
curCh¨
));

1894 
pc
->
öSèã
 = 
PDSTART
;

1897 
PDPROTOCOL1
:

1900 i‡(
curCh¨
 & 1) {

1901 
pc
->
öPrŸocﬁ
 = 
curCh¨
;

1902 
pc
->
öSèã
 = 
PDDATA
;

1904 
pc
->
öPrŸocﬁ
 = (
u_öt
)
curCh¨
 << 8;

1905 
pc
->
öSèã
 = 
PDPROTOCOL2
;

1908 
PDPROTOCOL2
:

1909 
pc
->
öPrŸocﬁ
 |
curCh¨
;

1910 
pc
->
öSèã
 = 
PDDATA
;

1912 
PDDATA
:

1914 i‡(
pc
->
öTaû
 =
NULL
 ||Öc->öTaû->
Àn
 =
PBUF_POOL_BUFSIZE
) {

1915 if(
pc
->
öTaû
) {

1916 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1917 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1918 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1922 
√xtNBuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1923 i‡(
√xtNBuf
 =
NULL
) {

1927 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]: NO FREE MBUFS!\n", 
pd
));

1928 
	`LINK_STATS_INC
(
lök
.
memîr
);

1929 
	`µpDr›
(
pc
);

1930 
pc
->
öSèã
 = 
PDSTART
;

1933 i‡(
pc
->
öHód
 =
NULL
) {

1934 
µpI≈utHódî
 *
pih
 = 
√xtNBuf
->
∑ylﬂd
;

1936 
pih
->
unô
 = 
pd
;

1937 
pih
->
¥Ÿo
 = 
pc
->
öPrŸocﬁ
;

1939 
√xtNBuf
->
Àn
 +(*
pih
);

1941 
pc
->
öHód
 = 
√xtNBuf
;

1943 
pc
->
öTaû
 = 
√xtNBuf
;

1946 ((
u_ch¨
*)
pc
->
öTaû
->
∑ylﬂd
)[pc->öTaû->
Àn
++] = 
curCh¨
;

1951 
pc
->
öFCS
 = 
	`PPP_FCS
’c->öFCS, 
curCh¨
);

1955 
	`avR™domize
();

1956 
	}
}

1959 #i‡
PPPOE_SUPPORT


1961 
	$µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
)

1963 
µpI≈utHódî
 *
pih
;

1964 
u16_t
 
öPrŸocﬁ
;

1966 if(
pb
->
Àn
 < (
öPrŸocﬁ
)) {

1967 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet:Åoo small forÖrotocol field\n"));

1968 
dr›
;

1971 
öPrŸocﬁ
 = (((
u8_t
 *)
pb
->
∑ylﬂd
)[0] << 8) | ((u8_t*)pb->payload)[1];

1974 i‡(
	`pbuf_hódî
(
pb
, (*
pih
Ë- (
öPrŸocﬁ
)) != 0) {

1975 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet: couldÇotállocateÑoom for header\n"));

1976 
dr›
;

1979 
pih
 = 
pb
->
∑ylﬂd
;

1981 
pih
->
unô
 = 
pd
;

1982 
pih
->
¥Ÿo
 = 
öPrŸocﬁ
;

1985 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pb
Ë!
ERR_OK
) {

1986 
	`PPPDEBUG
((
LOG_ERR
, "µpInProcOvîEthî√t[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1987 
dr›
;

1992 
dr›
:

1993 
	`LINK_STATS_INC
(
lök
.
dr›
);

1994 
	`pbuf_‰ì
(
pb
);

1996 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ppp.h

34 #i‚de‡
PPP_H


35 
	#PPP_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"lwù/def.h
"

42 
	~"lwù/sio.h
"

43 
	~"lwù/≠i.h
"

44 
	~"lwù/sockës.h
"

45 
	~"lwù/°©s.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/√tif.h
"

96 
	#TIMEOUT
(
f
, 
a
, 
t
Ë
	`sys_u¡imeout
((f), (a)), 
	`sys_timeout
(—)*1000, (f), (a))

	)

97 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

100 #i‚de‡
__u_ch¨_deföed


103 
	tu_l⁄g
;

104 
	tu_öt
;

105 
	tu_sh‹t
;

106 
	tu_ch¨
;

118 
	#PPP_HDRLEN
 4

	)

119 
	#PPP_FCSLEN
 2

	)

125 
	#PPP_ALLSTATIONS
 0xf‡

	)

126 
	#PPP_UI
 0x03

	)

127 
	#PPP_FLAG
 0x7ê

	)

128 
	#PPP_ESCAPE
 0x7d

	)

129 
	#PPP_TRANS
 0x20

	)

134 
	#PPP_IP
 0x21

	)

135 
	#PPP_AT
 0x29

	)

136 
	#PPP_VJC_COMP
 0x2d

	)

137 
	#PPP_VJC_UNCOMP
 0x2‡

	)

138 
	#PPP_COMP
 0xfd

	)

139 
	#PPP_IPCP
 0x8021

	)

140 
	#PPP_ATCP
 0x8029

	)

141 
	#PPP_CCP
 0x80fd

	)

142 
	#PPP_LCP
 0xc021

	)

143 
	#PPP_PAP
 0xc023

	)

144 
	#PPP_LQR
 0xc025

	)

145 
	#PPP_CHAP
 0xc223

	)

146 
	#PPP_CBCP
 0xc029

	)

151 
	#PPP_INITFCS
 0xfff‡

	)

152 
	#PPP_GOODFCS
 0xf0b8

	)

153 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

158 
u_ch¨
 
	text_accm
[32];

163 
	eNPmode
 {

164 
	mNPMODE_PASS
,

165 
	mNPMODE_DROP
,

166 
	mNPMODE_ERROR
,

167 
	mNPMODE_QUEUE


176 
	#GETCHAR
(
c
, 
˝
) { \

177 (
c
Ë*(
˝
)++; \

178 }

	)

179 
	#PUTCHAR
(
c
, 
˝
) { \

180 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

181 }

	)

184 
	#GETSHORT
(
s
, 
˝
) { \

185 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

186 (
s
Ë|*(
˝
); (cp)++; \

187 }

	)

188 
	#PUTSHORT
(
s
, 
˝
) { \

189 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

190 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

191 }

	)

193 
	#GETLONG
(
l
, 
˝
) { \

194 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

195 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

196 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

197 (
l
Ë|*(
˝
); (cp)++; \

198 }

	)

199 
	#PUTLONG
(
l
, 
˝
) { \

200 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

201 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

202 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

203 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

204 }

	)

207 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

208 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

210 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

211 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

212 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

214 #i‡
PPP_DEBUG


215 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`µp_åa˚
(
LOG_INFO
, "RemŸêmesßge: %s\n", m); }

	)

217 
	#PRINTMSG
(
m
, 
l
)

	)

223 
	#MAKEHEADER
(
p
, 
t
) { \

224 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

225 
	`PUTCHAR
(
PPP_UI
, 
p
); \

226 
	`PUTSHORT
(
t
, 
p
); }

	)

233 
	#PPPERR_NONE
 0

	)

234 
	#PPPERR_PARAM
 -1

	)

235 
	#PPPERR_OPEN
 -2

	)

236 
	#PPPERR_DEVICE
 -3

	)

237 
	#PPPERR_ALLOC
 -4

	)

238 
	#PPPERR_USER
 -5

	)

239 
	#PPPERR_CONNECT
 -6

	)

240 
	#PPPERR_AUTHFAIL
 -7

	)

241 
	#PPPERR_PROTOCOL
 -8

	)

250 
	#PPPCTLG_UPSTATUS
 100

	)

251 
	#PPPCTLS_ERRCODE
 101

	)

252 
	#PPPCTLG_ERRCODE
 102

	)

253 
	#PPPCTLG_FD
 103

	)

263 
	s¥Ÿít
 {

264 
u_sh‹t
 
	m¥Ÿocﬁ
;

266 (*
	möô
Ë(
	munô
);

268 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

270 (*
	m¥Ÿªj
Ë(
	munô
);

272 (*
	mlowîup
Ë(
	munô
);

274 (*
	mlowîdown
Ë(
	munô
);

276 (*
	m›í
Ë(
	munô
);

278 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

281 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

282 (*
	m¥öãr
) (*, *, ...),

283 *
	m¨g
);

285 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

287 
	míabÀd_Êag
;

288 *
	m«me
;

291 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

293 (*
	mdem™d_c⁄f
Ë(
	munô
);

295 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

303 
	sµp_idÀ
 {

304 
u_sh‹t
 
	mxmô_idÀ
;

305 
u_sh‹t
 
	mªcv_idÀ
;

308 
	sµp_£âögs
 {

310 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

311 
u_öt
 
	mauth_ªquúed
 : 1;

312 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

313 
u_öt
 
	mªfu£_∑p
 : 1;

314 
u_öt
 
	mªfu£_ch≠
 : 1;

315 
u_öt
 
	mu£ho°«me
 : 1;

316 
u_öt
 
	mu£≥îdns
 : 1;

318 
u_sh‹t
 
	midÀ_time_limô
;

319 
	mmaxc⁄√˘
;

321 
	mu£r
 [
MAXNAMELEN
 + 1];

322 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

323 
	mour_«me
 [
MAXNAMELEN
 + 1];

324 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

327 
	sµp_addrs
 {

328 
ù_addr
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

336 
u_ch¨
 *
ouçackë_buf
[
NUM_PPP
];

338 
µp_£âögs
Öpp_settings;

340 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

348 
îr_t
 
µpInô
();

369 
	eµpAuthTy≥
 {

370 
	mPPPAUTHTYPE_NONE
,

371 
	mPPPAUTHTYPE_ANY
,

372 
	mPPPAUTHTYPE_PAP
,

373 
	mPPPAUTHTYPE_CHAP


376 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

385 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

390 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

393 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

400 
	`µpClo£
(
pd
);

405 
	`µpSigHUP
(
pd
);

411 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

416 
u_öt
 
	`µpMTU
(
pd
);

422 
	`µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

424 
	`µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

426 
pbuf
 *
	`µpSögÀBuf
(pbu‡*
p
);

428 
	`µpLökTîmö©ed
(
pd
);

430 
	`µpLökDown
(
pd
);

432 
	`µpMaöWakeup
(
pd
);

435 
	`µp_£nd_c⁄fig
 (, , 
u32_t
, , );

437 
	`µp_£t_xaccm
 (, 
ext_accm
 *);

439 
	`µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

441 
	`gë_idÀ_time
 (, 
µp_idÀ
 *);

444 
	`sifvjcomp
 (, , , );

446 
	`sifup
 ();

448 
	`si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

450 
	`sifdown
 ();

452 
	`siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

454 
	`ciÁddr
 (, 
u32_t
, u32_t);

456 
	`sifdeÁu…rouã
 (, 
u32_t
, u32_t);

458 
	`cifdeÁu…rouã
 (, 
u32_t
, u32_t);

461 
u32_t
 
	`GëMask
 (u32_t);

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ppp_oe.c

71 
	~"lwù/›t.h
"

73 #i‡
PPPOE_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"lwù/sys.h
"

80 
	~"√tif/µp_€.h
"

81 
	~"√tif/ëh¨p.h
"

83 
	~<°rög.h
>

84 
	~<°dio.h
>

87 #i‚de‡
_SYS_QUEUE_H_


88 
	#_SYS_QUEUE_H_


	)

104 
	#LIST_HEAD
(
«me
, 
ty≥
) \

105 
	s«me
 { \

106 
ty≥
 *
lh_fú°
; \

107 }

	)

109 
	#LIST_HEAD_INITIALIZER
(
hód
) \

110 { 
NULL
 }

	)

112 
	#LIST_ENTRY
(
ty≥
) \

114 
ty≥
 *
À_√xt
; \

115 
ty≥
 **
À_¥ev
; \

116 }

	)

122 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

124 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

126 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

127 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

128 (
v¨
); \

129 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

131 
	#LIST_INIT
(
hód
) do { \

132 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

133 } 0)

	)

135 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

136 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
) \

137 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

138 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

139 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

140 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

141 } 0)

	)

143 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

144 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

145 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

146 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

147 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

148 } 0)

	)

150 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

151 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

152 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

153 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

154 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

155 } 0)

	)

157 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

159 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

160 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

161 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

162 (
ñm
)->
fõld
.
À_¥ev
; \

163 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

164 } 0)

	)

170 
	#PPPOE_ADD_16
(
PTR
, 
VAL
) \

171 *(
PTR
)++ = (
VAL
) / 256; \

172 *(
PTR
)++ = (
VAL
Ë% 256

	)

175 
	#PPPOE_ADD_HEADER
(
PTR
, 
CODE
, 
SESS
, 
LEN
) \

176 *(
PTR
)++ = 
PPPOE_VERTYPE
; \

177 *(
PTR
)++ = (
CODE
); \

178 
	`PPPOE_ADD_16
(
PTR
, 
SESS
); \

179 
	`PPPOE_ADD_16
(
PTR
, 
LEN
)

	)

181 
	#PPPOE_DISC_TIMEOUT
 (5*1000Ë

	)

182 
	#PPPOE_SLOW_RETRY
 (60*1000Ë

	)

183 
	#PPPOE_DISC_MAXPADI
 4

	)

184 
	#PPPOE_DISC_MAXPADR
 2

	)

186 #ifde‡
PPPOE_SERVER


188 
	#IFF_PASSIVE
 
IFF_LINK0


	)

191 
	sµp€_so·c
 {

192 
LIST_ENTRY
(
µp€_so·c
Ë
	msc_li°
;

193 
√tif
 *
	msc_ëhif
;

194 
	msc_pd
;

195 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

197 
	msc_°©e
;

198 
ëh_addr
 
	msc_de°
;

199 
u16_t
 
	msc_£ssi⁄
;

201 *
	msc_£rvi˚_«me
;

202 *
	msc_c⁄˚¡øt‹_«me
;

203 
u8_t
 *
	msc_ac_cookõ
;

204 
size_t
 
	msc_ac_cookõ_Àn
;

205 #ifde‡
PPPOE_SERVER


206 
u8_t
 *
	msc_hunique
;

207 
size_t
 
	msc_hunique_Àn
;

209 
	msc_∑di_ªåõd
;

210 
	msc_∑dr_ªåõd
;

214 
µp€_di•©ch_disc_pkt
(
√tif
 *, 
pbuf
 *);

217 
µp€_do_disc⁄√˘
(
µp€_so·c
 *);

218 
µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *);

219 
µp€_˛ór_so·c
(
µp€_so·c
 *, const *);

222 
µp€_timeout
(*);

225 
îr_t
 
µp€_£nd_∑di
(
µp€_so·c
 *);

226 
îr_t
 
µp€_£nd_∑dr
(
µp€_so·c
 *);

227 #ifde‡
PPPOE_SERVER


228 
îr_t
 
µp€_£nd_∑do
(
µp€_so·c
 *);

229 
îr_t
 
µp€_£nd_∑ds
(
µp€_so·c
 *);

231 
îr_t
 
µp€_£nd_∑dt
(
√tif
 *, 
u_öt
, c⁄° 
u8_t
 *);

234 
µp€_so·c
 * 
µp€_föd_so·c_by_£ssi⁄
(
u_öt
, 
√tif
 *);

235 
µp€_so·c
 * 
µp€_föd_so·c_by_hunique
(
u8_t
 *, 
size_t
, 
√tif
 *);

237 
	$LIST_HEAD
(
µp€_so·c_hód
, 
µp€_so·c
Ë
µp€_so·c_li°
;

239 
µp€_hdæí
;

242 
	$µp€_öô
()

244 
µp€_hdæí
 = (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
;

245 
	`LIST_INIT
(&
µp€_so·c_li°
);

246 
	}
}

248 
îr_t


249 
	$µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
)

251 
µp€_so·c
 *
sc
;

253 
sc
 = 
	`mem_mÆloc
((
µp€_so·c
));

254 if(!
sc
) {

255 *
s˝å
 = 
NULL
;

256  
ERR_MEM
;

258 
	`mem£t
(
sc
, 0, (
µp€_so·c
));

261 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

263 
sc
->
sc_pd
 = 
pd
;

264 
sc
->
sc_lökSètusCB
 = 
lökSètusCB
;

265 
sc
->
sc_ëhif
 = 
ëhif
;

267 
	`LIST_INSERT_HEAD
(&
µp€_so·c_li°
, 
sc
, 
sc_li°
);

269 *
s˝å
 = 
sc
;

271  
ERR_OK
;

272 
	}
}

274 
îr_t


275 
	$µp€_de°roy
(
√tif
 *
iÂ
)

277 
µp€_so·c
 * 
sc
;

279 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

280 i‡(
sc
->
sc_ëhif
 =
iÂ
) {

285 if(!(
sc
 && (sc->
sc_ëhif
 =
iÂ
))) {

286  
ERR_IF
;

289 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

290 
	`LIST_REMOVE
(
sc
, 
sc_li°
);

292 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
) {

293 
	`mem_‰ì
(
sc
->
sc_c⁄˚¡øt‹_«me
);

295 i‡(
sc
->
sc_£rvi˚_«me
) {

296 
	`mem_‰ì
(
sc
->
sc_£rvi˚_«me
);

298 i‡(
sc
->
sc_ac_cookõ
) {

299 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

301 
	`mem_‰ì
(
sc
);

303  
ERR_OK
;

304 
	}
}

312 
µp€_so·c
 *

313 
	$µp€_föd_so·c_by_£ssi⁄
(
u_öt
 
£ssi⁄
, 
√tif
 *
rcvif
)

315 
µp€_so·c
 *
sc
;

317 i‡(
£ssi⁄
 == 0) {

318  
NULL
;

321 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

322 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION


323 && 
sc
->
sc_£ssi⁄
 =
£ssi⁄
) {

324 i‡(
sc
->
sc_ëhif
 =
rcvif
) {

325  
sc
;

327  
NULL
;

331  
NULL
;

332 
	}
}

336 
µp€_so·c
 *

337 
	$µp€_föd_so·c_by_hunique
(
u8_t
 *
tokí
, 
size_t
 
Àn
, 
√tif
 *
rcvif
)

339 
µp€_so·c
 *
sc
, *
t
;

341 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

342  
NULL
;

345 i‡(
Àn
 ! 
sc
) {

346  
NULL
;

348 
	`MEMCPY
(&
t
, 
tokí
, 
Àn
);

350 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

351 i‡(
sc
 =
t
) {

356 i‡(
sc
 =
NULL
) {

357 
	`PPPDEBUG
((
LOG_DEBUG
, "pppoe:álien host uniqueÅag,Ço session found\n"));

358  
NULL
;

362 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_PADI_SENT
 || sc->sc_°©ê>
PPPOE_STATE_SESSION
) {

363 
	`¥ötf
("%c%c%"
U16_F
": host uniqueÅag found, but it belongsÅoá connection in state %d\n",

364 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_°©e
);

365  
NULL
;

367 i‡(
sc
->
sc_ëhif
 !
rcvif
) {

368 
	`¥ötf
("%c%c%"
U16_F
": wrong interface,Çotáccepting host unique\n",

369 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

370  
NULL
;

372  
sc
;

373 
	}
}

376 
	$µp€_lök°©us_up
(*
¨g
)

378 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

380 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 1);

381 
	}
}

385 
	$µp€_di•©ch_disc_pkt
(
√tif
 *√tif, 
pbuf
 *
pb
)

387 
u16_t
 
èg
, 
Àn
;

388 
u16_t
 
£ssi⁄
, 
∂í
;

389 
µp€_so·c
 *
sc
;

390 c⁄° *
îr_msg
;

391 
dev«me
[6];

392 *
îr‹
;

393 
u8_t
 *
ac_cookõ
;

394 
size_t
 
ac_cookõ_Àn
;

395 #ifde‡
PPPOE_SERVER


396 
u8_t
 *
hunique
;

397 
size_t
 
hunique_Àn
;

399 
µp€hdr
 *
ph
;

400 
µp€èg
 
±
;

401 
off
 = 0, 
îr
, 
îr‹èg
;

402 
ëh_hdr
 *
ëhhdr
;

404 
pb
 = 
	`µpSögÀBuf
(pb);

406 
	`°r˝y
(
dev«me
, "pppoe");

407 
îr_msg
 = 
NULL
;

408 
îr‹èg
 = 0;

409 i‡(
pb
->
Àn
 < (*
ëhhdr
)) {

410 
d⁄e
;

412 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

413 
off
 +(*
ëhhdr
);

415 
ac_cookõ
 = 
NULL
;

416 
ac_cookõ_Àn
 = 0;

417 #ifde‡
PPPOE_SERVER


418 
hunique
 = 
NULL
;

419 
hunique_Àn
 = 0;

421 
£ssi⁄
 = 0;

422 i‡(
pb
->
Àn
 - 
off
 <
PPPOE_HEADERLEN
) {

423 
	`¥ötf
("µp€:ÖackëÅoÿsh‹t: %d\n", 
pb
->
Àn
);

424 
d⁄e
;

427 
ph
 = (
µp€hdr
 *Ë(
ëhhdr
 + 1);

428 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

429 
	`¥ötf
("µp€: unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

430 
d⁄e
;

432 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

433 
∂í
 = 
	`¡ohs
(
ph
->plen);

434 
off
 +(*
ph
);

436 i‡(
∂í
 + 
off
 > 
pb
->
Àn
) {

437 
	`¥ötf
("pppoe:Öacket content doesÇot fit: dataávailable = %d,Öacket size = %u\n",

438 
pb
->
Àn
 - 
off
, 
∂í
);

439 
d⁄e
;

441 if(
pb
->
tŸ_Àn
 =pb->
Àn
) {

442 
pb
->
tŸ_Àn
 =Öb->
Àn
 = 
off
 + 
∂í
;

444 
èg
 = 0;

445 
Àn
 = 0;

446 
sc
 = 
NULL
;

447 
off
 + (
±
Ë<
pb
->
Àn
) {

448 
	`MEMCPY
(&
±
, (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
, (pt));

449 
èg
 = 
	`¡ohs
(
±
.tag);

450 
Àn
 = 
	`¡ohs
(
±
.len);

451 i‡(
off
 + (
±
Ë+ 
Àn
 > 
pb
->len) {

452 
	`¥ötf
("µp€:Åag 0x%xÜí 0x%x i†toÿl⁄g\n", 
èg
, 
Àn
);

453 
d⁄e
;

455 
èg
) {

456 
PPPOE_TAG_EOL
:

457 
bªakbªak
;

458 
PPPOE_TAG_SNAME
:

460 
PPPOE_TAG_ACNAME
:

462 
PPPOE_TAG_HUNIQUE
:

463 i‡(
sc
 !
NULL
) {

466 #ifde‡
PPPOE_SERVER


467 
hunique
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

468 
hunique_Àn
 = 
Àn
;

470 
sc
 = 
	`µp€_föd_so·c_by_hunique
((
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
, 
√tif
);

471 i‡(
sc
 !
NULL
) {

472 
	`¢¥ötf
(
dev«me
, (dev«me), "%c%c%"
U16_F
, 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

475 
PPPOE_TAG_ACCOOKIE
:

476 i‡(
ac_cookõ
 =
NULL
) {

477 
ac_cookõ
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

478 
ac_cookõ_Àn
 = 
Àn
;

481 
PPPOE_TAG_SNAME_ERR
:

482 
îr_msg
 = "SERVICE NAME ERROR";

483 
îr‹èg
 = 1;

485 
PPPOE_TAG_ACSYS_ERR
:

486 
îr_msg
 = "AC SYSTEM ERROR";

487 
îr‹èg
 = 1;

489 
PPPOE_TAG_GENERIC_ERR
:

490 
îr_msg
 = "GENERIC ERROR";

491 
îr‹èg
 = 1;

494 i‡(
îr_msg
) {

495 
îr‹
 = 
NULL
;

496 i‡(
îr‹èg
 && 
Àn
) {

497 
îr‹
 = 
	`mem_mÆloc
(
Àn
+1);

498 i‡(
îr‹
) {

499 
	`°∫˝y
(
îr‹
, (*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
);

500 
îr‹
[
Àn
-1] = '\0';

503 i‡(
îr‹
) {

504 
	`¥ötf
("%s: %s: %s\n", 
dev«me
, 
îr_msg
, 
îr‹
);

505 
	`mem_‰ì
(
îr‹
);

507 
	`¥ötf
("%s: %s\n", 
dev«me
, 
îr_msg
);

509 i‡(
îr‹èg
) {

510 
d⁄e
;

513 
off
 +(
±
Ë+ 
Àn
;

516 
bªakbªak
:;

517 
ph
->
code
) {

518 
PPPOE_CODE_PADI
:

519 #ifde‡
PPPOE_SERVER


524 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

525 
d⁄e
;

527 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

528 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
)) {

531 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

534 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_INITIAL
) {

538 i‡(
sc
 =
NULL
) {

540 
d⁄e
;

542 i‡(
hunique
) {

543 i‡(
sc
->
sc_hunique
) {

544 
	`mem_‰ì
(
sc
->
sc_hunique
);

546 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

547 i‡(
sc
->
sc_hunique
 =
NULL
) {

548 
d⁄e
;

550 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

551 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

553 
	`MEMCPY
(&
sc
->
sc_de°
, 
eh
->
ëhî_sho°
,  sc->sc_dest);

554 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADO_SENT
;

555 
	`µp€_£nd_∑do
(
sc
);

558 
PPPOE_CODE_PADR
:

559 #ifde‡
PPPOE_SERVER


563 i‡(
ac_cookõ
 =
NULL
) {

565 
	`¥ötf
("pppoe:Ñeceived PADR butÇot includesác_cookie\n");

566 
d⁄e
;

568 
sc
 = 
	`µp€_föd_so·c_by_hunique
(
ac_cookõ
, 
ac_cookõ_Àn
, 
√tif
);

569 i‡(
sc
 =
NULL
) {

571 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

572 
	`¥ötf
("pppoe:Ñeceived PADR but couldÇot findÑequest for it\n");

574 
d⁄e
;

576 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

577 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADR\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

578 
d⁄e
;

580 i‡(
hunique
) {

581 i‡(
sc
->
sc_hunique
) {

582 
	`mem_‰ì
(
sc
->
sc_hunique
);

584 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

585 i‡(
sc
->
sc_hunique
 =
NULL
) {

586 
d⁄e
;

588 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

589 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

591 
	`µp€_£nd_∑ds
(
sc
);

592 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

593 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

597 
d⁄e
;

599 
PPPOE_CODE_PADO
:

600 i‡(
sc
 =
NULL
) {

602 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

603 
	`¥ötf
("pppoe:Ñeceived PADO but couldÇot findÑequest for it\n");

605 
d⁄e
;

607 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADI_SENT
) {

608 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADO\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

609 
d⁄e
;

611 i‡(
ac_cookõ
) {

612 i‡(
sc
->
sc_ac_cookõ
) {

613 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

615 
sc
->
sc_ac_cookõ
 = 
	`mem_mÆloc
(
ac_cookõ_Àn
);

616 i‡(
sc
->
sc_ac_cookõ
 =
NULL
) {

617 
d⁄e
;

619 
sc
->
sc_ac_cookõ_Àn
 = 
ac_cookõ_Àn
;

620 
	`MEMCPY
(
sc
->
sc_ac_cookõ
, 
ac_cookõ
, 
ac_cookõ_Àn
);

622 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhhdr
->
§c
.
addr
, (sc->sc_dest.addr));

623 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

624 
sc
->
sc_∑dr_ªåõd
 = 0;

625 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADR_SENT
;

626 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

627 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

629 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

631 
PPPOE_CODE_PADS
:

632 i‡(
sc
 =
NULL
) {

633 
d⁄e
;

635 
sc
->
sc_£ssi⁄
 = 
£ssi⁄
;

636 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

637 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%x c⁄√˘ed\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
£ssi⁄
));

638 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

639 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

641 
PPPOE_CODE_PADT
:

642 i‡(
sc
 =
NULL
) {

643 
d⁄e
;

645 
	`µp€_˛ór_so·c
(
sc
, "received PADT");

648 if(
sc
) {

649 
	`¥ötf
("%c%c%"
U16_F
": unknown code (0x%04x) session = 0x%04x\n",

650 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

651 
ph
->
code
, 
£ssi⁄
);

653 
	`¥ötf
("µp€: unknow¿codê(0x%04xË£ssi⁄ = 0x%04x\n", 
ph
->
code
, 
£ssi⁄
);

658 
d⁄e
:

659 
	`pbuf_‰ì
(
pb
);

661 
	}
}

664 
	$µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

667 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

668 
	`µp€_di•©ch_disc_pkt
(
√tif
, 
p
);

670 
	`pbuf_‰ì
(
p
);

672 
	}
}

675 
	$µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
pb
)

677 
u16_t
 
£ssi⁄
, 
∂í
;

678 
µp€_so·c
 *
sc
;

679 
µp€hdr
 *
ph
;

680 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


681 
u8_t
 
sho°
[
ETHER_ADDR_LEN
];

684 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


685 
	`MEMCPY
(
sho°
, ((
ëh_hdr
 *)
pb
->
∑ylﬂd
)->
§c
.
addr
, (shost));

687 i‡(
	`pbuf_hódî
(
pb
, -()(
ëh_hdr
)) != 0) {

689 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header failed\n"));

690 
	`LINK_STATS_INC
(
lök
.
À√º
);

691 
dr›
;

694 
pb
 = 
	`µpSögÀBuf
 (pb);

696 i‡(
pb
->
Àn
 <
PPPOE_HEADERLEN
) {

697 
	`¥ötf
("µp€ (d©a): dr›pögÅoÿsh‹à∑ckë: %d byãs\n", 
pb
->
Àn
);

698 
dr›
;

701 i‡(
pb
->
Àn
 < (*
ph
)) {

702 
	`¥ötf
("pppoe_data_input: couldÇot get PPPoE header\n");

703 
dr›
;

705 
ph
 = (
µp€hdr
 *)
pb
->
∑ylﬂd
;

707 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

708 
	`¥ötf
("µp€ (d©a): unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

709 
dr›
;

711 i‡(
ph
->
code
 != 0) {

712 
dr›
;

715 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

716 
sc
 = 
	`µp€_föd_so·c_by_£ssi⁄
(
£ssi⁄
, 
√tif
);

717 i‡(
sc
 =
NULL
) {

718 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


719 
	`¥ötf
("µp€: i≈uàf‹ unknow¿£ssi⁄ 0x%x, sídög PADT\n", 
£ssi⁄
);

720 
	`µp€_£nd_∑dt
(
√tif
, 
£ssi⁄
, 
sho°
);

722 
dr›
;

725 
∂í
 = 
	`¡ohs
(
ph
->plen);

727 i‡(
	`pbuf_hódî
(
pb
, -()(
PPPOE_HEADERLEN
)) != 0) {

729 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header PPPOE_HEADERLEN failed\n"));

730 
	`LINK_STATS_INC
(
lök
.
À√º
);

731 
dr›
;

734 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€_d©a_öput: %c%c%"
U16_F
":Ökthdr.len=%d,Öppoe.len=%d\n",

735 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

736 
pb
->
Àn
, 
∂í
));

738 i‡(
pb
->
Àn
 < 
∂í
) {

739 
dr›
;

742 
	`µpInProcOvîEthî√t
(
sc
->
sc_pd
, 
pb
);

746 
dr›
:

747 
	`pbuf_‰ì
(
pb
);

748 
	}
}

750 
îr_t


751 
	$µp€_ouçut
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

753 
ëh_hdr
 *
ëhhdr
;

754 
u16_t
 
ëy≥
;

755 
îr_t
 
ªs
;

757 i‡(!
sc
->
sc_ëhif
) {

758 
	`pbuf_‰ì
(
pb
);

759  
ERR_IF
;

762 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

763 
ëy≥
 = 
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION
 ? 
ETHTYPE_PPPOE
 : 
ETHTYPE_PPPOEDISC
;

764 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëy≥
);

765 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, 
sc
->
sc_de°
.addr, (ethhdr->dest.addr));

766 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
sc
->
sc_ëhif
->
hwaddr
)->addr, (ethhdr->src.addr));

768 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
" (%xË°©e=%d, sessi⁄=0x%x ouçuà-> %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F",Üen=%d\n",

769 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
ëy≥
,

770 
sc
->
sc_°©e
, sc->
sc_£ssi⁄
,

771 
sc
->
sc_de°
.
addr
[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],

772 
pb
->
tŸ_Àn
));

774 
ªs
 = 
sc
->
sc_ëhif
->
	`lökouçut
(sc->sc_ëhif, 
pb
);

776 
	`pbuf_‰ì
(
pb
);

778  
ªs
;

779 
	}
}

781 
îr_t


782 
	$µp€_£nd_∑di
(
µp€_so·c
 *
sc
)

784 
pbuf
 *
pb
;

785 
u8_t
 *
p
;

786 
Àn
, 
l1
 = 0, 
l2
 = 0;

788 i‡(
sc
->
sc_°©e
 >
PPPOE_STATE_PADI_SENT
) {

789 
	`PPPDEBUG
((
LOG_ERR
, "ERROR:Öµ€_£nd_∑dòö sèã %d", 
sc
->
sc_°©e
));

793 
Àn
 = 2 + 2 + 2 + 2 +  
sc
;

794 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

795 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

796 
Àn
 +
l1
;

798 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

799 
l2
 = 
	`°æí
(
sc
->
sc_c⁄˚¡øt‹_«me
);

800 
Àn
 +2 + 2 + 
l2
;

804 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

805 i‡(!
pb
) {

806  
ERR_MEM
;

809 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

811 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADI
, 0, 
Àn
);

812 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

813 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

814 
	`PPPOE_ADD_16
(
p
, 
l1
);

815 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

816 
p
 +
l1
;

818 
	`PPPOE_ADD_16
(
p
, 0);

820 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

821 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACNAME
);

822 
	`PPPOE_ADD_16
(
p
, 
l2
);

823 
	`MEMCPY
(
p
, 
sc
->
sc_c⁄˚¡øt‹_«me
, 
l2
);

824 
p
 +
l2
;

826 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

827 
	`PPPOE_ADD_16
(
p
, (
sc
));

828 
	`MEMCPY
(
p
, &
sc
,  sc);

831  
	`µp€_ouçut
(
sc
, 
pb
);

832 
	}
}

835 
	$µp€_timeout
(*
¨g
)

837 
ªåy_waô
, 
îr
;

838 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

840 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
":Åimeout\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

842 
sc
->
sc_°©e
) {

843 
PPPOE_STATE_PADI_SENT
:

855 
ªåy_waô
 = 
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
);

857 
sc
->
sc_∑di_ªåõd
++;

858 i‡(
sc
->
sc_∑di_ªåõd
 >
PPPOE_DISC_MAXPADI
) {

860 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_LINK1
) == 0) {

862 
ªåy_waô
 = 
PPPOE_SLOW_RETRY
;

866 
	`µp€_ab‹t_c⁄√˘
(
sc
);

870 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

871 
sc
->
sc_∑di_ªåõd
--;

872 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿå™smô PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

874 
	`t˝ù_timeout
(
ªåy_waô
, 
µp€_timeout
, 
sc
);

877 
PPPOE_STATE_PADR_SENT
:

878 
sc
->
sc_∑dr_ªåõd
++;

879 i‡(
sc
->
sc_∑dr_ªåõd
 >
PPPOE_DISC_MAXPADR
) {

880 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

881 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

882 
sc
->
sc_∑dr_ªåõd
 = 0;

883 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

884 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

886 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
), 
µp€_timeout
, sc);

889 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

890 
sc
->
sc_∑dr_ªåõd
--;

891 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

893 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

895 
PPPOE_STATE_CLOSING
:

896 
	`µp€_do_disc⁄√˘
(
sc
);

901 
	}
}

905 
	$µp€_c⁄√˘
(
µp€_so·c
 *
sc
)

907 
îr
;

909 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_INITIAL
) {

910  
EBUSY
;

913 #ifde‡
PPPOE_SERVER


915 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

920 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

921 
sc
->
sc_∑dr_ªåõd
 = 0;

922 
îr
 = 
	`µp€_£nd_∑di
(
sc
);

923 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

924 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
, 
µp€_timeout
, 
sc
);

925  
îr
;

926 
	}
}

930 
	$µp€_disc⁄√˘
(
µp€_so·c
 *
sc
)

932 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

940 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

941 
	`t˝ù_timeout
(20, 
µp€_timeout
, 
sc
);

942 
	}
}

945 
	$µp€_do_disc⁄√˘
(
µp€_so·c
 *
sc
)

947 
îr
;

949 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

950 
îr
 = 
EBUSY
;

952 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": disc⁄√˘ög\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

953 
îr
 = 
	`µp€_£nd_∑dt
(
sc
->
sc_ëhif
, sc->
sc_£ssi⁄
, (c⁄° 
u8_t
 *)&sc->
sc_de°
);

957 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

958 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

959 i‡(
sc
->
sc_ac_cookõ
) {

960 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

961 
sc
->
sc_ac_cookõ
 = 
NULL
;

963 
sc
->
sc_ac_cookõ_Àn
 = 0;

964 #ifde‡
PPPOE_SERVER


965 i‡(
sc
->
sc_hunique
) {

966 
	`mem_‰ì
(
sc
->
sc_hunique
);

967 
sc
->
sc_hunique
 = 
NULL
;

969 
sc
->
sc_hunique_Àn
 = 0;

971 
sc
->
sc_£ssi⁄
 = 0;

973 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

975  
îr
;

976 
	}
}

980 
	$µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *
sc
)

982 
	`¥ötf
("%c%c%"
U16_F
": couldÇŸÉ°ablish c⁄√˘i⁄\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

983 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

985 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

988 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

989 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

990 
	}
}

993 
îr_t


994 
	$µp€_£nd_∑dr
(
µp€_so·c
 *
sc
)

996 
pbuf
 *
pb
;

997 
u8_t
 *
p
;

998 
size_t
 
Àn
, 
l1
 = 0;

1000 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADR_SENT
) {

1001  
ERR_CONN
;

1004 
Àn
 = 2 + 2 + 2 + 2 + (
sc
);

1005 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1006 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1007 
Àn
 +
l1
;

1009 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1010 
Àn
 +2 + 2 + 
sc
->
sc_ac_cookõ_Àn
;

1012 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1013 i‡(!
pb
) {

1014  
ERR_MEM
;

1016 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1017 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADR
, 0, 
Àn
);

1018 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1019 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1020 
	`PPPOE_ADD_16
(
p
, 
l1
);

1021 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1022 
p
 +
l1
;

1024 
	`PPPOE_ADD_16
(
p
, 0);

1026 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1027 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1028 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_ac_cookõ_Àn
);

1029 
	`MEMCPY
(
p
, 
sc
->
sc_ac_cookõ
, sc->
sc_ac_cookõ_Àn
);

1030 
p
 +
sc
->
sc_ac_cookõ_Àn
;

1032 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1033 
	`PPPOE_ADD_16
(
p
, (
sc
));

1034 
	`MEMCPY
(
p
, &
sc
,  sc);

1036  
	`µp€_ouçut
(
sc
, 
pb
);

1037 
	}
}

1040 
îr_t


1041 
	$µp€_£nd_∑dt
(
√tif
 *
outgoög_if
, 
u_öt
 
£ssi⁄
, c⁄° 
u8_t
 *
de°
)

1043 
pbuf
 *
pb
;

1044 
ëh_hdr
 *
ëhhdr
;

1045 
îr_t
 
ªs
;

1046 
u8_t
 *
p
;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
, 
PBUF_RAM
);

1049 i‡(!
pb
) {

1050  
ERR_MEM
;

1053 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

1054 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_PPPOEDISC
);

1055 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, dest, (ethhdr->dest.addr));

1056 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
outgoög_if
->
hwaddr
)->addr, (ethhdr->src.addr));

1058 
p
 = (
u8_t
*)(
ëhhdr
 + 1);

1059 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADT
, 
£ssi⁄
, 0);

1061 
ªs
 = 
outgoög_if
->
	`lökouçut
(outgoög_if, 
pb
);

1063 
	`pbuf_‰ì
(
pb
);

1065  
ªs
;

1066 
	}
}

1068 #ifde‡
PPPOE_SERVER


1069 
îr_t


1070 
	$µp€_£nd_∑do
(
µp€_so·c
 *
sc
)

1072 
pbuf
 *
pb
;

1073 
u8_t
 *
p
;

1074 
size_t
 
Àn
;

1076 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1077  
ERR_CONN
;

1081 
Àn
 = 0;

1083 
Àn
 +2 + 2 + (
sc
);

1085 
Àn
 +2 + 2 + 
sc
->
sc_hunique_Àn
;

1086 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1087 i‡(!
pb
) {

1088  
ERR_MEM
;

1090 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1091 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADO
, 0, 
Àn
);

1092 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1093 
	`PPPOE_ADD_16
(
p
, (
sc
));

1094 
	`MEMCPY
(
p
, &
sc
, (sc));

1095 
p
 +(
sc
);

1096 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1097 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1098 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1099  
	`µp€_ouçut
(
sc
, 
pb
);

1100 
	}
}

1102 
îr_t


1103 
	$µp€_£nd_∑ds
(
µp€_so·c
 *
sc
)

1105 
pbuf
 *
pb
;

1106 
u8_t
 *
p
;

1107 
size_t
 
Àn
, 
l1
 = 0;

1109 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1110  
ERR_CONN
;

1113 
sc
->
sc_£ssi⁄
 = 
m⁄o_time
.
tv_£c
 % 0xff + 1;

1115 
Àn
 = 0;

1117 
Àn
 +2 + 2 + 2 + 2 + 
sc
->
sc_hunique_Àn
;

1118 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1119 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1120 
Àn
 +
l1
;

1122 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1123 i‡(!
pb
) {

1124  
ERR_MEM
;

1126 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1127 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADS
, 
sc
->
sc_£ssi⁄
, 
Àn
);

1128 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1129 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1130 
	`PPPOE_ADD_16
(
p
, 
l1
);

1131 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1132 
p
 +
l1
;

1134 
	`PPPOE_ADD_16
(
p
, 0);

1136 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1137 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1138 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1139  
	`µp€_ouçut
(
sc
, 
pb
);

1140 
	}
}

1143 
îr_t


1144 
	$µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

1146 
u8_t
 *
p
;

1147 
size_t
 
Àn
;

1150 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

1152 
	`pbuf_‰ì
(
pb
);

1153  
ERR_CONN
;

1156 
Àn
 = 
pb
->
tŸ_Àn
;

1159 i‡(
	`pbuf_hódî
(
pb
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
) != 0) {

1161 
	`PPPDEBUG
((
LOG_ERR
, "µp€: %c%c%"
U16_F
":Öµ€_xmô: couldÇŸáŒoˇãÑoom f‹ hódî\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

1162 
	`LINK_STATS_INC
(
lök
.
À√º
);

1163 
	`pbuf_‰ì
(
pb
);

1164  
ERR_BUF
;

1167 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 + (
ëh_hdr
);

1168 
	`PPPOE_ADD_HEADER
(
p
, 0, 
sc
->
sc_£ssi⁄
, 
Àn
);

1170  
	`µp€_ouçut
(
sc
, 
pb
);

1171 
	}
}

1175 
	$µp€_iÁâach_hook
(*
¨g
, 
pbuf
 **
mp
, 
√tif
 *
iÂ
, 
dú
)

1177 
µp€_so·c
 *
sc
;

1178 
s
;

1180 i‡(
mp
 !(
pbuf
 **)
PFIL_IFNET_DETACH
) {

1184 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

1185 i‡(
sc
->
sc_ëhif
 !
iÂ
) {

1188 i‡(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
) {

1189 
sc
->
sc_•µ
.
µ_if
.
if_Êags
 &~(
IFF_UP
|
IFF_RUNNING
);

1190 
	`¥ötf
("%c%c%"
U16_F
":Éthernet interface detached, going down\n",

1191 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

1193 
sc
->
sc_ëhif
 = 
NULL
;

1194 
	`µp€_˛ór_so·c
(
sc
, "ethernet interface detached");

1198 
	}
}

1202 
	$µp€_˛ór_so·c
(
µp€_so·c
 *
sc
, c⁄° *
mesßge
)

1204 
	`LWIP_UNUSED_ARG
(
mesßge
);

1207 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

1208 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%xÅîmö©ed, %s\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_£ssi⁄
, 
mesßge
));

1211 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

1214 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

1217 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

1218 i‡(
sc
->
sc_ac_cookõ
) {

1219 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

1220 
sc
->
sc_ac_cookõ
 = 
NULL
;

1222 
sc
->
sc_ac_cookõ_Àn
 = 0;

1223 
sc
->
sc_£ssi⁄
 = 0;

1224 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/pppdebug.h

36 #i‚de‡
PPPDEBUG_H


37 
	#PPPDEBUG_H


	)

44 
	mLOG_CRITICAL
 = 0,

45 
	mLOG_ERR
 = 1,

46 
	mLOG_NOTICE
 = 2,

47 
	mLOG_WARNING
 = 3,

48 
	mLOG_INFO
 = 5,

49 
	mLOG_DETAIL
 = 6,

50 
	mLOG_DEBUG
 = 7

51 } 
	tLogCodes
;

60 
µp_åa˚
(
Àvñ
, c⁄° *
f‹m©
,...);

62 
	#TRACELCP
 
PPP_DEBUG


	)

64 #i‡
PPP_DEBUG


66 
	#AUTHDEBUG
(
a
Ë
µp_åa˚
 
	)
a

67 
	#IPCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

68 
	#UPAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

69 
	#LCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

70 
	#FSMDEBUG
(
a
Ë
µp_åa˚
 
	)
a

71 
	#CHAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

72 
	#PPPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

76 
	#AUTHDEBUG
(
a
)

	)

77 
	#IPCPDEBUG
(
a
)

	)

78 
	#UPAPDEBUG
(
a
)

	)

79 
	#LCPDEBUG
(
a
)

	)

80 
	#FSMDEBUG
(
a
)

	)

81 
	#CHAPDEBUG
(
a
)

	)

82 
	#PPPDEBUG
(
a
)

	)

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/randm.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 
	~"md5.h
"

39 
	~"øndm.h
"

41 
	~"µp.h
"

42 
	~"µpdebug.h
"

45 #i‡
MD5_SUPPORT


46 
	#RANDPOOLSZ
 16

	)

51 
	gøndPoﬁ
[
RANDPOOLSZ
];

52 
	gøndCou¡
 = 0;

67 
	$avR™domInô
()

69 
	`avChu∫R™d
(
NULL
, 0);

70 
	}
}

83 
	$avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
)

85 
MD5_CTX
 
md5
;

88 
	`MD5Inô
(&
md5
);

89 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

90 i‡(
øndD©a
) {

91 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndD©a
, 
øndLí
);

95 
foob¨
;

96 } 
sysD©a
;

99 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
sysD©a
, (sysData));

101 
	`MD5FöÆ
((
u_ch¨
 *)
øndPoﬁ
, &
md5
);

103 
	}
}

122 
	$avGíR™d
(*
buf
, 
u32_t
 
bufLí
)

124 
MD5_CTX
 
md5
;

125 
u_ch¨
 
tmp
[16];

126 
u32_t
 
n
;

128 
bufLí
 > 0) {

129 
n
 = 
	`LWIP_MIN
(
bufLí
, 
RANDPOOLSZ
);

130 
	`MD5Inô
(&
md5
);

131 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

132 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
øndCou¡
, (randCount));

133 
	`MD5FöÆ
(
tmp
, &
md5
);

134 
øndCou¡
++;

135 
	`MEMCPY
(
buf
, 
tmp
, 
n
);

136 
buf
 +
n
;

137 
bufLí
 -
n
;

139 
	}
}

144 
u32_t


145 
	$avR™dom
()

147 
u32_t
 
√wR™d
;

149 
	`avGíR™d
((*)&
√wR™d
, (newRand));

151  
√wR™d
;

152 
	}
}

159 
	gavR™domized
 = 0;

160 
u32_t
 
	gavR™domSìd
 = 0;

181 
	$avR™domInô
()

185 
u32_t
 *
Õå1
 = (u32_à*)((*)&
˛ockBuf
[3]);

197 
	`ªadClk
();

198 
avR™domSìd
 +*(
u32_t
 *)
˛ockBuf
 + *
Õå1
 + 
OSIdÀCå


199 + 
	`µp_mtime
(Ë+ ((
u32_t
)
TM1
 << 16) + TM1;

201 
avR™domSìd
 +
	`sys_jiffõs
();

205 
	`§™d
(()
avR™domSìd
);

206 
	}
}

216 
	$avR™domize
()

218 
u32_t
 
œ°_jiffõs
;

220 i‡(!
avR™domized
) {

221 
avR™domized
 = !0;

222 
	`avR™domInô
();

226 
avR™domSìd
 +(
	`sys_jiffõs
(Ë- 
œ°_jiffõs
);

228 
œ°_jiffõs
 = 
	`sys_jiffõs
();

229 
	}
}

240 
u32_t


241 
	$avR™dom
()

243  ((((
u32_t
)
	`ønd
(Ë<< 16Ë+Ñ™d()Ë+ 
avR™domSìd
);

244 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/randm.h

34 #i‚de‡
RANDM_H


35 
	#RANDM_H


	)

43 
avR™domInô
();

53 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

59 #i‡
MD5_SUPPORT


60 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

62 
avR™domize
();

73 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

78 
u32_t
 
avR™dom
();

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/vj.c

31 
	~"lwù/›t.h
"

33 #i‡
PPP_SUPPORT


35 
	~"µp.h
"

36 
	~"µpdebug.h
"

38 
	~"vj.h
"

40 
	~<°rög.h
>

42 #i‡
VJ_SUPPORT


44 #i‡
LINK_STATS


45 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
counter

47 
	#INCR
(
cou¡î
)

	)

50 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

51 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl_v
&0xf)

	)

52 
	#gëth_off
(
ba£
Ë(((ba£).
th_x2_off
&0xf0)>>4)

	)

54 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl
)

	)

55 
	#gëth_off
(
ba£
Ë((ba£).
th_off
)

	)

59 
	$vj_com¥ess_öô
(
vjcom¥ess
 *
comp
)

61 
u_öt
 
i
;

62 
c°©e
 *
t°©e
 = 
comp
->tstate;

64 #i‡
MAX_SLOTS
 == 0

65 
	`mem£t
((*)
comp
, 0, (*comp));

67 
comp
->
maxSlŸIndex
 = 
MAX_SLOTS
 - 1;

68 
comp
->
com¥essSlŸ
 = 0;

69 
i
 = 
MAX_SLOTS
 - 1; i > 0; --i) {

70 
t°©e
[
i
].
cs_id
 = i;

71 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

73 
t°©e
[0].
cs_√xt
 = &t°©e[
MAX_SLOTS
 - 1];

74 
t°©e
[0].
cs_id
 = 0;

75 
comp
->
œ°_cs
 = &
t°©e
[0];

76 
comp
->
œ°_ªcv
 = 255;

77 
comp
->
œ°_xmô
 = 255;

78 
comp
->
Êags
 = 
VJF_TOSS
;

79 
	}
}

86 
	#ENCODE
(
n
) { \

87 i‡((
u_sh‹t
)(
n
) >= 256) { \

88 *
˝
++ = 0; \

89 
˝
[1] = (
n
); \

90 
˝
[0] = (
n
) >> 8; \

91 
˝
 += 2; \

93 *
˝
++ = (
n
); \

95 }

	)

96 
	#ENCODEZ
(
n
) { \

97 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

98 *
˝
++ = 0; \

99 
˝
[1] = (
n
); \

100 
˝
[0] = (
n
) >> 8; \

101 
˝
 += 2; \

103 *
˝
++ = (
n
); \

105 }

	)

107 
	#DECODEL
(
f
) { \

108 i‡(*
˝
 == 0) {\

109 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

110 (
f
Ë
	`ht⁄l
(
tmp
); \

111 
˝
 += 3; \

113 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u32_t)*
˝
++; \

114 (
f
Ë
	`ht⁄l
(
tmp
); \

116 }

	)

118 
	#DECODES
(
f
) { \

119 i‡(*
˝
 == 0) {\

120 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (((u_sh‹t)
˝
[1] << 8) | cp[2]); \

121 (
f
Ë
	`ht⁄s
(
tmp
); \

122 
˝
 += 3; \

124 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (u_sh‹t)*
˝
++; \

125 (
f
Ë
	`ht⁄s
(
tmp
); \

127 }

	)

129 
	#DECODEU
(
f
) { \

130 i‡(*
˝
 == 0) {\

131 (
f
Ë
	`ht⁄s
(((
u_sh‹t
)
˝
[1] << 8) | cp[2]); \

132 
˝
 += 3; \

134 (
f
Ë
	`ht⁄s
((
u_sh‹t
)*
˝
++); \

136 }

	)

145 
u_öt


146 
	$vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
)

148 
ù
 *ù = (ù *)
pb
->
∑ylﬂd
;

149 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

150 
u_sh‹t
 
hÀn
 = 
	`gëù_hl
(*
ù
);

151 
t˝hdr
 *
Ÿh
;

152 
t˝hdr
 *
th
;

153 
u_sh‹t
 
dñèS
, 
dñèA
;

154 
u_l⁄g
 
dñèL
;

155 
u_öt
 
ch™ges
 = 0;

156 
u_ch¨
 
√w_£q
[16];

157 
u_ch¨
 *
˝
 = 
√w_£q
;

162 i‡(
ù
->
ù_p
 !
IPPROTO_TCP
) {

163  (
TYPE_IP
);

171 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(0x3fff)Ë|| 
pb
->
tŸ_Àn
 < 40) {

172  (
TYPE_IP
);

174 
th
 = (
t˝hdr
 *)&((*)
ù
)[
hÀn
];

175 i‡((
th
->
th_Êags
 & (
TCP_SYN
|
TCP_FIN
|
TCP_RST
|
TCP_ACK
)) != TCP_ACK) {

176  (
TYPE_IP
);

185 
	`INCR
(
vjs_∑ckës
);

186 i‡(
ù
->
ù_§c
.
s_addr
 !
cs
->
cs_ù
.ip_src.s_addr

187 || 
ù
->
ù_d°
.
s_addr
 !
cs
->
cs_ù
.ip_dst.s_addr

188 || *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

201 
c°©e
 *
lcs
;

202 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

205 
lcs
 = 
cs
; c†cs->
cs_√xt
;

206 
	`INCR
(
vjs_£¨ches
);

207 i‡(
ù
->
ù_§c
.
s_addr
 =
cs
->
cs_ù
.ip_src.s_addr

208 && 
ù
->
ù_d°
.
s_addr
 =
cs
->
cs_ù
.ip_dst.s_addr

209 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

210 
found
;

212 } 
cs
 !
œ°cs
);

222 
	`INCR
(
vjs_mis£s
);

223 
comp
->
œ°_cs
 = 
lcs
;

224 
hÀn
 +
	`gëth_off
(*
th
);

225 
hÀn
 <<= 2;

227 i‡(
hÀn
 > 
pb
->
Àn
) {

228  (
TYPE_IP
);

230 
uncom¥es£d
;

232 
found
:

236 i‡(
cs
 =
œ°cs
) {

237 
comp
->
œ°_cs
 = 
lcs
;

239 
lcs
->
cs_√xt
 = 
cs
->cs_next;

240 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

241 
œ°cs
->
cs_√xt
 = 
cs
;

245 
Ÿh
 = (
t˝hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

246 
dñèS
 = 
hÀn
;

247 
hÀn
 +
	`gëth_off
(*
th
);

248 
hÀn
 <<= 2;

250 i‡(
hÀn
 > 
pb
->
Àn
) {

251 
	`PPPDEBUG
((
LOG_INFO
, "vj_com¥ess_t˝: hódîÜí %d s∑n†buf„rs\n", 
hÀn
));

252  (
TYPE_IP
);

266 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0]

267 || ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3]

268 || ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4]

269 || 
	`gëth_off
(*
th
Ë!gëth_off(*
Ÿh
)

270 || (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2))

271 || (
	`gëth_off
(*
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (getth_off(*th) - 5) << 2))) {

272 
uncom¥es£d
;

281 i‡(
th
->
th_Êags
 & 
TCP_URG
) {

282 
dñèS
 = 
	`¡ohs
(
th
->
th_uΩ
);

283 
	`ENCODEZ
(
dñèS
);

284 
ch™ges
 |
NEW_U
;

285 } i‡(
th
->
th_uΩ
 !
Ÿh
->th_urp) {

290 
uncom¥es£d
;

293 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
th_wö
Ë-Çtohs(
Ÿh
->th_win))) != 0) {

294 
	`ENCODE
(
dñèS
);

295 
ch™ges
 |
NEW_W
;

298 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_ack
Ë-Çtohl(
Ÿh
->th_ack)) != 0) {

299 i‡(
dñèL
 > 0xffff) {

300 
uncom¥es£d
;

302 
dñèA
 = (
u_sh‹t
)
dñèL
;

303 
	`ENCODE
(
dñèA
);

304 
ch™ges
 |
NEW_A
;

307 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_£q
Ë-Çtohl(
Ÿh
->th_seq)) != 0) {

308 i‡(
dñèL
 > 0xffff) {

309 
uncom¥es£d
;

311 
dñèS
 = (
u_sh‹t
)
dñèL
;

312 
	`ENCODE
(
dñèS
);

313 
ch™ges
 |
NEW_S
;

316 
ch™ges
) {

326 i‡(
ù
->
ù_Àn
 !
cs
->
cs_ù
.ip_len &&

327 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë=
hÀn
) {

333 
SPECIAL_I
:

334 
SPECIAL_D
:

339 
uncom¥es£d
;

341 
NEW_S
|
NEW_A
:

342 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

344 
ch™ges
 = 
SPECIAL_I
;

345 
˝
 = 
√w_£q
;

349 
NEW_S
:

350 i‡(
dñèS
 =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

352 
ch™ges
 = 
SPECIAL_D
;

353 
˝
 = 
√w_£q
;

358 
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
ù
->
ù_id
Ë-Çtohs(
cs
->
cs_ù
.ip_id));

359 i‡(
dñèS
 != 1) {

360 
	`ENCODEZ
(
dñèS
);

361 
ch™ges
 |
NEW_I
;

363 i‡(
th
->
th_Êags
 & 
TCP_PSH
) {

364 
ch™ges
 |
TCP_PUSH_BIT
;

370 
dñèA
 = 
	`¡ohs
(
th
->
th_sum
);

371 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

382 
dñèS
 = (
u_sh‹t
)(
˝
 - 
√w_£q
);

383 i‡(!
comp
->
com¥essSlŸ
 || comp->
œ°_xmô
 !
cs
->
cs_id
) {

384 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

385 
hÀn
 -
dñèS
 + 4;

386 if(
	`pbuf_hódî
(
pb
, -
hÀn
)){

388 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

390 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

391 *
˝
++ = 
ch™ges
 | 
NEW_C
;

392 *
˝
++ = 
cs
->
cs_id
;

394 
hÀn
 -
dñèS
 + 3;

395 if(
	`pbuf_hódî
(
pb
, -
hÀn
)) {

397 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

399 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

400 *
˝
++ = 
ch™ges
;

402 *
˝
++ = 
dñèA
 >> 8;

403 *
˝
++ = 
dñèA
;

404 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

405 
	`INCR
(
vjs_com¥es£d
);

406  (
TYPE_COMPRESSED_TCP
);

413 
uncom¥es£d
:

414 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

415 
ù
->
ù_p
 = 
cs
->
cs_id
;

416 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

417  (
TYPE_UNCOMPRESSED_TCP
);

418 
	}
}

424 
	$vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
)

426 
comp
->
Êags
 |
VJF_TOSS
;

427 
	`INCR
(
vjs_îr‹ö
);

428 
	}
}

435 
	$vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
)

437 
u_öt
 
hÀn
;

438 
c°©e
 *
cs
;

439 
ù
 *ip;

441 
ù
 = (ù *)
nb
->
∑ylﬂd
;

442 
hÀn
 = 
	`gëù_hl
(*
ù
) << 2;

443 i‡(
ù
->
ù_p
 >
MAX_SLOTS


444 || 
hÀn
 + (
t˝hdr
Ë> 
nb
->
Àn


445 || (
hÀn
 +
	`gëth_off
(*((
t˝hdr
 *)&((*)
ù
)[hlen])) << 2)

446 > 
nb
->
Àn


447 || 
hÀn
 > 
MAX_HDR
) {

448 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",

449 
ù
->
ù_p
, 
hÀn
, 
nb
->
Àn
));

450 
comp
->
Êags
 |
VJF_TOSS
;

451 
	`INCR
(
vjs_îr‹ö
);

454 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
ù
->
ù_p
];

455 
comp
->
Êags
 &=~ 
VJF_TOSS
;

456 
ù
->
ù_p
 = 
IPPROTO_TCP
;

457 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

458 
cs
->
cs_hÀn
 = 
hÀn
;

459 
	`INCR
(
vjs_uncom¥es£dö
);

461 
	}
}

472 
	$vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
)

474 
u_ch¨
 *
˝
;

475 
t˝hdr
 *
th
;

476 
c°©e
 *
cs
;

477 
u_sh‹t
 *
bp
;

478 
pbuf
 *
n0
 = *
nb
;

479 
u32_t
 
tmp
;

480 
u_öt
 
vjÀn
, 
hÀn
, 
ch™ges
;

482 
	`INCR
(
vjs_com¥es£dö
);

483 
˝
 = (
u_ch¨
 *)
n0
->
∑ylﬂd
;

484 
ch™ges
 = *
˝
++;

485 i‡(
ch™ges
 & 
NEW_C
) {

490 i‡(*
˝
 >
MAX_SLOTS
) {

491 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncom¥ess_t˝: bad cid=%d\n", *
˝
));

492 
bad
;

495 
comp
->
Êags
 &=~ 
VJF_TOSS
;

496 
comp
->
œ°_ªcv
 = *
˝
++;

503 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

504 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp:Åossing\n"));

505 
	`INCR
(
vjs_tos£d
);

509 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

510 
hÀn
 = 
	`gëù_hl
(
cs
->
cs_ù
) << 2;

511 
th
 = (
t˝hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

512 
th
->
th_sum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

513 
˝
 += 2;

514 i‡(
ch™ges
 & 
TCP_PUSH_BIT
) {

515 
th
->
th_Êags
 |
TCP_PSH
;

517 
th
->
th_Êags
 &=~ 
TCP_PSH
;

520 
ch™ges
 & 
SPECIALS_MASK
) {

521 
SPECIAL_I
:

523 
u32_t
 
i
 = 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

525 
tmp
 = 
	`¡ohl
(
th
->
th_ack
Ë+ 
i
;

526 
th
->
th_ack
 = 
	`ht⁄l
(
tmp
);

527 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
i
;

528 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

532 
SPECIAL_D
:

534 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

535 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

539 i‡(
ch™ges
 & 
NEW_U
) {

540 
th
->
th_Êags
 |
TCP_URG
;

541 
	`DECODEU
(
th
->
th_uΩ
);

543 
th
->
th_Êags
 &=~ 
TCP_URG
;

545 i‡(
ch™ges
 & 
NEW_W
) {

546 
	`DECODES
(
th
->
th_wö
);

548 i‡(
ch™ges
 & 
NEW_A
) {

549 
	`DECODEL
(
th
->
th_ack
);

551 i‡(
ch™ges
 & 
NEW_S
) {

552 
	`DECODEL
(
th
->
th_£q
);

556 i‡(
ch™ges
 & 
NEW_I
) {

557 
	`DECODES
(
cs
->
cs_ù
.
ù_id
);

559 
cs
->
cs_ù
.
ù_id
 = 
	`¡ohs
(cs->cs_ip.ip_id) + 1;

560 
cs
->
cs_ù
.
ù_id
 = 
	`ht⁄s
(cs->cs_ip.ip_id);

568 
vjÀn
 = (
u_sh‹t
)(
˝
 - (
u_ch¨
*)
n0
->
∑ylﬂd
);

569 i‡(
n0
->
Àn
 < 
vjÀn
) {

574 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp: head buffer %dÅoo short %d\n",

575 
n0
->
Àn
, 
vjÀn
));

576 
bad
;

579 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


580 
tmp
 = 
n0
->
tŸ_Àn
 - 
vjÀn
 + 
cs
->
cs_hÀn
;

581 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
tmp
);

583 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
n0
->
tŸ_Àn
 - 
vjÀn
 + cs->
cs_hÀn
);

587 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

588 
cs
->
cs_ù
.
ù_sum
 = 0;

589 
tmp
 = 0; 
hÀn
 > 0; hlen -= 2) {

590 
tmp
 +*
bp
++;

592 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

593 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

594 
cs
->
cs_ù
.
ù_sum
 = (
u_sh‹t
)(~
tmp
);

597 if(
	`pbuf_hódî
(
n0
, -((
s16_t
)(
vjÀn
)))) {

599 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

600 
bad
;

603 if(
	`LWIP_MEM_ALIGN
(
n0
->
∑ylﬂd
) !=Ç0->payload) {

604 
pbuf
 *
≈
, *
q
;

605 
u8_t
 *
buÂå
;

607 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
n0
->
Àn
 + 
cs
->
cs_hÀn
, 
PBUF_POOL
);

608 if(!
≈
) {

609 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Ñealign failed\n"));

610 
bad
;

613 if(
	`pbuf_hódî
(
≈
, -
cs
->
cs_hÀn
)) {

615 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

616 
bad
;

619 
buÂå
 = 
n0
->
∑ylﬂd
;

620 
q
 = 
≈
; q !
NULL
; q = q->
√xt
) {

621 
	`MEMCPY
(
q
->
∑ylﬂd
, 
buÂå
, q->
Àn
);

622 
buÂå
 +
q
->
Àn
;

625 if(
n0
->
√xt
) {

626 
	`pbuf_chaö
(
≈
, 
n0
->
√xt
);

627 
	`pbuf_dechaö
(
n0
);

629 
	`pbuf_‰ì
(
n0
);

630 
n0
 = 
≈
;

633 if(
	`pbuf_hódî
(
n0
, 
cs
->
cs_hÀn
)) {

634 
pbuf
 *
≈
;

636 
	`LWIP_ASSERT
("vj_uncom¥ess_t˝: cs->cs_hÀ¿<PBUF_POOL_BUFSIZE", 
cs
->
cs_hÀn
 <
PBUF_POOL_BUFSIZE
);

637 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
cs
->
cs_hÀn
, 
PBUF_POOL
);

638 if(!
≈
) {

639 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Örepend failed\n"));

640 
bad
;

642 
	`pbuf_ˇt
(
≈
, 
n0
);

643 
n0
 = 
≈
;

645 
	`LWIP_ASSERT
("n0->À¿>cs->cs_hÀn", 
n0
->
Àn
 >
cs
->
cs_hÀn
);

646 
	`MEMCPY
(
n0
->
∑ylﬂd
, &
cs
->
cs_ù
, cs->
cs_hÀn
);

648 *
nb
 = 
n0
;

650  
vjÀn
;

652 
bad
:

653 
comp
->
Êags
 |
VJF_TOSS
;

654 
	`INCR
(
vjs_îr‹ö
);

656 
	}
}

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/vj.h

25 #i‚de‡
VJ_H


26 
	#VJ_H


	)

28 
	~"vjbsdhdr.h
"

30 
	#MAX_SLOTS
 16

	)

31 
	#MAX_HDR
 128

	)

77 
	#TYPE_IP
 0x40

	)

78 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

79 
	#TYPE_COMPRESSED_TCP
 0x80

	)

80 
	#TYPE_ERROR
 0x00

	)

83 
	#NEW_C
 0x40

	)

84 
	#NEW_I
 0x20

	)

85 
	#NEW_S
 0x08

	)

86 
	#NEW_A
 0x04

	)

87 
	#NEW_W
 0x02

	)

88 
	#NEW_U
 0x01

	)

91 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

92 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

95 
	#TCP_PUSH_BIT
 0x10

	)

104 
	sc°©e
 {

105 
c°©e
 *
	mcs_√xt
;

106 
u_sh‹t
 
	mcs_hÀn
;

107 
u_ch¨
 
	mcs_id
;

108 
u_ch¨
 
	mcs_fûÀr
;

110 
	mcsu_hdr
[
MAX_HDR
];

111 
ù
 
	mcsu_ù
;

112 } 
	mvjcs_u
;

114 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

115 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

118 
	svj°©
 {

119 
	mvjs_∑ckës
;

120 
	mvjs_com¥es£d
;

121 
	mvjs_£¨ches
;

122 
	mvjs_mis£s
;

123 
	mvjs_uncom¥es£dö
;

124 
	mvjs_com¥es£dö
;

125 
	mvjs_îr‹ö
;

126 
	mvjs_tos£d
;

132 
	svjcom¥ess
 {

133 
c°©e
 *
	mœ°_cs
;

134 
u_ch¨
 
	mœ°_ªcv
;

135 
u_ch¨
 
	mœ°_xmô
;

136 
u_sh‹t
 
	mÊags
;

137 
u_ch¨
 
	mmaxSlŸIndex
;

138 
u_ch¨
 
	mcom¥essSlŸ
;

139 #i‡
LINK_STATS


140 
vj°©
 
	m°©s
;

142 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

143 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

147 
	#VJF_TOSS
 1U

	)

149 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

150 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

151 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

152 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/vjbsdhdr.h

1 #i‚de‡
VJBSDHDR_H


2 
	#VJBSDHDR_H


	)

4 
	~"lwù/t˝.h
"

13 
PACK_STRUCT_BEGIN


14 
	sù


16 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

17 
u_ch¨
 
	mù_hl_v
;

19 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


20 
	mù_hl
:4,

21 
	mù_v
 :4;

22 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


23 
	mù_v
 :4,

24 
	mù_hl
:4;

26 
	mCOMPLAIN
 - 
NO
 
BYTE
 
ORDER
 
	mSELECTED
!

29 
u_ch¨
 
	mù_tos
;

30 
u_sh‹t
 
	mù_Àn
;

31 
u_sh‹t
 
	mù_id
;

32 
u_sh‹t
 
	mù_off
;

33 
	#IP_DF
 0x4000

	)

34 
	#IP_MF
 0x2000

	)

35 
	#IP_OFFMASK
 0x1ff‡

	)

36 
u_ch¨
 
	mù_âl
;

37 
u_ch¨
 
	mù_p
;

38 
u_sh‹t
 
	mù_sum
;

39 
ö_addr
 
	mù_§c
,
	mù_d°
;

41 
PACK_STRUCT_END


43 
u32_t
 
	tt˝_£q
;

49 
PACK_STRUCT_BEGIN


50 
	st˝hdr


52 
u_sh‹t
 
	mth_•‹t
;

53 
u_sh‹t
 
	mth_dp‹t
;

54 
t˝_£q
 
	mth_£q
;

55 
t˝_£q
 
	mth_ack
;

56 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

57 
u_ch¨
 
	mth_x2_off
;

59 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


60 
	mth_x2
 :4,

61 
	mth_off
:4;

63 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


64 
	mth_off
:4,

65 
	mth_x2
 :4;

68 
u_ch¨
 
	mth_Êags
;

69 
u_sh‹t
 
	mth_wö
;

70 
u_sh‹t
 
	mth_sum
;

71 
u_sh‹t
 
	mth_uΩ
;

73 
	gPACK_STRUCT_END


	@firmware/usrp3/lwip/lwip-1.3.1/src/netif/slipif.c

45 
	~"√tif/¶ùif.h
"

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_HAVE_SLIPIF


50 
	~"lwù/def.h
"

51 
	~"lwù/pbuf.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/sio.h
"

57 
	#SLIP_END
 0300

	)

58 
	#SLIP_ESC
 0333

	)

59 
	#SLIP_ESC_END
 0334

	)

60 
	#SLIP_ESC_ESC
 0335

	)

62 
	#MAX_SIZE
 1500

	)

74 
îr_t


75 
	$¶ùif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

77 
pbuf
 *
q
;

78 
u16_t
 
i
;

79 
u8_t
 
c
;

81 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

82 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

83 
	`LWIP_ASSERT
("∞!NULL", (
p
 !
NULL
));

85 
	`LWIP_UNUSED_ARG
(
ùaddr
);

88 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
i
 = 0; i < 
q
->
Àn
; i++) {

92 
c
 = ((
u8_t
 *)
q
->
∑ylﬂd
)[
i
];

93 
c
) {

94 
SLIP_END
:

95 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

96 
	`sio_£nd
(
SLIP_ESC_END
, 
√tif
->
°©e
);

98 
SLIP_ESC
:

99 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

100 
	`sio_£nd
(
SLIP_ESC_ESC
, 
√tif
->
°©e
);

103 
	`sio_£nd
(
c
, 
√tif
->
°©e
);

108 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

109  
ERR_OK
;

110 
	}
}

120 
pbuf
 *

121 
	$¶ùif_öput
(
√tif
 *netif)

123 
u8_t
 
c
;

125 
pbuf
 *
p
, *
q
;

126 
u16_t
 
ªcved
;

127 
u16_t
 
i
;

129 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

130 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

132 
q
 = 
p
 = 
NULL
;

133 
ªcved
 = 
i
 = 0;

134 
c
 = 0;

137 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

138 
c
) {

139 
SLIP_END
:

140 i‡(
ªcved
 > 0) {

143 
	`pbuf_ªÆloc
(
q
, 
ªcved
);

145 
	`LINK_STATS_INC
(
lök
.
ªcv
);

147 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif: GotÖacket\n"));

148  
q
;

152 
SLIP_ESC
:

153 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

154 
c
) {

155 
SLIP_ESC_END
:

156 
c
 = 
SLIP_END
;

158 
SLIP_ESC_ESC
:

159 
c
 = 
SLIP_ESC
;

166 i‡(
p
 =
NULL
) {

168 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:álloc\n"));

169 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
PBUF_POOL_BUFSIZE
, 
PBUF_POOL
);

171 i‡(
p
 =
NULL
) {

172 
	`LINK_STATS_INC
(
lök
.
dr›
);

173 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:ÇoÇewÖbuf! (DROP)\n"));

178 i‡(
q
 !
NULL
) {

180 
	`pbuf_ˇt
(
q
, 
p
);

183 
q
 = 
p
;

188 i‡((
p
 !
NULL
Ë&& (
ªcved
 <
MAX_SIZE
)) {

189 ((
u8_t
 *)
p
->
∑ylﬂd
)[
i
] = 
c
;

190 
ªcved
++;

191 
i
++;

192 i‡(
i
 >
p
->
Àn
) {

194 
i
 = 0;

195 i‡(
p
->
√xt
 !
NULL
 &&Ö->√xt->
Àn
 > 0) {

197 
p
 =Ö->
√xt
;

201 
p
 = 
NULL
;

208  
NULL
;

209 
	}
}

211 #i‡!
NO_SYS


220 
	$¶ùif_lo›
(*
nf
)

222 
pbuf
 *
p
;

223 
√tif
 *√ti‡(√ti‡*)
nf
;

226 
p
 = 
	`¶ùif_öput
(
√tif
);

227 i‡(
p
 !
NULL
) {

228 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

229 
	`pbuf_‰ì
(
p
);

230 
p
 = 
NULL
;

234 
	}
}

250 
îr_t


251 
	$¶ùif_öô
(
√tif
 *netif)

254 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("¶ùif_öô:Çëif->num=%"
U16_F
"\n", (
u16_t
)
√tif
->
num
));

256 
√tif
->
«me
[0] = 's';

257 
√tif
->
«me
[1] = 'l';

258 
√tif
->
ouçut
 = 
¶ùif_ouçut
;

259 
√tif
->
mtu
 = 
MAX_SIZE
;

260 
√tif
->
Êags
 = 
NETIF_FLAG_POINTTOPOINT
;

263 
√tif
->
°©e
 = 
	`sio_›í
“ëif->
num
);

264 i‡(!
√tif
->
°©e
) {

266  
ERR_IF
;

273 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_¶ù
, 0);

276 
	`sys_thªad_√w
(
SLIPIF_THREAD_NAME
, 
¶ùif_lo›
, 
√tif
, 
SLIPIF_THREAD_STACKSIZE
, 
SLIPIF_THREAD_PRIO
);

277  
ERR_OK
;

278 
	}
}

	@firmware/usrp3/lwip/lwipopts.h

26 
	#NO_SYS
 1

	)

35 
	#MEM_ALIGNMENT
 4

	)

41 
	#MEM_SIZE
 256

	)

48 
	#MEM_USE_POOLS
 0

	)

56 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

64 
	#MEMP_NUM_PBUF
 8

	)

71 
	#MEMP_NUM_UDP_PCB
 4

	)

78 
	#PBUF_LINK_HLEN
 16

	)

79 
	#ETH_PAD_SIZE
 2

	)

84 
	#PBUF_POOL_SIZE
 8

	)

92 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(128+28+
PBUF_LINK_HLEN
)

	)

99 
	#ARP_TABLE_SIZE
 5

	)

105 
	#ARP_QUEUEING
 0

	)

113 
	#MEMP_NUM_ARP_QUEUE
 5

	)

121 
	#IP_OPTIONS_ALLOWED
 0

	)

128 
	#IP_REASSEMBLY
 0

	)

135 
	#IP_FRAG
 0

	)

140 
	#LWIP_DHCP
 0

	)

145 
	#LWIP_IGMP
 0

	)

150 
	#LWIP_UDP
 1

	)

155 
	#LWIP_TCP
 0

	)

160 
	#LWIP_NETCONN
 0

	)

165 
	#LWIP_SOCKET
 0

	)

170 
	#LWIP_STATS
 0

	)

175 
	#CHECKSUM_GEN_IP
 0

	)

180 
	#CHECKSUM_GEN_UDP
 0

	)

185 
	#CHECKSUM_CHECK_IP
 0

	)

190 
	#CHECKSUM_CHECK_UDP
 0

	)

196 
	#LWIP_NETIF_LINK_CALLBACK
 1

	)

	@firmware/usrp3/lwip/lwippools.h

1 #i‚de‡
INCLUDED_LWIPPOOLS_H


2 
	#INCLUDED_LWIPPOOLS_H


	)

20 
LWIP_MALLOC_MEMPOOL_START


21 
	$LWIP_MALLOC_MEMPOOL
(2, 256)

22 
LWIP_MALLOC_MEMPOOL_END


	@firmware/usrp3/lwip_port/arch/cc.h

1 #i‚de‡
INCLUDED_ARCH_CC_H


2 
	#INCLUDED_ARCH_CC_H


	)

4 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

8 
	~<°döt.h
>

10 
uöt8_t
 
	tu8_t
;

11 
öt8_t
 
	ts8_t
;

12 
uöt16_t
 
	tu16_t
;

13 
öt16_t
 
	ts16_t
;

14 
uöt32_t
 
	tu32_t
;

15 
öt32_t
 
	ts32_t
;

19 
	tu8_t
;

20 sig√d 
	ts8_t
;

21 
	tu16_t
;

22 sig√d 
	ts16_t
;

23 
	tu32_t
;

24 sig√d 
	ts32_t
;

27 
u32_t
 
	tmem_±r_t
;

30 
	#U16_F
 "u"

	)

31 
	#S16_F
 "d"

	)

32 
	#X16_F
 "x"

	)

33 
	#U32_F
 "u"

	)

34 
	#S32_F
 "d"

	)

35 
	#X32_F
 "x"

	)

39 
	#U16_F
 "hu"

	)

40 
	#S16_F
 "hd"

	)

41 
	#X16_F
 "hx"

	)

42 
	#U32_F
 "lu"

	)

43 
	#S32_F
 "ld"

	)

44 
	#X32_F
 "lx"

	)

48 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

49 
	#PACK_STRUCT_STRUCT


	)

50 
	#PACK_STRUCT_BEGIN


	)

51 
	#PACK_STRUCT_END


	)

53 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

54 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

55 
	#PACK_STRUCT_BEGIN


	)

56 
	#PACK_STRUCT_END


	)

60 
ab‹t
();

61 
	#LWIP_PLATFORM_ASSERT
(
msg
Ë
	`ab‹t
()

	)

	@firmware/usrp3/lwip_port/arch/perf.h

1 
	#PERF_START
 ((Ë0)

	)

2 
	#PERF_STOP
(
msg
Ë((Ë0)

	)

	@firmware/usrp3/lwip_port/netif/eth_driver.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/mem.h
"

43 
	~"lwù/pbuf.h
"

44 
	~"lwù/sys.h
"

45 
	~<lwù/°©s.h
>

46 
	~<lwù/¢mp.h
>

47 
	~"√tif/ëh¨p.h
"

48 
	~"√tif/µp_€.h
"

49 
	~"ëh_drivî.h
"

54 
	#IFNAME0
 'e'

	)

55 
	#IFNAME1
 'n'

	)

60 
	squadødioif
 {

61 
	mëhno
;

65 
quadødioif_öput
(
√tif
 *netif);

75 
	$low_Àvñ_öô
(
√tif
 *netif)

77 
quadødioif
 *quadødioi‡
√tif
->
°©e
;

80 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

83 
√tif
->
hwaddr
[0] = ;

85 
√tif
->
hwaddr
[5] = ;

88 
√tif
->
mtu
 = 1500;

92 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

95 
	}
}

113 
îr_t


114 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

116 
quadødioif
 *quadødioi‡
√tif
->
°©e
;

117 
pbuf
 *
q
;

119 
öôüã
 
	`å™s„r
();

121 #i‡
ETH_PAD_SIZE


122 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

125 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

129 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

132 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

134 #i‡
ETH_PAD_SIZE


135 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

138 
	`LINK_STATS_INC
(
lök
.
xmô
);

140  
ERR_OK
;

141 
	}
}

151 
pbuf
 *

152 
	$low_Àvñ_öput
(
√tif
 *netif)

154 
quadødioif
 *quadødioi‡
√tif
->
°©e
;

155 
pbuf
 *
p
, *
q
;

156 
u16_t
 
Àn
;

160 
Àn
 = ;

162 #i‡
ETH_PAD_SIZE


163 
Àn
 +
ETH_PAD_SIZE
;

167 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

169 i‡(
p
 !
NULL
) {

171 #i‡
ETH_PAD_SIZE


172 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

177 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

181 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

183 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

185 #i‡
ETH_PAD_SIZE


186 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

189 
	`LINK_STATS_INC
(
lök
.
ªcv
);

191 
dr›
 
	`∑ckë
();

192 
	`LINK_STATS_INC
(
lök
.
memîr
);

193 
	`LINK_STATS_INC
(
lök
.
dr›
);

196  
p
;

197 
	}
}

209 
	$quadødioif_öput
(
√tif
 *netif)

211 
quadødioif
 *quadradioif;

212 
ëh_hdr
 *
ëhhdr
;

213 
pbuf
 *
p
;

215 
quadødioif
 = 
√tif
->
°©e
;

218 
p
 = 
	`low_Àvñ_öput
(
√tif
);

220 i‡(
p
 =
NULL
) ;

222 
ëhhdr
 = 
p
->
∑ylﬂd
;

224 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

226 
ETHTYPE_IP
:

227 
ETHTYPE_ARP
:

228 #i‡
PPPOE_SUPPORT


230 
ETHTYPE_PPPOEDISC
:

231 
ETHTYPE_PPPOE
:

234 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

235 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("quadradioif_input: IP inputÉrror\n"));

236 
	`pbuf_‰ì
(
p
);

237 
p
 = 
NULL
;

242 
	`pbuf_‰ì
(
p
);

243 
p
 = 
NULL
;

246 
	}
}

260 
îr_t


261 
	$quadødioif_öô
(
√tif
 *netif)

263 
quadødioif
 *quadradioif;

265 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

267 
quadødioif
 = 
	`mem_mÆloc
((quadradioif));

268 i‡(
quadødioif
 =
NULL
) {

269 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("quadradioif_init: out of memory\n"));

270  
ERR_MEM
;

273 #i‡
LWIP_NETIF_HOSTNAME


275 
√tif
->
ho°«me
 = "lwip";

283 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

285 
√tif
->
°©e
 = 
quadødioif
;

286 
√tif
->
«me
[0] = 
IFNAME0
;

287 
√tif
->
«me
[1] = 
IFNAME1
;

292 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

293 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

295 
quadødioif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

298 
	`low_Àvñ_öô
(
√tif
);

300  
ERR_OK
;

301 
	}
}

	@firmware/usrp3/lwip_port/netif/eth_driver.h

19 
	~"q≤_p‹t.h
"

21 
ëh_drivî_öô
(
QA˘ive
 *);

22 
ëh_drivî_h™dÀ_öput
(
ëhno
, 
bu‚o
, 
size_t
 
nbyãs
);

23 
ëh_drivî_buf„r_sig
(
bu‚o
);

	@firmware/usrp3/n230/n230_eeprom.c

18 
	~"../../../ho°/lib/u§p/n230/n230_ì¥om.h
"

20 
	~<åa˚.h
>

21 
	~<°ddef.h
>

22 
	~<Êash/•i_Êash.h
>

23 
	~<Êash/•if_•¢_s25Êxx.h
>

24 
	~<°rög.h
>

26 
	~"../../../ho°/lib/u§p/n230/n230_fw_defs.h
"

27 
	~"../../../ho°/lib/u§p/n230/n230_fw_ho°_iÁ˚.h
"

29 c⁄° 
wb_•i_¶ave_t
 
	gÊash_•i_¶ave
 = {

30 .
ba£
 = (*) 0xB000,

31 .
	g¶ave_£l
 = 0x0001,

32 .
	g˛k_div
 = 4,

33 .
	gmosi_edge
 = 
RISING
,

34 .
	gmiso_edge
 = 
FALLING
,

35 .
	glsb_fú°
 = 
Ál£


38 c⁄° 
•i_Êash_dev_t
 
	g•i_Êash_devi˚
 = {

39 .
∑ge_size
 = 256,

40 .
	g£˘‹_size
 = 65536,

41 .
	gnum_£˘‹s
 = 254,

42 .
	gbus
 = &
Êash_•i_¶ave


48 
	#N230_FLASH_NV_DATA_OFFSET
 0x800000

	)

51 c⁄° 
n230_ì¥om_m≠_t
 
	gdeÁu…_ì¥om
 = {

52 .
d©a_vîsi⁄_maj‹
 = 
N230_EEPROM_VER_MAJOR
,

53 .
	gd©a_vîsi⁄_mö‹
 = 
N230_EEPROM_VER_MINOR
,

54 .
	ghw_ªvisi⁄
 = 0,

55 .
	ghw_¥odu˘
 = 0x01,

56 .
	gg©eway
 = 
N230_DEFAULT_GATEWAY
,

57 .
	gëh_öfo
 = {

59 .
mac_addr
 = 
N230_DEFAULT_ETH0_MAC
,

60 .
	gsub√t
 = 
N230_DEFAULT_ETH0_MASK
,

61 .
	gù_addr
 = 
N230_DEFAULT_ETH0_IP


64 .
	gmac_addr
 = 
N230_DEFAULT_ETH1_MAC
,

65 .
	gsub√t
 = 
N230_DEFAULT_ETH1_MASK
,

66 .
	gù_addr
 = 
N230_DEFAULT_ETH1_IP


72 
•i_Êash_£ssi⁄_t
 
	gÊash_£ssi⁄
 = {.
devi˚
 = 
NULL
};

73 
n230_ì¥om_m≠_t
 
	gì¥om_ˇche
;

74 
boﬁ
 
	gˇche_dúty
 = 
åue
;

76 
boﬁ
 
	$ªad_n230_ì¥om
()

78 
boﬁ
 
°©us
 = 
Ál£
;

79 i‡(
Êash_£ssi⁄
.
devi˚
 =
NULL
) {

80 
	`wb_•i_öô
(
•i_Êash_devi˚
.
bus
);

81 
	`•if_öô
(&
Êash_£ssi⁄
, &
•i_Êash_devi˚
, 
	`•if_•¢_s25Êxx_›î©i⁄s
());

83 
	`•if_ªad_sync
(&
Êash_£ssi⁄
, 
N230_FLASH_NV_DATA_OFFSET
, &
ì¥om_ˇche
, (
n230_ì¥om_m≠_t
));

86 
°©us
 = (
ì¥om_ˇche
.
d©a_vîsi⁄_maj‹
 =
deÁu…_ì¥om
.data_version_major);

88 i‡(
ì¥om_ˇche
.
ëh_öfo
[0].
ù_addr
 == 0xFFFFFFFF)

89 
ì¥om_ˇche
.
ëh_öfo
[0].
ù_addr
 = 
deÁu…_ì¥om
.eth_info[0].ip_addr;

90 i‡(
ì¥om_ˇche
.
ëh_öfo
[1].
ù_addr
 == 0xFFFFFFFF)

91 
ì¥om_ˇche
.
ëh_öfo
[1].
ù_addr
 = 
deÁu…_ì¥om
.eth_info[1].ip_addr;

92 i‡(
ì¥om_ˇche
.
ëh_öfo
[0].
sub√t
 == 0xFFFFFFFF)

93 
ì¥om_ˇche
.
ëh_öfo
[0].
sub√t
 = 
deÁu…_ì¥om
.eth_info[0].subnet;

94 i‡(
ì¥om_ˇche
.
ëh_öfo
[1].
sub√t
 == 0xFFFFFFFF)

95 
ì¥om_ˇche
.
ëh_öfo
[1].
sub√t
 = 
deÁu…_ì¥om
.eth_info[1].subnet;

97 i‡(!
°©us
) {

98 
	`UHD_FW_TRACE
(
WARN
, "read_n230_eeprom: Initialized cacheÅoÅhe default map.");

99 
	`mem˝y
(&
ì¥om_ˇche
, &
deÁu…_ì¥om
, (
n230_ì¥om_m≠_t
));

101 
ˇche_dúty
 = !
°©us
;

102  
°©us
;

103 
	}
}

105 
boﬁ
 
	$wrôe_n230_ì¥om
()

109 i‡((
n230_ì¥om_m≠_t
Ë> 
Êash_£ssi⁄
.
devi˚
->
∑ge_size
) {

110 
	`UHD_FW_TRACE
(
ERROR
, "write_n230_eeprom: sizeof(n230_eeprom_map_t) > flash_page_size");

111  
Ál£
;

114 
boﬁ
 
°©us
 = 
åue
;

115 i‡(
ˇche_dúty
) {

116 
n230_ì¥om_m≠_t
 
devi˚_ì¥om
;

117 
	`•if_ªad_sync
(&
Êash_£ssi⁄
, 
N230_FLASH_NV_DATA_OFFSET
, &
devi˚_ì¥om
, (
n230_ì¥om_m≠_t
));

118 i‡(
	`memcmp
(&
ì¥om_ˇche
, &
devi˚_ì¥om
, (
n230_ì¥om_m≠_t
)) != 0) {

120 
	`UHD_FW_TRACE
(
DEBUG
, "write_n230_eeprom: Writing dataÅo flash...");

121 
°©us
 = 
	`•if_îa£_£˘‹_sync
(&
Êash_£ssi⁄
, 
N230_FLASH_NV_DATA_OFFSET
);

122 i‡(
°©us
) {

123 
°©us
 = 
	`•if_wrôe_∑ge_sync
(

124 &
Êash_£ssi⁄
, 
N230_FLASH_NV_DATA_OFFSET
, &
ì¥om_ˇche
, (
n230_ì¥om_m≠_t
));

126 i‡(!
°©us
) {

127 
	`UHD_FW_TRACE
(
ERROR
, "write_n230_eeprom: Operation failed!");

129 
ˇche_dúty
 = !
°©us
;

131 
	`UHD_FW_TRACE
(
DEBUG
, "write_n230_eeprom: NoÇew data. Write skipped.");

133 
ˇche_dúty
 = 
Ál£
;

136  
°©us
;

137 
	}
}

139 
boﬁ
 
	$is_n230_ì¥om_ˇche_dúty
()

141  
ˇche_dúty
;

142 
	}
}

144 
n230_ì¥om_m≠_t
* 
	$gë_n230_ì¥om_m≠
()

146 
ˇche_dúty
 = 
åue
;

147  &
ì¥om_ˇche
;

148 
	}
}

150 c⁄° 
n230_ì¥om_m≠_t
* 
	$gë_n230_c⁄°_ì¥om_m≠
()

152  &
ì¥om_ˇche
;

153 
	}
}

155 c⁄° 
n230_ëh_ì¥om_m≠_t
* 
	$gë_n230_ëhî√t_öfo
(
uöt32_t
 
iÁ˚
) {

156 i‡(
iÁ˚
 >
N230_NUM_ETH_PORTS
) {

157 
	`UHD_FW_TRACE_FSTR
(
ERROR
,

159 
iÁ˚
, 
N230_NUM_ETH_PORTS
);

161  &(
	`gë_n230_c⁄°_ì¥om_m≠
()->
ëh_öfo
[
iÁ˚
]);

162 
	}
}

168 
	#N230_FLASH_FPGA_IMAGE_OFFSET
 0x000000

	)

169 
	#N230_FLASH_FPGA_IMAGE_SIZE
 0x400000

	)

170 
	#N230_FLASH_NUM_FPGA_IMAGES
 2

	)

172 
	$ªad_n230_Âga_image_∑ge
(
uöt32_t
 
off£t
, *
buf
, uöt32_à
num_byãs
)

174 i‡(
off£t
 >(
N230_FLASH_NUM_FPGA_IMAGES
 * 
N230_FLASH_FPGA_IMAGE_SIZE
)) {

175 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "ªad_n230_Âga_image_∑ge: Off£à0x%x ouào‡bounds", 
off£t
);

177 
	`•if_ªad_sync
(&
Êash_£ssi⁄
, 
N230_FLASH_FPGA_IMAGE_OFFSET
 + 
off£t
, 
buf
, 
num_byãs
);

178 
	}
}

180 
boﬁ
 
	$wrôe_n230_Âga_image_∑ge
(
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
)

182 i‡(
off£t
 >(
N230_FLASH_NUM_FPGA_IMAGES
 * 
N230_FLASH_FPGA_IMAGE_SIZE
)) {

183 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "wrôe_n230_Âga_image_∑ge: Off£à0x%x ouào‡bounds", 
off£t
);

184  
Ál£
;

186  
	`•if_wrôe_∑ge_sync
(&
Êash_£ssi⁄
, 
N230_FLASH_FPGA_IMAGE_OFFSET
 + 
off£t
, 
buf
, 
num_byãs
);

187 
	}
}

189 
boﬁ
 
	$îa£_n230_Âga_image_£˘‹
(
uöt32_t
 
off£t
)

191 i‡(
off£t
 >(
N230_FLASH_NUM_FPGA_IMAGES
 * 
N230_FLASH_FPGA_IMAGE_SIZE
)) {

192 
	`UHD_FW_TRACE_FSTR
(
ERROR
, "îa£_n230_Âga_image_£˘‹: Off£à0x%x ouào‡bounds", 
off£t
);

193  
Ál£
;

195  
	`•if_îa£_£˘‹_sync
(&
Êash_£ssi⁄
, 
N230_FLASH_FPGA_IMAGE_OFFSET
 + 
off£t
);

196 
	}
}

	@firmware/usrp3/n230/n230_eth_handlers.c

18 
	~"n230_ëh_h™dÀrs.h
"

20 
	~<wb_utûs.h
>

21 
	~<°rög.h
>

22 
	~<u3_√t_°ack.h
>

23 
	~<¥öt_addrs.h
>

24 
	~<åa˚.h
>

25 
	~"../../../ho°/lib/u§p/comm⁄/fw_comm_¥Ÿocﬁ.h
"

26 
	~"../../../ho°/lib/u§p/n230/n230_fw_defs.h
"

27 
	~"../n230/n230_fw_ho°_iÁ˚.h
"

28 
	~"../../../ho°/lib/u§p/n230/n230_ì¥om.h
"

30 
n230_ho°_sh¨ed_mem_t
* 
	gho°_sh¨ed_mem_±r
;

32 c⁄° 
so·_ªg_fõld_t
 
	gLED_REG_FIELD_ETH_LINK2
 = {.
num_bôs
=1, .
	gshi·
=0};

33 c⁄° 
so·_ªg_fõld_t
 
	gLED_REG_FIELD_ETH_LINK1
 = {.
num_bôs
=1, .
	gshi·
=1};

34 c⁄° 
so·_ªg_fõld_t
 
	gLED_REG_FIELD_ETH_ACT2
 = {.
num_bôs
=1, .
	gshi·
=2};

35 c⁄° 
so·_ªg_fõld_t
 
	gLED_REG_FIELD_ETH_ACT1
 = {.
num_bôs
=1, .
	gshi·
=3};

41 
ölöe
 
	$n230_poke32
(c⁄° 
uöt32_t
 
addr
, c⁄° uöt32_à
d©a
)

43 i‡(
addr
 >
N230_FW_HOST_SHMEM_RW_BASE_ADDR
 &&ádd∏<
N230_FW_HOST_SHMEM_MAX_ADDR
) {

44 
ho°_sh¨ed_mem_±r
->
buff
[(
addr
 - 
N230_FW_HOST_SHMEM_BASE_ADDR
)/(
uöt32_t
)] = 
d©a
;

45 } i‡(
addr
 < 
N230_FW_HOST_SHMEM_BASE_ADDR
) {

46 
	`wb_poke32
(
addr
, 
d©a
);

48 
	}
}

50 
ölöe
 
uöt32_t
 
	$n230_≥ek32
(c⁄° 
uöt32_t
 
addr
)

52 i‡(
addr
 >
N230_FW_HOST_SHMEM_BASE_ADDR
 &&ádd∏<
N230_FW_HOST_SHMEM_MAX_ADDR
) {

53  
ho°_sh¨ed_mem_±r
->
buff
[(
addr
 - 
N230_FW_HOST_SHMEM_BASE_ADDR
)/(
uöt32_t
)];

54 } i‡(
addr
 < 
N230_FW_HOST_SHMEM_BASE_ADDR
) {

55  
	`wb_≥ek32
(
addr
);

59 
	}
}

61 
	$n230_h™dÀ_udp_fw_comms
(

62 c⁄° 
uöt8_t
 
ëhno
,

63 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

64 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

65 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs
)

67 i‡(
buff
 =
NULL
) {

68 
	`UHD_FW_TRACE
(
WARN
, "n230_handle_udp_fw_comms gotán ICMP_DUR");

71 } i‡(
num_byãs
 !(
fw_comm_pkt_t
)) {

72 
	`UHD_FW_TRACE
(
WARN
, "n230_handle_udp_fw_comms gotán unknownÑequest (bad size).");

74 c⁄° 
fw_comm_pkt_t
 *
ªque°
 = (c⁄° fw_comm_pkt_à*)
buff
;

75 
fw_comm_pkt_t
 
ª•⁄£
;

76 
boﬁ
 
£nd_ª•⁄£
 = 
	`¥o˚ss_fw_comm_¥Ÿocﬁ_pkt
(

77 
ªque°
, &
ª•⁄£
,

78 
N230_FW_PRODUCT_ID
,

79 (
uöt32_t
)
ëhno
,

80 
n230_poke32
, 
n230_≥ek32
);

82 i‡(
£nd_ª•⁄£
) {

83 
	`u3_√t_°ack_£nd_udp_pkt
(
ëhno
, 
§c
, 
d°_p‹t
, 
§c_p‹t
, &
ª•⁄£
, (response));

86 
	}
}

88 
	$n230_ªgi°î_udp_fw_comms_h™dÀr
(
n230_ho°_sh¨ed_mem_t
* 
sh¨ed_mem_±r
)

90 
ho°_sh¨ed_mem_±r
 = 
sh¨ed_mem_±r
;

91 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
N230_FW_COMMS_UDP_PORT
, &
n230_h™dÀ_udp_fw_comms
);

92 
	}
}

98 
	$¥ogøm_udp_‰amî
(

99 c⁄° 
uöt8_t
 
ëhno
,

100 c⁄° 
uöt32_t
 
sid
,

101 c⁄° 
ù_addr
 *
d°_ù
,

102 c⁄° 
uöt16_t
 
d°_p‹t
,

103 c⁄° 
uöt16_t
 
§c_p‹t
)

105 c⁄° 
ëh_mac_addr_t
 *
d°_mac
 = 
	`u3_√t_°ack_¨p_ˇche_lookup
(
d°_ù
);

106 c⁄° 
size_t
 
vde°
 = (
sid
 >> 16) & 0xff;

108 
uöt32_t
 
‰amî_ba£
 =

109 ((
ëhno
 =1Ë? 
SR_ZPU_ETHINT1
 : 
SR_ZPU_ETHINT0
Ë+ 
SR_ZPU_ETHINT_FRAMER_BASE
;

112 c⁄° 
ëh_mac_addr_t
 *
§c_mac
 = 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
);

113 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_SRC_MAC_HI
),

114 (((
uöt32_t
)
§c_mac
->
addr
[0]) << 8) | (((uint32_t)src_mac->addr[1]) << 0));

115 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_SRC_MAC_LO
),

116 (((
uöt32_t
)
§c_mac
->
addr
[2]) << 24) | (((uint32_t)src_mac->addr[3]) << 16) |

117 (((
uöt32_t
)
§c_mac
->
addr
[4]) << 8) | (((uint32_t)src_mac->addr[5]) << 0));

118 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_SRC_IP_ADDR
), 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
)->
addr
);

119 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_SRC_UDP_PORT
), 
§c_p‹t
);

122 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_DST_RAM_ADDR
), 
vde°
);

123 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_DST_IP_ADDR
), 
d°_ù
->
addr
);

124 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_DST_UDP_MAC
),

125 (((
uöt32_t
)
d°_p‹t
) << 16) |

126 (((
uöt32_t
)
d°_mac
->
addr
[0]) << 8) | (((uint32_t)dst_mac->addr[1]) << 0));

127 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
‰amî_ba£
 + 
ETH_FRAMER_DST_MAC_LO
),

128 (((
uöt32_t
)
d°_mac
->
addr
[2]) << 24) | (((uint32_t)dst_mac->addr[3]) << 16) |

129 (((
uöt32_t
)
d°_mac
->
addr
[4]) << 8) | (((uint32_t)dst_mac->addr[5]) << 0));

130 
	}
}

132 
	$h™dÀ_udp_¥og_‰amî
(

133 c⁄° 
uöt8_t
 
ëhno
,

134 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

135 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

136 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs
)

138 i‡(
buff
 =
NULL
) {

142 c⁄° 
uöt32_t
 
sid
 = ((c⁄° uöt32_à*)
buff
)[1];

143 
	`¥ogøm_udp_‰amî
(
ëhno
, 
sid
, 
§c
, 
§c_p‹t
, 
d°_p‹t
);

144 
	`UHD_FW_TRACE_FSTR
(
INFO
, "ReprogrammedÉth%d framer. Src=%s:%d, Dest=%s:%d",

145 
ëhno
,
	`ù_addr_to_°r
(
§c
),
§c_p‹t
,ù_addr_to_°r(
d°
),
d°_p‹t
);

147 
	}
}

149 
	$n230_ªgi°î_udp_¥og_‰amî
()

151 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
N230_FW_COMMS_CVITA_PORT
, &
h™dÀ_udp_¥og_‰amî
);

152 
	}
}

159 
	$n230_h™dÀ_Êash_¥og_comms
(

160 c⁄° 
uöt8_t
 
ëhno
,

161 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

162 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

163 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs
)

165 i‡(
buff
 =
NULL
) {

166 
	`UHD_FW_TRACE
(
WARN
, "n230_handle_flash_prog_comms gotán ICMP_DUR");

169 } i‡(
num_byãs
 !(
n230_Êash_¥og_t
)) {

170 
	`UHD_FW_TRACE
(
WARN
, "n230_handle_flash_prog_comms gotán unknownÑequest (bad size).");

172 c⁄° 
n230_Êash_¥og_t
 *
ªque°
 = (c⁄°Ç230_Êash_¥og_à*)
buff
;

173 
n230_Êash_¥og_t
 
ª•⁄£
;

174 
boﬁ
 
ack_ªque°ed
 = 
ªque°
->
Êags
 & 
N230_FLASH_COMM_FLAGS_ACK
;

177 
	`mem˝y
(&
ª•⁄£
, 
ªque°
, (
n230_Êash_¥og_t
));

179 
ªque°
->
Êags
 & 
N230_FLASH_COMM_FLAGS_CMD_MASK
) {

180 
N230_FLASH_COMM_CMD_READ_NV_DATA
: {

181 
	`UHD_FW_TRACE
(
DEBUG
, "n230_handle_flash_prog_comms::read_nv_data()");

183 i‡(
	`is_n230_ì¥om_ˇche_dúty
()) {

184 
	`ªad_n230_ì¥om
();

189 
	`mem˝y
(
ª•⁄£
.
d©a
, 
	`gë_n230_c⁄°_ì¥om_m≠
(), (
n230_ì¥om_m≠_t
));

190 
ack_ªque°ed
 = 
åue
;

193 
N230_FLASH_COMM_CMD_WRITE_NV_DATA
: {

194 
	`UHD_FW_TRACE
(
DEBUG
, "n230_handle_flash_prog_comms::write_nv_data()");

196 
	`mem˝y
(
	`gë_n230_ì¥om_m≠
(), 
ªque°
->
d©a
, (
n230_ì¥om_m≠_t
));

197 i‡(!
	`wrôe_n230_ì¥om
()) {

198 
ª•⁄£
.
Êags
 |
N230_FLASH_COMM_ERR_CMD_ERROR
;

202 
N230_FLASH_COMM_CMD_READ_FPGA
: {

203 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "n230_handle_flash_prog_comms::read_fpga_page(offset=0x%x, size=%d)",

204 
ªque°
->
off£t
,Ñeque°->
size
);

205 
	`ªad_n230_Âga_image_∑ge
(
ªque°
->
off£t
, 
ª•⁄£
.
d©a
,Ñeque°->
size
);

206 
ack_ªque°ed
 = 
åue
;

209 
N230_FLASH_COMM_CMD_WRITE_FPGA
: {

210 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "n230_handle_flash_prog_comms::write_fpga_page(offset=0x%x, size=%d)",

211 
ªque°
->
off£t
,Ñeque°->
size
);

212 i‡(!
	`wrôe_n230_Âga_image_∑ge
(
ªque°
->
off£t
,Ñeque°->
d©a
,Ñeque°->
size
)) {

213 
ª•⁄£
.
Êags
 |
N230_FLASH_COMM_ERR_CMD_ERROR
;

217 
N230_FLASH_COMM_CMD_ERASE_FPGA
: {

218 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "n230_handle_flash_prog_comms::erase_fpga_sector(offset=0x%x)",

219 
ªque°
->
off£t
);

220 i‡(!
	`îa£_n230_Âga_image_£˘‹
(
ªque°
->
off£t
)) {

221 
ª•⁄£
.
Êags
 |
N230_FLASH_COMM_ERR_CMD_ERROR
;

226 
	`UHD_FW_TRACE
(
ERROR
, "n230_handle_flash_prog_comms gotán invalid command.");

227 
ª•⁄£
.
Êags
 |
FW_COMM_ERR_CMD_ERROR
;

231 i‡(
ack_ªque°ed
) {

232 
	`u3_√t_°ack_£nd_udp_pkt
(
ëhno
, 
§c
, 
d°_p‹t
, 
§c_p‹t
, &
ª•⁄£
, (response));

235 
	}
}

237 
	$n230_ªgi°î_Êash_comms_h™dÀr
()

239 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
N230_FW_COMMS_FLASH_PROG_PORT
, &
n230_h™dÀ_Êash_¥og_comms
);

240 
	}
}

245 
	#SFPP_STATUS_MODABS_CHG
 (1 << 5)

246 
	#SFPP_STATUS_TXFAULT_CHG
 (1 << 4)

247 
	#SFPP_STATUS_RXLOS_CHG
 (1 << 3)

248 
	#SFPP_STATUS_MODABS
 (1 << 2)

249 
	#SFPP_STATUS_TXFAULT
 (1 << 1)

250 
	#SFPP_STATUS_RXLOS
 (1 << 0)

251 

	)

252 
boﬁ
 
	glöks_up
[
N230_MAX_NUM_ETH_PORTS
] = {};

253 
uöt32_t
 
	g∑ckë_cou¡
[
N230_MAX_NUM_ETH_PORTS
] = {};

255 
	$n230_pﬁl_sÂ_°©us
(c⁄° 
uöt32_t
 
ëh
, 
boﬁ
 
f‹˚
, boﬁ* 
°©e_upd©ed
)

258 
uöt32_t
 
rb
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
WB_SBRB_BASE
, (
ëh
==0Ë? 
RB_ZPU_SFP_STATUS0
 : 
RB_ZPU_SFP_STATUS1
));

260 i‡(
rb
 & 
SFPP_STATUS_RXLOS_CHG
)

261 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "ëh%1d RXLOS ch™ged sèã: %d", 
ëh
, (
rb
 & 
SFPP_STATUS_RXLOS
));

262 i‡(
rb
 & 
SFPP_STATUS_TXFAULT_CHG
)

263 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "ëh%1d TXFAULT ch™ged sèã: %d", 
ëh
, ((
rb
 & 
SFPP_STATUS_TXFAULT
) >> 1));

264 i‡(
rb
 & 
SFPP_STATUS_MODABS_CHG
)

265 
	`UHD_FW_TRACE_FSTR
(
DEBUG
, "ëh%1d MODABS ch™ged sèã: %d", 
ëh
, ((
rb
 & 
SFPP_STATUS_MODABS
) >> 2));

268 i‡((
rb
 & 
SFPP_STATUS_RXLOS_CHG
Ë|| (rb & 
SFPP_STATUS_TXFAULT_CHG
Ë|| (rb & 
SFPP_STATUS_MODABS_CHG
Ë|| 
f‹˚
)

270 c⁄° 
boﬁ
 
ﬁd_lök_up
 = 
löks_up
[
ëh
];

271 c⁄° 
uöt32_t
 
°©us_ªg_addr
 = (
ëh
==0Ë? 
RB_ZPU_SFP_STATUS0
 : 
RB_ZPU_SFP_STATUS1
;

273 
uöt32_t
 
sÂp_°©us
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
°©us_ªg_addr
)) & 0xFFFF;

274 i‡((
sÂp_°©us
 & (
SFPP_STATUS_RXLOS
|
SFPP_STATUS_TXFAULT
|
SFPP_STATUS_MODABS
)) == 0) {

275 
öt8_t
 
timeout
 = 100;

276 
boﬁ
 
lök_up
 = 
Ál£
;

278 
lök_up
 = ((
	`wb_≥ek32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
°©us_ªg_addr
)) >> 16) & 0x1) != 0;

279 } !
lök_up
 && 
timeout
-- > 0);

281 
löks_up
[
ëh
] = 
lök_up
;

283 
löks_up
[
ëh
] = 
Ál£
;

286 i‡(!
ﬁd_lök_up
 && 
löks_up
[
ëh
]Ë
	`u3_√t_°ack_£nd_¨p_ªque°
”th, 
	`u3_√t_°ack_gë_ù_addr
(eth));

287 
	`UHD_FW_TRACE_FSTR
(
INFO
, "Thêlök o¿ëhÖ‹à%u i†%s", 
ëh
, 
löks_up
[eth]?"up":"down");

288 i‡(
rb
 & 
SFPP_STATUS_MODABS_CHG
) {

290 i‡(
rb
 & 
SFPP_STATUS_MODABS
) {

292 
	`UHD_FW_TRACE_FSTR
(
INFO
, "A¿SFP+ moduÀ ha†bì¿ªmoved fromÉthÖ‹à%d.", 
ëh
);

296 
	`UHD_FW_TRACE_FSTR
(
INFO
, "AÇew SFP+ moduÀ ha†bì¿ö£πed i¡ÿëhÖ‹à%d.", 
ëh
);

299 *
°©e_upd©ed
 = 
åue
;

301 *
°©e_upd©ed
 = 
Ál£
;

303 
	}
}

305 
	$n230_upd©e_lök_a˘_°©e
(
so·_ªg_t
* 
Àd_ªg
)

307 
boﬁ
 
fú°_pﬁl
 = 1;

308 
uöt32_t
 
pﬁl_˙t
;

310 
boﬁ
 
a˘ivôy
[
N230_MAX_NUM_ETH_PORTS
] = {};

311 
uöt32_t
 
i
 = 0; i < 
N230_NUM_ETH_PORTS
; i++) {

312 i‡(
fú°_pﬁl
) {

313 
löks_up
[
i
] = 0;

314 
∑ckë_cou¡
[
i
] = 0;

315 
pﬁl_˙t
 = 0;

319 
boﬁ
 
lök_°©e_‰om_sÂ
 = 
Ál£
;

320 
	`n230_pﬁl_sÂ_°©us
(
i
, 
fú°_pﬁl
, &
lök_°©e_‰om_sÂ
);

323 
uöt32_t
 
˙t
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
WB_SBRB_BASE
, (
i
==0)?
RB_ZPU_ETH0_PKT_CNT
:
RB_ZPU_ETH1_PKT_CNT
));

324 
a˘ivôy
[
i
] = (
˙t
 !
∑ckë_cou¡
[i]);

325 
∑ckë_cou¡
[
i
] = 
˙t
;

329 i‡(
a˘ivôy
[
i
] && !
lök_°©e_‰om_sÂ
Ë
löks_up
[i] = 
åue
;

333 
	`so·_ªg_wrôe
(
Àd_ªg
, 
LED_REG_FIELD_ETH_LINK2
, 
löks_up
[0]?1:0);

334 
	`so·_ªg_wrôe
(
Àd_ªg
, 
LED_REG_FIELD_ETH_LINK1
, 
löks_up
[1]?1:0);

335 
	`so·_ªg_wrôe
(
Àd_ªg
, 
LED_REG_FIELD_ETH_ACT2
, 
a˘ivôy
[0]?1:0);

336 
	`so·_ªg_wrôe
(
Àd_ªg
, 
LED_REG_FIELD_ETH_ACT1
, 
a˘ivôy
[1]?1:0);

338 
fú°_pﬁl
 = 0;

339 
	}
}

	@firmware/usrp3/n230/n230_eth_handlers.h

18 #i‚de‡
INCLUDED_N230_ETH_HANDLERS_H


19 
	#INCLUDED_N230_ETH_HANDLERS_H


	)

21 
	~<°döt.h
>

22 
	~<°ddef.h
>

23 
	~<°dboﬁ.h
>

24 
	~<lwù/ù_addr.h
>

25 
	~<wb_so·_ªg.h
>

26 
	~"../../../ho°/lib/u§p/n230/n230_fw_ho°_iÁ˚.h
"

31 
n230_ªgi°î_udp_fw_comms_h™dÀr
(
n230_ho°_sh¨ed_mem_t
* 
sh¨ed_mem_±r
);

36 
n230_ªgi°î_udp_¥og_‰amî
();

41 
n230_ªgi°î_Êash_comms_h™dÀr
();

46 
n230_upd©e_lök_a˘_°©e
(
so·_ªg_t
* 
Àd_ªg
);

	@firmware/usrp3/n230/n230_init.c

18 
	~<¸⁄.h
>

19 
	~<¥ötf.h
>

20 
	~<wb_utûs.h
>

21 
	~<wb_u¨t.h
>

22 
	~<wb_i2c.h
>

23 
	~<wb_pkt_iÁ˚64.h
>

24 
	~<u3_√t_°ack.h
>

25 
	~<¥öt_addrs.h
>

26 
	~<åa˚.h
>

27 
	~"../../../ho°/lib/u§p/n230/n230_ì¥om.h
"

28 
	~"n230_öô.h
"

29 
	~"../../../ho°/lib/u§p/n230/n230_fw_defs.h
"

31 
wb_pkt_iÁ˚64_c⁄fig_t
 
	gpkt_c⁄fig
;

33 
	$putc
(*
p
, 
c
)

37 #ifde‡
UHD_FW_TRACE_LEVEL


38 
	`wb_u¨t_putc
(
WB_DBG_UART_BASE
, 
c
);

40 
	}
}

42 
uöt32_t
 
	$gë_cou¡î_vÆ
()

44  
	`wb_≥ek32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
RB_ZPU_COUNTER
));

45 
	}
}

47 
	$n230_öô
()

51 
	`wb_u¨t_öô
(
WB_DBG_UART_BASE
, 
CPU_CLOCK_FREQ
/
DBG_UART_BAUD
);

52 
	`öô_¥ötf
(
NULL
, 
putc
);

55 
	`UHD_FW_TRACE_FSTR
(
INFO
, "[ZPU Inô Begö -- CPU CLOCK i†%d MHz]", (
CPU_CLOCK_FREQ
/1000000));

58 
	`UHD_FW_TRACE
(
INFO
, "Initializing cron...");

59 
	`¸⁄_öô
(
gë_cou¡î_vÆ
, 
CPU_CLOCK_FREQ
);

60 
	`¸⁄_job_öô
(
PER_MILLISEC_CRON_JOBID
, 1);

61 
	`¸⁄_job_öô
(
PER_SECOND_CRON_JOBID
, 1000);

64 
	`UHD_FW_TRACE
(
INFO
, "Initializing I2C...");

65 
uöt32_t
 
i
 = 0; i < 
N230_NUM_ETH_PORTS
; i++) {

66 
	`wb_i2c_öô
((
i
==1)?
WB_ETH1_I2C_BASE
:
WB_ETH0_I2C_BASE
, 
CPU_CLOCK_FREQ
);

70 
	`ªad_n230_ì¥om
();

72 
	`UHD_FW_TRACE
(
INFO
, "InitializingÇetwork stack...");

73 
	`öô_√tw‹k_°ack
();

74 
	}
}

76 
	$öô_√tw‹k_°ack
()

79 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
SR_ZPU_SW_RST
), 
SR_ZPU_SW_RST_PHY
);

82 
pkt_c⁄fig
 = 
	`wb_pkt_iÁ˚64_öô
(
WB_PKT_RAM_BASE
, 
WB_PKT_RAM_CTRL_OFFSET
);

83 
	`u3_√t_°ack_öô
(&
pkt_c⁄fig
);

86 
uöt32_t
 
i
 = 0; i < 
N230_NUM_ETH_PORTS
; i++) {

87 
	`öô_ëhî√t_mac
(
i
);

91 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
SR_ZPU_SW_RST
), 
SR_ZPU_SW_RST_NONE
);

92 
	}
}

94 
	$öô_ëhî√t_mac
(
uöt32_t
 
iÁ˚_num
)

96 
	`UHD_FW_TRACE_FSTR
(
INFO
, "InôülizögÉth%d...", 
iÁ˚_num
);

99 c⁄° 
n230_ëh_ì¥om_m≠_t
* 
ëh_ì¥om_m≠
 = 
	`gë_n230_ëhî√t_öfo
(
iÁ˚_num
);

100 c⁄° 
ëh_mac_addr_t
 *
my_mac
 = (c⁄°Éth_mac_addr_à*Ë&(
ëh_ì¥om_m≠
->
mac_addr
);

101 c⁄° 
ù_addr
 *
my_ù
 = (c⁄° ù_add∏*Ë&(
ëh_ì¥om_m≠
->ip_addr);

102 c⁄° 
ù_addr
 *
sub√t
 = (c⁄° ù_add∏*Ë&(
ëh_ì¥om_m≠
->subnet);

105 
	`u3_√t_°ack_öô_ëh
(
iÁ˚_num
, 
my_mac
, 
my_ù
, 
sub√t
);

107 
uöt32_t
 
di•©chî_ba£
 =

108 ((
iÁ˚_num
 =1Ë? 
SR_ZPU_ETHINT1
 : 
SR_ZPU_ETHINT0
Ë+ 
SR_ZPU_ETHINT_DISPATCHER_BASE
;

111 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
di•©chî_ba£
 + 0),

112 (
my_mac
->
addr
[5] << 0) | (my_mac->addr[4] << 8) | (my_mac->addr[3] << 16) | (my_mac->addr[2] << 24));

113 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
di•©chî_ba£
 + 1), (
my_mac
->
addr
[1] << 0) | (my_mac->addr[0] << 8));

114 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
di•©chî_ba£
 + 2), 
my_ù
->
addr
);

115 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
di•©chî_ba£
 + 4), 0 );

116 
	`wb_poke32
(
	`SR_ADDR
(
WB_SBRB_BASE
, 
di•©chî_ba£
 + 5), (
ICMP_IRQ
 << 8) | 0);

119 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- MAC%u: %s", 
iÁ˚_num
, 
	`mac_addr_to_°r
(
	`u3_√t_°ack_gë_mac_addr
(iface_num)));

120 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- IP%u: %s", 
iÁ˚_num
, 
	`ù_addr_to_°r
(
	`u3_√t_°ack_gë_ù_addr
(iface_num)));

121 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- SUBNET%u: %s", 
iÁ˚_num
, 
	`ù_addr_to_°r
(
	`u3_√t_°ack_gë_sub√t
(iface_num)));

122 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- BCAST%u: %s", 
iÁ˚_num
, 
	`ù_addr_to_°r
(
	`u3_√t_°ack_gë_bˇ°
(iface_num)));

123 
	}
}

	@firmware/usrp3/n230/n230_init.h

18 #i‚de‡
INCLUDED_N230_INIT_H


19 
	#INCLUDED_N230_INIT_H


	)

21 
	~<°döt.h
>

22 
	~<°dboﬁ.h
>

24 
n230_öô
();

25 
öô_√tw‹k_°ack
();

26 
öô_ëhî√t_mac
(
uöt32_t
 
iÁ˚_num
);

	@firmware/usrp3/n230/n230_main.c

18 
	~<¸⁄.h
>

19 
	~<wb_so·_ªg.h
>

20 
	~<u3_√t_°ack.h
>

21 
	~<åa˚.h
>

22 
	~"../../../ho°/lib/u§p/n230/n230_fw_defs.h
"

23 
	~"../../../ho°/lib/u§p/n230/n230_fw_ho°_iÁ˚.h
"

24 
	~"n230_ëh_h™dÀrs.h
"

25 
	~"n230_öô.h
"

30 #i‚de‡
UHD_VERSION_HASH


31 
	#UHD_VERSION_HASH
 0xFFFFFFFF

	)

35 
so·_ªg_t
 
	gg_Àd_ªgi°î
;

38 
n230_ho°_sh¨ed_mem_t
 
	gg_ho°_sh¨ed_mem
;

41 
n230_h™dÀ_˛aim
();

46 
	$maö
()

49 
g_ho°_sh¨ed_mem
.
d©a
.
fw_com∑t_num
 = 
N230_FW_COMPAT_NUM
;

50 
g_ho°_sh¨ed_mem
.
d©a
.
fw_vîsi⁄_hash
 = 
UHD_VERSION_HASH
;

53 
	`n230_öô
();

56 
	`n230_ªgi°î_udp_fw_comms_h™dÀr
(&
g_ho°_sh¨ed_mem
);

57 
	`n230_ªgi°î_udp_¥og_‰amî
();

58 
	`n230_ªgi°î_Êash_comms_h™dÀr
();

60 
	`öôülize_wrôe⁄ly_so·_ªg
(&
g_Àd_ªgi°î
, 
	`SR_ADDR
(
WB_SBRB_BASE
, 
SR_ZPU_LEDS
));

62 
uöt32_t
 
hóπ_bót
 = 0;

63 
åue
)

67 i‡(
	`¸⁄_job_run_due
(
PER_SECOND_CRON_JOBID
)) {

69 i‡(
hóπ_bót
 % 10 == 0) {

70 
	`UHD_FW_TRACE_FSTR
(
INFO
, "0.1Hz Hóπbóà(%u)", 
hóπ_bót
);

72 
hóπ_bót
++;

75 i‡(
	`¸⁄_job_run_due
(
PER_MILLISEC_CRON_JOBID
)) {

77 
	`n230_h™dÀ_˛aim
();

78 
	`n230_upd©e_lök_a˘_°©e
(&
g_Àd_ªgi°î
);

82 
	`u3_√t_°ack_h™dÀ_⁄e
();

85 
	}
}

88 
	$n230_h™dÀ_˛aim
()

90 
uöt32_t
 
œ°_time
 = 0;

91 
size_t
 
timeout
 = 0;

93 i‡(
g_ho°_sh¨ed_mem
.
d©a
.
˛aim_time
 == 0) {

95 
g_ho°_sh¨ed_mem
.
d©a
.
˛aim_°©us
 = 0;

96 } i‡(
œ°_time
 !
g_ho°_sh¨ed_mem
.
d©a
.
˛aim_time
) {

98 
g_ho°_sh¨ed_mem
.
d©a
.
˛aim_°©us
 = 1;

99 
timeout
 = 0;

102 
timeout
++;

106 
œ°_time
 = 
g_ho°_sh¨ed_mem
.
d©a
.
˛aim_time
;

109 i‡(
timeout
 > 
N230_CLAIMER_TIMEOUT_IN_MS
) {

110 
g_ho°_sh¨ed_mem
.
d©a
.
˛aim_time
 = 0;

112 
	}
}

	@firmware/usrp3/x300/x300_defs.h

4 #i‚de‡
INCLUDED_X300_DEFS_H


5 
	#INCLUDED_X300_DEFS_H


	)

7 
	#CPU_CLOCK
 83333333

	)

8 
	#MAIN_RAM_BASE
 0x0000

	)

9 
	#PKT_RAM0_BASE
 0x8000

	)

10 
	#SFP0_MAC_BASE
 0xC000

	)

11 
	#SFP1_MAC_BASE
 0xD000

	)

12 
	#BOOT_LDR_BASE
 0xFA00

	)

13 
	#UART0_BASE
 0xfd00

	)

14 
	#UART0_BAUD
 115200

	)

15 
	#UART1_BASE
 0xf900

	)

16 
	#UART1_BAUD
 115200

	)

17 
	#I2C0_BASE
 0x„00

	)

18 
	#I2C1_BASE
 0xff00

	)

19 
	#I2C2_BASE
 0xfc00

	)

20 
	#SET0_BASE
 0xa000

	)

21 
	#RB0_BASE
 0xa000

22 
	#SETXB_BASE
 0xb000

	)

25 
	#MBOARD_EEPROM_ADDR
 0x50

	)

28 c⁄° 
	gSR_LEDS
 = 0;

29 c⁄° 
	gSR_SW_RST
 = 1;

30 c⁄° 
	gSR_CLOCK_CTRL
 = 2;

31 c⁄° 
	gSR_XB_LOCAL
 = 3;

32 c⁄° 
	gSR_SFPP_CTRL
 = 4;

33 c⁄° 
	gSR_SPI
 = 32;

34 c⁄° 
	gSR_ETHINT0
 = 40;

35 c⁄° 
	gSR_ETHINT1
 = 56;

36 c⁄° 
	gSR_RB_ADDR
 = 128;

39 c⁄° 
	gLED_ACT1
 = (1 << 5);

40 c⁄° 
	gLED_ACT2
 = (1 << 4);

41 c⁄° 
	gLED_LINK1
 = (1 << 3);

42 c⁄° 
	gLED_LINK2
 = (1 << 2);

43 c⁄° 
	gLED_LINKSTAT
 = (1 << 1);

44 c⁄° 
	gLED_LINKACT
 = (1 << 0);

47 c⁄° 
	gRB_COUNTER
 = 0;

48 c⁄° 
	gRB_SPI_RDY
 = 1;

49 c⁄° 
	gRB_SPI_DATA
 = 2;

50 c⁄° 
	gRB_SFP0_TYPE
 = 4;

51 c⁄° 
	gRB_SFP1_TYPE
 = 5;

52 c⁄° 
	gRB_FPGA_COMPAT
 = 6;

53 c⁄° 
	gRB_SFP0_STATUS
 = 8;

54 c⁄° 
	gRB_SFP1_STATUS
 = 9;

55 c⁄° 
	gRB_XBAR
 = 128;

58 c⁄° 
	gBL_ADDRESS
 = 0;

59 c⁄° 
	gBL_DATA
 = 1;

61 
	#SW_RST_PHY
 0x01

	)

62 
	#SW_RST_RADIO
 0x02

	)

63 
	#SW_RST_RADIO_PLL
 0x04

	)

66 
	#ETH_FRAMER_SRC_MAC_HI
 0

	)

67 
	#ETH_FRAMER_SRC_MAC_LO
 1

	)

68 
	#ETH_FRAMER_SRC_IP_ADDR
 2

	)

69 
	#ETH_FRAMER_SRC_UDP_PORT
 3

	)

70 
	#ETH_FRAMER_DST_RAM_ADDR
 4

	)

71 
	#ETH_FRAMER_DST_IP_ADDR
 5

	)

72 
	#ETH_FRAMER_DST_UDP_MAC
 6

	)

73 
	#ETH_FRAMER_DST_MAC_LO
 7

	)

76 
	#RB_SFP_1G_ETH
 0

	)

77 
	#RB_SFP_10G_ETH
 1

	)

78 
	#RB_SFP_AURORA
 2

	)

	@firmware/usrp3/x300/x300_init.c

1 
	~"x300_öô.h
"

2 
	~"ëhî√t.h
"

3 
	~"¸⁄.h
"

4 
	~<wb_utûs.h
>

5 
	~<wb_u¨t.h
>

6 
	~<wb_i2c.h
>

7 
	~<°döt.h
>

8 
	~<°dboﬁ.h
>

9 
	~<åa˚.h
>

10 
	~<wb_pkt_iÁ˚64.h
>

11 
	~<u3_√t_°ack.h
>

12 
	~<lök_°©e_rouã_¥Ÿo.h
>

13 
	~<udp_u¨t.h
>

14 
	~"x300_fw_comm⁄.h
"

15 
	~<¥öt_addrs.h
>

17 
wb_pkt_iÁ˚64_c⁄fig_t
 
	gpkt_c⁄fig
;

19 
x300_ì¥om_m≠_t
 
	gdeÁu…_m≠
 = {

20 .
mac_addr0
 = 
X300_DEFAULT_MAC_ADDR_0
,

21 .
	gmac_addr1
 = 
X300_DEFAULT_MAC_ADDR_1
,

22 .
	gg©eway
 = 
X300_DEFAULT_GATEWAY
,

23 .
	gsub√t
 = {

24 
X300_DEFAULT_NETMASK_ETH0_1G
,

25 
X300_DEFAULT_NETMASK_ETH1_1G
,

26 
X300_DEFAULT_NETMASK_ETH0_10G
,

27 
X300_DEFAULT_NETMASK_ETH1_10G


29 .
	gù_addr
 = {

30 
X300_DEFAULT_IP_ETH0_1G
,

31 
X300_DEFAULT_IP_ETH1_1G
,

32 
X300_DEFAULT_IP_ETH0_10G
,

33 
X300_DEFAULT_IP_ETH1_10G


37 c⁄° *
	$pick_öôed_fõld
(c⁄° *
ì¥om
, c⁄° *
def
, c⁄° 
size_t
 
Àn
)

39 
boﬁ
 
Æl_⁄es
 = 
åue
;

40 
boﬁ
 
Æl_zîos
 = 
åue
;

41 
size_t
 
i
 = 0; i < 
Àn
; i++)

43 c⁄° 
uöt8_t
 
b
 = ((c⁄° uöt8_à*)
ì¥om
)[
i
];

44 i‡(
b
 !0x00Ë
Æl_zîos
 = 
Ál£
;

45 i‡(
b
 !0xffË
Æl_⁄es
 = 
Ál£
;

47 i‡(
Æl_zîos
Ë 
def
;

48 i‡(
Æl_⁄es
Ë 
def
;

49  
ì¥om
;

50 
	}
}

52 
	$öô_√tw‹k
(
x300_ì¥om_m≠_t
 *
ì¥om_m≠
)

54 
pkt_c⁄fig
 = 
	`wb_pkt_iÁ˚64_öô
(
PKT_RAM0_BASE
, 0x1ffc);

55 
	`u3_√t_°ack_öô
(&
pkt_c⁄fig
);

57 
	`lök_°©e_rouã_¥Ÿo_öô
();

60 c⁄° 
uöt8_t
 
ì¥om_cmd
[2] = {0, 0};

61 
	`wb_i2c_wrôe
(
I2C1_BASE
, 
MBOARD_EEPROM_ADDR
, 
ì¥om_cmd
, 2);

62 
	`wb_i2c_ªad
(
I2C1_BASE
, 
MBOARD_EEPROM_ADDR
, (
uöt8_t
 *)(
ì¥om_m≠
), (
x300_ì¥om_m≠_t
));

65 c⁄° 
size_t
 
ëh0no
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
RB_SFP0_TYPE
))? 2 : 0;

66 c⁄° 
size_t
 
ëh1no
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
RB_SFP1_TYPE
))? 3 : 1;

69 c⁄° 
ëh_mac_addr_t
 *
my_mac0
 = (c⁄°Éth_mac_addr_à*)
	`pick_öôed_fõld
(&
ì¥om_m≠
->
mac_addr0
, &
deÁu…_m≠
.mac_addr0, 6);

70 c⁄° 
ëh_mac_addr_t
 *
my_mac1
 = (c⁄°Éth_mac_addr_à*)
	`pick_öôed_fõld
(&
ì¥om_m≠
->
mac_addr1
, &
deÁu…_m≠
.mac_addr1, 6);

71 c⁄° 
ù_addr
 *
my_ù0
 = (c⁄° ù_add∏*)
	`pick_öôed_fõld
(&
ì¥om_m≠
->ù_addr[
ëh0no
], &
deÁu…_m≠
.ip_addr[eth0no], 4);

72 c⁄° 
ù_addr
 *
sub√t0
 = (c⁄° ù_add∏*)
	`pick_öôed_fõld
(&
ì¥om_m≠
->
sub√t
[
ëh0no
], &
deÁu…_m≠
.subnet[eth0no], 4);

73 c⁄° 
ù_addr
 *
my_ù1
 = (c⁄° ù_add∏*)
	`pick_öôed_fõld
(&
ì¥om_m≠
->ù_addr[
ëh1no
], &
deÁu…_m≠
.ip_addr[eth1no], 4);

74 c⁄° 
ù_addr
 *
sub√t1
 = (c⁄° ù_add∏*)
	`pick_öôed_fõld
(&
ì¥om_m≠
->
sub√t
[
ëh1no
], &
deÁu…_m≠
.subnet[eth1no], 4);

77 
	`u3_√t_°ack_öô_ëh
(0, 
my_mac0
, 
my_ù0
, 
sub√t0
);

78 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT0
 + 8 + 0), (
my_mac0
->
addr
[5] << 0) | (my_mac0->addr[4] << 8) | (my_mac0->addr[3] << 16) | (my_mac0->addr[2] << 24));

79 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT0
 + 8 + 1), (
my_mac0
->
addr
[1] << 0) | (my_mac0->addr[0] << 8));

80 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT0
 + 8 + 2), 
my_ù0
->
addr
);

81 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT0
 + 8 + 4), 0 );

82 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT0
 + 8 + 5), (
ICMP_IRQ
 << 8) | 0);

85 
	`u3_√t_°ack_öô_ëh
(1, 
my_mac1
, 
my_ù1
, 
sub√t1
);

86 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT1
 + 8 + 0), (
my_mac1
->
addr
[5] << 0) | (my_mac1->addr[4] << 8) | (my_mac1->addr[3] << 16) | (my_mac1->addr[2] << 24));

87 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT1
 + 8 + 1), (
my_mac1
->
addr
[1] << 0) | (my_mac1->addr[0] << 8));

88 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT1
 + 8 + 2), 
my_ù1
->
addr
);

89 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT1
 + 8 + 4), 0 );

90 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_ETHINT1
 + 8 + 5), (
ICMP_IRQ
 << 8) | 0);

91 
	}
}

93 
	$putc
(*
p
, 
c
)

97 #ifde‡
UHD_FW_TRACE_LEVEL


98 
	`wb_u¨t_putc
(
UART1_BASE
, 
c
);

100 
	}
}

102 
uöt32_t
 
	$gë_cou¡î_vÆ
()

104  
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
RB_COUNTER
));

105 
	}
}

107 
	$x300_öô
(
x300_ì¥om_m≠_t
 *
ì¥om_m≠
)

110 
	`wb_u¨t_öô
(
UART0_BASE
, 
CPU_CLOCK
/
UART0_BAUD
);

111 
	`wb_u¨t_öô
(
UART1_BASE
, 
CPU_CLOCK
/
UART1_BAUD
);

112 
	`öô_¥ötf
(
NULL
,
putc
);

116 
	`UHD_FW_TRACE
(
INFO
, "[ZPU Initializing]");

117 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- Fúmw¨êCom∑àNumbî: %u.%u", ()
X300_FW_COMPAT_MAJOR
, ()
X300_FW_COMPAT_MINOR
);

118 
uöt32_t
 
Âga_com∑t
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
SET0_BASE
, 
RB_FPGA_COMPAT
));

119 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- FPGA Com∑àNumbî: %u.%u", (
Âga_com∑t
>>16), (fpga_compat&0xFFFF));

120 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- Clock Fªquícy: %u MHz", (
CPU_CLOCK
/1000000));

123 
	`¸⁄_öô
(
gë_cou¡î_vÆ
, 
CPU_CLOCK
);

126 
	`wb_i2c_öô
(
I2C0_BASE
, 
CPU_CLOCK
);

127 
	`wb_i2c_öô
(
I2C1_BASE
, 
CPU_CLOCK
);

128 
	`wb_i2c_öô
(
I2C2_BASE
, 
CPU_CLOCK
);

131 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_SW_RST
), 
SW_RST_PHY
);

134 
	`öô_√tw‹k
(
ì¥om_m≠
);

137 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
SR_SW_RST
), 0);

140 
uöt8_t
 
sÂ
 = 0; sÂ < 
	`ëhî√t_nöãrÁ˚s
(); sfp++)

142 
uöt32_t
 
sÂ_ty≥
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, ((
sÂ
==1Ë? 
RB_SFP1_TYPE
 : 
RB_SFP0_TYPE
)));

143 
	`UHD_FW_TRACE_FSTR
(
INFO
, "SFP+ P‹à%u:", ()
sÂ
);

144 i‡(
sÂ_ty≥
 =
RB_SFP_AURORA
) {

145 
	`UHD_FW_TRACE
 (
INFO
, "-- PHY: 10Gbps Aurora");

147 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- PHY: %s", (
sÂ_ty≥
 =
RB_SFP_10G_ETH
) ? "10Gbps Ethernet" : "1Gbps Ethernet");

148 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- MAC: %s", 
	`mac_addr_to_°r
(
	`u3_√t_°ack_gë_mac_addr
(
sÂ
)));

149 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- IP: %s", 
	`ù_addr_to_°r
(
	`u3_√t_°ack_gë_ù_addr
(
sÂ
)));

150 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- SUBNET: %s", 
	`ù_addr_to_°r
(
	`u3_√t_°ack_gë_sub√t
(
sÂ
)));

151 
	`UHD_FW_TRACE_FSTR
(
INFO
, "-- BCAST: %s", 
	`ù_addr_to_°r
(
	`u3_√t_°ack_gë_bˇ°
(
sÂ
)));

156 
	`¶ìp_ms
(100);

157 
	`ëhî√t_öô
(0);

158 
	`ëhî√t_öô
(1);

159 
	}
}

	@firmware/usrp3/x300/x300_init.h

4 #i‚de‡
INCLUDED_B250_INIT_H


5 
	#INCLUDED_B250_INIT_H


	)

7 
	~"x300_defs.h
"

8 
	~"x300_fw_comm⁄.h
"

10 
x300_öô
(
x300_ì¥om_m≠_t
 *
ì¥om_m≠
);

12 
x300_£rül_lﬂdî_run1
();

16 
	mDCO_156p25
,

17 
	mDCO_125
,

18 
	mDCO_10


19 } 
	tdco_‰eq_t
;

	@firmware/usrp3/x300/x300_main.c

3 
	~"x300_öô.h
"

4 
	~"x300_defs.h
"

5 
	~"x300_fw_comm⁄.h
"

6 
	~"xge_phy.h
"

7 
	~"ëhî√t.h
"

8 
	~"chöch.h
"

10 
	~<wb_utûs.h
>

11 
	~<wb_u¨t.h
>

12 
	~<udp_u¨t.h
>

13 
	~<u3_√t_°ack.h
>

14 
	~<lök_°©e_rouã_¥Ÿo.h
>

15 
	~<åa˚.h
>

16 
	~<°rög.h
>

17 
	~<¥öt_addrs.h
>

19 
uöt32_t
 *
	gshmem
 = (uöt32_à*Ë
X300_FW_SHMEM_BASE
;

24 
	$¥ogøm_udp_‰amî
(

25 c⁄° 
uöt8_t
 
ëhno
,

26 c⁄° 
uöt32_t
 
sid
,

27 c⁄° 
ù_addr
 *
d°_ù
,

28 c⁄° 
uöt16_t
 
d°_p‹t
,

29 c⁄° 
uöt16_t
 
§c_p‹t


32 c⁄° 
ëh_mac_addr_t
 *
d°_mac
 = 
	`u3_√t_°ack_¨p_ˇche_lookup
(
d°_ù
);

33 c⁄° 
size_t
 
ëhba£
 = (
ëhno
 =0)? 
SR_ETHINT0
 : 
SR_ETHINT1
;

34 c⁄° 
size_t
 
vde°
 = (
sid
 >> 16) & 0xff;

35 
	`UHD_FW_TRACE_FSTR
(
INFO
, "h™dÀ_udp_¥og_‰amî sid %u vde° %u\n", 
sid
, 
vde°
);

38 c⁄° 
ëh_mac_addr_t
 *
§c_mac
 = 
	`u3_√t_°ack_gë_mac_addr
(
ëhno
);

39 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_SRC_MAC_HI
),

40 (((
uöt32_t
)
§c_mac
->
addr
[0]) << 8) | (((uint32_t)src_mac->addr[1]) << 0));

41 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_SRC_MAC_LO
),

42 (((
uöt32_t
)
§c_mac
->
addr
[2]) << 24) | (((uint32_t)src_mac->addr[3]) << 16) |

43 (((
uöt32_t
)
§c_mac
->
addr
[4]) << 8) | (((uint32_t)src_mac->addr[5]) << 0));

44 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_SRC_IP_ADDR
), 
	`u3_√t_°ack_gë_ù_addr
(
ëhno
)->
addr
);

45 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_SRC_UDP_PORT
), 
§c_p‹t
);

48 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_DST_RAM_ADDR
), 
vde°
);

49 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_DST_IP_ADDR
), 
d°_ù
->
addr
);

50 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_DST_UDP_MAC
),

51 (((
uöt32_t
)
d°_p‹t
) << 16) |

52 (((
uöt32_t
)
d°_mac
->
addr
[0]) << 8) | (((uint32_t)dst_mac->addr[1]) << 0));

53 
	`wb_poke32
(
	`SR_ADDR
(
SET0_BASE
, 
ëhba£
 + 
ETH_FRAMER_DST_MAC_LO
),

54 (((
uöt32_t
)
d°_mac
->
addr
[2]) << 24) | (((uint32_t)dst_mac->addr[3]) << 16) |

55 (((
uöt32_t
)
d°_mac
->
addr
[4]) << 8) | (((uint32_t)dst_mac->addr[5]) << 0));

56 
	}
}

61 
	$h™dÀ_udp_¥og_‰amî
(

62 c⁄° 
uöt8_t
 
ëhno
,

63 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

64 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

65 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


68 i‡(
buff
 =
NULL
) {

73 c⁄° 
uöt32_t
 
sid
 = ((c⁄° uöt32_à*)
buff
)[1];

74 
	`¥ogøm_udp_‰amî
(
ëhno
, 
sid
, 
§c
, 
§c_p‹t
, 
d°_p‹t
);

76 
	}
}

81 
	$h™dÀ_udp_fw_comms
(

82 c⁄° 
uöt8_t
 
ëhno
,

83 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

84 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

85 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


88 i‡(
buff
 =
NULL
) {

92 c⁄° 
x300_fw_comms_t
 *
ªque°
 = (c⁄° x300_fw_comms_à*)
buff
;

93 
x300_fw_comms_t
 
ª∂y
; 
	`mem˝y
(&ª∂y, 
buff
, (reply));

96 i‡(
num_byãs
 < (
x300_fw_comms_t
)) {

97 
ª∂y
.
Êags
 |
X300_FW_COMMS_FLAGS_ERROR
;

101 i‡(
ªque°
->
Êags
 & 
X300_FW_COMMS_FLAGS_PEEK32
)

103 i‡(
ªque°
->
addr
 & 0x00100000) {

104 
	`chöch_≥ek32
(
ªque°
->
addr
 & 0x000FFFFF, &
ª∂y
.
d©a
);

106 
ª∂y
.
d©a
 = 
	`wb_≥ek32
(
ªque°
->
addr
);

109 i‡(
ªque°
->
Êags
 & 
X300_FW_COMMS_FLAGS_POKE32
)

111 i‡(
ªque°
->
addr
 & 0x00100000) {

112 
	`chöch_poke32
(
ªque°
->
addr
 & 0x000FFFFF,Ñeque°->
d©a
);

114 
	`wb_poke32
(
ªque°
->
addr
,Ñeque°->
d©a
);

120 i‡(
ªque°
->
Êags
 & 
X300_FW_COMMS_FLAGS_ACK
) {

121 
	`u3_√t_°ack_£nd_udp_pkt
(
ëhno
, 
§c
, 
d°_p‹t
, 
§c_p‹t
, &
ª∂y
, (reply));

124 
	}
}

129 
	$h™dÀ_udp_Âga_¥og
(

130 c⁄° 
uöt8_t
 
ëhno
,

131 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

132 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

133 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


136 c⁄° 
x300_Âga_¥og_t
 *
ªque°
 = (c⁄° x300_Âga_¥og_à*)
buff
;

137 
x300_Âga_¥og_Êags_t
 
ª∂y
 = {0};

138 
boﬁ
 
°©us
 = 
åue
;

140 i‡(
buff
 =
NULL
) {

142 } i‡(
num_byãs
 < 
	`off£tof
(
x300_Âga_¥og_t
, 
d©a
)) {

143 
ª∂y
.
Êags
 |
X300_FPGA_PROG_FLAGS_ERROR
;

145 i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_FLAGS_INIT
) {

146 
	`STATUS_MERGE
(
	`chöch_Êash_öô
(), 
°©us
);

147 } i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_FLAGS_CLEANUP
) {

148 
	`chöch_Êash_˛ónup
();

149 } i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_CONFIGURE
) {

151 
	`chöch_°¨t_c⁄fig
();

152 } i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_CONFIG_STATUS
) {

153 i‡(
	`chöch_gë_c⁄fig_°©us
(Ë!
CHINCH_CONFIG_COMPLETED
)

154 
ª∂y
.
Êags
 |
X300_FPGA_PROG_FLAGS_ERROR
;

156 
	`STATUS_MERGE
(
	`chöch_Êash_£À˘_£˘‹
(
ªque°
->
£˘‹
), 
°©us
);

157 i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_FLAGS_ERASE
)

158 
	`STATUS_CHAIN
(
	`chöch_Êash_îa£_£˘‹
(), 
°©us
);

160 
uöt32_t
 
num_buff_wrôes
 = (
ªque°
->
size
 / 
CHINCH_FLASH_MAX_BUF_WRITES
) +

161 (
ªque°
->
size
 % 
CHINCH_FLASH_MAX_BUF_WRITES
 == 0 ? 0 : 1);

162 
uöt32_t
 
d©a_idx
 = 0;

163 
uöt32_t
 
buf_wr_i
 = 0; (buf_wr_ò< 
num_buff_wrôes
Ë&& 
°©us
; buf_wr_i++) {

164 
uöt32_t
 
wr_Àn
 = (
ªque°
->
size
 - 
d©a_idx
Ë>
CHINCH_FLASH_MAX_BUF_WRITES
 ?

165 
CHINCH_FLASH_MAX_BUF_WRITES
 : (
ªque°
->
size
 - 
d©a_idx
);

167 
	`STATUS_MERGE
(
	`chöch_Êash_wrôe_buf
((
ªque°
->
ödex
 + 
d©a_idx
)*2,

168 (
uöt16_t
*)
ªque°
->
d©a
+
d©a_idx
, 
wr_Àn
), 
°©us
);

169 
d©a_idx
 +
wr_Àn
;

172 i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_FLAGS_VERIFY
) {

173 
uöt16_t
 
d©a
[
ªque°
->
size
];

174 
	`STATUS_MERGE
(
	`chöch_Êash_ªad_buf
(
ªque°
->
ödex
*2, 
d©a
,Ñeque°->
size
), 
°©us
);

175 
uöt32_t
 
i
 = 0; i < 
ªque°
->
size
; i++) {

176 
°©us
 &(
d©a
[
i
] =
ªque°
->data[i]);

181 i‡(!
°©us
Ë
ª∂y
.
Êags
 |
X300_FPGA_PROG_FLAGS_ERROR
;

184 i‡(
ªque°
->
Êags
 & 
X300_FPGA_PROG_FLAGS_ACK
)

186 
	`u3_√t_°ack_£nd_udp_pkt
(
ëhno
, 
§c
, 
d°_p‹t
, 
§c_p‹t
, &
ª∂y
, (reply));

188 
	}
}

193 
	$h™dÀ_udp_mtu_dëe˘
(

194 c⁄° 
uöt8_t
 
ëhno
,

195 c⁄° 
ù_addr
 *
§c
, c⁄° ù_add∏*
d°
,

196 c⁄° 
uöt16_t
 
§c_p‹t
, c⁄° uöt16_à
d°_p‹t
,

197 c⁄° *
buff
, c⁄° 
size_t
 
num_byãs


200 c⁄° 
x300_mtu_t
 *
ªque°
 = (c⁄° x300_mtu_à*Ë
buff
;

201 
x300_mtu_t
 
ª∂y
;

203 i‡(
buff
 =
NULL
) {

205 } i‡(!(
ªque°
->
Êags
 & 
X300_MTU_DETECT_ECHO_REQUEST
)) {

206 
	`UHD_FW_TRACE
(
WARN
, "MTU detect got unknownÑequest");

207 
ª∂y
.
Êags
 |
X300_MTU_DETECT_ERROR
;

210 
ª∂y
.
Êags
 |
X300_MTU_DETECT_ECHO_REPLY
;

211 
ª∂y
.
size
 = 
num_byãs
;

213 
	`u3_√t_°ack_£nd_udp_pkt
(
ëhno
, 
§c
, 
d°_p‹t
, 
§c_p‹t
, &
ª∂y
, 
ªque°
->
size
);

214 
	}
}

220 
	$h™dÀ_˛aim
(
uöt32_t
 
ticks_now
)

222 c⁄° 
uöt32_t
 
CLAIM_TIMEOUT
 = 2*
CPU_CLOCK
;

223 
uöt32_t
 
ticks_œ°_˛aim
 = 0;

224 
uöt32_t
 
œ°_time
 = 0;

227 i‡(
shmem
[
X300_FW_SHMEM_CLAIM_STATUS
] != 0 &&

228 (
shmem
[
X300_FW_SHMEM_CLAIM_TIME
] == 0 ||

229 
ticks_now
 - 
ticks_œ°_˛aim
 > 
CLAIM_TIMEOUT
))

232 
shmem
[
X300_FW_SHMEM_CLAIM_STATUS
] = 0;

233 
œ°_time
 = 
shmem
[
X300_FW_SHMEM_CLAIM_TIME
];

235 i‡(
œ°_time
 !
shmem
[
X300_FW_SHMEM_CLAIM_TIME
])

238 
shmem
[
X300_FW_SHMEM_CLAIM_STATUS
] = 1;

239 
œ°_time
 = 
shmem
[
X300_FW_SHMEM_CLAIM_TIME
];

240 
ticks_œ°_˛aim
 = 
ticks_now
;

242 
	}
}

247 
uöt32_t
 
	$gë_xb¨_tŸÆ
(c⁄° 
uöt32_t
 
p‹t
)

249 c⁄° 
uöt32_t
 
NUM_PORTS
 = 16;

250 
uöt32_t
 
tŸÆ
 = 0;

251 
uöt32_t
 
i
 = 0; i < 
NUM_PORTS
; i++)

253 
	`wb_poke32
(
SET0_BASE
 + 
SR_RB_ADDR
*4, (
NUM_PORTS
*
p‹t
 + 
i
));

254 
tŸÆ
 +
	`wb_≥ek32
(
RB0_BASE
 + 
RB_XBAR
*4);

255 
	`wb_poke32
(
SET0_BASE
 + 
SR_RB_ADDR
*4, (
NUM_PORTS
*
i
 + 
p‹t
));

256 
tŸÆ
 +
	`wb_≥ek32
(
RB0_BASE
 + 
RB_XBAR
*4);

258 i‡(
p‹t
 < 2)

260 
tŸÆ
 +
	`u3_√t_°ack_gë_°©_cou¡s
(
p‹t
);

262  
tŸÆ
;

263 
	}
}

265 
	$upd©e_Àds
()

267 
uöt32_t
 
œ°_tŸÆ0
 = 0;

268 
uöt32_t
 
œ°_tŸÆ1
 = 0;

269 c⁄° 
uöt32_t
 
tŸÆ0
 = 
	`gë_xb¨_tŸÆ
(0);

270 c⁄° 
uöt32_t
 
tŸÆ1
 = 
	`gë_xb¨_tŸÆ
(1);

271 c⁄° 
boﬁ
 
a˘0
 = (
tŸÆ0
 !
œ°_tŸÆ0
);

272 c⁄° 
boﬁ
 
a˘1
 = (
tŸÆ1
 !
œ°_tŸÆ1
);

273 
œ°_tŸÆ0
 = 
tŸÆ0
;

274 
œ°_tŸÆ1
 = 
tŸÆ1
;

276 c⁄° 
boﬁ
 
lök0
 = 
	`ëhî√t_gë_lök_up
(0);

277 c⁄° 
boﬁ
 
lök1
 = 
	`ëhî√t_gë_lök_up
(1);

278 c⁄° 
boﬁ
 
˛aimed
 = 
shmem
[
X300_FW_SHMEM_CLAIM_STATUS
];

280 
	`wb_poke32
(
SET0_BASE
 + 
SR_LEDS
*4, 0

281 | (
lök0
? 
LED_LINK2
 : 0)

282 | (
lök1
? 
LED_LINK1
 : 0)

283 | (
a˘0
? 
LED_ACT2
 : 0)

284 | (
a˘1
? 
LED_ACT1
 : 0)

285 | ((
a˘0
 || 
a˘1
)? 
LED_LINKACT
 : 0)

286 | (
˛aimed
? 
LED_LINKSTAT
 : 0)

288 
	}
}

293 
	$g¨p
()

295 
size_t
 
cou¡
 = 0;

296 i‡(
cou¡
++ < 3000) ;

297 
cou¡
 = 0;

298 
size_t
 
e
 = 0;É < 
	`ëhî√t_nöãrÁ˚s
();É++)

300 i‡(
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
e
 =0 ? 
RB_SFP0_TYPE
 : 
RB_SFP1_TYPE
)Ë!
RB_SFP_AURORA
) {

301 i‡(!
	`ëhî√t_gë_lök_up
(
e
)) ;

302 
	`u3_√t_°ack_£nd_¨p_ªque°
(
e
, 
	`u3_√t_°ack_gë_ù_addr
(e));

305 
	}
}

310 
	$h™dÀ_u¨ts
()

313 
	#NUM_POOL_WORDS32
 64

	)

314 
uöt32_t
 
rxpoﬁ
[
NUM_POOL_WORDS32
];

315 
uöt32_t
 
txpoﬁ
[
NUM_POOL_WORDS32
];

316 
shmem
[
X300_FW_SHMEM_UART_RX_ADDR
] = (
uöt32_t
)
rxpoﬁ
;

317 
shmem
[
X300_FW_SHMEM_UART_TX_ADDR
] = (
uöt32_t
)
txpoﬁ
;

318 
shmem
[
X300_FW_SHMEM_UART_WORDS32
] = 
NUM_POOL_WORDS32
;

323 
uöt32_t
 
rxoff£t
 = 0;

324 
rxch
 = 
	`wb_u¨t_gëc
(
UART0_BASE
);Ñxch != -1;Ñxch = wb_uart_getc(UART0_BASE))

326 c⁄° 
shi·
 = ((
rxoff£t
%4) * 8);

327 
uöt32_t
 
rxw‹d32
 = 0;

328 i‡(
shi·
 =0Ë
rxw‹d32
 = 0;

329 
rxw‹d32
 |((
uöt32_t
Ë
rxch
 & 0xFFË<< 
shi·
;

330 
rxpoﬁ
[(
rxoff£t
/4Ë% 
NUM_POOL_WORDS32
] = 
rxw‹d32
;

331 
rxoff£t
++;

332 
shmem
[
X300_FW_SHMEM_UART_RX_INDEX
] = 
rxoff£t
;

338 
uöt32_t
 
txoff£t
 = 0;

339 
txoff£t
 !
shmem
[
X300_FW_SHMEM_UART_TX_INDEX
])

341 c⁄° 
shi·
 = ((
txoff£t
%4) * 8);

342 c⁄° 
txch
 = 
txpoﬁ
[
txoff£t
/4] >> 
shi·
;

343 
	`wb_u¨t_putc
(
UART0_BASE
, 
txch
);

344 
txoff£t
 = (txoff£t+1Ë% (
NUM_POOL_WORDS32
*4);

346 
	}
}

351 
	$upd©e_f‹w¨dög
(c⁄° 
uöt8_t
 
e
)

369 
	}
}

371 
	$h™dÀ_lök_°©e
()

374 
size_t
 
m≠_Àn
 = 0;

375 
shmem
[
X300_FW_SHMEM_ROUTE_MAP_ADDR
] = (
uöt32_t
)
	`lök_°©e_rouã_gë_node_m≠pög
(&
m≠_Àn
);

376 
shmem
[
X300_FW_SHMEM_ROUTE_MAP_LEN
] = 
m≠_Àn
;

378 
size_t
 
cou¡
 = 0;

379 i‡(
cou¡
--) ;

380 
cou¡
 = 2000;

382 
	`lök_°©e_rouã_¥Ÿo_tick
();

383 
size_t
 
e
 = 0;É < 
	`ëhî√t_nöãrÁ˚s
();É++)

385 i‡(
	`ëhî√t_gë_lök_up
(
e
))

387 
	`lök_°©e_rouã_¥Ÿo_upd©e
(
e
);

388 
	`lök_°©e_rouã_¥Ÿo_Êood
(
e
);

392 
boﬁ
 
bef‹e
 = 
	`lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e_ˇched
(
e
, (e+1)%2);

393 
	`lök_°©e_rouã_¥Ÿo_upd©e_cy˛e_ˇche
(
e
);

394 i‡(
bef‹e
 !
	`lök_°©e_rouã_¥Ÿo_ˇu£s_cy˛e_ˇched
(
e
, (e+1)%2))

395 
	`upd©e_f‹w¨dög
(
e
);

403 
	}
}

408 
	$maö
()

410 
	`x300_öô
((
x300_ì¥om_m≠_t
 *)&
shmem
[
X300_FW_SHMEM_IDENT
]);

411 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
X300_FW_COMMS_UDP_PORT
, &
h™dÀ_udp_fw_comms
);

412 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
X300_VITA_UDP_PORT
, &
h™dÀ_udp_¥og_‰amî
);

413 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
X300_FPGA_PROG_UDP_PORT
, &
h™dÀ_udp_Âga_¥og
);

414 
	`u3_√t_°ack_ªgi°î_udp_h™dÀr
(
X300_MTU_DETECT_UDP_PORT
, &
h™dÀ_udp_mtu_dëe˘
);

416 
uöt32_t
 
œ°_¸⁄job
 = 0;

418 
åue
)

420 c⁄° 
uöt32_t
 
ticks_now
 = 
	`wb_≥ek32
(
	`SR_ADDR
(
RB0_BASE
, 
RB_COUNTER
));

425 
	`h™dÀ_˛aim
(
ticks_now
);

428 c⁄° 
uöt32_t
 
ticks_∑s£d
 = 
ticks_now
 - 
œ°_¸⁄job
;

429 c⁄° 
uöt32_t
 
tick_dñè
 = 
CPU_CLOCK
/100;

430 i‡(
ticks_∑s£d
 > 
tick_dñè
)

432 
	`pﬁl_sÂp_°©us
(0);

433 
	`pﬁl_sÂp_°©us
(1);

435 
	`upd©e_Àds
();

436 
	`g¨p
();

437 
œ°_¸⁄job
 = 
ticks_now
;

441 
	`u3_√t_°ack_h™dÀ_⁄e
();

444 
	`f‹w¨d_pcõ_u£r_xa˘_to_wb
();

447 
	`h™dÀ_u¨ts
();

450 
shmem
[
X300_FW_SHMEM_COMPAT_NUM
] = (
X300_FW_COMPAT_MAJOR
 << 16Ë| 
X300_FW_COMPAT_MINOR
;

453 
	}
}

	@host/build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c

1 #ifde‡
__˝lu•lus


5 #i‡
deföed
(
__18CXX
)

6 
	#ID_VOID_MAIN


	)

13 #i‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICC
)

14 
	#COMPILER_ID
 "I¡ñ"

	)

15 #i‡
deföed
(
_MSC_VER
)

16 
	#SIMULATE_ID
 "MSVC"

	)

19 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_COMPILER
/100)

	)

20 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_COMPILER
/10 % 10)

	)

21 #i‡
deföed
(
__INTEL_COMPILER_UPDATE
)

22 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER_UPDATE
)

	)

24 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER
 % 10)

	)

26 #i‡
deföed
(
__INTEL_COMPILER_BUILD_DATE
)

28 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__INTEL_COMPILER_BUILD_DATE
)

	)

30 #i‡
deföed
(
_MSC_VER
)

32 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

33 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

36 #ñi‡
deföed
(
__PATHCC__
)

37 
	#COMPILER_ID
 "P©hSˇÀ"

	)

38 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PATHCC__
)

	)

39 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PATHCC_MINOR__
)

	)

40 #i‡
deföed
(
__PATHCC_PATCHLEVEL__
)

41 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PATHCC_PATCHLEVEL__
)

	)

44 #ñi‡
deföed
(
__BORLANDC__
Ë&& deföed(
__CODEGEARC_VERSION__
)

45 
	#COMPILER_ID
 "Emb¨ˇdîo"

	)

46 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>24 & 0x00FF)

	)

47 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>16 & 0x00FF)

	)

48 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__CODEGEARC_VERSION__
 & 0xFFFF)

	)

50 #ñi‡
deföed
(
__BORLANDC__
)

51 
	#COMPILER_ID
 "B‹œnd"

	)

53 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__BORLANDC__
>>8)

	)

54 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__BORLANDC__
 & 0xFF)

	)

56 #ñi‡
deföed
(
__WATCOMC__
) && __WATCOMC__ < 1200

57 
	#COMPILER_ID
 "W©com"

	)

59 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__WATCOMC__
 / 100)

	)

60 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

61 #i‡(
__WATCOMC__
 % 10) > 0

62 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

65 #ñi‡
deföed
(
__WATCOMC__
)

66 
	#COMPILER_ID
 "O≥nW©com"

	)

68 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__WATCOMC__
 - 1100Ë/ 100)

	)

69 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

70 #i‡(
__WATCOMC__
 % 10) > 0

71 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

74 #ñi‡
deföed
(
__SUNPRO_C
)

75 
	#COMPILER_ID
 "SunPro"

	)

76 #i‡
__SUNPRO_C
 >= 0x5100

78 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_C
>>12)

	)

79 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_C
>>4 & 0xFF)

	)

80 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_C
 & 0xF)

	)

83 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_C
>>8)

	)

84 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_C
>>4 & 0xF)

	)

85 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_C
 & 0xF)

	)

88 #ñi‡
deföed
(
__HP_cc
)

89 
	#COMPILER_ID
 "HP"

	)

91 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__HP_cc
/10000)

	)

92 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__HP_cc
/100 % 100)

	)

93 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__HP_cc
 % 100)

	)

95 #ñi‡
deföed
(
__DECC
)

96 
	#COMPILER_ID
 "Com∑q"

	)

98 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__DECC_VER
/10000000)

	)

99 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__DECC_VER
/100000 % 100)

	)

100 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__DECC_VER
 % 10000)

	)

102 #ñi‡
deföed
(
__IBMC__
Ë&& deföed(
__COMPILER_VER__
)

103 
	#COMPILER_ID
 "zOS"

	)

105 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

106 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

107 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

109 #ñi‡
deföed
(
__IBMC__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMC__ >= 800

110 
	#COMPILER_ID
 "XL"

	)

112 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

113 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

114 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

116 #ñi‡
deföed
(
__IBMC__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMC__ < 800

117 
	#COMPILER_ID
 "VisuÆAge"

	)

119 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

120 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

121 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

123 #ñi‡
deföed
(
__PGI
)

124 
	#COMPILER_ID
 "PGI"

	)

125 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PGIC__
)

	)

126 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PGIC_MINOR__
)

	)

127 #i‡
deföed
(
__PGIC_PATCHLEVEL__
)

128 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PGIC_PATCHLEVEL__
)

	)

131 #ñi‡
deföed
(
_CRAYC
)

132 
	#COMPILER_ID
 "Cøy"

	)

133 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_RELEASE_MAJOR
)

	)

134 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_RELEASE_MINOR
)

	)

136 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

137 
	#COMPILER_ID
 "TI"

	)

139 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000000)

	)

140 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000 % 1000)

	)

141 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__TI_COMPILER_VERSION__
 % 1000)

	)

143 #ñi‡
deföed
(
__FUJITSU
Ë|| deföed(
__FCC_VERSION
Ë|| deföed(
__fcc_vîsi⁄
)

144 
	#COMPILER_ID
 "Fujôsu"

	)

146 #ñi‡
deföed
(
__TINYC__
)

147 
	#COMPILER_ID
 "TöyCC"

	)

149 #ñi‡
deföed
(
__SCO_VERSION__
)

150 
	#COMPILER_ID
 "SCO"

	)

152 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__≠∂e_buûd_vîsi⁄__
)

153 
	#COMPILER_ID
 "AµÀCœng"

	)

154 #i‡
deföed
(
_MSC_VER
)

155 
	#SIMULATE_ID
 "MSVC"

	)

157 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

158 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

159 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

160 #i‡
deföed
(
_MSC_VER
)

162 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

163 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

165 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__≠∂e_buûd_vîsi⁄__
)

	)

167 #ñi‡
deföed
(
__˛™g__
)

168 
	#COMPILER_ID
 "Cœng"

	)

169 #i‡
deföed
(
_MSC_VER
)

170 
	#SIMULATE_ID
 "MSVC"

	)

172 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

173 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

174 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

175 #i‡
deföed
(
_MSC_VER
)

177 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

178 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

181 #ñi‡
deföed
(
__GNUC__
)

182 
	#COMPILER_ID
 "GNU"

	)

183 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

184 #i‡
deföed
(
__GNUC_MINOR__
)

185 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

187 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

188 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

191 #ñi‡
deföed
(
_MSC_VER
)

192 
	#COMPILER_ID
 "MSVC"

	)

194 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

195 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

196 #i‡
deföed
(
_MSC_FULL_VER
)

197 #i‡
_MSC_VER
 >= 1400

199 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 100000)

	)

202 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 10000)

	)

205 #i‡
deföed
(
_MSC_BUILD
)

206 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
_MSC_BUILD
)

	)

209 #ñi‡
deföed
(
__VISUALDSPVERSION__
Ë|| deföed(
__ADSPBLACKFIN__
Ë|| deföed(
__ADSPTS__
Ë|| deföed(
__ADSP21000__
)

210 
	#COMPILER_ID
 "ADSP"

	)

211 #i‡
deföed
(
__VISUALDSPVERSION__
)

213 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__VISUALDSPVERSION__
>>24)

	)

214 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__VISUALDSPVERSION__
>>16 & 0xFF)

	)

215 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__VISUALDSPVERSION__
>>8 & 0xFF)

	)

218 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
 ) || deföed(
__IAR_SYSTEMS_ICC
)

219 
	#COMPILER_ID
 "IAR"

	)

221 #ñi‡
deföed
(
__ARMCC_VERSION
)

222 
	#COMPILER_ID
 "ARMCC"

	)

223 #i‡
__ARMCC_VERSION
 >= 1000000

225 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/1000000)

	)

226 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 100)

	)

227 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

230 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/100000)

	)

231 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 10)

	)

232 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

236 #ñi‡
deföed
(
SDCC
)

237 
	#COMPILER_ID
 "SDCC"

	)

239 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
SDCC
/100)

	)

240 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
SDCC
/10 % 10)

	)

241 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
SDCC
 % 10)

	)

243 #ñi‡
deföed
(
_SGI_COMPILER_VERSION
Ë|| deföed(
_COMPILER_VERSION
)

244 
	#COMPILER_ID
 "MIPS¥o"

	)

245 #i‡
deföed
(
_SGI_COMPILER_VERSION
)

247 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_SGI_COMPILER_VERSION
/100)

	)

248 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_SGI_COMPILER_VERSION
/10 % 10)

	)

249 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_SGI_COMPILER_VERSION
 % 10)

	)

252 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_COMPILER_VERSION
/100)

	)

253 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_COMPILER_VERSION
/10 % 10)

	)

254 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_COMPILER_VERSION
 % 10)

	)

261 #ñi‡
deföed
(
__sgi
)

262 
	#COMPILER_ID
 "MIPS¥o"

	)

264 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpua
)

265 
	#COMPILER_ID
 "HP"

	)

268 
	#COMPILER_ID
 ""

	)

275 c⁄°* 
	göfo_compûî
 = "INFO" ":" "compûî[" 
COMPILER_ID
 "]";

276 #ifde‡
SIMULATE_ID


277 c⁄°* 
	göfo_simuœã
 = "INFO" ":" "simuœã[" 
SIMULATE_ID
 "]";

280 #ifde‡
__QNXNTO__


281 c⁄°* 
	gqnx¡o
 = "INFO" ":" "qnxnto[]";

284 #i‡
deföed
(
__CRAYXE
Ë|| deföed(
__CRAYXC
)

285 c⁄° *
	göfo_¸ay
 = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";

288 
	#STRINGIFY_HELPER
(
X
Ë#X

	)

289 
	#STRINGIFY
(
X
Ë
	`STRINGIFY_HELPER
(X)

	)

292 #i‡
deföed
(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
löux
)

293 
	#PLATFORM_ID
 "Löux"

	)

295 #ñi‡
deföed
(
__CYGWIN__
)

296 
	#PLATFORM_ID
 "Cygwö"

	)

298 #ñi‡
deföed
(
__MINGW32__
)

299 
	#PLATFORM_ID
 "MöGW"

	)

301 #ñi‡
deföed
(
__APPLE__
)

302 
	#PLATFORM_ID
 "D¨wö"

	)

304 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

305 
	#PLATFORM_ID
 "Wödows"

	)

307 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD
)

308 
	#PLATFORM_ID
 "FªeBSD"

	)

310 #ñi‡
deföed
(
__NëBSD__
Ë|| deföed(
__NëBSD
)

311 
	#PLATFORM_ID
 "NëBSD"

	)

313 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__OPENBSD
)

314 
	#PLATFORM_ID
 "O≥nBSD"

	)

316 #ñi‡
deföed
(
__sun
Ë|| deföed(
sun
)

317 
	#PLATFORM_ID
 "SunOS"

	)

319 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix
Ë|| deföed(
__aix__
)

320 
	#PLATFORM_ID
 "AIX"

	)

322 #ñi‡
deföed
(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI
)

323 
	#PLATFORM_ID
 "IRIX"

	)

325 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

326 
	#PLATFORM_ID
 "HP-UX"

	)

328 #ñi‡
deföed
(
__HAIKU__
)

329 
	#PLATFORM_ID
 "Haiku"

	)

331 #ñi‡
deföed
(
__BeOS
Ë|| deföed(
__BEOS__
Ë|| deföed(
_BEOS
)

332 
	#PLATFORM_ID
 "BeOS"

	)

334 #ñi‡
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)

335 
	#PLATFORM_ID
 "QNX"

	)

337 #ñi‡
deföed
(
__åu64
Ë|| deföed(
_åu64
Ë|| deföed(
__TRU64__
)

338 
	#PLATFORM_ID
 "Tru64"

	)

340 #ñi‡
deföed
(
__riscos
Ë|| deföed(
__riscos__
)

341 
	#PLATFORM_ID
 "RISCos"

	)

343 #ñi‡
deföed
(
__söix
Ë|| deföed(
__söix__
Ë|| deföed(
__SINIX__
)

344 
	#PLATFORM_ID
 "SINIX"

	)

346 #ñi‡
deföed
(
__UNIX_SV__
)

347 
	#PLATFORM_ID
 "UNIX_SV"

	)

349 #ñi‡
deföed
(
__bsdos__
)

350 
	#PLATFORM_ID
 "BSDOS"

	)

352 #ñi‡
deföed
(
_MPRAS
Ë|| deföed(
MPRAS
)

353 
	#PLATFORM_ID
 "MP-RAS"

	)

355 #ñi‡
deföed
(
__osf
Ë|| deföed(
__osf__
)

356 
	#PLATFORM_ID
 "OSF1"

	)

358 #ñi‡
deföed
(
_SCO_SV
Ë|| deföed(
SCO_SV
Ë|| deföed(
sco_sv
)

359 
	#PLATFORM_ID
 "SCO_SV"

	)

361 #ñi‡
deföed
(
__u…rix
Ë|| deföed(
__u…rix__
Ë|| deföed(
_ULTRIX
)

362 
	#PLATFORM_ID
 "ULTRIX"

	)

364 #ñi‡
deföed
(
__XENIX__
Ë|| deföed(
_XENIX
Ë|| deföed(
XENIX
)

365 
	#PLATFORM_ID
 "Xíix"

	)

367 #ñi‡
deföed
(
__WATCOMC__
)

368 #i‡
deföed
(
__LINUX__
)

369 
	#PLATFORM_ID
 "Löux"

	)

371 #ñi‡
deföed
(
__DOS__
)

372 
	#PLATFORM_ID
 "DOS"

	)

374 #ñi‡
deföed
(
__OS2__
)

375 
	#PLATFORM_ID
 "OS2"

	)

377 #ñi‡
deföed
(
__WINDOWS__
)

378 
	#PLATFORM_ID
 "Wödows3x"

	)

381 
	#PLATFORM_ID
 ""

	)

385 
	#PLATFORM_ID
 ""

	)

394 #i‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

395 #i‡
deföed
(
_M_IA64
)

396 
	#ARCHITECTURE_ID
 "IA64"

	)

398 #ñi‡
deföed
(
_M_X64
Ë|| deföed(
_M_AMD64
)

399 
	#ARCHITECTURE_ID
 "x64"

	)

401 #ñi‡
deföed
(
_M_IX86
)

402 
	#ARCHITECTURE_ID
 "X86"

	)

404 #ñi‡
deföed
(
_M_ARM
)

405 #i‡
_M_ARM
 == 4

406 
	#ARCHITECTURE_ID
 "ARMV4I"

	)

407 #ñi‡
_M_ARM
 == 5

408 
	#ARCHITECTURE_ID
 "ARMV5I"

	)

410 
	#ARCHITECTURE_ID
 "ARMV" 
	`STRINGIFY
(
_M_ARM
)

	)

413 #ñi‡
deföed
(
_M_MIPS
)

414 
	#ARCHITECTURE_ID
 "MIPS"

	)

416 #ñi‡
deföed
(
_M_SH
)

417 
	#ARCHITECTURE_ID
 "SHx"

	)

420 
	#ARCHITECTURE_ID
 ""

	)

423 #ñi‡
deföed
(
__WATCOMC__
)

424 #i‡
deföed
(
_M_I86
)

425 
	#ARCHITECTURE_ID
 "I86"

	)

427 #ñi‡
deföed
(
_M_IX86
)

428 
	#ARCHITECTURE_ID
 "X86"

	)

431 
	#ARCHITECTURE_ID
 ""

	)

435 
	#ARCHITECTURE_ID
 ""

	)

439 
	#DEC
(
n
) \

440 ('0' + (((
n
) / 10000000)%10)), \

441 ('0' + (((
n
) / 1000000)%10)), \

442 ('0' + (((
n
) / 100000)%10)), \

443 ('0' + (((
n
) / 10000)%10)), \

444 ('0' + (((
n
) / 1000)%10)), \

445 ('0' + (((
n
) / 100)%10)), \

446 ('0' + (((
n
) / 10)%10)), \

447 ('0' + ((
n
Ë% 10))

	)

450 
	#HEX
(
n
) \

451 ('0' + ((
n
)>>28 & 0xF)), \

452 ('0' + ((
n
)>>24 & 0xF)), \

453 ('0' + ((
n
)>>20 & 0xF)), \

454 ('0' + ((
n
)>>16 & 0xF)), \

455 ('0' + ((
n
)>>12 & 0xF)), \

456 ('0' + ((
n
)>>8 & 0xF)), \

457 ('0' + ((
n
)>>4 & 0xF)), \

458 ('0' + ((
n
Ë& 0xF))

	)

461 #ifde‡
COMPILER_VERSION_MAJOR


462 c⁄° 
	göfo_vîsi⁄
[] = {

465 
COMPILER_VERSION_MAJOR
,

466 #ifde‡
COMPILER_VERSION_MINOR


467 '.', 
COMPILER_VERSION_MINOR
,

468 #ifde‡
COMPILER_VERSION_PATCH


469 '.', 
COMPILER_VERSION_PATCH
,

470 #ifde‡
COMPILER_VERSION_TWEAK


471 '.', 
COMPILER_VERSION_TWEAK
,

479 #ifde‡
SIMULATE_VERSION_MAJOR


480 c⁄° 
	göfo_simuœã_vîsi⁄
[] = {

483 
SIMULATE_VERSION_MAJOR
,

484 #ifde‡
SIMULATE_VERSION_MINOR


485 '.', 
SIMULATE_VERSION_MINOR
,

486 #ifde‡
SIMULATE_VERSION_PATCH


487 '.', 
SIMULATE_VERSION_PATCH
,

488 #ifde‡
SIMULATE_VERSION_TWEAK


489 '.', 
SIMULATE_VERSION_TWEAK
,

500 c⁄°* 
	göfo_∂©f‹m
 = "INFO" ":" "∂©f‹m[" 
PLATFORM_ID
 "]";

501 c⁄°* 
	göfo_¨ch
 = "INFO" ":" "¨ch[" 
ARCHITECTURE_ID
 "]";

506 c⁄° * 
	göfo_œnguage_düÀ˘_deÁu…
 = "INFO" ":" "dialect_default["

507 #i‡!
deföed
(
__STDC_VERSION__
)

509 #ñi‡
__STDC_VERSION__
 >= 201000L

511 #ñi‡
__STDC_VERSION__
 >= 199901L

519 #ifde‡
ID_VOID_MAIN


520 
	$maö
(Ë{
	}
}

522 
	$maö
(
¨gc
, * 
¨gv
[])

524 
ªquúe
 = 0;

525 
ªquúe
 +
öfo_compûî
[
¨gc
];

526 
ªquúe
 +
öfo_∂©f‹m
[
¨gc
];

527 
ªquúe
 +
öfo_¨ch
[
¨gc
];

528 #ifde‡
COMPILER_VERSION_MAJOR


529 
ªquúe
 +
öfo_vîsi⁄
[
¨gc
];

531 #ifde‡
SIMULATE_ID


532 
ªquúe
 +
öfo_simuœã
[
¨gc
];

534 #ifde‡
SIMULATE_VERSION_MAJOR


535 
ªquúe
 +
öfo_simuœã_vîsi⁄
[
¨gc
];

537 #i‡
	`deföed
(
__CRAYXE
Ë|| deföed(
__CRAYXC
)

538 
ªquúe
 +
öfo_¸ay
[
¨gc
];

540 
ªquúe
 +
öfo_œnguage_düÀ˘_deÁu…
[
¨gc
];

541 ()
¨gv
;

542  
ªquúe
;

543 
	}
}

	@host/build/CMakeFiles/feature_tests.c

2 c⁄° 
	g„©uªs
[] = {"\n"

4 #i‡(
__GNUC__
 * 100 + 
__GNUC_MINOR__
) >= 404

11 #i‡(
__GNUC__
 * 100 + 
__GNUC_MINOR__
Ë>404 && 
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

18 #i‡(
__GNUC__
 * 100 + 
__GNUC_MINOR__
Ë>406 && 
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201000L

25 #i‡(
__GNUC__
 * 100 + 
__GNUC_MINOR__
Ë>404 && 
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

34 
	$maö
(
¨gc
, ** 
¨gv
Ë{ (Ôrgv;  
„©uªs
[¨gc]; 
	}
}

	@host/build/include/config.h

18 
	#HAVE_LOG2


	)

21 
	#UHD_VERSION_MAJOR
 3

	)

22 
	#UHD_VERSION_API
 10

	)

23 
	#UHD_VERSION_ABI
 1

	)

24 
	#UHD_VERSION_PATCH
 1

	)

25 
	#ENABLE_USB


	)

26 #i‚de‡
UHD_VERSION


27 
	#UHD_VERSION
 3100101

	)

	@host/cmake/msvc/stdbool.h

18 #i‚de‡
INCLUDED_MSC_STDBOOL_H


19 
	#INCLUDED_MSC_STDBOOL_H


	)

21 #i‚de‡
_MSC_VER


25 #i‚de‡
__˝lu•lus


27 
	#boﬁ
 

	)

28 
	#åue
 1

	)

29 
	#Ál£
 0

	)

	@host/examples/getopt/getopt.c

15 
	~<°dio.h
>

16 
	~<°rög.h
>

18 
	#ERR
(
szz
,
czz
Ëif(
›ãº
){
	`Ârötf
(
°dîr
,"%s%s%c\n",
¨gv
[0],szz,czz);}

	)

20 
	g›ãº
 = 1;

21 
	g›töd
 = 1;

22 
	g›t›t
;

23 *
	g›èrg
;

26 
	$gë›t
(
¨gc
, **
¨gv
, *
›ts
)

28 
•
;

29 
c
;

30 *
˝
;

32 
•
 = 1;

34 i‡(
•
 == 1) {

35 i‡(
›töd
 >
¨gc
 ||

36 
¨gv
[
›töd
][0] != '-' ||árgv[optind][1] == '\0')

37  (
EOF
);

38 i‡(
	`°rcmp
(
¨gv
[
›töd
], "--") == 0) {

39 
›töd
++;

40  (
EOF
);

43 
›t›t
 = 
c
 = 
¨gv
[
›töd
][
•
];

44 i‡(
c
 =':' || (
˝
 = 
	`°rchr
(
›ts
, c)Ë=
NULL
) {

45 
	`ERR
(": iŒegÆ o±i⁄ -- ", 
c
);

46 i‡(
¨gv
[
›töd
][++
•
] == '\0') {

47 
›töd
++;

48 
•
 = 1;

52 i‡(*++
˝
 == ':') {

53 i‡(
¨gv
[
›töd
][
•
 + 1] != '\0')

54 
›èrg
 = &
¨gv
[
›töd
++][
•
 + 1];

55 i‡(++
›töd
 >
¨gc
) {

56 
	`ERR
(": o±i⁄Ñequúe†™árgumíà-- ", 
c
);

57 
•
 = 1;

60 
›èrg
 = 
¨gv
[
›töd
++];

61 
•
 = 1;

63 i‡(
¨gv
[
›töd
][++
•
] == '\0') {

64 
•
 = 1;

65 
›töd
++;

67 
›èrg
 = 
NULL
;

69  (
c
);

70 
	}
}

	@host/examples/getopt/getopt.h

9 #i‚de‡
_GETOPT_H_


10 
	#_GETOPT_H_


	)

12 
›èº
;

13 
›töd
;

14 
›t›t
;

15 * 
›èrg
;

17 
gë›t
(
¨gc
, **
¨gv
, *
›ts
);

	@host/examples/rx_samples_c.c

18 
	~<uhd.h
>

20 
	~"gë›t.h
"

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	#EXECUTE_OR_GOTO
(
œbñ
, ...) \

27 if(
__VA_ARGS__
){ \

28 
ªtu∫_code
 = 
EXIT_FAILURE
; \

29 
œbñ
; \

30 }

	)

32 
	$¥öt_hñp
(){

33 
	`Ârötf
(
°dîr
, "rx_samples_c - A simple RXÉxample using UHD's C API\n\n"

44 
	}
};

46 
	$maö
(
¨gc
, * 
¨gv
[])

48 if(
	`uhd_£t_thªad_¥i‹ôy
(
uhd_deÁu…_thªad_¥i‹ôy
, 
åue
)){

49 
	`Ârötf
(
°dîr
, "UnableÅo setÅhreadÖriority. Continuingányway.\n");

52 
›ti⁄
 = 0;

53 
‰eq
 = 500e6;

54 
øã
 = 1e6;

55 
gaö
 = 5.0;

56 * 
devi˚_¨gs
 = "";

57 
size_t
 
ch™√l
 = 0;

58 * 
fûíame
 = "out.dat";

59 
size_t
 
n_ßm∂es
 = 1000000;

60 
boﬁ
 
vîbo£
 = 
Ál£
;

61 
ªtu∫_code
 = 
EXIT_SUCCESS
;

62 
boﬁ
 
cu°om_fûíame
 = 
Ál£
;

63 
îr‹_°rög
[512];

66 (
›ti⁄
 = 
	`gë›t
(
¨gc
, 
¨gv
, "a:f:r:g:n:o:vh")) != -1){

67 
›ti⁄
){

69 
devi˚_¨gs
 = 
	`°rdup
(
›èrg
);

73 
‰eq
 = 
	`©of
(
›èrg
);

77 
øã
 = 
	`©of
(
›èrg
);

81 
gaö
 = 
	`©of
(
›èrg
);

85 
n_ßm∂es
 = 
	`©oi
(
›èrg
);

89 
fûíame
 = 
	`°rdup
(
›èrg
);

90 
cu°om_fûíame
 = 
åue
;

94 
vîbo£
 = 
åue
;

98 
	`¥öt_hñp
();

99 
‰ì_›ti⁄_°rögs
;

102 
	`¥öt_hñp
();

103 
ªtu∫_code
 = 
EXIT_FAILURE
;

104 
‰ì_›ti⁄_°rögs
;

109 
uhd_u§p_h™dÀ
 
u§p
;

110 
	`Ârötf
(
°dîr
, "Cª©ög USRP wôhárg†\"%s\"...\n", 
devi˚_¨gs
);

111 
	`EXECUTE_OR_GOTO
(
‰ì_›ti⁄_°rögs
,

112 
	`uhd_u§p_make
(&
u§p
, 
devi˚_¨gs
)

116 
uhd_rx_°ªamî_h™dÀ
 
rx_°ªamî
;

117 
	`EXECUTE_OR_GOTO
(
‰ì_u§p
,

118 
	`uhd_rx_°ªamî_make
(&
rx_°ªamî
)

122 
uhd_rx_mëad©a_h™dÀ
 
md
;

123 
	`EXECUTE_OR_GOTO
(
‰ì_rx_°ªamî
,

124 
	`uhd_rx_mëad©a_make
(&
md
)

128 
uhd_tu√_ªque°_t
 
tu√_ªque°
 = {

129 .
èrgë_‰eq
 = 
‰eq
,

130 .
rf_‰eq_pﬁicy
 = 
UHD_TUNE_REQUEST_POLICY_AUTO
,

131 .
d•_‰eq_pﬁicy
 = 
UHD_TUNE_REQUEST_POLICY_AUTO
,

133 
uhd_tu√_ªsu…_t
 
tu√_ªsu…
;

135 
uhd_°ªam_¨gs_t
 
°ªam_¨gs
 = {

136 .
˝u_f‹m©
 = "fc32",

137 .
Ÿw_f‹m©
 = "sc16",

138 .
¨gs
 = "",

139 .
ch™√l_li°
 = &
ch™√l
,

140 .
n_ch™√ls
 = 1

143 
uhd_°ªam_cmd_t
 
°ªam_cmd
 = {

144 .
°ªam_mode
 = 
UHD_STREAM_MODE_NUM_SAMPS_AND_DONE
,

145 .
num_ßmps
 = 
n_ßm∂es
,

146 .
°ªam_now
 = 
åue


149 
size_t
 
ßmps_≥r_buff
;

150 *
buff
 = 
NULL
;

151 **
buffs_±r
 = 
NULL
;

152 
FILE
 *
Â
 = 
NULL
;

153 
size_t
 
num_acc_ßmps
 = 0;

156 
	`Ârötf
(
°dîr
, "Sëtög RX R©e: %f...\n", 
øã
);

157 
	`EXECUTE_OR_GOTO
(
‰ì_rx_mëad©a
,

158 
	`uhd_u§p_£t_rx_øã
(
u§p
, 
øã
, 
ch™√l
)

162 
	`EXECUTE_OR_GOTO
(
‰ì_rx_mëad©a
,

163 
	`uhd_u§p_gë_rx_øã
(
u§p
, 
ch™√l
, &
øã
)

165 
	`Ârötf
(
°dîr
, "A˘uÆ RX R©e: %f...\n", 
øã
);

168 
	`Ârötf
(
°dîr
, "Sëtög RX Gaö: %‡dB...\n", 
gaö
);

169 
	`EXECUTE_OR_GOTO
(
‰ì_rx_mëad©a
,

170 
	`uhd_u§p_£t_rx_gaö
(
u§p
, 
gaö
, 
ch™√l
, "")

174 
	`EXECUTE_OR_GOTO
(
‰ì_rx_mëad©a
,

175 
	`uhd_u§p_gë_rx_gaö
(
u§p
, 
ch™√l
, "", &
gaö
)

177 
	`Ârötf
(
°dîr
, "A˘uÆ RX Gaö: %f...\n", 
gaö
);

180 
	`Ârötf
(
°dîr
, "Sëtög RX fªquícy: %‡MHz...\n", 
‰eq
/1e6);

181 
	`EXECUTE_OR_GOTO
(
‰ì_rx_mëad©a
,

182 
	`uhd_u§p_£t_rx_‰eq
(
u§p
, &
tu√_ªque°
, 
ch™√l
, &
tu√_ªsu…
)

186 
	`EXECUTE_OR_GOTO
(
‰ì_rx_mëad©a
,

187 
	`uhd_u§p_gë_rx_‰eq
(
u§p
, 
ch™√l
, &
‰eq
)

189 
	`Ârötf
(
°dîr
, "A˘uÆ RX fªquícy: %‡MHz...\n", 
‰eq
 / 1e6);

192 
°ªam_¨gs
.
ch™√l_li°
 = &
ch™√l
;

193 
	`EXECUTE_OR_GOTO
(
‰ì_rx_°ªamî
,

194 
	`uhd_u§p_gë_rx_°ªam
(
u§p
, &
°ªam_¨gs
, 
rx_°ªamî
)

198 
	`EXECUTE_OR_GOTO
(
‰ì_rx_°ªamî
,

199 
	`uhd_rx_°ªamî_max_num_ßmps
(
rx_°ªamî
, &
ßmps_≥r_buff
)

201 
	`Ârötf
(
°dîr
, "Buf„∏sizêö sam∂es: %zu\n", 
ßmps_≥r_buff
);

202 
buff
 = 
	`mÆloc
(
ßmps_≥r_buff
 * 2 * ());

203 
buffs_±r
 = (**)&
buff
;

206 
	`Ârötf
(
°dîr
, "Issuing stream command.\n");

207 
	`EXECUTE_OR_GOTO
(
‰ì_buf„r
,

208 
	`uhd_rx_°ªamî_issue_°ªam_cmd
(
rx_°ªamî
, &
°ªam_cmd
)

212 
Â
 = 
	`f›í
(
fûíame
, "wb");

215 
num_acc_ßmps
 < 
n_ßm∂es
) {

216 
size_t
 
num_rx_ßmps
 = 0;

217 
	`EXECUTE_OR_GOTO
(
˛o£_fûe
,

218 
	`uhd_rx_°ªamî_ªcv
(
rx_°ªamî
, 
buffs_±r
, 
ßmps_≥r_buff
, &
md
, 3.0, 
Ál£
, &
num_rx_ßmps
)

221 
uhd_rx_mëad©a_îr‹_code_t
 
îr‹_code
;

222 
	`EXECUTE_OR_GOTO
(
˛o£_fûe
,

223 
	`uhd_rx_mëad©a_îr‹_code
(
md
, &
îr‹_code
)

225 if(
îr‹_code
 !
UHD_RX_METADATA_ERROR_CODE_NONE
){

226 
	`Ârötf
(
°dîr
, "Eº‹ codê0x%x wa†ªtu∫ed durög såómög. Ab‹tög.\n", 
ªtu∫_code
);

227 
˛o£_fûe
;

231 
	`fwrôe
(
buff
, (Ë* 2, 
num_rx_ßmps
, 
Â
);

232 i‡(
vîbo£
) {

233 
time_t
 
fuŒ_£cs
;

234 
‰ac_£cs
;

235 
	`uhd_rx_mëad©a_time_•ec
(
md
, &
fuŒ_£cs
, &
‰ac_£cs
);

236 
	`Ârötf
(
°dîr
, "ReceivedÖacket: %zu samples, %.f full secs, %f frac secs\n",

237 
num_rx_ßmps
,

238 
	`dif·ime
(
fuŒ_£cs
, (
time_t
) 0),

239 
‰ac_£cs
);

242 
num_acc_ßmps
 +
num_rx_ßmps
;

246 
˛o£_fûe
:

247 
	`f˛o£
(
Â
);

249 
‰ì_buf„r
:

250 if(
buff
){

251 if(
vîbo£
){

252 
	`Ârötf
(
°dîr
, "Freeing buffer.\n");

254 
	`‰ì
(
buff
);

256 
buff
 = 
NULL
;

257 
buffs_±r
 = 
NULL
;

259 
‰ì_rx_°ªamî
:

260 if(
vîbo£
){

261 
	`Ârötf
(
°dîr
, "Cleaning up RX streamer.\n");

263 
	`uhd_rx_°ªamî_‰ì
(&
rx_°ªamî
);

265 
‰ì_rx_mëad©a
:

266 if(
vîbo£
){

267 
	`Ârötf
(
°dîr
, "Cleaning up RX metadata.\n");

269 
	`uhd_rx_mëad©a_‰ì
(&
md
);

271 
‰ì_u§p
:

272 if(
vîbo£
){

273 
	`Ârötf
(
°dîr
, "Cleaning up USRP.\n");

275 if(
ªtu∫_code
 !
EXIT_SUCCESS
 && 
u§p
 !
NULL
){

276 
	`uhd_u§p_œ°_îr‹
(
u§p
, 
îr‹_°rög
, 512);

277 
	`Ârötf
(
°dîr
, "USRPÑï‹ãdÅhêfﬁlowögÉº‹: %s\n", 
îr‹_°rög
);

279 
	`uhd_u§p_‰ì
(&
u§p
);

281 
‰ì_›ti⁄_°rögs
:

282 if(
	`°rcmp
(
devi˚_¨gs
,"")){

283 
	`‰ì
(
devi˚_¨gs
);

285 if(
cu°om_fûíame
){

286 
	`‰ì
(
fûíame
);

289 
	`Ârötf
(
°dîr
, (
ªtu∫_code
 ? "Failure\n" : "Success\n"));

290  
ªtu∫_code
;

291 
	}
}

	@host/examples/tx_samples_c.c

18 
	~<uhd.h
>

20 
	~"gë›t.h
"

22 
	~<m©h.h
>

23 
	~<sig«l.h
>

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

29 
	#EXECUTE_OR_GOTO
(
œbñ
, ...) \

30 if(
__VA_ARGS__
){ \

31 
ªtu∫_code
 = 
EXIT_FAILURE
; \

32 
œbñ
; \

33 }

	)

35 
	$¥öt_hñp
(){

36 
	`Ârötf
(
°dîr
, "tx_samples_c - A simple TXÉxample using UHD's C API\n\n"

46 
	}
}

48 
boﬁ
 
	g°›_sig«l_ˇŒed
 = 
Ál£
;

50 
	$sigöt_h™dÀr
(
code
){

51 ()
code
;

52 
°›_sig«l_ˇŒed
 = 
åue
;

53 
	}
}

55 
	$maö
(
¨gc
, * 
¨gv
[]){

56 
›ti⁄
 = 0;

57 
‰eq
 = 2e9;

58 
øã
 = 1e6;

59 
gaö
 = 0;

60 * 
devi˚_¨gs
;

61 
size_t
 
ch™√l
 = 0;

62 
uöt64_t
 
tŸÆ_num_ßmps
 = 0;

63 
boﬁ
 
vîbo£
 = 
Ál£
;

64 
ªtu∫_code
 = 
EXIT_SUCCESS
;

65 
îr‹_°rög
[512];

68 (
›ti⁄
 = 
	`gë›t
(
¨gc
, 
¨gv
, "a:f:r:g:n:vh")) != -1){

69 
›ti⁄
){

71 
devi˚_¨gs
 = 
	`°rdup
(
›èrg
);

75 
‰eq
 = 
	`©of
(
›èrg
);

79 
øã
 = 
	`©of
(
›èrg
);

83 
gaö
 = 
	`©of
(
›èrg
);

87 
tŸÆ_num_ßmps
 = 
	`©ﬁl
(
›èrg
);

91 
vîbo£
 = 
åue
;

95 
	`¥öt_hñp
();

96 
‰ì_›ti⁄_°rögs
;

99 
	`¥öt_hñp
();

100 
ªtu∫_code
 = 
EXIT_FAILURE
;

101 
‰ì_›ti⁄_°rögs
;

105 if(
	`uhd_£t_thªad_¥i‹ôy
(
uhd_deÁu…_thªad_¥i‹ôy
, 
åue
)){

106 
	`Ârötf
(
°dîr
, "UnableÅo setÅhreadÖriority. Continuingányway.\n");

109 i‡(
devi˚_¨gs
 =
NULL
){

110 
devi˚_¨gs
 = "";

113 
uhd_u§p_h™dÀ
 
u§p
;

114 
	`Ârötf
(
°dîr
, "Cª©ög USRP wôhárg†\"%s\"...\n", 
devi˚_¨gs
);

115 
	`EXECUTE_OR_GOTO
(
‰ì_›ti⁄_°rögs
,

116 
	`uhd_u§p_make
(&
u§p
, 
devi˚_¨gs
)

120 
uhd_tx_°ªamî_h™dÀ
 
tx_°ªamî
;

121 
	`EXECUTE_OR_GOTO
(
‰ì_u§p
,

122 
	`uhd_tx_°ªamî_make
(&
tx_°ªamî
)

126 
uhd_tx_mëad©a_h™dÀ
 
md
;

127 
	`EXECUTE_OR_GOTO
(
‰ì_tx_°ªamî
,

128 
	`uhd_tx_mëad©a_make
(&
md
, 
Ál£
, 0.0, 0.1, 
åue
, false)

132 
uhd_tu√_ªque°_t
 
tu√_ªque°
 = {

133 .
èrgë_‰eq
 = 
‰eq
,

134 .
rf_‰eq_pﬁicy
 = 
UHD_TUNE_REQUEST_POLICY_AUTO
,

135 .
d•_‰eq_pﬁicy
 = 
UHD_TUNE_REQUEST_POLICY_AUTO


137 
uhd_tu√_ªsu…_t
 
tu√_ªsu…
;

139 
uhd_°ªam_¨gs_t
 
°ªam_¨gs
 = {

140 .
˝u_f‹m©
 = "fc32",

141 .
Ÿw_f‹m©
 = "sc16",

142 .
¨gs
 = "",

143 .
ch™√l_li°
 = &
ch™√l
,

144 .
n_ch™√ls
 = 1

147 
size_t
 
ßmps_≥r_buff
;

148 * 
buff
 = 
NULL
;

149 c⁄° ** 
buffs_±r
 = 
NULL
;

152 
	`Ârötf
(
°dîr
, "Sëtög TX R©e: %f...\n", 
øã
);

153 
	`EXECUTE_OR_GOTO
(
‰ì_tx_mëad©a
,

154 
	`uhd_u§p_£t_tx_øã
(
u§p
, 
øã
, 
ch™√l
)

158 
	`EXECUTE_OR_GOTO
(
‰ì_tx_mëad©a
,

159 
	`uhd_u§p_gë_tx_øã
(
u§p
, 
ch™√l
, &
øã
)

161 
	`Ârötf
(
°dîr
, "A˘uÆ TX R©e: %f...\n\n", 
øã
);

164 
	`Ârötf
(
°dîr
, "Sëtög TX Gaö: %‡db...\n", 
gaö
);

165 
	`EXECUTE_OR_GOTO
(
‰ì_tx_mëad©a
,

166 
	`uhd_u§p_£t_tx_gaö
(
u§p
, 
gaö
, 0, "")

170 
	`EXECUTE_OR_GOTO
(
‰ì_tx_mëad©a
,

171 
	`uhd_u§p_gë_tx_gaö
(
u§p
, 
ch™√l
, "", &
gaö
)

173 
	`Ârötf
(
°dîr
, "A˘uÆ TX Gaö: %f...\n", 
gaö
);

176 
	`Ârötf
(
°dîr
, "Sëtög TX fªquícy: %‡MHz...\n", 
‰eq
 / 1e6);

177 
	`EXECUTE_OR_GOTO
(
‰ì_tx_mëad©a
,

178 
	`uhd_u§p_£t_tx_‰eq
(
u§p
, &
tu√_ªque°
, 
ch™√l
, &
tu√_ªsu…
)

182 
	`EXECUTE_OR_GOTO
(
‰ì_tx_mëad©a
,

183 
	`uhd_u§p_gë_tx_‰eq
(
u§p
, 
ch™√l
, &
‰eq
)

185 
	`Ârötf
(
°dîr
, "A˘uÆ TX fªquícy: %‡MHz...\n", 
‰eq
 / 1e6);

188 
°ªam_¨gs
.
ch™√l_li°
 = &
ch™√l
;

189 
	`EXECUTE_OR_GOTO
(
‰ì_tx_°ªamî
,

190 
	`uhd_u§p_gë_tx_°ªam
(
u§p
, &
°ªam_¨gs
, 
tx_°ªamî
)

194 
	`EXECUTE_OR_GOTO
(
‰ì_tx_°ªamî
,

195 
	`uhd_tx_°ªamî_max_num_ßmps
(
tx_°ªamî
, &
ßmps_≥r_buff
)

197 
	`Ârötf
(
°dîr
, "Buf„∏sizêö sam∂es: %zu\n", 
ßmps_≥r_buff
);

198 
buff
 = 
	`mÆloc
(
ßmps_≥r_buff
 * 2 * ());

199 
buffs_±r
 = (c⁄° **)&
buff
;

200 
size_t
 
i
 = 0;

201 
i
 = 0; i < (
ßmps_≥r_buff
*2); i+=2){

202 
buff
[
i
] = 0.1f;

203 
buff
[
i
+1] = 0;

207 
	`sig«l
(
SIGINT
, &
sigöt_h™dÀr
);

208 
	`Ârötf
(
°dîr
, "Press Ctrl+CÅo stop streaming...\n");

211 
uöt64_t
 
num_acc_ßmps
 = 0;

212 
size_t
 
num_ßmps_£¡
 = 0;

215 i‡(
°›_sig«l_ˇŒed
) ;

216 i‡(
tŸÆ_num_ßmps
 > 0 && 
num_acc_ßmps
 >=Åotal_num_samps) ;

218 
	`EXECUTE_OR_GOTO
(
‰ì_tx_°ªamî
,

219 
	`uhd_tx_°ªamî_£nd
(
tx_°ªamî
, 
buffs_±r
, 
ßmps_≥r_buff
, &
md
, 0.1, &
num_ßmps_£¡
)

222 
num_acc_ßmps
 +
num_ßmps_£¡
;

224 if(
vîbo£
){

225 
	`Ârötf
(
°dîr
, "Síà%zu sam∂es\n", 
num_ßmps_£¡
);

229 
‰ì_tx_°ªamî
:

230 if(
vîbo£
){

231 
	`Ârötf
(
°dîr
, "Cleaning up TX streamer.\n");

233 
	`uhd_tx_°ªamî_‰ì
(&
tx_°ªamî
);

235 
‰ì_tx_mëad©a
:

236 if(
vîbo£
){

237 
	`Ârötf
(
°dîr
, "Cleaning up TX metadata.\n");

239 
	`uhd_tx_mëad©a_‰ì
(&
md
);

241 
‰ì_u§p
:

242 if(
vîbo£
){

243 
	`Ârötf
(
°dîr
, "Cleaning up USRP.\n");

245 if(
ªtu∫_code
 !
EXIT_SUCCESS
 && 
u§p
 !
NULL
){

246 
	`uhd_u§p_œ°_îr‹
(
u§p
, 
îr‹_°rög
, 512);

247 
	`Ârötf
(
°dîr
, "USRPÑï‹ãdÅhêfﬁlowögÉº‹: %s\n", 
îr‹_°rög
);

249 
	`uhd_u§p_‰ì
(&
u§p
);

251 
‰ì_›ti⁄_°rögs
:

252 if(
devi˚_¨gs
 !
NULL
){

253 
	`‰ì
(
devi˚_¨gs
);

256 
	`Ârötf
(
°dîr
, (
ªtu∫_code
 ? "Failure\n" : "Success\n"));

258  
ªtu∫_code
;

259 
	}
}

	@host/include/uhd.h

18 #i‚de‡
INCLUDED_UHD_H


19 
	#INCLUDED_UHD_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 
	~<uhd/ty≥s/mëad©a.h
>

25 
	~<uhd/ty≥s/ønges.h
>

26 
	~<uhd/ty≥s/£ns‹s.h
>

27 
	~<uhd/ty≥s/°rög_ve˘‹.h
>

28 
	~<uhd/ty≥s/tu√_ªque°.h
>

29 
	~<uhd/ty≥s/tu√_ªsu….h
>

30 
	~<uhd/ty≥s/u§p_öfo.h
>

32 
	~<uhd/u§p/dbﬂrd_ì¥om.h
>

33 
	~<uhd/u§p/mbﬂrd_ì¥om.h
>

34 
	~<uhd/u§p/subdev_•ec.h
>

35 
	~<uhd/u§p/u§p.h
>

37 
	~<uhd/u§p_˛ock/u§p_˛ock.h
>

39 
	~<uhd/utûs/thªad_¥i‹ôy.h
>

	@host/include/uhd/config.h

18 #i‚de‡
INCLUDED_UHD_CONFIG_H


19 
	#INCLUDED_UHD_CONFIG_H


	)

21 #ifde‡
_MSC_VER


23 
	~<iso646.h
>

26 
	~<°ddef.h
>

27 
±rdiff_t
 
	tssize_t
;

32 #i‡
deföed
(
_MSC_VER
)

33 
	#UHD_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

34 
	#UHD_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

35 
	#UHD_INLINE
 
__f‹˚ölöe


	)

36 
	#UHD_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

37 
	#UHD_ALIGNED
(
x
Ë
	`__de˛•ec
(
	`Æign
(x))

	)

38 
	#UHD_UNUSED
(
x
Ë
	)
x

39 #ñi‡
deföed
(
__MINGW32__
)

40 
	#UHD_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

41 
	#UHD_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

42 
	#UHD_INLINE
 
ölöe


	)

43 
	#UHD_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

44 
	#UHD_ALIGNED
(
x
Ë
	`__de˛•ec
(
	`Æign
(x))

	)

45 
	#UHD_UNUSED
(
x
Ëx 
	`__©åibuã__
((
unu£d
))

	)

46 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

47 
	#UHD_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

48 
	#UHD_IMPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

49 
	#UHD_INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

50 
	#UHD_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

51 
	#UHD_ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

52 
	#UHD_UNUSED
(
x
Ëx 
	`__©åibuã__
((
unu£d
))

	)

53 #ñi‡
deföed
(
__˛™g__
)

54 
	#UHD_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

55 
	#UHD_IMPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

56 
	#UHD_INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

57 
	#UHD_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

58 
	#UHD_ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

59 
	#UHD_UNUSED
(
x
Ëx 
	`__©åibuã__
((
unu£d
))

	)

61 
	#UHD_EXPORT


	)

62 
	#UHD_IMPORT


	)

63 
	#UHD_INLINE
 
ölöe


	)

64 
	#UHD_DEPRECATED


	)

65 
	#UHD_ALIGNED
(
x
)

	)

66 
	#UHD_UNUSED
(
x
Ë
	)
x

70 #ifde‡
UHD_DLL_EXPORTS


71 
	#UHD_API
 
UHD_EXPORT


	)

73 
	#UHD_API
 
UHD_IMPORT


	)

79 #i‡(
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
__GLIBC__
)Ë&& !deföed(
_CRAYC
Ë&& !deföed(
__FªeBSD_kî√l__
Ë&& !deföed(
__GNU__
)

80 
	#UHD_PLATFORM_LINUX


	)

81 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

82 
	#UHD_PLATFORM_WIN32


	)

83 #ñi‡
deföed
(
macötosh
Ë|| deföed(
__APPLE__
Ë|| deföed(
__APPLE_CC__
)

84 
	#UHD_PLATFORM_MACOS


	)

85 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
__FªeBSD_kî√l__
)

86 
	#UHD_PLATFORM_BSD


	)

	@host/include/uhd/error.h

18 #i‚de‡
INCLUDED_UHD_ERROR_H


19 
	#INCLUDED_UHD_ERROR_H


	)

21 
	~<°dlib.h
>

34 
	mUHD_ERROR_NONE
 = 0,

36 
	mUHD_ERROR_INVALID_DEVICE
 = 1,

39 
	mUHD_ERROR_INDEX
 = 10,

41 
	mUHD_ERROR_KEY
 = 11,

44 
	mUHD_ERROR_NOT_IMPLEMENTED
 = 20,

46 
	mUHD_ERROR_USB
 = 21,

49 
	mUHD_ERROR_IO
 = 30,

51 
	mUHD_ERROR_OS
 = 31,

54 
	mUHD_ERROR_ASSERTION
 = 40,

56 
	mUHD_ERROR_LOOKUP
 = 41,

58 
	mUHD_ERROR_TYPE
 = 42,

60 
	mUHD_ERROR_VALUE
 = 43,

62 
	mUHD_ERROR_RUNTIME
 = 44,

64 
	mUHD_ERROR_ENVIRONMENT
 = 45,

66 
	mUHD_ERROR_SYSTEM
 = 46,

68 
	mUHD_ERROR_EXCEPT
 = 47,

71 
	mUHD_ERROR_BOOSTEXCEPT
 = 60,

74 
	mUHD_ERROR_STDEXCEPT
 = 70,

77 
	mUHD_ERROR_UNKNOWN
 = 100

78 } 
	tuhd_îr‹
;

80 #ifde‡
__˝lu•lus


81 
	~<uhd/c⁄fig.hµ
>

82 
	~<uhd/ex˚±i⁄.hµ
>

84 
	~<boo°/ex˚±i⁄/dügno°ic_öf‹m©i⁄.hµ
>

86 
	~<°rög
>

88 
UHD_API
 
uhd_îr‹
 
îr‹_‰om_uhd_ex˚±i⁄
(c⁄° 
uhd
::
ex˚±i⁄
* 
e
);

90 
UHD_API
 c⁄° 
	g°d
::
°rög
& 
gë_c_globÆ_îr‹_°rög
();

92 
UHD_API
 
£t_c_globÆ_îr‹_°rög
(c⁄° 
°d
::
°rög
 &
msg
);

99 
	#UHD_SAFE_C
(...) \

100 
åy
{ 
__VA_ARGS__
 } \

101 
	`ˇtch
 (c⁄° 
uhd
::
ex˚±i⁄
 &
e
) { \

102 
	`£t_c_globÆ_îr‹_°rög
(
e
.
	`wh©
()); \

103  
	`îr‹_‰om_uhd_ex˚±i⁄
(&
e
); \

105 
	`ˇtch
 (c⁄° 
boo°
::
ex˚±i⁄
 &
e
) { \

106 
	`£t_c_globÆ_îr‹_°rög
(
boo°
::
	`dügno°ic_öf‹m©i⁄
(
e
)); \

107  
UHD_ERROR_BOOSTEXCEPT
; \

109 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
 &
e
) { \

110 
	`£t_c_globÆ_îr‹_°rög
(
e
.
	`wh©
()); \

111  
UHD_ERROR_STDEXCEPT
; \

113 
	`ˇtch
 (...) { \

114 
	`£t_c_globÆ_îr‹_°rög
("UnrecognizedÉxception caught."); \

115  
UHD_ERROR_UNKNOWN
; \

117 
	`£t_c_globÆ_îr‹_°rög
("None"); \

118  
UHD_ERROR_NONE
;

	)

125 
	#UHD_SAFE_C_SAVE_ERROR
(
h
, ...) \

126 
h
->
œ°_îr‹
.
	`˛ór
(); \

127 
åy
{ 
__VA_ARGS__
 } \

128 
	`ˇtch
 (c⁄° 
uhd
::
ex˚±i⁄
 &
e
) { \

129 
	`£t_c_globÆ_îr‹_°rög
(
e
.
	`wh©
()); \

130 
h
->
œ°_îr‹
 = 
e
.
	`wh©
(); \

131  
	`îr‹_‰om_uhd_ex˚±i⁄
(&
e
); \

133 
	`ˇtch
 (c⁄° 
boo°
::
ex˚±i⁄
 &
e
) { \

134 
	`£t_c_globÆ_îr‹_°rög
(
boo°
::
	`dügno°ic_öf‹m©i⁄
(
e
)); \

135 
h
->
œ°_îr‹
 = 
boo°
::
	`dügno°ic_öf‹m©i⁄
(
e
); \

136  
UHD_ERROR_BOOSTEXCEPT
; \

138 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
 &
e
) { \

139 
	`£t_c_globÆ_îr‹_°rög
(
e
.
	`wh©
()); \

140 
h
->
œ°_îr‹
 = 
e
.
	`wh©
(); \

141  
UHD_ERROR_STDEXCEPT
; \

143 
	`ˇtch
 (...) { \

144 
	`£t_c_globÆ_îr‹_°rög
("UnrecognizedÉxception caught."); \

145 
h
->
œ°_îr‹
 = "UnrecognizedÉxception caught."; \

146  
UHD_ERROR_UNKNOWN
; \

148 
h
->
œ°_îr‹
 = "None"; \

149 
	`£t_c_globÆ_îr‹_°rög
("None"); \

150  
UHD_ERROR_NONE
;

	)

161 
UHD_API
 
uhd_îr‹
 
uhd_gë_œ°_îr‹
(

162 * 
îr‹_out
,

163 
size_t
 
°rbuf„r_Àn


165 #ifde‡
__˝lu•lus


	@host/include/uhd/transport/nirio/nifpga_lvbitx.h

18 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIFPGA_LVBITX_H


19 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIFPGA_LVBITX_H


	)

21 
	~<uhd/å™•‹t/núio/núio_ªsour˚_m™agî.h
>

22 
	~<uhd/å™•‹t/núio/núiok_¥oxy.h
>

23 
	~<boo°/sm¨t_±r.hµ
>

25 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io
 {

27 ˛as†
	cUHD_API
 
	gniÂga_lvbôx
 {

28 
	gpublic
:

29 
boo°
::
	tsh¨ed_±r
<
	tniÂga_lvbôx
> 
	t•å
;

31 
	gvútuÆ
 ~
niÂga_lvbôx
() {};

33 
vútuÆ
 c⁄° * 
gë_bôfûe_∑th
() = 0;

34 
vútuÆ
 c⁄° * 
gë_sig«tuª
() = 0;

35 
vútuÆ
 c⁄° * 
gë_bô°ªam_checksum
() = 0;

37 
vútuÆ
 
size_t
 
gë_öput_fifo_cou¡
() = 0;

38 
vútuÆ
 c⁄° ** 
gë_öput_fifo_«mes
() = 0;

40 
vútuÆ
 
size_t
 
gë_ouçut_fifo_cou¡
() = 0;

41 
vútuÆ
 c⁄° ** 
gë_ouçut_fifo_«mes
() = 0;

43 
vútuÆ
 
size_t
 
gë_c⁄åﬁ_cou¡
() = 0;

44 
vútuÆ
 c⁄° ** 
gë_c⁄åﬁ_«mes
() = 0;

46 
vútuÆ
 
size_t
 
gë_ödiˇt‹_cou¡
() = 0;

47 
vútuÆ
 c⁄° ** 
gë_ödiˇt‹_«mes
() = 0;

49 
vútuÆ
 
öô_ªgi°î_öfo
(
núio_ªgi°î_öfo_vå
& 
vå
) = 0;

50 
vútuÆ
 
öô_fifo_öfo
(
núio_fifo_öfo_vå
& 
vå
) = 0;

52 
	g¥Ÿe˘ed
:

53 
°d
::
°rög
 
_gë_bô°ªam_checksum
(c⁄° std::°rög& 
fûe_∑th
);

	@host/include/uhd/transport/nirio/nirio_driver_iface.h

18 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_DRIVER_IFACE_H


19 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_DRIVER_IFACE_H


	)

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~<°rög
>

24 
	~<uhd/å™•‹t/núio/°©us.h
>

25 
	~<uhd/c⁄fig.hµ
>

26 #i‡
deföed
(
UHD_PLATFORM_WIN32
)

27 
	~<wödows.h
>

28 #ifde‡
_MSC_VER


29 #¥agm®
w¨nög
(
dißbÀ
:4201)

31 
	~<wöio˘l.h
>

32 #ifde‡
_MSC_VER


33 #¥agm®
w¨nög
(:4201)

35 #ñi‡
deföed
(
UHD_PLATFORM_MACOS
)

36 
	~<IOKô/IOKôLib.h
>

37 #ñi‡
deföed
(
UHD_PLATFORM_LINUX
)

38 
	~<löux/io˘l.h
>

41 #i‡
__GNUC__


42 
uöt64_t
 
	tÆig√d_uöt64_t
 
	t__©åibuã__
 ((
	tÆig√d
(8)));

44 
uöt64_t
 
	tÆig√d_uöt64_t
;

49 #i‡
deföed
(
UHD_PLATFORM_WIN32
)

51 
	#IOCTL_ACCESS_ANY
 (
FILE_ANY_ACCESS
)

	)

52 
	#IOCTL_ACCESS_READ
 (
FILE_READ_ACCESS
)

	)

53 
	#IOCTL_ACCESS_WRITE
 (
FILE_WRITE_ACCESS
)

	)

54 
	#IOCTL_ACCESS_RW
 (
FILE_READ_ACCESS
 | 
FILE_WRITE_ACCESS
)

	)

56 
	#IOCTL
(
ty≥
, 
fun˘i⁄
, 
ac˚ss
) \

57 
	`CTL_CODE
((0x8000+
ty≥
), (0x800+
fun˘i⁄
), 
METHOD_BUFFERED
, 
ac˚ss
)

	)

59 #ñi‡
deföed
(
UHD_PLATFORM_MACOS
)

61 
	#IOCTL_ACCESS_ANY
 (0U)

	)

62 
	#IOCTL_ACCESS_READ
 (1U)

	)

63 
	#IOCTL_ACCESS_WRITE
 (2U)

	)

64 
	#IOCTL_ACCESS_RW
 (3U)

	)

66 
	#IOCTL
(
ty≥
, 
fun˘i⁄
, 
ac˚ss
) \

67 (((
ac˚ss
 & 0x0003) << 30) | \

68 ((
ty≥
 & 0x00FF) << 16) | \

69 ((
fun˘i⁄
 & 0xFFFFË<< 0))

	)

71 #ñi‡
deföed
(
UHD_PLATFORM_LINUX
)

73 
	#IOCTL_ACCESS_ANY
 (
_IOC_NONE
)

	)

74 
	#IOCTL_ACCESS_READ
 (
_IOC_READ
)

	)

75 
	#IOCTL_ACCESS_WRITE
 (
_IOC_WRITE
)

	)

76 
	#IOCTL_ACCESS_RW
 (
_IOC_READ
 | 
_IOC_WRITE
)

	)

78 
	snúio_io˘l_block_t
 {

79 
Æig√d_uöt64_t
 
	mö_buf
;

80 
Æig√d_uöt64_t
 
	mout_buf
;

81 
uöt32_t
 
	mö_buf_Àn
;

82 
uöt32_t
 
	mout_buf_Àn
;

83 
uöt32_t
 
	mbyãs_ªtu∫ed
;

84 
uöt32_t
 
	m∑ddög
;

87 
	#IOCTL
(
ty≥
, 
fun˘i⁄
, 
ac˚ss
) \

88 
	`_IOC
(
ac˚ss
, 
ty≥
, 
fun˘i⁄
, (
núio_io˘l_block_t
))

	)

92 
	#IOCTL_ACCESS_ANY
 (0U)

	)

93 
	#IOCTL_ACCESS_READ
 (1U)

	)

94 
	#IOCTL_ACCESS_WRITE
 (2U)

	)

95 
	#IOCTL_ACCESS_RW
 (3U)

	)

97 
	#IOCTL
(
ty≥
, 
fun˘i⁄
, 
ac˚ss
) \

98 (((
ac˚ss
 & 0x0003) << 30) | \

99 ((
ty≥
 & 0x00FF) << 16) | \

100 ((
fun˘i⁄
 & 0xFFFFË<< 0))

	)

104 
«me•a˚
 
	gnúio_drivî_iÁ˚
 {

107 #i‡
deföed
(
UHD_PLATFORM_LINUX
)

108 
	trio_dev_h™dÀ_t
;

109 #ñi‡
deföed
(
UHD_PLATFORM_WIN32
)

110 
HANDLE
 
	trio_dev_h™dÀ_t
;

111 #ñi‡
deföed
(
UHD_PLATFORM_MACOS
)

112 
io_c⁄√˘_t
 
	trio_dev_h™dÀ_t
;

114 
	trio_dev_h™dÀ_t
;

116 c⁄° 
rio_dev_h™dÀ_t
 
	gINVALID_RIO_HANDLE
 = ((rio_dev_handle_t)-1);

119 #i‡
deföed
(
UHD_PLATFORM_LINUX
)

120 
	srio_mm≠_t
 {

121 
rio_mm≠_t
(Ë: 
addr
(
NULL
), 
size
(0) {}

122 *
	gaddr
;

123 
size_t
 
	gsize
;

125 
boﬁ
 
is_nuŒ
(Ë{  (
	gsize
 =0 || 
addr
 =
NULL
); }

127 #ñi‡
deföed
(
UHD_PLATFORM_WIN32
)

128 
	eac˚ss_mode_t
 {

129 
	gACCESS_MODE_READ
,

130 
	gACCESS_MODE_WRITE


133 
	srio_mm≠_∑øms_t


135 
uöt64_t
 
	gm≠≥d_va_±r
;

136 
uöt64_t
 
	gm≠_ªady_evít_h™dÀ
;

137 
uöt32_t
 
	gsize
;

138 
uöt16_t
 
	gmem‹yTy≥
;

139 
uöt8_t
 
	gac˚ss_mode
;

142 
	srio_mm≠_thªad¨gs_t


144 
rio_dev_h™dÀ_t
 
	gdevi˚_h™dÀ
;

145 
rio_mm≠_∑øms_t
 
	g∑øms
;

146 
núio_°©us
 
	g°©us
;

149 
	srio_mm≠_t


151 
rio_mm≠_t
(Ë: 
addr
(
NULL
) {}

152 *
addr
;

153 
HANDLE
 
	gm≠_thªad_h™dÀ
;

154 
rio_mm≠_thªad¨gs_t
 
	gm≠_thªad_¨gs
;

156 
boﬁ
 
is_nuŒ
(Ë{  
	gaddr
 =
NULL
; }

159 
	srio_mm≠_t
 {

160 
rio_mm≠_t
(Ë: 
addr
(
NULL
) {}

161 *
addr
;

163 
boﬁ
 
is_nuŒ
(Ë{  
	gaddr
 =
NULL
; }

167 
núio_°©us
 
rio_›í
(

168 c⁄° 
°d
::
°rög
& 
devi˚_∑th
,

169 
rio_dev_h™dÀ_t
& 
devi˚_h™dÀ
);

171 
rio_˛o£
(

172 
rio_dev_h™dÀ_t
& 
devi˚_h™dÀ
);

174 
boﬁ
 
rio_is›í
(

175 
rio_dev_h™dÀ_t
 
devi˚_h™dÀ
);

177 
núio_°©us
 
rio_io˘l
(

178 
rio_dev_h™dÀ_t
 
devi˚_h™dÀ
,

179 
uöt32_t
 
io˘l_code
,

180 c⁄° *
wrôe_buf
,

181 
size_t
 
wrôe_buf_Àn
,

182 *
ªad_buf
,

183 
size_t
 
ªad_buf_Àn
);

185 
núio_°©us
 
rio_mm≠
(

186 
rio_dev_h™dÀ_t
 
devi˚_h™dÀ
,

187 
uöt16_t
 
mem‹y_ty≥
,

188 
size_t
 
size
,

189 
boﬁ
 
wrôabÀ
,

190 
rio_mm≠_t
 &
m≠
);

192 
núio_°©us
 
rio_munm≠
(

193 
rio_mm≠_t
 &
m≠
);

	@host/include/uhd/transport/nirio/nirio_err_template.h

24 
NIRIO_ERR_INFO
(
NiRio_Sètus_Suc˚ss
, 0, "NoÉrrors or warnings.")

25 
NIRIO_ERR_INFO
(
NiRio_Sètus_FifoTimeout
, -50400, "TheÅimeoutÉxpired beforeÅhe FIFO operation could complete.")

26 
NIRIO_ERR_INFO
(
NiRio_Sètus_Mem‹yFuŒ
, -52000, "A memoryállocation failed. TryágaináfterÑebooting.")

27 
NIRIO_ERR_INFO
(
NiRio_Sètus_So·w¨eFau…
, -52003, "An unexpected softwareÉrror occurred.")

28 
NIRIO_ERR_INFO
(
NiRio_Sètus_InvÆidP¨amëî
, -52005, "AÖarameterÅoá function wasÇot valid. This could beá NULLÖointer,á bad value,Étc.")

29 
NIRIO_ERR_INFO
(
NiRio_Sètus_Resour˚NŸFound
, -52006, "AÑequiredÑesource wasÇot found. The NiFpga.*Üibrary,Åhe RIOÑesource, or some otherÑesource may be missing.")

30 
NIRIO_ERR_INFO
(
NiRio_Sètus_Resour˚NŸInôülized
, -52010, "AÑequiredÑesource wasÇotÖroperly initialized. This could occur if NiFpga_Initialize wasÇot called oráÑequired NiFpga_IrqContext wasÇotÑeserved.")

31 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaAÃódyRu¬ög
, -61003, "The FPGA isálreadyÑunning.")

32 
NIRIO_ERR_INFO
(
NiRio_Sètus_Devi˚Ty≥Mism©ch
, -61024, "The bitfile wasÇot compiled forÅhe specifiedÑesource's deviceÅype.")

33 
NIRIO_ERR_INFO
(
NiRio_Sètus_Communiˇti⁄Timeout
, -61046, "AnÉrror was detected inÅhe communication betweenÅhe host computerándÅhe USRP device. This could be dueÅoá hardware failure onÅhe bus.")

34 
NIRIO_ERR_INFO
(
NiRio_Sètus_IrqTimeout
, -61060, "TheÅimeoutÉxpired beforeány ofÅhe IRQs wereásserted.")

35 
NIRIO_ERR_INFO
(
NiRio_Sètus_C‹ru±Bôfûe
, -61070, "The LVBITX configuration bitstream seemsÅo be corrupt.")

36 
NIRIO_ERR_INFO
(
NiRio_Sètus_BadDïth
, -61072, "TheÑequested FIFO depth is invalid. It isÉither 0 oránámountÇot supported byÅhe hardware.")

37 
NIRIO_ERR_INFO
(
NiRio_Sètus_BadRódWrôeCou¡
, -61073, "TheÇumber of FIFOÉlements is invalid. EitherÅheÇumber is greaterÅhanÅhe depth ofÅhe host memory DMA FIFO, or moreÉlements wereÑequested forÑeleaseÅhan had beenácquired.")

38 
NIRIO_ERR_INFO
(
NiRio_Sètus_ClockLo°Lock
, -61083, "A hardware clockingÉrror occurred.")

39 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaBusy
, -61141, "The operation couldÇot beÖerformed becauseÅhe FPGA is busy.")

40 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaBusyFpgaI¡îÁ˚CApi
, -61200, "The operation couldÇot beÖerformed becauseÅhe FPGA is busy.")

41 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaBusySˇnI¡îÁ˚
, -61201, "The operation couldÇot beÖerformed becauseÅhe chassis is in Scan InterfaceÖrogramming mode.")

42 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaBusyFpgaI¡îÁ˚
, -61202, "The operation couldÇot beÖerformed becauseÅhe FPGA is busy operating in FPGA Interface mode. Stopálláctivities onÅhe FPGA beforeÑequestingÅhis operation.")

43 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaBusyI¡îa˘ive
, -61203, "The operation couldÇot beÖerformed becauseÅhe FPGA is busy operating in FPGA Interactive mode. Stopálláctivities onÅhe FPGA beforeÑequestingÅhis operation.")

44 
NIRIO_ERR_INFO
(
NiRio_Sètus_FpgaBusyEmuœti⁄
, -61204, "The operation couldÇot beÖerformed becauseÅhe FPGA is busy operating in FPGA Emulation mode. Stopálláctivities onÅhe FPGA beforeÑequestingÅhis operation.")

45 
NIRIO_ERR_INFO
(
NiRio_Sètus_G©edClockH™dshakögViﬁ©i⁄
, -61216, "A gated clock has violatedÅhe handshakingÖrotocol.")

46 
NIRIO_ERR_INFO
(
NiRio_Sètus_Regi⁄sOut°™dögF‹Sessi⁄
, -61217, "A session cannot be closed,Ñeset,Çor caná bitfile be downloaded while DMA FIFOÑegionÑeferencesáre still outstanding forÅhe specified session.")

47 
NIRIO_ERR_INFO
(
NiRio_Sètus_EÀmítsNŸPîmissibÀToBeAcquúed
, -61219, "Thereáre currently fewer unacquiredÉlementsÜeft inÅhe FIFOÅhanáre beingÑequested. Release someácquiredÉlements beforeácquiring moreÉlements.")

48 
NIRIO_ERR_INFO
(
NiRio_Sètus_I¡î«lEº‹
, -61499, "An unexpected internalÉrror occurred.")

49 
NIRIO_ERR_INFO
(
NiRio_Sètus_Ac˚ssDíõd
, -63033, "AccessÅoÅheÜocal orÑemote system was denied.")

50 
NIRIO_ERR_INFO
(
NiRio_Sètus_RpcC⁄√˘i⁄Eº‹
, -63040, "A connection couldÇot beÉstablishedÅoÅhe specifiedÑemote device manager. EnsureÅhatÅhe devicesáre on,Åhat NI-USRPRIO software is installed,ándÅhatÅhe USRPRIO server isÑunningándÖroperly configured.")

51 
NIRIO_ERR_INFO
(
NiRio_Sètus_RpcO≥øti⁄Eº‹
, -63042, "A fault onÅheÇetwork causedÅhe RPC operationÅo fail.")

52 
NIRIO_ERR_INFO
(
NiRio_Sètus_RpcSessi⁄Eº‹
, -63043, "The RPC sessionÅoÅheÑemote device manager is invalid. EnsureÅhatÅhe device is connectedándÅryÑestartingÅhe server.")

53 
NIRIO_ERR_INFO
(
NiRio_Sètus_FifoRe£rved
, -63082, "The operation couldÇot complete becauseánother session isáccessingÅhe FIFO. CloseÅhe other sessionándÑetry.")

54 
NIRIO_ERR_INFO
(
NiRio_Sètus_FifoEÀmítsCuºíéyAcquúed
, -63083, "A Configure FIFO, Stop FIFO, Read FIFO, or Write FIFO function was called whileÅhe host hadácquiredÉlements ofÅhe FIFO. ReleaseállácquiredÉlements before configuring, stopping,Ñeading, or writing.")

55 
NIRIO_ERR_INFO
(
NiRio_Sètus_Mißlig√dAc˚ss
, -63084, "A function was called usingá misalignedáddress. Theáddress must beá multiple ofÅhe size ofÅhe datatype.")

56 
NIRIO_ERR_INFO
(
NiRio_Sètus_BôfûeRódEº‹
, -63101, "A valid .lvbitx bitfile isÑequired. If youáre usingá valid .lvbitx bitfile,Åhe bitfile mayÇot be compatible withÅhe software youáre using.")

57 
NIRIO_ERR_INFO
(
NiRio_Sètus_Sig«tuªMism©ch
, -63106, "The specified signature doesÇot matchÅhe signature ofÅhe bitfile. IfÅhe bitfile has beenÑecompiled,ÑegenerateÅhe C APIándÑebuildÅheápplication.")

58 
NIRIO_ERR_INFO
(
NiRio_Sètus_Incom∑tibÀBôfûe
, -63107, "The bitfile youáreÅryingÅo use isÇot compatible withÅhe version of NI-RIO installed onÅheÅargetánd/orÅhe host.")

59 
NIRIO_ERR_INFO
(
NiRio_Sètus_InvÆidResour˚Name
, -63192, "EitherÅhe suppliedÑesourceÇame is invalidásá RIOÑesourceÇame, orÅhe device wasÇot found.")

60 
NIRIO_ERR_INFO
(
NiRio_Sètus_FótuªNŸSuµ‹ãd
, -63193, "TheÑequested feature isÇot supported.")

61 
NIRIO_ERR_INFO
(
NiRio_Sètus_Vîsi⁄Mism©ch
, -63194, "Software version mismatch.")

62 
NIRIO_ERR_INFO
(
NiRio_Sètus_InvÆidSessi⁄
, -63195, "The session is invalid or has been closed.")

63 
NIRIO_ERR_INFO
(
NiRio_Sètus_OutOfH™dÀs
, -63198, "The maximumÇumber of open FPGA sessions has beenÑeached. Close some open sessions.")

64 
NIRIO_ERR_INFO
(
NiRio_Sètus_Devi˚Locked
, -63031, "The operation isÇotállowed becauseánother session iná differentÖrocess isáccessingÅhe device. Closeáll other sessionsándÑetry.")

	@host/include/uhd/transport/nirio/nirio_fifo.h

19 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_FIFO_H


20 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_FIFO_H


	)

22 
	~<°döt.h
>

23 
	~<uhd/å™•‹t/núio/núio_drivî_iÁ˚.h
>

24 
	~<uhd/å™•‹t/núio/núiok_¥oxy.h
>

25 
	~<uhd/å™•‹t/núio/°©us.h
>

26 
	~<boo°/n⁄c›yabÀ.hµ
>

27 
	~<boo°/sm¨t_±r.hµ
>

28 
	~<°rög
>

29 
	~<boo°/thªad/ªcursive_muãx.hµ
>

30 
	~<boo°/thªad/thªad.hµ
>

31 
	~<boo°/©omic/©omic.hµ
>

33 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io
 {

35 
	sd©©y≥_öfo_t
 {

36 
d©©y≥_öfo_t
(
núio_sˇœr_ty≥_t
 
t
, 
uöt32_t
 
w
):
sˇœr_ty≥
—),
width
(w) {}

37 
núio_sˇœr_ty≥_t
 
	gsˇœr_ty≥
;

38 
uöt32_t
 
	gwidth
;

41 
	gãm∂©e
 <
ty≥«me
 
	gd©a_t
>

42 ˛as†
	cnúio_fifo
 : 
¥iv©e
 
boo°
::
n⁄c›yabÀ


44 
public
:

45 
boo°
::
	tsh¨ed_±r
< 
	tnúio_fifo
<
	td©a_t
> > 
	t•å
;

48 
	gMINIMIZE_LATENCY
,

49 
	gMAXIMIZE_THROUGHPUT


50 } 
	tfifo_›timiz©i⁄_›ti⁄_t
;

59 
núio_fifo
(

60 
núiok_¥oxy
::
•å
 
riok_¥oxy
,

61 c⁄° 
fifo_dúe˘i⁄_t
 
dúe˘i⁄
,

62 c⁄° 
°d
::
°rög
& 
«me
,

63 c⁄° 
uöt32_t
 
fifo_ö°™˚
);

64 
	gvútuÆ
 ~
núio_fifo
();

75 
núio_°©us
 
öôülize
(

76 c⁄° 
size_t
 
ªque°ed_dïth
,

77 c⁄° 
size_t
 
‰ame_size_ö_ñemíts
,

78 
size_t
& 
a˘uÆ_dïth
,

79 
size_t
& 
a˘uÆ_size
,

80 c⁄° 
fifo_›timiz©i⁄_›ti⁄_t
 
fifo_›timiz©i⁄_›ti⁄
 = 
MINIMIZE_LATENCY
);

85 
föÆize
();

91 
ölöe
 c⁄° 
	g°d
::
°rög
& 
gë_«me
(Ëc⁄° {  
_«me
; }

97 
ölöe
 
uöt32_t
 
gë_ch™√l
(Ëc⁄° {  
	g_fifo_ch™√l
; }

103 
ölöe
 
fifo_dúe˘i⁄_t
 
gë_dúe˘i⁄
(Ëc⁄° {  
	g_fifo_dúe˘i⁄
; }

109 
ölöe
 
núio_sˇœr_ty≥_t
 
gë_sˇœr_ty≥
(Ëc⁄° {  
	g_d©©y≥_öfo
.
	gsˇœr_ty≥
; }

115 
núio_°©us
 
°¨t
();

121 
núio_°©us
 
°›
();

132 
núio_°©us
 
acquúe
(

133 
d©a_t
*& 
ñemíts
,

134 c⁄° 
size_t
 
ñemíts_ªque°ed
,

135 c⁄° 
uöt32_t
 
timeout
,

136 
size_t
& 
ñemíts_acquúed
,

137 
size_t
& 
ñemíts_ªmaöög
);

144 
núio_°©us
 
ªÀa£
(c⁄° 
size_t
 
ñemíts
);

155 
núio_°©us
 
ªad
(

156 
d©a_t
* 
buf
,

157 c⁄° 
uöt32_t
 
num_ñemíts
,

158 c⁄° 
uöt32_t
 
timeout
,

159 
uöt32_t
& 
num_ªad
,

160 
uöt32_t
& 
num_ªmaöög
);

170 
núio_°©us
 
wrôe
(

171 c⁄° 
d©a_t
* 
buf
,

172 c⁄° 
uöt32_t
 
num_ñemíts
,

173 c⁄° 
uöt32_t
 
timeout
,

174 
uöt32_t
& 
num_ªmaöög
);

176 
	g¥iv©e
:

182 
d©©y≥_öfo_t
 
_gë_d©©y≥_öfo
();

189 
núio_°©us
 
_gë_å™s„r_cou¡
(
uöt64_t
& 
å™s„r_cou¡
);

196 
núio_°©us
 
_ísuª_å™s„r_com∂ëed
(
uöt32_t
 
timeout_ms
);

207 
boﬁ
 
_acquúe_block_‰om_rio_buf„r
(

208 
size_t
 
ñemíts_ªque°ed
,

209 
uöt64_t
 
timeout_ö_ms
,

210 c⁄° 
fifo_›timiz©i⁄_›ti⁄_t
 
fifo_›timiz©i⁄_›ti⁄
,

211 
núio_°©us
& 
°©us
);

213 
	g¥iv©e
:

214 
	efifo_°©e_t
 {

215 
UNMAPPED
, 
	gMAPPED
, 
	gSTARTED


218 
	g°d
::
°rög
 
_«me
;

219 
fifo_dúe˘i⁄_t
 
	g_fifo_dúe˘i⁄
;

220 
uöt32_t
 
	g_fifo_ch™√l
;

221 
d©©y≥_öfo_t
 
	g_d©©y≥_öfo
;

222 
fifo_°©e_t
 
	g_°©e
;

223 
size_t
 
	g_ªmaöög_ö_˛aimed_block
;

224 
size_t
 
	g_ªmaöög_acquúabÀ_ñemíts
;

225 
	gnúio_drivî_iÁ˚
::
rio_mm≠_t
 
_mem_m≠
;

226 
	gboo°
::
ªcursive_muãx
 
_muãx
;

227 
	gnúiok_¥oxy
::
•å
 
_riok_¥oxy_±r
;

229 
uöt64_t
 
	g_ex≥˘ed_x„r_cou¡
;

230 
uöt32_t
 
	g_dma_ba£_addr
;

232 
d©a_t
* 
	g_ñemíts_buf„r
;

233 
size_t
 
	g_a˘uÆ_dïth_ö_ñemíts
;

234 
	gboo°
::
©omic
<
size_t
> 
_tŸÆ_ñemíts_acquúed
;

235 
size_t
 
	g_‰ame_size_ö_ñemíts
;

236 
fifo_›timiz©i⁄_›ti⁄_t
 
	g_fifo_›timiz©i⁄_›ti⁄
;

238 c⁄° 
uöt32_t
 
	gFIFO_LOCK_TIMEOUT_IN_MS
 = 5000;

241 
	~<uhd/å™•‹t/núio/núio_fifo.ùp
>

	@host/include/uhd/transport/nirio/nirio_quirks.h

19 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_QUIRKS_H


20 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_QUIRKS_H


	)

22 
	~<£t
>

23 
	~<°döt.h
>

24 
	~<uhd/utûs/log.hµ
>

29 
	#UHD_NIRIO_RX_FIFO_XFER_CHECK_EN
 0

	)

31 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io
 {

33 ˛as†
	cnúio_quúks
 {

34 
	gpublic
:

35 
núio_quúks
(Ë: 
_tx_°ªam_cou¡
(0) {

38 
UHD_INLINE
 
ªgi°î_tx_°ªams
(c⁄° 
uöt32_t
 
tx_°ªam_ödi˚s
[], 
size_t
 
size
) {

39 
size_t
 
	gi
 = 0; i < 
	gsize
; i++) {

40 
	g_tx_°ªam_fifo_ödi˚s
.
ö£π
(
tx_°ªam_ödi˚s
[
i
]);

44 
UHD_INLINE
 
add_tx_fifo
(
uöt32_t
 
ödex
) {

45 i‡(
	g_tx_°ªam_fifo_ödi˚s
.
föd
(
ödex
Ë!
_tx_°ªam_fifo_ödi˚s
.
íd
()) {

46 i‡(
_tx_°ªam_cou¡
 == 0) {

47 
UHD_LOG
 << "NI-RIO RX FIFO Transfer Check Quirk Enabled.";

49 
	g_tx_°ªam_cou¡
++;

53 
UHD_INLINE
 
ªmove_tx_fifo
(
uöt32_t
 
ödex
) {

54 i‡(
	g_tx_°ªam_fifo_ödi˚s
.
föd
(
ödex
Ë!
_tx_°ªam_fifo_ödi˚s
.
íd
()) {

55 
_tx_°ªam_cou¡
--;

56 i‡(
	g_tx_°ªam_cou¡
 == 0) {

57 
UHD_LOG
 << "NI-RIO RX FIFO Transfer Check Quirk Disabled.";

66 
UHD_INLINE
 
boﬁ
 
rx_fifo_x„r_check_í
() const {

69  
	g_tx_°ªam_cou¡
 > 0;

72 
	g¥iv©e
:

73 
°d
::
£t
<
uöt32_t
> 
_tx_°ªam_fifo_ödi˚s
;

74 
size_t
 
	g_tx_°ªam_cou¡
;

	@host/include/uhd/transport/nirio/nirio_resource_manager.h

19 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_RESOURCE_MANAGER_H


20 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_RESOURCE_MANAGER_H


	)

22 
	~<uhd/å™•‹t/núio/núio_fifo.h
>

23 
	~<uhd/å™•‹t/núio/núiok_¥oxy.h
>

24 
	~<ve˘‹
>

25 
	~<m≠
>

26 
	~<°rög
>

27 
	~<°döt.h
>

29 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io


31 
	eªgi°î_dúe˘i⁄_t
 {

32 
	gCONTROL
,

33 
	gINDICATOR


36 
	snúio_ªgi°î_öfo_t
 {

37 
núio_ªgi°î_öfo_t
(

38 
uöt32_t
 
¨g_off£t
,

39 c⁄° * 
¨g_«me
,

40 
ªgi°î_dúe˘i⁄_t
 
¨g_dúe˘i⁄
) :

41 
off£t
(
¨g_off£t
),

42 
«me
(
¨g_«me
),

43 
dúe˘i⁄
(
¨g_dúe˘i⁄
)

46 
uöt32_t
 
	goff£t
;

47 
	g°d
::
°rög
 
«me
;

48 
ªgi°î_dúe˘i⁄_t
 
	gdúe˘i⁄
;

51 
	g°d
::
	tve˘‹
<
	tnúio_ªgi°î_öfo_t
> 
	tnúio_ªgi°î_öfo_vå
;

55 
	g°d
::
	tve˘‹
<
	tnúio_fifo_öfo_t
> 
	tnúio_fifo_öfo_vå
;

58 ˛as†
	cnúio_ªsour˚_m™agî


60 
	gpublic
:

61 
núio_ªsour˚_m™agî
();

62 
£t_¥oxy
(
núiok_¥oxy
::
•å
 
¥oxy
);

63 
	gvútuÆ
 ~
núio_ªsour˚_m™agî
();

65 
núio_°©us
 
öôülize
(c⁄° 
núio_ªgi°î_öfo_vå
& 
ªg_öfo_vå
, c⁄° 
núio_fifo_öfo_vå
& 
fifo_öfo_vå
);

66 
föÆize
();

68 
núio_°©us
 
gë_ªgi°î_off£t
(c⁄° * 
ªgi°î_«me
, 
uöt32_t
& 
off£t
);

70 
	gãm∂©e
<
ty≥«me
 
	gd©a_t
>

71 
núio_°©us
 
¸óã_tx_fifo
(c⁄° * 
fifo_«me
, 
boo°
::
sh¨ed_±r
< 
núio_fifo
<
d©a_t
> >& 
fifo
)

73 
núio_fifo_öfo_t
* 
fifo_öfo_±r
 = 
_lookup_fifo_öfo
(
fifo_«me
);

74 i‡(
	gfifo_öfo_±r
) {

75 
	gfifo
.
ª£t
(
√w
 
núio_fifo
<
d©a_t
>(
_kî√l_¥oxy
, 
OUTPUT_FIFO
, 
fifo_öfo_±r
->
«me
, fifo_öfo_±r->
ch™√l
));

77  
	gNiRio_Sètus_Resour˚NŸFound
;

80 i‡(
	gfifo
->
gë_ch™√l
(Ë!
fifo_öfo_±r
->
ch™√l
Ë 
NiRio_Sètus_InvÆidP¨amëî
;

81 i‡(
núio_sˇœr_ty≥_t
(
fifo
->
gë_sˇœr_ty≥
()Ë!
fifo_öfo_±r
->
sˇœr_ty≥
Ë 
NiRio_Sètus_InvÆidP¨amëî
;

83  
	gNiRio_Sètus_Suc˚ss
;

86 
	gãm∂©e
<
ty≥«me
 
	gd©a_t
>

87 
núio_°©us
 
¸óã_rx_fifo
(c⁄° * 
fifo_«me
, 
boo°
::
sh¨ed_±r
< 
núio_fifo
<
d©a_t
> >& 
fifo
)

89 
núio_fifo_öfo_t
* 
fifo_öfo_±r
 = 
_lookup_fifo_öfo
(
fifo_«me
);

90 i‡(
	gfifo_öfo_±r
) {

91 
	gfifo
.
ª£t
(
√w
 
núio_fifo
<
d©a_t
>(
_kî√l_¥oxy
, 
INPUT_FIFO
, 
fifo_öfo_±r
->
«me
, fifo_öfo_±r->
ch™√l
));

93  
	gNiRio_Sètus_Resour˚NŸFound
;

96 i‡(
	gfifo
->
gë_ch™√l
(Ë!
fifo_öfo_±r
->
ch™√l
Ë 
NiRio_Sètus_InvÆidP¨amëî
;

97 i‡(
núio_sˇœr_ty≥_t
(
fifo
->
gë_sˇœr_ty≥
()Ë!
fifo_öfo_±r
->
sˇœr_ty≥
Ë 
NiRio_Sètus_InvÆidP¨amëî
;

99  
	gNiRio_Sètus_Suc˚ss
;

102 
	g¥iv©e
:

103 
núio_ªsour˚_m™agî
 (constÇirio_resource_manager&);

104 
	gnúio_ªsour˚_m™agî
& 
	g›î©‹
 = (c⁄° 
núio_ªsour˚_m™agî
&);

106 
	g°d
::
	tm≠
<c⁄° 
	t°d
::
	t°rög
, 
	tnúio_fifo_öfo_t
> 
	tfifo_öfo_m≠_t
;

107 
	g°d
::
	tm≠
<c⁄° 
	t°d
::
	t°rög
, 
	tnúio_ªgi°î_öfo_t
> 
	tªgi°î_öfo_m≠_t
;

109 
núio_°©us
 
_add_fifo_ªsour˚
(c⁄° 
núio_fifo_öfo_t
& 
fifo_öfo
);

110 
núio_°©us
 
_£t_drivî_c⁄fig
();

111 
núio_fifo_öfo_t
* 
_lookup_fifo_öfo
(c⁄° * 
fifo_«me
);

113 
	gnúiok_¥oxy
::
•å
 
_kî√l_¥oxy
;

114 
fifo_öfo_m≠_t
 
	g_fifo_öfo_m≠
;

115 
ªgi°î_öfo_m≠_t
 
	g_ªg_öfo_m≠
;

	@host/include/uhd/transport/nirio/niriok_proxy.h

18 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_INTERFACE_H


19 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_INTERFACE_H


	)

21 
	~<°döt.h
>

22 
	~<boo°/sm¨t_±r.hµ
>

23 
	~<boo°/n⁄c›yabÀ.hµ
>

24 
	~<boo°/thªad/sh¨ed_muãx.hµ
>

25 
	~<boo°/thªad/locks.hµ
>

26 
	~<uhd/å™•‹t/núio/núio_drivî_iÁ˚.h
>

27 
	~<uhd/å™•‹t/núio/núio_quúks.h
>

29 
	#NI_VENDOR_NUM
 0x1093

	)

31 
	#VERSION_BUILD_SHIFT
 0

	)

32 
	#VERSION_PHASE_SHIFT
 14

	)

33 
	#VERSION_MAINT_SHIFT
 16

	)

34 
	#VERSION_UPGRD_SHIFT
 20

	)

35 
	#VERSION_MAJOR_SHIFT
 24

	)

36 
	#VERSION_BUILD_MASK
 0x00003FFF

	)

37 
	#VERSION_PHASE_MASK
 0x0000C000

	)

38 
	#VERSION_MAINT_MASK
 0x000F0000

	)

39 
	#VERSION_UPGRD_MASK
 0x00F00000

	)

40 
	#VERSION_MAJOR_MASK
 0xFF000000

	)

42 
	#GET_FIFO_MEMORY_TYPE
(
fifo_ö°
Ë(
°©ic_ˇ°
<
uöt16_t
>(0x0100 | sètic_ˇ°<uöt16_t>(fifo_ö°)))

	)

44 
	#READER_LOCK
 \

45 
boo°
::
sh¨ed_lock
<boo°::
sh¨ed_muãx
> 
	`ªadî_lock
(
_synchr⁄iz©i⁄
);

	)

47 
	#WRITER_LOCK
 \

48 
boo°
::
upgøde_lock
<boo°::
sh¨ed_muãx
> 
	`wrôe_upgøde_lock
(
_synchr⁄iz©i⁄
);\

49 
boo°
::
upgøde_to_unique_lock
<boo°::
sh¨ed_muãx
> 
	`wrôe_unique_lock
(
wrôe_upgøde_lock
);

	)

52 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io


54 
	enúio_vîsi⁄_t
 { 
	gCURRENT
, 
	gOLDEST_COMPATIBLE
 };

56 
	enúio_addr_•a˚_t
 {

57 
	gINVALID
 = 0,

58 
	gBUS_INTERFACE
 = 1,

59 
	gFPGA
 = 2,

60 
	gBAR_WINDOW
 = 3,

63 
uöt64_t
 
	tnúio_u64_t
;

64 
uöt32_t
 
	tnúio_u32_t
;

65 
uöt16_t
 
	tnúio_u16_t
;

66 
uöt8_t
 
	tnúio_u8_t
;

67 
öt32_t
 
	tnúio_i32_t
;

70 
	gRIO_PRODUCT_NUMBER
 = 2UL,

71 
	gRIO_CURRENT_VERSION
 = 14UL,

72 
	gRIO_OLDEST_COMPATIBLE_VERSION
 = 15UL,

73 
	gRIO_ADDRESS_SPACE
 = 25UL,

74 
	gRIO_IS_FPGA_PROGRAMMED
 = 48UL,

75 
	gRIO_FPGA_DEFAULT_SIGNATURE_OFFSET
 = 53UL,

79 } 
	tnúio_devi˚_©åibuã32_t
;

82 
	gRIO_SCALAR_TYPE_IB
 = 1UL,

83 
	gRIO_SCALAR_TYPE_IW
 = 2UL,

84 
	gRIO_SCALAR_TYPE_IL
 = 3UL,

85 
	gRIO_SCALAR_TYPE_IQ
 = 4UL,

86 
	gRIO_SCALAR_TYPE_UB
 = 5UL,

87 
	gRIO_SCALAR_TYPE_UW
 = 6UL,

88 
	gRIO_SCALAR_TYPE_UL
 = 7UL,

89 
	gRIO_SCALAR_TYPE_UQ
 = 8UL,

90 } 
	tnúio_sˇœr_ty≥_t
;

92 
ölöe
 
núio_sˇœr_ty≥_t
 
m≠_öt_to_sˇœr_ty≥
(
uöt32_t
 
sˇœr_ty≥_as_öt
)

94 
	gsˇœr_ty≥_as_öt
)

96 1:  
RIO_SCALAR_TYPE_IB
;

97 2:  
RIO_SCALAR_TYPE_IW
;

98 3:  
RIO_SCALAR_TYPE_IL
;

99 4:  
RIO_SCALAR_TYPE_IQ
;

100 5:  
RIO_SCALAR_TYPE_UB
;

101 6:  
RIO_SCALAR_TYPE_UW
;

102 7:  
RIO_SCALAR_TYPE_UL
;

103 8:  
RIO_SCALAR_TYPE_UQ
;

104 : 
UHD_ASSERT_THROW
(
Ál£
);  
	gRIO_SCALAR_TYPE_UL
;

108 
	efifo_dúe˘i⁄_t
 {

109 
	gINPUT_FIFO
,

110 
	gOUTPUT_FIFO


113 
	snúio_fifo_öfo_t
 {

114 
núio_fifo_öfo_t
(

115 
uöt32_t
 
¨g_ch™√l
,

116 c⁄° * 
¨g_«me
,

117 
fifo_dúe˘i⁄_t
 
¨g_dúe˘i⁄
,

118 
uöt32_t
 
¨g_ba£_addr
,

119 
uöt32_t
 
¨g_dïth
,

120 
núio_sˇœr_ty≥_t
 
¨g_sˇœr_ty≥
,

121 
uöt32_t
 
¨g_bôWidth
,

122 
öt32_t
 
¨g_öãgîW‹dLígth
,

123 
uöt32_t
 
¨g_vîsi⁄
) :

124 
ch™√l
(
¨g_ch™√l
),

125 
«me
(
¨g_«me
),

126 
dúe˘i⁄
(
¨g_dúe˘i⁄
),

127 
ba£_addr
(
¨g_ba£_addr
),

128 
dïth
(
¨g_dïth
),

129 
sˇœr_ty≥
(
¨g_sˇœr_ty≥
),

130 
bôWidth
(
¨g_bôWidth
),

131 
öãgîW‹dLígth
(
¨g_öãgîW‹dLígth
),

132 
vîsi⁄
(
¨g_vîsi⁄
)

135 
uöt32_t
 
	gch™√l
;

136 
	g°d
::
°rög
 
«me
;

137 
fifo_dúe˘i⁄_t
 
	gdúe˘i⁄
;

138 
uöt32_t
 
	gba£_addr
;

139 
uöt32_t
 
	gdïth
;

140 
núio_sˇœr_ty≥_t
 
	gsˇœr_ty≥
;

141 
uöt32_t
 
	gbôWidth
;

142 
öt32_t
 
	göãgîW‹dLígth
;

143 
uöt32_t
 
	gvîsi⁄
;

146 ˛as†
	cUHD_API
 
	gnúiok_¥oxy
 : 
public
 
boo°
::
n⁄c›yabÀ
 {

147 
public
:

148 
boo°
::
	tsh¨ed_±r
<
	tnúiok_¥oxy
> 
	t•å
;

150 
•å
 
make_™d_›í
(c⁄° 
°d
::
°rög
& 
öãrÁ˚_∑th
);

152 
núiok_¥oxy
();

153 
	gvútuÆ
 ~
núiok_¥oxy
();

156 
vútuÆ
 
núio_°©us
 
›í
(c⁄° 
°d
::
°rög
& 
öãrÁ˚_∑th
) = 0;

157 
vútuÆ
 
˛o£
() = 0;

159 
vútuÆ
 
núio_°©us
 
ª£t
() = 0;

161 
uöt32_t
 
gë_öãrÁ˚_num
(Ë{  
	g_öãrÁ˚_num
; }

163 
vútuÆ
 
núio_°©us
 
gë_vîsi⁄
(

164 
núio_vîsi⁄_t
 
ty≥
,

165 
uöt32_t
& 
maj‹
,

166 
uöt32_t
& 
upgøde
,

167 
uöt32_t
& 
maöã«n˚
,

168 & 
pha£
,

169 
uöt32_t
& 
buûd
) = 0;

171 
vútuÆ
 
núio_°©us
 
gë_©åibuã
(

172 c⁄° 
núio_devi˚_©åibuã32_t
 
©åibuã
,

173 
uöt32_t
& 
©åVÆue
) = 0;

175 
vútuÆ
 
núio_°©us
 
£t_©åibuã
(

176 c⁄° 
núio_devi˚_©åibuã32_t
 
©åibuã
,

177 c⁄° 
uöt32_t
 
vÆue
) = 0;

179 
vútuÆ
 
núio_°©us
 
≥ek
(
uöt32_t
 
off£t
, uöt32_t& 
vÆue
) = 0;

181 
vútuÆ
 
núio_°©us
 
≥ek
(
uöt32_t
 
off£t
, 
uöt64_t
& 
vÆue
) = 0;

183 
vútuÆ
 
núio_°©us
 
poke
(
uöt32_t
 
off£t
, c⁄° uöt32_t& 
vÆue
) = 0;

185 
vútuÆ
 
núio_°©us
 
poke
(
uöt32_t
 
off£t
, c⁄° 
uöt64_t
& 
vÆue
) = 0;

187 
vútuÆ
 
núio_°©us
 
m≠_fifo_mem‹y
(

188 
uöt32_t
 
fifo_ö°™˚
,

189 
size_t
 
size
,

190 
núio_drivî_iÁ˚
::
rio_mm≠_t
& 
m≠
) = 0;

192 
vútuÆ
 
núio_°©us
 
unm≠_fifo_mem‹y
(

193 
núio_drivî_iÁ˚
::
rio_mm≠_t
& 
m≠
) = 0;

195 
vútuÆ
 
núio_°©us
 
°›_Æl_fifos
() = 0;

197 
	gnúio_quúks
& 
gë_rio_quúks
() {

198  
	g_rio_quúks
;

201 
vútuÆ
 
núio_°©us
 
add_fifo_ªsour˚
(c⁄° 
núio_fifo_öfo_t
& 
fifo_öfo
) = 0;

203 
vútuÆ
 
núio_°©us
 
£t_devi˚_c⁄fig
() = 0;

205 
vútuÆ
 
núio_°©us
 
°¨t_fifo
(

206 
uöt32_t
 
ch™√l
) = 0;

208 
vútuÆ
 
núio_°©us
 
°›_fifo
(

209 
uöt32_t
 
ch™√l
) = 0;

211 
vútuÆ
 
núio_°©us
 
c⁄figuª_fifo
(

212 
uöt32_t
 
ch™√l
,

213 
uöt32_t
 
ªque°ed_dïth
,

214 
uöt8_t
 
ªquúes_a˘uÆs
,

215 
uöt32_t
& 
a˘uÆ_dïth
,

216 
uöt32_t
& 
a˘uÆ_size
) = 0;

218 
vútuÆ
 
núio_°©us
 
waô_⁄_fifo
(

219 
uöt32_t
 
ch™√l
,

220 
uöt32_t
 
ñemíts_ªque°ed
,

221 
uöt32_t
 
sˇœr_ty≥
,

222 
uöt32_t
 
bô_width
,

223 
uöt32_t
 
timeout
,

224 
uöt8_t
 
ouçut
,

225 *& 
d©a_poöãr
,

226 
uöt32_t
& 
ñemíts_acquúed
,

227 
uöt32_t
& 
ñemíts_ªmaöög
) = 0;

229 
vútuÆ
 
núio_°©us
 
gø¡_fifo
(

230 
uöt32_t
 
ch™√l
,

231 
uöt32_t
 
ñemíts_to_gø¡
) = 0;

233 
vútuÆ
 
núio_°©us
 
ªad_fifo
(

234 
uöt32_t
 
ch™√l
,

235 
uöt32_t
 
ñemíts_to_ªad
,

236 * 
buf„r
,

237 
uöt32_t
 
buf„r_d©©y≥_width
,

238 
uöt32_t
 
sˇœr_ty≥
,

239 
uöt32_t
 
bô_width
,

240 
uöt32_t
 
timeout
,

241 
uöt32_t
& 
numbî_ªad
,

242 
uöt32_t
& 
numbî_ªmaöög
) = 0;

244 
vútuÆ
 
núio_°©us
 
wrôe_fifo
(

245 
uöt32_t
 
ch™√l
,

246 
uöt32_t
 
ñemíts_to_wrôe
,

247 * 
buf„r
,

248 
uöt32_t
 
buf„r_d©©y≥_width
,

249 
uöt32_t
 
sˇœr_ty≥
,

250 
uöt32_t
 
bô_width
,

251 
uöt32_t
 
timeout
,

252 
uöt32_t
& 
numbî_ªmaöög
) = 0;

254 
	g¥Ÿe˘ed
:

255 
núio_drivî_iÁ˚
::
rio_dev_h™dÀ_t
 
_devi˚_h™dÀ
;

256 
uöt32_t
 
	g_öãrÁ˚_num
;

257 
núio_quúks
 
	g_rio_quúks
;

259 
	gboo°
::
sh¨ed_muãx
 
_synchr⁄iz©i⁄
;

262 
vútuÆ
 
_˛o£
() = 0;

265 ˛as†
	cnúiok_sc›ed_addr_•a˚
 : 
public
 
boo°
::
n⁄c›yabÀ
 {

266 
public
:

267 
ex∂icô
 
núiok_sc›ed_addr_•a˚
(
núiok_¥oxy
::
•å
 
¥oxy
, 
núio_addr_•a˚_t
 
addr_•a˚
, 
núio_°©us
& 
°©us
) :

268 
drivî_¥oxy
(
¥oxy
)

270 
ˇche_°©us
 = 
drivî_¥oxy
->
gë_©åibuã
(
RIO_ADDRESS_SPACE
, 
ˇched_addr_•a˚
);

271 
núio_°©us_chaö
(
drivî_¥oxy
->
£t_©åibuã
(
RIO_ADDRESS_SPACE
, 
addr_•a˚
), 
°©us
);

274 ~
núiok_sc›ed_addr_•a˚
() {

275 i‡(
núio_°©us_nŸ_Áèl
(
ˇche_°©us
))

276 
	gdrivî_¥oxy
->
£t_©åibuã
(
RIO_ADDRESS_SPACE
, 
ˇched_addr_•a˚
);

279 
	g¥iv©e
:

280 
núiok_¥oxy
::
•å
 
drivî_¥oxy
;

281 
uöt32_t
 
	gˇched_addr_•a˚
;

282 
núio_°©us
 
	gˇche_°©us
;

	@host/include/uhd/transport/nirio/niriok_proxy_impl_v1.h

18 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_PROXY_IMPL_V1_H


19 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_PROXY_IMPL_V1_H


	)

21 
	~<boo°/sm¨t_±r.hµ
>

22 
	~<boo°/n⁄c›yabÀ.hµ
>

23 
	~<uhd/å™•‹t/núio/núio_drivî_iÁ˚.h
>

24 
	~<uhd/å™•‹t/núio/núio_quúks.h
>

25 
	~<uhd/å™•‹t/núio/núiok_¥oxy.h
>

27 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io


36 ˛as†
	cUHD_API
 
	gnúiok_¥oxy_im∂_v1
 : 
vútuÆ
 
public
 
núiok_¥oxy
 {

37 
public
:

38 
núiok_¥oxy_im∂_v1
();

39 
	gvútuÆ
 ~
núiok_¥oxy_im∂_v1
();

42 
vútuÆ
 
núio_°©us
 
›í
(c⁄° 
°d
::
°rög
& 
öãrÁ˚_∑th
);

43 
vútuÆ
 
˛o£
();

45 
vútuÆ
 
núio_°©us
 
ª£t
();

47 
vútuÆ
 
núio_°©us
 
gë_vîsi⁄
(

48 
núio_vîsi⁄_t
 
ty≥
,

49 
uöt32_t
& 
maj‹
,

50 
uöt32_t
& 
upgøde
,

51 
uöt32_t
& 
maöã«n˚
,

52 & 
pha£
,

53 
uöt32_t
& 
buûd
);

55 
vútuÆ
 
núio_°©us
 
gë_©åibuã
(

56 c⁄° 
núio_devi˚_©åibuã32_t
 
©åibuã
,

57 
uöt32_t
& 
©åVÆue
);

59 
vútuÆ
 
núio_°©us
 
£t_©åibuã
(

60 c⁄° 
núio_devi˚_©åibuã32_t
 
©åibuã
,

61 c⁄° 
uöt32_t
 
vÆue
);

63 
vútuÆ
 
núio_°©us
 
≥ek
(
uöt32_t
 
off£t
, uöt32_t& 
vÆue
);

65 
vútuÆ
 
núio_°©us
 
≥ek
(
uöt32_t
 
off£t
, 
uöt64_t
& 
vÆue
);

67 
vútuÆ
 
núio_°©us
 
poke
(
uöt32_t
 
off£t
, c⁄° uöt32_t& 
vÆue
);

69 
vútuÆ
 
núio_°©us
 
poke
(
uöt32_t
 
off£t
, c⁄° 
uöt64_t
& 
vÆue
);

71 
vútuÆ
 
núio_°©us
 
m≠_fifo_mem‹y
(

72 
uöt32_t
 
fifo_ö°™˚
,

73 
size_t
 
size
,

74 
núio_drivî_iÁ˚
::
rio_mm≠_t
& 
m≠
);

76 
vútuÆ
 
núio_°©us
 
unm≠_fifo_mem‹y
(

77 
núio_drivî_iÁ˚
::
rio_mm≠_t
& 
m≠
);

79 
vútuÆ
 
núio_°©us
 
°›_Æl_fifos
();

81 
vútuÆ
 
núio_°©us
 
add_fifo_ªsour˚
(c⁄° 
núio_fifo_öfo_t
& 
fifo_öfo
);

83 
vútuÆ
 
núio_°©us
 
£t_devi˚_c⁄fig
();

85 
vútuÆ
 
núio_°©us
 
°¨t_fifo
(

86 
uöt32_t
 
ch™√l
);

88 
vútuÆ
 
núio_°©us
 
°›_fifo
(

89 
uöt32_t
 
ch™√l
);

91 
vútuÆ
 
núio_°©us
 
c⁄figuª_fifo
(

92 
uöt32_t
 
ch™√l
,

93 
uöt32_t
 
ªque°ed_dïth
,

94 
uöt8_t
 
ªquúes_a˘uÆs
,

95 
uöt32_t
& 
a˘uÆ_dïth
,

96 
uöt32_t
& 
a˘uÆ_size
);

98 
vútuÆ
 
núio_°©us
 
waô_⁄_fifo
(

99 
uöt32_t
 
ch™√l
,

100 
uöt32_t
 
ñemíts_ªque°ed
,

101 
uöt32_t
 
sˇœr_ty≥
,

102 
uöt32_t
 
bô_width
,

103 
uöt32_t
 
timeout
,

104 
uöt8_t
 
ouçut
,

105 *& 
d©a_poöãr
,

106 
uöt32_t
& 
ñemíts_acquúed
,

107 
uöt32_t
& 
ñemíts_ªmaöög
);

109 
vútuÆ
 
núio_°©us
 
gø¡_fifo
(

110 
uöt32_t
 
ch™√l
,

111 
uöt32_t
 
ñemíts_to_gø¡
);

113 
vútuÆ
 
núio_°©us
 
ªad_fifo
(

114 
uöt32_t
 
ch™√l
,

115 
uöt32_t
 
ñemíts_to_ªad
,

116 * 
buf„r
,

117 
uöt32_t
 
buf„r_d©©y≥_width
,

118 
uöt32_t
 
sˇœr_ty≥
,

119 
uöt32_t
 
bô_width
,

120 
uöt32_t
 
timeout
,

121 
uöt32_t
& 
numbî_ªad
,

122 
uöt32_t
& 
numbî_ªmaöög
);

124 
vútuÆ
 
núio_°©us
 
wrôe_fifo
(

125 
uöt32_t
 
ch™√l
,

126 
uöt32_t
 
ñemíts_to_wrôe
,

127 * 
buf„r
,

128 
uöt32_t
 
buf„r_d©©y≥_width
,

129 
uöt32_t
 
sˇœr_ty≥
,

130 
uöt32_t
 
bô_width
,

131 
uöt32_t
 
timeout
,

132 
uöt32_t
& 
numbî_ªmaöög
);

134 
	g¥Ÿe˘ed
:

136 
vútuÆ
 
_˛o£
();

138 
	g¥iv©e
:

139 
núio_°©us
 
sync_›î©i⁄
(

140 c⁄° *
wrôeBuf„r
,

141 
size_t
 
wrôeBuf„rLígth
,

142 *
ªadBuf„r
,

143 
size_t
 
ªadBuf„rLígth
);

	@host/include/uhd/transport/nirio/niriok_proxy_impl_v2.h

18 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_PROXY_IMPL_V2_H


19 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIRIO_PROXY_IMPL_V2_H


	)

21 
	~<boo°/sm¨t_±r.hµ
>

22 
	~<boo°/n⁄c›yabÀ.hµ
>

23 
	~<uhd/å™•‹t/núio/núio_drivî_iÁ˚.h
>

24 
	~<uhd/å™•‹t/núio/núio_quúks.h
>

25 
	~<uhd/å™•‹t/núio/núiok_¥oxy.h
>

27 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io


36 ˛as†
	cUHD_API
 
	gnúiok_¥oxy_im∂_v2
 : 
vútuÆ
 
public
 
núiok_¥oxy
 {

37 
public
:

38 
núiok_¥oxy_im∂_v2
();

39 
	gvútuÆ
 ~
núiok_¥oxy_im∂_v2
();

42 
vútuÆ
 
núio_°©us
 
›í
(c⁄° 
°d
::
°rög
& 
öãrÁ˚_∑th
);

43 
vútuÆ
 
˛o£
();

45 
vútuÆ
 
núio_°©us
 
ª£t
();

47 
vútuÆ
 
núio_°©us
 
gë_vîsi⁄
(

48 
núio_vîsi⁄_t
 
ty≥
,

49 
uöt32_t
& 
maj‹
,

50 
uöt32_t
& 
upgøde
,

51 
uöt32_t
& 
maöã«n˚
,

52 & 
pha£
,

53 
uöt32_t
& 
buûd
);

55 
vútuÆ
 
núio_°©us
 
gë_©åibuã
(

56 c⁄° 
núio_devi˚_©åibuã32_t
 
©åibuã
,

57 
uöt32_t
& 
©åVÆue
);

59 
vútuÆ
 
núio_°©us
 
£t_©åibuã
(

60 c⁄° 
núio_devi˚_©åibuã32_t
 
©åibuã
,

61 c⁄° 
uöt32_t
 
vÆue
);

63 
vútuÆ
 
núio_°©us
 
≥ek
(
uöt32_t
 
off£t
, uöt32_t& 
vÆue
);

65 
vútuÆ
 
núio_°©us
 
≥ek
(
uöt32_t
 
off£t
, 
uöt64_t
& 
vÆue
);

67 
vútuÆ
 
núio_°©us
 
poke
(
uöt32_t
 
off£t
, c⁄° uöt32_t& 
vÆue
);

69 
vútuÆ
 
núio_°©us
 
poke
(
uöt32_t
 
off£t
, c⁄° 
uöt64_t
& 
vÆue
);

71 
vútuÆ
 
núio_°©us
 
m≠_fifo_mem‹y
(

72 
uöt32_t
 
fifo_ö°™˚
,

73 
size_t
 
size
,

74 
núio_drivî_iÁ˚
::
rio_mm≠_t
& 
m≠
);

76 
vútuÆ
 
núio_°©us
 
unm≠_fifo_mem‹y
(

77 
núio_drivî_iÁ˚
::
rio_mm≠_t
& 
m≠
);

79 
vútuÆ
 
núio_°©us
 
°›_Æl_fifos
();

81 
vútuÆ
 
núio_°©us
 
add_fifo_ªsour˚
(c⁄° 
núio_fifo_öfo_t
& 
fifo_öfo
);

83 
vútuÆ
 
núio_°©us
 
£t_devi˚_c⁄fig
();

85 
vútuÆ
 
núio_°©us
 
°¨t_fifo
(

86 
uöt32_t
 
ch™√l
);

88 
vútuÆ
 
núio_°©us
 
°›_fifo
(

89 
uöt32_t
 
ch™√l
);

91 
vútuÆ
 
núio_°©us
 
c⁄figuª_fifo
(

92 
uöt32_t
 
ch™√l
,

93 
uöt32_t
 
ªque°ed_dïth
,

94 
uöt8_t
 
ªquúes_a˘uÆs
,

95 
uöt32_t
& 
a˘uÆ_dïth
,

96 
uöt32_t
& 
a˘uÆ_size
);

98 
vútuÆ
 
núio_°©us
 
waô_⁄_fifo
(

99 
uöt32_t
 
ch™√l
,

100 
uöt32_t
 
ñemíts_ªque°ed
,

101 
uöt32_t
 
sˇœr_ty≥
,

102 
uöt32_t
 
bô_width
,

103 
uöt32_t
 
timeout
,

104 
uöt8_t
 
ouçut
,

105 *& 
d©a_poöãr
,

106 
uöt32_t
& 
ñemíts_acquúed
,

107 
uöt32_t
& 
ñemíts_ªmaöög
);

109 
vútuÆ
 
núio_°©us
 
gø¡_fifo
(

110 
uöt32_t
 
ch™√l
,

111 
uöt32_t
 
ñemíts_to_gø¡
);

113 
vútuÆ
 
núio_°©us
 
ªad_fifo
(

114 
uöt32_t
 
ch™√l
,

115 
uöt32_t
 
ñemíts_to_ªad
,

116 * 
buf„r
,

117 
uöt32_t
 
buf„r_d©©y≥_width
,

118 
uöt32_t
 
sˇœr_ty≥
,

119 
uöt32_t
 
bô_width
,

120 
uöt32_t
 
timeout
,

121 
uöt32_t
& 
numbî_ªad
,

122 
uöt32_t
& 
numbî_ªmaöög
);

124 
vútuÆ
 
núio_°©us
 
wrôe_fifo
(

125 
uöt32_t
 
ch™√l
,

126 
uöt32_t
 
ñemíts_to_wrôe
,

127 * 
buf„r
,

128 
uöt32_t
 
buf„r_d©©y≥_width
,

129 
uöt32_t
 
sˇœr_ty≥
,

130 
uöt32_t
 
bô_width
,

131 
uöt32_t
 
timeout
,

132 
uöt32_t
& 
numbî_ªmaöög
);

134 
	g¥Ÿe˘ed
:

136 
vútuÆ
 
_˛o£
();

	@host/include/uhd/transport/nirio/niusrprio_session.h

19 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_NIUSRPRIO_SESSION_H


20 
	#INCLUDED_UHD_TRANSPORT_NIRIO_NIUSRPRIO_SESSION_H


	)

22 
	~<°döt.h
>

23 
	~<uhd/å™•‹t/núio/Ωc/u§¥io_Ωc_˛õ¡.hµ
>

24 
	~<uhd/å™•‹t/núio/núiok_¥oxy.h
>

25 
	~<uhd/å™•‹t/núio/núio_ªsour˚_m™agî.h
>

26 
	~<uhd/å™•‹t/núio/niÂga_lvbôx.h
>

27 
	~<boo°/n⁄c›yabÀ.hµ
>

28 
	~<boo°/sm¨t_±r.hµ
>

29 
	~<boo°/thªad/ªcursive_muãx.hµ
>

30 
	~<°rög
>

32 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io
 {

34 ˛as†
	cUHD_API
 
	gniu§¥io_£ssi⁄
 : 
¥iv©e
 
boo°
::
n⁄c›yabÀ


36 
public
:

37 
boo°
::
	tsh¨ed_±r
<
	tniu§¥io_£ssi⁄
> 
	t•å
;

38 
	guhd
::
	tu§¥io_Ωc
::
	tu§¥io_devi˚_öfo
 
	tdevi˚_öfo
;

39 
	guhd
::
	tu§¥io_Ωc
::
	tu§¥io_devi˚_öfo_vå
 
	tdevi˚_öfo_vå
;

41 
núio_°©us
 
íumî©e
(

42 c⁄° 
°d
::
°rög
& 
Ωc_p‹t_«me
,

43 
devi˚_öfo_vå
& device_info_vtr);

45 
niu§¥io_£ssi⁄
(

46 c⁄° 
°d
::
°rög
& 
ªsour˚_«me
,

47 c⁄° 
°d
::
°rög
& 
p‹t_«me
);

48 
	gvútuÆ
 ~
niu§¥io_£ssi⁄
();

50 
núio_°©us
 
›í
(

51 
niÂga_lvbôx
::
•å
 
lvbôx
,

52 
boﬁ
 
f‹˚_dow∆ﬂd
 = 
Ál£
);

54 
˛o£
(
boﬁ
 
skù_ª£t
 = 
Ál£
);

56 
núio_°©us
 
ª£t
();

58 
	gãm∂©e
<
ty≥«me
 
	gd©a_t
>

59 
núio_°©us
 
¸óã_tx_fifo
(

60 c⁄° * 
fifo_«me
,

61 
boo°
::
sh¨ed_±r
< 
núio_fifo
<
d©a_t
> >& 
fifo
)

63 i‡(!
_£ssi⁄_›í
Ë 
NiRio_Sètus_Resour˚NŸInôülized
;

64  
	g_ªsour˚_m™agî
.
¸óã_tx_fifo
(
fifo_«me
, 
fifo
);

67 
	gãm∂©e
<
ty≥«me
 
	gd©a_t
>

68 
núio_°©us
 
¸óã_tx_fifo
(

69 
uöt32_t
 
fifo_ö°™˚
,

70 
boo°
::
sh¨ed_±r
< 
núio_fifo
<
d©a_t
> >& 
fifo
)

72 i‡((
size_t
)
fifo_ö°™˚
 >
_lvbôx
->
gë_ouçut_fifo_cou¡
()Ë 
NiRio_Sètus_InvÆidP¨amëî
;

73  
¸óã_tx_fifo
(
_lvbôx
->
gë_ouçut_fifo_«mes
()[
fifo_ö°™˚
], 
fifo
);

76 
	gãm∂©e
<
ty≥«me
 
	gd©a_t
>

77 
núio_°©us
 
¸óã_rx_fifo
(

78 c⁄° * 
fifo_«me
,

79 
boo°
::
sh¨ed_±r
< 
núio_fifo
<
d©a_t
> >& 
fifo
)

81 i‡(!
_£ssi⁄_›í
Ë 
NiRio_Sètus_Resour˚NŸInôülized
;

82  
	g_ªsour˚_m™agî
.
¸óã_rx_fifo
(
fifo_«me
, 
fifo
);

85 
	gãm∂©e
<
ty≥«me
 
	gd©a_t
>

86 
núio_°©us
 
¸óã_rx_fifo
(

87 
uöt32_t
 
fifo_ö°™˚
,

88 
boo°
::
sh¨ed_±r
< 
núio_fifo
<
d©a_t
> >& 
fifo
)

90 i‡((
size_t
)
fifo_ö°™˚
 >
_lvbôx
->
gë_öput_fifo_cou¡
()Ë 
NiRio_Sètus_InvÆidP¨amëî
;

91  
¸óã_rx_fifo
(
_lvbôx
->
gë_öput_fifo_«mes
()[
fifo_ö°™˚
], 
fifo
);

94 
UHD_INLINE
 
	gnúiok_¥oxy
::
•å
 
gë_kî√l_¥oxy
() {

95  
_riok_¥oxy
;

98 
núio_°©us
 
dow∆ﬂd_bô°ªam_to_Êash
(c⁄° 
°d
::
°rög
& 
bô°ªam_∑th
);

101 
	gnúiok_¥oxy
::
•å
 
¸óã_kî√l_¥oxy
(

102 c⁄° 
°d
::
°rög
& 
ªsour˚_«me
,

103 c⁄° 
°d
::
°rög
& 
Ωc_p‹t_«me
);

105 
	g¥iv©e
:

106 
núio_°©us
 
_vîify_sig«tuª
();

107 
	g°d
::
°rög
 
_ªad_bô°ªam_checksum
();

108 
núio_°©us
 
_wrôe_bô°ªam_checksum
(c⁄° 
°d
::
°rög
& 
checksum
);

109 
núio_°©us
 
_ísuª_Âga_ªady
();

111 
	g°d
::
°rög
 
_ªsour˚_«me
;

112 
	gniÂga_lvbôx
::
•å
 
_lvbôx
;

113 
	g°d
::
°rög
 
_öãrÁ˚_∑th
;

114 
boﬁ
 
	g_£ssi⁄_›í
;

115 
	gnúiok_¥oxy
::
•å
 
_riok_¥oxy
;

116 
núio_ªsour˚_m™agî
 
	g_ªsour˚_m™agî
;

117 
	gu§¥io_Ωc
::
u§¥io_Ωc_˛õ¡
 
_Ωc_˛õ¡
;

118 
	gboo°
::
ªcursive_muãx
 
_£ssi⁄_muãx
;

120 c⁄° 
uöt32_t
 
	gFPGA_READY_TIMEOUT_IN_MS
 = 1000;

121 c⁄° 
uöt32_t
 
	gSESSION_LOCK_TIMEOUT_IN_MS
 = 3000;

122 c⁄° 
uöt32_t
 
	gSESSION_LOCK_RETRY_INT_IN_MS
 = 500;

	@host/include/uhd/transport/nirio/status.h

19 #i‚de‡
INCLUDED_UHD_TRANSPORT_NIRIO_STATUS_H


20 
	#INCLUDED_UHD_TRANSPORT_NIRIO_STATUS_H


	)

22 
	~<°dio.h
>

23 
	~<°ddef.h
>

24 
	~<°döt.h
>

25 
	~<°rög
>

26 
	~<uhd/c⁄fig.hµ
>

27 
	~<uhd/ex˚±i⁄.hµ
>

29 
	#ENABLE_EXTENDED_ERROR_INFO
 
Ál£


	)

31 
öt32_t
 
	tnúio_°©us
;

33 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gniu§¥io
 {

34 
	snúio_îr_öfo
 {

35 
núio_îr_öfo
(
núio_°©us
 
¨g_code
, c⁄° * 
¨g_msg
): 
code
◊rg_code), 
msg
(arg_msg) {}

37 
núio_°©us
 
	gcode
;

38 c⁄° * 
	gmsg
;

40 c⁄° 
núio_îr_öfo
 
	gNIRIO_ERROR_TABLE
[];

41 c⁄° 
size_t
 
	gNIRIO_ERROR_TABLE_SIZE
;

44 
UHD_API
 c⁄° 
	g°d
::
°rög
 
lookup_îr_msg
(
núio_°©us
 
code
);

46 
UHD_API
 
núio_°©us_to_ex˚±i⁄
(c⁄° 
núio_°©us
& 
°©us
, c⁄° 
°d
::
°rög
& 
mesßge
);

49 
	#núio_°©us_Áèl
(
°©us
Ë((°©usË< 0)

	)

50 
	#núio_°©us_nŸ_Áèl
(
°©us
Ë((°©usË>0)

	)

52 
	#núio_°©us_chaö
(
func
, 
°©us
) \

53 i‡(
	`núio_°©us_nŸ_Áèl
(
°©us
)) { \

54 
°©us
 = (
func
); \

55 i‡(
ENABLE_EXTENDED_ERROR_INFO
 && 
	`núio_°©us_Áèl
(
°©us
)) { \

56 
	`Ârötf
(
°dîr
,"ERROR: Thêfﬁlowög fun˘i⁄ cÆ»ªtu∫ed sètu†codê%d\n%s\n%s:%d\n",
°©us
,#func,
__FILE__
,
__LINE__
); \

59 

	)

61 
	#NIRIO_ERR_INFO
(
CONST_NAME
, 
ERR_CODE
, 
ERR_MSG
) \

62 c⁄° 
núio_°©us
 
CONST_NAME
 = 
ERR_CODE
;

	)

63 
	~"núio_îr_ãm∂©e.h
"

64 #unde‡
NIRIO_ERR_INFO


	@host/include/uhd/types/metadata.h

18 #i‚de‡
INCLUDED_UHD_TYPES_METADATA_H


19 
	#INCLUDED_UHD_TYPES_METADATA_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°döt.h
>

26 
	~<°dlib.h
>

27 
	~<time.h
>

29 #ifde‡
__˝lu•lus


30 
	~<uhd/ty≥s/mëad©a.hµ
>

31 
	~<°rög
>

33 
	suhd_rx_mëad©a_t
 {

34 
	muhd
::
rx_mëad©a_t
 
rx_mëad©a_˝p
;

35 
	m°d
::
°rög
 
œ°_îr‹
;

38 
	suhd_tx_mëad©a_t
 {

39 
	muhd
::
tx_mëad©a_t
 
tx_mëad©a_˝p
;

40 
	m°d
::
°rög
 
œ°_îr‹
;

43 
	suhd_async_mëad©a_t
 {

44 
	muhd
::
async_mëad©a_t
 
async_mëad©a_˝p
;

45 
	m°d
::
°rög
 
œ°_îr‹
;

50 
uhd_rx_mëad©a_t
;

51 
	guhd_tx_mëad©a_t
;

52 
	guhd_async_mëad©a_t
;

62 
uhd_rx_mëad©a_t
* 
	tuhd_rx_mëad©a_h™dÀ
;

71 
uhd_tx_mëad©a_t
* 
	tuhd_tx_mëad©a_h™dÀ
;

80 
uhd_async_mëad©a_t
* 
	tuhd_async_mëad©a_h™dÀ
;

88 
	gUHD_RX_METADATA_ERROR_CODE_NONE
 = 0x0,

90 
	gUHD_RX_METADATA_ERROR_CODE_TIMEOUT
 = 0x1,

92 
	gUHD_RX_METADATA_ERROR_CODE_LATE_COMMAND
 = 0x2,

94 
	gUHD_RX_METADATA_ERROR_CODE_BROKEN_CHAIN
 = 0x4,

96 
	gUHD_RX_METADATA_ERROR_CODE_OVERFLOW
 = 0x8,

98 
	gUHD_RX_METADATA_ERROR_CODE_ALIGNMENT
 = 0xC,

100 
	gUHD_RX_METADATA_ERROR_CODE_BAD_PACKET
 = 0xF

101 } 
	tuhd_rx_mëad©a_îr‹_code_t
;

105 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_make
(

106 
uhd_rx_mëad©a_h™dÀ
* 
h™dÀ


113 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_‰ì
(

114 
uhd_rx_mëad©a_h™dÀ
* 
h™dÀ


118 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_has_time_•ec
(

119 
uhd_rx_mëad©a_h™dÀ
 
h
,

120 
boﬁ
 *
ªsu…_out


124 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_time_•ec
(

125 
uhd_rx_mëad©a_h™dÀ
 
h
,

126 
time_t
 *
fuŒ_£cs_out
,

127 *
‰ac_£cs_out


131 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_m‹e_‰agmíts
(

132 
uhd_rx_mëad©a_h™dÀ
 
h
,

133 
boﬁ
 *
ªsu…_out


137 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_‰agmít_off£t
(

138 
uhd_rx_mëad©a_h™dÀ
 
h
,

139 
size_t
 *
‰agmít_off£t_out


143 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_°¨t_of_bur°
(

144 
uhd_rx_mëad©a_h™dÀ
 
h
,

145 
boﬁ
 *
ªsu…_out


149 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_íd_of_bur°
(

150 
uhd_rx_mëad©a_h™dÀ
 
h
,

151 
boﬁ
 *
ªsu…_out


155 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_out_of_£quí˚
(

156 
uhd_rx_mëad©a_h™dÀ
 
h
,

157 
boﬁ
 *
ªsu…_out


169 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_to_µ_°rög
(

170 
uhd_rx_mëad©a_h™dÀ
 
h
,

171 * 
µ_°rög_out
,

172 
size_t
 
°rbuf„r_Àn


176 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_îr‹_code
(

177 
uhd_rx_mëad©a_h™dÀ
 
h
,

178 
uhd_rx_mëad©a_îr‹_code_t
 *
îr‹_code_out


195 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_°ªº‹
(

196 
uhd_rx_mëad©a_h™dÀ
 
h
,

197 * 
°ªº‹_out
,

198 
size_t
 
°rbuf„r_Àn


215 
UHD_API
 
uhd_îr‹
 
uhd_rx_mëad©a_œ°_îr‹
(

216 
uhd_rx_mëad©a_h™dÀ
 
h
,

217 * 
îr‹_out
,

218 
size_t
 
°rbuf„r_Àn


222 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_make
(

223 
uhd_tx_mëad©a_h™dÀ
* 
h™dÀ
,

224 
boﬁ
 
has_time_•ec
,

225 
time_t
 
fuŒ_£cs
,

226 
‰ac_£cs
,

227 
boﬁ
 
°¨t_of_bur°
,

228 
boﬁ
 
íd_of_bur°


236 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_‰ì
(

237 
uhd_tx_mëad©a_h™dÀ
* 
h™dÀ


241 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_has_time_•ec
(

242 
uhd_tx_mëad©a_h™dÀ
 
h
,

243 
boﬁ
 *
ªsu…_out


247 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_time_•ec
(

248 
uhd_tx_mëad©a_h™dÀ
 
h
,

249 
time_t
 *
fuŒ_£cs_out
,

250 *
‰ac_£cs_out


254 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_°¨t_of_bur°
(

255 
uhd_tx_mëad©a_h™dÀ
 
h
,

256 
boﬁ
 *
ªsu…_out


260 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_íd_of_bur°
(

261 
uhd_tx_mëad©a_h™dÀ
 
h
,

262 
boﬁ
 *
ªsu…_out


274 
UHD_API
 
uhd_îr‹
 
uhd_tx_mëad©a_œ°_îr‹
(

275 
uhd_tx_mëad©a_h™dÀ
 
h
,

276 * 
îr‹_out
,

277 
size_t
 
°rbuf„r_Àn


286 
	gUHD_ASYNC_METADATA_EVENT_CODE_BURST_ACK
 = 0x1,

288 
	gUHD_ASYNC_METADATA_EVENT_CODE_UNDERFLOW
 = 0x2,

290 
	gUHD_ASYNC_METADATA_EVENT_CODE_SEQ_ERROR
 = 0x4,

292 
	gUHD_ASYNC_METADATA_EVENT_CODE_TIME_ERROR
 = 0x8,

294 
	gUHD_ASYNC_METADATA_EVENT_CODE_UNDERFLOW_IN_PACKET
 = 0x10,

296 
	gUHD_ASYNC_METADATA_EVENT_CODE_SEQ_ERROR_IN_BURST
 = 0x20,

298 
	gUHD_ASYNC_METADATA_EVENT_CODE_USER_PAYLOAD
 = 0x40

299 } 
	tuhd_async_mëad©a_evít_code_t
;

302 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_make
(

303 
uhd_async_mëad©a_h™dÀ
* 
h™dÀ


310 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_‰ì
(

311 
uhd_async_mëad©a_h™dÀ
* 
h™dÀ


315 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_ch™√l
(

316 
uhd_async_mëad©a_h™dÀ
 
h
,

317 
size_t
 *
ch™√l_out


321 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_has_time_•ec
(

322 
uhd_async_mëad©a_h™dÀ
 
h
,

323 
boﬁ
 *
ªsu…_out


327 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_time_•ec
(

328 
uhd_async_mëad©a_h™dÀ
 
h
,

329 
time_t
 *
fuŒ_£cs_out
,

330 *
‰ac_£cs_out


334 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_evít_code
(

335 
uhd_async_mëad©a_h™dÀ
 
h
,

336 
uhd_async_mëad©a_evít_code_t
 *
evít_code_out


340 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_u£r_∑ylﬂd
(

341 
uhd_async_mëad©a_h™dÀ
 
h
,

342 
uöt32_t
 
u£r_∑ylﬂd_out
[4]

354 
UHD_API
 
uhd_îr‹
 
uhd_async_mëad©a_œ°_îr‹
(

355 
uhd_async_mëad©a_h™dÀ
 
h
,

356 * 
îr‹_out
,

357 
size_t
 
°rbuf„r_Àn


360 #ifde‡
__˝lu•lus


	@host/include/uhd/types/ranges.h

18 #i‚de‡
INCLUDED_UHD_TYPES_RANGES_H


19 
	#INCLUDED_UHD_TYPES_RANGES_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°dlib.h
>

30 
	m°¨t
;

32 
	m°›
;

34 
	m°ï
;

35 } 
	tuhd_ønge_t
;

37 #ifde‡
__˝lu•lus


38 
	~<uhd/ty≥s/ønges.hµ
>

39 
	~<°rög
>

41 
	suhd_mëa_ønge_t
 {

42 
	muhd
::
mëa_ønge_t
 
mëa_ønge_˝p
;

43 
	m°d
::
°rög
 
œ°_îr‹
;

48 
uhd_mëa_ønge_t
;

55 
uhd_mëa_ønge_t
* 
	tuhd_mëa_ønge_h™dÀ
;

58 
UHD_API
 
uhd_îr‹
 
uhd_ønge_to_µ_°rög
(

59 c⁄° 
uhd_ønge_t
 *
ønge
,

60 * 
µ_°rög_out
,

61 
size_t
 
°rbuf„r_Àn


69 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_make
(

70 
uhd_mëa_ønge_h™dÀ
* 
h


78 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_‰ì
(

79 
uhd_mëa_ønge_h™dÀ
* 
h


83 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_°¨t
(

84 
uhd_mëa_ønge_h™dÀ
 
h
,

85 *
°¨t_out


89 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_°›
(

90 
uhd_mëa_ønge_h™dÀ
 
h
,

91 *
°›_out


95 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_°ï
(

96 
uhd_mëa_ønge_h™dÀ
 
h
,

97 *
°ï_out


101 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_˛ù
(

102 
uhd_mëa_ønge_h™dÀ
 
h
,

103 
vÆue
,

104 
boﬁ
 
˛ù_°ï
,

105 *
ªsu…_out


109 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_size
(

110 
uhd_mëa_ønge_h™dÀ
 
h
,

111 
size_t
 *
size_out


115 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_push_back
(

116 
uhd_mëa_ønge_h™dÀ
 
h
,

117 c⁄° 
uhd_ønge_t
 *
ønge


121 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_©
(

122 
uhd_mëa_ønge_h™dÀ
 
h
,

123 
size_t
 
num
,

124 
uhd_ønge_t
 *
ønge_out


128 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_to_µ_°rög
(

129 
uhd_mëa_ønge_h™dÀ
 
h
,

130 * 
µ_°rög_out
,

131 
size_t
 
°rbuf„r_Àn


135 
UHD_API
 
uhd_îr‹
 
uhd_mëa_ønge_œ°_îr‹
(

136 
uhd_mëa_ønge_h™dÀ
 
h
,

137 * 
îr‹_out
,

138 
size_t
 
°rbuf„r_Àn


141 #ifde‡
__˝lu•lus


144 
UHD_API
 
	guhd
::
ønge_t
 
uhd_ønge_c_to_˝p
(

145 c⁄° 
uhd_ønge_t
 *
ønge_c


148 
UHD_API
 
uhd_ønge_˝p_to_c
(

149 c⁄° 
uhd
::
ønge_t
 &
ønge_˝p
,

150 
uhd_ønge_t
 *
ønge_c


	@host/include/uhd/types/sensors.h

18 #i‚de‡
INCLUDED_UHD_TYPES_SENSORS_H


19 
	#INCLUDED_UHD_TYPES_SENSORS_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 #ifde‡
__˝lu•lus


25 
	~<uhd/ty≥s/£ns‹s.hµ
>

26 
	~<°rög
>

28 
	suhd_£ns‹_vÆue_t
 {

30 
	muhd
::
£ns‹_vÆue_t
* 
£ns‹_vÆue_˝p
;

31 
	m°d
::
°rög
 
œ°_îr‹
;

35 
uhd_£ns‹_vÆue_t
;

44 
uhd_£ns‹_vÆue_t
* 
	tuhd_£ns‹_vÆue_h™dÀ
;

48 
	gUHD_SENSOR_VALUE_BOOLEAN
 = 98,

49 
	gUHD_SENSOR_VALUE_INTEGER
 = 105,

50 
	gUHD_SENSOR_VALUE_REALNUM
 = 114,

51 
	gUHD_SENSOR_VALUE_STRING
 = 115

52 } 
	tuhd_£ns‹_vÆue_d©a_ty≥_t
;

63 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_make_‰om_boﬁ
(

64 
uhd_£ns‹_vÆue_h™dÀ
* 
h
,

65 c⁄° * 
«me
,

66 
boﬁ
 
vÆue
,

67 c⁄° * 
uåue
,

68 c⁄° * 
uÁl£


80 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_make_‰om_öt
(

81 
uhd_£ns‹_vÆue_h™dÀ
* 
h
,

82 c⁄° * 
«me
,

83 
vÆue
,

84 c⁄° * 
unô
,

85 c⁄° * 
f‹m©ãr


97 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_make_‰om_ªÆnum
(

98 
uhd_£ns‹_vÆue_h™dÀ
* 
h
,

99 c⁄° * 
«me
,

100 
vÆue
,

101 c⁄° * 
unô
,

102 c⁄° * 
f‹m©ãr


113 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_make_‰om_°rög
(

114 
uhd_£ns‹_vÆue_h™dÀ
* 
h
,

115 c⁄° * 
«me
,

116 c⁄° * 
vÆue
,

117 c⁄° * 
unô


125 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_‰ì
(

126 
uhd_£ns‹_vÆue_h™dÀ
* 
h


130 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_to_boﬁ
(

131 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

132 
boﬁ
 *
vÆue_out


136 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_to_öt
(

137 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

138 *
vÆue_out


142 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_to_ªÆnum
(

143 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

144 *
vÆue_out


156 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_«me
(

157 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

158 * 
«me_out
,

159 
size_t
 
°rbuf„r_Àn


171 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_vÆue
(

172 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

173 * 
vÆue_out
,

174 
size_t
 
°rbuf„r_Àn


186 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_unô
(

187 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

188 * 
unô_out
,

189 
size_t
 
°rbuf„r_Àn


192 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_d©a_ty≥
(

193 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

194 
uhd_£ns‹_vÆue_d©a_ty≥_t
 *
d©a_ty≥_out


206 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_to_µ_°rög
(

207 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

208 * 
µ_°rög_out
,

209 
size_t
 
°rbuf„r_Àn


221 
UHD_API
 
uhd_îr‹
 
uhd_£ns‹_vÆue_œ°_îr‹
(

222 
uhd_£ns‹_vÆue_h™dÀ
 
h
,

223 * 
îr‹_out
,

224 
size_t
 
°rbuf„r_Àn


227 #ifde‡
__˝lu•lus


	@host/include/uhd/types/string_vector.h

18 #i‚de‡
INCLUDED_UHD_TYPES_STRING_VECTOR_H


19 
	#INCLUDED_UHD_TYPES_STRING_VECTOR_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 
	~<°dlib.h
>

26 #ifde‡
__˝lu•lus


27 
	~<°rög
>

28 
	~<ve˘‹
>

30 
	suhd_°rög_ve˘‹_t
 {

31 
	m°d
::
ve˘‹
<
°d
::
°rög
> 
°rög_ve˘‹_˝p
;

32 
	m°d
::
°rög
 
œ°_îr‹
;

38 
uhd_°rög_ve˘‹_t
;

41 
uhd_°rög_ve˘‹_t
 
	tuhd_°rög_ve˘‹_t
;

43 
uhd_°rög_ve˘‹_t
* 
	tuhd_°rög_ve˘‹_h™dÀ
;

46 
UHD_API
 
uhd_îr‹
 
uhd_°rög_ve˘‹_make
(

47 
uhd_°rög_ve˘‹_h™dÀ
 *
h


51 
UHD_API
 
uhd_îr‹
 
uhd_°rög_ve˘‹_‰ì
(

52 
uhd_°rög_ve˘‹_h™dÀ
 *
h


56 
UHD_API
 
uhd_îr‹
 
uhd_°rög_ve˘‹_push_back
(

57 
uhd_°rög_ve˘‹_h™dÀ
 *
h
,

58 c⁄° * 
vÆue


62 
UHD_API
 
uhd_îr‹
 
uhd_°rög_ve˘‹_©
(

63 
uhd_°rög_ve˘‹_h™dÀ
 
h
,

64 
size_t
 
ödex
,

65 * 
vÆue_out
,

66 
size_t
 
°rbuf„r_Àn


70 
UHD_API
 
uhd_îr‹
 
uhd_°rög_ve˘‹_size
(

71 
uhd_°rög_ve˘‹_h™dÀ
 
h
,

72 
size_t
 *
size_out


76 
UHD_API
 
uhd_îr‹
 
uhd_°rög_ve˘‹_œ°_îr‹
(

77 
uhd_°rög_ve˘‹_h™dÀ
 
h
,

78 * 
îr‹_out
,

79 
size_t
 
°rbuf„r_Àn


82 #ifde‡
__˝lu•lus


	@host/include/uhd/types/tune_request.h

18 #i‚de‡
INCLUDED_UHD_TYPES_TUNE_REQUEST_H


19 
	#INCLUDED_UHD_TYPES_TUNE_REQUEST_H


	)

21 
	~<uhd/c⁄fig.h
>

23 
	~<°dlib.h
>

28 
	mUHD_TUNE_REQUEST_POLICY_NONE
 = 78,

30 
	mUHD_TUNE_REQUEST_POLICY_AUTO
 = 65,

32 
	mUHD_TUNE_REQUEST_POLICY_MANUAL
 = 77

33 } 
	tuhd_tu√_ªque°_pﬁicy_t
;

41 
	mèrgë_‰eq
;

43 
uhd_tu√_ªque°_pﬁicy_t
 
	mrf_‰eq_pﬁicy
;

45 
	mrf_‰eq
;

47 
uhd_tu√_ªque°_pﬁicy_t
 
	md•_‰eq_pﬁicy
;

49 
	md•_‰eq
;

51 * 
	m¨gs
;

52 } 
	tuhd_tu√_ªque°_t
;

54 #ifde‡
__˝lu•lus


55 
	~<uhd/ty≥s/tu√_ªque°.hµ
>

57 
UHD_API
 
	guhd
::
tu√_ªque°_t
 
uhd_tu√_ªque°_c_to_˝p
(
uhd_tu√_ªque°_t
 *
tu√_ªque°_c
);

	@host/include/uhd/types/tune_result.h

18 #i‚de‡
INCLUDED_UHD_TYPES_TUNE_RESULT_H


19 
	#INCLUDED_UHD_TYPES_TUNE_RESULT_H


	)

21 
	~<uhd/c⁄fig.h
>

23 
	~<°dlib.h
>

31 
	m˛ù≥d_rf_‰eq
;

33 
	mèrgë_rf_‰eq
;

35 
	ma˘uÆ_rf_‰eq
;

37 
	mèrgë_d•_‰eq
;

39 
	ma˘uÆ_d•_‰eq
;

40 } 
	tuhd_tu√_ªsu…_t
;

42 #ifde‡
__˝lu•lus


47 
UHD_API
 
uhd_tu√_ªsu…_to_µ_°rög
(
uhd_tu√_ªsu…_t
 *
tu√_ªsu…
,

48 * 
µ_°rög_out
, 
size_t
 
°rbuf„r_Àn
);

50 #ifde‡
__˝lu•lus


52 
	~<uhd/ty≥s/tu√_ªsu….hµ
>

54 
UHD_API
 
uhd
::
tu√_ªsu…_t
 
uhd_tu√_ªsu…_c_to_˝p
(
uhd_tu√_ªsu…_t
 *
tu√_ªsu…_c
);

56 
UHD_API
 
uhd_tu√_ªsu…_˝p_to_c
(c⁄° 
uhd
::
tu√_ªsu…_t
 &
tu√_ªsu…_˝p
,

57 
uhd_tu√_ªsu…_t
 *
tu√_ªsu…_c
);

	@host/include/uhd/types/usrp_info.h

18 #i‚de‡
INCLUDED_UHD_TYPES_USRP_INFO_H


19 
	#INCLUDED_UHD_TYPES_USRP_INFO_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

30 * 
	mmbﬂrd_id
;

32 * 
	mmbﬂrd_«me
;

34 * 
	mmbﬂrd_£rül
;

36 * 
	mrx_id
;

38 * 
	mrx_subdev_«me
;

40 * 
	mrx_subdev_•ec
;

42 * 
	mrx_£rül
;

44 * 
	mrx_™ã¬a
;

45 } 
	tuhd_u§p_rx_öfo_t
;

53 * 
	mmbﬂrd_id
;

55 * 
	mmbﬂrd_«me
;

57 * 
	mmbﬂrd_£rül
;

59 * 
	mtx_id
;

61 * 
	mtx_subdev_«me
;

63 * 
	mtx_subdev_•ec
;

65 * 
	mtx_£rül
;

67 * 
	mtx_™ã¬a
;

68 } 
	tuhd_u§p_tx_öfo_t
;

70 #ifde‡
__˝lu•lus


80 
UHD_API
 
uhd_îr‹
 
uhd_u§p_rx_öfo_‰ì
(
uhd_u§p_rx_öfo_t
 *
rx_öfo
);

88 
UHD_API
 
uhd_îr‹
 
uhd_u§p_tx_öfo_‰ì
(
uhd_u§p_tx_öfo_t
 *
tx_öfo
);

90 #ifde‡
__˝lu•lus


	@host/include/uhd/usrp/dboard_eeprom.h

18 #i‚de‡
INCLUDED_UHD_USRP_DBOARD_EEPROM_H


19 
	#INCLUDED_UHD_USRP_DBOARD_EEPROM_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 #ifde‡
__˝lu•lus


25 
	~<uhd/u§p/dbﬂrd_ì¥om.hµ
>

26 
	~<°rög
>

28 
	suhd_dbﬂrd_ì¥om_t
 {

29 
	muhd
::
u§p
::
dbﬂrd_ì¥om_t
 
dbﬂrd_ì¥om_˝p
;

30 
	m°d
::
°rög
 
œ°_îr‹
;

35 
uhd_dbﬂrd_ì¥om_t
;

45 
uhd_dbﬂrd_ì¥om_t
* 
	tuhd_dbﬂrd_ì¥om_h™dÀ
;

48 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_make
(

49 
uhd_dbﬂrd_ì¥om_h™dÀ
* 
h


57 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_‰ì
(

58 
uhd_dbﬂrd_ì¥om_h™dÀ
* 
h


62 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_gë_id
(

63 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

64 * 
id_out
,

65 
size_t
 
°rbuf„r_Àn


69 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_£t_id
(

70 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

71 c⁄° * 
id


75 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_gë_£rül
(

76 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

77 * 
£rül_out
,

78 
size_t
 
°rbuf„r_Àn


82 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_£t_£rül
(

83 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

84 c⁄° * 
£rül


88 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_gë_ªvisi⁄
(

89 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

90 * 
ªvisi⁄_out


94 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_£t_ªvisi⁄
(

95 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

96 
ªvisi⁄


100 
UHD_API
 
uhd_îr‹
 
uhd_dbﬂrd_ì¥om_œ°_îr‹
(

101 
uhd_dbﬂrd_ì¥om_h™dÀ
 
h
,

102 * 
îr‹_out
,

103 
size_t
 
°rbuf„r_Àn


106 #ifde‡
__˝lu•lus


	@host/include/uhd/usrp/mboard_eeprom.h

18 #i‚de‡
INCLUDED_UHD_USRP_MBOARD_EEPROM_H


19 
	#INCLUDED_UHD_USRP_MBOARD_EEPROM_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 #ifde‡
__˝lu•lus


25 
	~<uhd/u§p/mbﬂrd_ì¥om.hµ
>

26 
	~<°rög
>

28 
	suhd_mbﬂrd_ì¥om_t
 {

29 
	muhd
::
u§p
::
mbﬂrd_ì¥om_t
 
mbﬂrd_ì¥om_˝p
;

30 
	m°d
::
°rög
 
œ°_îr‹
;

35 
uhd_mbﬂrd_ì¥om_t
;

45 
uhd_mbﬂrd_ì¥om_t
* 
	tuhd_mbﬂrd_ì¥om_h™dÀ
;

48 
UHD_API
 
uhd_îr‹
 
uhd_mbﬂrd_ì¥om_make
(

49 
uhd_mbﬂrd_ì¥om_h™dÀ
* 
h


57 
UHD_API
 
uhd_îr‹
 
uhd_mbﬂrd_ì¥om_‰ì
(

58 
uhd_mbﬂrd_ì¥om_h™dÀ
* 
h


62 
UHD_API
 
uhd_îr‹
 
uhd_mbﬂrd_ì¥om_gë_vÆue
(

63 
uhd_mbﬂrd_ì¥om_h™dÀ
 
h
,

64 c⁄° * 
key
,

65 * 
vÆue_out
,

66 
size_t
 
°rbuf„r_Àn


70 
UHD_API
 
uhd_îr‹
 
uhd_mbﬂrd_ì¥om_£t_vÆue
(

71 
uhd_mbﬂrd_ì¥om_h™dÀ
 
h
,

72 c⁄° * 
key
,

73 c⁄° * 
vÆue


77 
UHD_API
 
uhd_îr‹
 
uhd_mbﬂrd_ì¥om_œ°_îr‹
(

78 
uhd_mbﬂrd_ì¥om_h™dÀ
 
h
,

79 * 
îr‹_out
,

80 
size_t
 
°rbuf„r_Àn


83 #ifde‡
__˝lu•lus


	@host/include/uhd/usrp/subdev_spec.h

18 #i‚de‡
INCLUDED_UHD_USRP_SUBDEV_SPEC_H


19 
	#INCLUDED_UHD_USRP_SUBDEV_SPEC_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 
	~<°dboﬁ.h
>

29 * 
	mdb_«me
;

31 * 
	msd_«me
;

32 } 
	tuhd_subdev_•ec_∑ú_t
;

34 #ifde‡
__˝lu•lus


35 
	~<uhd/u§p/subdev_•ec.hµ
>

36 
	~<°rög
>

38 
	suhd_subdev_•ec_t
 {

39 
	muhd
::
u§p
::
subdev_•ec_t
 
subdev_•ec_˝p
;

40 
	m°d
::
°rög
 
œ°_îr‹
;

45 
uhd_subdev_•ec_t
;

55 
uhd_subdev_•ec_t
* 
	tuhd_subdev_•ec_h™dÀ
;

58 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_∑ú_‰ì
(

59 
uhd_subdev_•ec_∑ú_t
 *
subdev_•ec_∑ú


63 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_∑ús_equÆ
(

64 c⁄° 
uhd_subdev_•ec_∑ú_t
* 
fú°
,

65 c⁄° 
uhd_subdev_•ec_∑ú_t
* 
£c⁄d
,

66 
boﬁ
 *
ªsu…_out


70 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_make
(

71 
uhd_subdev_•ec_h™dÀ
* 
h
,

72 c⁄° * 
m¨kup


80 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_‰ì
(

81 
uhd_subdev_•ec_h™dÀ
* 
h


85 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_size
(

86 
uhd_subdev_•ec_h™dÀ
 
h
,

87 
size_t
 *
size_out


91 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_push_back
(

92 
uhd_subdev_•ec_h™dÀ
 
h
,

93 c⁄° * 
m¨kup


97 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_©
(

98 
uhd_subdev_•ec_h™dÀ
 
h
,

99 
size_t
 
num
,

100 
uhd_subdev_•ec_∑ú_t
 *
subdev_•ec_∑ú_out


104 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_to_µ_°rög
(

105 
uhd_subdev_•ec_h™dÀ
 
h
,

106 * 
µ_°rög_out
,

107 
size_t
 
°rbuf„r_Àn


111 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_to_°rög
(

112 
uhd_subdev_•ec_h™dÀ
 
h
,

113 * 
°rög_out
,

114 
size_t
 
°rbuf„r_Àn


118 
UHD_API
 
uhd_îr‹
 
uhd_subdev_•ec_œ°_îr‹
(

119 
uhd_subdev_•ec_h™dÀ
 
h
,

120 * 
îr‹_out
,

121 
size_t
 
°rbuf„r_Àn


124 #ifde‡
__˝lu•lus


127 
UHD_API
 
	guhd
::
u§p
::
subdev_•ec_∑ú_t
 
uhd_subdev_•ec_∑ú_c_to_˝p
(

128 c⁄° 
uhd_subdev_•ec_∑ú_t
* 
subdev_•ec_∑ú_c


131 
UHD_API
 
uhd_subdev_•ec_∑ú_˝p_to_c
(

132 c⁄° 
uhd
::
u§p
::
subdev_•ec_∑ú_t
 &
subdev_•ec_∑ú_˝p
,

133 
uhd_subdev_•ec_∑ú_t
 *
subdev_•ec_∑ú_c


	@host/include/uhd/usrp/usrp.h

18 #i‚de‡
INCLUDED_UHD_USRP_H


19 
	#INCLUDED_UHD_USRP_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

23 
	~<uhd/ty≥s/mëad©a.h
>

24 
	~<uhd/ty≥s/ønges.h
>

25 
	~<uhd/ty≥s/£ns‹s.h
>

26 
	~<uhd/ty≥s/°rög_ve˘‹.h
>

27 
	~<uhd/ty≥s/tu√_ªque°.h
>

28 
	~<uhd/ty≥s/tu√_ªsu….h
>

29 
	~<uhd/ty≥s/u§p_öfo.h
>

30 
	~<uhd/u§p/mbﬂrd_ì¥om.h
>

31 
	~<uhd/u§p/dbﬂrd_ì¥om.h
>

32 
	~<uhd/u§p/subdev_•ec.h
>

34 
	~<uhd/vîsi⁄.hµ
>

36 
	~<°dboﬁ.h
>

37 
	~<°dlib.h
>

38 
	~<°döt.h
>

39 
	~<time.h
>

43 
size_t
 
	mbôwidth
;

44 
boﬁ
 
	mªadabÀ
;

45 
boﬁ
 
	mwrôabÀ
;

46 } 
	tuhd_u§p_ªgi°î_öfo_t
;

58 * 
	m˝u_f‹m©
;

60 * 
	mŸw_f‹m©
;

62 * 
	m¨gs
;

64 
size_t
* 
	mch™√l_li°
;

66 
	mn_ch™√ls
;

67 } 
	tuhd_°ªam_¨gs_t
;

75 
	mUHD_STREAM_MODE_START_CONTINUOUS
 = 97,

77 
	mUHD_STREAM_MODE_STOP_CONTINUOUS
 = 111,

79 
	mUHD_STREAM_MODE_NUM_SAMPS_AND_DONE
 = 100,

81 
	mUHD_STREAM_MODE_NUM_SAMPS_AND_MORE
 = 109

82 } 
	tuhd_°ªam_mode_t
;

90 
uhd_°ªam_mode_t
 
	m°ªam_mode
;

92 
size_t
 
	mnum_ßmps
;

94 
boﬁ
 
	m°ªam_now
;

96 
time_t
 
	mtime_•ec_fuŒ_£cs
;

98 
	mtime_•ec_‰ac_£cs
;

99 } 
	tuhd_°ªam_cmd_t
;

101 
	guhd_rx_°ªamî
;

102 
	guhd_tx_°ªamî
;

108 
uhd_rx_°ªamî
* 
	tuhd_rx_°ªamî_h™dÀ
;

114 
uhd_tx_°ªamî
* 
	tuhd_tx_°ªamî_h™dÀ
;

116 #ifde‡
__˝lu•lus


129 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_make
(

130 
uhd_rx_°ªamî_h™dÀ
 *
h


138 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_‰ì
(

139 
uhd_rx_°ªamî_h™dÀ
 *
h


143 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_num_ch™√ls
(

144 
uhd_rx_°ªamî_h™dÀ
 
h
,

145 
size_t
 *
num_ch™√ls_out


149 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_max_num_ßmps
(

150 
uhd_rx_°ªamî_h™dÀ
 
h
,

151 
size_t
 *
max_num_ßmps_out


166 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_ªcv
(

167 
uhd_rx_°ªamî_h™dÀ
 
h
,

168 ** 
buffs
,

169 
size_t
 
ßmps_≥r_buff
,

170 
uhd_rx_mëad©a_h™dÀ
 *
md
,

171 
timeout
,

172 
boﬁ
 
⁄e_∑ckë
,

173 
size_t
 *
ôems_ªcvd


180 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_issue_°ªam_cmd
(

181 
uhd_rx_°ªamî_h™dÀ
 
h
,

182 c⁄° 
uhd_°ªam_cmd_t
 *
°ªam_cmd


194 
UHD_API
 
uhd_îr‹
 
uhd_rx_°ªamî_œ°_îr‹
(

195 
uhd_rx_°ªamî_h™dÀ
 
h
,

196 * 
îr‹_out
,

197 
size_t
 
°rbuf„r_Àn


209 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_make
(

210 
uhd_tx_°ªamî_h™dÀ
 *
h


218 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_‰ì
(

219 
uhd_tx_°ªamî_h™dÀ
 *
h


223 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_num_ch™√ls
(

224 
uhd_tx_°ªamî_h™dÀ
 
h
,

225 
size_t
 *
num_ch™√ls_out


229 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_max_num_ßmps
(

230 
uhd_tx_°ªamî_h™dÀ
 
h
,

231 
size_t
 *
max_num_ßmps_out


245 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_£nd
(

246 
uhd_tx_°ªamî_h™dÀ
 
h
,

247 c⁄° **
buffs
,

248 
size_t
 
ßmps_≥r_buff
,

249 
uhd_tx_mëad©a_h™dÀ
 *
md
,

250 
timeout
,

251 
size_t
 *
ôems_£¡


258 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_ªcv_async_msg
(

259 
uhd_tx_°ªamî_h™dÀ
 
h
,

260 
uhd_async_mëad©a_h™dÀ
 *
md
,

261 
timeout
,

262 
boﬁ
 *
vÆid


274 
UHD_API
 
uhd_îr‹
 
uhd_tx_°ªamî_œ°_îr‹
(

275 
uhd_tx_°ªamî_h™dÀ
 
h
,

276 * 
îr‹_out
,

277 
size_t
 
°rbuf„r_Àn


280 #ifde‡
__˝lu•lus


287 
uhd_u§p
;

295 
uhd_u§p
* 
	tuhd_u§p_h™dÀ
;

300 #ifde‡
__˝lu•lus


308 
UHD_API
 
uhd_îr‹
 
uhd_u§p_föd
(

309 c⁄° * 
¨gs
,

310 
uhd_°rög_ve˘‹_h™dÀ
 *
°rögs_out


318 
UHD_API
 
uhd_îr‹
 
uhd_u§p_make
(

319 
uhd_u§p_h™dÀ
 *
h
,

320 c⁄° *
¨gs


328 
UHD_API
 
uhd_îr‹
 
uhd_u§p_‰ì
(

329 
uhd_u§p_h™dÀ
 *
h


333 
UHD_API
 
uhd_îr‹
 
uhd_u§p_œ°_îr‹
(

334 
uhd_u§p_h™dÀ
 
h
,

335 * 
îr‹_out
,

336 
size_t
 
°rbuf„r_Àn


340 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_°ªam
(

341 
uhd_u§p_h™dÀ
 
h
,

342 
uhd_°ªam_¨gs_t
 *
°ªam_¨gs
,

343 
uhd_rx_°ªamî_h™dÀ
 
h_out


347 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_°ªam
(

348 
uhd_u§p_h™dÀ
 
h
,

349 
uhd_°ªam_¨gs_t
 *
°ªam_¨gs
,

350 
uhd_tx_°ªamî_h™dÀ
 
h_out


361 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_öfo
(

362 
uhd_u§p_h™dÀ
 
h
,

363 
size_t
 
ch™
,

364 
uhd_u§p_rx_öfo_t
 *
öfo_out


371 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_öfo
(

372 
uhd_u§p_h™dÀ
 
h
,

373 
size_t
 
ch™
,

374 
uhd_u§p_tx_öfo_t
 *
öfo_out


385 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_ma°î_˛ock_øã
(

386 
uhd_u§p_h™dÀ
 
h
,

387 
øã
,

388 
size_t
 
mbﬂrd


395 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_ma°î_˛ock_øã
(

396 
uhd_u§p_h™dÀ
 
h
,

397 
size_t
 
mbﬂrd
,

398 *
˛ock_øã_out


405 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_µ_°rög
(

406 
uhd_u§p_h™dÀ
 
h
,

407 * 
µ_°rög_out
,

408 
size_t
 
°rbuf„r_Àn


415 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_mbﬂrd_«me
(

416 
uhd_u§p_h™dÀ
 
h
,

417 
size_t
 
mbﬂrd
,

418 * 
mbﬂrd_«me_out
,

419 
size_t
 
°rbuf„r_Àn


426 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_time_now
(

427 
uhd_u§p_h™dÀ
 
h
,

428 
size_t
 
mbﬂrd
,

429 
time_t
 *
fuŒ_£cs_out
,

430 *
‰ac_£cs_out


437 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_time_œ°_µs
(

438 
uhd_u§p_h™dÀ
 
h
,

439 
size_t
 
mbﬂrd
,

440 
time_t
 *
fuŒ_£cs_out
,

441 *
‰ac_£cs_out


448 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_time_now
(

449 
uhd_u§p_h™dÀ
 
h
,

450 
time_t
 
fuŒ_£cs
,

451 
‰ac_£cs
,

452 
size_t
 
mbﬂrd


459 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_time_√xt_µs
(

460 
uhd_u§p_h™dÀ
 
h
,

461 
time_t
 
fuŒ_£cs
,

462 
‰ac_£cs
,

463 
size_t
 
mbﬂrd


470 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_time_unknown_µs
(

471 
uhd_u§p_h™dÀ
 
h
,

472 
time_t
 
fuŒ_£cs
,

473 
‰ac_£cs


477 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_time_synchr⁄ized
(

478 
uhd_u§p_h™dÀ
 
h
,

479 
boﬁ
 *
ªsu…_out


486 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_comm™d_time
(

487 
uhd_u§p_h™dÀ
 
h
,

488 
time_t
 
fuŒ_£cs
,

489 
‰ac_£cs
,

490 
size_t
 
mbﬂrd


494 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ór_comm™d_time
(

495 
uhd_u§p_h™dÀ
 
h
,

496 
size_t
 
mbﬂrd


503 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_time_sour˚
(

504 
uhd_u§p_h™dÀ
 
h
,

505 c⁄° * 
time_sour˚
,

506 
size_t
 
mbﬂrd


513 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_time_sour˚
(

514 
uhd_u§p_h™dÀ
 
h
,

515 
size_t
 
mbﬂrd
,

516 * 
time_sour˚_out
,

517 
size_t
 
°rbuf„r_Àn


521 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_time_sour˚s
(

522 
uhd_u§p_h™dÀ
 
h
,

523 
size_t
 
mbﬂrd
,

524 
uhd_°rög_ve˘‹_h™dÀ
 *
time_sour˚s_out


531 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_˛ock_sour˚
(

532 
uhd_u§p_h™dÀ
 
h
,

533 c⁄° * 
˛ock_sour˚
,

534 
size_t
 
mbﬂrd


541 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_˛ock_sour˚
(

542 
uhd_u§p_h™dÀ
 
h
,

543 
size_t
 
mbﬂrd
,

544 * 
˛ock_sour˚_out
,

545 
size_t
 
°rbuf„r_Àn


549 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_˛ock_sour˚s
(

550 
uhd_u§p_h™dÀ
 
h
,

551 
size_t
 
mbﬂrd
,

552 
uhd_°rög_ve˘‹_h™dÀ
 *
˛ock_sour˚s_out


559 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_˛ock_sour˚_out
(

560 
uhd_u§p_h™dÀ
 
h
,

561 
boﬁ
 
íb
,

562 
size_t
 
mbﬂrd


569 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_time_sour˚_out
(

570 
uhd_u§p_h™dÀ
 
h
,

571 
boﬁ
 
íb
,

572 
size_t
 
mbﬂrd


576 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_num_mbﬂrds
(

577 
uhd_u§p_h™dÀ
 
h
,

578 
size_t
 *
num_mbﬂrds_out


582 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_mbﬂrd_£ns‹
(

583 
uhd_u§p_h™dÀ
 
h
,

584 c⁄° * 
«me
,

585 
size_t
 
mbﬂrd
,

586 
uhd_£ns‹_vÆue_h™dÀ
 *
£ns‹_vÆue_out


590 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_mbﬂrd_£ns‹_«mes
(

591 
uhd_u§p_h™dÀ
 
h
,

592 
size_t
 
mbﬂrd
,

593 
uhd_°rög_ve˘‹_h™dÀ
 *
mbﬂrd_£ns‹_«mes_out


600 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_u£r_ªgi°î
(

601 
uhd_u§p_h™dÀ
 
h
,

602 
uöt8_t
 
addr
,

603 
uöt32_t
 
d©a
,

604 
size_t
 
mbﬂrd


612 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_mbﬂrd_ì¥om
(

613 
uhd_u§p_h™dÀ
 
h
,

614 
uhd_mbﬂrd_ì¥om_h™dÀ
 
mb_ì¥om
,

615 
size_t
 
mbﬂrd


619 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_mbﬂrd_ì¥om
(

620 
uhd_u§p_h™dÀ
 
h
,

621 
uhd_mbﬂrd_ì¥om_h™dÀ
 
mb_ì¥om
,

622 
size_t
 
mbﬂrd


626 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_dbﬂrd_ì¥om
(

627 
uhd_u§p_h™dÀ
 
h
,

628 
uhd_dbﬂrd_ì¥om_h™dÀ
 
db_ì¥om
,

629 c⁄° * 
unô
,

630 c⁄° * 
¶Ÿ
,

631 
size_t
 
mbﬂrd


635 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_dbﬂrd_ì¥om
(

636 
uhd_u§p_h™dÀ
 
h
,

637 
uhd_dbﬂrd_ì¥om_h™dÀ
 
db_ì¥om
,

638 c⁄° * 
unô
,

639 c⁄° * 
¶Ÿ
,

640 
size_t
 
mbﬂrd


651 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_subdev_•ec
(

652 
uhd_u§p_h™dÀ
 
h
,

653 
uhd_subdev_•ec_h™dÀ
 
subdev_•ec
,

654 
size_t
 
mbﬂrd


658 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_subdev_•ec
(

659 
uhd_u§p_h™dÀ
 
h
,

660 
size_t
 
mbﬂrd
,

661 
uhd_subdev_•ec_h™dÀ
 
subdev_•ec_out


665 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_num_ch™√ls
(

666 
uhd_u§p_h™dÀ
 
h
,

667 
size_t
 *
num_ch™√ls_out


671 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_subdev_«me
(

672 
uhd_u§p_h™dÀ
 
h
,

673 
size_t
 
ch™
,

674 * 
rx_subdev_«me_out
,

675 
size_t
 
°rbuf„r_Àn


679 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_øã
(

680 
uhd_u§p_h™dÀ
 
h
,

681 
øã
,

682 
size_t
 
ch™


686 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_øã
(

687 
uhd_u§p_h™dÀ
 
h
,

688 
size_t
 
ch™
,

689 *
øã_out


693 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_øãs
(

694 
uhd_u§p_h™dÀ
 
h
,

695 
size_t
 
ch™
,

696 
uhd_mëa_ønge_h™dÀ
 
øãs_out


700 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_‰eq
(

701 
uhd_u§p_h™dÀ
 
h
,

702 
uhd_tu√_ªque°_t
 *
tu√_ªque°
,

703 
size_t
 
ch™
,

704 
uhd_tu√_ªsu…_t
 *
tu√_ªsu…


708 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_‰eq
(

709 
uhd_u§p_h™dÀ
 
h
,

710 
size_t
 
ch™
,

711 *
‰eq_out


718 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_‰eq_ønge
(

719 
uhd_u§p_h™dÀ
 
h
,

720 
size_t
 
ch™
,

721 
uhd_mëa_ønge_h™dÀ
 
‰eq_ønge_out


725 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_„_rx_‰eq_ønge
(

726 
uhd_u§p_h™dÀ
 
h
,

727 
size_t
 
ch™
,

728 
uhd_mëa_ønge_h™dÀ
 
‰eq_ønge_out


732 
UHD_UNUSED
(c⁄° * 
UHD_USRP_ALL_LOS
) = "all";

738 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_lo_«mes
(

739 
uhd_u§p_h™dÀ
 
h
,

740 
size_t
 
ch™
,

741 
uhd_°rög_ve˘‹_h™dÀ
 *
rx_lo_«mes_out


748 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_lo_sour˚
(

749 
uhd_u§p_h™dÀ
 
h
,

750 c⁄° * 
§c
,

751 c⁄° * 
«me
,

752 
size_t
 
ch™


756 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_lo_sour˚
(

757 
uhd_u§p_h™dÀ
 
h
,

758 c⁄° * 
«me
,

759 
size_t
 
ch™
,

760 * 
rx_lo_sour˚_out
,

761 
size_t
 
°rbuf„r_Àn


765 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_lo_sour˚s
(

766 
uhd_u§p_h™dÀ
 
h
,

767 c⁄° * 
«me
,

768 
size_t
 
ch™
,

769 
uhd_°rög_ve˘‹_h™dÀ
 *
rx_lo_sour˚s_out


776 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_lo_exp‹t_íabÀd
(

777 
uhd_u§p_h™dÀ
 
h
,

778 
boﬁ
 
íabÀd
,

779 c⁄° * 
«me
,

780 
size_t
 
ch™


784 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_lo_exp‹t_íabÀd
(

785 
uhd_u§p_h™dÀ
 
h
,

786 c⁄° * 
«me
,

787 
size_t
 
ch™
,

788 
boﬁ
* 
ªsu…_out


792 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_lo_‰eq
(

793 
uhd_u§p_h™dÀ
 
h
,

794 
‰eq
,

795 c⁄° * 
«me
,

796 
size_t
 
ch™
,

797 * 
c€r˚d_‰eq_out


801 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_lo_‰eq
(

802 
uhd_u§p_h™dÀ
 
h
,

803 c⁄° * 
«me
,

804 
size_t
 
ch™
,

805 * 
rx_lo_‰eq_out


809 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_gaö
(

810 
uhd_u§p_h™dÀ
 
h
,

811 
gaö
,

812 
size_t
 
ch™
,

813 c⁄° *
gaö_«me


820 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_n‹mÆized_rx_gaö
(

821 
uhd_u§p_h™dÀ
 
h
,

822 
gaö
,

823 
size_t
 
ch™


830 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_agc
(

831 
uhd_u§p_h™dÀ
 
h
,

832 
boﬁ
 
íabÀ
,

833 
size_t
 
ch™


837 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_gaö
(

838 
uhd_u§p_h™dÀ
 
h
,

839 
size_t
 
ch™
,

840 c⁄° *
gaö_«me
,

841 *
gaö_out


848 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_n‹mÆized_rx_gaö
(

849 
uhd_u§p_h™dÀ
 
h
,

850 
size_t
 
ch™
,

851 *
gaö_out


855 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_gaö_ønge
(

856 
uhd_u§p_h™dÀ
 
h
,

857 c⁄° * 
«me
,

858 
size_t
 
ch™
,

859 
uhd_mëa_ønge_h™dÀ
 
gaö_ønge_out


863 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_gaö_«mes
(

864 
uhd_u§p_h™dÀ
 
h
,

865 
size_t
 
ch™
,

866 
uhd_°rög_ve˘‹_h™dÀ
 *
gaö_«mes_out


870 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_™ã¬a
(

871 
uhd_u§p_h™dÀ
 
h
,

872 c⁄° * 
™t
,

873 
size_t
 
ch™


877 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_™ã¬a
(

878 
uhd_u§p_h™dÀ
 
h
,

879 
size_t
 
ch™
,

880 * 
™t_out
,

881 
size_t
 
°rbuf„r_Àn


885 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_™ã¬as
(

886 
uhd_u§p_h™dÀ
 
h
,

887 
size_t
 
ch™
,

888 
uhd_°rög_ve˘‹_h™dÀ
 *
™ã¬as_out


892 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_£ns‹_«mes
(

893 
uhd_u§p_h™dÀ
 
h
,

894 
size_t
 
ch™
,

895 
uhd_°rög_ve˘‹_h™dÀ
 *
£ns‹_«mes_out


899 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_b™dwidth
(

900 
uhd_u§p_h™dÀ
 
h
,

901 
b™dwidth
,

902 
size_t
 
ch™


906 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_b™dwidth
(

907 
uhd_u§p_h™dÀ
 
h
,

908 
size_t
 
ch™
,

909 *
b™dwidth_out


913 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_b™dwidth_ønge
(

914 
uhd_u§p_h™dÀ
 
h
,

915 
size_t
 
ch™
,

916 
uhd_mëa_ønge_h™dÀ
 
b™dwidth_ønge_out


920 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_rx_£ns‹
(

921 
uhd_u§p_h™dÀ
 
h
,

922 c⁄° * 
«me
,

923 
size_t
 
ch™
,

924 
uhd_£ns‹_vÆue_h™dÀ
 *
£ns‹_vÆue_out


931 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_dc_off£t_íabÀd
(

932 
uhd_u§p_h™dÀ
 
h
,

933 
boﬁ
 
íb
,

934 
size_t
 
ch™


938 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_rx_iq_bÆ™˚_íabÀd
(

939 
uhd_u§p_h™dÀ
 
h
,

940 
boﬁ
 
íb
,

941 
size_t
 
ch™


952 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_subdev_•ec
(

953 
uhd_u§p_h™dÀ
 
h
,

954 
uhd_subdev_•ec_h™dÀ
 
subdev_•ec
,

955 
size_t
 
mbﬂrd


959 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_subdev_•ec
(

960 
uhd_u§p_h™dÀ
 
h
,

961 
size_t
 
mbﬂrd
,

962 
uhd_subdev_•ec_h™dÀ
 
subdev_•ec_out


966 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_num_ch™√ls
(

967 
uhd_u§p_h™dÀ
 
h
,

968 
size_t
 *
num_ch™√ls_out


972 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_subdev_«me
(

973 
uhd_u§p_h™dÀ
 
h
,

974 
size_t
 
ch™
,

975 * 
tx_subdev_«me_out
,

976 
size_t
 
°rbuf„r_Àn


980 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_øã
(

981 
uhd_u§p_h™dÀ
 
h
,

982 
øã
,

983 
size_t
 
ch™


987 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_øã
(

988 
uhd_u§p_h™dÀ
 
h
,

989 
size_t
 
ch™
,

990 *
øã_out


994 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_øãs
(

995 
uhd_u§p_h™dÀ
 
h
,

996 
size_t
 
ch™
,

997 
uhd_mëa_ønge_h™dÀ
 
øãs_out


1001 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_‰eq
(

1002 
uhd_u§p_h™dÀ
 
h
,

1003 
uhd_tu√_ªque°_t
 *
tu√_ªque°
,

1004 
size_t
 
ch™
,

1005 
uhd_tu√_ªsu…_t
 *
tu√_ªsu…


1009 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_‰eq
(

1010 
uhd_u§p_h™dÀ
 
h
,

1011 
size_t
 
ch™
,

1012 *
‰eq_out


1019 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_‰eq_ønge
(

1020 
uhd_u§p_h™dÀ
 
h
,

1021 
size_t
 
ch™
,

1022 
uhd_mëa_ønge_h™dÀ
 
‰eq_ønge_out


1026 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_„_tx_‰eq_ønge
(

1027 
uhd_u§p_h™dÀ
 
h
,

1028 
size_t
 
ch™
,

1029 
uhd_mëa_ønge_h™dÀ
 
‰eq_ønge_out


1033 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_gaö
(

1034 
uhd_u§p_h™dÀ
 
h
,

1035 
gaö
,

1036 
size_t
 
ch™
,

1037 c⁄° *
gaö_«me


1044 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_n‹mÆized_tx_gaö
(

1045 
uhd_u§p_h™dÀ
 
h
,

1046 
gaö
,

1047 
size_t
 
ch™


1051 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_gaö_ønge
(

1052 
uhd_u§p_h™dÀ
 
h
,

1053 c⁄° * 
«me
,

1054 
size_t
 
ch™
,

1055 
uhd_mëa_ønge_h™dÀ
 
gaö_ønge_out


1059 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_gaö
(

1060 
uhd_u§p_h™dÀ
 
h
,

1061 
size_t
 
ch™
,

1062 c⁄° *
gaö_«me
,

1063 *
gaö_out


1070 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_n‹mÆized_tx_gaö
(

1071 
uhd_u§p_h™dÀ
 
h
,

1072 
size_t
 
ch™
,

1073 *
gaö_out


1077 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_gaö_«mes
(

1078 
uhd_u§p_h™dÀ
 
h
,

1079 
size_t
 
ch™
,

1080 
uhd_°rög_ve˘‹_h™dÀ
 *
gaö_«mes_out


1084 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_™ã¬a
(

1085 
uhd_u§p_h™dÀ
 
h
,

1086 c⁄° * 
™t
,

1087 
size_t
 
ch™


1091 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_™ã¬a
(

1092 
uhd_u§p_h™dÀ
 
h
,

1093 
size_t
 
ch™
,

1094 * 
™t_out
,

1095 
size_t
 
°rbuf„r_Àn


1099 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_™ã¬as
(

1100 
uhd_u§p_h™dÀ
 
h
,

1101 
size_t
 
ch™
,

1102 
uhd_°rög_ve˘‹_h™dÀ
 *
™ã¬as_out


1106 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_b™dwidth
(

1107 
uhd_u§p_h™dÀ
 
h
,

1108 
b™dwidth
,

1109 
size_t
 
ch™


1113 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_b™dwidth
(

1114 
uhd_u§p_h™dÀ
 
h
,

1115 
size_t
 
ch™
,

1116 *
b™dwidth_out


1120 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_b™dwidth_ønge
(

1121 
uhd_u§p_h™dÀ
 
h
,

1122 
size_t
 
ch™
,

1123 
uhd_mëa_ønge_h™dÀ
 
b™dwidth_ønge_out


1127 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_£ns‹
(

1128 
uhd_u§p_h™dÀ
 
h
,

1129 c⁄° * 
«me
,

1130 
size_t
 
ch™
,

1131 
uhd_£ns‹_vÆue_h™dÀ
 *
£ns‹_vÆue_out


1135 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_tx_£ns‹_«mes
(

1136 
uhd_u§p_h™dÀ
 
h
,

1137 
size_t
 
ch™
,

1138 
uhd_°rög_ve˘‹_h™dÀ
 *
£ns‹_«mes_out


1145 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_dc_off£t_íabÀd
(

1146 
uhd_u§p_h™dÀ
 
h
,

1147 
boﬁ
 
íb
,

1148 
size_t
 
ch™


1152 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_tx_iq_bÆ™˚_íabÀd
(

1153 
uhd_u§p_h™dÀ
 
h
,

1154 
boﬁ
 
íb
,

1155 
size_t
 
ch™


1163 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_gpio_b™ks
(

1164 
uhd_u§p_h™dÀ
 
h
,

1165 
size_t
 
mbﬂrd
,

1166 
uhd_°rög_ve˘‹_h™dÀ
 *
gpio_b™ks_out


1173 
UHD_API
 
uhd_îr‹
 
uhd_u§p_£t_gpio_©å
(

1174 
uhd_u§p_h™dÀ
 
h
,

1175 c⁄° * 
b™k
,

1176 c⁄° * 
©å
,

1177 
uöt32_t
 
vÆue
,

1178 
uöt32_t
 
mask
,

1179 
size_t
 
mbﬂrd


1186 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_gpio_©å
(

1187 
uhd_u§p_h™dÀ
 
h
,

1188 c⁄° * 
b™k
,

1189 c⁄° * 
©å
,

1190 
size_t
 
mbﬂrd
,

1191 
uöt32_t
 *
©å_out


1195 
UHD_API
 
uhd_îr‹
 
uhd_u§p_íumî©e_ªgi°îs
(

1196 
uhd_u§p_h™dÀ
 
h
,

1197 
size_t
 
mbﬂrd
,

1198 
uhd_°rög_ve˘‹_h™dÀ
 *
ªgi°îs_out


1202 
UHD_API
 
uhd_îr‹
 
uhd_u§p_gë_ªgi°î_öfo
(

1203 
uhd_u§p_h™dÀ
 
h
,

1204 c⁄° * 
∑th
,

1205 
size_t
 
mbﬂrd
,

1206 
uhd_u§p_ªgi°î_öfo_t
 *
ªgi°î_öfo_out


1210 
UHD_API
 
uhd_îr‹
 
uhd_u§p_wrôe_ªgi°î
(

1211 
uhd_u§p_h™dÀ
 
h
,

1212 c⁄° * 
∑th
,

1213 
uöt32_t
 
fõld
,

1214 
uöt64_t
 
vÆue
,

1215 
size_t
 
mbﬂrd


1219 
UHD_API
 
uhd_îr‹
 
uhd_u§p_ªad_ªgi°î
(

1220 
uhd_u§p_h™dÀ
 
h
,

1221 c⁄° * 
∑th
,

1222 
uöt32_t
 
fõld
,

1223 
size_t
 
mbﬂrd
,

1224 
uöt64_t
 *
vÆue_out


1227 #ifde‡
__˝lu•lus


	@host/include/uhd/usrp_clock/usrp_clock.h

18 #i‚de‡
INCLUDED_UHD_USRP_CLOCK_H


19 
	#INCLUDED_UHD_USRP_CLOCK_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

23 
	~<uhd/ty≥s/£ns‹s.h
>

24 
	~<uhd/ty≥s/°rög_ve˘‹.h
>

26 
	~<°dlib.h
>

27 
	~<°döt.h
>

28 
	~<time.h
>

33 
	guhd_u§p_˛ock
;

42 
uhd_u§p_˛ock
* 
	tuhd_u§p_˛ock_h™dÀ
;

47 #ifde‡
__˝lu•lus


55 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_föd
(

56 c⁄° * 
¨gs
,

57 
uhd_°rög_ve˘‹_t
 *
devi˚s_out


65 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_make
(

66 
uhd_u§p_˛ock_h™dÀ
 *
h
,

67 c⁄° *
¨gs


75 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_‰ì
(

76 
uhd_u§p_˛ock_h™dÀ
 *
h


80 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_œ°_îr‹
(

81 
uhd_u§p_˛ock_h™dÀ
 
h
,

82 * 
îr‹_out
,

83 
size_t
 
°rbuf„r_Àn


87 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_gë_µ_°rög
(

88 
uhd_u§p_˛ock_h™dÀ
 
h
,

89 * 
µ_°rög_out
,

90 
size_t
 
°rbuf„r_Àn


94 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_gë_num_bﬂrds
(

95 
uhd_u§p_˛ock_h™dÀ
 
h
,

96 
size_t
 *
num_bﬂrds_out


100 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_gë_time
(

101 
uhd_u§p_˛ock_h™dÀ
 
h
,

102 
size_t
 
bﬂrd
,

103 
uöt32_t
 *
˛ock_time_out


107 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_gë_£ns‹
(

108 
uhd_u§p_˛ock_h™dÀ
 
h
,

109 c⁄° * 
«me
,

110 
size_t
 
bﬂrd
,

111 
uhd_£ns‹_vÆue_h™dÀ
 *
£ns‹_vÆue_out


115 
UHD_API
 
uhd_îr‹
 
uhd_u§p_˛ock_gë_£ns‹_«mes
(

116 
uhd_u§p_˛ock_h™dÀ
 
h
,

117 
size_t
 
bﬂrd
,

118 
uhd_°rög_ve˘‹_h™dÀ
 *
£ns‹_«mes_out


121 #ifde‡
__˝lu•lus


	@host/include/uhd/utils/thread_priority.h

18 #i‚de‡
INCLUDED_UHD_UTILS_THREAD_PRIORITY_H


19 
	#INCLUDED_UHD_UTILS_THREAD_PRIORITY_H


	)

21 
	~<uhd/c⁄fig.h
>

22 
	~<uhd/îr‹.h
>

24 #ifde‡
__˝lu•lus


28 c⁄° 
uhd_deÁu…_thªad_¥i‹ôy
 = 0.5;

44 
UHD_API
 
uhd_îr‹
 
uhd_£t_thªad_¥i‹ôy
(

45 
¥i‹ôy
,

46 
boﬁ
 
ªÆtime


49 #ifde‡
__˝lu•lus


	@host/lib/usrp/common/ad9361_driver/ad9361_client.h

18 #i‚de‡
INCLUDED_AD9361_CLIENT_H


19 
	#INCLUDED_AD9361_CLIENT_H


	)

21 
	~<boo°/sh¨ed_±r.hµ
>

23 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gu§p
 {

29 
	gAD9361_RX_BAND0
,

30 
	gAD9361_RX_BAND1
,

31 
	gAD9361_TX_BAND0


32 } 
	t‰equícy_b™d_t
;

38 
	gAD9361_XTAL_P_CLK_PATH
,

39 
	gAD9361_XTAL_N_CLK_PATH


40 } 
	t˛ockög_mode_t
;

46 
	gAD9361_DDR_FDD_LVCMOS
,

47 
	gAD9361_DDR_FDD_LVDS


48 } 
	tdigôÆ_öãrÁ˚_mode_t
;

54 
uöt8_t
 
	grx_˛k_dñay
;

55 
uöt8_t
 
	grx_d©a_dñay
;

56 
uöt8_t
 
	gtx_˛k_dñay
;

57 
uöt8_t
 
	gtx_d©a_dñay
;

58 } 
	tdigôÆ_öãrÁ˚_dñays_t
;

60 ˛as†
	cad9361_∑øms
 {

61 
	gpublic
:

62 
boo°
::
	tsh¨ed_±r
<
	tad9361_∑øms
> 
	t•å
;

64 
	gvútuÆ
 ~
ad9361_∑øms
() {}

66 
vútuÆ
 
digôÆ_öãrÁ˚_dñays_t
 
gë_digôÆ_öãrÁ˚_timög
() = 0;

67 
vútuÆ
 
digôÆ_öãrÁ˚_mode_t
 
gë_digôÆ_öãrÁ˚_mode
() = 0;

68 
vútuÆ
 
˛ockög_mode_t
 
gë_˛ockög_mode
() = 0;

69 
vútuÆ
 
gë_b™d_edge
(
‰equícy_b™d_t
 
b™d
) = 0;

72 ˛as†
	cad9361_io


74 
	gpublic
:

75 
boo°
::
	tsh¨ed_±r
<
	tad9361_io
> 
	t•å
;

77 
	gvútuÆ
 ~
ad9361_io
() {}

79 
vútuÆ
 
uöt8_t
 
≥ek8
(
uöt32_t
 
ªg
) = 0;

80 
vútuÆ
 
poke8
(
uöt32_t
 
ªg
, 
uöt8_t
 
vÆ
) = 0;

	@host/lib/usrp/common/ad9361_driver/ad9361_device.h

18 #i‚de‡
INCLUDED_AD9361_DEVICE_H


19 
	#INCLUDED_AD9361_DEVICE_H


	)

21 
	~<ad9361_˛õ¡.h
>

22 
	~<boo°/n⁄c›yabÀ.hµ
>

23 
	~<boo°/thªad/ªcursive_muãx.hµ
>

24 
	~<uhd/ty≥s/fûãrs.hµ
>

25 
	~<uhd/ty≥s/£ns‹s.hµ
>

26 
	~<com∂ex
>

27 
	~<ve˘‹
>

28 
	~<m≠
>

29 
	~"boo°/assign.hµ
"

30 
	~"boo°/böd.hµ
"

31 
	~"boo°/fun˘i⁄.hµ
"

33 
«me•a˚
 
	guhd
 {Çame•a˚ 
	gu§p
 {

35 ˛as†
	cad9361_devi˚_t
 : 
public
 
boo°
::
n⁄c›yabÀ


37 
public
:

38 
	edúe˘i⁄_t
 { 
RX
, 
	gTX
 };

39 
	egaö_mode_t
 {
	gGAIN_MODE_MANUAL
, 
	gGAIN_MODE_SLOW_AGC
, 
	gGAIN_MODE_FAST_AGC
};

40 
	echaö_t
 { 
	gCHAIN_1
, 
	gCHAIN_2
, 
	gCHAIN_BOTH
 };

42 
ad9361_devi˚_t
(
ad9361_∑øms
::
•å
 
˛õ¡
, 
ad9361_io
::•å 
io_iÁ˚
) :

43 
_˛õ¡_∑øms
(
˛õ¡
), 
_io_iÁ˚
(
io_iÁ˚
),

44 
_bb∂l_‰eq
(0.0), 
_adc˛ock_‰eq
(0.0), 
_ªq_˛ock_øã
(0.0),

45 
_ªq_c‹e˛k
(0.0), 
_rx_bbf_tu√div
(0), 
_cuº_gaö_èbÀ
(0),

46 
_rx1_gaö
(0.0), 
_rx2_gaö
(0.0), 
_tx1_gaö
(0.0), 
_tx2_gaö
(0.0),

47 
_tfú_Á˘‹
(0), 
_rfú_Á˘‹
(0),

48 
_rx1_agc_mode
(
GAIN_MODE_MANUAL
), 
_rx2_agc_mode
(GAIN_MODE_MANUAL),

49 
_rx1_agc_íabÀ
(
Ál£
), 
_rx2_agc_íabÀ
(false),

50 
_u£_dc_off£t_åackög
(
Ál£
), 
_u£_iq_bÆ™˚_åackög
(false)

60 
	g_rx_fûãrs
 = (
boo°
::
assign
::
m≠_li°_of
("LPF_TIA", 
fûãr_quîy_hñ≥r
(boo°::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_Õ_tü_£c
, 
this
, 
_1
),

61 
boo°
::
böd
(&
ad9361_devi˚_t
::
_£t_fûãr_Õ_tü_£c
, 
this
, 
_1
, 
_3
)))

62 ("LPF_BB", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_Õ_bb
, 
this
, 
_1
),

63 
boo°
::
böd
(&
ad9361_devi˚_t
::
_£t_fûãr_Õ_bb
, 
this
, 
_1
, 
_3
)))

64 ("HB_3", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_hb_3
, 
this
, 
_1
), 0))

65 ("DEC_3", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_dec_öt_3
, 
this
, 
_1
), 0))

66 ("HB_2", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_hb_2
, 
this
, 
_1
), 0))

67 ("HB_1", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_hb_1
, 
this
, 
_1
), 0))

68 ("FIR_1", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_fú
, 
this
, 
_1
, 
_2
),

69 
boo°
::
böd
(&
ad9361_devi˚_t
::
_£t_fûãr_fú
, 
this
, 
_1
, 
_2
, 
_3
)))).
to_c⁄èöî
(
_rx_fûãrs
);

71 
	g_tx_fûãrs
 = (
boo°
::
assign
::
m≠_li°_of
("LPF_SECONDARY", 
fûãr_quîy_hñ≥r
(boo°::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_Õ_tü_£c
, 
this
, 
_1
),

72 
boo°
::
böd
(&
ad9361_devi˚_t
::
_£t_fûãr_Õ_tü_£c
, 
this
, 
_1
, 
_3
)))

73 ("LPF_BB", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_Õ_bb
, 
this
, 
_1
),

74 
boo°
::
böd
(&
ad9361_devi˚_t
::
_£t_fûãr_Õ_bb
, 
this
, 
_1
, 
_3
)))

75 ("HB_3", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_hb_3
, 
this
, 
_1
), 0))

76 ("INT_3", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_dec_öt_3
, 
this
, 
_1
), 0))

77 ("HB_2", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_hb_2
, 
this
, 
_1
), 0))

78 ("HB_1", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_hb_1
, 
this
, 
_1
), 0))

79 ("FIR_1", 
fûãr_quîy_hñ≥r
(
boo°
::
böd
(&
ad9361_devi˚_t
::
_gë_fûãr_fú
, 
this
, 
_1
, 
_2
),

80 
boo°
::
böd
(&
ad9361_devi˚_t
::
_£t_fûãr_fú
, 
this
, 
_1
, 
_2
, 
_3
)))).
to_c⁄èöî
(
_tx_fûãrs
);

84 
öôülize
();

87 
£t_io_iÁ˚
(
ad9361_io
::
•å
 
io_iÁ˚
);

93 
£t_˛ock_øã
(c⁄° 
ªq_øã
);

104 
£t_a˘ive_chaös
(
boﬁ
 
tx1
, boﬁ 
tx2
, boﬁ 
rx1
, boﬁ 
rx2
);

113 
tu√
(
dúe˘i⁄_t
 
dúe˘i⁄
, c⁄° 
vÆue
);

116 
gë_‰eq
(
dúe˘i⁄_t
 
dúe˘i⁄
);

124 
£t_gaö
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
, c⁄° 
vÆue
);

127 
ouçut_ã°_t⁄e
();

129 
digôÆ_ã°_t⁄e
(
boﬁ
 
íb
);

132 
d©a_p‹t_lo›back
(c⁄° 
boﬁ
 
lo›back_íabÀd
);

135 
gë_rssi
(
chaö_t
 
chaö
);

141 
gë_avîage_ãm≥øtuª
(c⁄° 
ˇl_off£t
 = -30.0, c⁄° 
size_t
 
num_ßm∂es
 = 3);

144 
£t_dc_off£t_auto
(
dúe˘i⁄_t
 
dúe˘i⁄
, c⁄° 
boﬁ
 
⁄
);

147 
£t_iq_bÆ™˚_auto
(
dúe˘i⁄_t
 
dúe˘i⁄
, c⁄° 
boﬁ
 
⁄
);

150 
£t_agc_mode
(
chaö_t
 
chaö
, 
gaö_mode_t
 
gaö_mode
);

153 
£t_agc
(
chaö_t
 
chaö
, 
boﬁ
 
íabÀ
);

157 
£t_bw_fûãr
(
dúe˘i⁄_t
 
dúe˘i⁄
, c⁄° 
rf_bw
);

162 
	gfûãr_öfo_ba£
::
•å
 
gë_fûãr
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
, c⁄° 
°d
::
°rög
 &
«me
);

164 
£t_fûãr
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
, c⁄° 
°d
::
°rög
 &
«me
, 
fûãr_öfo_ba£
::
•å
 
fûãr
);

166 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
gë_fûãr_«mes
(
dúe˘i⁄_t
 
dúe˘i⁄
);

169 c⁄° 
	gAD9361_MAX_GAIN
;

170 c⁄° 
	gAD9361_MAX_CLOCK_RATE
;

171 c⁄° 
	gAD9361_MIN_CLOCK_RATE
;

172 c⁄° 
	gAD9361_CAL_VALID_WINDOW
;

173 c⁄° 
	gAD9361_RECOMMENDED_MAX_BANDWIDTH
;

174 c⁄° 
	gDEFAULT_RX_FREQ
;

175 c⁄° 
	gDEFAULT_TX_FREQ
;

177 
	g¥iv©e
:

178 
_¥ogøm_fú_fûãr
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
num_èps
, 
uöt16_t
 *
c€ffs
);

179 
_£tup_tx_fú
(
size_t
 
num_èps
, 
öt32_t
 
öãΩﬁ©i⁄
);

180 
_£tup_rx_fú
(
size_t
 
num_èps
, 
öt32_t
 
decim©i⁄
);

181 
_¥ogøm_fú_fûãr
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
, 
num_èps
, 
uöt16_t
 *
c€ffs
);

182 
_£tup_tx_fú
(
size_t
 
num_èps
);

183 
_£tup_rx_fú
(
size_t
 
num_èps
);

184 
_ˇlibøã_lock_bb∂l
();

185 
_ˇlibøã_sy¡h_ch¨ge_pumps
();

186 
_ˇlibøã_ba£b™d_rx_™Æog_fûãr
(
rfbw
);

187 
_ˇlibøã_ba£b™d_tx_™Æog_fûãr
(
rfbw
);

188 
_ˇlibøã_£c⁄d¨y_tx_fûãr
(
rfbw
);

189 
_ˇlibøã_rx_TIAs
(
rfbw
);

190 
_£tup_adc
();

191 
_ˇlibøã_ba£b™d_dc_off£t
();

192 
_ˇlibøã_rf_dc_off£t
();

193 
_ˇlibøã_rx_quadøtuª
();

194 
_tx_quadøtuª_ˇl_routöe
();

195 
_ˇlibøã_tx_quadøtuª
();

196 
_¥ogøm_mixî_gm_subèbÀ
();

197 
_¥ogøm_gaö_èbÀ
();

198 
_£tup_gaö_c⁄åﬁ
(
boﬁ
 
u£_agc
);

199 
_£tup_sy¡h
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
vc‹©e
);

200 
_tu√_bbvco
(c⁄° 
øã
);

201 
_ª¥ogøm_gaös
();

202 
_tu√_hñ≥r
(
dúe˘i⁄_t
 
dúe˘i⁄
, c⁄° 
vÆue
);

203 
_£tup_øãs
(c⁄° 
øã
);

204 
_gë_ãm≥øtuª
(c⁄° 
ˇl_off£t
, c⁄° 
timeout
 = 0.1);

205 
_c⁄figuª_bb_dc_åackög
();

206 
_c⁄figuª_rx_iq_åackög
();

207 
_£tup_agc
(
chaö_t
 
chaö
, 
gaö_mode_t
 
gaö_mode
);

208 
_£t_fú_èps
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
, c⁄° 
°d
::
ve˘‹
<
öt16_t
>& 
èps
);

209 
	g°d
::
ve˘‹
<
öt16_t
> 
_gë_fú_èps
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
);

210 
size_t
 
_gë_num_fú_èps
(
dúe˘i⁄_t
 
dúe˘i⁄
);

211 
size_t
 
_gë_fú_dec_öt
(
dúe˘i⁄_t
 
dúe˘i⁄
);

212 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_Õ_tü_£c
(
dúe˘i⁄_t
 
dúe˘i⁄
);

213 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_Õ_bb
(
dúe˘i⁄_t
 
dúe˘i⁄
);

214 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_dec_öt_3
(
dúe˘i⁄_t
 
dúe˘i⁄
);

215 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_hb_3
(
dúe˘i⁄_t
 
dúe˘i⁄
);

216 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_hb_2
(
dúe˘i⁄_t
 
dúe˘i⁄
);

217 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_hb_1
(
dúe˘i⁄_t
 
dúe˘i⁄
);

218 
	gfûãr_öfo_ba£
::
•å
 
_gë_fûãr_fú
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
chaö
);

219 
_£t_fûãr_fú
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
chaö_t
 
ch™√l
, 
fûãr_öfo_ba£
::
•å
 
fûãr
);

220 
_£t_fûãr_Õ_bb
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
fûãr_öfo_ba£
::
•å
 
fûãr
);

221 
_£t_fûãr_Õ_tü_£c
(
dúe˘i⁄_t
 
dúe˘i⁄
, 
fûãr_öfo_ba£
::
•å
 
fûãr
);

223 
	g¥iv©e
:

224 
	schù_ªgs_t


226 
chù_ªgs_t
():

227 
vcodivs
(0), 
öput£l
(0), 
rxfût
(0), 
txfût
(0),

228 
bb∂l
(0), 
bb·u√_c⁄fig
(0), 
bb·u√_mode
(0) {}

229 
uöt8_t
 
	gvcodivs
;

230 
uöt8_t
 
	göput£l
;

231 
uöt8_t
 
	grxfût
;

232 
uöt8_t
 
	gtxfût
;

233 
uöt8_t
 
	gbb∂l
;

234 
uöt8_t
 
	gbb·u√_c⁄fig
;

235 
uöt8_t
 
	gbb·u√_mode
;

238 
	sfûãr_quîy_hñ≥r


240 
fûãr_quîy_hñ≥r
(

241 
boo°
::
fun˘i⁄
<
fûãr_öfo_ba£
::
•å
 (
dúe˘i⁄_t
, 
chaö_t
)> 
p_gë
,

242 
boo°
::
fun˘i⁄
<(
dúe˘i⁄_t
, 
chaö_t
, 
fûãr_öfo_ba£
::
•å
)> 
p_£t


243 Ë: 
gë
(
p_gë
), 
£t
(
p_£t
) { }

245 
fûãr_quîy_hñ≥r
(){ }

247 
	gboo°
::
fun˘i⁄
<
fûãr_öfo_ba£
::
•å
 (
dúe˘i⁄_t
, 
chaö_t
)> 
	ggë
;

248 
	gboo°
::
fun˘i⁄
<(
dúe˘i⁄_t
, 
	gchaö_t
, 
	gfûãr_öfo_ba£
::
•å
)> 
£t
;

251 
	g°d
::
m≠
<
°d
::
°rög
, 
	gfûãr_quîy_hñ≥r
> 
	g_rx_fûãrs
;

252 
	g°d
::
m≠
<
°d
::
°rög
, 
	gfûãr_quîy_hñ≥r
> 
	g_tx_fûãrs
;

255 
	gad9361_∑øms
::
•å
 
_˛õ¡_∑øms
;

256 
	gad9361_io
::
•å
 
_io_iÁ˚
;

258 
	g_rx_‰eq
, 
	g_tx_‰eq
, 
	g_ªq_rx_‰eq
, 
	g_ªq_tx_‰eq
;

259 
	g_œ°_rx_ˇl_‰eq
, 
	g_œ°_tx_ˇl_‰eq
;

260 
	g_rx_™Æog_bw
, 
	g_tx_™Æog_bw
, 
	g_rx_bb_Õ_bw
, 
	g_tx_bb_Õ_bw
;

261 
	g_rx_tü_Õ_bw
, 
	g_tx_£c_Õ_bw
;

264 
	g_ba£b™d_bw
;

265 
	g_bb∂l_‰eq
, 
	g_adc˛ock_‰eq
;

269 
	g_ªq_˛ock_øã
;

270 
	g_ªq_c‹e˛k
;

271 
uöt16_t
 
	g_rx_bbf_tu√div
;

272 
uöt8_t
 
	g_cuº_gaö_èbÀ
;

273 
	g_rx1_gaö
, 
	g_rx2_gaö
, 
	g_tx1_gaö
, 
	g_tx2_gaö
;

274 
öt32_t
 
	g_tfú_Á˘‹
;

275 
öt32_t
 
	g_rfú_Á˘‹
;

276 
gaö_mode_t
 
	g_rx1_agc_mode
, 
	g_rx2_agc_mode
;

277 
boﬁ
 
	g_rx1_agc_íabÀ
, 
	g_rx2_agc_íabÀ
;

279 
chù_ªgs_t
 
	g_ªgs
;

281 
	gboo°
::
ªcursive_muãx
 
_muãx
;

282 
boﬁ
 
	g_u£_dc_off£t_åackög
;

283 
boﬁ
 
	g_u£_iq_bÆ™˚_åackög
;

	@host/lib/usrp/common/ad9361_driver/ad9361_filter_taps.h

18 #i‚de‡
INCLUDED_AD9361_FILTER_TAPS_HPP


19 
	#INCLUDED_AD9361_FILTER_TAPS_HPP


	)

21 
	~<°döt.h
>

66 
öt16_t
 
	ghb127_c€ffs
[] = {

73 
öt16_t
 
	ghb95_c€ffs
[] = {

79 
öt16_t
 
	ghb63_c€ffs
[] = {

84 
öt16_t
 
	ghb47_c€ffs
[] = {

94 
öt16_t
 
	gfú_128_x4_c€ffs
[] = {

102 
öt16_t
 
	gfú_96_x4_c€ffs
[] = {

109 
öt16_t
 
	gfú_64_x4_c€ffs
[] = {

115 
öt16_t
 
	gfú_48_x4_c€ffs
[] = {

	@host/lib/usrp/common/ad9361_driver/ad9361_gain_tables.h

18 #i‚de‡
INCLUDED_AD9361_GAIN_TABLES_HPP


19 
	#INCLUDED_AD9361_GAIN_TABLES_HPP


	)

21 
	~<°döt.h
>

23 
uöt8_t
 
	ggaö_èbÀ_sub_1300mhz
[77][3] = {

52 
uöt8_t
 
	ggaö_èbÀ_1300mhz_to_4000mhz
[77][3] = {

81 
uöt8_t
 
	ggaö_èbÀ_4000mhz_to_6000mhz
[77][3] = {

	@host/lib/usrp/common/ad9361_driver/ad9361_synth_lut.h

18 #i‚de‡
INCLUDED_AD9361_SYNTH_LUT_HPP


19 
	#INCLUDED_AD9361_SYNTH_LUT_HPP


	)

22 
	gvco_ödex
[53] = {12605000000.0, 12245000000.0, 11906000000.0, 11588000000.0,

37 
	gsy¡h_ˇl_lut
[53][12] = { {10, 0, 4, 0, 15, 8, 8, 13, 4, 13, 15, 9},

93 
	gsy¡h_ˇl_lut
[53][12] = { {10, 0, 4, 0, 15, 8, 8, 12, 3, 14, 15, 11},

	@host/lib/usrp/common/fw_comm_protocol.h

18 #i‚de‡
INCLUDED_FW_COMM_PROTOCOL


19 
	#INCLUDED_FW_COMM_PROTOCOL


	)

21 
	~<°döt.h
>

22 #i‚de‡
__˝lu•lus


23 
	~<°dboﬁ.h
>

31 #ifde‡
__˝lu•lus


35 
	#FW_COMM_PROTOCOL_SIGNATURE
 0xACE3

	)

36 
	#FW_COMM_PROTOCOL_VERSION
 0

	)

37 
	#FW_COMM_MAX_DATA_WORDS
 16

	)

38 
	#FW_COMM_PROTOCOL_MTU
 256

	)

40 
	#FW_COMM_FLAGS_ACK
 0x00000001

	)

41 
	#FW_COMM_FLAGS_CMD_MASK
 0x00000FF0

	)

42 
	#FW_COMM_FLAGS_ERROR_MASK
 0xFF000000

	)

44 
	#FW_COMM_CMD_ECHO
 0x00000000

	)

45 
	#FW_COMM_CMD_POKE32
 0x00000010

	)

46 
	#FW_COMM_CMD_PEEK32
 0x00000020

	)

47 
	#FW_COMM_CMD_BLOCK_POKE32
 0x00000030

	)

48 
	#FW_COMM_CMD_BLOCK_PEEK32
 0x00000040

	)

50 
	#FW_COMM_ERR_PKT_ERROR
 0x80000000

	)

51 
	#FW_COMM_ERR_CMD_ERROR
 0x40000000

	)

52 
	#FW_COMM_ERR_SIZE_ERROR
 0x20000000

	)

54 
	#FW_COMM_GENERATE_ID
(
¥od
Ë((((
uöt32_t
Ë
FW_COMM_PROTOCOL_SIGNATURE
) << 0) | \

55 (((
uöt32_t
Ë
¥od
) << 16) | \

56 (((
uöt32_t
Ë
FW_COMM_PROTOCOL_VERSION
Ë<< 24))

	)

58 
	#FW_COMM_GET_PROTOCOL_SIG
(
id
Ë((
uöt16_t
)(id & 0xFFFF))

	)

59 
	#FW_COMM_GET_PRODUCT_ID
(
id
Ë((
uöt8_t
)(id >> 16))

	)

60 
	#FW_COMM_GET_PROTOCOL_VER
(
id
Ë((
uöt8_t
)(id >> 24))

	)

64 
uöt32_t
 
id
;

65 
uöt32_t
 
Êags
;

66 
uöt32_t
 
£quí˚
;

67 
uöt32_t
 
d©a_w‹ds
;

68 
uöt32_t
 
addr
;

69 
uöt32_t
 
d©a
[
FW_COMM_MAX_DATA_WORDS
];

70 } 
	tfw_comm_pkt_t
;

72 #ifde‡
__˝lu•lus


77 #i‚de‡
__˝lu•lus


79 (*
poke32_func
)(c⁄° 
	tuöt32_t
 
	taddr
, c⁄° uöt32_à
	td©a
);

80 
uöt32_t
 (*
	t≥ek32_func
)(c⁄° 
	tuöt32_t
 
	taddr
);

91 
boﬁ
 
¥o˚ss_fw_comm_¥Ÿocﬁ_pkt
(

92 c⁄° 
fw_comm_pkt_t
* 
ªque°
,

93 
fw_comm_pkt_t
* 
ª•⁄£
,

94 
uöt8_t
 
¥odu˘_id
,

95 
uöt32_t
 
iÁ˚_id
,

96 
poke32_func
 
poke_ˇŒback
,

97 
≥ek32_func
 
≥ek_ˇŒback


	@host/lib/usrp/e100/include/linux/usrp_e.h

13 #i‚de‡
__USRP_E_H


14 
	#__USRP_E_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/io˘l.h
>

19 
	su§p_e_˘l16
 {

20 
__u32
 
	moff£t
;

21 
__u32
 
	mcou¡
;

22 
__u16
 
	mbuf
[20];

25 
	su§p_e_˘l32
 {

26 
__u32
 
	moff£t
;

27 
__u32
 
	mcou¡
;

28 
__u32
 
	mbuf
[10];

31 
	#USRP_E_IOC_MAGIC
 'u'

	)

32 
	#USRP_E_WRITE_CTL16
 
	`_IOW
(
USRP_E_IOC_MAGIC
, 0x20, 
u§p_e_˘l16
)

	)

33 
	#USRP_E_READ_CTL16
 
	`_IOWR
(
USRP_E_IOC_MAGIC
, 0x21, 
u§p_e_˘l16
)

	)

34 
	#USRP_E_WRITE_CTL32
 
	`_IOW
(
USRP_E_IOC_MAGIC
, 0x22, 
u§p_e_˘l32
)

	)

35 
	#USRP_E_READ_CTL32
 
	`_IOWR
(
USRP_E_IOC_MAGIC
, 0x23, 
u§p_e_˘l32
)

	)

36 
	#USRP_E_GET_RB_INFO
 
	`_IOR
(
USRP_E_IOC_MAGIC
, 0x27, 
u§p_e_rög_buf„r_size_t
)

	)

37 
	#USRP_E_GET_COMPAT_NUMBER
 
	`_IO
(
USRP_E_IOC_MAGIC
, 0x28)

	)

39 
	#USRP_E_COMPAT_NUMBER
 4

	)

42 
	#RB_USER
 (1<<0)

	)

43 
	#RB_KERNEL
 (1<<1)

	)

44 
	#RB_OVERRUN
 (1<<2)

	)

45 
	#RB_DMA_ACTIVE
 (1<<3)

	)

46 
	#RB_USER_PROCESS
 (1<<4)

	)

48 
	srög_buf„r_öfo
 {

49 
	mÊags
;

50 
	mÀn
;

53 
	su§p_e_rög_buf„r_size_t
 {

54 
	mnum_∑ges_rx_Êags
;

55 
	mnum_rx_‰ames
;

56 
	mnum_∑ges_tx_Êags
;

57 
	mnum_tx_‰ames
;

	@host/lib/usrp/n230/n230_defaults.h

18 #i‚de‡
INCLUDED_N230_DEFAULTS_H


19 
	#INCLUDED_N230_DEFAULTS_H


	)

21 
	~<°döt.h
>

22 #i‚de‡
__˝lu•lus


23 
	~<°dboﬁ.h
>

25 
	~<uhd/å™•‹t/udp_c⁄°™ts.hµ
>

27 
«me•a˚
 
	guhd
 {

28 
«me•a˚
 
	gu§p
 {

29 
«me•a˚
 
	gn230
 {

31 c⁄° 
	gDEFAULT_TICK_RATE
 = 46.08e6;

32 c⁄° 
	gMAX_TICK_RATE
 = 50e6;

33 c⁄° 
	gMIN_TICK_RATE
 = 1e6;

35 c⁄° 
	gDEFAULT_TX_SAMP_RATE
 = 1.0e6;

36 c⁄° 
	gDEFAULT_RX_SAMP_RATE
 = 1.0e6;

37 c⁄° 
	gDEFAULT_DDC_FREQ
 = 0.0;

38 c⁄° 
	gDEFAULT_DUC_FREQ
 = 0.0;

40 c⁄° 
	gDEFAULT_FE_GAIN
 = 0.0;

41 c⁄° 
	gDEFAULT_FE_FREQ
 = 1.0e9;

42 c⁄° 
	gDEFAULT_FE_BW
 = 56e6;

44 c⁄° 
	g°d
::
°rög
 
DEFAULT_TIME_SRC
 = "none";

45 c⁄° 
	g°d
::
°rög
 
DEFAULT_CLOCK_SRC
 = "internal";

47 c⁄° 
size_t
 
	gDEFAULT_FRAME_SIZE
 = 1500 - 20 - 8;

48 c⁄° 
size_t
 
	gMAX_FRAME_SIZE
 = 8000;

49 c⁄° 
size_t
 
	gMIN_FRAME_SIZE
 = 
IP_PROTOCOL_MIN_MTU_SIZE
;

51 c⁄° 
size_t
 
	gDEFAULT_NUM_FRAMES
 = 32;

56 c⁄° 
size_t
 
	gDEFAULT_SEND_BUFF_SIZE
 = 500*1024;

57 #i‡
deföed
(
UHD_PLATFORM_MACOS
Ë|| deföed(
UHD_PLATFORM_BSD
)

58 c⁄° 
size_t
 
	gDEFAULT_RECV_BUFF_SIZE
 = 0x100000;

59 #ñi‡
deföed
(
UHD_PLATFORM_LINUX
Ë|| deföed(
UHD_PLATFORM_WIN32
)

60 c⁄° 
size_t
 
	gDEFAULT_RECV_BUFF_SIZE
 = 0x2000000;

	@host/lib/usrp/n230/n230_eeprom.h

18 #i‚de‡
INCLUDED_N230_EEPROM_H


19 
	#INCLUDED_N230_EEPROM_H


	)

21 
	~<°döt.h
>

22 #i‚de‡
__˝lu•lus


23 
	~<°dboﬁ.h
>

26 #ifde‡
__˝lu•lus


30 
	#N230_NUM_ETH_PORTS
 2

	)

31 
	#N230_MAX_NUM_ETH_PORTS
 2

	)

33 #i‡(
N230_NUM_ETH_PORTS
 > 
N230_MAX_NUM_ETH_PORTS
)

37 
	#N230_EEPROM_VER_MAJOR
 1

	)

38 
	#N230_EEPROM_VER_MINOR
 1

	)

39 
	#N230_EEPROM_SERIAL_LEN
 9

	)

40 
	#N230_EEPROM_NAME_LEN
 32

	)

44 
uöt8_t
 
mac_addr
[6];

45 
uöt8_t
 
_∑d
[2];

46 
uöt32_t
 
sub√t
;

47 
uöt32_t
 
ù_addr
;

48 } 
	tn230_ëh_ì¥om_m≠_t
;

53 
uöt16_t
 
d©a_vîsi⁄_maj‹
;

54 
uöt16_t
 
d©a_vîsi⁄_mö‹
;

57 
uöt16_t
 
hw_ªvisi⁄
;

58 
uöt16_t
 
hw_¥odu˘
;

59 
uöt8_t
 
£rül
[
N230_EEPROM_SERIAL_LEN
];

60 
uöt8_t
 
_∑d_£rül
;

61 
uöt16_t
 
hw_ªvisi⁄_com∑t
;

62 
uöt8_t
 
_∑d0
[18 - (
N230_EEPROM_SERIAL_LEN
 + 1)];

65 
uöt32_t
 
g©eway
;

66 
n230_ëh_ì¥om_m≠_t
 
ëh_öfo
[
N230_MAX_NUM_ETH_PORTS
];

69 
uöt8_t
 
u£r_«me
[
N230_EEPROM_NAME_LEN
];

70 } 
	tn230_ì¥om_m≠_t
;

72 #ifde‡
__˝lu•lus


77 #i‚de‡
__˝lu•lus


85 
boﬁ
 
ªad_n230_ì¥om
();

91 
boﬁ
 
wrôe_n230_ì¥om
();

96 
boﬁ
 
is_n230_ì¥om_ˇche_dúty
();

101 c⁄° 
n230_ì¥om_m≠_t
* 
gë_n230_c⁄°_ì¥om_m≠
();

106 c⁄° 
n230_ëh_ì¥om_m≠_t
* 
gë_n230_ëhî√t_öfo
(
uöt32_t
 
iÁ˚
);

111 
n230_ì¥om_m≠_t
* 
gë_n230_ì¥om_m≠
();

116 
ölöe
 
ªad_n230_Âga_image_∑ge
(
uöt32_t
 
off£t
, *
buf
, uöt32_à
num_byãs
);

118 
ölöe
 
boﬁ
 
wrôe_n230_Âga_image_∑ge
(
uöt32_t
 
off£t
, c⁄° *
buf
, uöt32_à
num_byãs
);

120 
ölöe
 
boﬁ
 
îa£_n230_Âga_image_£˘‹
(
uöt32_t
 
off£t
);

	@host/lib/usrp/n230/n230_fpga_defs.h

18 #i‚de‡
INCLUDED_N230_FPGA_DEFS_H


19 
	#INCLUDED_N230_FPGA_DEFS_H


	)

21 
	~<°döt.h
>

22 #i‚de‡
__˝lu•lus


23 
	~<°dboﬁ.h
>

25 
	~<uhd/utûs/so·_ªgi°î.hµ
>

27 
«me•a˚
 
	guhd
 {

28 
«me•a˚
 
	gu§p
 {

29 
«me•a˚
 
	gn230
 {

30 
«me•a˚
 
	gÂga
 {

32 
ölöe
 
uöt32_t
 
§_addr
(uöt32_à
off£t
) {

33  (
	goff£t
*4);

36 
ölöe
 
uöt32_t
 
rb_addr
(uöt32_à
off£t
) {

37  (
	goff£t
*8);

40 c⁄° 
size_t
 
	gNUM_RADIOS
 = 2;

41 c⁄° 
	gBUS_CLK_RATE
 = 80e6;

46 c⁄° 
uöt32_t
 
	gCVITA_UDP_PORT
 = 49153;

47 c⁄° 
boﬁ
 
	gCVITA_BIG_ENDIAN
 = 
åue
;

49 
	exb_ídpoöt_t
 {

50 
	gN230_XB_DST_E0
 = 0,

51 
	gN230_XB_DST_E1
 = 1,

52 
	gN230_XB_DST_R0
 = 2,

53 
	gN230_XB_DST_R1
 = 3,

54 
	gN230_XB_DST_GCTRL
 = 4,

55 
	gN230_XB_DST_UART
 = 5

58 c⁄° 
uöt8_t
 
	gRADIO_CTRL_SUFFIX
 = 0x00;

59 c⁄° 
uöt8_t
 
	gRADIO_FC_SUFFIX
 = 0x01;

60 c⁄° 
uöt8_t
 
	gRADIO_DATA_SUFFIX
 = 0x02;

65 c⁄° 
uöt32_t
 
	gSR_CORE_RADIO_CONTROL
 = 3;

66 c⁄° 
uöt32_t
 
	gSR_CORE_LOOPBACK
 = 4;

67 c⁄° 
uöt32_t
 
	gSR_CORE_BIST1
 = 5;

68 c⁄° 
uöt32_t
 
	gSR_CORE_BIST2
 = 6;

69 c⁄° 
uöt32_t
 
	gSR_CORE_SPI
 = 8;

70 c⁄° 
uöt32_t
 
	gSR_CORE_MISC
 = 16;

71 c⁄° 
uöt32_t
 
	gSR_CORE_DATA_DELAY
 = 17;

72 c⁄° 
uöt32_t
 
	gSR_CORE_CLK_DELAY
 = 18;

73 c⁄° 
uöt32_t
 
	gSR_CORE_COMPAT
 = 24;

74 c⁄° 
uöt32_t
 
	gSR_CORE_READBACK
 = 32;

75 c⁄° 
uöt32_t
 
	gSR_CORE_GPSDO_ST
 = 40;

76 c⁄° 
uöt32_t
 
	gSR_CORE_PPS_SEL
 = 48;

77 c⁄° 
uöt32_t
 
	gSR_CORE_MS0_GPIO
 = 50;

78 c⁄° 
uöt32_t
 
	gSR_CORE_MS1_GPIO
 = 58;

80 c⁄° 
uöt32_t
 
	gRB_CORE_SIGNATUE
 = 0;

81 c⁄° 
uöt32_t
 
	gRB_CORE_SPI
 = 1;

82 c⁄° 
uöt32_t
 
	gRB_CORE_STATUS
 = 2;

83 c⁄° 
uöt32_t
 
	gRB_CORE_BIST
 = 3;

84 c⁄° 
uöt32_t
 
	gRB_CORE_VERSION_HASH
 = 4;

85 c⁄° 
uöt32_t
 
	gRB_CORE_MS0_GPIO
 = 5;

86 c⁄° 
uöt32_t
 
	gRB_CORE_MS1_GPIO
 = 6;

91 c⁄° 
uöt32_t
 
	gSR_RADIO_SPI
 = 8;

92 c⁄° 
uöt32_t
 
	gSR_RADIO_ATR
 = 12;

93 c⁄° 
uöt32_t
 
	gSR_RADIO_SW_RST
 = 20;

94 c⁄° 
uöt32_t
 
	gSR_RADIO_TEST
 = 21;

95 c⁄° 
uöt32_t
 
	gSR_RADIO_CODEC_IDLE
 = 22;

96 c⁄° 
uöt32_t
 
	gSR_RADIO_READBACK
 = 32;

97 c⁄° 
uöt32_t
 
	gSR_RADIO_TX_CTRL
 = 64;

98 c⁄° 
uöt32_t
 
	gSR_RADIO_RX_CTRL
 = 96;

99 c⁄° 
uöt32_t
 
	gSR_RADIO_RX_DSP
 = 144;

100 c⁄° 
uöt32_t
 
	gSR_RADIO_TX_DSP
 = 184;

101 c⁄° 
uöt32_t
 
	gSR_RADIO_TIME
 = 128;

102 c⁄° 
uöt32_t
 
	gSR_RADIO_RX_FMT
 = 136;

103 c⁄° 
uöt32_t
 
	gSR_RADIO_TX_FMT
 = 138;

104 c⁄° 
uöt32_t
 
	gSR_RADIO_USER_SR
 = 253;

106 c⁄° 
uöt32_t
 
	gRB_RADIO_TEST
 = 0;

107 c⁄° 
uöt32_t
 
	gRB_RADIO_TIME_NOW
 = 1;

108 c⁄° 
uöt32_t
 
	gRB_RADIO_TIME_PPS
 = 2;

109 c⁄° 
uöt32_t
 
	gRB_RADIO_CODEC_DATA
 = 3;

110 c⁄° 
uöt32_t
 
	gRB_RADIO_DEBUG
 = 4;

111 c⁄° 
uöt32_t
 
	gRB_RADIO_FRAMER
 = 5;

112 c⁄° 
uöt32_t
 
	gSR_RADIO_USER_RB
 = 7;

114 c⁄° 
uöt32_t
 
	gAD9361_SPI_SLAVE_NUM
 = 0x1;

115 c⁄° 
uöt32_t
 
	gADF4001_SPI_SLAVE_NUM
 = 0x2;

117 c⁄° 
uöt32_t
 
	gRB_N230_PRODUCT_ID
 = 1;

118 c⁄° 
uöt32_t
 
	gRB_N230_COMPAT_MAJOR
 = 0x20;

119 c⁄° 
uöt32_t
 
	gRB_N230_COMPAT_SAFE
 = 0xC0;

126 c⁄° 
uöt32_t
 
	gCODEC_DATA_DELAY
 = 0;

127 c⁄° 
uöt32_t
 
	gCODEC_CLK_DELAY
 = 16;

132 c⁄° 
	gCODEC_DEFAULT_CLK_RATE
 = 40e6;

137 c⁄° 
	gN230_LINK_RATE_BPS
 = 1e9/8;

142 c⁄° 
uöt32_t
 
	gGPSDO_UART_BAUDRATE
 = 115200;

143 c⁄° 
uöt32_t
 
	gGPSDO_ST_ABSENT
 = 0x83;

147 ˛as†
	cc‹e_ødio_˘æ_ªg_t
 : 
public
 
so·_ªg32_wo_t
 {

148 
public
:

149 
UHD_DEFINE_SOFT_REG_FIELD
(
MIMO
, 1, 0);

150 
UHD_DEFINE_SOFT_REG_FIELD
(
CODEC_ARST
, 1, 1);

152 
c‹e_ødio_˘æ_ªg_t
():

153 
so·_ªg32_wo_t
(
Âga
::
§_addr
(Âga::
SR_CORE_RADIO_CONTROL
))

156 
£t
(
CODEC_ARST
, 0);

157 
£t
(
MIMO
, 1);

161 ˛as†
	cc‹e_misc_ªg_t
 : 
public
 
so·_ªg32_wo_t
 {

162 
public
:

163 
UHD_DEFINE_SOFT_REG_FIELD
(
REF_SEL
, 1, 0);

164 
UHD_DEFINE_SOFT_REG_FIELD
(
RX_BANDSEL_C
, 1, 1);

165 
UHD_DEFINE_SOFT_REG_FIELD
(
RX_BANDSEL_B
, 1, 2);

166 
UHD_DEFINE_SOFT_REG_FIELD
(
RX_BANDSEL_A
, 1, 3);

167 
UHD_DEFINE_SOFT_REG_FIELD
(
TX_BANDSEL_B
, 1, 4);

168 
UHD_DEFINE_SOFT_REG_FIELD
(
TX_BANDSEL_A
, 1, 5);

170 
c‹e_misc_ªg_t
():

171 
so·_ªg32_wo_t
(
Âga
::
§_addr
(Âga::
SR_CORE_MISC
))

174 
£t
(
REF_SEL
, 0);

175 
£t
(
RX_BANDSEL_C
, 0);

176 
£t
(
RX_BANDSEL_B
, 0);

177 
£t
(
RX_BANDSEL_A
, 0);

178 
£t
(
TX_BANDSEL_B
, 0);

179 
£t
(
TX_BANDSEL_A
, 0);

183 ˛as†
	cc‹e_µs_£l_ªg_t
 : 
public
 
so·_ªg32_wo_t
 {

184 
public
:

185 
UHD_DEFINE_SOFT_REG_FIELD
(
EXT_PPS_EN
, 1, 0);

187 
c‹e_µs_£l_ªg_t
():

188 
so·_ªg32_wo_t
(
Âga
::
§_addr
(Âga::
SR_CORE_PPS_SEL
))

191 
£t
(
EXT_PPS_EN
, 0);

195 ˛as†
	cc‹e_°©us_ªg_t
 : 
public
 
so·_ªg64_ro_t
 {

196 
public
:

197 
UHD_DEFINE_SOFT_REG_FIELD
(
REF_LOCKED
, 1, 0);

198 
UHD_DEFINE_SOFT_REG_FIELD
(
GPSDO_STATUS
, 8, 32);

200 
c‹e_°©us_ªg_t
():

201 
so·_ªg64_ro_t
(
Âga
::
rb_addr
(Âga::
RB_CORE_STATUS
))

	@host/lib/usrp/n230/n230_fw_defs.h

18 #i‚de‡
INCLUDED_N230_FW_DEFS_H


19 
	#INCLUDED_N230_FW_DEFS_H


	)

21 
	~<°döt.h
>

30 #ifde‡
__˝lu•lus


31 
«me•a˚
 
	guhd
 {

32 
«me•a˚
 
	gu§p
 {

33 
«me•a˚
 
	gn230
 {

34 
«me•a˚
 
	gfw
 {

37 
ölöe
 
uöt32_t
 
ªg_addr
(uöt32_à
ba£
, uöt32_à
off£t
) {

38  ((
	gba£
Ë+ (
	goff£t
)*4);

44 c⁄° 
uöt32_t
 
	gCPU_CLOCK_FREQ
 = 80000000;

45 c⁄° 
uöt32_t
 
	gPER_MILLISEC_CRON_JOBID
 = 0;

46 c⁄° 
uöt32_t
 
	gPER_SECOND_CRON_JOBID
 = 1;

51 c⁄° 
uöt32_t
 
	gWB_MAIN_RAM_BASE
 = 0x0000;

52 c⁄° 
uöt32_t
 
	gWB_PKT_RAM_BASE
 = 0x8000;

53 c⁄° 
uöt32_t
 
	gWB_SBRB_BASE
 = 0xa000;

54 c⁄° 
uöt32_t
 
	gWB_SPI_FLASH_BASE
 = 0xb000;

55 c⁄° 
uöt32_t
 
	gWB_ETH0_MAC_BASE
 = 0xc000;

56 c⁄° 
uöt32_t
 
	gWB_ETH1_MAC_BASE
 = 0xd000;

57 c⁄° 
uöt32_t
 
	gWB_XB_SBRB_BASE
 = 0xe000;

58 c⁄° 
uöt32_t
 
	gWB_ETH0_I2C_BASE
 = 0xf600;

59 c⁄° 
uöt32_t
 
	gWB_ETH1_I2C_BASE
 = 0xf700;

60 c⁄° 
uöt32_t
 
	gWB_DBG_UART_BASE
 = 0xf900;

65 c⁄° 
uöt32_t
 
	gSR_ZPU_SW_RST
 = 0;

66 c⁄° 
uöt32_t
 
	gSR_ZPU_BOOT_DONE
 = 1;

67 c⁄° 
uöt32_t
 
	gSR_ZPU_LEDS
 = 2;

68 c⁄° 
uöt32_t
 
	gSR_ZPU_XB_LOCAL
 = 4;

69 c⁄° 
uöt32_t
 
	gSR_ZPU_SFP_CTRL0
 = 16;

70 c⁄° 
uöt32_t
 
	gSR_ZPU_SFP_CTRL1
 = 17;

71 c⁄° 
uöt32_t
 
	gSR_ZPU_ETHINT0
 = 64;

72 c⁄° 
uöt32_t
 
	gSR_ZPU_ETHINT1
 = 80;

74 c⁄° 
uöt32_t
 
	gSR_ZPU_SW_RST_NONE
 = 0x0;

75 c⁄° 
uöt32_t
 
	gSR_ZPU_SW_RST_PHY
 = 0x1;

76 c⁄° 
uöt32_t
 
	gSR_ZPU_SW_RST_RADIO
 = 0x2;

81 c⁄° 
uöt32_t
 
	gRB_ZPU_COMPAT
 = 0;

82 c⁄° 
uöt32_t
 
	gRB_ZPU_COUNTER
 = 1;

83 c⁄° 
uöt32_t
 
	gRB_ZPU_SFP_STATUS0
 = 2;

84 c⁄° 
uöt32_t
 
	gRB_ZPU_SFP_STATUS1
 = 3;

85 c⁄° 
uöt32_t
 
	gRB_ZPU_ETH0_PKT_CNT
 = 6;

86 c⁄° 
uöt32_t
 
	gRB_ZPU_ETH1_PKT_CNT
 = 7;

91 c⁄° 
uöt32_t
 
	gWB_PKT_RAM_CTRL_OFFSET
 = 0x1FFC;

93 c⁄° 
uöt32_t
 
	gSR_ZPU_ETHINT_FRAMER_BASE
 = 0;

94 c⁄° 
uöt32_t
 
	gSR_ZPU_ETHINT_DISPATCHER_BASE
 = 8;

97 c⁄° 
uöt32_t
 
	gETH_FRAMER_SRC_MAC_HI
 = 0;

98 c⁄° 
uöt32_t
 
	gETH_FRAMER_SRC_MAC_LO
 = 1;

99 c⁄° 
uöt32_t
 
	gETH_FRAMER_SRC_IP_ADDR
 = 2;

100 c⁄° 
uöt32_t
 
	gETH_FRAMER_SRC_UDP_PORT
 = 3;

101 c⁄° 
uöt32_t
 
	gETH_FRAMER_DST_RAM_ADDR
 = 4;

102 c⁄° 
uöt32_t
 
	gETH_FRAMER_DST_IP_ADDR
 = 5;

103 c⁄° 
uöt32_t
 
	gETH_FRAMER_DST_UDP_MAC
 = 6;

104 c⁄° 
uöt32_t
 
	gETH_FRAMER_DST_MAC_LO
 = 7;

109 c⁄° 
uöt32_t
 
	gCODEC_SPI_CLOCK_FREQ
 = 4000000;

110 c⁄° 
uöt32_t
 
	gADF4001_SPI_CLOCK_FREQ
 = 200000;

115 c⁄° 
uöt32_t
 
	gDBG_UART_BAUD
 = 115200;

120 c⁄° 
uöt8_t
 
	gPRODUCT_NUM
 = 0x01;

121 c⁄° 
uöt8_t
 
	gCOMPAT_MAJOR
 = 0x00;

122 c⁄° 
uöt16_t
 
	gCOMPAT_MINOR
 = 0x0000;

124 
ölöe
 
uöt8_t
 
gë_¥od_num
(
uöt32_t
 
com∑t_ªg
) {

125  (
	gcom∑t_ªg
 >> 24) & 0xFF;

127 
ölöe
 
uöt8_t
 
gë_com∑t_maj‹
(
uöt32_t
 
com∑t_ªg
) {

128  (
	gcom∑t_ªg
 >> 16) & 0xFF;

130 
ölöe
 
uöt8_t
 
gë_com∑t_mö‹
(
uöt32_t
 
com∑t_ªg
) {

131  
	gcom∑t_ªg
 & 0xFFFF;

134 #ifde‡
__˝lu•lus


	@host/lib/usrp/n230/n230_fw_host_iface.h

18 #i‚de‡
INCLUDED_N230_FW_HOST_IFACE_H


19 
	#INCLUDED_N230_FW_HOST_IFACE_H


	)

21 
	~<°döt.h
>

28 #ifde‡
__˝lu•lus


35 
	#N230_DEFAULT_ETH0_MAC
 {0x00, 0x50, 0xC2, 0x85, 0x3f, 0xff}

	)

36 
	#N230_DEFAULT_ETH1_MAC
 {0x00, 0x50, 0xC2, 0x85, 0x3f, 0x33}

	)

37 
	#N230_DEFAULT_ETH0_IP
 (192 << 24 | 168 << 16 | 10 << 8 | 2 << 0)

	)

38 
	#N230_DEFAULT_ETH1_IP
 (192 << 24 | 168 << 16 | 20 << 8 | 2 << 0)

	)

39 
	#N230_DEFAULT_ETH0_MASK
 (255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)

	)

40 
	#N230_DEFAULT_ETH1_MASK
 (255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)

	)

41 
	#N230_DEFAULT_GATEWAY
 (192 << 24 | 168 << 16 | 10 << 8 | 1 << 0)

	)

43 
	#N230_FW_COMMS_UDP_PORT
 49152

	)

44 
	#N230_FW_COMMS_CVITA_PORT
 49153

	)

45 
	#N230_FW_COMMS_FLASH_PROG_PORT
 49154

	)

52 
	#N230_FW_HOST_SHMEM_BASE_ADDR
 0x10000

	)

53 
	#N230_FW_HOST_SHMEM_RW_BASE_ADDR
 0x1000C

	)

54 
	#N230_FW_HOST_SHMEM_NUM_WORDS
 ((
n230_ho°_sh¨ed_mem_d©a_t
)/(
uöt32_t
))

	)

56 
	#N230_FW_HOST_SHMEM_MAX_ADDR
 \

57 (
N230_FW_HOST_SHMEM_BASE_ADDR
 + ((
N230_FW_HOST_SHMEM_NUM_WORDS
 - 1Ë* (
uöt32_t
)))

	)

59 
	#N230_FW_HOST_SHMEM_OFFSET
(
membî
) \

60 (
N230_FW_HOST_SHMEM_BASE_ADDR
 + ((
uöt32_t
)
	`off£tof
(
n230_ho°_sh¨ed_mem_d©a_t
, 
membî
)))

	)

65 
uöt32_t
 
fw_com∑t_num
;

66 
uöt32_t
 
fw_vîsi⁄_hash
;

67 
uöt32_t
 
˛aim_°©us
;

70 
uöt32_t
 
s¸©ch
;

71 
uöt32_t
 
˛aim_time
;

72 
uöt32_t
 
˛aim_§c
;

73 } 
	tn230_ho°_sh¨ed_mem_d©a_t
;

77 
uöt32_t
 
buff
[
N230_FW_HOST_SHMEM_NUM_WORDS
];

78 
n230_ho°_sh¨ed_mem_d©a_t
 
d©a
;

79 } 
	tn230_ho°_sh¨ed_mem_t
;

81 
	#N230_FW_PRODUCT_ID
 1

	)

82 
	#N230_FW_COMPAT_NUM_MAJOR
 32

	)

83 
	#N230_FW_COMPAT_NUM_MINOR
 0

	)

84 
	#N230_FW_COMPAT_NUM
 (((
N230_FW_COMPAT_NUM_MAJOR
 & 0xFFË<< 16Ë| (
N230_FW_COMPAT_NUM_MINOR
 & 0xFFFF))

	)

91 
	#N230_FLASH_COMM_FLAGS_ACK
 0x00000001

	)

92 
	#N230_FLASH_COMM_FLAGS_CMD_MASK
 0x00000FF0

	)

93 
	#N230_FLASH_COMM_FLAGS_ERROR_MASK
 0xFF000000

	)

95 
	#N230_FLASH_COMM_CMD_READ_NV_DATA
 0x00000010

	)

96 
	#N230_FLASH_COMM_CMD_WRITE_NV_DATA
 0x00000020

	)

97 
	#N230_FLASH_COMM_CMD_READ_FPGA
 0x00000030

	)

98 
	#N230_FLASH_COMM_CMD_WRITE_FPGA
 0x00000040

	)

99 
	#N230_FLASH_COMM_CMD_ERASE_FPGA
 0x00000050

	)

101 
	#N230_FLASH_COMM_ERR_PKT_ERROR
 0x80000000

	)

102 
	#N230_FLASH_COMM_ERR_CMD_ERROR
 0x40000000

	)

103 
	#N230_FLASH_COMM_ERR_SIZE_ERROR
 0x20000000

	)

105 
	#N230_FLASH_COMM_MAX_PAYLOAD_SIZE
 128

	)

109 
uöt32_t
 
Êags
;

110 
uöt32_t
 
£q
;

111 
uöt32_t
 
off£t
;

112 
uöt32_t
 
size
;

113 
uöt8_t
 
d©a
[
N230_FLASH_COMM_MAX_PAYLOAD_SIZE
];

114 } 
	tn230_Êash_¥og_t
;

118 
	#N230_HW_REVISION_COMPAT
 1

	)

119 
	#N230_HW_REVISION_MIN
 1

	)

122 
	#N230_CLAIMER_TIMEOUT_IN_MS
 2000

	)

124 #ifde‡
__˝lu•lus


	@host/lib/usrp/usrp2/fw_common.h

18 #i‚de‡
INCLUDED_USRP2_FW_COMMON_H


19 
	#INCLUDED_USRP2_FW_COMMON_H


	)

21 
	~<°döt.h
>

28 #ifde‡
__˝lu•lus


33 
	#USRP2_FPGA_COMPAT_NUM
 10

	)

34 
	#N200_FPGA_COMPAT_NUM
 11

	)

35 
	#USRP2_FW_COMPAT_NUM
 12

	)

36 
	#USRP2_FW_VER_MINOR
 4

	)

39 
	#USRP2_INVALID_VRT_HEADER
 0

	)

42 
uöt32_t
 
£quí˚
;

43 
uöt32_t
 
vπ_hdr
;

44 
uöt32_t
 
ù_addr
;

45 
uöt32_t
 
udp_p‹t
;

46 } 
	tu§p2_°ªam_˘æ_t
;

50 
	#USRP2_UDP_CTRL_PORT
 49152

	)

52 
	#USRP2_UDP_RX_DSP0_PORT
 49156

	)

53 
	#USRP2_UDP_TX_DSP0_PORT
 49157

	)

54 
	#USRP2_UDP_RX_DSP1_PORT
 49158

	)

55 
	#USRP2_UDP_FIFO_CRTL_PORT
 49159

	)

56 
	#USRP2_UDP_UART_BASE_PORT
 49170

	)

57 
	#USRP2_UDP_UART_GPS_PORT
 49172

	)

60 
	#U2_FW_REG_LOCK_TIME
 0

	)

61 
	#U2_FW_REG_LOCK_GPID
 1

	)

62 
	#U2_FW_REG_HAS_GPSDO
 3

	)

63 
	#U2_FW_REG_VER_MINOR
 7

	)

68 
	#USRP2_I2C_DEV_EEPROM
 0x50

69 
	#USRP2_I2C_ADDR_MBOARD
 (
USRP2_I2C_DEV_EEPROM
 | 0x0)

	)

70 
	#USRP2_I2C_ADDR_TX_DB
 (
USRP2_I2C_DEV_EEPROM
 | 0x4)

	)

71 
	#USRP2_I2C_ADDR_RX_DB
 (
USRP2_I2C_DEV_EEPROM
 | 0x5)

	)

76 
	#USRP2_EE_MBOARD_REV
 0x00

77 
	#USRP2_EE_MBOARD_MAC_ADDR
 0x02

78 
	#USRP2_EE_MBOARD_GATEWAY
 0x38

79 
	#USRP2_EE_MBOARD_SUBNET
 0x08

80 
	#USRP2_EE_MBOARD_IP_ADDR
 0x0C

81 
	#USRP2_EE_MBOARD_BOOTLOADER_FLAGS
 0xF7

	)

84 
USRP2_CTRL_ID_HUH_WHAT
 = ' ',

88 
USRP2_CTRL_ID_WAZZUP_BRO
 = 'a',

89 
USRP2_CTRL_ID_WAZZUP_DUDE
 = 'A',

91 
USRP2_CTRL_ID_TRANSACT_ME_SOME_SPI_BRO
 = 's',

92 
USRP2_CTRL_ID_OMG_TRANSACTED_SPI_DUDE
 = 'S',

94 
USRP2_CTRL_ID_DO_AN_I2C_READ_FOR_ME_BRO
 = 'i',

95 
USRP2_CTRL_ID_HERES_THE_I2C_DATA_DUDE
 = 'I',

97 
USRP2_CTRL_ID_WRITE_THESE_I2C_VALUES_BRO
 = 'h',

98 
USRP2_CTRL_ID_COOL_IM_DONE_I2C_WRITE_DUDE
 = 'H',

100 
USRP2_CTRL_ID_GET_THIS_REGISTER_FOR_ME_BRO
 = 'r',

101 
USRP2_CTRL_ID_OMG_GOT_REGISTER_SO_BAD_DUDE
 = 'R',

103 
USRP2_CTRL_ID_HOLLER_AT_ME_BRO
 = 'l',

104 
USRP2_CTRL_ID_HOLLER_BACK_DUDE
 = 'L',

106 
USRP2_CTRL_ID_PEACE_OUT
 = '~'

108 } 
	tu§p2_˘æ_id_t
;

111 
USRP2_DIR_RX
 = 'r',

112 
USRP2_DIR_TX
 = 't'

113 } 
	tu§p2_dú_which_t
;

116 
USRP2_CLK_EDGE_RISE
 = 'r',

117 
USRP2_CLK_EDGE_FALL
 = 'f'

118 } 
	tu§p2_˛k_edge_t
;

121 
USRP2_REG_ACTION_FPGA_PEEK32
 = 1,

122 
USRP2_REG_ACTION_FPGA_PEEK16
 = 2,

123 
USRP2_REG_ACTION_FPGA_POKE32
 = 3,

124 
USRP2_REG_ACTION_FPGA_POKE16
 = 4,

125 
USRP2_REG_ACTION_FW_PEEK32
 = 5,

126 
USRP2_REG_ACTION_FW_POKE32
 = 6

127 } 
	tu§p2_ªg_a˘i⁄_t
;

130 
uöt32_t
 
¥Ÿo_vî
;

131 
uöt32_t
 
id
;

132 
uöt32_t
 
£q
;

134 
uöt32_t
 
ù_addr
;

136 
uöt32_t
 
dev
;

137 
uöt32_t
 
d©a
;

138 
uöt8_t
 
miso_edge
;

139 
uöt8_t
 
mosi_edge
;

140 
uöt8_t
 
num_bôs
;

141 
uöt8_t
 
ªadback
;

142 } 
•i_¨gs
;

144 
uöt8_t
 
addr
;

145 
uöt8_t
 
byãs
;

146 
uöt8_t
 
d©a
[20];

147 } 
i2c_¨gs
;

149 
uöt32_t
 
addr
;

150 
uöt32_t
 
d©a
;

151 
uöt8_t
 
a˘i⁄
;

152 } 
ªg_¨gs
;

154 
uöt32_t
 
Àn
;

155 } 
echo_¨gs
;

156 } 
d©a
;

157 } 
	tu§p2_˘æ_d©a_t
;

159 #ifde‡
__˝lu•lus


	@host/lib/usrp/x300/cdecode.c

8 
	~"cdecode.h
"

10 
	$ba£64_decode_vÆue
(
vÆue_ö
){

11 c⁄° 
decodög
[] = {62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-2,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51};

12 c⁄° 
decodög_size
 = (
decodög
);

13 
vÆue_ö
 -= 43;

14 i‡((sig√d )
vÆue_ö
 < 0 || vÆue_ö >
decodög_size
)  -1;

15  
decodög
[()
vÆue_ö
];

16 
	}
}

18 
	$ba£64_öô_decode°©e
(
ba£64_decode°©e
* 
°©e_ö
){

19 
°©e_ö
->
°ï
 = 
°ï_a
;

20 
°©e_ö
->
∂aöch¨
 = 0;

21 
	}
}

23 
size_t
 
	$ba£64_decode_block
(c⁄° * 
code_ö
, c⁄° 
size_t
 
Àngth_ö
, * 
∂aöãxt_out
, 
ba£64_decode°©e
* 
°©e_ö
){

24 c⁄° * 
codech¨
 = 
code_ö
;

25 * 
∂aöch¨
 = 
∂aöãxt_out
;

26 
‰agmít
;

28 *
∂aöch¨
 = 
°©e_ö
->plainchar;

30 
°©e_ö
->
°ï
){

32 
°ï_a
:

34 i‡(
codech¨
 =
code_ö
+
Àngth_ö
){

35 
°©e_ö
->
°ï
 = 
°ï_a
;

36 
°©e_ö
->
∂aöch¨
 = *plainchar;

37  
∂aöch¨
 - 
∂aöãxt_out
;

39 
‰agmít
 = ()
	`ba£64_decode_vÆue
(*
codech¨
++);

40 } (sig√d )
‰agmít
 < 0);

41 *
∂aöch¨
 = (
‰agmít
 & 0x03f) << 2;

43 
°ï_b
:

45 i‡(
codech¨
 =
code_ö
+
Àngth_ö
){

46 
°©e_ö
->
°ï
 = 
°ï_b
;

47 
°©e_ö
->
∂aöch¨
 = *plainchar;

48  
∂aöch¨
 - 
∂aöãxt_out
;

50 
‰agmít
 = ()
	`ba£64_decode_vÆue
(*
codech¨
++);

51 } (sig√d )
‰agmít
 < 0);

52 *
∂aöch¨
++ |(
‰agmít
 & 0x030) >> 4;

53 *
∂aöch¨
 = (
‰agmít
 & 0x00f) << 4;

54 
°ï_c
:

56 i‡(
codech¨
 =
code_ö
+
Àngth_ö
)

58 
°©e_ö
->
°ï
 = 
°ï_c
;

59 
°©e_ö
->
∂aöch¨
 = *plainchar;

60  
∂aöch¨
 - 
∂aöãxt_out
;

62 
‰agmít
 = ()
	`ba£64_decode_vÆue
(*
codech¨
++);

63 } (sig√d )
‰agmít
 < 0);

64 *
∂aöch¨
++ |(
‰agmít
 & 0x03c) >> 2;

65 *
∂aöch¨
 = (
‰agmít
 & 0x003) << 6;

66 
°ï_d
:

68 i‡(
codech¨
 =
code_ö
+
Àngth_ö
){

69 
°©e_ö
->
°ï
 = 
°ï_d
;

70 
°©e_ö
->
∂aöch¨
 = *plainchar;

71  
∂aöch¨
 - 
∂aöãxt_out
;

73 
‰agmít
 = ()
	`ba£64_decode_vÆue
(*
codech¨
++);

74 } (sig√d )
‰agmít
 < 0);

75 *
∂aöch¨
++ |(
‰agmít
 & 0x03f);

79  
∂aöch¨
 - 
∂aöãxt_out
;

80 
	}
}

	@host/lib/usrp/x300/cdecode.h

8 #i‚de‡
BASE64_CDECODE_H


9 
	#BASE64_CDECODE_H


	)

11 #ifde‡
__˝lu•lus


15 
	~<°ddef.h
>

18 
°ï_a
, 
°ï_b
, 
°ï_c
, 
°ï_d


19 } 
	tba£64_decode°ï
;

22 
ba£64_decode°ï
 
°ï
;

23 
∂aöch¨
;

24 } 
	tba£64_decode°©e
;

26 
ba£64_öô_decode°©e
(
ba£64_decode°©e
* 
°©e_ö
);

28 
ba£64_decode_vÆue
(
vÆue_ö
);

30 
size_t
 
ba£64_decode_block
(c⁄° * 
code_ö
, c⁄° size_à
Àngth_ö
, * 
∂aöãxt_out
, 
ba£64_decode°©e
* 
°©e_ö
);

32 #ifde‡
__˝lu•lus


	@host/lib/usrp/x300/x300_fw_common.h

18 #i‚de‡
INCLUDED_X300_FW_COMMON_H


19 
	#INCLUDED_X300_FW_COMMON_H


	)

21 
	~<°döt.h
>

28 #ifde‡
__˝lu•lus


32 
	#X300_REVISION_COMPAT
 7

	)

33 
	#X300_REVISION_MIN
 2

	)

34 
	#X300_FW_COMPAT_MAJOR
 5

	)

35 
	#X300_FW_COMPAT_MINOR
 1

	)

36 
	#X300_FPGA_COMPAT_MAJOR
 0x21

	)

39 
	#X300_FW_SHMEM_BASE
 0x6000

	)

40 
	#X300_FW_SHMEM_COMPAT_NUM
 0

	)

41 
	#X300_FW_SHMEM_GPSDO_STATUS
 1

	)

42 
	#X300_FW_SHMEM_UART_RX_INDEX
 2

	)

43 
	#X300_FW_SHMEM_UART_TX_INDEX
 3

	)

44 
	#X300_FW_SHMEM_CLAIM_STATUS
 5

	)

45 
	#X300_FW_SHMEM_CLAIM_TIME
 6

	)

46 
	#X300_FW_SHMEM_CLAIM_SRC
 7

	)

47 
	#X300_FW_SHMEM_UART_RX_ADDR
 8

	)

48 
	#X300_FW_SHMEM_UART_TX_ADDR
 9

	)

49 
	#X300_FW_SHMEM_UART_WORDS32
 10

	)

50 
	#X300_FW_SHMEM_ROUTE_MAP_ADDR
 11

	)

51 
	#X300_FW_SHMEM_ROUTE_MAP_LEN
 12

	)

52 
	#X300_FW_SHMEM_IDENT
 13

53 
	#X300_FW_SHMEM_DEBUG
 128

	)

54 
	#X300_FW_SHMEM_ADDR
(
off£t
Ë
X300_FW_SHMEM_BASE
 + (4 * (off£t))

	)

56 
	#X300_FW_NUM_BYTES
 (1 << 15)

57 
	#X300_FW_COMMS_MTU
 (1 << 13)

58 
	#X300_FW_COMMS_UDP_PORT
 49152

	)

60 
	#X300_VITA_UDP_PORT
 49153

	)

61 
	#X300_GPSDO_UDP_PORT
 49156

	)

62 
	#X300_FPGA_PROG_UDP_PORT
 49157

	)

63 
	#X300_MTU_DETECT_UDP_PORT
 49158

	)

65 
	#X300_DEFAULT_MAC_ADDR_0
 {0x00, 0x50, 0xC2, 0x85, 0x3f, 0xff}

	)

66 
	#X300_DEFAULT_MAC_ADDR_1
 {0x00, 0x50, 0xC2, 0x85, 0x3f, 0x33}

	)

68 
	#X300_DEFAULT_GATEWAY
 (192 << 24 | 168 << 16 | 10 << 8 | 1 << 0)

	)

70 
	#X300_DEFAULT_IP_ETH0_1G
 (192 << 24 | 168 << 16 | 10 << 8 | 2 << 0)

	)

71 
	#X300_DEFAULT_IP_ETH1_1G
 (192 << 24 | 168 << 16 | 20 << 8 | 2 << 0)

	)

72 
	#X300_DEFAULT_IP_ETH0_10G
 (192 << 24 | 168 << 16 | 30 << 8 | 2 << 0)

	)

73 
	#X300_DEFAULT_IP_ETH1_10G
 (192 << 24 | 168 << 16 | 40 << 8 | 2 << 0)

	)

75 
	#X300_DEFAULT_NETMASK_ETH0_1G
 (255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)

	)

76 
	#X300_DEFAULT_NETMASK_ETH1_1G
 (255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)

	)

77 
	#X300_DEFAULT_NETMASK_ETH0_10G
 (255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)

	)

78 
	#X300_DEFAULT_NETMASK_ETH1_10G
 (255 << 24 | 255 << 16 | 255 << 8 | 0 << 0)

	)

80 
	#X300_FW_COMMS_FLAGS_ACK
 (1 << 0)

	)

81 
	#X300_FW_COMMS_FLAGS_ERROR
 (1 << 1)

	)

82 
	#X300_FW_COMMS_FLAGS_POKE32
 (1 << 2)

	)

83 
	#X300_FW_COMMS_FLAGS_PEEK32
 (1 << 3)

	)

85 
	#X300_FPGA_PROG_FLAGS_ACK
 (1 << 0)

	)

86 
	#X300_FPGA_PROG_FLAGS_ERROR
 (1 << 1)

	)

87 
	#X300_FPGA_PROG_FLAGS_INIT
 (1 << 2)

	)

88 
	#X300_FPGA_PROG_FLAGS_CLEANUP
 (1 << 3)

	)

89 
	#X300_FPGA_PROG_FLAGS_ERASE
 (1 << 4)

	)

90 
	#X300_FPGA_PROG_FLAGS_VERIFY
 (1 << 5)

	)

91 
	#X300_FPGA_PROG_CONFIGURE
 (1 << 6)

	)

92 
	#X300_FPGA_PROG_CONFIG_STATUS
 (1 << 7)

	)

94 
	#X300_MTU_DETECT_ECHO_REQUEST
 (1 << 0)

	)

95 
	#X300_MTU_DETECT_ECHO_REPLY
 (1 << 1)

	)

96 
	#X300_MTU_DETECT_ERROR
 (1 << 2)

	)

101 
ªvisi⁄
[2];

102 
¥odu˘
[2];

103 
uöt8_t
 
_∑d0
[4];

106 
uöt8_t
 
mac_addr0
[6];

107 
uöt8_t
 
_∑d1
[2];

108 
uöt8_t
 
mac_addr1
[6];

109 
uöt8_t
 
_∑d2
[2];

112 
uöt32_t
 
g©eway
;

113 
uöt32_t
 
sub√t
[4];

114 
uöt32_t
 
ù_addr
[4];

115 
uöt8_t
 
_∑d3
[16];

118 
«me
[23];

119 
£rül
[9];

120 } 
	tx300_ì¥om_m≠_t
;

124 
uöt32_t
 
Êags
;

125 
uöt32_t
 
£quí˚
;

126 
uöt32_t
 
addr
;

127 
uöt32_t
 
d©a
;

128 } 
	tx300_fw_comms_t
;

132 
uöt32_t
 
Êags
;

133 
uöt32_t
 
£˘‹
;

134 
uöt32_t
 
ödex
;

135 
uöt32_t
 
size
;

136 
uöt16_t
 
d©a
[128];

137 } 
	tx300_Âga_¥og_t
;

141 
uöt32_t
 
Êags
;

142 } 
	tx300_Âga_¥og_Êags_t
;

146 
uöt32_t
 
Êags
;

147 
uöt32_t
 
size
;

148 } 
	tx300_mtu_t
;

150 #ifde‡
__˝lu•lus


	@host/lib/usrp_clock/octoclock/common.h

18 #i‚de‡
_OCTOCLOCK_COMMON_H_


19 
	#_OCTOCLOCK_COMMON_H_


	)

21 
	~<°döt.h
>

26 #ifde‡
__˝lu•lus


28 
	#UHD_OCTOCLOCK_SEND_AND_RECV
(
xp‹t
, 
fw_vîsi⁄
, 
pkt_code
, 
pkt_out
, 
Àn
, 
d©a
) do {\

29 
pkt_out
.
¥Ÿo_vî
 = 
fw_vîsi⁄
; \

30 
pkt_out
.
code
 = 
pkt_code
; \

31 
xp‹t
->
	`£nd
(
boo°
::
asio
::
	`buf„r
(&
pkt_out
, (
o˘o˛ock_∑ckë_t
))); \

32 
Àn
 = 
xp‹t
->
	`ªcv
(
boo°
::
asio
::
	`buf„r
(
d©a
), 2);\

33 } 0)

	)

35 
	#UHD_OCTOCLOCK_PACKET_MATCHES
(
pkt_code
, 
pkt_out
, 
pkt_ö
, 
Àn
Ë÷í > 
	`off£tof
(
o˘o˛ock_∑ckë_t
, 
d©a
Ë
™d
 \

36 
pkt_ö
->
£quí˚
 =
pkt_out
.£quí˚ 
™d
 \

37 
pkt_ö
->
code
 =
pkt_code
)

	)

48 
	#OCTOCLOCK_BOOTLOADER_PROTO_VER
 1234

	)

49 
	#OCTOCLOCK_FW_MIN_COMPAT_NUM
 2

	)

50 
	#OCTOCLOCK_FW_COMPAT_NUM
 4

	)

53 
	#OCTOCLOCK_UDP_CTRL_PORT
 50000

	)

54 
	#OCTOCLOCK_UDP_GPSDO_PORT
 50001

	)

55 
	#OCTOCLOCK_UDP_FW_PORT
 50002

	)

56 
	#OCTOCLOCK_UDP_EEPROM_PORT
 50003

	)

59 
NO_CODE
,

61 
OCTOCLOCK_QUERY_CMD
,

62 
OCTOCLOCK_QUERY_ACK
,

64 
SEND_EEPROM_CMD
,

65 
SEND_EEPROM_ACK
,

66 
BURN_EEPROM_CMD
,

67 
BURN_EEPROM_SUCCESS_ACK
,

68 
BURN_EEPROM_FAILURE_ACK
,

69 
CLEAR_EEPROM_CMD
,

70 
CLEAR_EEPROM_ACK
,

72 
SEND_STATE_CMD
,

73 
SEND_STATE_ACK
,

75 
RESET_CMD
,

76 
RESET_ACK
,

78 
HOST_SEND_TO_GPSDO_CMD
,

79 
HOST_SEND_TO_GPSDO_ACK
,

80 
SEND_POOLSIZE_CMD
,

81 
SEND_POOLSIZE_ACK
,

82 
SEND_CACHE_STATE_CMD
,

83 
SEND_CACHE_STATE_ACK
,

84 
SEND_GPSDO_CACHE_CMD
,

85 
SEND_GPSDO_CACHE_ACK
,

87 
PREPARE_FW_BURN_CMD
,

88 
FW_BURN_READY_ACK
,

89 
FILE_TRANSFER_CMD
,

90 
FILE_TRANSFER_ACK
,

91 
READ_FW_CMD
,

92 
READ_FW_ACK
,

93 
FINALIZE_BURNING_CMD
,

94 
FINALIZE_BURNING_ACK
,

95 } 
	t∑ckë_code_t
;

98 
NO_REF
,

99 
INTERNAL
,

100 
EXTERNAL


101 } 
	tªf_t
;

104 
PREFER_INTERNAL
,

105 
PREFER_EXTERNAL


106 } 
	tswôch_pos_t
;

113 #ifde‡
AVR


114 
	#__AVR_ALIGNED__
 
	`__©åibuã__
((
	`Æig√d
(1)))

	)

116 
	#__AVR_ALIGNED__


	)

117 #¥agm®
∑ck
(
push
,1)

122 
uöt8_t
 
mac_addr
[6];

123 
uöt32_t
 
ù_addr
;

124 
uöt32_t
 
dr_addr
;

125 
uöt32_t
 
√tmask
;

126 
uöt8_t
 
£rül
[10];

127 
uöt8_t
 
«me
[10];

128 
uöt8_t
 
ªvisi⁄
;

129 } 
	to˘o˛ock_fw_ì¥om_t
 
	t__AVR_ALIGNED__
;

132 
uöt8_t
 
exã∫Æ_dëe˘ed
;

133 
uöt8_t
 
gps_dëe˘ed
;

134 
uöt8_t
 
which_ªf
;

135 
uöt8_t
 
swôch_pos
;

136 } 
	to˘o˛ock_°©e_t
 
	t__AVR_ALIGNED__
;

139 
uöt8_t
 
num_wøps
;

140 
uöt8_t
 
pos
;

141 } 
	tgpsdo_ˇche_°©e_t
 
	t__AVR_ALIGNED__
;

144 
uöt32_t
 
¥Ÿo_vî
;

145 
uöt32_t
 
£quí˚
;

146 
uöt8_t
 
code
;

148 
uöt16_t
 
¸c
;

149 
gpsdo_ˇche_°©e_t
 
°©e
;

150 
uöt16_t
 
poﬁsize
;

151 
uöt16_t
 
addr
;

153 
uöt8_t
 
d©a
[256];

154 
uöt16_t
 
Àn
;

155 } 
	to˘o˛ock_∑ckë_t
 
	t__AVR_ALIGNED__
;

157 #i‚de‡
AVR


158 #¥agm®
∑ck
(
p›
)

161 #ifde‡
__˝lu•lus


	@host/tests/eeprom_c_test.c

18 
	~<uhd.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	#UHD_TEST_EXECUTE_OR_GOTO
(
œbñ
, ...) \

25 if(
__VA_ARGS__
){ \

26 
	`Ârötf
(
°dîr
, "Eº‹ occuºedáà%s:%d\n", 
__FILE__
, (
__LINE__
-1)); \

27 
ªtu∫_code
 = 
EXIT_FAILURE
; \

28 
œbñ
; \

29 }

	)

31 
	#BUFFER_SIZE
 1024

	)

33 
	$maö
(){

36 
ªtu∫_code
;

37 
uhd_mbﬂrd_ì¥om_h™dÀ
 
mb_ì¥om
;

38 
uhd_dbﬂrd_ì¥om_h™dÀ
 
db_ì¥om
;

39 
db_ªvisi⁄
;

40 
°r_buf„r
[
BUFFER_SIZE
];

42 
ªtu∫_code
 = 
EXIT_SUCCESS
;

49 
	`UHD_TEST_EXECUTE_OR_GOTO
(
íd_of_ã°
,

50 
	`uhd_mbﬂrd_ì¥om_make
(&
mb_ì¥om
)

54 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mbﬂrd_ì¥om
,

55 
	`uhd_mbﬂrd_ì¥om_£t_vÆue
(

56 
mb_ì¥om
,

61 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mbﬂrd_ì¥om
,

62 
	`uhd_mbﬂrd_ì¥om_gë_vÆue
(

63 
mb_ì¥om
,

65 
°r_buf„r
,

66 
BUFFER_SIZE


69 if(
	`°rcmp
(
°r_buf„r
, "F12345")){

70 
ªtu∫_code
 = 
EXIT_FAILURE
;

71 
	`Ârötf
(
°dîr
, "%s:%d: Mismatched EEPROM value: \"%s\" vs. \"F12345\"\n",

72 
__FILE__
, 
__LINE__
,

73 
°r_buf„r
);

74 
‰ì_mbﬂrd_ì¥om
;

82 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mbﬂrd_ì¥om
,

83 
	`uhd_dbﬂrd_ì¥om_make
(&
db_ì¥om
)

87 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_dbﬂrd_ì¥om
,

88 
	`uhd_dbﬂrd_ì¥om_£t_id
(
db_ì¥om
, "0x0067")

90 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_dbﬂrd_ì¥om
,

91 
	`uhd_dbﬂrd_ì¥om_gë_id
(

92 
db_ì¥om
,

93 
°r_buf„r
,

94 
BUFFER_SIZE


97 if(
	`°rcmp
(
°r_buf„r
, "0x0067")){

98 
ªtu∫_code
 = 
EXIT_FAILURE
;

99 
	`Ârötf
(
°dîr
, "%s:%d: Mismatched daughterboard ID: \"%s\" vs. \"0x0067\"\n",

100 
__FILE__
, 
__LINE__
,

101 
°r_buf„r
);

102 
‰ì_dbﬂrd_ì¥om
;

106 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_dbﬂrd_ì¥om
,

107 
	`uhd_dbﬂrd_ì¥om_£t_£rül
(
db_ì¥om
, "F12345")

109 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_dbﬂrd_ì¥om
,

110 
	`uhd_dbﬂrd_ì¥om_gë_£rül
(

111 
db_ì¥om
,

112 
°r_buf„r
,

113 
BUFFER_SIZE


116 if(
	`°rcmp
(
°r_buf„r
, "F12345")){

117 
ªtu∫_code
 = 
EXIT_FAILURE
;

118 
	`Ârötf
(
°dîr
, "%s:%d: Mismatched daughterboard serial: \"%s\" vs. \"F12345\"\n",

119 
__FILE__
, 
__LINE__
,

120 
°r_buf„r
);

121 
‰ì_dbﬂrd_ì¥om
;

125 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_dbﬂrd_ì¥om
,

126 
	`uhd_dbﬂrd_ì¥om_£t_ªvisi⁄
(
db_ì¥om
, 4)

128 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_dbﬂrd_ì¥om
,

129 
	`uhd_dbﬂrd_ì¥om_gë_ªvisi⁄
(
db_ì¥om
, &
db_ªvisi⁄
)

131 if(
db_ªvisi⁄
 != 4){

132 
ªtu∫_code
 = 
EXIT_FAILURE
;

133 
	`Ârötf
(
°dîr
, "%s:%d: Mismatched daughterboardÑevision: \"%d\" vs. 4\n",

134 
__FILE__
, 
__LINE__
, 
db_ªvisi⁄
);

135 
‰ì_dbﬂrd_ì¥om
;

138 
‰ì_dbﬂrd_ì¥om
:

139 if(
ªtu∫_code
){

140 
	`uhd_dbﬂrd_ì¥om_œ°_îr‹
(
db_ì¥om
, 
°r_buf„r
, 
BUFFER_SIZE
);

141 
	`Ârötf
(
°dîr
, "db_ì¥omÉº‹: %s\n", 
°r_buf„r
);

143 
	`uhd_dbﬂrd_ì¥om_‰ì
(&
db_ì¥om
);

145 
‰ì_mbﬂrd_ì¥om
:

146 if(
ªtu∫_code
){

147 
	`uhd_mbﬂrd_ì¥om_œ°_îr‹
(
mb_ì¥om
, 
°r_buf„r
, 
BUFFER_SIZE
);

148 
	`Ârötf
(
°dîr
, "mb_ì¥omÉº‹: %s\n", 
°r_buf„r
);

150 
	`uhd_mbﬂrd_ì¥om_‰ì
(&
mb_ì¥om
);

152 
íd_of_ã°
:

153 if(!
ªtu∫_code
){

154 
	`¥ötf
("\nNoÉrrors detected\n");

156  
ªtu∫_code
;

157 
	}
}

	@host/tests/ranges_c_test.c

18 
	~<uhd.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<m©h.h
>

24 
	#UHD_TEST_EXECUTE_OR_GOTO
(
œbñ
, ...) \

25 if(
__VA_ARGS__
){ \

26 
	`Ârötf
(
°dîr
, "Eº‹ occuºedáà%s:%d\n", 
__FILE__
, (
__LINE__
-1)); \

27 
ªtu∫_code
 = 
EXIT_FAILURE
; \

28 
œbñ
; \

29 }

	)

31 
	#UHD_TEST_CHECK_CLOSE
(
lhs
, 
rhs
Ë(
	`Ábs
÷hs-rhsË< 0.001)

	)

33 
	#BUFFER_SIZE
 1024

	)

35 
UHD_INLINE
 
	$ã°_ønge_vÆues
(

36 c⁄° 
uhd_ønge_t
 *
ønge
,

37 
°¨t_öput
, 
°›_öput
, 
°ï_öput


39 if(!
	`UHD_TEST_CHECK_CLOSE
(
ønge
->
°¨t
, 
°¨t_öput
)){

40 
	`Ârötf
(
°dîr
, "%s:%d: Starts didÇot match: %f vs. %f\n",

41 
__FILE__
, 
__LINE__
,

42 
ønge
->
°¨t
, 
°¨t_öput
);

45 if(!
	`UHD_TEST_CHECK_CLOSE
(
ønge
->
°›
, 
°›_öput
)){

46 
	`Ârötf
(
°dîr
, "%s:%d: Stops didÇot match: %f vs. %f\n",

47 
__FILE__
, 
__LINE__
,

48 
ønge
->
°›
, 
°›_öput
);

51 if(!
	`UHD_TEST_CHECK_CLOSE
(
ønge
->
°ï
, 
°ï_öput
)){

52 
	`Ârötf
(
°dîr
, "%s:%d: Steps didÇot match: %f vs. %f\n",

53 
__FILE__
, 
__LINE__
,

54 
ønge
->
°ï
, 
°ï_öput
);

59 
	}
}

61 
UHD_INLINE
 
	$ã°_mëa_ønge_vÆues
(

62 
uhd_mëa_ønge_h™dÀ
 
mëa_ønge
,

63 
°¨t_öput
, 
°›_öput
, 
°ï_öput
,

64 
°¨t_ã°
, 
°›_ã°
, 
°ï_ã°


67 
uhd_ønge_t
 
ønge
;

68 
ønge
.
°¨t
 = 
°¨t_öput
;

69 
ønge
.
°›
 = 
°›_öput
;

70 
ønge
.
°ï
 = 
°ï_öput
;

71 if(
	`uhd_mëa_ønge_push_back
(
mëa_ønge
, &
ønge
)){

72 
	`Ârötf
(
°dîr
, "%s:%d: FailedÅoÖush backÑange.\n",

73 
__FILE__
, 
__LINE__
);

78 
	`uhd_mëa_ønge_°¨t
(
mëa_ønge
, &
ønge
.
°¨t
);

79 if(!
	`UHD_TEST_CHECK_CLOSE
(
ønge
.
°¨t
, 
°¨t_ã°
)){

80 
	`Ârötf
(
°dîr
, "%s:%d: Starts didÇot match: %f vs. %f\n",

81 
__FILE__
, 
__LINE__
,

82 
ønge
.
°¨t
, 
°¨t_ã°
);

85 
	`uhd_mëa_ønge_°›
(
mëa_ønge
, &
ønge
.
°›
);

86 if(!
	`UHD_TEST_CHECK_CLOSE
(
ønge
.
°›
, 
°›_ã°
)){

87 
	`Ârötf
(
°dîr
, "%s:%d: Stops didÇot match: %f vs. %f\n",

88 
__FILE__
, 
__LINE__
,

89 
ønge
.
°›
, 
°›_ã°
);

92 
	`uhd_mëa_ønge_°ï
(
mëa_ønge
, &
ønge
.
°ï
);

93 if(!
	`UHD_TEST_CHECK_CLOSE
(
ønge
.
°ï
, 
°ï_ã°
)){

94 
	`Ârötf
(
°dîr
, "%s:%d: Steps didÇot match: %f vs. %f\n",

95 
__FILE__
, 
__LINE__
,

96 
ønge
.
°ï
, 
°ï_ã°
);

101 
	}
}

103 
UHD_INLINE
 
	$ã°_mëa_ønge_˛ù
(

104 
uhd_mëa_ønge_h™dÀ
 
mëa_ønge
,

105 
˛ù_vÆue
, 
ã°_vÆue
,

106 
boﬁ
 
˛ù_°ï


108 
˛ù_ªsu…
;

110 
	`uhd_mëa_ønge_˛ù
(
mëa_ønge
, 
˛ù_vÆue
, 
˛ù_°ï
, &
˛ù_ªsu…
);

111 if(!
	`UHD_TEST_CHECK_CLOSE
(
ã°_vÆue
, 
˛ù_ªsu…
)){

112 
	`Ârötf
(
°dîr
, "%s:%d: Values didÇot match: %f vs. %f\n",

113 
__FILE__
, 
__LINE__
,

114 
ã°_vÆue
, 
˛ù_ªsu…
);

119 
	}
}

121 
	$maö
(){

124 
ªtu∫_code
;

125 
uhd_ønge_t
 
ønge
;

126 
uhd_mëa_ønge_h™dÀ
 
mëa_ønge1
, 
mëa_ønge2
;

127 
°r_buf„r
[
BUFFER_SIZE
];

128 
size_t
 
size
;

130 
ªtu∫_code
 = 
EXIT_SUCCESS
;

133 
	`UHD_TEST_EXECUTE_OR_GOTO
(
íd_of_ã°
,

134 
	`uhd_mëa_ønge_make
(&
mëa_ønge1
)

138 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

139 
	`ã°_mëa_ønge_vÆues
(
mëa_ønge1
, -1.0, +1.0, 0.1,

142 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

143 
	`ã°_mëa_ønge_vÆues
(
mëa_ønge1
, 40.0, 60.0, 1.0,

146 
	`uhd_mëa_ønge_©
(
mëa_ønge1
, 0, &
ønge
);

147 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

148 
	`ã°_ønge_vÆues
(&
ønge
, -1.0, +1.0, 0.1)

152 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

153 
	`uhd_mëa_ønge_size
(
mëa_ønge1
, &
size
)

155 if(
size
 != 2){

156 
	`Ârötf
(
°dîr
, "%s:%d: Invalid size: %lu vs. 2",

157 
__FILE__
, 
__LINE__
,

158 ()
size
);

159 
‰ì_mëa_ønge1
;

163 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

164 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge1
, -30.0, -1.0, 
Ál£
)

166 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

167 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge1
, 70.0, 60.0, 
Ál£
)

169 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

170 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge1
, 20.0, 1.0, 
Ál£
)

172 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

173 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge1
, 50.0, 50.0, 
Ál£
)

175 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

176 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge1
, 50.9, 50.9, 
Ál£
)

178 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

179 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge1
, 50.9, 51.0, 
åue
)

183 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge1
,

184 
	`uhd_mëa_ønge_make
(&
mëa_ønge2
)

186 
ønge
.
°ï
 = 0.0;

187 
ønge
.
°¨t
 =Ñ™ge.
°›
 = 1.;

188 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

189 
	`uhd_mëa_ønge_push_back
(
mëa_ønge2
, &
ønge
)

191 
ønge
.
°¨t
 =Ñ™ge.
°›
 = 2.;

192 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

193 
	`uhd_mëa_ønge_push_back
(
mëa_ønge2
, &
ønge
)

195 
ønge
.
°¨t
 =Ñ™ge.
°›
 = 3.;

196 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

197 
	`uhd_mëa_ønge_push_back
(
mëa_ønge2
, &
ønge
)

201 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

202 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge2
, 2., 2., 
åue
)

204 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

205 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge2
, 0., 1., 
åue
)

207 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

208 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge2
, 1.2, 1., 
åue
)

210 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

211 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge2
, 3.1, 3., 
åue
)

213 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_mëa_ønge2
,

214 
	`ã°_mëa_ønge_˛ù
(
mëa_ønge2
, 4., 3., 
åue
)

217 
‰ì_mëa_ønge2
:

218 if(
ªtu∫_code
){

219 
	`uhd_mëa_ønge_œ°_îr‹
(
mëa_ønge2
, 
°r_buf„r
, 
BUFFER_SIZE
);

220 
	`Ârötf
(
°dîr
, "mëa_ønge2Éº‹: %s\n", 
°r_buf„r
);

222 
	`uhd_mëa_ønge_‰ì
(&
mëa_ønge1
);

224 
‰ì_mëa_ønge1
:

225 if(
ªtu∫_code
){

226 
	`uhd_mëa_ønge_œ°_îr‹
(
mëa_ønge1
, 
°r_buf„r
, 
BUFFER_SIZE
);

227 
	`Ârötf
(
°dîr
, "mëa_ønge1Éº‹: %s\n", 
°r_buf„r
);

229 
	`uhd_mëa_ønge_‰ì
(&
mëa_ønge1
);

231 
íd_of_ã°
:

232 if(!
ªtu∫_code
){

233 
	`¥ötf
("\nNoÉrrors detected.\n");

235  
ªtu∫_code
;

236 
	}
}

	@host/tests/sensors_c_test.c

18 
	~<uhd.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<m©h.h
>

25 
	#UHD_TEST_EXECUTE_OR_GOTO
(
œbñ
, ...) \

26 if(
__VA_ARGS__
){ \

27 
	`Ârötf
(
°dîr
, "Eº‹ occuºedáà%s:%d\n", 
__FILE__
, (
__LINE__
-1)); \

28 
ªtu∫_code
 = 
EXIT_FAILURE
; \

29 
œbñ
; \

30 }

	)

32 
	#UHD_TEST_CHECK_CLOSE
(
lhs
, 
rhs
Ë(
	`Ábs
÷hs-rhsË< 0.001)

	)

34 
	#BUFFER_SIZE
 1024

	)

36 
	$maö
(){

39 
ªtu∫_code
;

40 
uhd_£ns‹_vÆue_h™dÀ
 
boﬁón_£ns‹
, 
öãgî_£ns‹
, 
ªÆnum_£ns‹
, 
°rög_£ns‹
;

41 
uhd_£ns‹_vÆue_d©a_ty≥_t
 
£ns‹_ty≥
;

42 
boﬁ
 
boﬁ_out
;

43 
öt_out
;

44 
ªÆnum_out
;

45 
°r_buf„r
[
BUFFER_SIZE
];

47 
ªtu∫_code
 = 
EXIT_SUCCESS
;

54 
	`UHD_TEST_EXECUTE_OR_GOTO
(
íd_of_ã°
,

55 
	`uhd_£ns‹_vÆue_make_‰om_boﬁ
(

56 &
boﬁón_£ns‹
,

57 "Boﬁ sís‹", 
Ál£
,

63 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_boﬁón_£ns‹
,

64 
	`uhd_£ns‹_vÆue_«me
(

65 
boﬁón_£ns‹
,

66 
°r_buf„r
, 
BUFFER_SIZE


69 if(
	`°rcmp
(
°r_buf„r
, "Bool sensor")){

70 
	`Ârötf
(
°dîr
, "%s:%d: Boolean sensorÇame invalid: \"%s\" vs. \"false\"\n",

71 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

72 
ªtu∫_code
 = 
EXIT_FAILURE
;

73 
‰ì_boﬁón_£ns‹
;

77 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_boﬁón_£ns‹
,

78 
	`uhd_£ns‹_vÆue_vÆue
(

79 
boﬁón_£ns‹
,

80 
°r_buf„r
, 
BUFFER_SIZE


83 if(
	`°rcmp
(
°r_buf„r
, "false")){

84 
	`Ârötf
(
°dîr
, "%s:%d: Boolean sensor value invalid: \"%s\" vs. \"false\"\n",

85 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

86 
ªtu∫_code
 = 
EXIT_FAILURE
;

87 
‰ì_boﬁón_£ns‹
;

91 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_boﬁón_£ns‹
,

92 
	`uhd_£ns‹_vÆue_unô
(

93 
boﬁón_£ns‹
,

94 
°r_buf„r
, 
BUFFER_SIZE


97 if(
	`°rcmp
(
°r_buf„r
, "False")){

98 
	`Ârötf
(
°dîr
, "%s:%d: Boolean sensor unit invalid: \"%s\" vs. \"False\"\n",

99 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

100 
ªtu∫_code
 = 
EXIT_FAILURE
;

101 
‰ì_boﬁón_£ns‹
;

105 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_boﬁón_£ns‹
,

106 
	`uhd_£ns‹_vÆue_d©a_ty≥
(

107 
boﬁón_£ns‹
,

108 &
£ns‹_ty≥


111 if(
£ns‹_ty≥
 !
UHD_SENSOR_VALUE_BOOLEAN
){

112 
	`Ârötf
(
°dîr
, "%s:%d: Wrong sensorÅype detected: %d vs. %d\n",

113 
__FILE__
, 
__LINE__
,

114 
£ns‹_ty≥
, 
UHD_SENSOR_VALUE_BOOLEAN
);

115 
ªtu∫_code
 = 
EXIT_FAILURE
;

116 
‰ì_boﬁón_£ns‹
;

119 
boﬁ_out
 = 
Ál£
;

121 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_boﬁón_£ns‹
,

122 
	`uhd_£ns‹_vÆue_to_boﬁ
(

123 
boﬁón_£ns‹
,

124 &
boﬁ_out


127 if(
boﬁ_out
){

128 
	`Ârötf
(
°dîr
, "%s:%d: Boolean sensor value invalid:Årue vs. false\n",

129 
__FILE__
, 
__LINE__
);

130 
ªtu∫_code
 = 
EXIT_FAILURE
;

131 
‰ì_boﬁón_£ns‹
;

139 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_boﬁón_£ns‹
,

140 
	`uhd_£ns‹_vÆue_make_‰om_öt
(

141 &
öãgî_£ns‹
,

148 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_öãgî_£ns‹
,

149 
	`uhd_£ns‹_vÆue_«me
(

150 
öãgî_£ns‹
,

151 
°r_buf„r
, 
BUFFER_SIZE


154 if(
	`°rcmp
(
°r_buf„r
, "Int sensor")){

155 
	`Ârötf
(
°dîr
, "%s:%d: Integer sensorÇame invalid: \"%s\" vs. \"Int sensor\"\n",

156 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

157 
ªtu∫_code
 = 
EXIT_FAILURE
;

158 
‰ì_öãgî_£ns‹
;

162 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_öãgî_£ns‹
,

163 
	`uhd_£ns‹_vÆue_vÆue
(

164 
öãgî_£ns‹
,

165 
°r_buf„r
, 
BUFFER_SIZE


168 if(
	`°rcmp
(
°r_buf„r
, "50")){

169 
	`Ârötf
(
°dîr
, "%s:%d: Integer sensor value invalid: \"%s\" vs. \"50\"\n",

170 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

171 
ªtu∫_code
 = 
EXIT_FAILURE
;

172 
‰ì_öãgî_£ns‹
;

176 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_öãgî_£ns‹
,

177 
	`uhd_£ns‹_vÆue_unô
(

178 
öãgî_£ns‹
,

179 
°r_buf„r
, 
BUFFER_SIZE


182 if(
	`°rcmp
(
°r_buf„r
, "IntÅype")){

183 
	`Ârötf
(
°dîr
, "%s:%d: Integer sensor unit invalid: \"%s\" vs. \"IntÅype\"\n",

184 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

185 
ªtu∫_code
 = 
EXIT_FAILURE
;

186 
‰ì_öãgî_£ns‹
;

190 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_öãgî_£ns‹
,

191 
	`uhd_£ns‹_vÆue_d©a_ty≥
(

192 
öãgî_£ns‹
,

193 &
£ns‹_ty≥


196 if(
£ns‹_ty≥
 !
UHD_SENSOR_VALUE_INTEGER
){

197 
	`Ârötf
(
°dîr
, "%s:%d: Wrong sensorÅype detected: %d vs. %d\n",

198 
__FILE__
, 
__LINE__
,

199 
£ns‹_ty≥
, 
UHD_SENSOR_VALUE_INTEGER
);

200 
ªtu∫_code
 = 
EXIT_FAILURE
;

201 
‰ì_öãgî_£ns‹
;

205 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_öãgî_£ns‹
,

206 
	`uhd_£ns‹_vÆue_to_öt
(

207 
öãgî_£ns‹
,

208 &
öt_out


211 if(
öt_out
 != 50){

212 
	`Ârötf
(
°dîr
, "%s:%d: Integer sensor value invalid: %d vs. 50\n",

213 
__FILE__
, 
__LINE__
,

214 
öt_out
);

215 
ªtu∫_code
 = 
EXIT_FAILURE
;

216 
‰ì_öãgî_£ns‹
;

224 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_öãgî_£ns‹
,

225 
	`uhd_£ns‹_vÆue_make_‰om_ªÆnum
(

226 &
ªÆnum_£ns‹
,

233 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_ªÆnum_£ns‹
,

234 
	`uhd_£ns‹_vÆue_«me
(

235 
ªÆnum_£ns‹
,

236 
°r_buf„r
, 
BUFFER_SIZE


239 if(
	`°rcmp
(
°r_buf„r
, "Realnum sensor")){

240 
	`Ârötf
(
°dîr
, "%s:%d: Realnum sensorÇame invalid: \"%s\" vs. \"Realnum sensor\"\n",

241 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

242 
ªtu∫_code
 = 
EXIT_FAILURE
;

243 
‰ì_ªÆnum_£ns‹
;

247 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_ªÆnum_£ns‹
,

248 
	`uhd_£ns‹_vÆue_vÆue
(

249 
ªÆnum_£ns‹
,

250 
°r_buf„r
, 
BUFFER_SIZE


253 if(
	`°rcmp
(
°r_buf„r
, "50")){

254 
	`Ârötf
(
°dîr
, "%s:%d: Realnum sensor value invalid: \"%s\" vs. \"50\"\n",

255 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

256 
ªtu∫_code
 = 
EXIT_FAILURE
;

257 
‰ì_ªÆnum_£ns‹
;

261 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_ªÆnum_£ns‹
,

262 
	`uhd_£ns‹_vÆue_unô
(

263 
ªÆnum_£ns‹
,

264 
°r_buf„r
, 
BUFFER_SIZE


267 if(
	`°rcmp
(
°r_buf„r
, "RealnumÅype")){

268 
	`Ârötf
(
°dîr
, "%s:%d: Realnum sensor unit invalid: \"%s\" vs. \"RealnumÅype\"\n",

269 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

270 
ªtu∫_code
 = 
EXIT_FAILURE
;

271 
‰ì_ªÆnum_£ns‹
;

275 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_ªÆnum_£ns‹
,

276 
	`uhd_£ns‹_vÆue_d©a_ty≥
(

277 
ªÆnum_£ns‹
,

278 &
£ns‹_ty≥


281 if(
£ns‹_ty≥
 !
UHD_SENSOR_VALUE_REALNUM
){

282 
	`Ârötf
(
°dîr
, "%s:%d: Wrong sensorÅype detected: %d vs. %d\n",

283 
__FILE__
, 
__LINE__
,

284 
£ns‹_ty≥
, 
UHD_SENSOR_VALUE_REALNUM
);

285 
ªtu∫_code
 = 
EXIT_FAILURE
;

286 
‰ì_ªÆnum_£ns‹
;

290 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_ªÆnum_£ns‹
,

291 
	`uhd_£ns‹_vÆue_to_ªÆnum
(

292 
ªÆnum_£ns‹
,

293 &
ªÆnum_out


296 if(
ªÆnum_out
 != 50.0){

297 
	`Ârötf
(
°dîr
, "%s:%d: Realnum sensor value invalid: %2.1f vs. 50.0\n",

298 
__FILE__
, 
__LINE__
,

299 
ªÆnum_out
);

300 
ªtu∫_code
 = 
EXIT_FAILURE
;

301 
‰ì_ªÆnum_£ns‹
;

309 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_ªÆnum_£ns‹
,

310 
	`uhd_£ns‹_vÆue_make_‰om_°rög
(

311 &
°rög_£ns‹
,

319 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_£ns‹
,

320 
	`uhd_£ns‹_vÆue_«me
(

321 
°rög_£ns‹
,

322 
°r_buf„r
, 
BUFFER_SIZE


325 if(
	`°rcmp
(
°r_buf„r
, "String sensor")){

326 
	`Ârötf
(
°dîr
, "%s:%d: String sensorÇame invalid: \"%s\" vs. \"String sensor\"\n",

327 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

328 
ªtu∫_code
 = 
EXIT_FAILURE
;

329 
‰ì_°rög_£ns‹
;

333 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_£ns‹
,

334 
	`uhd_£ns‹_vÆue_vÆue
(

335 
°rög_£ns‹
,

336 
°r_buf„r
, 
BUFFER_SIZE


339 if(
	`°rcmp
(
°r_buf„r
, "String value")){

340 
	`Ârötf
(
°dîr
, "%s:%d: String sensor value invalid: \"%s\" vs. \"String value\"\n",

341 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

342 
ªtu∫_code
 = 
EXIT_FAILURE
;

343 
‰ì_°rög_£ns‹
;

347 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_£ns‹
,

348 
	`uhd_£ns‹_vÆue_unô
(

349 
°rög_£ns‹
,

350 
°r_buf„r
, 
BUFFER_SIZE


353 if(
	`°rcmp
(
°r_buf„r
, "String unit")){

354 
	`Ârötf
(
°dîr
, "%s:%d: String sensor unit invalid: \"%s\" vs. \"String unit\"\n",

355 
__FILE__
, 
__LINE__
, 
°r_buf„r
);

356 
ªtu∫_code
 = 
EXIT_FAILURE
;

357 
‰ì_°rög_£ns‹
;

361 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_£ns‹
,

362 
	`uhd_£ns‹_vÆue_d©a_ty≥
(

363 
°rög_£ns‹
,

364 &
£ns‹_ty≥


367 if(
£ns‹_ty≥
 !
UHD_SENSOR_VALUE_STRING
){

368 
	`Ârötf
(
°dîr
, "%s:%d: Wrong sensorÅype detected: %d vs. %d\n",

369 
__FILE__
, 
__LINE__
,

370 
£ns‹_ty≥
, 
UHD_SENSOR_VALUE_STRING
);

371 
ªtu∫_code
 = 
EXIT_FAILURE
;

372 
‰ì_°rög_£ns‹
;

379 
‰ì_°rög_£ns‹
:

380 if(
ªtu∫_code
){

381 
	`uhd_£ns‹_vÆue_œ°_îr‹
(
°rög_£ns‹
, 
°r_buf„r
, 
BUFFER_SIZE
);

382 
	`Ârötf
(
°dîr
, "°rög_£ns‹Éº‹: %s\n", 
°r_buf„r
);

384 
	`uhd_£ns‹_vÆue_‰ì
(&
°rög_£ns‹
);

386 
‰ì_ªÆnum_£ns‹
:

387 if(
ªtu∫_code
){

388 
	`uhd_£ns‹_vÆue_œ°_îr‹
(
ªÆnum_£ns‹
, 
°r_buf„r
, 
BUFFER_SIZE
);

389 
	`Ârötf
(
°dîr
, "ªÆnum_£ns‹Éº‹: %s\n", 
°r_buf„r
);

391 
	`uhd_£ns‹_vÆue_‰ì
(&
ªÆnum_£ns‹
);

393 
‰ì_öãgî_£ns‹
:

394 if(
ªtu∫_code
){

395 
	`uhd_£ns‹_vÆue_œ°_îr‹
(
öãgî_£ns‹
, 
°r_buf„r
, 
BUFFER_SIZE
);

396 
	`Ârötf
(
°dîr
, "öãgî_£ns‹Éº‹: %s\n", 
°r_buf„r
);

398 
	`uhd_£ns‹_vÆue_‰ì
(&
öãgî_£ns‹
);

400 
‰ì_boﬁón_£ns‹
:

401 if(
ªtu∫_code
){

402 
	`uhd_£ns‹_vÆue_œ°_îr‹
(
boﬁón_£ns‹
, 
°r_buf„r
, 
BUFFER_SIZE
);

403 
	`Ârötf
(
°dîr
, "boﬁón_£ns‹Éº‹: %s\n", 
°r_buf„r
);

405 
	`uhd_£ns‹_vÆue_‰ì
(&
boﬁón_£ns‹
);

407 
íd_of_ã°
:

408 if(!
ªtu∫_code
){

409 
	`¥ötf
("\nNoÉrrors detected.\n");

411  
ªtu∫_code
;

412 
	}
}

	@host/tests/string_vector_c_test.c

18 
	~<uhd.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	#UHD_TEST_EXECUTE_OR_GOTO
(
œbñ
, ...) \

25 if(
__VA_ARGS__
){ \

26 
	`Ârötf
(
°dîr
, "Eº‹ occuºedáà%s:%d\n", 
__FILE__
, (
__LINE__
-1)); \

27 
ªtu∫_code
 = 
EXIT_FAILURE
; \

28 
œbñ
; \

29 }

	)

31 
	#BUFFER_SIZE
 1024

	)

33 
	$maö
(){

36 
ªtu∫_code
;

37 
uhd_°rög_ve˘‹_h™dÀ
 
°rög_ve˘‹
;

38 
size_t
 
size
;

39 
°r_buf„r
[
BUFFER_SIZE
];

41 
ªtu∫_code
 = 
EXIT_SUCCESS
;

44 
	`UHD_TEST_EXECUTE_OR_GOTO
(
íd_of_ã°
,

45 
	`uhd_°rög_ve˘‹_make
(&
°rög_ve˘‹
)

49 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_ve˘‹
,

50 
	`uhd_°rög_ve˘‹_push_back
(&
°rög_ve˘‹
, "foo")

52 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_ve˘‹
,

53 
	`uhd_°rög_ve˘‹_push_back
(&
°rög_ve˘‹
, "bar")

57 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_ve˘‹
,

58 
	`uhd_°rög_ve˘‹_size
(
°rög_ve˘‹
, &
size
)

60 if(
size
 != 2){

61 
ªtu∫_code
 = 
EXIT_FAILURE
;

62 
	`Ârötf
(
°dîr
, "%s:%d: Invalid size: %lu vs. 2",

63 
__FILE__
, 
__LINE__
, ()
size
);

64 
‰ì_°rög_ve˘‹
;

68 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_°rög_ve˘‹
,

69 
	`uhd_°rög_ve˘‹_©
(
°rög_ve˘‹
, 1, 
°r_buf„r
, 
BUFFER_SIZE
)

71 if(
	`°rcmp
(
°r_buf„r
, "bar")){

72 
ªtu∫_code
 = 
EXIT_FAILURE
;

73 
	`Ârötf
(
°dîr
, "%s:%d: Mismatched daughterboard serial: \"%s\" vs. \"key3=value3,key4=value4\"\n",

74 
__FILE__
, 
__LINE__
,

75 
°r_buf„r
);

78 
‰ì_°rög_ve˘‹
:

79 if(
ªtu∫_code
){

80 
	`uhd_°rög_ve˘‹_œ°_îr‹
(
°rög_ve˘‹
, 
°r_buf„r
, 
BUFFER_SIZE
);

81 
	`Ârötf
(
°dîr
, "°rög_ve˘‹Éº‹: %s\n", 
°r_buf„r
);

83 
	`uhd_°rög_ve˘‹_‰ì
(&
°rög_ve˘‹
);

85 
íd_of_ã°
:

86 if(!
ªtu∫_code
){

87 
	`¥ötf
("\nNoÉrrors detected\n");

89  
ªtu∫_code
;

90 
	}
}

	@host/tests/subdev_spec_c_test.c

18 
	~<uhd.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	#UHD_TEST_EXECUTE_OR_GOTO
(
œbñ
, ...) \

24 if(
__VA_ARGS__
){ \

25 
	`Ârötf
(
°dîr
, "Eº‹ occuºedáà%s:%d\n", 
__FILE__
, (
__LINE__
-1)); \

26 
ªtu∫_code
 = 
EXIT_FAILURE
; \

27 
œbñ
; \

28 }

	)

30 
	#BUFFER_SIZE
 1024

	)

32 
	$maö
(){

35 
ªtu∫_code
;

36 
uhd_subdev_•ec_∑ú_t
 
subdev_•ec_∑ú1
, 
subdev_•ec_∑ú2
;

37 
uhd_subdev_•ec_h™dÀ
 
subdev_•ec1
, 
subdev_•ec2
;

38 
size_t
 
size1
, 
size2
, 
i
;

39 
boﬁ
 
∑ús_equÆ
;

40 
°r_buf„r
[
BUFFER_SIZE
];

42 
	`¥ötf
("Testing subdevice specification...\n");

43 
ªtu∫_code
 = 
EXIT_SUCCESS
;

46 
	`UHD_TEST_EXECUTE_OR_GOTO
(
íd_of_ã°
,

47 
	`uhd_subdev_•ec_make
(&
subdev_•ec1
, "A:AB B:AB")

51 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec1
,

52 
	`uhd_subdev_•ec_to_µ_°rög
(
subdev_•ec1
, 
°r_buf„r
, 
BUFFER_SIZE
)

54 
	`¥ötf
("Pªây Pröt:\n%s", 
°r_buf„r
);

56 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec1
,

57 
	`uhd_subdev_•ec_to_°rög
(
subdev_•ec1
, 
°r_buf„r
, 
BUFFER_SIZE
)

59 
	`¥ötf
("M¨ku∞Såög: %s\n", 
°r_buf„r
);

62 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec2
,

63 
	`uhd_subdev_•ec_make
(&
subdev_•ec2
, 
°r_buf„r
)

67 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec2
,

68 
	`uhd_subdev_•ec_size
(
subdev_•ec1
, &
size1
)

70 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec2
,

71 
	`uhd_subdev_•ec_size
(
subdev_•ec2
, &
size2
)

73 if(
size1
 !
size2
){

74 
	`¥ötf
("%s:%d: Size†dÿnŸ m©ch. %lu vs. %lu\n", 
__FILE__
, 
__LINE__
,

75 ()
size1
, ()
size2
);

76 
ªtu∫_code
 = 
EXIT_FAILURE
;

77 
‰ì_subdev_•ec2
;

79 
i
 = 0; i < 
size1
; i++){

80 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec_∑ú1
,

81 
	`uhd_subdev_•ec_©
(
subdev_•ec1
, 
i
, &
subdev_•ec_∑ú1
)

83 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec_∑ú2
,

84 
	`uhd_subdev_•ec_©
(
subdev_•ec2
, 
i
, &
subdev_•ec_∑ú2
)

86 
	`UHD_TEST_EXECUTE_OR_GOTO
(
‰ì_subdev_•ec_∑ú2
,

87 
	`uhd_subdev_•ec_∑ús_equÆ
(&
subdev_•ec_∑ú1
, &
subdev_•ec_∑ú2
, &
∑ús_equÆ
)

89 if(!
∑ús_equÆ
){

90 
	`¥ötf
("%s:%d: Subdev specÖairsáreÇotÉqual.\n"

93 
__FILE__
, 
__LINE__
,

94 
subdev_•ec_∑ú1
.
db_«me
, 
subdev_•ec_∑ú2
.db_name,

95 
subdev_•ec_∑ú1
.
sd_«me
, 
subdev_•ec_∑ú2
.sd_name

97 
ªtu∫_code
 = 
EXIT_FAILURE
;

98 
‰ì_subdev_•ec_∑ú2
;

100 
	`uhd_subdev_•ec_∑ú_‰ì
(&
subdev_•ec_∑ú1
);

101 
	`uhd_subdev_•ec_∑ú_‰ì
(&
subdev_•ec_∑ú2
);

106 
‰ì_subdev_•ec_∑ú2
:

107 
	`uhd_subdev_•ec_∑ú_‰ì
(&
subdev_•ec_∑ú2
);

109 
‰ì_subdev_•ec_∑ú1
:

110 
	`uhd_subdev_•ec_∑ú_‰ì
(&
subdev_•ec_∑ú1
);

112 
‰ì_subdev_•ec2
:

113 if(
ªtu∫_code
){

114 
	`uhd_subdev_•ec_œ°_îr‹
(
subdev_•ec2
, 
°r_buf„r
, 
BUFFER_SIZE
);

115 
	`Ârötf
(
°dîr
, "subdev_•ec2Éº‹: %s\n", 
°r_buf„r
);

117 
	`uhd_subdev_•ec_‰ì
(&
subdev_•ec2
);

119 
‰ì_subdev_•ec1
:

120 if(
ªtu∫_code
){

121 
	`uhd_subdev_•ec_œ°_îr‹
(
subdev_•ec1
, 
°r_buf„r
, 
BUFFER_SIZE
);

122 
	`Ârötf
(
°dîr
, "subdev_•ec1Éº‹: %s\n", 
°r_buf„r
);

124 
	`uhd_subdev_•ec_‰ì
(&
subdev_•ec1
);

126 
íd_of_ã°
:

127 if(!
ªtu∫_code
){

128 
	`¥ötf
("\nNoÉrrors detected.\n");

130  
ªtu∫_code
;

131 
	}
}

	@tools/dissectors/packet-chdr.c

21 
	~"c⁄fig.h
"

23 
	~<glib.h
>

24 
	~<ï™/∑ckë.h
>

25 
	~<˘y≥.h
>

26 
	~<°dio.h
>

28 
	~"../../ho°/lib/u§p/x300/x300_fw_comm⁄.h
"

30 
	#LOG_HEADER
 "[UHD CHDR] "

	)

32 #i‚de‡
mö


33 
	#mö
(
a
,
b
Ë(◊<b)?a:b)

	)

36 c⁄° 
	gCHDR_PORT
 = 
X300_VITA_UDP_PORT
;

38 
	g¥Ÿo_chdr
 = -1;

39 
	ghf_chdr_hdr
 = -1;

40 
	ghf_chdr_ty≥
 = -1;

41 
	ghf_chdr_has_time
 = -1;

42 
	ghf_chdr_eob
 = -1;

43 
	ghf_chdr_îr‹
 = -1;

44 
	ghf_chdr_£quí˚
 = -1;

45 
	ghf_chdr_∑ckë_size
 = -1;

46 
	ghf_chdr_°ªam_id
 = -1;

47 
	ghf_chdr_§c_dev
 = -1;

48 
	ghf_chdr_§c_ï
 = -1;

49 
	ghf_chdr_§c_blockp‹t
 = -1;

50 
	ghf_chdr_d°_dev
 = -1;

51 
	ghf_chdr_d°_ï
 = -1;

52 
	ghf_chdr_d°_blockp‹t
 = -1;

53 
	ghf_chdr_time°amp
 = -1;

54 
	ghf_chdr_∑ylﬂd
 = -1;

55 
	ghf_chdr_ext_ª•⁄£
 = -1;

56 
	ghf_chdr_ext_°©us_code
 = -1;

57 
	ghf_chdr_ext_£q_num
 = -1;

58 
	ghf_chdr_cmd
 = -1;

59 
	ghf_chdr_cmd_addªss
 = -1;

60 
	ghf_chdr_cmd_vÆue
 = -1;

62 c⁄° 
vÆue_°rög
 
	gCHDR_PACKET_TYPES
[] = {

71 c⁄° 
vÆue_°rög
 
	gCHDR_PACKET_TYPES_SHORT
[] = {

83 
	gheur_w¨nög_¥öãd
 = 0;

86 
göt
 
	gët_chdr
 = -1;

87 
göt
 
	gët_chdr_hódî
 = -1;

88 
göt
 
	gët_chdr_id
 = -1;

89 
göt
 
	gët_chdr_ª•⁄£
 = -1;

90 
göt
 
	gët_chdr_cmd
 = -1;

93 
¥Ÿo_ªgi°î_chdr
();

94 
¥Ÿo_ªg_h™doff_chdr
();

95 
dis£˘_chdr
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
);

98 
gboﬁón
 
	$heur_dis£˘_chdr
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
, * 
wh©i¶ove
)

100 if(
heur_w¨nög_¥öãd
 < 1){

101 
	`¥ötf
(
LOG_HEADER
"heuristic dissectorálwaysÑeturnsÅrue!\n");

102 
heur_w¨nög_¥öãd
++;

104 
	`dis£˘_chdr
(
tvb
, 
pöfo
, 
åì
);

105  (
TRUE
);

106 
	}
}

108 
	$byã_sw≠
(
guöt8
 *
byãs
, 
göt
 
Àn
)

110 
guöt8
 
tmp
[4];

112 if(
Àn
 !(
tmp
)){

113 
	`¥ötf
(
LOG_HEADER
"FATAL!Çumber of bytes don't match 32 bit!\n");

117 
	`mem˝y
(
tmp
, 
byãs
, (tmp));

118 
byãs
[0] = 
tmp
[3];

119 
byãs
[1] = 
tmp
[2];

120 
byãs
[2] = 
tmp
[1];

121 
byãs
[3] = 
tmp
[0];

122 
	}
}

124 
	$gë_time°amp
(
guöt8
 *
byãs
, 
göt
 
Àn
)

126 
ts
;

127 
å™s
;

128 
ô
;

130 if(
Àn
 != ()){

131 
	`¥ötf
(
LOG_HEADER
"FATAL!Åimestampsálways consist of 64 bits!\n");

134 
	`byã_sw≠
(
byãs
 + 0, 4);

135 
	`byã_sw≠
(
byãs
 + 4, 4);

137 
ts
 = 0;

138 
ô
 = 0; it < 8; it++){

139 
ts
 =Ås << 8;

140 
å™s
 = (
guöt64
Ë
byãs
[
ô
];

141 
ts
 =Å†| 
å™s
;

144  (
ts
);

145 
	}
}

148 
	$dis£˘_chdr
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
)

151 
¥Ÿo_ôem
 *
ôem
;

152 
¥Ÿo_ôem
 *
°ªam_ôem
;

153 
¥Ÿo_åì
 *
chdr_åì
;

154 
¥Ÿo_ôem
 *
hódî_ôem
;

155 
¥Ÿo_åì
 *
hódî_åì
;

156 
¥Ÿo_åì
 *
°ªam_åì
;

157 
¥Ÿo_ôem
 *
ª•⁄£_ôem
;

158 
¥Ÿo_åì
 *
ª•⁄£_åì
;

159 
¥Ÿo_ôem
 *
cmd_ôem
;

160 
¥Ÿo_åì
 *
cmd_åì
;

161 
göt
 
Àn
;

163 
göt
 
Êag_off£t
;

164 
guöt8
 *
byãs
;

165 
guöt8
 
hdr_bôs
 = 0;

166 
gboﬁón
 
Êag_has_time
 = 0;

167 
gboﬁón
 
Êag_is_d©a
 = 0;

168 
gboﬁón
 
Êag_is_fc
 = 0;

169 
gboﬁón
 
Êag_is_cmd
 = 0;

170 
gboﬁón
 
Êag_is_ª•
 = 0;

171 
gboﬁón
 
Êag_is_eob
 = 0;

172 
gboﬁón
 
Êag_is_îr‹
 = 0;

173 
uöt64_t
 
time°amp
;

174 
gboﬁón
 
is_√tw‹k
;

175 
göt
 
ídü¬ess
;

176 
göt
 
id_pos_usb
[4] = {3, 2, 1, 0};

177 
göt
 
id_pos_√t
[4] = {0, 1, 2, 3};

178 
göt
 
id_pos
[4] = {0, 1, 2, 3};

180 if(
pöfo
->
m©ch_uöt
 =
CHDR_PORT
){

181 
is_√tw‹k
 = 
TRUE
;

182 
Êag_off£t
 = 0;

183 
ídü¬ess
 = 
ENC_BIG_ENDIAN
;

184 
	`mem˝y
(
id_pos
, 
id_pos_√t
, 4 * (
göt
));

187 
is_√tw‹k
 = 
FALSE
;

188 
Êag_off£t
 = 3;

189 
ídü¬ess
 = 
ENC_LITTLE_ENDIAN
;

190 
	`mem˝y
(
id_pos
, 
id_pos_usb
, 4 * (
göt
));

193 
Àn
 = 
	`tvb_ªp‹ãd_Àngth
(
tvb
);

195 
	`cﬁ_≠≥nd_°r
(
pöfo
->
cöfo
, 
COL_PROTOCOL
, "/CHDR");

198 
	`cﬁ_≠≥nd_£p_f°r
(
pöfo
->
cöfo
, 
COL_INFO
, 
NULL
, "CHDR");

200 i‡(
åì
){

201 
hódî_size
 = -1;

203 
guöt16
 
hdr_öfo
;

204 i‡(
Àn
 >= 4){

205 
guöt8
 
pkt_ty≥
 = 0;

206 
hdr_öfo
 = 
	`tvb_gë_¡ohs
(
tvb
, 
Êag_off£t
);

207 
hódî_size
 = 8;

208 
hdr_bôs
 = (
hdr_öfo
 & 0xF000) >> 12;

209 
pkt_ty≥
 = 
hdr_bôs
 >> 2;

210 
Êag_is_d©a
 = (
pkt_ty≥
 == 0);

211 
Êag_is_fc
 = (
pkt_ty≥
 == 1);

212 
Êag_is_cmd
 = (
pkt_ty≥
 == 2);

213 
Êag_is_ª•
 = (
pkt_ty≥
 == 3);

214 
Êag_is_eob
 = 
Êag_is_d©a
 && (
hdr_bôs
 & 0x1);

215 
Êag_is_îr‹
 = 
Êag_is_ª•
 && (
hdr_bôs
 & 0x1);

216 
Êag_has_time
 = 
hdr_bôs
 & 0x2;

217 i‡(
Êag_has_time
) {

218 
hódî_size
 += 8;

224 
ôem
 = 
	`¥Ÿo_åì_add_ôem
(
åì
, 
¥Ÿo_chdr
, 
tvb
, 0, 
	`mö
(
Àn
, 
hódî_size
), 
ENC_NA
);

226 i‡(
Àn
 >= 4) {

227 
chdr_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
ôem
, 
ët_chdr
);

230 
hódî_ôem
 = 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_hdr
, 
tvb
, 
Êag_off£t
, 1, 
ídü¬ess
);

231 
hódî_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
hódî_ôem
, 
ët_chdr_hódî
);

232 
	`¥Ÿo_ôem_≠≥nd_ãxt
(
hódî_ôem
, ", PacketÅype: %s %04x",

233 
	`vÆ_to_°r
(
hdr_bôs
 & 0xD, 
CHDR_PACKET_TYPES
, "Unknown (0x%x)"), hdr_bits

236 
	`¥Ÿo_åì_add_°rög
(

237 
hódî_åì
, 
hf_chdr_ty≥
, 
tvb
, 
Êag_off£t
, 1,

238 
	`vÆ_to_°r
(
hdr_bôs
 & 0xD, 
CHDR_PACKET_TYPES_SHORT
, "invalid")

241 
	`¥Ÿo_åì_add_boﬁón
(
hódî_åì
, 
hf_chdr_has_time
, 
tvb
, 
Êag_off£t
, 1, 
Êag_has_time
);

242 i‡(
Êag_is_d©a
) {

243 
	`¥Ÿo_åì_add_boﬁón
(
hódî_åì
, 
hf_chdr_eob
, 
tvb
, 
Êag_off£t
, 1, 
Êag_is_eob
);

245 i‡(
Êag_is_ª•
) {

246 
	`¥Ÿo_åì_add_boﬁón
(
hódî_åì
, 
hf_chdr_îr‹
, 
tvb
, 
Êag_off£t
, 1, 
Êag_is_îr‹
);

251 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_£quí˚
, 
tvb
, (
is_√tw‹k
 ? 0:2), 2, 
ídü¬ess
);

252 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_∑ckë_size
, 
tvb
, (
is_√tw‹k
 ? 2:0), 2, 
ídü¬ess
);

254 i‡(
Àn
 >= 8){

256 
°ªam_ôem
 = 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_°ªam_id
, 
tvb
, 4, 4, 
ídü¬ess
);

257 
°ªam_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
°ªam_ôem
, 
ët_chdr_id
);

258 
	`¥Ÿo_åì_add_ôem
(
°ªam_åì
, 
hf_chdr_§c_dev
, 
tvb
, 4+
id_pos
[0], 1, 
ENC_NA
);

259 
	`¥Ÿo_åì_add_ôem
(
°ªam_åì
, 
hf_chdr_§c_ï
, 
tvb
, 4+
id_pos
[1], 1, 
ENC_NA
);

260 
	`¥Ÿo_åì_add_ôem
(
°ªam_åì
, 
hf_chdr_d°_dev
, 
tvb
, 4+
id_pos
[2], 1, 
ENC_NA
);

261 
	`¥Ÿo_åì_add_ôem
(
°ªam_åì
, 
hf_chdr_d°_ï
, 
tvb
, 4+
id_pos
[3], 1, 
ENC_NA
);

264 
guöt32
 
sid
 = 
	`tvb_gë_¡ohl
(
tvb
, 4);

265 
guöt8
* 
sid_byãs
 = (guöt8*Ë&
sid
;

266 i‡(
sid_byãs
[3] != 0) {

267 
	`¥Ÿo_åì_add_ôem
(
°ªam_åì
, 
hf_chdr_§c_blockp‹t
, 
tvb
, 4+2, 1, 
ENC_NA
);

269 i‡(
sid_byãs
[1] != 0) {

270 
	`¥Ÿo_åì_add_ôem
(
°ªam_åì
, 
hf_chdr_d°_blockp‹t
, 
tvb
, 4+0, 1, 
ENC_NA
);

274 
	`¥Ÿo_ôem_≠≥nd_ãxt
(
°ªam_ôem
, " (%02X:%02X>%02X:%02X)",

275 
sid_byãs
[3],

276 
sid_byãs
[2],

277 
sid_byãs
[1],

278 
sid_byãs
[0]

284 i‡((
Êag_has_time
Ë&& (
Àn
 >= 16)){

285 i‡(
is_√tw‹k
)

286 
ôem
 = 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_time°amp
, 
tvb
, 8, 8, 
ídü¬ess
);

288 
byãs
 = (
guöt8
*Ë
	`tvb_gë_°rög_íc
(
	`wmem_∑ckë_sc›e
(), 
tvb
, 8, (), 
ENC_ASCII
);

289 
time°amp
 = 
	`gë_time°amp
(
byãs
, ());

290 
	`¥Ÿo_åì_add_uöt64
(
chdr_åì
, 
hf_chdr_time°amp
, 
tvb
, 8, 8, 
time°amp
);

294 
ªmaöög_byãs
 = (
Àn
 - 
hódî_size
);

295 
show_øw_∑ylﬂd
 = (
ªmaöög_byãs
 > 0);

297 i‡(
Êag_is_cmd
 && 
ªmaöög_byãs
 == 8) {

298 
cmd_ôem
 = 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_cmd
, 
tvb
, 
hódî_size
, 8, 
ídü¬ess
);

299 
cmd_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
cmd_ôem
, 
ët_chdr_cmd
);

300 
	`¥Ÿo_åì_add_ôem
(
cmd_åì
, 
hf_chdr_cmd_addªss
, 
tvb
, 
hódî_size
, 4, 
ídü¬ess
);

301 
	`¥Ÿo_åì_add_ôem
(
cmd_åì
, 
hf_chdr_cmd_vÆue
, 
tvb
, 
hódî_size
 + 4, 4, 
ídü¬ess
);

302 } i‡(
Êag_is_ª•
) {

303 
ª•⁄£_ôem
 = 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_ext_ª•⁄£
, 
tvb
, 
hódî_size
, 8, 
ídü¬ess
);

304 
ª•⁄£_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
ª•⁄£_ôem
, 
ët_chdr_ª•⁄£
);

306 
	`¥Ÿo_åì_add_ôem
(
ª•⁄£_åì
, 
hf_chdr_ext_°©us_code
, 
tvb
, 
hódî_size
, 4, 
ídü¬ess
);

308 
	`¥Ÿo_åì_add_ôem
(
ª•⁄£_åì
, 
hf_chdr_ext_£q_num
, 
tvb
, (
hódî_size
 + 4 + (
is_√tw‹k
 ? 2 : 0)), 2, 
ídü¬ess
);

309 } i‡(
show_øw_∑ylﬂd
) {

310 
	`¥Ÿo_åì_add_ôem
(
chdr_åì
, 
hf_chdr_∑ylﬂd
, 
tvb
, 
hódî_size
, -1, 
ENC_NA
);

315 
	}
}

317 
	$¥Ÿo_ªgi°î_chdr
()

319 
hf_ªgi°î_öfo
 
hf
[] = {

320 { &
hf_chdr_hdr
,

322 
FT_UINT8
, 
BASE_HEX
,

323 
NULL
, 0xF0,

324 
NULL
, 
HFILL
 }

326 { &
hf_chdr_ty≥
,

328 
FT_STRINGZ
, 
BASE_NONE
,

329 
NULL
, 0x00,

330 "Packë Ty≥", 
HFILL
 }

332 { &
hf_chdr_has_time
,

334 
FT_BOOLEAN
, 
BASE_NONE
,

335 
NULL
, 0x20,

336 
NULL
, 
HFILL
 }

338 { &
hf_chdr_eob
,

340 
FT_BOOLEAN
, 
BASE_NONE
,

341 
NULL
, 0x10,

342 
NULL
, 
HFILL
 }

344 { &
hf_chdr_îr‹
,

346 
FT_BOOLEAN
, 
BASE_NONE
,

347 
NULL
, 0x10,

348 
NULL
, 
HFILL
 }

350 { &
hf_chdr_£quí˚
,

352 
FT_UINT16
, 
BASE_DEC
,

353 
NULL
, 0x0FFF,

354 
NULL
, 
HFILL
 }

356 { &
hf_chdr_∑ckë_size
,

358 
FT_UINT16
, 
BASE_DEC
,

359 
NULL
, 0x0,

360 
NULL
, 
HFILL
 }

362 { &
hf_chdr_°ªam_id
,

364 
FT_IPv4
, 
BASE_NONE
,

365 
NULL
, 0x0,

366 
NULL
, 
HFILL
 }

368 { &
hf_chdr_§c_dev
,

370 
FT_UINT8
, 
BASE_DEC
,

371 
NULL
, 0x0,

372 
NULL
, 
HFILL
 }

374 { &
hf_chdr_§c_ï
,

376 
FT_UINT8
, 
BASE_DEC
,

377 
NULL
, 0x0,

378 
NULL
, 
HFILL
 }

380 { &
hf_chdr_§c_blockp‹t
,

382 
FT_UINT8
, 
BASE_DEC
,

383 
NULL
, 0xF,

384 
NULL
, 
HFILL
 }

386 { &
hf_chdr_d°_dev
,

388 
FT_UINT8
, 
BASE_DEC
,

389 
NULL
, 0x0,

390 
NULL
, 
HFILL
 }

392 { &
hf_chdr_d°_ï
,

394 
FT_UINT8
, 
BASE_DEC
,

395 
NULL
, 0x0,

396 
NULL
, 
HFILL
 }

398 { &
hf_chdr_d°_blockp‹t
,

400 
FT_UINT8
, 
BASE_DEC
,

401 
NULL
, 0xF,

402 
NULL
, 
HFILL
 }

404 { &
hf_chdr_time°amp
,

406 
FT_UINT64
, 
BASE_DEC
,

407 
NULL
, 0x0,

408 
NULL
, 
HFILL
 }

410 { &
hf_chdr_∑ylﬂd
,

412 
FT_BYTES
, 
BASE_NONE
,

413 
NULL
, 0x0,

414 
NULL
, 
HFILL


417 { &
hf_chdr_ext_ª•⁄£
,

419 
FT_BYTES
, 
BASE_NONE
,

420 
NULL
, 0x0,

421 
NULL
, 
HFILL
 }

423 { &
hf_chdr_ext_°©us_code
,

425 
FT_UINT32
, 
BASE_DEC
,

426 
NULL
, 0x0,

427 
NULL
, 
HFILL
 }

429 { &
hf_chdr_ext_£q_num
,

431 
FT_UINT16
, 
BASE_DEC
,

432 
NULL
, 0x0FFF,

433 
NULL
, 
HFILL
 }

435 { &
hf_chdr_cmd
,

437 
FT_BYTES
, 
BASE_NONE
,

438 
NULL
, 0x0,

439 
NULL
, 
HFILL
 }

441 { &
hf_chdr_cmd_addªss
,

443 
FT_UINT32
, 
BASE_DEC
,

444 
NULL
, 0x0,

445 
NULL
, 
HFILL
 }

447 { &
hf_chdr_cmd_vÆue
,

449 
FT_UINT32
, 
BASE_HEX
,

450 
NULL
, 0x0,

451 
NULL
, 
HFILL
 }

455 
göt
 *
ët
[] = {

456 &
ët_chdr
,

457 &
ët_chdr_hódî
,

458 &
ët_chdr_id
,

459 &
ët_chdr_ª•⁄£
,

460 &
ët_chdr_cmd


463 
¥Ÿo_chdr
 = 
	`¥Ÿo_ªgi°î_¥Ÿocﬁ
("UHD CHDR", "CHDR", "chdr");

464 
	`¥Ÿo_ªgi°î_fõld_¨øy
(
¥Ÿo_chdr
, 
hf
, 
	`¨øy_Àngth
(hf));

465 
	`¥Ÿo_ªgi°î_subåì_¨øy
(
ët
, 
	`¨øy_Àngth
(ett));

466 
	`ªgi°î_dis£˘‹
("chdr", 
dis£˘_chdr
, 
¥Ÿo_chdr
);

467 
	}
}

470 
	$¥Ÿo_ªg_h™doff_chdr
()

473 #i‡
VERSION_MAJOR
 == 1

474 
	`heur_dis£˘‹_add
("usb.bulk", 
heur_dis£˘_chdr
, 
¥Ÿo_chdr
);

475 #ñi‡
VERSION_MAJOR
 == 2

476 
	`heur_dis£˘‹_add
("usb.bulk", 
heur_dis£˘_chdr
, "USB dis£˘‹", "usb_bulk", 
¥Ÿo_chdr
, 
HEURISTIC_ENABLE
);

478 #îr‹ 
Wúesh¨k
 
vîsi⁄
 
nŸ
 
found
 
‹
ÇŸ 
com∑tibÀ


481 
dis£˘‹_h™dÀ_t
 
chdr_h™dÀ
;

482 
chdr_h™dÀ
 = 
	`¸óã_dis£˘‹_h™dÀ
(
dis£˘_chdr
, 
¥Ÿo_chdr
);

483 
	`dis£˘‹_add_uöt
("udp.p‹t", 
CHDR_PORT
, 
chdr_h™dÀ
);

484 
	}
}

	@tools/dissectors/packet-octoclock.c

21 
	~"c⁄fig.h
"

23 
	~<glib.h
>

24 
	~<ï™/∑ckë.h
>

25 
	~<˘y≥.h
>

26 
	~<°dio.h
>

27 
	~<°ddef.h
>

29 
	~"../../ho°/lib/u§p_˛ock/o˘o˛ock/comm⁄.h
"

31 
	#LOG_HEADER
 "[O˘o˛ock] "

	)

32 
	#size_mem
(
t
,
m
Ë((—*)0)->m)

	)

33 
	#∑ckë_ñem_size
(
m
Ë(
	`size_mem
(
o˘o˛ock_∑ckë_t
,m))

	)

34 
	#∑ckë_off£t
(
m
Ë(
	`off£tof
(
o˘o˛ock_∑ckë_t
, m))

	)

35 c⁄° 
	gOCTOCLOCK_PORT
 = 
OCTOCLOCK_UDP_CTRL_PORT
;

37 
	g¥Ÿo_o˘o
 = -1;

38 
	ghf_o˘o_¥Ÿo_vîsi⁄
 = -1;

39 
	ghf_o˘o_¥Ÿo_£quí˚
 = -1;

40 
	ghf_o˘o_¥Ÿo_code
 = -1;

41 
	ghf_o˘o_¥Ÿo_poﬁsize
 = -1;

42 
	ghf_o˘o_¥Ÿo_d©a
 = -1;

43 
	ghf_o˘o_¥Ÿo_∑ylﬂd
 = -1;

44 
	ghf_o˘o_¥Ÿo_Àn
 = -1;

45 
göt
 
	gët_o˘o
 = -1;

46 c⁄° 
vÆue_°rög
 
	g∑ckëcodes
[] = {

76 { 0, 
NULL
 }

79 
¥Ÿo_ªgi°î_o˘o
();

80 
¥Ÿo_ªg_h™doff_o˘o
();

81 
dis£˘_o˘o
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
);

83 
	$dis£˘_o˘o
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
)

85 
	`cﬁ_£t_°r
(
pöfo
->
cöfo
, 
COL_PROTOCOL
, "OCTO");

86 
	`cﬁ_˛ór
(
pöfo
->
cöfo
, 
COL_INFO
);

87 
¥Ÿo_ôem
 *
ti
 = 
	`¥Ÿo_åì_add_ôem
(
åì
, 
¥Ÿo_o˘o
, 
tvb
, 0, -1, 
ENC_NA
);

88 
¥Ÿo_åì
 *
o˘o_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
ti
, 
ët_o˘o
);

89 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

90 
hf_o˘o_¥Ÿo_vîsi⁄
,

91 
tvb
,

92 
	`∑ckë_off£t
(
¥Ÿo_vî
),

93 
	`∑ckë_ñem_size
(
¥Ÿo_vî
),

94 
ENC_LITTLE_ENDIAN
);

95 
guöt32
 
ªv
 = 
	`tvb_gë_Àtohl
(
tvb
, 
	`∑ckë_off£t
(
¥Ÿo_vî
));

96 if(
ªv
==3)

98 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

99 
hf_o˘o_¥Ÿo_£quí˚
,

100 
tvb
,

101 
	`∑ckë_off£t
(
£quí˚
),

102 
	`∑ckë_ñem_size
(
£quí˚
),

103 
ENC_LITTLE_ENDIAN
);

104 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

105 
hf_o˘o_¥Ÿo_code
,

106 
tvb
,

107 
	`∑ckë_off£t
(
code
),

108 
	`∑ckë_ñem_size
(
code
),

109 
ENC_LITTLE_ENDIAN
);

110 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

111 
hf_o˘o_¥Ÿo_poﬁsize
,

112 
tvb
,

113 
	`∑ckë_off£t
(
poﬁsize
),

114 
	`∑ckë_ñem_size
(
poﬁsize
),

115 
ENC_LITTLE_ENDIAN
);

119 
guöt16
 
Àn
 = 
	`tvb_gë_Àtohs
(
tvb
, 
	`∑ckë_off£t
(len));

120 if(
Àn
 &&Üí <
	`∑ckë_ñem_size
(
d©a
))

122 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

123 
hf_o˘o_¥Ÿo_∑ylﬂd
,

124 
tvb
,

125 
	`∑ckë_off£t
(
d©a
),

126 
Àn
,

127 
ENC_LITTLE_ENDIAN
);

129 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

130 
hf_o˘o_¥Ÿo_d©a
,

131 
tvb
,

132 
	`∑ckë_off£t
(
d©a
),

133 
	`∑ckë_ñem_size
(
d©a
),

134 
ENC_LITTLE_ENDIAN
);

135 
	`¥Ÿo_åì_add_ôem
(
o˘o_åì
,

136 
hf_o˘o_¥Ÿo_Àn
,

137 
tvb
,

138 
	`∑ckë_off£t
(
Àn
),

139 
	`∑ckë_ñem_size
(
Àn
),

140 
ENC_LITTLE_ENDIAN
);

142 
	}
}

145 
	$¥Ÿo_ªgi°î_o˘o
()

147 
hf_ªgi°î_öfo
 
hf
[] = {

148 { &
hf_o˘o_¥Ÿo_vîsi⁄
,

150 
FT_UINT32
, 
BASE_DEC
,

151 
NULL
, 0x0,

152 "PrŸocﬁ Revisi⁄", 
HFILL
 }

154 { &
hf_o˘o_¥Ÿo_£quí˚
,

156 
FT_UINT32
, 
BASE_DEC
,

157 
NULL
, 0x0,

158 
NULL
, 
HFILL
 }

160 { &
hf_o˘o_¥Ÿo_code
,

162 
FT_UINT8
, 
BASE_DEC
,

163 
	`VALS
(
∑ckëcodes
), 0x0,

164 
NULL
, 
HFILL
 }

166 { &
hf_o˘o_¥Ÿo_poﬁsize
,

168 
FT_UINT16
, 
BASE_DEC
,

169 
NULL
, 0x0,

170 
NULL
, 
HFILL
 }

172 { &
hf_o˘o_¥Ÿo_∑ylﬂd
,

174 
FT_STRING
, 
BASE_NONE
,

175 
NULL
, 0x0,

176 
NULL
, 
HFILL
 }

178 { &
hf_o˘o_¥Ÿo_d©a
,

180 
FT_BYTES
, 
BASE_NONE
,

181 
NULL
, 0x0,

182 
NULL
, 
HFILL
 }

184 { &
hf_o˘o_¥Ÿo_Àn
,

186 
FT_UINT16
, 
BASE_DEC
,

187 
NULL
, 0x0,

188 
NULL
, 
HFILL
 }

192 
göt
 *
ët
[] = {

193 &
ët_o˘o


195 
¥Ÿo_o˘o
 = 
	`¥Ÿo_ªgi°î_¥Ÿocﬁ
(

201 
	`¥Ÿo_ªgi°î_fõld_¨øy
(
¥Ÿo_o˘o
, 
hf
, 
	`¨øy_Àngth
(hf));

202 
	`¥Ÿo_ªgi°î_subåì_¨øy
(
ët
, 
	`¨øy_Àngth
(ett));

203 
	`ªgi°î_dis£˘‹
("o˘o", 
dis£˘_o˘o
, 
¥Ÿo_o˘o
);

204 
	}
}

206 
	$¥Ÿo_ªg_h™doff_o˘o
()

208 
dis£˘‹_h™dÀ_t
 
o˘o_h™dÀ
;

209 
o˘o_h™dÀ
 = 
	`¸óã_dis£˘‹_h™dÀ
(
dis£˘_o˘o
, 
¥Ÿo_o˘o
);

210 
	`dis£˘‹_add_uöt
("udp.p‹t", 
OCTOCLOCK_PORT
, 
o˘o_h™dÀ
);

211 
	`dis£˘‹_add_uöt
("udp.p‹t", 
OCTOCLOCK_UDP_GPSDO_PORT
, 
o˘o_h™dÀ
);

212 
	}
}

	@tools/dissectors/packet-zpu.c

32 
	~"c⁄fig.h
"

34 
	~<glib.h
>

35 
	~<ï™/∑ckë.h
>

36 
	~<˘y≥.h
>

37 
	~<°dio.h
>

38 
	~<ídün.h
>

40 
	~"../../ho°/lib/u§p/x300/x300_fw_comm⁄.h
"

41 
	~"zpu_addr_«mes.h
"

43 
	#LOG_HEADER
 "[ZPU] "

	)

45 #i‚de‡
mö


46 
	#mö
(
a
,
b
Ë(◊<b)?a:b)

	)

49 c⁄° 
	gFW_PORT
 = 
X300_FW_COMMS_UDP_PORT
;

51 
	g¥Ÿo_zpu
 = -1;

52 
	ghf_zpu_Êags
 = -1;

53 
	ghf_zpu_Êags_ack
 = -1;

54 
	ghf_zpu_Êags_îr‹
 = -1;

55 
	ghf_zpu_Êags_poke
 = -1;

56 
	ghf_zpu_Êags_≥ek
 = -1;

57 
	ghf_zpu_£q
 = -1;

58 
	ghf_zpu_addr
 = -1;

59 
	ghf_zpu_d©a
 = -1;

60 
	ghf_zpu_shmem_addr
 = -1;

61 
	ghf_zpu_shmem_addr_«me
 = -1;

64 
göt
 
	gët_zpu
 = -1;

65 
göt
 
	gët_zpu_Êags
 = -1;

69 
¥Ÿo_ªgi°î_zpu
();

70 
¥Ÿo_ªg_h™doff_zpu
();

71 
dis£˘_zpu
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
);

74 
	$dis£˘_zpu
(
tvbuff_t
 *
tvb
, 
∑ckë_öfo
 *
pöfo
, 
¥Ÿo_åì
 *
åì
)

76 
¥Ÿo_ôem
 *
ôem
;

77 
¥Ÿo_åì
 *
zpu_åì
;

78 
¥Ÿo_ôem
 *
Êags_ôem
;

79 
¥Ÿo_åì
 *
Êags_åì
;

80 
göt
 
Àn
;

82 
gboﬁón
 
is_√tw‹k
;

83 
göt
 
ídü¬ess
;

85 i‡(
pöfo
->
m©ch_uöt
 =
FW_PORT
) {

86 
is_√tw‹k
 = 
TRUE
;

87 
ídü¬ess
 = 
ENC_BIG_ENDIAN
;

90 
is_√tw‹k
 = 
FALSE
;

91 
ídü¬ess
 = 
ENC_LITTLE_ENDIAN
;

94 
Àn
 = 
	`tvb_ªp‹ãd_Àngth
(
tvb
);

96 
	`cﬁ_≠≥nd_°r
(
pöfo
->
cöfo
, 
COL_PROTOCOL
, "/ZPU");

98 
	`cﬁ_≠≥nd_£p_f°r
(
pöfo
->
cöfo
, 
COL_INFO
, 
NULL
, "ZPU");

100 i‡(
åì
)

102 
ôem
 = 
	`¥Ÿo_åì_add_ôem
(
åì
, 
¥Ÿo_zpu
, 
tvb
, 0, 
	`mö
(16, 
Àn
), 
ENC_NA
);

105 i‡(
Àn
 >= 4)

107 
zpu_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
ôem
, 
ët_zpu
);

109 
Êags_ôem
 = 
	`¥Ÿo_åì_add_ôem
(
zpu_åì
, 
hf_zpu_Êags
, 
tvb
, 0, 4, 
ídü¬ess
);

110 
Êags_åì
 = 
	`¥Ÿo_ôem_add_subåì
(
Êags_ôem
, 
ët_zpu_Êags
);

112 
	`¥Ÿo_åì_add_ôem
(
Êags_åì
, 
hf_zpu_Êags_ack
, 
tvb
, 0, 4, 
ENC_NA
);

113 
	`¥Ÿo_åì_add_ôem
(
Êags_åì
, 
hf_zpu_Êags_îr‹
, 
tvb
, 0, 4, 
ENC_NA
);

114 
	`¥Ÿo_åì_add_ôem
(
Êags_åì
, 
hf_zpu_Êags_poke
, 
tvb
, 0, 4, 
ENC_NA
);

115 
	`¥Ÿo_åì_add_ôem
(
Êags_åì
, 
hf_zpu_Êags_≥ek
, 
tvb
, 0, 4, 
ENC_NA
);

118 i‡(
Àn
 >= 8)

120 
	`¥Ÿo_åì_add_ôem
(
zpu_åì
, 
hf_zpu_£q
, 
tvb
, 4, 4, 
ENC_NA
);

123 i‡(
Àn
 >= 12)

125 
	`¥Ÿo_åì_add_ôem
(
zpu_åì
, 
hf_zpu_addr
, 
tvb
, 8, 4, 
ENC_NA
);

126 #i‡
VERSION_MAJOR
 == 1

127 
guöt8
 *
byãs
 = 
	`tvb_gë_°rög
(
tvb
, 8, 4);

128 #ñi‡
VERSION_MAJOR
 == 2

129 
guöt8
 *
byãs
 = 
	`tvb_gë_°rög
(
	`wmem_∑ckë_sc›e
(), 
tvb
, 8, 4);

131 #îr‹ 
Wúesh¨k
 
vîsi⁄
 
nŸ
 
found
 
‹
ÇŸ 
com∑tibÀ


133 
addr
 = 0;

134 
	`mem˝y
(&
addr
, 
byãs
, 4);

136 
addr
 = (addr >> 24) | ((addr & 0x00FF0000) >> 8) | ((addr & 0x0000FF00) << 8) | ((addr & 0x000000FF) << 24);

138 i‡(
addr
 >
X300_FW_SHMEM_BASE
 &&áddr <= X300_FW_SHMEM_BASE + 0x2000)

140 
¥Ÿo_ôem
 *
shmem_addr_ôem
 = 
NULL
;

143 
addr
 -
X300_FW_SHMEM_BASE
;

144 
addr
 /= 4;

146 
shmem_addr_ôem
 = 
	`¥Ÿo_åì_add_uöt
(
zpu_åì
, 
hf_zpu_shmem_addr
, 
tvb
, 8, 4, 
addr
);

147 
	`¥Ÿo_ôem_≠≥nd_ãxt
(
shmem_addr_ôem
, ", RegisterÇame: %s",

148 
	`vÆ_to_°r
(
addr
, 
X300_SHMEM_NAMES
, "Unknown (0x%04x)")

154 i‡(
Àn
 >= 16)

156 
	`¥Ÿo_åì_add_ôem
(
zpu_åì
, 
hf_zpu_d©a
, 
tvb
, 12, 4, 
ENC_NA
);

162 
	}
}

164 
	$¥Ÿo_ªgi°î_zpu
()

166 
hf_ªgi°î_öfo
 
hf
[] = {

167 { &
hf_zpu_Êags
,

169 
FT_UINT32
, 
BASE_HEX
,

170 
NULL
, 0x0,

171 
NULL
, 
HFILL
 }

173 { &
hf_zpu_Êags_ack
,

175 
FT_BOOLEAN
, 
BASE_NONE
,

176 
NULL
, 0x1,

177 
NULL
, 
HFILL
 }

179 { &
hf_zpu_Êags_îr‹
,

181 
FT_BOOLEAN
, 
BASE_NONE
,

182 
NULL
, 0x2,

183 
NULL
, 
HFILL
 }

185 { &
hf_zpu_Êags_poke
,

187 
FT_BOOLEAN
, 
BASE_NONE
,

188 
NULL
, 0x4,

189 
NULL
, 
HFILL
 }

191 { &
hf_zpu_Êags_≥ek
,

193 
FT_BOOLEAN
, 
BASE_NONE
,

194 
NULL
, 0x8,

195 
NULL
, 
HFILL
 }

197 { &
hf_zpu_£q
,

199 
FT_UINT32
, 
BASE_HEX
,

200 
NULL
, 0x0,

201 
NULL
, 
HFILL
 }

203 { &
hf_zpu_addr
,

205 
FT_UINT32
, 
BASE_HEX
,

206 
NULL
, 0x0,

207 
NULL
, 
HFILL
 }

209 { &
hf_zpu_shmem_addr
,

211 
FT_UINT32
, 
BASE_DEC
,

212 
NULL
, 0x0,

213 
NULL
, 
HFILL
 }

215 { &
hf_zpu_d©a
,

217 
FT_UINT32
, 
BASE_HEX
,

218 
NULL
, 0x0,

219 
NULL
, 
HFILL
 }

223 
göt
 *
ët
[] = {

224 &
ët_zpu
,

225 &
ët_zpu_Êags
,

229 
¥Ÿo_zpu
 = 
	`¥Ÿo_ªgi°î_¥Ÿocﬁ
("ZPU FW", "ZPU", "zpu");

230 
	`¥Ÿo_ªgi°î_fõld_¨øy
(
¥Ÿo_zpu
, 
hf
, 
	`¨øy_Àngth
(hf));

231 
	`¥Ÿo_ªgi°î_subåì_¨øy
(
ët
, 
	`¨øy_Àngth
(ett));

232 
	`ªgi°î_dis£˘‹
("zpu", 
dis£˘_zpu
, 
¥Ÿo_zpu
);

233 
	}
}

236 
	$¥Ÿo_ªg_h™doff_zpu
()

239 
dis£˘‹_h™dÀ_t
 
zpu_h™dÀ
;

240 
zpu_h™dÀ
 = 
	`¸óã_dis£˘‹_h™dÀ
(
dis£˘_zpu
, 
¥Ÿo_zpu
);

241 
	`dis£˘‹_add_uöt
("udp.p‹t", 
FW_PORT
, 
zpu_h™dÀ
);

242 
	}
}

	@tools/dissectors/zpu_addr_names.h

24 c⁄° 
vÆue_°rög
 
	gX300_SHMEM_NAMES
[] = {

	@tools/uhd_dump/chdr_log.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<pˇp.h
>

21 
	~<√töë/ö.h
>

22 
	~<time.h
>

23 
	~<uni°d.h
>

24 
	~<°rög.h
>

26 
	~"uhd_dump.h
"

30 
	$ußge
()

32 
	`Ârötf
(
°dîr
,"Usage: chdr_dump [-h host_ip] filename.pcap\n");

33 
	`exô
(2);

34 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
pbuf_öfo
 *
∑ckë_buf„r
;

39 
ö_addr
 
ho°_addr
;

40 
ö_addr
 
u§p_addr
;

41 
timevÆ
 *
‹igö_ts
;

42 
‹igö_ts_ö_us
;

43 
dúe˘i⁄
;

44 
∑ckë_cou¡
[2];

45 
size_avîage
[2];

46 
size_hi°ogøm
[90][2];

47 
x
;

48 *
c⁄vîsi⁄_îr‹
[1];

49 
c
;

50 
buf„r
[26];

51 
time_sö˚_°¨t
;

53 c⁄° 
ù_hódî
 *ip_header;

55 
u32
 *
dump_hódî
;

58 
ho°_addr
.
s_addr
 = 0x0;

61 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h:u:")) != -1) {

62 
c
) {

65 i‡(*
›èrg
 == '\0')

66 
	`ußge
();

67 
ho°_addr
.
s_addr
 = 
	`°πﬁ
(
	`°πok
(
›èrg
,"."),
c⁄vîsi⁄_îr‹
,10) ;

68 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

69 
	`ußge
();

70 
ho°_addr
.
s_addr
 = ho°_addr.s_add∏| 
	`°πﬁ
(
	`°πok
(
NULL
,"."),
c⁄vîsi⁄_îr‹
,10) << 8;

71 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

72 
	`ußge
();

73 
ho°_addr
.
s_addr
 = ho°_addr.s_add∏| 
	`°πﬁ
(
	`°πok
(
NULL
,"."),
c⁄vîsi⁄_îr‹
,10) << 16;

74 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

75 
	`ußge
();

76 
ho°_addr
.
s_addr
 = ho°_addr.s_add∏| 
	`°πﬁ
(
	`°πok
(
NULL
,"\0"),
c⁄vîsi⁄_îr‹
,10) << 24;

77 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

78 
	`ußge
();

82 i‡(*
›èrg
 == '\0')

83 
	`ußge
();

84 
u§p_addr
.
s_addr
 = 
	`°πﬁ
(
	`°πok
(
›èrg
,"."),
c⁄vîsi⁄_îr‹
,10) ;

85 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

86 
	`ußge
();

87 
u§p_addr
.
s_addr
 = u§p_addr.s_add∏| 
	`°πﬁ
(
	`°πok
(
NULL
,"."),
c⁄vîsi⁄_îr‹
,10) << 8;

88 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

89 
	`ußge
();

90 
u§p_addr
.
s_addr
 = u§p_addr.s_add∏| 
	`°πﬁ
(
	`°πok
(
NULL
,"."),
c⁄vîsi⁄_îr‹
,10) << 16;

91 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

92 
	`ußge
();

93 
u§p_addr
.
s_addr
 = u§p_addr.s_add∏| 
	`°πﬁ
(
	`°πok
(
NULL
,"\0"),
c⁄vîsi⁄_îr‹
,10) << 24;

94 i‡(**
c⁄vîsi⁄_îr‹
 != '\0')

95 
	`ußge
();

100 
	`ußge
();

104 
¨gc
 -(
›töd
 - 1);

105 
¨gv
 +(
›töd
 -1);

109 i‡(
¨gc
 != 2) {

110 
	`ußge
();

115 
∑ckë_buf„r
 = 
	`mÆloc
((
pbuf_öfo
));

118 
‹igö_ts
 = 
	`mÆloc
((
timevÆ
));

121 
	`gë_udp_p‹t_‰om_fûe
(
CHDR_PORT
,
¨gv
[1],
∑ckë_buf„r
,
‹igö_ts
);

124 
‹igö_ts_ö_us
 = 
‹igö_ts
->
tv_£c
 * 1000000 + origö_ts->
tv_u£c
;

128 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->
°¨t
;

129 
x
 = 0;

131 
∑ckë_buf„r
->
cuºít
 !
NULL
) {

132 
x
++;

133 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->cuºít->
√xt
;

136 
	`Ârötf
(
°dout
,"\n===================================================================\n");

137 
	`Ârötf
(
°dout
,"\¿TŸÆ m©chögÖackë cou¡ i¿ˇ±uª fûe: %d\n",
x
);

138 
	`Ârötf
(
°dout
,"\n===================================================================\n\n");

141 i‡(
x
 == 0) {

142 
	`exô
(0);

146 i‡(
ho°_addr
.
s_addr
 == 0x0)

147 
	`gë_c⁄√˘i⁄_ídpoöts
(
∑ckë_buf„r
,&
ho°_addr
,&
u§p_addr
);

152 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->
°¨t
;

154 
x
=0;x<90;x+=1)

155 
size_hi°ogøm
[
x
][
H2U
] = size_hi°ogøm[x][
U2H
] = 0;

157 
size_avîage
[
H2U
] = size_avîage[
U2H
] = 0;

158 
∑ckë_cou¡
[
H2U
] =Öackë_cou¡[
U2H
] = 0;

160 
∑ckë_buf„r
->
cuºít
 !
NULL
) {

163 
ù_hódî
 = (ù_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
);

166 i‡(
ù_hódî
->
ù_§c
.
s_addr
 =
ho°_addr
.s_addr)

167 
dúe˘i⁄
 = 
H2U
;

169 
dúe˘i⁄
 = 
U2H
;

171 
∑ckë_cou¡
[
dúe˘i⁄
]++;

172 
size_avîage
[
dúe˘i⁄
]+=()
∑ckë_buf„r
->
cuºít
->
size
;

173 i‡((
x
=
∑ckë_buf„r
->
cuºít
->
size
) > 9000)

174 
	`Ârötf
(
°dîr
,"CurrentÖacket size = %dátábsoluteÅime %s,ÑelativeÅime %f,Éxceeds MTU! Skip counting.",

175 
x
,
	`f‹m©_gmt
(&
∑ckë_buf„r
->
cuºít
->
ts
,
buf„r
),(
	`ªœtive_time
(&∑ckë_buf„r->cuºít->ts,
‹igö_ts
)));

177 
size_hi°ogøm
[
x
/100][
dúe˘i⁄
]++;

179 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->cuºít->
√xt
;

183 
	`Ârötf
(
°dout
,"\n===================================================================\n");

184 
	`Ârötf
(
°dout
,"\¿Avîagê∑ckë sizêHo° -> USRP: %d\n",()(
size_avîage
[
H2U
]/
∑ckë_cou¡
[H2U]));

185 
	`Ârötf
(
°dout
,"\¿Avîagê∑ckë sizêUSRP -> Ho°: %d\n",()(
size_avîage
[
U2H
]/
∑ckë_cou¡
[U2H]));

186 
	`Ârötf
(
°dout
,"\n===================================================================\n\n");

191 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->
°¨t
;

192 
x
 = 0;

194 
∑ckë_buf„r
->
cuºít
 !
NULL
) {

195 
x
++;

198 
time_sö˚_°¨t
 = ((Ë
∑ckë_buf„r
->
cuºít
->
ts
.
tv_£c
 * 1000000 +Öackë_buf„r->cuºít->ts.
tv_u£c
 - 
‹igö_ts_ö_us
)/1000000;

201 
dump_hódî
 = (
u32
 *Ë(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
);

213 
	`Ârötf
(
°dout
,"%8d %‡\t",
x
,
time_sö˚_°¨t
);

214 
	`¥öt_dúe˘i⁄
(
∑ckë_buf„r
,&
ho°_addr
,&
u§p_addr
);

215 
	`Ârötf
(
°dout
,"\t");

216 
	`¥öt_size
(
∑ckë_buf„r
);

217 
	`Ârötf
(
°dout
,"\t");

218 
	`¥öt_sid
(
∑ckë_buf„r
);

219 
	`Ârötf
(
°dout
,"\t");

220 
	`¥öt_vôa_hódî
(
∑ckë_buf„r
,&
ho°_addr
);

221 
	`Ârötf
(
°dout
,"\n");

223 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->cuºít->
√xt
;

228 
	}
}

	@tools/uhd_dump/uhd_dump.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<pˇp.h
>

21 
	~<√töë/ö.h
>

22 
	~<time.h
>

23 
	~<°rög.h
>

25 
	~"uhd_dump.h
"

26 
	~"u§p3_ªgs.h
"

30 
	$sw≠l⁄g
 (
nL⁄gNumbî
)

32 
	uu
 {
vi
; 
c
[()];};

33 
	uv
 {
ni
; 
d
[()];};

34 
u
 
un
;

35 
v
 
vn
;

36 
un
.
vi
 = 
nL⁄gNumbî
;

37 
vn
.
d
[0]=
un
.
c
[7];

38 
vn
.
d
[1]=
un
.
c
[6];

39 
vn
.
d
[2]=
un
.
c
[5];

40 
vn
.
d
[3]=
un
.
c
[4];

41 
vn
.
d
[4]=
un
.
c
[3];

42 
vn
.
d
[5]=
un
.
c
[2];

43 
vn
.
d
[6]=
un
.
c
[1];

44 
vn
.
d
[7]=
un
.
c
[0];

46  (
vn
.
ni
);

47 
	}
}

50 
	$sw≠öt
 (
nI¡Numbî
)

52 
	uu
 {
vi
; 
c
[()];};

53 
	uv
 {
ni
; 
d
[()];};

54 
u
 
un
;

55 
v
 
vn
;

56 
un
.
vi
 = 
nI¡Numbî
;

57 
vn
.
d
[0]=
un
.
c
[3];

58 
vn
.
d
[1]=
un
.
c
[2];

59 
vn
.
d
[2]=
un
.
c
[1];

60 
vn
.
d
[3]=
un
.
c
[0];

61  (
vn
.
ni
);

62 
	}
}

65 
	$sw≠sh‹t
 (
nSh‹tNumbî
)

67 
	uu
 {
vi
; 
c
[()];};

68 
	uv
 {
ni
; 
d
[()];};

69 
u
 
un
;

70 
v
 
vn
;

71 
un
.
vi
 = 
nSh‹tNumbî
;

72 
vn
.
d
[0]=
un
.
c
[1];

73 
vn
.
d
[1]=
un
.
c
[0];

75  (
vn
.
ni
);

76 
	}
}

79 *
	$f‹m©_gmt
(c⁄° 
timevÆ
 *
ts
, *
buf„r
)

81 
time_t
 
£c⁄ds
;

82 
tm
 
gmt
;

83 
£c⁄ds
 = 
ts
->
tv_£c
;

84 i‡((
	`gmtime_r
(&
£c⁄ds
, &
gmt
)Ë=
NULL
) {

85 
	`Ârötf
(
°dîr
, "FatalÅime format conversionÉrror.\n");

86 
	`exô
(2);

88 
	`•rötf
(
buf„r
,

90 
gmt
.
tm_yór
 + 1900, gmt.
tm_m⁄
 + 1, gmt.
tm_mday
,

91 
gmt
.
tm_hour
, gmt.
tm_mö
, gmt.
tm_£c
, (Ë(
ts
->
tv_u£c
 / 1000));

92  (
buf„r
);

93 
	}
}

97 
	$ªœtive_time
(
timevÆ
 *
evít_ts
, timevÆ *
‹igö_ts
)

99 
timevÆ
 
z
;

100 
x
;

101 
	`timîsub
(
evít_ts
,
‹igö_ts
,&
z
);

102 
x
 = ()
z
.
tv_£c
 + ()z.
tv_u£c
/1000000;

103  
x
;

104 
	}
}

107 
	$timevÆ2doubÀ
(
timevÆ
 *
evít_ts
)

109 
x
;

110 
x
 = ()
evít_ts
->
tv_£c
 + (Îvít_ts->
tv_u£c
/1000000;

111  
x
;

112 
	}
}

114 
	$gë_∑ckë
(
pbuf_öfo
 *
∑ckë_buf„r
 , c⁄° 
pˇp_pkthdr
 *
hódî
, c⁄° 
u_ch¨
 *
∑ckë
)

117 
∑ckë_buf„r
->
cuºít
->
size
 = 
hódî
->
ˇ∂í
;

118 
∑ckë_buf„r
->
cuºít
->
‹ig_size
 = 
hódî
->
Àn
;

121 
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
 = (*)
	`mÆloc
((
size_t
Ìackë_buf„r->cuºít->
size
);

124 
	`mem˝y
(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
,
∑ckë
,∑ckë_buf„r->cuºít->
size
);

125 
∑ckë_buf„r
->
cuºít
->
ts
 = 
hódî
->ts;

128 
∑ckë_buf„r
->
cuºít
->
√xt
 = 
	`mÆloc
( (
pbuf
));

129 
∑ckë_buf„r
->
cuºít
->
√xt
->
œ°
 =Öacket_buffer->current;

130 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->cuºít->
√xt
;

131 
	}
}

136 
	$gë_°¨t_time
(
timevÆ
 *
ts
 , c⁄° 
pˇp_pkthdr
 *
hódî
, c⁄° 
u_ch¨
 *
∑ckë
)

138 *
ts
 = 
hódî
->ts;

139 
	}
}

141 
	$gë_udp_p‹t_‰om_fûe
(c⁄° 
u16
 
udp_p‹t
, c⁄° *
fûíame
, 
pbuf_öfo
 *
∑ckë_buf„r
, 
timevÆ
 *
ts
)

143 
pˇp_t
 *
h™dÀ
;

144 
îrbuf
[
PCAP_ERRBUF_SIZE
];

145 
fûãr_exp
[256];

146 
bpf_¥ogøm
 
fûãr
;

149 i‡((
h™dÀ
 = 
	`pˇp_›í_ofÊöe
(
fûíame
,
îrbuf
)Ë=
NULL
) {

150 
	`Ârötf
(
°dîr
,"C™'à›íÖˇ∞fûêf‹Ñódög: %s\n",
îrbuf
);

151 
	`exô
(2);

156 i‡(
	`pˇp_di•©ch
(
h™dÀ
, 1, (
pˇp_h™dÀr
Ë
gë_°¨t_time
, (
u_ch¨
 *)
ts
) == -1) {

157 
	`Ârötf
(
°dîr
, "Eº‹Ö¨sög PCAP fûe: %s\n", 
	`pˇp_gëîr
(
h™dÀ
));

158 
	`exô
(2);

162 
	`pˇp_˛o£
(
h™dÀ
);

165 i‡((
h™dÀ
 = 
	`pˇp_›í_ofÊöe
(
fûíame
,
îrbuf
)Ë=
NULL
) {

166 
	`Ârötf
(
°dîr
,"C™'à›íÖˇ∞fûêf‹Ñódög: %s\n",
îrbuf
);

167 
	`exô
(2);

171 
	`•rötf
(
fûãr_exp
,"ud∞p‹à%d",
udp_p‹t
);

172 
	`¥ötf
("\nBPF fûã∏i†ud∞p‹à%d\n",
udp_p‹t
);

175 i‡(
	`pˇp_compûe
(
h™dÀ
, &
fûãr
, 
fûãr_exp
, 0, 0) == -1) {

176 
	`Ârötf
(
°dîr
, "Couldn'à∑r£ fûã∏%s: %s\n", 
fûãr_exp
, 
	`pˇp_gëîr
(
h™dÀ
));

177 
	`exô
(2);

181 i‡(
	`pˇp_£tfûãr
(
h™dÀ
, &
fûãr
) == -1) {

182 
	`Ârötf
(
°dîr
, "Couldn'àö°Æ»fûã∏%s: %s\n", 
fûãr_exp
, 
	`pˇp_gëîr
(
h™dÀ
));

183 
	`exô
(2);

187 
∑ckë_buf„r
->
°¨t
 =Öackë_buf„r->
cuºít
 = 
	`mÆloc
( (
pbuf
));

188 
∑ckë_buf„r
->
°¨t
->
œ°
 = 
NULL
;

191 i‡(
	`pˇp_di•©ch
(
h™dÀ
, -1, (
pˇp_h™dÀr
Ë
gë_∑ckë
, (
u_ch¨
 *)
∑ckë_buf„r
) == -1) {

192 
	`Ârötf
(
°dîr
, "Eº‹Ö¨sög PCAP fûe: %s\n", 
	`pˇp_gëîr
(
h™dÀ
));

193 
	`exô
(2);

197 i‡–
∑ckë_buf„r
->
°¨t
 =∑ckë_buf„r->
cuºít
) {

198 
	`‰ì
(
∑ckë_buf„r
->
cuºít
);

199 
∑ckë_buf„r
->
°¨t
 =Öackë_buf„r->
cuºít
 = 
NULL
;

202 
∑ckë_buf„r
->
íd
 =Öackë_buf„r->
cuºít
->
œ°
;

203 
∑ckë_buf„r
->
íd
->
√xt
 = 
NULL
;

204 
	`‰ì
(
∑ckë_buf„r
->
cuºít
);

206 
	}
}

211 
	$gë_evîythög_‰om_fûe
(c⁄° *
fûíame
, 
pbuf_öfo
 *
∑ckë_buf„r
, 
timevÆ
 *
ts
)

213 
pˇp_t
 *
h™dÀ
;

214 
îrbuf
[
PCAP_ERRBUF_SIZE
];

217 i‡((
h™dÀ
 = 
	`pˇp_›í_ofÊöe
(
fûíame
,
îrbuf
)Ë=
NULL
) {

218 
	`Ârötf
(
°dîr
,"C™'à›íÖˇ∞fûêf‹Ñódög: %s\n",
îrbuf
);

219 
	`exô
(2);

224 i‡(
	`pˇp_di•©ch
(
h™dÀ
, 1, (
pˇp_h™dÀr
Ë
gë_°¨t_time
, (
u_ch¨
 *)
ts
) == -1) {

225 
	`Ârötf
(
°dîr
, "Eº‹Ö¨sög PCAP fûe: %s\n", 
	`pˇp_gëîr
(
h™dÀ
));

226 
	`exô
(2);

230 
	`pˇp_˛o£
(
h™dÀ
);

233 i‡((
h™dÀ
 = 
	`pˇp_›í_ofÊöe
(
fûíame
,
îrbuf
)Ë=
NULL
) {

234 
	`Ârötf
(
°dîr
,"C™'à›íÖˇ∞fûêf‹Ñódög: %s\n",
îrbuf
);

235 
	`exô
(2);

239 
∑ckë_buf„r
->
°¨t
 =Öackë_buf„r->
cuºít
 = 
	`mÆloc
( (
pbuf
));

240 
∑ckë_buf„r
->
°¨t
->
œ°
 = 
NULL
;

243 i‡(
	`pˇp_di•©ch
(
h™dÀ
, -1, (
pˇp_h™dÀr
Ë
gë_∑ckë
, (
u_ch¨
 *)
∑ckë_buf„r
) == -1) {

244 
	`Ârötf
(
°dîr
, "Eº‹Ö¨sög PCAP fûe: %s\n", 
	`pˇp_gëîr
(
h™dÀ
));

245 
	`exô
(2);

249 i‡–
∑ckë_buf„r
->
°¨t
 =∑ckë_buf„r->
cuºít
) {

250 
	`‰ì
(
∑ckë_buf„r
->
cuºít
);

251 
∑ckë_buf„r
->
°¨t
 =Öackë_buf„r->
cuºít
 = 
NULL
;

254 
∑ckë_buf„r
->
íd
 =Öackë_buf„r->
cuºít
->
œ°
;

255 
∑ckë_buf„r
->
íd
->
√xt
 = 
NULL
;

256 
	`‰ì
(
∑ckë_buf„r
->
cuºít
);

258 
	}
}

262 
	$¥öt_øw
(c⁄° 
pbuf_öfo
 *
∑ckë_buf„r
, c⁄° 
cou¡
)

264 c⁄° 
u8
 *
øw
;

265 
x
;

266 
øw
 = (
u8
 *Ë
∑ckë_buf„r
;

267 
	`Ârötf
(
°dout
," ");

268 
x
 = 0; x<
cou¡
; x++)

269 
	`Ârötf
(
°dout
,"%02x ",*(
øw
+
x
));

270 
	}
}

273 
	$¥öt_dúe˘i⁄
(c⁄° 
pbuf_öfo
 *
∑ckë_buf„r
, c⁄° 
ö_addr
 *
ho°_addr
, c⁄° ö_add∏*
u§p_addr
)

275 c⁄° 
ù_hódî
 *ip_header;

278 
ù_hódî
 = (ù_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
);

280 i‡((
ho°_addr
->
s_addr
 =
ù_hódî
->
ù_§c
.s_addrË&& (
u§p_addr
->s_add∏=ù_hódî->
ù_d°
.s_addr))

281 
	`Ârötf
(
°dout
,"Host->USRP");

282 i‡((
ho°_addr
->
s_addr
 =
ù_hódî
->
ù_d°
.s_addrË&& (
u§p_addr
->s_add∏=ù_hódî->
ù_§c
.s_addr))

283 
	`Ârötf
(
°dout
,"USRP->Host");

285 
	`Ârötf
(
°dout
,"UNKNOWN");

286 
	}
}

289 
	$¥öt_size
(c⁄° 
pbuf_öfo
 *
∑ckë_buf„r
)

291 c⁄° 
chdr_hódî
 *chdr_header;

294 
chdr_hódî
 = (chdr_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
);

296 
	`Ârötf
(
°dout
,"Size: %04d ",(
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
SIZE
));

297 
	}
}

300 
	$¥öt_sid
(c⁄° 
pbuf_öfo
 *
∑ckë_buf„r
)

302 c⁄° 
chdr_hódî
 *chdr_header;

303 c⁄° 
chdr_sid
 *chdr_sid;

306 
chdr_hódî
 = (chdr_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
);

309 
chdr_sid
 = (chdr_sid *)&(
chdr_hódî
->chdr_sid);

311 
	`Ârötf
(
°dout
,"%02x.%02x->%02x.%02x",
chdr_sid
->
§c_devi˚
,chdr_sid->
§c_ídpoöt
,chdr_sid->
d°_devi˚
,chdr_sid->
d°_ídpoöt
);

312 
	}
}

315 
	$¥öt_tx_ª•⁄£
(c⁄° 
tx_ª•⁄£
 *tx_response)

317 
	`sw≠öt
(
tx_ª•⁄£
->
îr‹_code
))

319 
TX_ACK
: 
	`Ârötf
(
°dout
,"ACK "); ;

320 
TX_EOB
: 
	`Ârötf
(
°dout
,"EOB "); ;

321 
TX_UNDERRUN
: 
	`Ârötf
(
°dout
,"Underrun "); ;

322 
TX_SEQ_ERROR
: 
	`Ârötf
(
°dout
,"Sequence Error "); ;

323 
TX_TIME_ERROR
: 
	`Ârötf
(
°dout
,"Time Error "); ;

324 
TX_MIDBURST_SEQ_ERROR
: 
	`Ârötf
(
°dout
,"Mid-Burst Seq Errror "); ;

325 : 
	`Ârötf
(
°dout
,"Unknown Error ");

327 
	`Ârötf
(
°dout
,"f‹ SeqID = %03x ",
	`sw≠öt
(
tx_ª•⁄£
->
£q_id
)&0xFFF);

328 
	}
}

333 *
	$ªg_addr_to_«me
(c⁄° 
u32
 
addr
)

335 
x
;

336 
x
 = 0;

337 (
ªg_li°
[
x
].
addr
 !=áddr) && (reg_list[x].addr != 999))

338 
x
++;

339 (
ªg_li°
[
x
].
«me
);

340 
	}
}

343 
	$¥öt_vôa_hódî
(c⁄° 
pbuf_öfo
 *
∑ckë_buf„r
, c⁄° 
ö_addr
 *
ho°_addr
)

345 c⁄° 
ù_hódî
 *ip_header;

346 c⁄° 
chdr_hódî
 *chdr_header;

347 c⁄° 
chdr_sid
 *chdr_sid;

348 c⁄° 
ødio_˘æ_∑ylﬂd
 *radio_ctrl_payload;

349 c⁄° 
ødio_ª•⁄£
 *radio_response;

350 c⁄° 
tx_ª•⁄£
 *tx_response;

351 c⁄° 
§c_Êow_˘æ
 *src_flow_ctrl;

352 c⁄° 
vôa_time
 *vita_time;

353 
dúe˘i⁄
;

354 
u8
 
ídpoöt
;

355 
has_time
;

358 
ù_hódî
 = (ù_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
);

361 
chdr_hódî
 = (chdr_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
);

364 
chdr_sid
 = (chdr_sid *)&(
chdr_hódî
->chdr_sid);

367 i‡(
ù_hódî
->
ù_§c
.
s_addr
 =
ho°_addr
->s_addr)

368 
dúe˘i⁄
 = 
H2U
;

370 
dúe˘i⁄
 = 
U2H
;

375 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
Ë=EXT_CONTEXTË
	`Ârötf
(
°dout
,"Context Ext ");

376 
	`Ârötf
(
°dout
,"IF Data ");

379 i‡(
dúe˘i⁄
==
H2U
)

380 
ídpoöt
 = (
chdr_sid
->
d°_ídpoöt
) & 0x3;

381 i‡(
dúe˘i⁄
==
U2H
)

382 
ídpoöt
 = (
chdr_sid
->
§c_ídpoöt
) & 0x3;

385 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EOB
Ë=EOBË
	`Ârötf
(
°dout
,"EOB ");

386 
	`Ârötf
(
°dout
," ");

389 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
HAS_TIME
) == HAS_TIME) {

390 
vôa_time
 = (vôa_timê*)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
+
CHDR_SIZE
);

391 
	`Ârötf
(
°dout
,"Time=%016lx ",
	`sw≠l⁄g
(
vôa_time
->
time
));

392 
has_time
 = 1;

394 
	`Ârötf
(
°dout
," ");

395 
has_time
 = 0;

398 
	`Ârötf
(
°dout
,"SeqID=%03x ",(
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
)>>16)&0xFFF);

401 i‡(
ídpoöt
 =
RADIO
)

403 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
) != EXT_CONTEXT)

405 i‡(
dúe˘i⁄
 =
H2U
)

407 
	`Ârötf
(
°dout
,"TX IF Data ");

412 
	`Ârötf
(
°dout
,"RX IF Data ");

415 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
) == EXT_CONTEXT)

417 i‡(
dúe˘i⁄
 =
H2U
)

425 
tx_ª•⁄£
 = (tx_ª•⁄£ *Ë(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
+
CHDR_SIZE
+(
has_time
?
VITA_TIME_SIZE
:0));

426 
	`¥öt_tx_ª•⁄£
(
tx_ª•⁄£
);

430 i‡(
ídpoöt
 =
RADIO_CTRL
)

432 
	`Ârötf
(
°dout
,"\t\t\t");

433 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
) != EXT_CONTEXT)

437 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
) == EXT_CONTEXT)

439 i‡(
dúe˘i⁄
 =
H2U
)

441 
ødio_˘æ_∑ylﬂd
 = (ødio_˘æ_∑ylﬂd *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
+
CHDR_SIZE
+(
VITA_TIME_SIZE
*
has_time
));

442 
	`Ârötf
(
°dout
,"RadiÿCå»%s(0x%02x)=0x%08x",
	`ªg_addr_to_«me
(
	`sw≠öt
(
ødio_˘æ_∑ylﬂd
->
addr
)),(
u8
)sw≠öt‘adio_˘æ_∑ylﬂd->addr),sw≠öt‘adio_˘æ_∑ylﬂd->
d©a
));

447 
ødio_ª•⁄£
 = (ødio_ª•⁄£ *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
+
CHDR_SIZE
+(
VITA_TIME_SIZE
*
has_time
));

448 
	`Ârötf
(
°dout
,"RadiÿRe•⁄£ = 0x%016lx",
	`sw≠l⁄g
(
ødio_ª•⁄£
->
d©a
));

452 i‡(
ídpoöt
 =
SRC_FLOW_CTRL
)

454 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
) != EXT_CONTEXT)

458 i‡((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
Ë& 
EXT_CONTEXT
) == EXT_CONTEXT)

460 i‡(
dúe˘i⁄
 =
H2U
)

462 
§c_Êow_˘æ
 = (§c_Êow_˘æ *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
+
CHDR_SIZE
+(
VITA_TIME_SIZE
*
has_time
));

463 
	`Ârötf
(
°dout
,"Sr¯Flow Cå»0x%04x",
	`sw≠öt
(
§c_Êow_˘æ
->
£q_id
));

473 
	}
}

478 
	$gë_c⁄√˘i⁄_ídpoöts
–
pbuf_öfo
 *
∑ckë_buf„r
, 
ö_addr
 *
ho°_addr
, ö_add∏*
u§p_addr
)

480 c⁄° 
ù_hódî
 *ip_header;

481 c⁄° 
chdr_hódî
 *chdr_header;

482 c⁄° 
chdr_sid
 *chdr_sid;

487 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->
°¨t
;

489 
ho°_addr
->
s_addr
 = 0x0;

490 
u§p_addr
->
s_addr
 = 0x0;

492 
∑ckë_buf„r
->
cuºít
 !
NULL
) {

495 
ù_hódî
 = (ù_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
);

498 
chdr_hódî
 = (chdr_hódî *)(
∑ckë_buf„r
->
cuºít
->
∑ylﬂd
+
ETH_SIZE
+
IP_SIZE
+
UDP_SIZE
);

501 
chdr_sid
 = (chdr_sid *)&(
chdr_hódî
->chdr_sid);

511 ((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
) & 0x40000000) != 0x0) ||

512 ((
	`sw≠öt
(
chdr_hódî
->
chdr_ty≥
) & 0x8000) != 0x0) ||

513 ((
	`sw≠öt
(
chdr_hódî
->
chdr_sid
) & 0xFF000000) != 0x0) ||

514 ((
	`sw≠öt
(
chdr_hódî
->
chdr_sid
) & 0x0000FF00) == 0x0)

516 
	`Ârötf
(
°dîr
,"CurrentÖacket isÇot CHDR. Skipping.");

521 i‡((
chdr_sid
->
§c_devi˚
 =0Ë&& (chdr_sid->
d°_devi˚
 != 0))

524 
ho°_addr
->
s_addr
 = 
ù_hódî
->
ù_§c
.s_addr;

525 
u§p_addr
->
s_addr
 = 
ù_hódî
->
ù_d°
.s_addr;

528 i‡((
chdr_sid
->
§c_devi˚
 =0Ë&& (chdr_sid->
d°_devi˚
 != 0))

531 
u§p_addr
->
s_addr
 = 
ù_hódî
->
ù_§c
.s_addr;

532 
ho°_addr
->
s_addr
 = 
ù_hódî
->
ù_d°
.s_addr;

537 
	`Ârötf
(
°dîr
,"MÆf‹med CHDRÖackë, SID i†u√x≥˘ed vÆue: 0x%x",
	`sw≠öt
(
chdr_hódî
->
chdr_sid
));

540 
∑ckë_buf„r
->
cuºít
 =Öackë_buf„r->cuºít->
√xt
;

543 i‡(
ho°_addr
->
s_addr
 == 0) {

544 
	`Ârötf
(
°dîr
, "CouldÇot identify Host/USRP direction in captureánalysis,Éxiting.\n");

545 
	`exô
(2);

547 
	}
}

	@tools/uhd_dump/uhd_dump.h

18 #i‚de‡
_UHD_DUMP_H_


19 
	#_UHD_DUMP_H_


	)

21 
	#FALSE
 0

	)

22 
	#TRUE
 1

	)

23 
	#UNKNOWN
 2

	)

26 
	#H2U
 0

	)

27 
	#U2H
 1

	)

30 
	#RADIO
 0

	)

31 
	#RADIO_CTRL
 1

	)

32 
	#SRC_FLOW_CTRL
 2

	)

33 
	#RESERVED
 3

	)

44 
	#EXT_CONTEXT
 1<<31

	)

45 
	#HAS_TIME
 1<<29

	)

46 
	#EOB
 1<<28

	)

47 
	#SIZE
 (1<<16)-1

	)

51 
	#CHDR_PORT
 49153

	)

53 
	tboﬁ
;

54 
	tu8
;

55 
	tu16
;

56 
	tu32
;

57 
	tu64
;

59 
	uù_addr_decodî
 {

60 
	ms_addr
;

61 
	mo˘ë
[4];

68 
	sëhî√t_hódî
 {

69 
u8
 
	mëh_d°
[6];

70 
u8
 
	mëh_§c
[6];

71 
u16
 
	mëh_typ
;

74 
	#ETH_SIZE
 14

	)

81 
	sù_hódî
 {

82 
u8
 
	mù_vhl
;

83 
u8
 
	mù_tos
;

84 
u16
 
	mù_Àn
;

85 
u16
 
	mù_id
;

86 
u16
 
	mù_off
;

87 
u8
 
	mù_âl
;

88 
u8
 
	mù_¥o
;

89 
u16
 
	mù_sum
;

90 
ö_addr
 
	mù_§c
;

91 
ö_addr
 
	mù_d°
;

94 
	#IP_SIZE
 20

	)

101 
	sudp_hódî
 {

102 
u16
 
	mudp_§c
;

103 
u16
 
	mudp_d°
;

104 
u16
 
	mudp_Àn
;

105 
u16
 
	mudp_sum
;

108 
	#UDP_SIZE
 8

	)

155 
	schdr_hódî
 {

156 
u32
 
	mchdr_ty≥
;

157 
u32
 
	mchdr_sid
;

160 
	#CHDR_SIZE
 8

	)

165 
	schdr_sid
 {

166 
u8
 
	m§c_devi˚
;

167 
u8
 
	m§c_ídpoöt
;

168 
u8
 
	md°_devi˚
;

169 
u8
 
	md°_ídpoöt
;

172 
	sødio_˘æ_∑ylﬂd
 {

173 
u32
 
	maddr
;

174 
u32
 
	md©a
;

177 
	sødio_ª•⁄£
 {

178 
u64
 
	md©a
;

181 
	stx_ª•⁄£
 {

182 
u32
 
	mîr‹_code
;

183 
u32
 
	m£q_id
;

186 
	#TX_ACK
 0x00

	)

187 
	#TX_EOB
 0x01

	)

188 
	#TX_UNDERRUN
 0x02

	)

189 
	#TX_SEQ_ERROR
 0x04

	)

190 
	#TX_TIME_ERROR
 0x08

	)

191 
	#TX_MIDBURST_SEQ_ERROR
 0x20

	)

193 
	s§c_Êow_˘æ
 {

194 
u32
 
	munu£d
;

195 
u32
 
	m£q_id
;

198 
	svôa_time
 {

199 
u64
 
	mtime
;

202 
	#VITA_TIME_SIZE
 8

	)

203 
	#RADIO_CTRL_SIZE
 8

	)

204 
	#RADIO_RESPONSE_SIZE
 4

	)

211 
	spbuf
 {

212 
pbuf
 *
	m√xt
;

213 
pbuf
 *
	mœ°
;

214 
timevÆ
 
	mts
;

215 
	msize
;

216 
	m‹ig_size
;

217 *
	m∑ylﬂd
;

220 
	spbuf_öfo
 {

221 
pbuf
 *
	m°¨t
;

222 
pbuf
 *
	mcuºít
;

223 
pbuf
 *
	míd
;

226 
	sødio_˘æ_«mes
 {

227 
u32
 
	maddr
;

228 *
	m«me
;

236 
sw≠l⁄g
 ();

237 
sw≠öt
 ();

238 
sw≠sh‹t
 ();

239 *
f‹m©_gmt
(c⁄° 
timevÆ
 *, *);

240 
timevÆ2doubÀ
(
timevÆ
 *);

241 
ªœtive_time
(
timevÆ
 *, timeval *);

242 
gë_∑ckë
(
pbuf_öfo
 * , c⁄° 
pˇp_pkthdr
 *, c⁄° 
u_ch¨
 *);

243 
gë_°¨t_time
(
timevÆ
 * , c⁄° 
pˇp_pkthdr
 *, c⁄° 
u_ch¨
 *);

244 
gë_udp_p‹t_‰om_fûe
(
u16
, c⁄° *, 
pbuf_öfo
 *, 
timevÆ
 *);

245 
gë_evîythög_‰om_fûe
(c⁄° *, 
pbuf_öfo
 *, 
timevÆ
 *);

246 
gë_c⁄√˘i⁄_ídpoöts
–
pbuf_öfo
 *, 
ö_addr
 *, in_addr *);

247 
¥öt_dúe˘i⁄
(c⁄° 
pbuf_öfo
 *, c⁄° 
ö_addr
 *, const in_addr *);

248 
¥öt_size
–c⁄° 
pbuf_öfo
 *);

249 
¥öt_sid
–c⁄° 
pbuf_öfo
 *);

250 
¥öt_vôa_hódî
–c⁄° 
pbuf_öfo
 *, c⁄° 
ö_addr
 *);

	@tools/uhd_dump/usrp3_regs.h

18 c⁄° 
ødio_˘æ_«mes
 
	gªg_li°
[] =

	@
1
.
0
641
26338
firmware/e300/battery/adc.c
firmware/e300/battery/adc.h
firmware/e300/battery/bq2419x.c
firmware/e300/battery/bq2419x.h
firmware/e300/battery/eeprom.c
firmware/e300/battery/eeprom.h
firmware/e300/battery/fpga.c
firmware/e300/battery/fpga.h
firmware/e300/battery/i2c_twi.c
firmware/e300/battery/i2c_twi.h
firmware/e300/battery/interrupt.c
firmware/e300/battery/interrupt.h
firmware/e300/battery/io.c
firmware/e300/battery/io.h
firmware/e300/battery/led.c
firmware/e300/battery/led.h
firmware/e300/battery/ltc294x.c
firmware/e300/battery/ltc294x.h
firmware/e300/battery/ltc3675.c
firmware/e300/battery/ltc3675.h
firmware/e300/battery/main.c
firmware/e300/battery/mcu_settings.h
firmware/e300/battery/pmu.c
firmware/e300/battery/pmu.h
firmware/e300/battery/spi.c
firmware/e300/battery/spi.h
firmware/e300/battery/timer.c
firmware/e300/battery/timer.h
firmware/e300/battery/tps54478.c
firmware/e300/battery/tps54478.h
firmware/e300/battery/utils.h
firmware/e300/rev_b/bq24190.c
firmware/e300/rev_b/bq24190.h
firmware/e300/rev_b/config.h
firmware/e300/rev_b/debug.c
firmware/e300/rev_b/debug.h
firmware/e300/rev_b/error.h
firmware/e300/rev_b/global.h
firmware/e300/rev_b/i2c.c
firmware/e300/rev_b/i2c.h
firmware/e300/rev_b/io.c
firmware/e300/rev_b/io.h
firmware/e300/rev_b/ltc3675.c
firmware/e300/rev_b/ltc3675.h
firmware/e300/rev_b/ltc4155.c
firmware/e300/rev_b/ltc4155.h
firmware/e300/rev_b/main.c
firmware/e300/rev_b/power.c
firmware/e300/rev_b/power.h
firmware/e300/rev_c/bq24190.c
firmware/e300/rev_c/bq24190.h
firmware/e300/rev_c/config.h
firmware/e300/rev_c/debug.c
firmware/e300/rev_c/debug.h
firmware/e300/rev_c/error.h
firmware/e300/rev_c/global.h
firmware/e300/rev_c/i2c.c
firmware/e300/rev_c/i2c.h
firmware/e300/rev_c/io.c
firmware/e300/rev_c/io.h
firmware/e300/rev_c/ltc3675.c
firmware/e300/rev_c/ltc3675.h
firmware/e300/rev_c/ltc4155.c
firmware/e300/rev_c/ltc4155.h
firmware/e300/rev_c/main.c
firmware/e300/rev_c/power.c
firmware/e300/rev_c/power.h
firmware/fx2/b100/board_specific.c
firmware/fx2/b100/eeprom_io.c
firmware/fx2/b100/eeprom_io.h
firmware/fx2/b100/fpga_load.c
firmware/fx2/b100/fpga_rev2.c
firmware/fx2/b100/fpga_rev2.h
firmware/fx2/b100/gpif.c
firmware/fx2/b100/usrp_common.c
firmware/fx2/b100/usrp_main.c
firmware/fx2/b100/usrp_regs.h
firmware/fx2/common/delay.c
firmware/fx2/common/delay.h
firmware/fx2/common/eeprom_init.c
firmware/fx2/common/fpga.h
firmware/fx2/common/fpga_load.h
firmware/fx2/common/fpga_regs0.h
firmware/fx2/common/fpga_regs_common.h
firmware/fx2/common/fpga_regs_standard.h
firmware/fx2/common/fx2regs.h
firmware/fx2/common/fx2utils.c
firmware/fx2/common/fx2utils.h
firmware/fx2/common/i2c.c
firmware/fx2/common/i2c.h
firmware/fx2/common/init_gpif.c
firmware/fx2/common/isr.c
firmware/fx2/common/isr.h
firmware/fx2/common/spi.c
firmware/fx2/common/spi.h
firmware/fx2/common/syncdelay.h
firmware/fx2/common/timer.c
firmware/fx2/common/timer.h
firmware/fx2/common/usb_common.c
firmware/fx2/common/usb_common.h
firmware/fx2/common/usb_descriptors.h
firmware/fx2/common/usb_requests.h
firmware/fx2/common/usrp_commands.h
firmware/fx2/common/usrp_common.h
firmware/fx2/common/usrp_config.h
firmware/fx2/common/usrp_globals.h
firmware/fx2/common/usrp_i2c_addr.h
firmware/fx2/common/usrp_ids.h
firmware/fx2/common/usrp_interfaces.h
firmware/fx2/common/usrp_spi_defs.h
firmware/fx2/usrp1/board_specific.c
firmware/fx2/usrp1/eeprom_io.c
firmware/fx2/usrp1/eeprom_io.h
firmware/fx2/usrp1/fpga_load.c
firmware/fx2/usrp1/fpga_rev2.c
firmware/fx2/usrp1/fpga_rev2.h
firmware/fx2/usrp1/gpif.c
firmware/fx2/usrp1/usrp_common.c
firmware/fx2/usrp1/usrp_gpif.c
firmware/fx2/usrp1/usrp_gpif_inline.h
firmware/fx2/usrp1/usrp_main.c
firmware/fx2/usrp1/usrp_regs.h
firmware/fx3/b200/b200_gpifconfig.h
firmware/fx3/b200/b200_i2c.c
firmware/fx3/b200/b200_i2c.h
firmware/fx3/b200/b200_main.c
firmware/fx3/b200/b200_main.h
firmware/fx3/b200/b200_usb_descriptors.c
firmware/fx3/gpif2_designer/b200_v2.cydsn/cyfxgpif2config.h
firmware/octoclock/bootloader/main.c
firmware/octoclock/include/arch/cc.h
firmware/octoclock/include/arch/perf.h
firmware/octoclock/include/avrlibdefs.h
firmware/octoclock/include/avrlibtypes.h
firmware/octoclock/include/clkdist.h
firmware/octoclock/include/compiler.h
firmware/octoclock/include/debug.h
firmware/octoclock/include/gpsdo.h
firmware/octoclock/include/lwip/api.h
firmware/octoclock/include/lwip/api_msg.h
firmware/octoclock/include/lwip/arch.h
firmware/octoclock/include/lwip/autoip.h
firmware/octoclock/include/lwip/debug.h
firmware/octoclock/include/lwip/def.h
firmware/octoclock/include/lwip/dhcp.h
firmware/octoclock/include/lwip/dns.h
firmware/octoclock/include/lwip/err.h
firmware/octoclock/include/lwip/icmp.h
firmware/octoclock/include/lwip/igmp.h
firmware/octoclock/include/lwip/inet.h
firmware/octoclock/include/lwip/inet_chksum.h
firmware/octoclock/include/lwip/init.h
firmware/octoclock/include/lwip/ip.h
firmware/octoclock/include/lwip/ip_addr.h
firmware/octoclock/include/lwip/ip_frag.h
firmware/octoclock/include/lwip/mem.h
firmware/octoclock/include/lwip/memp.h
firmware/octoclock/include/lwip/memp_std.h
firmware/octoclock/include/lwip/netbuf.h
firmware/octoclock/include/lwip/netdb.h
firmware/octoclock/include/lwip/netif.h
firmware/octoclock/include/lwip/netifapi.h
firmware/octoclock/include/lwip/opt.h
firmware/octoclock/include/lwip/pbuf.h
firmware/octoclock/include/lwip/raw.h
firmware/octoclock/include/lwip/sio.h
firmware/octoclock/include/lwip/snmp.h
firmware/octoclock/include/lwip/snmp_asn1.h
firmware/octoclock/include/lwip/snmp_msg.h
firmware/octoclock/include/lwip/snmp_structs.h
firmware/octoclock/include/lwip/sockets.h
firmware/octoclock/include/lwip/stats.h
firmware/octoclock/include/lwip/sys.h
firmware/octoclock/include/lwip/tcp.h
firmware/octoclock/include/lwip/tcpip.h
firmware/octoclock/include/lwip/udp.h
firmware/octoclock/include/lwipopts.h
firmware/octoclock/include/lwippools.h
firmware/octoclock/include/net/enc28j60.h
firmware/octoclock/include/net/eth_hdr.h
firmware/octoclock/include/net/eth_mac_addr.h
firmware/octoclock/include/net/ethertype.h
firmware/octoclock/include/net/if_arp.h
firmware/octoclock/include/net/socket_address.h
firmware/octoclock/include/net/udp_handlers.h
firmware/octoclock/include/network.h
firmware/octoclock/include/octoclock.h
firmware/octoclock/include/serial.h
firmware/octoclock/include/state.h
firmware/octoclock/include/usart.h
firmware/octoclock/lib/arp_cache.c
firmware/octoclock/lib/arp_cache.h
firmware/octoclock/lib/clkdist.c
firmware/octoclock/lib/enc28j60.c
firmware/octoclock/lib/gpsdo.c
firmware/octoclock/lib/init.c
firmware/octoclock/lib/network.c
firmware/octoclock/lib/serial.c
firmware/octoclock/lib/state.c
firmware/octoclock/lib/udp_handlers.c
firmware/octoclock/lib/usart.c
firmware/octoclock/octoclock_r4/octoclock_r4_main.c
firmware/usrp2/apps/txrx_uhd.c
firmware/usrp2/lib/_exit.c
firmware/usrp2/lib/abort.c
firmware/usrp2/lib/ad9510.c
firmware/usrp2/lib/ad9510.h
firmware/usrp2/lib/arp_cache.c
firmware/usrp2/lib/arp_cache.h
firmware/usrp2/lib/banal.c
firmware/usrp2/lib/banal.h
firmware/usrp2/lib/clocks.c
firmware/usrp2/lib/clocks.h
firmware/usrp2/lib/compiler.h
firmware/usrp2/lib/eeprom.c
firmware/usrp2/lib/eth_addrs.c
firmware/usrp2/lib/eth_mac.c
firmware/usrp2/lib/eth_mac.h
firmware/usrp2/lib/ethernet.h
firmware/usrp2/lib/ethertype.h
firmware/usrp2/lib/exit.c
firmware/usrp2/lib/hal_io.c
firmware/usrp2/lib/hal_io.h
firmware/usrp2/lib/hal_uart.c
firmware/usrp2/lib/hal_uart.h
firmware/usrp2/lib/i2c.c
firmware/usrp2/lib/i2c.h
firmware/usrp2/lib/i2c_async.c
firmware/usrp2/lib/i2c_async.h
firmware/usrp2/lib/if_arp.h
firmware/usrp2/lib/ihex.c
firmware/usrp2/lib/ihex.h
firmware/usrp2/lib/mdelay.c
firmware/usrp2/lib/mdelay.h
firmware/usrp2/lib/memcpy_wa.c
firmware/usrp2/lib/memcpy_wa.h
firmware/usrp2/lib/memory_map.h
firmware/usrp2/lib/memset_wa.c
firmware/usrp2/lib/memset_wa.h
firmware/usrp2/lib/net/eth_mac_addr.h
firmware/usrp2/lib/net/padded_eth_hdr.h
firmware/usrp2/lib/net/socket_address.h
firmware/usrp2/lib/net_common.c
firmware/usrp2/lib/net_common.h
firmware/usrp2/lib/nonstdio.c
firmware/usrp2/lib/nonstdio.h
firmware/usrp2/lib/pic.c
firmware/usrp2/lib/pic.h
firmware/usrp2/lib/pkt_ctrl.c
firmware/usrp2/lib/pkt_ctrl.h
firmware/usrp2/lib/print_addrs.c
firmware/usrp2/lib/print_buffer.c
firmware/usrp2/lib/print_rmon_regs.c
firmware/usrp2/lib/print_rmon_regs.h
firmware/usrp2/lib/printf.c
firmware/usrp2/lib/spi.c
firmware/usrp2/lib/spi.h
firmware/usrp2/lib/stdint.h
firmware/usrp2/lib/stdio.h
firmware/usrp2/lib/u2_init.c
firmware/usrp2/lib/u2_init.h
firmware/usrp2/lib/udp_fw_update.h
firmware/usrp2/lib/udp_uart.c
firmware/usrp2/lib/udp_uart.h
firmware/usrp2/lwip/lwip-1.3.1/src/api/api_lib.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/api_msg.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/err.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/netbuf.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/netdb.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/netifapi.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/sockets.c
firmware/usrp2/lwip/lwip-1.3.1/src/api/tcpip.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/dhcp.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/dns.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/init.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/autoip.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/icmp.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/igmp.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/inet.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/inet_chksum.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/ip.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/ip_addr.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv4/ip_frag.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/icmp6.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/inet6.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/ip6.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/ipv6/ip6_addr.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/mem.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/memp.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/netif.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/pbuf.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/raw.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/asn1_dec.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/asn1_enc.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/mib2.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/mib_structs.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/msg_in.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/snmp/msg_out.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/stats.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/sys.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/tcp.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/tcp_in.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/tcp_out.c
firmware/usrp2/lwip/lwip-1.3.1/src/core/udp.c
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/autoip.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/icmp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/igmp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet_chksum.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_addr.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_frag.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/icmp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/inet.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip_addr.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/api.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/api_msg.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/arch.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/debug.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/def.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/dhcp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/dns.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/err.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/init.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/mem.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/memp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/memp_std.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netbuf.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netdb.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netif.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/netifapi.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/opt.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/pbuf.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/raw.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/sio.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp_asn1.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp_msg.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/snmp_structs.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/sockets.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/stats.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/sys.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/tcp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/tcpip.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/lwip/udp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/etharp.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/loopif.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/ppp_oe.h
firmware/usrp2/lwip/lwip-1.3.1/src/include/netif/slipif.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/etharp.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ethernetif.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/loopif.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/auth.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/auth.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chap.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chap.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chpms.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/chpms.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/fsm.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/fsm.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ipcp.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ipcp.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/lcp.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/lcp.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/magic.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/magic.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/md5.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/md5.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/pap.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/pap.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ppp.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ppp.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/ppp_oe.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/pppdebug.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/randm.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/randm.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/vj.c
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/vj.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/ppp/vjbsdhdr.h
firmware/usrp2/lwip/lwip-1.3.1/src/netif/slipif.c
firmware/usrp2/lwip/lwipopts.h
firmware/usrp2/lwip/lwippools.h
firmware/usrp2/lwip_port/arch/cc.h
firmware/usrp2/lwip_port/arch/perf.h
firmware/usrp2/lwip_port/netif/eth_driver.c
firmware/usrp2/lwip_port/netif/eth_driver.h
firmware/usrp2/usrp2/eth_phy.h
firmware/usrp2/usrp2/ethernet.c
firmware/usrp2/usrp2/sd.c
firmware/usrp2/usrp2/sd.h
firmware/usrp2/usrp2p/bootconfig.h
firmware/usrp2/usrp2p/bootloader_utils.c
firmware/usrp2/usrp2p/bootloader_utils.h
firmware/usrp2/usrp2p/eth_phy.h
firmware/usrp2/usrp2p/ethernet.c
firmware/usrp2/usrp2p/spi_flash.c
firmware/usrp2/usrp2p/spi_flash.h
firmware/usrp2/usrp2p/spi_flash_private.h
firmware/usrp2/usrp2p/spi_flash_read.c
firmware/usrp2/usrp2p/spif.c
firmware/usrp2/usrp2p/u2p_init.c
firmware/usrp2/usrp2p/u2p_init.h
firmware/usrp2/usrp2p/udp_fw_update.c
firmware/usrp2/usrp2p/xilinx_s3_icap.c
firmware/usrp2/usrp2p/xilinx_s3_icap.h
firmware/usrp3/include/chinch.h
firmware/usrp3/include/cron.h
firmware/usrp3/include/ethernet.h
firmware/usrp3/include/ethertype.h
firmware/usrp3/include/flash/spi_flash.h
firmware/usrp3/include/flash/spif_spsn_s25flxx.h
firmware/usrp3/include/if_arp.h
firmware/usrp3/include/link_state_route_proto.h
firmware/usrp3/include/print_addrs.h
firmware/usrp3/include/printf.h
firmware/usrp3/include/stdint.h
firmware/usrp3/include/trace.h
firmware/usrp3/include/u3_net_stack.h
firmware/usrp3/include/udp_uart.h
firmware/usrp3/include/wb_i2c.h
firmware/usrp3/include/wb_pkt_iface64.h
firmware/usrp3/include/wb_soft_reg.h
firmware/usrp3/include/wb_spi.h
firmware/usrp3/include/wb_uart.h
firmware/usrp3/include/wb_utils.h
firmware/usrp3/include/xge_mac.h
firmware/usrp3/include/xge_phy.h
firmware/usrp3/lib/chinch.c
firmware/usrp3/lib/cron.c
firmware/usrp3/lib/ethernet.c
firmware/usrp3/lib/flash/spi_flash.c
firmware/usrp3/lib/flash/spif_spsn_s25flxx.c
firmware/usrp3/lib/fw_comm_protocol.c
firmware/usrp3/lib/link_state_route_proto.c
firmware/usrp3/lib/print_addrs.c
firmware/usrp3/lib/printf.c
firmware/usrp3/lib/u3_net_stack.c
firmware/usrp3/lib/udp_uart.c
firmware/usrp3/lib/wb_i2c.c
firmware/usrp3/lib/wb_pkt_iface64.c
firmware/usrp3/lib/wb_spi.c
firmware/usrp3/lib/wb_uart.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/api_lib.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/api_msg.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/err.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/netbuf.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/netdb.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/netifapi.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/sockets.c
firmware/usrp3/lwip/lwip-1.3.1/src/api/tcpip.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/dhcp.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/dns.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/init.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/autoip.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/icmp.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/igmp.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/inet.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/inet_chksum.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/ip.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/ip_addr.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv4/ip_frag.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/icmp6.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/inet6.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/ip6.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/ipv6/ip6_addr.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/mem.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/memp.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/netif.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/pbuf.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/raw.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/asn1_dec.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/asn1_enc.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/mib2.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/mib_structs.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/msg_in.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/snmp/msg_out.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/stats.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/sys.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/tcp.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/tcp_in.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/tcp_out.c
firmware/usrp3/lwip/lwip-1.3.1/src/core/udp.c
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/autoip.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/icmp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/igmp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/inet_chksum.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_addr.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv4/lwip/ip_frag.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/icmp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/inet.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/ipv6/lwip/ip_addr.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/api.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/api_msg.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/arch.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/debug.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/def.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/dhcp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/dns.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/err.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/init.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/mem.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/memp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/memp_std.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netbuf.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netdb.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netif.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/netifapi.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/opt.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/pbuf.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/raw.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/sio.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp_asn1.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp_msg.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/snmp_structs.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/sockets.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/stats.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/sys.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/tcp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/tcpip.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/lwip/udp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/etharp.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/loopif.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/ppp_oe.h
firmware/usrp3/lwip/lwip-1.3.1/src/include/netif/slipif.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/etharp.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ethernetif.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/loopif.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/auth.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/auth.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chap.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chap.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chpms.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/chpms.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/fsm.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/fsm.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ipcp.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ipcp.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/lcp.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/lcp.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/magic.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/magic.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/md5.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/md5.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/pap.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/pap.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ppp.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ppp.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/ppp_oe.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/pppdebug.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/randm.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/randm.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/vj.c
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/vj.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/ppp/vjbsdhdr.h
firmware/usrp3/lwip/lwip-1.3.1/src/netif/slipif.c
firmware/usrp3/lwip/lwipopts.h
firmware/usrp3/lwip/lwippools.h
firmware/usrp3/lwip_port/arch/cc.h
firmware/usrp3/lwip_port/arch/perf.h
firmware/usrp3/lwip_port/netif/eth_driver.c
firmware/usrp3/lwip_port/netif/eth_driver.h
firmware/usrp3/n230/n230_eeprom.c
firmware/usrp3/n230/n230_eth_handlers.c
firmware/usrp3/n230/n230_eth_handlers.h
firmware/usrp3/n230/n230_init.c
firmware/usrp3/n230/n230_init.h
firmware/usrp3/n230/n230_main.c
firmware/usrp3/x300/x300_defs.h
firmware/usrp3/x300/x300_init.c
firmware/usrp3/x300/x300_init.h
firmware/usrp3/x300/x300_main.c
host/build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c
host/build/CMakeFiles/feature_tests.c
host/build/include/config.h
host/cmake/msvc/stdbool.h
host/examples/getopt/getopt.c
host/examples/getopt/getopt.h
host/examples/rx_samples_c.c
host/examples/tx_samples_c.c
host/include/uhd.h
host/include/uhd/config.h
host/include/uhd/error.h
host/include/uhd/transport/nirio/nifpga_lvbitx.h
host/include/uhd/transport/nirio/nirio_driver_iface.h
host/include/uhd/transport/nirio/nirio_err_template.h
host/include/uhd/transport/nirio/nirio_fifo.h
host/include/uhd/transport/nirio/nirio_quirks.h
host/include/uhd/transport/nirio/nirio_resource_manager.h
host/include/uhd/transport/nirio/niriok_proxy.h
host/include/uhd/transport/nirio/niriok_proxy_impl_v1.h
host/include/uhd/transport/nirio/niriok_proxy_impl_v2.h
host/include/uhd/transport/nirio/niusrprio_session.h
host/include/uhd/transport/nirio/status.h
host/include/uhd/types/metadata.h
host/include/uhd/types/ranges.h
host/include/uhd/types/sensors.h
host/include/uhd/types/string_vector.h
host/include/uhd/types/tune_request.h
host/include/uhd/types/tune_result.h
host/include/uhd/types/usrp_info.h
host/include/uhd/usrp/dboard_eeprom.h
host/include/uhd/usrp/mboard_eeprom.h
host/include/uhd/usrp/subdev_spec.h
host/include/uhd/usrp/usrp.h
host/include/uhd/usrp_clock/usrp_clock.h
host/include/uhd/utils/thread_priority.h
host/lib/usrp/common/ad9361_driver/ad9361_client.h
host/lib/usrp/common/ad9361_driver/ad9361_device.h
host/lib/usrp/common/ad9361_driver/ad9361_filter_taps.h
host/lib/usrp/common/ad9361_driver/ad9361_gain_tables.h
host/lib/usrp/common/ad9361_driver/ad9361_synth_lut.h
host/lib/usrp/common/fw_comm_protocol.h
host/lib/usrp/e100/include/linux/usrp_e.h
host/lib/usrp/n230/n230_defaults.h
host/lib/usrp/n230/n230_eeprom.h
host/lib/usrp/n230/n230_fpga_defs.h
host/lib/usrp/n230/n230_fw_defs.h
host/lib/usrp/n230/n230_fw_host_iface.h
host/lib/usrp/usrp2/fw_common.h
host/lib/usrp/x300/cdecode.c
host/lib/usrp/x300/cdecode.h
host/lib/usrp/x300/x300_fw_common.h
host/lib/usrp_clock/octoclock/common.h
host/tests/eeprom_c_test.c
host/tests/ranges_c_test.c
host/tests/sensors_c_test.c
host/tests/string_vector_c_test.c
host/tests/subdev_spec_c_test.c
tools/dissectors/packet-chdr.c
tools/dissectors/packet-octoclock.c
tools/dissectors/packet-zpu.c
tools/dissectors/zpu_addr_names.h
tools/uhd_dump/chdr_log.c
tools/uhd_dump/uhd_dump.c
tools/uhd_dump/uhd_dump.h
tools/uhd_dump/usrp3_regs.h
